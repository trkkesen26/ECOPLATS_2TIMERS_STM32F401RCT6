
2TIMERS_ECOPLAST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000132a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011c4  08013448  08013448  00023448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801460c  0801460c  00030280  2**0
                  CONTENTS
  4 .ARM          00000008  0801460c  0801460c  0002460c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014614  08014614  00030280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014614  08014614  00024614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014618  08014618  00024618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000280  20000000  0801461c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000036e0  20000280  0801489c  00030280  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003960  0801489c  00033960  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030280  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e8d5  00000000  00000000  000302b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ec9  00000000  00000000  0004eb85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b30  00000000  00000000  00053a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019a0  00000000  00000000  0005557e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cd67  00000000  00000000  00056f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000238b4  00000000  00000000  00073c85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f04a  00000000  00000000  00097539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00136583  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000086ac  00000000  00000000  001365d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000280 	.word	0x20000280
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801342c 	.word	0x0801342c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000284 	.word	0x20000284
 80001dc:	0801342c 	.word	0x0801342c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001012:	4804      	ldr	r0, [pc, #16]	; (8001024 <SELECT+0x1c>)
 8001014:	f003 f8b2 	bl	800417c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001018:	2001      	movs	r0, #1
 800101a:	f002 fdf5 	bl	8003c08 <HAL_Delay>
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40020400 	.word	0x40020400

08001028 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800102c:	2201      	movs	r2, #1
 800102e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001032:	4804      	ldr	r0, [pc, #16]	; (8001044 <DESELECT+0x1c>)
 8001034:	f003 f8a2 	bl	800417c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001038:	2001      	movs	r0, #1
 800103a:	f002 fde5 	bl	8003c08 <HAL_Delay>
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40020400 	.word	0x40020400

08001048 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001052:	bf00      	nop
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <SPI_TxByte+0x30>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b02      	cmp	r3, #2
 8001060:	d1f8      	bne.n	8001054 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001062:	1df9      	adds	r1, r7, #7
 8001064:	2364      	movs	r3, #100	; 0x64
 8001066:	2201      	movs	r2, #1
 8001068:	4803      	ldr	r0, [pc, #12]	; (8001078 <SPI_TxByte+0x30>)
 800106a:	f004 f9b4 	bl	80053d6 <HAL_SPI_Transmit>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	2000353c 	.word	0x2000353c

0800107c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001088:	bf00      	nop
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <SPI_TxBuffer+0x30>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b02      	cmp	r3, #2
 8001096:	d1f8      	bne.n	800108a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001098:	887a      	ldrh	r2, [r7, #2]
 800109a:	2364      	movs	r3, #100	; 0x64
 800109c:	6879      	ldr	r1, [r7, #4]
 800109e:	4803      	ldr	r0, [pc, #12]	; (80010ac <SPI_TxBuffer+0x30>)
 80010a0:	f004 f999 	bl	80053d6 <HAL_SPI_Transmit>
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	2000353c 	.word	0x2000353c

080010b0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80010b6:	23ff      	movs	r3, #255	; 0xff
 80010b8:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80010ba:	bf00      	nop
 80010bc:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <SPI_RxByte+0x34>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d1f8      	bne.n	80010bc <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80010ca:	1dba      	adds	r2, r7, #6
 80010cc:	1df9      	adds	r1, r7, #7
 80010ce:	2364      	movs	r3, #100	; 0x64
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2301      	movs	r3, #1
 80010d4:	4803      	ldr	r0, [pc, #12]	; (80010e4 <SPI_RxByte+0x34>)
 80010d6:	f004 fbcb 	bl	8005870 <HAL_SPI_TransmitReceive>

	return data;
 80010da:	79bb      	ldrb	r3, [r7, #6]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	2000353c 	.word	0x2000353c

080010e8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80010f0:	f7ff ffde 	bl	80010b0 <SPI_RxByte>
 80010f4:	4603      	mov	r3, r0
 80010f6:	461a      	mov	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	701a      	strb	r2, [r3, #0]
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <SD_ReadyWait+0x30>)
 800110c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001110:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001112:	f7ff ffcd 	bl	80010b0 <SPI_RxByte>
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	2bff      	cmp	r3, #255	; 0xff
 800111e:	d003      	beq.n	8001128 <SD_ReadyWait+0x24>
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <SD_ReadyWait+0x30>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1f4      	bne.n	8001112 <SD_ReadyWait+0xe>

	return res;
 8001128:	79fb      	ldrb	r3, [r7, #7]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2000029e 	.word	0x2000029e

08001138 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800113e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001142:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001144:	f7ff ff70 	bl	8001028 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001148:	2300      	movs	r3, #0
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	e005      	b.n	800115a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800114e:	20ff      	movs	r0, #255	; 0xff
 8001150:	f7ff ff7a 	bl	8001048 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	3301      	adds	r3, #1
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	2b09      	cmp	r3, #9
 800115e:	ddf6      	ble.n	800114e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001160:	f7ff ff52 	bl	8001008 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001164:	2340      	movs	r3, #64	; 0x40
 8001166:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001178:	2395      	movs	r3, #149	; 0x95
 800117a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800117c:	463b      	mov	r3, r7
 800117e:	2106      	movs	r1, #6
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff7b 	bl	800107c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001186:	e002      	b.n	800118e <SD_PowerOn+0x56>
	{
		cnt--;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	3b01      	subs	r3, #1
 800118c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800118e:	f7ff ff8f 	bl	80010b0 <SPI_RxByte>
 8001192:	4603      	mov	r3, r0
 8001194:	2b01      	cmp	r3, #1
 8001196:	d002      	beq.n	800119e <SD_PowerOn+0x66>
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f4      	bne.n	8001188 <SD_PowerOn+0x50>
	}

	DESELECT();
 800119e:	f7ff ff43 	bl	8001028 <DESELECT>
	SPI_TxByte(0XFF);
 80011a2:	20ff      	movs	r0, #255	; 0xff
 80011a4:	f7ff ff50 	bl	8001048 <SPI_TxByte>

	PowerFlag = 1;
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <SD_PowerOn+0x80>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	701a      	strb	r2, [r3, #0]
}
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200002a1 	.word	0x200002a1

080011bc <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80011c0:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <SD_PowerOff+0x14>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	200002a1 	.word	0x200002a1

080011d4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
	return PowerFlag;
 80011d8:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <SD_CheckPower+0x14>)
 80011da:	781b      	ldrb	r3, [r3, #0]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	200002a1 	.word	0x200002a1

080011ec <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <SD_RxDataBlock+0x58>)
 80011f8:	22c8      	movs	r2, #200	; 0xc8
 80011fa:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80011fc:	f7ff ff58 	bl	80010b0 <SPI_RxByte>
 8001200:	4603      	mov	r3, r0
 8001202:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	2bff      	cmp	r3, #255	; 0xff
 8001208:	d103      	bne.n	8001212 <SD_RxDataBlock+0x26>
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <SD_RxDataBlock+0x58>)
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f4      	bne.n	80011fc <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	2bfe      	cmp	r3, #254	; 0xfe
 8001216:	d001      	beq.n	800121c <SD_RxDataBlock+0x30>
 8001218:	2300      	movs	r3, #0
 800121a:	e00f      	b.n	800123c <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	607a      	str	r2, [r7, #4]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff60 	bl	80010e8 <SPI_RxBytePtr>
	} while(len--);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	1e5a      	subs	r2, r3, #1
 800122c:	603a      	str	r2, [r7, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f4      	bne.n	800121c <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8001232:	f7ff ff3d 	bl	80010b0 <SPI_RxByte>
	SPI_RxByte();
 8001236:	f7ff ff3b 	bl	80010b0 <SPI_RxByte>

	return TRUE;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2000029c 	.word	0x2000029c

08001248 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001258:	f7ff ff54 	bl	8001104 <SD_ReadyWait>
 800125c:	4603      	mov	r3, r0
 800125e:	2bff      	cmp	r3, #255	; 0xff
 8001260:	d001      	beq.n	8001266 <SD_TxDataBlock+0x1e>
 8001262:	2300      	movs	r3, #0
 8001264:	e02f      	b.n	80012c6 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001266:	78fb      	ldrb	r3, [r7, #3]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff feed 	bl	8001048 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800126e:	78fb      	ldrb	r3, [r7, #3]
 8001270:	2bfd      	cmp	r3, #253	; 0xfd
 8001272:	d020      	beq.n	80012b6 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001274:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff feff 	bl	800107c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800127e:	f7ff ff17 	bl	80010b0 <SPI_RxByte>
		SPI_RxByte();
 8001282:	f7ff ff15 	bl	80010b0 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001286:	e00b      	b.n	80012a0 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001288:	f7ff ff12 	bl	80010b0 <SPI_RxByte>
 800128c:	4603      	mov	r3, r0
 800128e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	f003 031f 	and.w	r3, r3, #31
 8001296:	2b05      	cmp	r3, #5
 8001298:	d006      	beq.n	80012a8 <SD_TxDataBlock+0x60>
			i++;
 800129a:	7bbb      	ldrb	r3, [r7, #14]
 800129c:	3301      	adds	r3, #1
 800129e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80012a0:	7bbb      	ldrb	r3, [r7, #14]
 80012a2:	2b40      	cmp	r3, #64	; 0x40
 80012a4:	d9f0      	bls.n	8001288 <SD_TxDataBlock+0x40>
 80012a6:	e000      	b.n	80012aa <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80012a8:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80012aa:	bf00      	nop
 80012ac:	f7ff ff00 	bl	80010b0 <SPI_RxByte>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0fa      	beq.n	80012ac <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	f003 031f 	and.w	r3, r3, #31
 80012bc:	2b05      	cmp	r3, #5
 80012be:	d101      	bne.n	80012c4 <SD_TxDataBlock+0x7c>
 80012c0:	2301      	movs	r3, #1
 80012c2:	e000      	b.n	80012c6 <SD_TxDataBlock+0x7e>

	return FALSE;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b084      	sub	sp, #16
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4603      	mov	r3, r0
 80012d6:	6039      	str	r1, [r7, #0]
 80012d8:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80012da:	f7ff ff13 	bl	8001104 <SD_ReadyWait>
 80012de:	4603      	mov	r3, r0
 80012e0:	2bff      	cmp	r3, #255	; 0xff
 80012e2:	d001      	beq.n	80012e8 <SD_SendCmd+0x1a>
 80012e4:	23ff      	movs	r3, #255	; 0xff
 80012e6:	e042      	b.n	800136e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff feac 	bl	8001048 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	0e1b      	lsrs	r3, r3, #24
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fea6 	bl	8001048 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	0c1b      	lsrs	r3, r3, #16
 8001300:	b2db      	uxtb	r3, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fea0 	bl	8001048 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	0a1b      	lsrs	r3, r3, #8
 800130c:	b2db      	uxtb	r3, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fe9a 	bl	8001048 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fe95 	bl	8001048 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	2b40      	cmp	r3, #64	; 0x40
 8001322:	d102      	bne.n	800132a <SD_SendCmd+0x5c>
 8001324:	2395      	movs	r3, #149	; 0x95
 8001326:	73fb      	strb	r3, [r7, #15]
 8001328:	e007      	b.n	800133a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	2b48      	cmp	r3, #72	; 0x48
 800132e:	d102      	bne.n	8001336 <SD_SendCmd+0x68>
 8001330:	2387      	movs	r3, #135	; 0x87
 8001332:	73fb      	strb	r3, [r7, #15]
 8001334:	e001      	b.n	800133a <SD_SendCmd+0x6c>
	else crc = 1;
 8001336:	2301      	movs	r3, #1
 8001338:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fe83 	bl	8001048 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	2b4c      	cmp	r3, #76	; 0x4c
 8001346:	d101      	bne.n	800134c <SD_SendCmd+0x7e>
 8001348:	f7ff feb2 	bl	80010b0 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800134c:	230a      	movs	r3, #10
 800134e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001350:	f7ff feae 	bl	80010b0 <SPI_RxByte>
 8001354:	4603      	mov	r3, r0
 8001356:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001358:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800135c:	2b00      	cmp	r3, #0
 800135e:	da05      	bge.n	800136c <SD_SendCmd+0x9e>
 8001360:	7bbb      	ldrb	r3, [r7, #14]
 8001362:	3b01      	subs	r3, #1
 8001364:	73bb      	strb	r3, [r7, #14]
 8001366:	7bbb      	ldrb	r3, [r7, #14]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1f1      	bne.n	8001350 <SD_SendCmd+0x82>

	return res;
 800136c:	7b7b      	ldrb	r3, [r7, #13]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <SD_disk_initialize+0x14>
 8001388:	2301      	movs	r3, #1
 800138a:	e0d1      	b.n	8001530 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800138c:	4b6a      	ldr	r3, [pc, #424]	; (8001538 <SD_disk_initialize+0x1c0>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <SD_disk_initialize+0x2a>
 800139a:	4b67      	ldr	r3, [pc, #412]	; (8001538 <SD_disk_initialize+0x1c0>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	e0c6      	b.n	8001530 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80013a2:	f7ff fec9 	bl	8001138 <SD_PowerOn>

	/* slave select */
	SELECT();
 80013a6:	f7ff fe2f 	bl	8001008 <SELECT>

	/* check disk type */
	type = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80013ae:	2100      	movs	r1, #0
 80013b0:	2040      	movs	r0, #64	; 0x40
 80013b2:	f7ff ff8c 	bl	80012ce <SD_SendCmd>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	f040 80a1 	bne.w	8001500 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80013be:	4b5f      	ldr	r3, [pc, #380]	; (800153c <SD_disk_initialize+0x1c4>)
 80013c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013c4:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80013c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80013ca:	2048      	movs	r0, #72	; 0x48
 80013cc:	f7ff ff7f 	bl	80012ce <SD_SendCmd>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d155      	bne.n	8001482 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80013d6:	2300      	movs	r3, #0
 80013d8:	73fb      	strb	r3, [r7, #15]
 80013da:	e00c      	b.n	80013f6 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80013dc:	7bfc      	ldrb	r4, [r7, #15]
 80013de:	f7ff fe67 	bl	80010b0 <SPI_RxByte>
 80013e2:	4603      	mov	r3, r0
 80013e4:	461a      	mov	r2, r3
 80013e6:	f104 0310 	add.w	r3, r4, #16
 80013ea:	443b      	add	r3, r7
 80013ec:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	3301      	adds	r3, #1
 80013f4:	73fb      	strb	r3, [r7, #15]
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
 80013f8:	2b03      	cmp	r3, #3
 80013fa:	d9ef      	bls.n	80013dc <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80013fc:	7abb      	ldrb	r3, [r7, #10]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d17e      	bne.n	8001500 <SD_disk_initialize+0x188>
 8001402:	7afb      	ldrb	r3, [r7, #11]
 8001404:	2baa      	cmp	r3, #170	; 0xaa
 8001406:	d17b      	bne.n	8001500 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001408:	2100      	movs	r1, #0
 800140a:	2077      	movs	r0, #119	; 0x77
 800140c:	f7ff ff5f 	bl	80012ce <SD_SendCmd>
 8001410:	4603      	mov	r3, r0
 8001412:	2b01      	cmp	r3, #1
 8001414:	d807      	bhi.n	8001426 <SD_disk_initialize+0xae>
 8001416:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800141a:	2069      	movs	r0, #105	; 0x69
 800141c:	f7ff ff57 	bl	80012ce <SD_SendCmd>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d004      	beq.n	8001430 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001426:	4b45      	ldr	r3, [pc, #276]	; (800153c <SD_disk_initialize+0x1c4>)
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1ec      	bne.n	8001408 <SD_disk_initialize+0x90>
 800142e:	e000      	b.n	8001432 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001430:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001432:	4b42      	ldr	r3, [pc, #264]	; (800153c <SD_disk_initialize+0x1c4>)
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d062      	beq.n	8001500 <SD_disk_initialize+0x188>
 800143a:	2100      	movs	r1, #0
 800143c:	207a      	movs	r0, #122	; 0x7a
 800143e:	f7ff ff46 	bl	80012ce <SD_SendCmd>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d15b      	bne.n	8001500 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001448:	2300      	movs	r3, #0
 800144a:	73fb      	strb	r3, [r7, #15]
 800144c:	e00c      	b.n	8001468 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800144e:	7bfc      	ldrb	r4, [r7, #15]
 8001450:	f7ff fe2e 	bl	80010b0 <SPI_RxByte>
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	f104 0310 	add.w	r3, r4, #16
 800145c:	443b      	add	r3, r7
 800145e:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	3301      	adds	r3, #1
 8001466:	73fb      	strb	r3, [r7, #15]
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	2b03      	cmp	r3, #3
 800146c:	d9ef      	bls.n	800144e <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800146e:	7a3b      	ldrb	r3, [r7, #8]
 8001470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <SD_disk_initialize+0x104>
 8001478:	230c      	movs	r3, #12
 800147a:	e000      	b.n	800147e <SD_disk_initialize+0x106>
 800147c:	2304      	movs	r3, #4
 800147e:	73bb      	strb	r3, [r7, #14]
 8001480:	e03e      	b.n	8001500 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001482:	2100      	movs	r1, #0
 8001484:	2077      	movs	r0, #119	; 0x77
 8001486:	f7ff ff22 	bl	80012ce <SD_SendCmd>
 800148a:	4603      	mov	r3, r0
 800148c:	2b01      	cmp	r3, #1
 800148e:	d808      	bhi.n	80014a2 <SD_disk_initialize+0x12a>
 8001490:	2100      	movs	r1, #0
 8001492:	2069      	movs	r0, #105	; 0x69
 8001494:	f7ff ff1b 	bl	80012ce <SD_SendCmd>
 8001498:	4603      	mov	r3, r0
 800149a:	2b01      	cmp	r3, #1
 800149c:	d801      	bhi.n	80014a2 <SD_disk_initialize+0x12a>
 800149e:	2302      	movs	r3, #2
 80014a0:	e000      	b.n	80014a4 <SD_disk_initialize+0x12c>
 80014a2:	2301      	movs	r3, #1
 80014a4:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80014a6:	7bbb      	ldrb	r3, [r7, #14]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d10e      	bne.n	80014ca <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80014ac:	2100      	movs	r1, #0
 80014ae:	2077      	movs	r0, #119	; 0x77
 80014b0:	f7ff ff0d 	bl	80012ce <SD_SendCmd>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d80e      	bhi.n	80014d8 <SD_disk_initialize+0x160>
 80014ba:	2100      	movs	r1, #0
 80014bc:	2069      	movs	r0, #105	; 0x69
 80014be:	f7ff ff06 	bl	80012ce <SD_SendCmd>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d107      	bne.n	80014d8 <SD_disk_initialize+0x160>
 80014c8:	e00c      	b.n	80014e4 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80014ca:	2100      	movs	r1, #0
 80014cc:	2041      	movs	r0, #65	; 0x41
 80014ce:	f7ff fefe 	bl	80012ce <SD_SendCmd>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d004      	beq.n	80014e2 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80014d8:	4b18      	ldr	r3, [pc, #96]	; (800153c <SD_disk_initialize+0x1c4>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1e2      	bne.n	80014a6 <SD_disk_initialize+0x12e>
 80014e0:	e000      	b.n	80014e4 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80014e2:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80014e4:	4b15      	ldr	r3, [pc, #84]	; (800153c <SD_disk_initialize+0x1c4>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d007      	beq.n	80014fc <SD_disk_initialize+0x184>
 80014ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f0:	2050      	movs	r0, #80	; 0x50
 80014f2:	f7ff feec 	bl	80012ce <SD_SendCmd>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <SD_disk_initialize+0x188>
 80014fc:	2300      	movs	r3, #0
 80014fe:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001500:	4a0f      	ldr	r2, [pc, #60]	; (8001540 <SD_disk_initialize+0x1c8>)
 8001502:	7bbb      	ldrb	r3, [r7, #14]
 8001504:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001506:	f7ff fd8f 	bl	8001028 <DESELECT>
	SPI_RxByte();
 800150a:	f7ff fdd1 	bl	80010b0 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800150e:	7bbb      	ldrb	r3, [r7, #14]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d008      	beq.n	8001526 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001514:	4b08      	ldr	r3, [pc, #32]	; (8001538 <SD_disk_initialize+0x1c0>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	f023 0301 	bic.w	r3, r3, #1
 800151e:	b2da      	uxtb	r2, r3
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <SD_disk_initialize+0x1c0>)
 8001522:	701a      	strb	r2, [r3, #0]
 8001524:	e001      	b.n	800152a <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001526:	f7ff fe49 	bl	80011bc <SD_PowerOff>
	}

	return Stat;
 800152a:	4b03      	ldr	r3, [pc, #12]	; (8001538 <SD_disk_initialize+0x1c0>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	b2db      	uxtb	r3, r3
}
 8001530:	4618      	mov	r0, r3
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	bd90      	pop	{r4, r7, pc}
 8001538:	20000000 	.word	0x20000000
 800153c:	2000029c 	.word	0x2000029c
 8001540:	200002a0 	.word	0x200002a0

08001544 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SD_disk_status+0x14>
 8001554:	2301      	movs	r3, #1
 8001556:	e002      	b.n	800155e <SD_disk_status+0x1a>
	return Stat;
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <SD_disk_status+0x28>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b2db      	uxtb	r3, r3
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20000000 	.word	0x20000000

08001570 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	4603      	mov	r3, r0
 800157e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d102      	bne.n	800158c <SD_disk_read+0x1c>
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <SD_disk_read+0x20>
 800158c:	2304      	movs	r3, #4
 800158e:	e051      	b.n	8001634 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001590:	4b2a      	ldr	r3, [pc, #168]	; (800163c <SD_disk_read+0xcc>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <SD_disk_read+0x32>
 800159e:	2303      	movs	r3, #3
 80015a0:	e048      	b.n	8001634 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80015a2:	4b27      	ldr	r3, [pc, #156]	; (8001640 <SD_disk_read+0xd0>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d102      	bne.n	80015b4 <SD_disk_read+0x44>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	025b      	lsls	r3, r3, #9
 80015b2:	607b      	str	r3, [r7, #4]

	SELECT();
 80015b4:	f7ff fd28 	bl	8001008 <SELECT>

	if (count == 1)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d111      	bne.n	80015e2 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	2051      	movs	r0, #81	; 0x51
 80015c2:	f7ff fe84 	bl	80012ce <SD_SendCmd>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d129      	bne.n	8001620 <SD_disk_read+0xb0>
 80015cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015d0:	68b8      	ldr	r0, [r7, #8]
 80015d2:	f7ff fe0b 	bl	80011ec <SD_RxDataBlock>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d021      	beq.n	8001620 <SD_disk_read+0xb0>
 80015dc:	2300      	movs	r3, #0
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	e01e      	b.n	8001620 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	2052      	movs	r0, #82	; 0x52
 80015e6:	f7ff fe72 	bl	80012ce <SD_SendCmd>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d117      	bne.n	8001620 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80015f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015f4:	68b8      	ldr	r0, [r7, #8]
 80015f6:	f7ff fdf9 	bl	80011ec <SD_RxDataBlock>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00a      	beq.n	8001616 <SD_disk_read+0xa6>
				buff += 512;
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001606:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	3b01      	subs	r3, #1
 800160c:	603b      	str	r3, [r7, #0]
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1ed      	bne.n	80015f0 <SD_disk_read+0x80>
 8001614:	e000      	b.n	8001618 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001616:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001618:	2100      	movs	r1, #0
 800161a:	204c      	movs	r0, #76	; 0x4c
 800161c:	f7ff fe57 	bl	80012ce <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001620:	f7ff fd02 	bl	8001028 <DESELECT>
	SPI_RxByte();
 8001624:	f7ff fd44 	bl	80010b0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	bf14      	ite	ne
 800162e:	2301      	movne	r3, #1
 8001630:	2300      	moveq	r3, #0
 8001632:	b2db      	uxtb	r3, r3
}
 8001634:	4618      	mov	r0, r3
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000000 	.word	0x20000000
 8001640:	200002a0 	.word	0x200002a0

08001644 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	4603      	mov	r3, r0
 8001652:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d102      	bne.n	8001660 <SD_disk_write+0x1c>
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <SD_disk_write+0x20>
 8001660:	2304      	movs	r3, #4
 8001662:	e06b      	b.n	800173c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001664:	4b37      	ldr	r3, [pc, #220]	; (8001744 <SD_disk_write+0x100>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <SD_disk_write+0x32>
 8001672:	2303      	movs	r3, #3
 8001674:	e062      	b.n	800173c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001676:	4b33      	ldr	r3, [pc, #204]	; (8001744 <SD_disk_write+0x100>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <SD_disk_write+0x44>
 8001684:	2302      	movs	r3, #2
 8001686:	e059      	b.n	800173c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001688:	4b2f      	ldr	r3, [pc, #188]	; (8001748 <SD_disk_write+0x104>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	d102      	bne.n	800169a <SD_disk_write+0x56>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	025b      	lsls	r3, r3, #9
 8001698:	607b      	str	r3, [r7, #4]

	SELECT();
 800169a:	f7ff fcb5 	bl	8001008 <SELECT>

	if (count == 1)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d110      	bne.n	80016c6 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	2058      	movs	r0, #88	; 0x58
 80016a8:	f7ff fe11 	bl	80012ce <SD_SendCmd>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d13a      	bne.n	8001728 <SD_disk_write+0xe4>
 80016b2:	21fe      	movs	r1, #254	; 0xfe
 80016b4:	68b8      	ldr	r0, [r7, #8]
 80016b6:	f7ff fdc7 	bl	8001248 <SD_TxDataBlock>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d033      	beq.n	8001728 <SD_disk_write+0xe4>
			count = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	e030      	b.n	8001728 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80016c6:	4b20      	ldr	r3, [pc, #128]	; (8001748 <SD_disk_write+0x104>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d007      	beq.n	80016e2 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80016d2:	2100      	movs	r1, #0
 80016d4:	2077      	movs	r0, #119	; 0x77
 80016d6:	f7ff fdfa 	bl	80012ce <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80016da:	6839      	ldr	r1, [r7, #0]
 80016dc:	2057      	movs	r0, #87	; 0x57
 80016de:	f7ff fdf6 	bl	80012ce <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	2059      	movs	r0, #89	; 0x59
 80016e6:	f7ff fdf2 	bl	80012ce <SD_SendCmd>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d11b      	bne.n	8001728 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80016f0:	21fc      	movs	r1, #252	; 0xfc
 80016f2:	68b8      	ldr	r0, [r7, #8]
 80016f4:	f7ff fda8 	bl	8001248 <SD_TxDataBlock>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d00a      	beq.n	8001714 <SD_disk_write+0xd0>
				buff += 512;
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001704:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	3b01      	subs	r3, #1
 800170a:	603b      	str	r3, [r7, #0]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1ee      	bne.n	80016f0 <SD_disk_write+0xac>
 8001712:	e000      	b.n	8001716 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001714:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001716:	21fd      	movs	r1, #253	; 0xfd
 8001718:	2000      	movs	r0, #0
 800171a:	f7ff fd95 	bl	8001248 <SD_TxDataBlock>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <SD_disk_write+0xe4>
			{
				count = 1;
 8001724:	2301      	movs	r3, #1
 8001726:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001728:	f7ff fc7e 	bl	8001028 <DESELECT>
	SPI_RxByte();
 800172c:	f7ff fcc0 	bl	80010b0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	bf14      	ite	ne
 8001736:	2301      	movne	r3, #1
 8001738:	2300      	moveq	r3, #0
 800173a:	b2db      	uxtb	r3, r3
}
 800173c:	4618      	mov	r0, r3
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000000 	.word	0x20000000
 8001748:	200002a0 	.word	0x200002a0

0800174c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800174c:	b590      	push	{r4, r7, lr}
 800174e:	b08b      	sub	sp, #44	; 0x2c
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	603a      	str	r2, [r7, #0]
 8001756:	71fb      	strb	r3, [r7, #7]
 8001758:	460b      	mov	r3, r1
 800175a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <SD_disk_ioctl+0x1e>
 8001766:	2304      	movs	r3, #4
 8001768:	e115      	b.n	8001996 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001770:	79bb      	ldrb	r3, [r7, #6]
 8001772:	2b05      	cmp	r3, #5
 8001774:	d124      	bne.n	80017c0 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001776:	6a3b      	ldr	r3, [r7, #32]
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d012      	beq.n	80017a4 <SD_disk_ioctl+0x58>
 800177e:	2b02      	cmp	r3, #2
 8001780:	dc1a      	bgt.n	80017b8 <SD_disk_ioctl+0x6c>
 8001782:	2b00      	cmp	r3, #0
 8001784:	d002      	beq.n	800178c <SD_disk_ioctl+0x40>
 8001786:	2b01      	cmp	r3, #1
 8001788:	d006      	beq.n	8001798 <SD_disk_ioctl+0x4c>
 800178a:	e015      	b.n	80017b8 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800178c:	f7ff fd16 	bl	80011bc <SD_PowerOff>
			res = RES_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001796:	e0fc      	b.n	8001992 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001798:	f7ff fcce 	bl	8001138 <SD_PowerOn>
			res = RES_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017a2:	e0f6      	b.n	8001992 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	1c5c      	adds	r4, r3, #1
 80017a8:	f7ff fd14 	bl	80011d4 <SD_CheckPower>
 80017ac:	4603      	mov	r3, r0
 80017ae:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80017b0:	2300      	movs	r3, #0
 80017b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017b6:	e0ec      	b.n	8001992 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80017b8:	2304      	movs	r3, #4
 80017ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017be:	e0e8      	b.n	8001992 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80017c0:	4b77      	ldr	r3, [pc, #476]	; (80019a0 <SD_disk_ioctl+0x254>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <SD_disk_ioctl+0x86>
 80017ce:	2303      	movs	r3, #3
 80017d0:	e0e1      	b.n	8001996 <SD_disk_ioctl+0x24a>

		SELECT();
 80017d2:	f7ff fc19 	bl	8001008 <SELECT>

		switch (ctrl)
 80017d6:	79bb      	ldrb	r3, [r7, #6]
 80017d8:	2b0d      	cmp	r3, #13
 80017da:	f200 80cb 	bhi.w	8001974 <SD_disk_ioctl+0x228>
 80017de:	a201      	add	r2, pc, #4	; (adr r2, 80017e4 <SD_disk_ioctl+0x98>)
 80017e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e4:	080018df 	.word	0x080018df
 80017e8:	0800181d 	.word	0x0800181d
 80017ec:	080018cf 	.word	0x080018cf
 80017f0:	08001975 	.word	0x08001975
 80017f4:	08001975 	.word	0x08001975
 80017f8:	08001975 	.word	0x08001975
 80017fc:	08001975 	.word	0x08001975
 8001800:	08001975 	.word	0x08001975
 8001804:	08001975 	.word	0x08001975
 8001808:	08001975 	.word	0x08001975
 800180c:	08001975 	.word	0x08001975
 8001810:	080018f1 	.word	0x080018f1
 8001814:	08001915 	.word	0x08001915
 8001818:	08001939 	.word	0x08001939
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800181c:	2100      	movs	r1, #0
 800181e:	2049      	movs	r0, #73	; 0x49
 8001820:	f7ff fd55 	bl	80012ce <SD_SendCmd>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	f040 80a8 	bne.w	800197c <SD_disk_ioctl+0x230>
 800182c:	f107 030c 	add.w	r3, r7, #12
 8001830:	2110      	movs	r1, #16
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fcda 	bl	80011ec <SD_RxDataBlock>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 809e 	beq.w	800197c <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001840:	7b3b      	ldrb	r3, [r7, #12]
 8001842:	099b      	lsrs	r3, r3, #6
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b01      	cmp	r3, #1
 8001848:	d10e      	bne.n	8001868 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800184a:	7d7b      	ldrb	r3, [r7, #21]
 800184c:	b29a      	uxth	r2, r3
 800184e:	7d3b      	ldrb	r3, [r7, #20]
 8001850:	b29b      	uxth	r3, r3
 8001852:	021b      	lsls	r3, r3, #8
 8001854:	b29b      	uxth	r3, r3
 8001856:	4413      	add	r3, r2
 8001858:	b29b      	uxth	r3, r3
 800185a:	3301      	adds	r3, #1
 800185c:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800185e:	8bfb      	ldrh	r3, [r7, #30]
 8001860:	029a      	lsls	r2, r3, #10
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	e02e      	b.n	80018c6 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001868:	7c7b      	ldrb	r3, [r7, #17]
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	b2da      	uxtb	r2, r3
 8001870:	7dbb      	ldrb	r3, [r7, #22]
 8001872:	09db      	lsrs	r3, r3, #7
 8001874:	b2db      	uxtb	r3, r3
 8001876:	4413      	add	r3, r2
 8001878:	b2da      	uxtb	r2, r3
 800187a:	7d7b      	ldrb	r3, [r7, #21]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	b2db      	uxtb	r3, r3
 8001880:	f003 0306 	and.w	r3, r3, #6
 8001884:	b2db      	uxtb	r3, r3
 8001886:	4413      	add	r3, r2
 8001888:	b2db      	uxtb	r3, r3
 800188a:	3302      	adds	r3, #2
 800188c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001890:	7d3b      	ldrb	r3, [r7, #20]
 8001892:	099b      	lsrs	r3, r3, #6
 8001894:	b2db      	uxtb	r3, r3
 8001896:	b29a      	uxth	r2, r3
 8001898:	7cfb      	ldrb	r3, [r7, #19]
 800189a:	b29b      	uxth	r3, r3
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	b29b      	uxth	r3, r3
 80018a0:	4413      	add	r3, r2
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	7cbb      	ldrb	r3, [r7, #18]
 80018a6:	029b      	lsls	r3, r3, #10
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	4413      	add	r3, r2
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	3301      	adds	r3, #1
 80018b6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80018b8:	8bfa      	ldrh	r2, [r7, #30]
 80018ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018be:	3b09      	subs	r3, #9
 80018c0:	409a      	lsls	r2, r3
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80018cc:	e056      	b.n	800197c <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d4:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80018dc:	e055      	b.n	800198a <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80018de:	f7ff fc11 	bl	8001104 <SD_ReadyWait>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2bff      	cmp	r3, #255	; 0xff
 80018e6:	d14b      	bne.n	8001980 <SD_disk_ioctl+0x234>
 80018e8:	2300      	movs	r3, #0
 80018ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80018ee:	e047      	b.n	8001980 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80018f0:	2100      	movs	r1, #0
 80018f2:	2049      	movs	r0, #73	; 0x49
 80018f4:	f7ff fceb 	bl	80012ce <SD_SendCmd>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d142      	bne.n	8001984 <SD_disk_ioctl+0x238>
 80018fe:	2110      	movs	r1, #16
 8001900:	6a38      	ldr	r0, [r7, #32]
 8001902:	f7ff fc73 	bl	80011ec <SD_RxDataBlock>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d03b      	beq.n	8001984 <SD_disk_ioctl+0x238>
 800190c:	2300      	movs	r3, #0
 800190e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001912:	e037      	b.n	8001984 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001914:	2100      	movs	r1, #0
 8001916:	204a      	movs	r0, #74	; 0x4a
 8001918:	f7ff fcd9 	bl	80012ce <SD_SendCmd>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d132      	bne.n	8001988 <SD_disk_ioctl+0x23c>
 8001922:	2110      	movs	r1, #16
 8001924:	6a38      	ldr	r0, [r7, #32]
 8001926:	f7ff fc61 	bl	80011ec <SD_RxDataBlock>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d02b      	beq.n	8001988 <SD_disk_ioctl+0x23c>
 8001930:	2300      	movs	r3, #0
 8001932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001936:	e027      	b.n	8001988 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001938:	2100      	movs	r1, #0
 800193a:	207a      	movs	r0, #122	; 0x7a
 800193c:	f7ff fcc7 	bl	80012ce <SD_SendCmd>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d116      	bne.n	8001974 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001946:	2300      	movs	r3, #0
 8001948:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800194c:	e00b      	b.n	8001966 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800194e:	6a3c      	ldr	r4, [r7, #32]
 8001950:	1c63      	adds	r3, r4, #1
 8001952:	623b      	str	r3, [r7, #32]
 8001954:	f7ff fbac 	bl	80010b0 <SPI_RxByte>
 8001958:	4603      	mov	r3, r0
 800195a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800195c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001960:	3301      	adds	r3, #1
 8001962:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001966:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800196a:	2b03      	cmp	r3, #3
 800196c:	d9ef      	bls.n	800194e <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001974:	2304      	movs	r3, #4
 8001976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800197a:	e006      	b.n	800198a <SD_disk_ioctl+0x23e>
			break;
 800197c:	bf00      	nop
 800197e:	e004      	b.n	800198a <SD_disk_ioctl+0x23e>
			break;
 8001980:	bf00      	nop
 8001982:	e002      	b.n	800198a <SD_disk_ioctl+0x23e>
			break;
 8001984:	bf00      	nop
 8001986:	e000      	b.n	800198a <SD_disk_ioctl+0x23e>
			break;
 8001988:	bf00      	nop
		}

		DESELECT();
 800198a:	f7ff fb4d 	bl	8001028 <DESELECT>
		SPI_RxByte();
 800198e:	f7ff fb8f 	bl	80010b0 <SPI_RxByte>
	}

	return res;
 8001992:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001996:	4618      	mov	r0, r3
 8001998:	372c      	adds	r7, #44	; 0x2c
 800199a:	46bd      	mov	sp, r7
 800199c:	bd90      	pop	{r4, r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000000 	.word	0x20000000

080019a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08a      	sub	sp, #40	; 0x28
 80019a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
 80019b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	4b40      	ldr	r3, [pc, #256]	; (8001ac0 <MX_GPIO_Init+0x11c>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a3f      	ldr	r2, [pc, #252]	; (8001ac0 <MX_GPIO_Init+0x11c>)
 80019c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b3d      	ldr	r3, [pc, #244]	; (8001ac0 <MX_GPIO_Init+0x11c>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4b39      	ldr	r3, [pc, #228]	; (8001ac0 <MX_GPIO_Init+0x11c>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a38      	ldr	r2, [pc, #224]	; (8001ac0 <MX_GPIO_Init+0x11c>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b36      	ldr	r3, [pc, #216]	; (8001ac0 <MX_GPIO_Init+0x11c>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	4b32      	ldr	r3, [pc, #200]	; (8001ac0 <MX_GPIO_Init+0x11c>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a31      	ldr	r2, [pc, #196]	; (8001ac0 <MX_GPIO_Init+0x11c>)
 80019fc:	f043 0302 	orr.w	r3, r3, #2
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b2f      	ldr	r3, [pc, #188]	; (8001ac0 <MX_GPIO_Init+0x11c>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	4b2b      	ldr	r3, [pc, #172]	; (8001ac0 <MX_GPIO_Init+0x11c>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a2a      	ldr	r2, [pc, #168]	; (8001ac0 <MX_GPIO_Init+0x11c>)
 8001a18:	f043 0308 	orr.w	r3, r3, #8
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b28      	ldr	r3, [pc, #160]	; (8001ac0 <MX_GPIO_Init+0x11c>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_ETHERNET_CS_GPIO_Port, SPI1_ETHERNET_CS_Pin, GPIO_PIN_RESET);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2110      	movs	r1, #16
 8001a2e:	4825      	ldr	r0, [pc, #148]	; (8001ac4 <MX_GPIO_Init+0x120>)
 8001a30:	f002 fba4 	bl	800417c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001a34:	2200      	movs	r2, #0
 8001a36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a3a:	4823      	ldr	r0, [pc, #140]	; (8001ac8 <MX_GPIO_Init+0x124>)
 8001a3c:	f002 fb9e 	bl	800417c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETHERNET_RST_GPIO_Port, ETHERNET_RST_Pin, GPIO_PIN_RESET);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2104      	movs	r1, #4
 8001a44:	4821      	ldr	r0, [pc, #132]	; (8001acc <MX_GPIO_Init+0x128>)
 8001a46:	f002 fb99 	bl	800417c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_ETHERNET_CS_Pin;
 8001a4a:	2310      	movs	r3, #16
 8001a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a52:	2301      	movs	r3, #1
 8001a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_ETHERNET_CS_GPIO_Port, &GPIO_InitStruct);
 8001a5a:	f107 0314 	add.w	r3, r7, #20
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4818      	ldr	r0, [pc, #96]	; (8001ac4 <MX_GPIO_Init+0x120>)
 8001a62:	f002 fa07 	bl	8003e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOLD_BACKWARD_INPUT_Pin|INJECTION_FORWARD_INPUT_Pin|RAW_MATERIAL_INPUT_Pin|INJECTION_BACKWARD_INPUT_Pin
 8001a66:	23ff      	movs	r3, #255	; 0xff
 8001a68:	617b      	str	r3, [r7, #20]
                          |MOLD_FORWARD_INPUT_Pin|REVIZED_1_INPUT_Pin|REVIZED_2_INPUT_Pin|REVIZED_3_INPUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	4619      	mov	r1, r3
 8001a78:	4813      	ldr	r0, [pc, #76]	; (8001ac8 <MX_GPIO_Init+0x124>)
 8001a7a:	f002 f9fb 	bl	8003e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001a7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a84:	2301      	movs	r3, #1
 8001a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	4619      	mov	r1, r3
 8001a96:	480c      	ldr	r0, [pc, #48]	; (8001ac8 <MX_GPIO_Init+0x124>)
 8001a98:	f002 f9ec 	bl	8003e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ETHERNET_RST_Pin;
 8001a9c:	2304      	movs	r3, #4
 8001a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ETHERNET_RST_GPIO_Port, &GPIO_InitStruct);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4806      	ldr	r0, [pc, #24]	; (8001acc <MX_GPIO_Init+0x128>)
 8001ab4:	f002 f9de 	bl	8003e74 <HAL_GPIO_Init>

}
 8001ab8:	bf00      	nop
 8001aba:	3728      	adds	r7, #40	; 0x28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40020000 	.word	0x40020000
 8001ac8:	40020400 	.word	0x40020400
 8001acc:	40020c00 	.word	0x40020c00

08001ad0 <_write>:
/* W5500 Defines End*/

/* Printf Defines */
#if defined(__GNUC__)
int _write(int fd, char * ptr, int len)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	4804      	ldr	r0, [pc, #16]	; (8001af8 <_write+0x28>)
 8001ae8:	f004 fe27 	bl	800673a <HAL_UART_Transmit>
  return len;
 8001aec:	687b      	ldr	r3, [r7, #4]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20003628 	.word	0x20003628

08001afc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b00:	f002 f810 	bl	8003b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b04:	f000 f84c 	bl	8001ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b08:	f7ff ff4c 	bl	80019a4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001b0c:	f001 fe8c 	bl	8003828 <MX_TIM3_Init>
  MX_RTC_Init();
 8001b10:	f001 fc08 	bl	8003324 <MX_RTC_Init>
  MX_SPI1_Init();
 8001b14:	f001 fc64 	bl	80033e0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001b18:	f001 ff68 	bl	80039ec <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001b1c:	f001 fc96 	bl	800344c <MX_SPI2_Init>
  MX_FATFS_Init();
 8001b20:	f005 f980 	bl	8006e24 <MX_FATFS_Init>
  MX_TIM4_Init();
 8001b24:	f001 fece 	bl	80038c4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  sdStatus = SDInit();
 8001b28:	f001 f946 	bl	8002db8 <SDInit>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <main+0x78>)
 8001b32:	701a      	strb	r2, [r3, #0]
  if (sdStatus == SD_CARD_READY) {
 8001b34:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <main+0x78>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	b25b      	sxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d102      	bne.n	8001b44 <main+0x48>
	  msgLogger("SD_CARD Init is done.");
 8001b3e:	480e      	ldr	r0, [pc, #56]	; (8001b78 <main+0x7c>)
 8001b40:	f001 fb34 	bl	80031ac <msgLogger>
  }
  reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 8001b44:	490d      	ldr	r1, [pc, #52]	; (8001b7c <main+0x80>)
 8001b46:	480e      	ldr	r0, [pc, #56]	; (8001b80 <main+0x84>)
 8001b48:	f00a fbca 	bl	800c2e0 <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(spi_rb, spi_wb);
 8001b4c:	490d      	ldr	r1, [pc, #52]	; (8001b84 <main+0x88>)
 8001b4e:	480e      	ldr	r0, [pc, #56]	; (8001b88 <main+0x8c>)
 8001b50:	f00a fbec 	bl	800c32c <reg_wizchip_spi_cbfunc>

  prevInputs = GPIOB->IDR;
 8001b54:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <main+0x90>)
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <main+0x94>)
 8001b5c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim4);
 8001b5e:	480d      	ldr	r0, [pc, #52]	; (8001b94 <main+0x98>)
 8001b60:	f004 f9a8 	bl	8005eb4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001b64:	480c      	ldr	r0, [pc, #48]	; (8001b98 <main+0x9c>)
 8001b66:	f004 f9a5 	bl	8005eb4 <HAL_TIM_Base_Start_IT>

  msgLogger("Setup is DONE.");
 8001b6a:	480c      	ldr	r0, [pc, #48]	; (8001b9c <main+0xa0>)
 8001b6c:	f001 fb1e 	bl	80031ac <msgLogger>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <main+0x74>
 8001b72:	bf00      	nop
 8001b74:	200002b0 	.word	0x200002b0
 8001b78:	0801347c 	.word	0x0801347c
 8001b7c:	080032b9 	.word	0x080032b9
 8001b80:	080032a1 	.word	0x080032a1
 8001b84:	080032f5 	.word	0x080032f5
 8001b88:	080032d1 	.word	0x080032d1
 8001b8c:	40020400 	.word	0x40020400
 8001b90:	20002c71 	.word	0x20002c71
 8001b94:	200035e0 	.word	0x200035e0
 8001b98:	20003598 	.word	0x20003598
 8001b9c:	08013494 	.word	0x08013494

08001ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b094      	sub	sp, #80	; 0x50
 8001ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ba6:	f107 0320 	add.w	r3, r7, #32
 8001baa:	2230      	movs	r2, #48	; 0x30
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f00c ff44 	bl	800ea3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb4:	f107 030c 	add.w	r3, r7, #12
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	4b23      	ldr	r3, [pc, #140]	; (8001c58 <SystemClock_Config+0xb8>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	4a22      	ldr	r2, [pc, #136]	; (8001c58 <SystemClock_Config+0xb8>)
 8001bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd4:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <SystemClock_Config+0xb8>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001be0:	2300      	movs	r3, #0
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <SystemClock_Config+0xbc>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bec:	4a1b      	ldr	r2, [pc, #108]	; (8001c5c <SystemClock_Config+0xbc>)
 8001bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <SystemClock_Config+0xbc>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001c00:	2309      	movs	r3, #9
 8001c02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c12:	f107 0320 	add.w	r3, r7, #32
 8001c16:	4618      	mov	r0, r3
 8001c18:	f002 fade 	bl	80041d8 <HAL_RCC_OscConfig>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001c22:	f001 fb79 	bl	8003318 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c26:	230f      	movs	r3, #15
 8001c28:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c3a:	f107 030c 	add.w	r3, r7, #12
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f002 fd41 	bl	80046c8 <HAL_RCC_ClockConfig>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001c4c:	f001 fb64 	bl	8003318 <Error_Handler>
  }
}
 8001c50:	bf00      	nop
 8001c52:	3750      	adds	r7, #80	; 0x50
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40007000 	.word	0x40007000

08001c60 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c64:	b08b      	sub	sp, #44	; 0x2c
 8001c66:	af06      	add	r7, sp, #24
 8001c68:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4aa4      	ldr	r2, [pc, #656]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d146      	bne.n	8001d02 <HAL_TIM_PeriodElapsedCallback+0xa2>
		if (currentTimer3Status == 0) {
 8001c74:	4ba3      	ldr	r3, [pc, #652]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d11a      	bne.n	8001cb4 <HAL_TIM_PeriodElapsedCallback+0x54>
			product = (struct productVal*)malloc(sizeof(struct productVal));
 8001c7e:	20f4      	movs	r0, #244	; 0xf4
 8001c80:	f00c febe 	bl	800ea00 <malloc>
 8001c84:	4603      	mov	r3, r0
 8001c86:	461a      	mov	r2, r3
 8001c88:	4b9f      	ldr	r3, [pc, #636]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001c8a:	601a      	str	r2, [r3, #0]
			if (product != NULL) {
 8001c8c:	4b9e      	ldr	r3, [pc, #632]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00b      	beq.n	8001cac <HAL_TIM_PeriodElapsedCallback+0x4c>
				fillProduct(product);
 8001c94:	4b9c      	ldr	r3, [pc, #624]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 fbc3 	bl	8002424 <fillProduct>
				currentTimer3Status = 1;
 8001c9e:	4b99      	ldr	r3, [pc, #612]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	701a      	strb	r2, [r3, #0]
				msgLogger("Timer3 status is changed. 0 --> 1");
 8001ca4:	4899      	ldr	r0, [pc, #612]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001ca6:	f001 fa81 	bl	80031ac <msgLogger>
 8001caa:	e02a      	b.n	8001d02 <HAL_TIM_PeriodElapsedCallback+0xa2>
			}
			else
				currentTimer3Status = 0;
 8001cac:	4b95      	ldr	r3, [pc, #596]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
 8001cb2:	e026      	b.n	8001d02 <HAL_TIM_PeriodElapsedCallback+0xa2>
		}
		else if (currentTimer3Status == 1) {
 8001cb4:	4b93      	ldr	r3, [pc, #588]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d10e      	bne.n	8001cdc <HAL_TIM_PeriodElapsedCallback+0x7c>
			checkInputs();
 8001cbe:	f000 f99d 	bl	8001ffc <checkInputs>
			int productStatus = checkProduct();
 8001cc2:	f000 f9bd 	bl	8002040 <checkProduct>
 8001cc6:	60f8      	str	r0, [r7, #12]
			if (productStatus) {
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d019      	beq.n	8001d02 <HAL_TIM_PeriodElapsedCallback+0xa2>
				currentTimer3Status = 2;
 8001cce:	4b8d      	ldr	r3, [pc, #564]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	701a      	strb	r2, [r3, #0]
				msgLogger("Timer3 status is changed. 1 --> 2");
 8001cd4:	488e      	ldr	r0, [pc, #568]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001cd6:	f001 fa69 	bl	80031ac <msgLogger>
 8001cda:	e012      	b.n	8001d02 <HAL_TIM_PeriodElapsedCallback+0xa2>
			}
		}
		else if (currentTimer3Status == 2) {
 8001cdc:	4b89      	ldr	r3, [pc, #548]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d10d      	bne.n	8001d02 <HAL_TIM_PeriodElapsedCallback+0xa2>
			free(product);
 8001ce6:	4b88      	ldr	r3, [pc, #544]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f00c fe90 	bl	800ea10 <free>
			IsProductDone = true;
 8001cf0:	4b88      	ldr	r3, [pc, #544]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	701a      	strb	r2, [r3, #0]
			currentTimer3Status = 0;
 8001cf6:	4b83      	ldr	r3, [pc, #524]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
			msgLogger("Timer3 status is changed. 2 --> 0");
 8001cfc:	4886      	ldr	r0, [pc, #536]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001cfe:	f001 fa55 	bl	80031ac <msgLogger>
		}
	}
	if (htim->Instance == TIM4) {
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a85      	ldr	r2, [pc, #532]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	f040 8167 	bne.w	8001fdc <HAL_TIM_PeriodElapsedCallback+0x37c>
		timer4Counter++;
 8001d0e:	4b84      	ldr	r3, [pc, #528]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d14:	f112 0801 	adds.w	r8, r2, #1
 8001d18:	f143 0900 	adc.w	r9, r3, #0
 8001d1c:	4b80      	ldr	r3, [pc, #512]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001d1e:	e9c3 8900 	strd	r8, r9, [r3]
		if (currentTimer4Status == 0) {
 8001d22:	4b80      	ldr	r3, [pc, #512]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10b      	bne.n	8001d44 <HAL_TIM_PeriodElapsedCallback+0xe4>
			ETH_PWR_RESET;
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2104      	movs	r1, #4
 8001d30:	487d      	ldr	r0, [pc, #500]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001d32:	f002 fa23 	bl	800417c <HAL_GPIO_WritePin>
			currentTimer4Status = 1;
 8001d36:	4b7b      	ldr	r3, [pc, #492]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]
			msgLogger("Timer4 status is changed. 0 --> 1");
 8001d3c:	487b      	ldr	r0, [pc, #492]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001d3e:	f001 fa35 	bl	80031ac <msgLogger>
				currentTimer4Status = 6;
				msgLogger("Timer4 status is changed. 7 --> 6");
			}
		}
	}
}
 8001d42:	e14b      	b.n	8001fdc <HAL_TIM_PeriodElapsedCallback+0x37c>
		else if (currentTimer4Status == 1) {
 8001d44:	4b77      	ldr	r3, [pc, #476]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d10b      	bne.n	8001d66 <HAL_TIM_PeriodElapsedCallback+0x106>
			ETH_PWR_SET;
 8001d4e:	2201      	movs	r2, #1
 8001d50:	2104      	movs	r1, #4
 8001d52:	4875      	ldr	r0, [pc, #468]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001d54:	f002 fa12 	bl	800417c <HAL_GPIO_WritePin>
			currentTimer4Status = 2;
 8001d58:	4b72      	ldr	r3, [pc, #456]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	701a      	strb	r2, [r3, #0]
			msgLogger("Timer4 status is changed. 1 --> 2");
 8001d5e:	4874      	ldr	r0, [pc, #464]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001d60:	f001 fa24 	bl	80031ac <msgLogger>
}
 8001d64:	e13a      	b.n	8001fdc <HAL_TIM_PeriodElapsedCallback+0x37c>
		else if (currentTimer4Status == 2) {
 8001d66:	4b6f      	ldr	r3, [pc, #444]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d11f      	bne.n	8001db0 <HAL_TIM_PeriodElapsedCallback+0x150>
			if (w5500Init(w5500opt) == 0) {
 8001d70:	4e70      	ldr	r6, [pc, #448]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001d72:	466d      	mov	r5, sp
 8001d74:	f106 0410 	add.w	r4, r6, #16
 8001d78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d7c:	6823      	ldr	r3, [r4, #0]
 8001d7e:	602b      	str	r3, [r5, #0]
 8001d80:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001d84:	f001 f8d6 	bl	8002f34 <w5500Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d109      	bne.n	8001da2 <HAL_TIM_PeriodElapsedCallback+0x142>
				msgLogger("W5500 init OK.");
 8001d8e:	486a      	ldr	r0, [pc, #424]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001d90:	f001 fa0c 	bl	80031ac <msgLogger>
				currentTimer4Status = 3;
 8001d94:	4b63      	ldr	r3, [pc, #396]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d96:	2203      	movs	r2, #3
 8001d98:	701a      	strb	r2, [r3, #0]
				msgLogger("Timer4 status is changed. 2 --> 3");
 8001d9a:	4868      	ldr	r0, [pc, #416]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001d9c:	f001 fa06 	bl	80031ac <msgLogger>
}
 8001da0:	e11c      	b.n	8001fdc <HAL_TIM_PeriodElapsedCallback+0x37c>
				currentTimer4Status = 0;
 8001da2:	4b60      	ldr	r3, [pc, #384]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	701a      	strb	r2, [r3, #0]
				msgLogger("W5500 Init Error. Timer4 status is changed. 2 --> 0");
 8001da8:	4865      	ldr	r0, [pc, #404]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001daa:	f001 f9ff 	bl	80031ac <msgLogger>
}
 8001dae:	e115      	b.n	8001fdc <HAL_TIM_PeriodElapsedCallback+0x37c>
		else if (currentTimer4Status == 3) {
 8001db0:	4b5c      	ldr	r3, [pc, #368]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	d106      	bne.n	8001dc8 <HAL_TIM_PeriodElapsedCallback+0x168>
			currentTimer4Status = 4;
 8001dba:	4b5a      	ldr	r3, [pc, #360]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001dbc:	2204      	movs	r2, #4
 8001dbe:	701a      	strb	r2, [r3, #0]
			msgLogger("Timer4 status is changed. 3 --> 4");
 8001dc0:	4860      	ldr	r0, [pc, #384]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001dc2:	f001 f9f3 	bl	80031ac <msgLogger>
}
 8001dc6:	e109      	b.n	8001fdc <HAL_TIM_PeriodElapsedCallback+0x37c>
		else if (currentTimer4Status == 4) {
 8001dc8:	4b56      	ldr	r3, [pc, #344]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d106      	bne.n	8001de0 <HAL_TIM_PeriodElapsedCallback+0x180>
			currentTimer4Status = 5;
 8001dd2:	4b54      	ldr	r3, [pc, #336]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001dd4:	2205      	movs	r2, #5
 8001dd6:	701a      	strb	r2, [r3, #0]
			msgLogger("Timer4 status is changed. 4 --> 5");
 8001dd8:	485b      	ldr	r0, [pc, #364]	; (8001f48 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001dda:	f001 f9e7 	bl	80031ac <msgLogger>
}
 8001dde:	e0fd      	b.n	8001fdc <HAL_TIM_PeriodElapsedCallback+0x37c>
		else if (currentTimer4Status == 5) {
 8001de0:	4b50      	ldr	r3, [pc, #320]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b05      	cmp	r3, #5
 8001de8:	d179      	bne.n	8001ede <HAL_TIM_PeriodElapsedCallback+0x27e>
			if (rtcStatus == SET_RTC_NOK) {
 8001dea:	4b58      	ldr	r3, [pc, #352]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001dec:	f993 3000 	ldrsb.w	r3, [r3]
 8001df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df4:	d16c      	bne.n	8001ed0 <HAL_TIM_PeriodElapsedCallback+0x270>
				if (timer4Counter % 2 == 0) {    //to make 2 seconds delay
 8001df6:	4b4a      	ldr	r3, [pc, #296]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	f002 0401 	and.w	r4, r2, #1
 8001e00:	2500      	movs	r5, #0
 8001e02:	ea54 0305 	orrs.w	r3, r4, r5
 8001e06:	f040 80e9 	bne.w	8001fdc <HAL_TIM_PeriodElapsedCallback+0x37c>
					SNTP_init(ntpSocket, ntp_server, timeZone, ethBuf);
 8001e0a:	4b51      	ldr	r3, [pc, #324]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001e0c:	7818      	ldrb	r0, [r3, #0]
 8001e0e:	4b51      	ldr	r3, [pc, #324]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001e10:	781a      	ldrb	r2, [r3, #0]
 8001e12:	4b51      	ldr	r3, [pc, #324]	; (8001f58 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001e14:	4951      	ldr	r1, [pc, #324]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001e16:	f00c fa6b 	bl	800e2f0 <SNTP_init>
					if (SET_RTC_OK == setRTCTime()) {
 8001e1a:	f000 fc39 	bl	8002690 <setRTCTime>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d11a      	bne.n	8001e5a <HAL_TIM_PeriodElapsedCallback+0x1fa>
						rtcStatus = SET_RTC_OK;
 8001e24:	4b49      	ldr	r3, [pc, #292]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	701a      	strb	r2, [r3, #0]
						printf("Time is succesfully set to = %s\r\n", getRTCTime());
 8001e2a:	f000 fd53 	bl	80028d4 <getRTCTime>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	4619      	mov	r1, r3
 8001e32:	484b      	ldr	r0, [pc, #300]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001e34:	f00d fd64 	bl	800f900 <iprintf>
						printf("UnixTime = %"PRIu32"\r\n", getUnixTime());
 8001e38:	f000 fec4 	bl	8002bc4 <getUnixTime>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4848      	ldr	r0, [pc, #288]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001e42:	f00d fd5d 	bl	800f900 <iprintf>
						currentTimer4Status = 6;
 8001e46:	4b37      	ldr	r3, [pc, #220]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e48:	2206      	movs	r2, #6
 8001e4a:	701a      	strb	r2, [r3, #0]
						msgLogger("Timer4 status is changed. 5 --> 6");
 8001e4c:	4846      	ldr	r0, [pc, #280]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001e4e:	f001 f9ad 	bl	80031ac <msgLogger>
						counter = 0;
 8001e52:	4b46      	ldr	r3, [pc, #280]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
}
 8001e58:	e0c0      	b.n	8001fdc <HAL_TIM_PeriodElapsedCallback+0x37c>
						msgLogger("setRTCTime Error");
 8001e5a:	4845      	ldr	r0, [pc, #276]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001e5c:	f001 f9a6 	bl	80031ac <msgLogger>
						counter++;
 8001e60:	4b42      	ldr	r3, [pc, #264]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	3301      	adds	r3, #1
 8001e66:	4a41      	ldr	r2, [pc, #260]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001e68:	6013      	str	r3, [r2, #0]
						if (counter > 10) {
 8001e6a:	4b40      	ldr	r3, [pc, #256]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2b0a      	cmp	r3, #10
 8001e70:	f340 80b4 	ble.w	8001fdc <HAL_TIM_PeriodElapsedCallback+0x37c>
							if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2) {
 8001e74:	2101      	movs	r1, #1
 8001e76:	483f      	ldr	r0, [pc, #252]	; (8001f74 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001e78:	f003 fa0c 	bl	8005294 <HAL_RTCEx_BKUPRead>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d00c      	beq.n	8001ea0 <HAL_TIM_PeriodElapsedCallback+0x240>
								msgLogger("setRTCTime Error happaned too many times.");
 8001e86:	483c      	ldr	r0, [pc, #240]	; (8001f78 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001e88:	f001 f990 	bl	80031ac <msgLogger>
								counter = 0;
 8001e8c:	4b37      	ldr	r3, [pc, #220]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
								currentTimer4Status = 0;
 8001e92:	4b24      	ldr	r3, [pc, #144]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	701a      	strb	r2, [r3, #0]
								msgLogger("Timer4 status is changed. 5 --> 0");
 8001e98:	4838      	ldr	r0, [pc, #224]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001e9a:	f001 f987 	bl	80031ac <msgLogger>
}
 8001e9e:	e09d      	b.n	8001fdc <HAL_TIM_PeriodElapsedCallback+0x37c>
								msgLogger("Going to use RTC Backup Value.");
 8001ea0:	4837      	ldr	r0, [pc, #220]	; (8001f80 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001ea2:	f001 f983 	bl	80031ac <msgLogger>
								printf("Time is succesfully set to = %s\r\n", getRTCTime());
 8001ea6:	f000 fd15 	bl	80028d4 <getRTCTime>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4619      	mov	r1, r3
 8001eae:	482c      	ldr	r0, [pc, #176]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001eb0:	f00d fd26 	bl	800f900 <iprintf>
								printf("UnixTime = %"PRIu32"\r\n", getUnixTime());
 8001eb4:	f000 fe86 	bl	8002bc4 <getUnixTime>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4829      	ldr	r0, [pc, #164]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001ebe:	f00d fd1f 	bl	800f900 <iprintf>
								currentTimer4Status = 6;
 8001ec2:	4b18      	ldr	r3, [pc, #96]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001ec4:	2206      	movs	r2, #6
 8001ec6:	701a      	strb	r2, [r3, #0]
								msgLogger("Timer4 status is changed. 5 --> 6");
 8001ec8:	4827      	ldr	r0, [pc, #156]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001eca:	f001 f96f 	bl	80031ac <msgLogger>
}
 8001ece:	e085      	b.n	8001fdc <HAL_TIM_PeriodElapsedCallback+0x37c>
				currentTimer4Status = 6;
 8001ed0:	4b14      	ldr	r3, [pc, #80]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001ed2:	2206      	movs	r2, #6
 8001ed4:	701a      	strb	r2, [r3, #0]
				msgLogger("Timer4 status is changed. 5 --> 6");
 8001ed6:	4824      	ldr	r0, [pc, #144]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001ed8:	f001 f968 	bl	80031ac <msgLogger>
}
 8001edc:	e07e      	b.n	8001fdc <HAL_TIM_PeriodElapsedCallback+0x37c>
		else if (currentTimer4Status == 6) {
 8001ede:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b06      	cmp	r3, #6
 8001ee6:	d14f      	bne.n	8001f88 <HAL_TIM_PeriodElapsedCallback+0x328>
			if (IsProductDone) {
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d074      	beq.n	8001fdc <HAL_TIM_PeriodElapsedCallback+0x37c>
				currentTimer4Status = 7;
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001ef4:	2207      	movs	r2, #7
 8001ef6:	701a      	strb	r2, [r3, #0]
				msgLogger("Timer4 status is changed. 6 --> 7");
 8001ef8:	4822      	ldr	r0, [pc, #136]	; (8001f84 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001efa:	f001 f957 	bl	80031ac <msgLogger>
}
 8001efe:	e06d      	b.n	8001fdc <HAL_TIM_PeriodElapsedCallback+0x37c>
 8001f00:	40000400 	.word	0x40000400
 8001f04:	20002c73 	.word	0x20002c73
 8001f08:	200002a4 	.word	0x200002a4
 8001f0c:	080134a4 	.word	0x080134a4
 8001f10:	080134c8 	.word	0x080134c8
 8001f14:	20000050 	.word	0x20000050
 8001f18:	080134ec 	.word	0x080134ec
 8001f1c:	40000800 	.word	0x40000800
 8001f20:	200002a8 	.word	0x200002a8
 8001f24:	20002c74 	.word	0x20002c74
 8001f28:	40020c00 	.word	0x40020c00
 8001f2c:	08013510 	.word	0x08013510
 8001f30:	08013534 	.word	0x08013534
 8001f34:	20000004 	.word	0x20000004
 8001f38:	08013558 	.word	0x08013558
 8001f3c:	08013568 	.word	0x08013568
 8001f40:	0801358c 	.word	0x0801358c
 8001f44:	080135c0 	.word	0x080135c0
 8001f48:	080135e4 	.word	0x080135e4
 8001f4c:	20000001 	.word	0x20000001
 8001f50:	20002c75 	.word	0x20002c75
 8001f54:	20000058 	.word	0x20000058
 8001f58:	20002c78 	.word	0x20002c78
 8001f5c:	20000054 	.word	0x20000054
 8001f60:	08013608 	.word	0x08013608
 8001f64:	0801362c 	.word	0x0801362c
 8001f68:	08013640 	.word	0x08013640
 8001f6c:	20003478 	.word	0x20003478
 8001f70:	08013664 	.word	0x08013664
 8001f74:	200034c4 	.word	0x200034c4
 8001f78:	08013678 	.word	0x08013678
 8001f7c:	080136a4 	.word	0x080136a4
 8001f80:	080136c8 	.word	0x080136c8
 8001f84:	080136e8 	.word	0x080136e8
		else if (currentTimer4Status == 7) {
 8001f88:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b07      	cmp	r3, #7
 8001f90:	d124      	bne.n	8001fdc <HAL_TIM_PeriodElapsedCallback+0x37c>
			if (sdStatus == SD_CARD_READY) {
 8001f92:	4b16      	ldr	r3, [pc, #88]	; (8001fec <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	b25b      	sxtb	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d111      	bne.n	8001fc0 <HAL_TIM_PeriodElapsedCallback+0x360>
				if (checkSDStore()) {
 8001f9c:	f000 ff50 	bl	8002e40 <checkSDStore>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d006      	beq.n	8001fb4 <HAL_TIM_PeriodElapsedCallback+0x354>
					currentTimer4Status = 6;
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8001fa8:	2206      	movs	r2, #6
 8001faa:	701a      	strb	r2, [r3, #0]
					msgLogger("Timer4 status is changed. 7 --> 6");
 8001fac:	4810      	ldr	r0, [pc, #64]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8001fae:	f001 f8fd 	bl	80031ac <msgLogger>
 8001fb2:	e005      	b.n	8001fc0 <HAL_TIM_PeriodElapsedCallback+0x360>
					currentTimer4Status = 0;
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	701a      	strb	r2, [r3, #0]
					msgLogger("Timer4 status is changed. 7 --> 0");
 8001fba:	480e      	ldr	r0, [pc, #56]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8001fbc:	f001 f8f6 	bl	80031ac <msgLogger>
			if (!IsProductDone) {
 8001fc0:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	f083 0301 	eor.w	r3, r3, #1
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d005      	beq.n	8001fdc <HAL_TIM_PeriodElapsedCallback+0x37c>
				currentTimer4Status = 6;
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8001fd2:	2206      	movs	r2, #6
 8001fd4:	701a      	strb	r2, [r3, #0]
				msgLogger("Timer4 status is changed. 7 --> 6");
 8001fd6:	4806      	ldr	r0, [pc, #24]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8001fd8:	f001 f8e8 	bl	80031ac <msgLogger>
}
 8001fdc:	bf00      	nop
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20002c74 	.word	0x20002c74
 8001fec:	200002b0 	.word	0x200002b0
 8001ff0:	0801370c 	.word	0x0801370c
 8001ff4:	08013730 	.word	0x08013730
 8001ff8:	20000050 	.word	0x20000050

08001ffc <checkInputs>:

void checkInputs(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
	/*
	 * GPIOB->IDR is input register of port B.
	 * It returns all of input status, but we only get 0-7.
	 */
	currentInputs = GPIOB->IDR;
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <checkInputs+0x38>)
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	b2da      	uxtb	r2, r3
 8002006:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <checkInputs+0x3c>)
 8002008:	701a      	strb	r2, [r3, #0]
	if (prevInputs != currentInputs) {
 800200a:	4b0c      	ldr	r3, [pc, #48]	; (800203c <checkInputs+0x40>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	b2da      	uxtb	r2, r3
 8002010:	4b09      	ldr	r3, [pc, #36]	; (8002038 <checkInputs+0x3c>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	429a      	cmp	r2, r3
 8002018:	d00a      	beq.n	8002030 <checkInputs+0x34>
		inputStatusLogger(currentInputs);
 800201a:	4b07      	ldr	r3, [pc, #28]	; (8002038 <checkInputs+0x3c>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	4618      	mov	r0, r3
 8002022:	f001 f8db 	bl	80031dc <inputStatusLogger>
		prevInputs = currentInputs;
 8002026:	4b04      	ldr	r3, [pc, #16]	; (8002038 <checkInputs+0x3c>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	b2da      	uxtb	r2, r3
 800202c:	4b03      	ldr	r3, [pc, #12]	; (800203c <checkInputs+0x40>)
 800202e:	701a      	strb	r2, [r3, #0]
	}
}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40020400 	.word	0x40020400
 8002038:	20002c70 	.word	0x20002c70
 800203c:	20002c71 	.word	0x20002c71

08002040 <checkProduct>:

int checkProduct(void)
{
 8002040:	b5b0      	push	{r4, r5, r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
	switch(currentProductStatus) {
 8002046:	4bb4      	ldr	r3, [pc, #720]	; (8002318 <checkProduct+0x2d8>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b07      	cmp	r3, #7
 800204e:	f200 81d6 	bhi.w	80023fe <checkProduct+0x3be>
 8002052:	a201      	add	r2, pc, #4	; (adr r2, 8002058 <checkProduct+0x18>)
 8002054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002058:	08002079 	.word	0x08002079
 800205c:	080020b5 	.word	0x080020b5
 8002060:	0800210d 	.word	0x0800210d
 8002064:	08002175 	.word	0x08002175
 8002068:	080021dd 	.word	0x080021dd
 800206c:	0800224b 	.word	0x0800224b
 8002070:	080022b3 	.word	0x080022b3
 8002074:	08002351 	.word	0x08002351
	case 0:
		if (((currentInputs & bit(MOULD_BACKWARD)) == bit(MOULD_BACKWARD)) == true) {
 8002078:	4ba8      	ldr	r3, [pc, #672]	; (800231c <checkProduct+0x2dc>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	b2db      	uxtb	r3, r3
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b01      	cmp	r3, #1
 8002084:	f040 81ac 	bne.w	80023e0 <checkProduct+0x3a0>
			sprintf(product->mouldBackward.inputHighDate, "%"PRIu32"%s", getUnixTime(), getSubsecondTime());
 8002088:	4ba5      	ldr	r3, [pc, #660]	; (8002320 <checkProduct+0x2e0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f103 041e 	add.w	r4, r3, #30
 8002090:	f000 fd98 	bl	8002bc4 <getUnixTime>
 8002094:	4605      	mov	r5, r0
 8002096:	f000 fc9f 	bl	80029d8 <getSubsecondTime>
 800209a:	4603      	mov	r3, r0
 800209c:	462a      	mov	r2, r5
 800209e:	49a1      	ldr	r1, [pc, #644]	; (8002324 <checkProduct+0x2e4>)
 80020a0:	4620      	mov	r0, r4
 80020a2:	f00d fcd1 	bl	800fa48 <siprintf>
			currentProductStatus = 1;
 80020a6:	4b9c      	ldr	r3, [pc, #624]	; (8002318 <checkProduct+0x2d8>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	701a      	strb	r2, [r3, #0]
			msgLogger("Current product status is changed. 0 --> 1");
 80020ac:	489e      	ldr	r0, [pc, #632]	; (8002328 <checkProduct+0x2e8>)
 80020ae:	f001 f87d 	bl	80031ac <msgLogger>
		}
		break;
 80020b2:	e195      	b.n	80023e0 <checkProduct+0x3a0>
	case 1:
		if (((currentInputs & bit(MOULD_BACKWARD)) == bit(MOULD_BACKWARD)) == false) {
 80020b4:	4b99      	ldr	r3, [pc, #612]	; (800231c <checkProduct+0x2dc>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d014      	beq.n	80020ec <checkProduct+0xac>
			sprintf(product->mouldBackward.inputLowDate, "%"PRIu32"%s", getUnixTime(), getSubsecondTime());
 80020c2:	4b97      	ldr	r3, [pc, #604]	; (8002320 <checkProduct+0x2e0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	461d      	mov	r5, r3
 80020c8:	f000 fd7c 	bl	8002bc4 <getUnixTime>
 80020cc:	4604      	mov	r4, r0
 80020ce:	f000 fc83 	bl	80029d8 <getSubsecondTime>
 80020d2:	4603      	mov	r3, r0
 80020d4:	4622      	mov	r2, r4
 80020d6:	4993      	ldr	r1, [pc, #588]	; (8002324 <checkProduct+0x2e4>)
 80020d8:	4628      	mov	r0, r5
 80020da:	f00d fcb5 	bl	800fa48 <siprintf>
			currentProductStatus = 2;
 80020de:	4b8e      	ldr	r3, [pc, #568]	; (8002318 <checkProduct+0x2d8>)
 80020e0:	2202      	movs	r2, #2
 80020e2:	701a      	strb	r2, [r3, #0]
			msgLogger("Current product status is changed. 1 --> 2");
 80020e4:	4891      	ldr	r0, [pc, #580]	; (800232c <checkProduct+0x2ec>)
 80020e6:	f001 f861 	bl	80031ac <msgLogger>
				currentProductStatus = 0;
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
				return 1;
			}
		}
		break;
 80020ea:	e17b      	b.n	80023e4 <checkProduct+0x3a4>
			if (((currentInputs & bit(MOULD_FORWARD)) == bit(MOULD_FORWARD)) == true) {
 80020ec:	4b8b      	ldr	r3, [pc, #556]	; (800231c <checkProduct+0x2dc>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	2b10      	cmp	r3, #16
 80020f8:	f040 8174 	bne.w	80023e4 <checkProduct+0x3a4>
				currentProductStatus = 0;
 80020fc:	4b86      	ldr	r3, [pc, #536]	; (8002318 <checkProduct+0x2d8>)
 80020fe:	2200      	movs	r2, #0
 8002100:	701a      	strb	r2, [r3, #0]
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
 8002102:	488b      	ldr	r0, [pc, #556]	; (8002330 <checkProduct+0x2f0>)
 8002104:	f001 f852 	bl	80031ac <msgLogger>
				return 1;
 8002108:	2301      	movs	r3, #1
 800210a:	e179      	b.n	8002400 <checkProduct+0x3c0>
	case 2:
		if (((currentInputs & bit(INJECTION_FORWARD)) == bit(INJECTION_FORWARD)) == true) {
 800210c:	4b83      	ldr	r3, [pc, #524]	; (800231c <checkProduct+0x2dc>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	b2db      	uxtb	r3, r3
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b02      	cmp	r3, #2
 8002118:	d115      	bne.n	8002146 <checkProduct+0x106>
			sprintf(product->injectionForward.inputHighDate, "%"PRIu32"%s", getUnixTime(), getSubsecondTime());
 800211a:	4b81      	ldr	r3, [pc, #516]	; (8002320 <checkProduct+0x2e0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f103 045a 	add.w	r4, r3, #90	; 0x5a
 8002122:	f000 fd4f 	bl	8002bc4 <getUnixTime>
 8002126:	4605      	mov	r5, r0
 8002128:	f000 fc56 	bl	80029d8 <getSubsecondTime>
 800212c:	4603      	mov	r3, r0
 800212e:	462a      	mov	r2, r5
 8002130:	497c      	ldr	r1, [pc, #496]	; (8002324 <checkProduct+0x2e4>)
 8002132:	4620      	mov	r0, r4
 8002134:	f00d fc88 	bl	800fa48 <siprintf>
			currentProductStatus = 3;
 8002138:	4b77      	ldr	r3, [pc, #476]	; (8002318 <checkProduct+0x2d8>)
 800213a:	2203      	movs	r2, #3
 800213c:	701a      	strb	r2, [r3, #0]
			msgLogger("Current product status is changed. 2 --> 3");
 800213e:	487d      	ldr	r0, [pc, #500]	; (8002334 <checkProduct+0x2f4>)
 8002140:	f001 f834 	bl	80031ac <msgLogger>
				currentProductStatus = 0;
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
				return 2;
			}
		}
		break;
 8002144:	e150      	b.n	80023e8 <checkProduct+0x3a8>
			if (((currentInputs & bit(MOULD_FORWARD)) == bit(MOULD_FORWARD)) == true) {
 8002146:	4b75      	ldr	r3, [pc, #468]	; (800231c <checkProduct+0x2dc>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	f003 0310 	and.w	r3, r3, #16
 8002150:	2b10      	cmp	r3, #16
 8002152:	f040 8149 	bne.w	80023e8 <checkProduct+0x3a8>
				product->productEndDate = getUnixTime();
 8002156:	4b72      	ldr	r3, [pc, #456]	; (8002320 <checkProduct+0x2e0>)
 8002158:	681c      	ldr	r4, [r3, #0]
 800215a:	f000 fd33 	bl	8002bc4 <getUnixTime>
 800215e:	4603      	mov	r3, r0
 8002160:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
				currentProductStatus = 0;
 8002164:	4b6c      	ldr	r3, [pc, #432]	; (8002318 <checkProduct+0x2d8>)
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
 800216a:	4871      	ldr	r0, [pc, #452]	; (8002330 <checkProduct+0x2f0>)
 800216c:	f001 f81e 	bl	80031ac <msgLogger>
				return 2;
 8002170:	2302      	movs	r3, #2
 8002172:	e145      	b.n	8002400 <checkProduct+0x3c0>
	case 3:
		if (((currentInputs & bit(INJECTION_FORWARD)) == bit(INJECTION_FORWARD)) == false) {
 8002174:	4b69      	ldr	r3, [pc, #420]	; (800231c <checkProduct+0x2dc>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	b2db      	uxtb	r3, r3
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b02      	cmp	r3, #2
 8002180:	d015      	beq.n	80021ae <checkProduct+0x16e>
			sprintf(product->injectionForward.inputLowDate, "%"PRIu32"%s", getUnixTime(), getSubsecondTime());
 8002182:	4b67      	ldr	r3, [pc, #412]	; (8002320 <checkProduct+0x2e0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800218a:	f000 fd1b 	bl	8002bc4 <getUnixTime>
 800218e:	4605      	mov	r5, r0
 8002190:	f000 fc22 	bl	80029d8 <getSubsecondTime>
 8002194:	4603      	mov	r3, r0
 8002196:	462a      	mov	r2, r5
 8002198:	4962      	ldr	r1, [pc, #392]	; (8002324 <checkProduct+0x2e4>)
 800219a:	4620      	mov	r0, r4
 800219c:	f00d fc54 	bl	800fa48 <siprintf>
			currentProductStatus = 4;
 80021a0:	4b5d      	ldr	r3, [pc, #372]	; (8002318 <checkProduct+0x2d8>)
 80021a2:	2204      	movs	r2, #4
 80021a4:	701a      	strb	r2, [r3, #0]
			msgLogger("Current product status is changed. 3 --> 4");
 80021a6:	4864      	ldr	r0, [pc, #400]	; (8002338 <checkProduct+0x2f8>)
 80021a8:	f001 f800 	bl	80031ac <msgLogger>
				currentProductStatus = 0;
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
				return 3;
			}
		}
		break;
 80021ac:	e11e      	b.n	80023ec <checkProduct+0x3ac>
			if (((currentInputs & bit(MOULD_FORWARD)) == bit(MOULD_FORWARD)) == true) {
 80021ae:	4b5b      	ldr	r3, [pc, #364]	; (800231c <checkProduct+0x2dc>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	f003 0310 	and.w	r3, r3, #16
 80021b8:	2b10      	cmp	r3, #16
 80021ba:	f040 8117 	bne.w	80023ec <checkProduct+0x3ac>
				product->productEndDate = getUnixTime();
 80021be:	4b58      	ldr	r3, [pc, #352]	; (8002320 <checkProduct+0x2e0>)
 80021c0:	681c      	ldr	r4, [r3, #0]
 80021c2:	f000 fcff 	bl	8002bc4 <getUnixTime>
 80021c6:	4603      	mov	r3, r0
 80021c8:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
				currentProductStatus = 0;
 80021cc:	4b52      	ldr	r3, [pc, #328]	; (8002318 <checkProduct+0x2d8>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
 80021d2:	4857      	ldr	r0, [pc, #348]	; (8002330 <checkProduct+0x2f0>)
 80021d4:	f000 ffea 	bl	80031ac <msgLogger>
				return 3;
 80021d8:	2303      	movs	r3, #3
 80021da:	e111      	b.n	8002400 <checkProduct+0x3c0>
	case 4:
		if (((currentInputs & bit(RAW_MATERIAL_PACKING)) == bit(RAW_MATERIAL_PACKING)) == true) {
 80021dc:	4b4f      	ldr	r3, [pc, #316]	; (800231c <checkProduct+0x2dc>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d118      	bne.n	800221c <checkProduct+0x1dc>
			sprintf(product->rawMaterialPacking.inputHighDate, "%"PRIu32"%s", getUnixTime(), getSubsecondTime());
 80021ea:	4b4d      	ldr	r3, [pc, #308]	; (8002320 <checkProduct+0x2e0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f103 0496 	add.w	r4, r3, #150	; 0x96
 80021f2:	f000 fce7 	bl	8002bc4 <getUnixTime>
 80021f6:	4605      	mov	r5, r0
 80021f8:	f000 fbee 	bl	80029d8 <getSubsecondTime>
 80021fc:	4603      	mov	r3, r0
 80021fe:	462a      	mov	r2, r5
 8002200:	4948      	ldr	r1, [pc, #288]	; (8002324 <checkProduct+0x2e4>)
 8002202:	4620      	mov	r0, r4
 8002204:	f00d fc20 	bl	800fa48 <siprintf>
			currentProductStatus = 5;
 8002208:	4b43      	ldr	r3, [pc, #268]	; (8002318 <checkProduct+0x2d8>)
 800220a:	2205      	movs	r2, #5
 800220c:	701a      	strb	r2, [r3, #0]
			msgLogger("Current product status is changed. 4 --> 5");
 800220e:	484b      	ldr	r0, [pc, #300]	; (800233c <checkProduct+0x2fc>)
 8002210:	f000 ffcc 	bl	80031ac <msgLogger>
			IsProductDone = false;
 8002214:	4b4a      	ldr	r3, [pc, #296]	; (8002340 <checkProduct+0x300>)
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]
				currentProductStatus = 0;
				msgLogger("Current state is 0. Unexpected behavior happaned.");
				return 4;
			}
		}
		break;
 800221a:	e0e9      	b.n	80023f0 <checkProduct+0x3b0>
			if (((currentInputs & bit(MOULD_FORWARD)) == bit(MOULD_FORWARD)) == true) {
 800221c:	4b3f      	ldr	r3, [pc, #252]	; (800231c <checkProduct+0x2dc>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	2b10      	cmp	r3, #16
 8002228:	f040 80e2 	bne.w	80023f0 <checkProduct+0x3b0>
				product->productEndDate = getUnixTime();
 800222c:	4b3c      	ldr	r3, [pc, #240]	; (8002320 <checkProduct+0x2e0>)
 800222e:	681c      	ldr	r4, [r3, #0]
 8002230:	f000 fcc8 	bl	8002bc4 <getUnixTime>
 8002234:	4603      	mov	r3, r0
 8002236:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
				currentProductStatus = 0;
 800223a:	4b37      	ldr	r3, [pc, #220]	; (8002318 <checkProduct+0x2d8>)
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
				msgLogger("Current state is 0. Unexpected behavior happaned.");
 8002240:	4840      	ldr	r0, [pc, #256]	; (8002344 <checkProduct+0x304>)
 8002242:	f000 ffb3 	bl	80031ac <msgLogger>
				return 4;
 8002246:	2304      	movs	r3, #4
 8002248:	e0da      	b.n	8002400 <checkProduct+0x3c0>
	case 5:
		if (((currentInputs & bit(RAW_MATERIAL_PACKING)) == bit(RAW_MATERIAL_PACKING)) == false) {
 800224a:	4b34      	ldr	r3, [pc, #208]	; (800231c <checkProduct+0x2dc>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b04      	cmp	r3, #4
 8002256:	d015      	beq.n	8002284 <checkProduct+0x244>
			sprintf(product->rawMaterialPacking.inputLowDate, "%"PRIu32"%s", getUnixTime(), getSubsecondTime());
 8002258:	4b31      	ldr	r3, [pc, #196]	; (8002320 <checkProduct+0x2e0>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8002260:	f000 fcb0 	bl	8002bc4 <getUnixTime>
 8002264:	4605      	mov	r5, r0
 8002266:	f000 fbb7 	bl	80029d8 <getSubsecondTime>
 800226a:	4603      	mov	r3, r0
 800226c:	462a      	mov	r2, r5
 800226e:	492d      	ldr	r1, [pc, #180]	; (8002324 <checkProduct+0x2e4>)
 8002270:	4620      	mov	r0, r4
 8002272:	f00d fbe9 	bl	800fa48 <siprintf>
			currentProductStatus = 6;
 8002276:	4b28      	ldr	r3, [pc, #160]	; (8002318 <checkProduct+0x2d8>)
 8002278:	2206      	movs	r2, #6
 800227a:	701a      	strb	r2, [r3, #0]
			msgLogger("Current product status is changed. 5 --> 6");
 800227c:	4832      	ldr	r0, [pc, #200]	; (8002348 <checkProduct+0x308>)
 800227e:	f000 ff95 	bl	80031ac <msgLogger>
				currentProductStatus = 0;
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
				return 5;
			}
		}
		break;
 8002282:	e0b7      	b.n	80023f4 <checkProduct+0x3b4>
			if (((currentInputs & bit(MOULD_FORWARD)) == bit(MOULD_FORWARD)) == true) {
 8002284:	4b25      	ldr	r3, [pc, #148]	; (800231c <checkProduct+0x2dc>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	f003 0310 	and.w	r3, r3, #16
 800228e:	2b10      	cmp	r3, #16
 8002290:	f040 80b0 	bne.w	80023f4 <checkProduct+0x3b4>
				product->productEndDate = getUnixTime();
 8002294:	4b22      	ldr	r3, [pc, #136]	; (8002320 <checkProduct+0x2e0>)
 8002296:	681c      	ldr	r4, [r3, #0]
 8002298:	f000 fc94 	bl	8002bc4 <getUnixTime>
 800229c:	4603      	mov	r3, r0
 800229e:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
				currentProductStatus = 0;
 80022a2:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <checkProduct+0x2d8>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	701a      	strb	r2, [r3, #0]
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
 80022a8:	4821      	ldr	r0, [pc, #132]	; (8002330 <checkProduct+0x2f0>)
 80022aa:	f000 ff7f 	bl	80031ac <msgLogger>
				return 5;
 80022ae:	2305      	movs	r3, #5
 80022b0:	e0a6      	b.n	8002400 <checkProduct+0x3c0>
	case 6:
		if (((currentInputs & bit(MOULD_FORWARD)) == bit(MOULD_FORWARD)) == true) {
 80022b2:	4b1a      	ldr	r3, [pc, #104]	; (800231c <checkProduct+0x2dc>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	f003 0310 	and.w	r3, r3, #16
 80022bc:	2b10      	cmp	r3, #16
 80022be:	d115      	bne.n	80022ec <checkProduct+0x2ac>
			sprintf(product->mouldForward.inputHighDate, "%"PRIu32"%s", getUnixTime(), getSubsecondTime());
 80022c0:	4b17      	ldr	r3, [pc, #92]	; (8002320 <checkProduct+0x2e0>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f103 04d2 	add.w	r4, r3, #210	; 0xd2
 80022c8:	f000 fc7c 	bl	8002bc4 <getUnixTime>
 80022cc:	4605      	mov	r5, r0
 80022ce:	f000 fb83 	bl	80029d8 <getSubsecondTime>
 80022d2:	4603      	mov	r3, r0
 80022d4:	462a      	mov	r2, r5
 80022d6:	4913      	ldr	r1, [pc, #76]	; (8002324 <checkProduct+0x2e4>)
 80022d8:	4620      	mov	r0, r4
 80022da:	f00d fbb5 	bl	800fa48 <siprintf>
			currentProductStatus = 7;
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <checkProduct+0x2d8>)
 80022e0:	2207      	movs	r2, #7
 80022e2:	701a      	strb	r2, [r3, #0]
			msgLogger("Current product status is changed. 6 --> 7");
 80022e4:	4819      	ldr	r0, [pc, #100]	; (800234c <checkProduct+0x30c>)
 80022e6:	f000 ff61 	bl	80031ac <msgLogger>
				currentProductStatus = 0;
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
				return 6;
			}
		}
		break;
 80022ea:	e085      	b.n	80023f8 <checkProduct+0x3b8>
			if (((currentInputs & bit(MOULD_BACKWARD)) == bit(MOULD_BACKWARD)) == true) {
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <checkProduct+0x2dc>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d17e      	bne.n	80023f8 <checkProduct+0x3b8>
			    product->productEndDate = getUnixTime();
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <checkProduct+0x2e0>)
 80022fc:	681c      	ldr	r4, [r3, #0]
 80022fe:	f000 fc61 	bl	8002bc4 <getUnixTime>
 8002302:	4603      	mov	r3, r0
 8002304:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
				currentProductStatus = 0;
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <checkProduct+0x2d8>)
 800230a:	2200      	movs	r2, #0
 800230c:	701a      	strb	r2, [r3, #0]
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
 800230e:	4808      	ldr	r0, [pc, #32]	; (8002330 <checkProduct+0x2f0>)
 8002310:	f000 ff4c 	bl	80031ac <msgLogger>
				return 6;
 8002314:	2306      	movs	r3, #6
 8002316:	e073      	b.n	8002400 <checkProduct+0x3c0>
 8002318:	20002c72 	.word	0x20002c72
 800231c:	20002c70 	.word	0x20002c70
 8002320:	200002a4 	.word	0x200002a4
 8002324:	08013754 	.word	0x08013754
 8002328:	0801375c 	.word	0x0801375c
 800232c:	08013788 	.word	0x08013788
 8002330:	080137b4 	.word	0x080137b4
 8002334:	080137f0 	.word	0x080137f0
 8002338:	0801381c 	.word	0x0801381c
 800233c:	08013848 	.word	0x08013848
 8002340:	20000050 	.word	0x20000050
 8002344:	08013874 	.word	0x08013874
 8002348:	080138a8 	.word	0x080138a8
 800234c:	080138d4 	.word	0x080138d4
	case 7:
		if (((currentInputs & bit(MOULD_FORWARD)) == bit(MOULD_FORWARD)) == false) {
 8002350:	4b2d      	ldr	r3, [pc, #180]	; (8002408 <checkProduct+0x3c8>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	f003 0310 	and.w	r3, r3, #16
 800235a:	2b10      	cmp	r3, #16
 800235c:	d02a      	beq.n	80023b4 <checkProduct+0x374>
			sprintf(product->mouldForward.inputLowDate, "%"PRIu32"%s", getUnixTime(), getSubsecondTime());
 800235e:	4b2b      	ldr	r3, [pc, #172]	; (800240c <checkProduct+0x3cc>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 8002366:	f000 fc2d 	bl	8002bc4 <getUnixTime>
 800236a:	4605      	mov	r5, r0
 800236c:	f000 fb34 	bl	80029d8 <getSubsecondTime>
 8002370:	4603      	mov	r3, r0
 8002372:	462a      	mov	r2, r5
 8002374:	4926      	ldr	r1, [pc, #152]	; (8002410 <checkProduct+0x3d0>)
 8002376:	4620      	mov	r0, r4
 8002378:	f00d fb66 	bl	800fa48 <siprintf>
			product->productEndDate = getUnixTime();
 800237c:	4b23      	ldr	r3, [pc, #140]	; (800240c <checkProduct+0x3cc>)
 800237e:	681c      	ldr	r4, [r3, #0]
 8002380:	f000 fc20 	bl	8002bc4 <getUnixTime>
 8002384:	4603      	mov	r3, r0
 8002386:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
			currentProductStatus = 0;
 800238a:	4b22      	ldr	r3, [pc, #136]	; (8002414 <checkProduct+0x3d4>)
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
			msgLogger("Product produced succesfully.");
 8002390:	4821      	ldr	r0, [pc, #132]	; (8002418 <checkProduct+0x3d8>)
 8002392:	f000 ff0b 	bl	80031ac <msgLogger>
			int sdResult = writeSDProductInfo(product);
 8002396:	4b1d      	ldr	r3, [pc, #116]	; (800240c <checkProduct+0x3cc>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f000 f88c 	bl	80024b8 <writeSDProductInfo>
 80023a0:	4603      	mov	r3, r0
 80023a2:	607b      	str	r3, [r7, #4]
			if (sdResult)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <checkProduct+0x370>
				msgLogger("Data is created on SD CARD.");
 80023aa:	481c      	ldr	r0, [pc, #112]	; (800241c <checkProduct+0x3dc>)
 80023ac:	f000 fefe 	bl	80031ac <msgLogger>
			return 8;
 80023b0:	2308      	movs	r3, #8
 80023b2:	e025      	b.n	8002400 <checkProduct+0x3c0>
		}
		else {
			if (((currentInputs & bit(MOULD_BACKWARD)) == bit(MOULD_BACKWARD)) == true) {
 80023b4:	4b14      	ldr	r3, [pc, #80]	; (8002408 <checkProduct+0x3c8>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d11c      	bne.n	80023fc <checkProduct+0x3bc>
				product->productEndDate = getUnixTime();
 80023c2:	4b12      	ldr	r3, [pc, #72]	; (800240c <checkProduct+0x3cc>)
 80023c4:	681c      	ldr	r4, [r3, #0]
 80023c6:	f000 fbfd 	bl	8002bc4 <getUnixTime>
 80023ca:	4603      	mov	r3, r0
 80023cc:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
				currentProductStatus = 0;
 80023d0:	4b10      	ldr	r3, [pc, #64]	; (8002414 <checkProduct+0x3d4>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
 80023d6:	4812      	ldr	r0, [pc, #72]	; (8002420 <checkProduct+0x3e0>)
 80023d8:	f000 fee8 	bl	80031ac <msgLogger>
				return 7;
 80023dc:	2307      	movs	r3, #7
 80023de:	e00f      	b.n	8002400 <checkProduct+0x3c0>
		break;
 80023e0:	bf00      	nop
 80023e2:	e00c      	b.n	80023fe <checkProduct+0x3be>
		break;
 80023e4:	bf00      	nop
 80023e6:	e00a      	b.n	80023fe <checkProduct+0x3be>
		break;
 80023e8:	bf00      	nop
 80023ea:	e008      	b.n	80023fe <checkProduct+0x3be>
		break;
 80023ec:	bf00      	nop
 80023ee:	e006      	b.n	80023fe <checkProduct+0x3be>
		break;
 80023f0:	bf00      	nop
 80023f2:	e004      	b.n	80023fe <checkProduct+0x3be>
		break;
 80023f4:	bf00      	nop
 80023f6:	e002      	b.n	80023fe <checkProduct+0x3be>
		break;
 80023f8:	bf00      	nop
 80023fa:	e000      	b.n	80023fe <checkProduct+0x3be>
			}
		}
		break;
 80023fc:	bf00      	nop
	}
	return 0;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bdb0      	pop	{r4, r5, r7, pc}
 8002408:	20002c70 	.word	0x20002c70
 800240c:	200002a4 	.word	0x200002a4
 8002410:	08013754 	.word	0x08013754
 8002414:	20002c72 	.word	0x20002c72
 8002418:	08013900 	.word	0x08013900
 800241c:	08013920 	.word	0x08013920
 8002420:	080137b4 	.word	0x080137b4

08002424 <fillProduct>:

void fillProduct(struct productVal *product)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
	strcpy(product->injectionForward.inputHighDate, "null");
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	335a      	adds	r3, #90	; 0x5a
 8002430:	4a1f      	ldr	r2, [pc, #124]	; (80024b0 <fillProduct+0x8c>)
 8002432:	6810      	ldr	r0, [r2, #0]
 8002434:	6018      	str	r0, [r3, #0]
 8002436:	7912      	ldrb	r2, [r2, #4]
 8002438:	711a      	strb	r2, [r3, #4]
	strcpy(product->injectionForward.inputLowDate, "null");
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	333c      	adds	r3, #60	; 0x3c
 800243e:	4a1c      	ldr	r2, [pc, #112]	; (80024b0 <fillProduct+0x8c>)
 8002440:	6810      	ldr	r0, [r2, #0]
 8002442:	6018      	str	r0, [r3, #0]
 8002444:	7912      	ldrb	r2, [r2, #4]
 8002446:	711a      	strb	r2, [r3, #4]
	strcpy(product->mouldBackward.inputHighDate, "null");
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	331e      	adds	r3, #30
 800244c:	4a18      	ldr	r2, [pc, #96]	; (80024b0 <fillProduct+0x8c>)
 800244e:	6810      	ldr	r0, [r2, #0]
 8002450:	6018      	str	r0, [r3, #0]
 8002452:	7912      	ldrb	r2, [r2, #4]
 8002454:	711a      	strb	r2, [r3, #4]
	strcpy(product->mouldBackward.inputLowDate, "null");
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a15      	ldr	r2, [pc, #84]	; (80024b0 <fillProduct+0x8c>)
 800245a:	6810      	ldr	r0, [r2, #0]
 800245c:	6018      	str	r0, [r3, #0]
 800245e:	7912      	ldrb	r2, [r2, #4]
 8002460:	711a      	strb	r2, [r3, #4]
	strcpy(product->mouldForward.inputHighDate, "null");
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	33d2      	adds	r3, #210	; 0xd2
 8002466:	4a12      	ldr	r2, [pc, #72]	; (80024b0 <fillProduct+0x8c>)
 8002468:	6810      	ldr	r0, [r2, #0]
 800246a:	6018      	str	r0, [r3, #0]
 800246c:	7912      	ldrb	r2, [r2, #4]
 800246e:	711a      	strb	r2, [r3, #4]
	strcpy(product->mouldForward.inputLowDate, "null");
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	33b4      	adds	r3, #180	; 0xb4
 8002474:	4a0e      	ldr	r2, [pc, #56]	; (80024b0 <fillProduct+0x8c>)
 8002476:	6810      	ldr	r0, [r2, #0]
 8002478:	6018      	str	r0, [r3, #0]
 800247a:	7912      	ldrb	r2, [r2, #4]
 800247c:	711a      	strb	r2, [r3, #4]
	strcpy(product->rawMaterialPacking.inputHighDate, "null");
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3396      	adds	r3, #150	; 0x96
 8002482:	4a0b      	ldr	r2, [pc, #44]	; (80024b0 <fillProduct+0x8c>)
 8002484:	6810      	ldr	r0, [r2, #0]
 8002486:	6018      	str	r0, [r3, #0]
 8002488:	7912      	ldrb	r2, [r2, #4]
 800248a:	711a      	strb	r2, [r3, #4]
	strcpy(product->rawMaterialPacking.inputLowDate, "null");
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3378      	adds	r3, #120	; 0x78
 8002490:	4a07      	ldr	r2, [pc, #28]	; (80024b0 <fillProduct+0x8c>)
 8002492:	6810      	ldr	r0, [r2, #0]
 8002494:	6018      	str	r0, [r3, #0]
 8002496:	7912      	ldrb	r2, [r2, #4]
 8002498:	711a      	strb	r2, [r3, #4]
	product->productEndDate = 0;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	0801393c 	.word	0x0801393c
 80024b4:	00000000 	.word	0x00000000

080024b8 <writeSDProductInfo>:

bool writeSDProductInfo(struct productVal *product)
{
 80024b8:	b5b0      	push	{r4, r5, r7, lr}
 80024ba:	b0a2      	sub	sp, #136	; 0x88
 80024bc:	af08      	add	r7, sp, #32
 80024be:	6078      	str	r0, [r7, #4]
	 * To calculate injectionTime = TimeDouble(Injection-HighSignal) - TimeDouble(RawMaterial-HighSignal)
	 * Get these signals difference to calculate.
	 * Temperature signal will be added when it is OK. Now it is static defined to make a data look like DTO.
	 */
	char *eptr;
	double realCycleTime = strtod(product->mouldForward.inputLowDate, &eptr) - strtod(product->mouldBackward.inputHighDate, &eptr);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	33b4      	adds	r3, #180	; 0xb4
 80024c4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80024c8:	4611      	mov	r1, r2
 80024ca:	4618      	mov	r0, r3
 80024cc:	f00e f918 	bl	8010700 <strtod>
 80024d0:	ec55 4b10 	vmov	r4, r5, d0
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	331e      	adds	r3, #30
 80024d8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80024dc:	4611      	mov	r1, r2
 80024de:	4618      	mov	r0, r3
 80024e0:	f00e f90e 	bl	8010700 <strtod>
 80024e4:	ec53 2b10 	vmov	r2, r3, d0
 80024e8:	4620      	mov	r0, r4
 80024ea:	4629      	mov	r1, r5
 80024ec:	f7fd fed4 	bl	8000298 <__aeabi_dsub>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double coolingTime = strtod(product->mouldForward.inputHighDate, &eptr) - strtod(product->rawMaterialPacking.inputHighDate, &eptr);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	33d2      	adds	r3, #210	; 0xd2
 80024fc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002500:	4611      	mov	r1, r2
 8002502:	4618      	mov	r0, r3
 8002504:	f00e f8fc 	bl	8010700 <strtod>
 8002508:	ec55 4b10 	vmov	r4, r5, d0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3396      	adds	r3, #150	; 0x96
 8002510:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002514:	4611      	mov	r1, r2
 8002516:	4618      	mov	r0, r3
 8002518:	f00e f8f2 	bl	8010700 <strtod>
 800251c:	ec53 2b10 	vmov	r2, r3, d0
 8002520:	4620      	mov	r0, r4
 8002522:	4629      	mov	r1, r5
 8002524:	f7fd feb8 	bl	8000298 <__aeabi_dsub>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double injectionTime = strtod(product->rawMaterialPacking.inputHighDate, &eptr) - strtod(product->injectionForward.inputHighDate, &eptr);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3396      	adds	r3, #150	; 0x96
 8002534:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002538:	4611      	mov	r1, r2
 800253a:	4618      	mov	r0, r3
 800253c:	f00e f8e0 	bl	8010700 <strtod>
 8002540:	ec55 4b10 	vmov	r4, r5, d0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	335a      	adds	r3, #90	; 0x5a
 8002548:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800254c:	4611      	mov	r1, r2
 800254e:	4618      	mov	r0, r3
 8002550:	f00e f8d6 	bl	8010700 <strtod>
 8002554:	ec53 2b10 	vmov	r2, r3, d0
 8002558:	4620      	mov	r0, r4
 800255a:	4629      	mov	r1, r5
 800255c:	f7fd fe9c 	bl	8000298 <__aeabi_dsub>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	double temperature1 = 0.1;
 8002568:	a347      	add	r3, pc, #284	; (adr r3, 8002688 <writeSDProductInfo+0x1d0>)
 800256a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	if (sdStatus == SD_CARD_READY) {
 8002572:	4b3d      	ldr	r3, [pc, #244]	; (8002668 <writeSDProductInfo+0x1b0>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	b25b      	sxtb	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d16f      	bne.n	800265c <writeSDProductInfo+0x1a4>
		sdStatus = SD_CARD_BUSY;
 800257c:	4b3a      	ldr	r3, [pc, #232]	; (8002668 <writeSDProductInfo+0x1b0>)
 800257e:	22ff      	movs	r2, #255	; 0xff
 8002580:	701a      	strb	r2, [r3, #0]
		char fileName[50];
		if (product->productEndDate > 0) {
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d009      	beq.n	80025a0 <writeSDProductInfo+0xe8>
			sprintf(fileName, "Data/%"PRIu32".log", product->productEndDate);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002592:	f107 030c 	add.w	r3, r7, #12
 8002596:	4935      	ldr	r1, [pc, #212]	; (800266c <writeSDProductInfo+0x1b4>)
 8002598:	4618      	mov	r0, r3
 800259a:	f00d fa55 	bl	800fa48 <siprintf>
 800259e:	e008      	b.n	80025b2 <writeSDProductInfo+0xfa>
		} else {
			sprintf(fileName, "Data/%s_Err.log", getDataTime());
 80025a0:	f000 fa44 	bl	8002a2c <getDataTime>
 80025a4:	4602      	mov	r2, r0
 80025a6:	f107 030c 	add.w	r3, r7, #12
 80025aa:	4931      	ldr	r1, [pc, #196]	; (8002670 <writeSDProductInfo+0x1b8>)
 80025ac:	4618      	mov	r0, r3
 80025ae:	f00d fa4b 	bl	800fa48 <siprintf>
		}
		fresult = f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_WRITE);
 80025b2:	f107 030c 	add.w	r3, r7, #12
 80025b6:	2212      	movs	r2, #18
 80025b8:	4619      	mov	r1, r3
 80025ba:	482e      	ldr	r0, [pc, #184]	; (8002674 <writeSDProductInfo+0x1bc>)
 80025bc:	f007 f996 	bl	80098ec <f_open>
 80025c0:	4603      	mov	r3, r0
 80025c2:	461a      	mov	r2, r3
 80025c4:	4b2c      	ldr	r3, [pc, #176]	; (8002678 <writeSDProductInfo+0x1c0>)
 80025c6:	701a      	strb	r2, [r3, #0]
		if (fresult == FR_OK) {
 80025c8:	4b2b      	ldr	r3, [pc, #172]	; (8002678 <writeSDProductInfo+0x1c0>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d13d      	bne.n	800264c <writeSDProductInfo+0x194>
			char* data = (char*)malloc(500 * (sizeof(char)));
 80025d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025d4:	f00c fa14 	bl	800ea00 <malloc>
 80025d8:	4603      	mov	r3, r0
 80025da:	647b      	str	r3, [r7, #68]	; 0x44
			if (data != NULL) {
 80025dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d029      	beq.n	8002636 <writeSDProductInfo+0x17e>
				sprintf(data, "{\"deviceId\": %d, \"productDate\":%"PRIu32", \"realCycleTime\": %.3f, \"coolingTime\": %.3f, \"injectionTime\": %.3f, \"temperature\": %.3f}"
 80025e2:	2301      	movs	r3, #1
 80025e4:	4618      	mov	r0, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 80025ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80025f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80025f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80025f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80025fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002600:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002604:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002608:	e9cd 2300 	strd	r2, r3, [sp]
 800260c:	460b      	mov	r3, r1
 800260e:	4602      	mov	r2, r0
 8002610:	491a      	ldr	r1, [pc, #104]	; (800267c <writeSDProductInfo+0x1c4>)
 8002612:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002614:	f00d fa18 	bl	800fa48 <siprintf>
						, deviceId, product->productEndDate, realCycleTime, coolingTime, injectionTime, temperature1);
				f_puts(data, &fil);
 8002618:	4916      	ldr	r1, [pc, #88]	; (8002674 <writeSDProductInfo+0x1bc>)
 800261a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800261c:	f008 fa34 	bl	800aa88 <f_puts>
				free(data);
 8002620:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002622:	f00c f9f5 	bl	800ea10 <free>
				f_close(&fil);
 8002626:	4813      	ldr	r0, [pc, #76]	; (8002674 <writeSDProductInfo+0x1bc>)
 8002628:	f007 fe9d 	bl	800a366 <f_close>
				sdStatus = SD_CARD_READY;
 800262c:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <writeSDProductInfo+0x1b0>)
 800262e:	2200      	movs	r2, #0
 8002630:	701a      	strb	r2, [r3, #0]
				return true;
 8002632:	2301      	movs	r3, #1
 8002634:	e013      	b.n	800265e <writeSDProductInfo+0x1a6>
			}
			else {
				printf("[writeSDProductInfo()] Memory Allocation Error. \r\n");
 8002636:	4812      	ldr	r0, [pc, #72]	; (8002680 <writeSDProductInfo+0x1c8>)
 8002638:	f00d f9e8 	bl	800fa0c <puts>
				f_close(&fil);
 800263c:	480d      	ldr	r0, [pc, #52]	; (8002674 <writeSDProductInfo+0x1bc>)
 800263e:	f007 fe92 	bl	800a366 <f_close>
				sdStatus = SD_CARD_READY;
 8002642:	4b09      	ldr	r3, [pc, #36]	; (8002668 <writeSDProductInfo+0x1b0>)
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]
				return false;
 8002648:	2300      	movs	r3, #0
 800264a:	e008      	b.n	800265e <writeSDProductInfo+0x1a6>
			}
		}
		else {
			printf("[writeSDProductInfo()] Error happaned while opening file.\r\n");
 800264c:	480d      	ldr	r0, [pc, #52]	; (8002684 <writeSDProductInfo+0x1cc>)
 800264e:	f00d f9dd 	bl	800fa0c <puts>
			sdStatus = SD_CARD_READY;
 8002652:	4b05      	ldr	r3, [pc, #20]	; (8002668 <writeSDProductInfo+0x1b0>)
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
			return false;
 8002658:	2300      	movs	r3, #0
 800265a:	e000      	b.n	800265e <writeSDProductInfo+0x1a6>
		}
	}
	else {
		return false;
 800265c:	2300      	movs	r3, #0
	}

	return false;
}
 800265e:	4618      	mov	r0, r3
 8002660:	3768      	adds	r7, #104	; 0x68
 8002662:	46bd      	mov	sp, r7
 8002664:	bdb0      	pop	{r4, r5, r7, pc}
 8002666:	bf00      	nop
 8002668:	200002b0 	.word	0x200002b0
 800266c:	08013944 	.word	0x08013944
 8002670:	08013954 	.word	0x08013954
 8002674:	200012ec 	.word	0x200012ec
 8002678:	2000231c 	.word	0x2000231c
 800267c:	08013964 	.word	0x08013964
 8002680:	080139e0 	.word	0x080139e0
 8002684:	08013a14 	.word	0x08013a14
 8002688:	9999999a 	.word	0x9999999a
 800268c:	3fb99999 	.word	0x3fb99999

08002690 <setRTCTime>:
    HAL_RTCEx_BKUPWrite(&RtcHandle, BackupRegister, data);
    HAL_PWR_DisableBkUpAccess();
}

RTC_StatusTypeDef setRTCTime()  //timeBuf is gonna have ["day" = 0, "month" = 1, "year" = 2, "hour" = 3, "min" = 4, "second" = 5]
{
 8002690:	b590      	push	{r4, r7, lr}
 8002692:	b08b      	sub	sp, #44	; 0x2c
 8002694:	af00      	add	r7, sp, #0
	uint8_t status;
	datetime ntpTime;
	status = SNTP_run(&ntpTime);
 8002696:	f107 031c 	add.w	r3, r7, #28
 800269a:	4618      	mov	r0, r3
 800269c:	f00b fea4 	bl	800e3e8 <SNTP_run>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status) {
 80026a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 8102 	beq.w	80028b4 <setRTCTime+0x224>
		RTC_TimeTypeDef sTime = {0};
 80026b0:	f107 0308 	add.w	r3, r7, #8
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	611a      	str	r2, [r3, #16]
		RTC_DateTypeDef sDate = {0};
 80026c0:	2300      	movs	r3, #0
 80026c2:	607b      	str	r3, [r7, #4]

		HAL_PWR_EnableBkUpAccess();
 80026c4:	f001 fd74 	bl	80041b0 <HAL_PWR_EnableBkUpAccess>
		__HAL_RCC_RTC_CONFIG(RTC_BKP_DR1);
 80026c8:	4b7d      	ldr	r3, [pc, #500]	; (80028c0 <setRTCTime+0x230>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	4a7c      	ldr	r2, [pc, #496]	; (80028c0 <setRTCTime+0x230>)
 80026ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80026d2:	6093      	str	r3, [r2, #8]
 80026d4:	4b7a      	ldr	r3, [pc, #488]	; (80028c0 <setRTCTime+0x230>)
 80026d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d8:	4a79      	ldr	r2, [pc, #484]	; (80028c0 <setRTCTime+0x230>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6713      	str	r3, [r2, #112]	; 0x70
		__HAL_RCC_RTC_ENABLE();
 80026e0:	4b78      	ldr	r3, [pc, #480]	; (80028c4 <setRTCTime+0x234>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	601a      	str	r2, [r3, #0]

		sTime.Hours = DEC2BCD(ntpTime.hh);
 80026e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80026ea:	4a77      	ldr	r2, [pc, #476]	; (80028c8 <setRTCTime+0x238>)
 80026ec:	fba2 2303 	umull	r2, r3, r2, r3
 80026f0:	08db      	lsrs	r3, r3, #3
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	b2d8      	uxtb	r0, r3
 80026f8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80026fc:	4b72      	ldr	r3, [pc, #456]	; (80028c8 <setRTCTime+0x238>)
 80026fe:	fba3 1302 	umull	r1, r3, r3, r2
 8002702:	08d9      	lsrs	r1, r3, #3
 8002704:	460b      	mov	r3, r1
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	4403      	add	r3, r0
 8002712:	b2db      	uxtb	r3, r3
 8002714:	723b      	strb	r3, [r7, #8]
		sTime.Minutes = DEC2BCD(ntpTime.mm);
 8002716:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800271a:	4a6b      	ldr	r2, [pc, #428]	; (80028c8 <setRTCTime+0x238>)
 800271c:	fba2 2303 	umull	r2, r3, r2, r3
 8002720:	08db      	lsrs	r3, r3, #3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	b2d8      	uxtb	r0, r3
 8002728:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800272c:	4b66      	ldr	r3, [pc, #408]	; (80028c8 <setRTCTime+0x238>)
 800272e:	fba3 1302 	umull	r1, r3, r3, r2
 8002732:	08d9      	lsrs	r1, r3, #3
 8002734:	460b      	mov	r3, r1
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	b2db      	uxtb	r3, r3
 8002740:	4403      	add	r3, r0
 8002742:	b2db      	uxtb	r3, r3
 8002744:	727b      	strb	r3, [r7, #9]
		sTime.Seconds = DEC2BCD(ntpTime.ss);
 8002746:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800274a:	4a5f      	ldr	r2, [pc, #380]	; (80028c8 <setRTCTime+0x238>)
 800274c:	fba2 2303 	umull	r2, r3, r2, r3
 8002750:	08db      	lsrs	r3, r3, #3
 8002752:	b2db      	uxtb	r3, r3
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	b2d8      	uxtb	r0, r3
 8002758:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800275c:	4b5a      	ldr	r3, [pc, #360]	; (80028c8 <setRTCTime+0x238>)
 800275e:	fba3 1302 	umull	r1, r3, r3, r2
 8002762:	08d9      	lsrs	r1, r3, #3
 8002764:	460b      	mov	r3, r1
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	b2db      	uxtb	r3, r3
 8002770:	4403      	add	r3, r0
 8002772:	b2db      	uxtb	r3, r3
 8002774:	72bb      	strb	r3, [r7, #10]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800277a:	2300      	movs	r3, #0
 800277c:	61bb      	str	r3, [r7, #24]
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800277e:	f107 0308 	add.w	r3, r7, #8
 8002782:	2201      	movs	r2, #1
 8002784:	4619      	mov	r1, r3
 8002786:	4851      	ldr	r0, [pc, #324]	; (80028cc <setRTCTime+0x23c>)
 8002788:	f002 fae2 	bl	8004d50 <HAL_RTC_SetTime>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <setRTCTime+0x106>
		{
			Error_Handler();
 8002792:	f000 fdc1 	bl	8003318 <Error_Handler>
		}
		sDate.Date = DEC2BCD(ntpTime.dd);
 8002796:	7ffb      	ldrb	r3, [r7, #31]
 8002798:	4a4b      	ldr	r2, [pc, #300]	; (80028c8 <setRTCTime+0x238>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	08db      	lsrs	r3, r3, #3
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	b2d8      	uxtb	r0, r3
 80027a6:	7ffa      	ldrb	r2, [r7, #31]
 80027a8:	4b47      	ldr	r3, [pc, #284]	; (80028c8 <setRTCTime+0x238>)
 80027aa:	fba3 1302 	umull	r1, r3, r3, r2
 80027ae:	08d9      	lsrs	r1, r3, #3
 80027b0:	460b      	mov	r3, r1
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	4403      	add	r3, r0
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	71bb      	strb	r3, [r7, #6]
		sDate.Month = DEC2BCD(ntpTime.mo);
 80027c2:	7fbb      	ldrb	r3, [r7, #30]
 80027c4:	4a40      	ldr	r2, [pc, #256]	; (80028c8 <setRTCTime+0x238>)
 80027c6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ca:	08db      	lsrs	r3, r3, #3
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	b2d8      	uxtb	r0, r3
 80027d2:	7fba      	ldrb	r2, [r7, #30]
 80027d4:	4b3c      	ldr	r3, [pc, #240]	; (80028c8 <setRTCTime+0x238>)
 80027d6:	fba3 1302 	umull	r1, r3, r3, r2
 80027da:	08d9      	lsrs	r1, r3, #3
 80027dc:	460b      	mov	r3, r1
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	4403      	add	r3, r0
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	717b      	strb	r3, [r7, #5]
		sDate.Year = DEC2BCD(ntpTime.yy%100);
 80027ee:	8bbb      	ldrh	r3, [r7, #28]
 80027f0:	4a37      	ldr	r2, [pc, #220]	; (80028d0 <setRTCTime+0x240>)
 80027f2:	fba2 1203 	umull	r1, r2, r2, r3
 80027f6:	0952      	lsrs	r2, r2, #5
 80027f8:	2164      	movs	r1, #100	; 0x64
 80027fa:	fb01 f202 	mul.w	r2, r1, r2
 80027fe:	1a9b      	subs	r3, r3, r2
 8002800:	b29b      	uxth	r3, r3
 8002802:	4a31      	ldr	r2, [pc, #196]	; (80028c8 <setRTCTime+0x238>)
 8002804:	fba2 2303 	umull	r2, r3, r2, r3
 8002808:	08db      	lsrs	r3, r3, #3
 800280a:	b29b      	uxth	r3, r3
 800280c:	b2db      	uxtb	r3, r3
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	b2d8      	uxtb	r0, r3
 8002812:	8bbb      	ldrh	r3, [r7, #28]
 8002814:	4a2e      	ldr	r2, [pc, #184]	; (80028d0 <setRTCTime+0x240>)
 8002816:	fba2 1203 	umull	r1, r2, r2, r3
 800281a:	0952      	lsrs	r2, r2, #5
 800281c:	2164      	movs	r1, #100	; 0x64
 800281e:	fb01 f202 	mul.w	r2, r1, r2
 8002822:	1a9b      	subs	r3, r3, r2
 8002824:	b29a      	uxth	r2, r3
 8002826:	4b28      	ldr	r3, [pc, #160]	; (80028c8 <setRTCTime+0x238>)
 8002828:	fba3 1302 	umull	r1, r3, r3, r2
 800282c:	08d9      	lsrs	r1, r3, #3
 800282e:	460b      	mov	r3, r1
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	b29b      	uxth	r3, r3
 800283a:	b2db      	uxtb	r3, r3
 800283c:	4403      	add	r3, r0
 800283e:	b2db      	uxtb	r3, r3
 8002840:	71fb      	strb	r3, [r7, #7]
		sDate.WeekDay = DEC2BCD(dayOfWeek(ntpTime.dd, ntpTime.mo, ntpTime.yy));  // d, m, y
 8002842:	7ffb      	ldrb	r3, [r7, #31]
 8002844:	7fb9      	ldrb	r1, [r7, #30]
 8002846:	8bba      	ldrh	r2, [r7, #28]
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	4618      	mov	r0, r3
 800284c:	f000 f962 	bl	8002b14 <dayOfWeek>
 8002850:	4603      	mov	r3, r0
 8002852:	461a      	mov	r2, r3
 8002854:	4b1c      	ldr	r3, [pc, #112]	; (80028c8 <setRTCTime+0x238>)
 8002856:	fba3 2302 	umull	r2, r3, r3, r2
 800285a:	08db      	lsrs	r3, r3, #3
 800285c:	b2db      	uxtb	r3, r3
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	b2dc      	uxtb	r4, r3
 8002862:	7ffb      	ldrb	r3, [r7, #31]
 8002864:	7fb9      	ldrb	r1, [r7, #30]
 8002866:	8bba      	ldrh	r2, [r7, #28]
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	4618      	mov	r0, r3
 800286c:	f000 f952 	bl	8002b14 <dayOfWeek>
 8002870:	4603      	mov	r3, r0
 8002872:	461a      	mov	r2, r3
 8002874:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <setRTCTime+0x238>)
 8002876:	fba3 1302 	umull	r1, r3, r3, r2
 800287a:	08d9      	lsrs	r1, r3, #3
 800287c:	460b      	mov	r3, r1
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	b2db      	uxtb	r3, r3
 8002888:	4423      	add	r3, r4
 800288a:	b2db      	uxtb	r3, r3
 800288c:	713b      	strb	r3, [r7, #4]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800288e:	1d3b      	adds	r3, r7, #4
 8002890:	2201      	movs	r2, #1
 8002892:	4619      	mov	r1, r3
 8002894:	480d      	ldr	r0, [pc, #52]	; (80028cc <setRTCTime+0x23c>)
 8002896:	f002 fb53 	bl	8004f40 <HAL_RTC_SetDate>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <setRTCTime+0x214>
		{
			Error_Handler();
 80028a0:	f000 fd3a 	bl	8003318 <Error_Handler>
		}
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 80028a4:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80028a8:	2101      	movs	r1, #1
 80028aa:	4808      	ldr	r0, [pc, #32]	; (80028cc <setRTCTime+0x23c>)
 80028ac:	f002 fcd8 	bl	8005260 <HAL_RTCEx_BKUPWrite>
		return SET_RTC_OK;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e001      	b.n	80028b8 <setRTCTime+0x228>
	}
	else return SET_RTC_NOK;
 80028b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	372c      	adds	r7, #44	; 0x2c
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd90      	pop	{r4, r7, pc}
 80028c0:	40023800 	.word	0x40023800
 80028c4:	42470e3c 	.word	0x42470e3c
 80028c8:	cccccccd 	.word	0xcccccccd
 80028cc:	200034c4 	.word	0x200034c4
 80028d0:	51eb851f 	.word	0x51eb851f

080028d4 <getRTCTime>:

char* getRTCTime(void)
{
 80028d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028d6:	b08d      	sub	sp, #52	; 0x34
 80028d8:	af06      	add	r7, sp, #24
	RTC_TimeTypeDef gTime;
	RTC_DateTypeDef gDate;

	static char getTimeBuf[30] = {'\0'};

	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 80028da:	1d3b      	adds	r3, r7, #4
 80028dc:	2201      	movs	r2, #1
 80028de:	4619      	mov	r1, r3
 80028e0:	483a      	ldr	r0, [pc, #232]	; (80029cc <getRTCTime+0xf8>)
 80028e2:	f002 facf 	bl	8004e84 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BCD);
 80028e6:	463b      	mov	r3, r7
 80028e8:	2201      	movs	r2, #1
 80028ea:	4619      	mov	r1, r3
 80028ec:	4837      	ldr	r0, [pc, #220]	; (80029cc <getRTCTime+0xf8>)
 80028ee:	f002 fbab 	bl	8005048 <HAL_RTC_GetDate>

	sprintf(getTimeBuf, "%02d/%02d/%04d,%02d:%02d:%02d.%"PRIu32"", BCD2DEC(gDate.Date), BCD2DEC(gDate.Month), BCD2DEC(gDate.Year) + YEAR, BCD2DEC(gTime.Hours), BCD2DEC(gTime.Minutes), BCD2DEC(gTime.Seconds), BCD2DEC(gTime.SubSeconds));
 80028f2:	78bb      	ldrb	r3, [r7, #2]
 80028f4:	091b      	lsrs	r3, r3, #4
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	461a      	mov	r2, r3
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	461a      	mov	r2, r3
 8002904:	78bb      	ldrb	r3, [r7, #2]
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	18d6      	adds	r6, r2, r3
 800290c:	787b      	ldrb	r3, [r7, #1]
 800290e:	091b      	lsrs	r3, r3, #4
 8002910:	b2db      	uxtb	r3, r3
 8002912:	461a      	mov	r2, r3
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	461a      	mov	r2, r3
 800291e:	787b      	ldrb	r3, [r7, #1]
 8002920:	f003 030f 	and.w	r3, r3, #15
 8002924:	eb02 0c03 	add.w	ip, r2, r3
 8002928:	78fb      	ldrb	r3, [r7, #3]
 800292a:	091b      	lsrs	r3, r3, #4
 800292c:	b2db      	uxtb	r3, r3
 800292e:	461a      	mov	r2, r3
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	461a      	mov	r2, r3
 800293a:	78fb      	ldrb	r3, [r7, #3]
 800293c:	f003 030f 	and.w	r3, r3, #15
 8002940:	4413      	add	r3, r2
 8002942:	f503 61fa 	add.w	r1, r3, #2000	; 0x7d0
 8002946:	793b      	ldrb	r3, [r7, #4]
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	b2db      	uxtb	r3, r3
 800294c:	461a      	mov	r2, r3
 800294e:	4613      	mov	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	461a      	mov	r2, r3
 8002958:	793b      	ldrb	r3, [r7, #4]
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	18d0      	adds	r0, r2, r3
 8002960:	797b      	ldrb	r3, [r7, #5]
 8002962:	091b      	lsrs	r3, r3, #4
 8002964:	b2db      	uxtb	r3, r3
 8002966:	461a      	mov	r2, r3
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	461a      	mov	r2, r3
 8002972:	797b      	ldrb	r3, [r7, #5]
 8002974:	f003 030f 	and.w	r3, r3, #15
 8002978:	18d4      	adds	r4, r2, r3
 800297a:	79bb      	ldrb	r3, [r7, #6]
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	b2db      	uxtb	r3, r3
 8002980:	461a      	mov	r2, r3
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	461a      	mov	r2, r3
 800298c:	79bb      	ldrb	r3, [r7, #6]
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	18d5      	adds	r5, r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	091a      	lsrs	r2, r3, #4
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	461a      	mov	r2, r3
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	f003 030f 	and.w	r3, r3, #15
 80029a8:	4413      	add	r3, r2
 80029aa:	9304      	str	r3, [sp, #16]
 80029ac:	9503      	str	r5, [sp, #12]
 80029ae:	9402      	str	r4, [sp, #8]
 80029b0:	9001      	str	r0, [sp, #4]
 80029b2:	9100      	str	r1, [sp, #0]
 80029b4:	4663      	mov	r3, ip
 80029b6:	4632      	mov	r2, r6
 80029b8:	4905      	ldr	r1, [pc, #20]	; (80029d0 <getRTCTime+0xfc>)
 80029ba:	4806      	ldr	r0, [pc, #24]	; (80029d4 <getRTCTime+0x100>)
 80029bc:	f00d f844 	bl	800fa48 <siprintf>
						//format can be changed by what developers want.
	return getTimeBuf;
 80029c0:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <getRTCTime+0x100>)
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	371c      	adds	r7, #28
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029ca:	bf00      	nop
 80029cc:	200034c4 	.word	0x200034c4
 80029d0:	08013a50 	.word	0x08013a50
 80029d4:	2000347c 	.word	0x2000347c

080029d8 <getSubsecondTime>:

char* getSubsecondTime(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef gTime;
	RTC_DateTypeDef gDate;

	static char getSubsecondBuf[5] = {'\0'};

	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 80029de:	1d3b      	adds	r3, r7, #4
 80029e0:	2201      	movs	r2, #1
 80029e2:	4619      	mov	r1, r3
 80029e4:	480e      	ldr	r0, [pc, #56]	; (8002a20 <getSubsecondTime+0x48>)
 80029e6:	f002 fa4d 	bl	8004e84 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BCD);
 80029ea:	463b      	mov	r3, r7
 80029ec:	2201      	movs	r2, #1
 80029ee:	4619      	mov	r1, r3
 80029f0:	480b      	ldr	r0, [pc, #44]	; (8002a20 <getSubsecondTime+0x48>)
 80029f2:	f002 fb29 	bl	8005048 <HAL_RTC_GetDate>

	sprintf(getSubsecondBuf, ".%"PRIu32"", BCD2DEC(gTime.SubSeconds));
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	091a      	lsrs	r2, r3, #4
 80029fa:	4613      	mov	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	461a      	mov	r2, r3
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	4413      	add	r3, r2
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4905      	ldr	r1, [pc, #20]	; (8002a24 <getSubsecondTime+0x4c>)
 8002a10:	4805      	ldr	r0, [pc, #20]	; (8002a28 <getSubsecondTime+0x50>)
 8002a12:	f00d f819 	bl	800fa48 <siprintf>

	return getSubsecondBuf;
 8002a16:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <getSubsecondTime+0x50>)
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	200034c4 	.word	0x200034c4
 8002a24:	08013a74 	.word	0x08013a74
 8002a28:	2000349c 	.word	0x2000349c

08002a2c <getDataTime>:
						//format can be changed by what developers want.
	return getTimeBuf;
}

char* getDataTime(void)
{
 8002a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a2e:	b08b      	sub	sp, #44	; 0x2c
 8002a30:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef gTime;
	RTC_DateTypeDef gDate;

	static char getTimeBuf[30] = {'\0'};

	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 8002a32:	1d3b      	adds	r3, r7, #4
 8002a34:	2201      	movs	r2, #1
 8002a36:	4619      	mov	r1, r3
 8002a38:	4833      	ldr	r0, [pc, #204]	; (8002b08 <getDataTime+0xdc>)
 8002a3a:	f002 fa23 	bl	8004e84 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BCD);
 8002a3e:	463b      	mov	r3, r7
 8002a40:	2201      	movs	r2, #1
 8002a42:	4619      	mov	r1, r3
 8002a44:	4830      	ldr	r0, [pc, #192]	; (8002b08 <getDataTime+0xdc>)
 8002a46:	f002 faff 	bl	8005048 <HAL_RTC_GetDate>

	sprintf(getTimeBuf, "%02d_%02d_%04dT%02d_%02d_%02d", BCD2DEC(gDate.Date), BCD2DEC(gDate.Month), BCD2DEC(gDate.Year) + YEAR, BCD2DEC(gTime.Hours), BCD2DEC(gTime.Minutes), BCD2DEC(gTime.Seconds));
 8002a4a:	78bb      	ldrb	r3, [r7, #2]
 8002a4c:	091b      	lsrs	r3, r3, #4
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	461a      	mov	r2, r3
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	78bb      	ldrb	r3, [r7, #2]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	18d4      	adds	r4, r2, r3
 8002a64:	787b      	ldrb	r3, [r7, #1]
 8002a66:	091b      	lsrs	r3, r3, #4
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	461a      	mov	r2, r3
 8002a76:	787b      	ldrb	r3, [r7, #1]
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	18d5      	adds	r5, r2, r3
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	4613      	mov	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	461a      	mov	r2, r3
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8002a9c:	793b      	ldrb	r3, [r7, #4]
 8002a9e:	091b      	lsrs	r3, r3, #4
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	4619      	mov	r1, r3
 8002aae:	793b      	ldrb	r3, [r7, #4]
 8002ab0:	f003 030f 	and.w	r3, r3, #15
 8002ab4:	4419      	add	r1, r3
 8002ab6:	797b      	ldrb	r3, [r7, #5]
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	4618      	mov	r0, r3
 8002abe:	4603      	mov	r3, r0
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4403      	add	r3, r0
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	797b      	ldrb	r3, [r7, #5]
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	4418      	add	r0, r3
 8002ad0:	79bb      	ldrb	r3, [r7, #6]
 8002ad2:	091b      	lsrs	r3, r3, #4
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	461e      	mov	r6, r3
 8002ad8:	4633      	mov	r3, r6
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4433      	add	r3, r6
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	461e      	mov	r6, r3
 8002ae2:	79bb      	ldrb	r3, [r7, #6]
 8002ae4:	f003 030f 	and.w	r3, r3, #15
 8002ae8:	4433      	add	r3, r6
 8002aea:	9303      	str	r3, [sp, #12]
 8002aec:	9002      	str	r0, [sp, #8]
 8002aee:	9101      	str	r1, [sp, #4]
 8002af0:	9200      	str	r2, [sp, #0]
 8002af2:	462b      	mov	r3, r5
 8002af4:	4622      	mov	r2, r4
 8002af6:	4905      	ldr	r1, [pc, #20]	; (8002b0c <getDataTime+0xe0>)
 8002af8:	4805      	ldr	r0, [pc, #20]	; (8002b10 <getDataTime+0xe4>)
 8002afa:	f00c ffa5 	bl	800fa48 <siprintf>
						//format can be changed by what developers want.
	return getTimeBuf;
 8002afe:	4b04      	ldr	r3, [pc, #16]	; (8002b10 <getDataTime+0xe4>)
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	371c      	adds	r7, #28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b08:	200034c4 	.word	0x200034c4
 8002b0c:	08013a8c 	.word	0x08013a8c
 8002b10:	200034a4 	.word	0x200034a4

08002b14 <dayOfWeek>:

uint8_t dayOfWeek(uint8_t d, uint8_t m, uint8_t y)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	71fb      	strb	r3, [r7, #7]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	71bb      	strb	r3, [r7, #6]
 8002b22:	4613      	mov	r3, r2
 8002b24:	717b      	strb	r3, [r7, #5]
	//this is zero-based algorithm. So sunday is 0 monday is 1 etc.
	uint8_t weekDay = (d += m < 3 ? y-- : y - 2, 23*m/9 + d + 4 + y/4- y/100 + y/400)%7;
 8002b26:	79bb      	ldrb	r3, [r7, #6]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d803      	bhi.n	8002b34 <dayOfWeek+0x20>
 8002b2c:	797b      	ldrb	r3, [r7, #5]
 8002b2e:	1e5a      	subs	r2, r3, #1
 8002b30:	717a      	strb	r2, [r7, #5]
 8002b32:	e001      	b.n	8002b38 <dayOfWeek+0x24>
 8002b34:	797b      	ldrb	r3, [r7, #5]
 8002b36:	3b02      	subs	r3, #2
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	71fb      	strb	r3, [r7, #7]
 8002b40:	79ba      	ldrb	r2, [r7, #6]
 8002b42:	4613      	mov	r3, r2
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	4413      	add	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	1a9b      	subs	r3, r3, r2
 8002b4c:	4a1a      	ldr	r2, [pc, #104]	; (8002bb8 <dayOfWeek+0xa4>)
 8002b4e:	fb82 1203 	smull	r1, r2, r2, r3
 8002b52:	1052      	asrs	r2, r2, #1
 8002b54:	17db      	asrs	r3, r3, #31
 8002b56:	1ad2      	subs	r2, r2, r3
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	797a      	ldrb	r2, [r7, #5]
 8002b60:	0892      	lsrs	r2, r2, #2
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	4413      	add	r3, r2
 8002b66:	797a      	ldrb	r2, [r7, #5]
 8002b68:	4914      	ldr	r1, [pc, #80]	; (8002bbc <dayOfWeek+0xa8>)
 8002b6a:	fba1 1202 	umull	r1, r2, r1, r2
 8002b6e:	0952      	lsrs	r2, r2, #5
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	1a9a      	subs	r2, r3, r2
 8002b74:	797b      	ldrb	r3, [r7, #5]
 8002b76:	4911      	ldr	r1, [pc, #68]	; (8002bbc <dayOfWeek+0xa8>)
 8002b78:	fb81 0103 	smull	r0, r1, r1, r3
 8002b7c:	11c9      	asrs	r1, r1, #7
 8002b7e:	17db      	asrs	r3, r3, #31
 8002b80:	1acb      	subs	r3, r1, r3
 8002b82:	441a      	add	r2, r3
 8002b84:	4b0e      	ldr	r3, [pc, #56]	; (8002bc0 <dayOfWeek+0xac>)
 8002b86:	fb83 1302 	smull	r1, r3, r3, r2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	1099      	asrs	r1, r3, #2
 8002b8e:	17d3      	asrs	r3, r2, #31
 8002b90:	1ac9      	subs	r1, r1, r3
 8002b92:	460b      	mov	r3, r1
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	1a5b      	subs	r3, r3, r1
 8002b98:	1ad1      	subs	r1, r2, r3
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	73fb      	strb	r3, [r7, #15]
	if (weekDay == 0) return 7;
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <dayOfWeek+0x94>
 8002ba4:	2307      	movs	r3, #7
 8002ba6:	e000      	b.n	8002baa <dayOfWeek+0x96>
	else return weekDay;
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	38e38e39 	.word	0x38e38e39
 8002bbc:	51eb851f 	.word	0x51eb851f
 8002bc0:	92492493 	.word	0x92492493

08002bc4 <getUnixTime>:
	}
	return "NOTHING";
}

uint32_t getUnixTime(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08a      	sub	sp, #40	; 0x28
 8002bc8:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef gTime;
	RTC_DateTypeDef gDate;

	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 8002bca:	f107 0308 	add.w	r3, r7, #8
 8002bce:	2201      	movs	r2, #1
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4873      	ldr	r0, [pc, #460]	; (8002da0 <getUnixTime+0x1dc>)
 8002bd4:	f002 f956 	bl	8004e84 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BCD);
 8002bd8:	1d3b      	adds	r3, r7, #4
 8002bda:	2201      	movs	r2, #1
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4870      	ldr	r0, [pc, #448]	; (8002da0 <getUnixTime+0x1dc>)
 8002be0:	f002 fa32 	bl	8005048 <HAL_RTC_GetDate>
	uint32_t JDN;

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	// Calculate some coefficients
	a = (14 - BCD2DEC(gDate.Month)) / 12;
 8002be4:	797b      	ldrb	r3, [r7, #5]
 8002be6:	091b      	lsrs	r3, r3, #4
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	461a      	mov	r2, r3
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	797b      	ldrb	r3, [r7, #5]
 8002bf8:	f003 030f 	and.w	r3, r3, #15
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f1c3 030e 	rsb	r3, r3, #14
 8002c02:	4a68      	ldr	r2, [pc, #416]	; (8002da4 <getUnixTime+0x1e0>)
 8002c04:	fb82 1203 	smull	r1, r2, r2, r3
 8002c08:	1052      	asrs	r2, r2, #1
 8002c0a:	17db      	asrs	r3, r3, #31
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	y = (BCD2DEC(gDate.Year) + 2000) + 4800 - a; // years since 1 March, 4801 BC
 8002c12:	79fb      	ldrb	r3, [r7, #7]
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	0092      	lsls	r2, r2, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 8002c40:	3310      	adds	r3, #16
 8002c42:	84bb      	strh	r3, [r7, #36]	; 0x24
	m = BCD2DEC(gDate.Month) + (12 * a) - 3; // since 1 March, 4801 BC
 8002c44:	797b      	ldrb	r3, [r7, #5]
 8002c46:	091b      	lsrs	r3, r3, #4
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	0092      	lsls	r2, r2, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	b2da      	uxtb	r2, r3
 8002c54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c58:	4619      	mov	r1, r3
 8002c5a:	0049      	lsls	r1, r1, #1
 8002c5c:	440b      	add	r3, r1
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	4413      	add	r3, r2
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	797b      	ldrb	r3, [r7, #5]
 8002c68:	f003 030f 	and.w	r3, r3, #15
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	4413      	add	r3, r2
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	3b03      	subs	r3, #3
 8002c74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	// Gregorian calendar date compute
    JDN  = BCD2DEC(gDate.Date);
 8002c78:	79bb      	ldrb	r3, [r7, #6]
 8002c7a:	091b      	lsrs	r3, r3, #4
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	461a      	mov	r2, r3
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	461a      	mov	r2, r3
 8002c8a:	79bb      	ldrb	r3, [r7, #6]
 8002c8c:	f003 030f 	and.w	r3, r3, #15
 8002c90:	4413      	add	r3, r2
 8002c92:	61fb      	str	r3, [r7, #28]
    JDN += (153 * m + 2) / 5;
 8002c94:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002c98:	4613      	mov	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	011a      	lsls	r2, r3, #4
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3302      	adds	r3, #2
 8002ca4:	4a40      	ldr	r2, [pc, #256]	; (8002da8 <getUnixTime+0x1e4>)
 8002ca6:	fb82 1203 	smull	r1, r2, r2, r3
 8002caa:	1052      	asrs	r2, r2, #1
 8002cac:	17db      	asrs	r3, r3, #31
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	61fb      	str	r3, [r7, #28]
    JDN += 365 * y;
 8002cb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002cba:	f240 126d 	movw	r2, #365	; 0x16d
 8002cbe:	fb02 f303 	mul.w	r3, r2, r3
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	61fb      	str	r3, [r7, #28]
    JDN += y / 4;
 8002cca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ccc:	089b      	lsrs	r3, r3, #2
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	61fb      	str	r3, [r7, #28]
    JDN += -y / 100;
 8002cd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002cda:	4a34      	ldr	r2, [pc, #208]	; (8002dac <getUnixTime+0x1e8>)
 8002cdc:	fb82 1203 	smull	r1, r2, r2, r3
 8002ce0:	1152      	asrs	r2, r2, #5
 8002ce2:	17db      	asrs	r3, r3, #31
 8002ce4:	1a9b      	subs	r3, r3, r2
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	4413      	add	r3, r2
 8002cec:	61fb      	str	r3, [r7, #28]
    JDN += y / 400;
 8002cee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002cf0:	4a2e      	ldr	r2, [pc, #184]	; (8002dac <getUnixTime+0x1e8>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	09db      	lsrs	r3, r3, #7
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	4413      	add	r3, r2
 8002d00:	61fb      	str	r3, [r7, #28]
    JDN  = JDN - 32045;
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	f5a3 43fa 	sub.w	r3, r3, #32000	; 0x7d00
 8002d08:	3b2d      	subs	r3, #45	; 0x2d
 8002d0a:	61fb      	str	r3, [r7, #28]
    JDN  = JDN - JULIAN_DATE_BASE;    		 // Calculate from base date
 8002d0c:	69fa      	ldr	r2, [r7, #28]
 8002d0e:	4b28      	ldr	r3, [pc, #160]	; (8002db0 <getUnixTime+0x1ec>)
 8002d10:	4413      	add	r3, r2
 8002d12:	61fb      	str	r3, [r7, #28]
    JDN *= 86400;                     		// Days to seconds
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	4a27      	ldr	r2, [pc, #156]	; (8002db4 <getUnixTime+0x1f0>)
 8002d18:	fb02 f303 	mul.w	r3, r2, r3
 8002d1c:	61fb      	str	r3, [r7, #28]
    JDN += BCD2DEC(gTime.Hours) * 3600;    // ... and today seconds
 8002d1e:	7a3b      	ldrb	r3, [r7, #8]
 8002d20:	091b      	lsrs	r3, r3, #4
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	461a      	mov	r2, r3
 8002d26:	4613      	mov	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	461a      	mov	r2, r3
 8002d30:	7a3b      	ldrb	r3, [r7, #8]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	4413      	add	r3, r2
 8002d38:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002d3c:	fb02 f303 	mul.w	r3, r2, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	4413      	add	r3, r2
 8002d46:	61fb      	str	r3, [r7, #28]
    JDN += BCD2DEC(gTime.Minutes) * 60;
 8002d48:	7a7b      	ldrb	r3, [r7, #9]
 8002d4a:	091b      	lsrs	r3, r3, #4
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	461a      	mov	r2, r3
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	461a      	mov	r2, r3
 8002d5a:	7a7b      	ldrb	r3, [r7, #9]
 8002d5c:	f003 030f 	and.w	r3, r3, #15
 8002d60:	441a      	add	r2, r3
 8002d62:	4613      	mov	r3, r2
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	1a9b      	subs	r3, r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	4413      	add	r3, r2
 8002d70:	61fb      	str	r3, [r7, #28]
    JDN += BCD2DEC(gTime.Seconds);
 8002d72:	7abb      	ldrb	r3, [r7, #10]
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	461a      	mov	r2, r3
 8002d84:	7abb      	ldrb	r3, [r7, #10]
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	4413      	add	r3, r2
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	4413      	add	r3, r2
 8002d92:	61fb      	str	r3, [r7, #28]

	return JDN;
 8002d94:	69fb      	ldr	r3, [r7, #28]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3728      	adds	r7, #40	; 0x28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	200034c4 	.word	0x200034c4
 8002da4:	2aaaaaab 	.word	0x2aaaaaab
 8002da8:	66666667 	.word	0x66666667
 8002dac:	51eb851f 	.word	0x51eb851f
 8002db0:	ffdac274 	.word	0xffdac274
 8002db4:	00015180 	.word	0x00015180

08002db8 <SDInit>:

SD_CARD_StatusTypeDef SDInit(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "", 0);
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	491b      	ldr	r1, [pc, #108]	; (8002e2c <SDInit+0x74>)
 8002dc0:	481b      	ldr	r0, [pc, #108]	; (8002e30 <SDInit+0x78>)
 8002dc2:	f006 fd4d 	bl	8009860 <f_mount>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4b1a      	ldr	r3, [pc, #104]	; (8002e34 <SDInit+0x7c>)
 8002dcc:	701a      	strb	r2, [r3, #0]
	if (FR_OK != fresult) {
 8002dce:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <SDInit+0x7c>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <SDInit+0x24>
		return SD_CARD_ERROR;
 8002dd6:	f06f 0301 	mvn.w	r3, #1
 8002dda:	e024      	b.n	8002e26 <SDInit+0x6e>
	}
	fresult = f_mkdir("Data");
 8002ddc:	4816      	ldr	r0, [pc, #88]	; (8002e38 <SDInit+0x80>)
 8002dde:	f007 fc92 	bl	800a706 <f_mkdir>
 8002de2:	4603      	mov	r3, r0
 8002de4:	461a      	mov	r2, r3
 8002de6:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <SDInit+0x7c>)
 8002de8:	701a      	strb	r2, [r3, #0]
	if (FR_OK != fresult && FR_EXIST != fresult) {
 8002dea:	4b12      	ldr	r3, [pc, #72]	; (8002e34 <SDInit+0x7c>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d006      	beq.n	8002e00 <SDInit+0x48>
 8002df2:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <SDInit+0x7c>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d002      	beq.n	8002e00 <SDInit+0x48>
		return SD_CARD_ERROR;
 8002dfa:	f06f 0301 	mvn.w	r3, #1
 8002dfe:	e012      	b.n	8002e26 <SDInit+0x6e>
	}
	fresult = f_mkdir("Log");
 8002e00:	480e      	ldr	r0, [pc, #56]	; (8002e3c <SDInit+0x84>)
 8002e02:	f007 fc80 	bl	800a706 <f_mkdir>
 8002e06:	4603      	mov	r3, r0
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <SDInit+0x7c>)
 8002e0c:	701a      	strb	r2, [r3, #0]
	if (FR_OK != fresult && FR_EXIST != fresult) {
 8002e0e:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <SDInit+0x7c>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d006      	beq.n	8002e24 <SDInit+0x6c>
 8002e16:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <SDInit+0x7c>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d002      	beq.n	8002e24 <SDInit+0x6c>
		return SD_CARD_ERROR;
 8002e1e:	f06f 0301 	mvn.w	r3, #1
 8002e22:	e000      	b.n	8002e26 <SDInit+0x6e>
	}

	return SD_CARD_READY;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	08013ae4 	.word	0x08013ae4
 8002e30:	200002b4 	.word	0x200002b4
 8002e34:	2000231c 	.word	0x2000231c
 8002e38:	08013ae8 	.word	0x08013ae8
 8002e3c:	08013af0 	.word	0x08013af0

08002e40 <checkSDStore>:

bool checkSDStore(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	f5ad 7d44 	sub.w	sp, sp, #784	; 0x310
 8002e46:	af00      	add	r7, sp, #0
	sdStatus = SD_CARD_BUSY;
 8002e48:	4b2f      	ldr	r3, [pc, #188]	; (8002f08 <checkSDStore+0xc8>)
 8002e4a:	22ff      	movs	r2, #255	; 0xff
 8002e4c:	701a      	strb	r2, [r3, #0]
	fresult = f_findfirst(&dir, &fno, "Data", "????*.log");
 8002e4e:	4b2f      	ldr	r3, [pc, #188]	; (8002f0c <checkSDStore+0xcc>)
 8002e50:	4a2f      	ldr	r2, [pc, #188]	; (8002f10 <checkSDStore+0xd0>)
 8002e52:	4930      	ldr	r1, [pc, #192]	; (8002f14 <checkSDStore+0xd4>)
 8002e54:	4830      	ldr	r0, [pc, #192]	; (8002f18 <checkSDStore+0xd8>)
 8002e56:	f007 fb88 	bl	800a56a <f_findfirst>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4b2f      	ldr	r3, [pc, #188]	; (8002f1c <checkSDStore+0xdc>)
 8002e60:	701a      	strb	r2, [r3, #0]
	if (strlen(fno.fname) > 1 && fresult == FR_OK) {
 8002e62:	482f      	ldr	r0, [pc, #188]	; (8002f20 <checkSDStore+0xe0>)
 8002e64:	f7fd f9bc 	bl	80001e0 <strlen>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d943      	bls.n	8002ef6 <checkSDStore+0xb6>
 8002e6e:	4b2b      	ldr	r3, [pc, #172]	; (8002f1c <checkSDStore+0xdc>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d13f      	bne.n	8002ef6 <checkSDStore+0xb6>
		char fileName[sizeof(fno.fname) + 20];
		sprintf(fileName, "Data/%s", fno.fname);
 8002e76:	1d3b      	adds	r3, r7, #4
 8002e78:	4a29      	ldr	r2, [pc, #164]	; (8002f20 <checkSDStore+0xe0>)
 8002e7a:	492a      	ldr	r1, [pc, #168]	; (8002f24 <checkSDStore+0xe4>)
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f00c fde3 	bl	800fa48 <siprintf>
		fresult = f_open(&fil, fileName, FA_READ);
 8002e82:	1d3b      	adds	r3, r7, #4
 8002e84:	2201      	movs	r2, #1
 8002e86:	4619      	mov	r1, r3
 8002e88:	4827      	ldr	r0, [pc, #156]	; (8002f28 <checkSDStore+0xe8>)
 8002e8a:	f006 fd2f 	bl	80098ec <f_open>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	461a      	mov	r2, r3
 8002e92:	4b22      	ldr	r3, [pc, #136]	; (8002f1c <checkSDStore+0xdc>)
 8002e94:	701a      	strb	r2, [r3, #0]
		char buf[SD_READ_BUF_SIZE];
		f_gets(buf, sizeof(buf), &fil);
 8002e96:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002e9a:	4a23      	ldr	r2, [pc, #140]	; (8002f28 <checkSDStore+0xe8>)
 8002e9c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f007 fd3d 	bl	800a920 <f_gets>
		int result = MQTT_run(buf);
 8002ea6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 f866 	bl	8002f7c <MQTT_run>
 8002eb0:	f8c7 030c 	str.w	r0, [r7, #780]	; 0x30c
		if (result < 0) {
 8002eb4:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	da0e      	bge.n	8002eda <checkSDStore+0x9a>
			msgLogger("Error Happaned While Sending Data to MQTT Server.");
 8002ebc:	481b      	ldr	r0, [pc, #108]	; (8002f2c <checkSDStore+0xec>)
 8002ebe:	f000 f975 	bl	80031ac <msgLogger>
			sdStatus = SD_CARD_READY;
 8002ec2:	4b11      	ldr	r3, [pc, #68]	; (8002f08 <checkSDStore+0xc8>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	701a      	strb	r2, [r3, #0]
			fresult = f_close(&fil);
 8002ec8:	4817      	ldr	r0, [pc, #92]	; (8002f28 <checkSDStore+0xe8>)
 8002eca:	f007 fa4c 	bl	800a366 <f_close>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4b12      	ldr	r3, [pc, #72]	; (8002f1c <checkSDStore+0xdc>)
 8002ed4:	701a      	strb	r2, [r3, #0]
			return false;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	e011      	b.n	8002efe <checkSDStore+0xbe>
		}
		else {
			msgLogger("Data has been sent succesfully.");
 8002eda:	4815      	ldr	r0, [pc, #84]	; (8002f30 <checkSDStore+0xf0>)
 8002edc:	f000 f966 	bl	80031ac <msgLogger>
			fresult = f_close(&fil);
 8002ee0:	4811      	ldr	r0, [pc, #68]	; (8002f28 <checkSDStore+0xe8>)
 8002ee2:	f007 fa40 	bl	800a366 <f_close>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <checkSDStore+0xdc>)
 8002eec:	701a      	strb	r2, [r3, #0]
			f_unlink(fileName);
 8002eee:	1d3b      	adds	r3, r7, #4
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f007 fb58 	bl	800a5a6 <f_unlink>
		}
	}
	sdStatus = SD_CARD_READY;
 8002ef6:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <checkSDStore+0xc8>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	701a      	strb	r2, [r3, #0]
	return true;
 8002efc:	2301      	movs	r3, #1
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	f507 7744 	add.w	r7, r7, #784	; 0x310
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	200002b0 	.word	0x200002b0
 8002f0c:	08013af4 	.word	0x08013af4
 8002f10:	08013ae8 	.word	0x08013ae8
 8002f14:	20002358 	.word	0x20002358
 8002f18:	20002320 	.word	0x20002320
 8002f1c:	2000231c 	.word	0x2000231c
 8002f20:	2000236e 	.word	0x2000236e
 8002f24:	08013b00 	.word	0x08013b00
 8002f28:	200012ec 	.word	0x200012ec
 8002f2c:	08013b08 	.word	0x08013b08
 8002f30:	08013b3c 	.word	0x08013b3c

08002f34 <w5500Init>:

int8_t w5500Init(struct w5500_setup w5500Opt)
{
 8002f34:	b084      	sub	sp, #16
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	f107 0c10 	add.w	ip, r7, #16
 8002f40:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int8_t result;
	result = wizchip_init(w5500Opt.bufSize, w5500Opt.bufSize);
 8002f44:	f107 0110 	add.w	r1, r7, #16
 8002f48:	f107 0010 	add.w	r0, r7, #16
 8002f4c:	f009 fa66 	bl	800c41c <wizchip_init>
 8002f50:	4603      	mov	r3, r0
 8002f52:	71fb      	strb	r3, [r7, #7]
	wizchip_setnetinfo(&w5500Opt.netInfo);
 8002f54:	f107 0318 	add.w	r3, r7, #24
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f009 faeb 	bl	800c534 <wizchip_setnetinfo>
	wizchip_settimeout(&w5500Opt.netTimeInfo);
 8002f5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f62:	4618      	mov	r0, r3
 8002f64:	f009 fb26 	bl	800c5b4 <wizchip_settimeout>
	return result;
 8002f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f76:	b004      	add	sp, #16
 8002f78:	4770      	bx	lr
	...

08002f7c <MQTT_run>:

int MQTT_run(char* sdBuf)
{
 8002f7c:	b5b0      	push	{r4, r5, r7, lr}
 8002f7e:	f5ad 6da0 	sub.w	sp, sp, #1280	; 0x500
 8002f82:	af04      	add	r7, sp, #16
 8002f84:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8002f88:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 8002f8c:	6018      	str	r0, [r3, #0]
	int rc = 0;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
	char pubbuf[SD_READ_BUF_SIZE];
	Network n;
	MQTTClient c;
	MQTTMessage m;

	NewNetwork(&n, 0);
 8002f94:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f00a f872 	bl	800d084 <NewNetwork>
	int i =	ConnectNetwork(&n, (uint8_t*)hostIp, 1883);
 8002fa0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002fa4:	f240 725b 	movw	r2, #1883	; 0x75b
 8002fa8:	4979      	ldr	r1, [pc, #484]	; (8003190 <MQTT_run+0x214>)
 8002faa:	4618      	mov	r0, r3
 8002fac:	f00a f8e7 	bl	800d17e <ConnectNetwork>
 8002fb0:	f8c7 04e4 	str.w	r0, [r7, #1252]	; 0x4e4
	if (i == 0) return -1;
 8002fb4:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d102      	bne.n	8002fc2 <MQTT_run+0x46>
 8002fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc0:	e0e0      	b.n	8003184 <MQTT_run+0x208>
	MQTTClientInit(&c, &n, 1000, buf, sizeof(buf), tempBuffer, sizeof(tempBuffer));
 8002fc2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002fc6:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8002fca:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8002fce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fd2:	9202      	str	r2, [sp, #8]
 8002fd4:	4a6f      	ldr	r2, [pc, #444]	; (8003194 <MQTT_run+0x218>)
 8002fd6:	9201      	str	r2, [sp, #4]
 8002fd8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002fdc:	9200      	str	r2, [sp, #0]
 8002fde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002fe2:	f009 fb7c 	bl	800c6de <MQTTClientInit>

	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 8002fe6:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8002fea:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8002fee:	4a6a      	ldr	r2, [pc, #424]	; (8003198 <MQTT_run+0x21c>)
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	2358      	movs	r3, #88	; 0x58
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	f00b fd12 	bl	800ea20 <memcpy>
	data.willFlag = 0;
 8002ffc:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8003000:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8003004:	2200      	movs	r2, #0
 8003006:	76da      	strb	r2, [r3, #27]
	data.MQTTVersion = 3;
 8003008:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800300c:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8003010:	2203      	movs	r2, #3
 8003012:	721a      	strb	r2, [r3, #8]
	data.clientID.cstring = mqttopt.clientid;
 8003014:	4b61      	ldr	r3, [pc, #388]	; (800319c <MQTT_run+0x220>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800301c:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8003020:	60da      	str	r2, [r3, #12]
	data.username.cstring = mqttopt.username;
 8003022:	4b5e      	ldr	r3, [pc, #376]	; (800319c <MQTT_run+0x220>)
 8003024:	691a      	ldr	r2, [r3, #16]
 8003026:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800302a:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800302e:	641a      	str	r2, [r3, #64]	; 0x40
	data.password.cstring = mqttopt.password;
 8003030:	4b5a      	ldr	r3, [pc, #360]	; (800319c <MQTT_run+0x220>)
 8003032:	695a      	ldr	r2, [r3, #20]
 8003034:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8003038:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800303c:	64da      	str	r2, [r3, #76]	; 0x4c

	data.keepAliveInterval = 60;
 800303e:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8003042:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8003046:	223c      	movs	r2, #60	; 0x3c
 8003048:	831a      	strh	r2, [r3, #24]
	data.cleansession = 1;
 800304a:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800304e:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8003052:	2201      	movs	r2, #1
 8003054:	769a      	strb	r2, [r3, #26]

	rc = MQTTConnect(&c, &data);
 8003056:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800305a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800305e:	4611      	mov	r1, r2
 8003060:	4618      	mov	r0, r3
 8003062:	f009 fe65 	bl	800cd30 <MQTTConnect>
 8003066:	f8c7 04ec 	str.w	r0, [r7, #1260]	; 0x4ec
	if (rc < 0) {
 800306a:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 800306e:	2b00      	cmp	r3, #0
 8003070:	da02      	bge.n	8003078 <MQTT_run+0xfc>
		return rc;
 8003072:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8003076:	e085      	b.n	8003184 <MQTT_run+0x208>
	}
	printf("Connected to server : {%d, %d, %d, %d}\r\n", hostIp[0], hostIp[1], hostIp[2], hostIp[3]);
 8003078:	4b45      	ldr	r3, [pc, #276]	; (8003190 <MQTT_run+0x214>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	4619      	mov	r1, r3
 800307e:	4b44      	ldr	r3, [pc, #272]	; (8003190 <MQTT_run+0x214>)
 8003080:	785b      	ldrb	r3, [r3, #1]
 8003082:	461a      	mov	r2, r3
 8003084:	4b42      	ldr	r3, [pc, #264]	; (8003190 <MQTT_run+0x214>)
 8003086:	789b      	ldrb	r3, [r3, #2]
 8003088:	4618      	mov	r0, r3
 800308a:	4b41      	ldr	r3, [pc, #260]	; (8003190 <MQTT_run+0x214>)
 800308c:	78db      	ldrb	r3, [r3, #3]
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	4603      	mov	r3, r0
 8003092:	4843      	ldr	r0, [pc, #268]	; (80031a0 <MQTT_run+0x224>)
 8003094:	f00c fc34 	bl	800f900 <iprintf>
	mqttopt.showtopics = 1;
 8003098:	4b40      	ldr	r3, [pc, #256]	; (800319c <MQTT_run+0x220>)
 800309a:	2201      	movs	r2, #1
 800309c:	621a      	str	r2, [r3, #32]

	m.qos = QOS0;
 800309e:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80030a2:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 80030a6:	2200      	movs	r2, #0
 80030a8:	701a      	strb	r2, [r3, #0]
	m.retained = 1;
 80030aa:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80030ae:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 80030b2:	2201      	movs	r2, #1
 80030b4:	705a      	strb	r2, [r3, #1]
	m.dup = 0;
 80030b6:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80030ba:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 80030be:	2200      	movs	r2, #0
 80030c0:	709a      	strb	r2, [r3, #2]

	MQTTYield(&c, data.keepAliveInterval);
 80030c2:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80030c6:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 80030ca:	8b1b      	ldrh	r3, [r3, #24]
 80030cc:	461a      	mov	r2, r3
 80030ce:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f009 fde7 	bl	800cca8 <MQTTYield>
	sprintf(pubbuf, sdBuf);
 80030da:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80030de:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 80030e2:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 80030e6:	6819      	ldr	r1, [r3, #0]
 80030e8:	4610      	mov	r0, r2
 80030ea:	f00c fcad 	bl	800fa48 <siprintf>
	m.payload = pubbuf;
 80030ee:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80030f2:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 80030f6:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 80030fa:	609a      	str	r2, [r3, #8]
	m.payloadlen = strlen(pubbuf);
 80030fc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003100:	4618      	mov	r0, r3
 8003102:	f7fd f86d 	bl	80001e0 <strlen>
 8003106:	4602      	mov	r2, r0
 8003108:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800310c:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8003110:	60da      	str	r2, [r3, #12]
	uint8_t mqttTOPIC[30] = "/product_003";
 8003112:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8003116:	f5a3 659d 	sub.w	r5, r3, #1256	; 0x4e8
 800311a:	4b22      	ldr	r3, [pc, #136]	; (80031a4 <MQTT_run+0x228>)
 800311c:	462c      	mov	r4, r5
 800311e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003120:	c407      	stmia	r4!, {r0, r1, r2}
 8003122:	7023      	strb	r3, [r4, #0]
 8003124:	f105 030d 	add.w	r3, r5, #13
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	605a      	str	r2, [r3, #4]
 800312e:	609a      	str	r2, [r3, #8]
 8003130:	60da      	str	r2, [r3, #12]
 8003132:	741a      	strb	r2, [r3, #16]
	rc = -1;
 8003134:	f04f 33ff 	mov.w	r3, #4294967295
 8003138:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
	uint8_t retry = 0;
 800313c:	2300      	movs	r3, #0
 800313e:	f887 34eb 	strb.w	r3, [r7, #1259]	; 0x4eb
	while (rc != 0) {
 8003142:	e016      	b.n	8003172 <MQTT_run+0x1f6>
		retry++;
 8003144:	f897 34eb 	ldrb.w	r3, [r7, #1259]	; 0x4eb
 8003148:	3301      	adds	r3, #1
 800314a:	f887 34eb 	strb.w	r3, [r7, #1259]	; 0x4eb
		rc = MQTTPublish(&c, (const char*)mqttTOPIC, &m);
 800314e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003152:	f107 0108 	add.w	r1, r7, #8
 8003156:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800315a:	4618      	mov	r0, r3
 800315c:	f009 fe6e 	bl	800ce3c <MQTTPublish>
 8003160:	f8c7 04ec 	str.w	r0, [r7, #1260]	; 0x4ec
		if (retry > 4) return rc;
 8003164:	f897 34eb 	ldrb.w	r3, [r7, #1259]	; 0x4eb
 8003168:	2b04      	cmp	r3, #4
 800316a:	d902      	bls.n	8003172 <MQTT_run+0x1f6>
 800316c:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8003170:	e008      	b.n	8003184 <MQTT_run+0x208>
	while (rc != 0) {
 8003172:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1e4      	bne.n	8003144 <MQTT_run+0x1c8>
	}
	printf("Message is sent to MQTT Server.\r\n");
 800317a:	480b      	ldr	r0, [pc, #44]	; (80031a8 <MQTT_run+0x22c>)
 800317c:	f00c fc46 	bl	800fa0c <puts>
	return rc;
 8003180:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
}
 8003184:	4618      	mov	r0, r3
 8003186:	f507 679e 	add.w	r7, r7, #1264	; 0x4f0
 800318a:	46bd      	mov	sp, r7
 800318c:	bdb0      	pop	{r4, r5, r7, pc}
 800318e:	bf00      	nop
 8003190:	20000028 	.word	0x20000028
 8003194:	20002470 	.word	0x20002470
 8003198:	08013bac 	.word	0x08013bac
 800319c:	2000002c 	.word	0x2000002c
 80031a0:	08013b5c 	.word	0x08013b5c
 80031a4:	08013c04 	.word	0x08013c04
 80031a8:	08013b88 	.word	0x08013b88

080031ac <msgLogger>:

void msgLogger (char* msg)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
#if MSG_LOGGER & UART_LOGGER
	uint32_t len = strlen(msg);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7fd f813 	bl	80001e0 <strlen>
 80031ba:	60f8      	str	r0, [r7, #12]
	printf("[%s] ==> %s\n", getRTCTime(), msg);
 80031bc:	f7ff fb8a 	bl	80028d4 <getRTCTime>
 80031c0:	4603      	mov	r3, r0
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	4619      	mov	r1, r3
 80031c6:	4804      	ldr	r0, [pc, #16]	; (80031d8 <msgLogger+0x2c>)
 80031c8:	f00c fb9a 	bl	800f900 <iprintf>
	if (len > 2000) return;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
			free(ptrBuf);
		}
		sdStatus = SD_CARD_READY;
	#endif
#endif
}
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	08013c24 	.word	0x08013c24

080031dc <inputStatusLogger>:

void inputStatusLogger(uint8_t input)
{
 80031dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031de:	b095      	sub	sp, #84	; 0x54
 80031e0:	af06      	add	r7, sp, #24
 80031e2:	4603      	mov	r3, r0
 80031e4:	71fb      	strb	r3, [r7, #7]
	#if MSG_LOGGER & UART_LOGGER
		char buf[sizeof("Current Inputs ==> ") + sizeof(BYTE_TO_BINARY_PATTERN) + sizeof(int)];
		sprintf(buf, "Current Inputs ==> "BYTE_TO_BINARY_PATTERN, BYTE_TO_BINARY(input));
 80031e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	da02      	bge.n	80031f4 <inputStatusLogger+0x18>
 80031ee:	f04f 0c31 	mov.w	ip, #49	; 0x31
 80031f2:	e001      	b.n	80031f8 <inputStatusLogger+0x1c>
 80031f4:	f04f 0c30 	mov.w	ip, #48	; 0x30
 80031f8:	79fb      	ldrb	r3, [r7, #7]
 80031fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <inputStatusLogger+0x2c>
 8003202:	f04f 0e31 	mov.w	lr, #49	; 0x31
 8003206:	e001      	b.n	800320c <inputStatusLogger+0x30>
 8003208:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800320c:	79fb      	ldrb	r3, [r7, #7]
 800320e:	f003 0320 	and.w	r3, r3, #32
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <inputStatusLogger+0x3e>
 8003216:	2331      	movs	r3, #49	; 0x31
 8003218:	e000      	b.n	800321c <inputStatusLogger+0x40>
 800321a:	2330      	movs	r3, #48	; 0x30
 800321c:	79fa      	ldrb	r2, [r7, #7]
 800321e:	f002 0210 	and.w	r2, r2, #16
 8003222:	2a00      	cmp	r2, #0
 8003224:	d001      	beq.n	800322a <inputStatusLogger+0x4e>
 8003226:	2231      	movs	r2, #49	; 0x31
 8003228:	e000      	b.n	800322c <inputStatusLogger+0x50>
 800322a:	2230      	movs	r2, #48	; 0x30
 800322c:	79f9      	ldrb	r1, [r7, #7]
 800322e:	f001 0108 	and.w	r1, r1, #8
 8003232:	2900      	cmp	r1, #0
 8003234:	d001      	beq.n	800323a <inputStatusLogger+0x5e>
 8003236:	2131      	movs	r1, #49	; 0x31
 8003238:	e000      	b.n	800323c <inputStatusLogger+0x60>
 800323a:	2130      	movs	r1, #48	; 0x30
 800323c:	79f8      	ldrb	r0, [r7, #7]
 800323e:	f000 0004 	and.w	r0, r0, #4
 8003242:	2800      	cmp	r0, #0
 8003244:	d001      	beq.n	800324a <inputStatusLogger+0x6e>
 8003246:	2031      	movs	r0, #49	; 0x31
 8003248:	e000      	b.n	800324c <inputStatusLogger+0x70>
 800324a:	2030      	movs	r0, #48	; 0x30
 800324c:	79fc      	ldrb	r4, [r7, #7]
 800324e:	f004 0402 	and.w	r4, r4, #2
 8003252:	2c00      	cmp	r4, #0
 8003254:	d001      	beq.n	800325a <inputStatusLogger+0x7e>
 8003256:	2431      	movs	r4, #49	; 0x31
 8003258:	e000      	b.n	800325c <inputStatusLogger+0x80>
 800325a:	2430      	movs	r4, #48	; 0x30
 800325c:	79fd      	ldrb	r5, [r7, #7]
 800325e:	f005 0501 	and.w	r5, r5, #1
 8003262:	2d00      	cmp	r5, #0
 8003264:	d001      	beq.n	800326a <inputStatusLogger+0x8e>
 8003266:	2531      	movs	r5, #49	; 0x31
 8003268:	e000      	b.n	800326c <inputStatusLogger+0x90>
 800326a:	2530      	movs	r5, #48	; 0x30
 800326c:	f107 060c 	add.w	r6, r7, #12
 8003270:	9505      	str	r5, [sp, #20]
 8003272:	9404      	str	r4, [sp, #16]
 8003274:	9003      	str	r0, [sp, #12]
 8003276:	9102      	str	r1, [sp, #8]
 8003278:	9201      	str	r2, [sp, #4]
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	4673      	mov	r3, lr
 800327e:	4662      	mov	r2, ip
 8003280:	4906      	ldr	r1, [pc, #24]	; (800329c <inputStatusLogger+0xc0>)
 8003282:	4630      	mov	r0, r6
 8003284:	f00c fbe0 	bl	800fa48 <siprintf>
		msgLogger(buf);
 8003288:	f107 030c 	add.w	r3, r7, #12
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff ff8d 	bl	80031ac <msgLogger>
	#endif
}
 8003292:	bf00      	nop
 8003294:	373c      	adds	r7, #60	; 0x3c
 8003296:	46bd      	mov	sp, r7
 8003298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800329a:	bf00      	nop
 800329c:	08013c34 	.word	0x08013c34

080032a0 <cs_sel>:

void cs_sel() {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 80032a4:	2200      	movs	r2, #0
 80032a6:	2110      	movs	r1, #16
 80032a8:	4802      	ldr	r0, [pc, #8]	; (80032b4 <cs_sel+0x14>)
 80032aa:	f000 ff67 	bl	800417c <HAL_GPIO_WritePin>
}
 80032ae:	bf00      	nop
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40020000 	.word	0x40020000

080032b8 <cs_desel>:

void cs_desel() {
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 80032bc:	2201      	movs	r2, #1
 80032be:	2110      	movs	r1, #16
 80032c0:	4802      	ldr	r0, [pc, #8]	; (80032cc <cs_desel+0x14>)
 80032c2:	f000 ff5b 	bl	800417c <HAL_GPIO_WritePin>
}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40020000 	.word	0x40020000

080032d0 <spi_rb>:

uint8_t spi_rb(void) {
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFF);
 80032d6:	1df9      	adds	r1, r7, #7
 80032d8:	f04f 33ff 	mov.w	r3, #4294967295
 80032dc:	2201      	movs	r2, #1
 80032de:	4804      	ldr	r0, [pc, #16]	; (80032f0 <spi_rb+0x20>)
 80032e0:	f002 f9b5 	bl	800564e <HAL_SPI_Receive>
	return rbuf;
 80032e4:	79fb      	ldrb	r3, [r7, #7]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	200034e4 	.word	0x200034e4

080032f4 <spi_wb>:

void spi_wb(uint8_t b) {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &b, 1, 0xFFFFFFFF);
 80032fe:	1df9      	adds	r1, r7, #7
 8003300:	f04f 33ff 	mov.w	r3, #4294967295
 8003304:	2201      	movs	r2, #1
 8003306:	4803      	ldr	r0, [pc, #12]	; (8003314 <spi_wb+0x20>)
 8003308:	f002 f865 	bl	80053d6 <HAL_SPI_Transmit>
}
 800330c:	bf00      	nop
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	200034e4 	.word	0x200034e4

08003318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800331c:	b672      	cpsid	i
}
 800331e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003320:	e7fe      	b.n	8003320 <Error_Handler+0x8>
	...

08003324 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800332a:	1d3b      	adds	r3, r7, #4
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003338:	2300      	movs	r3, #0
 800333a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800333c:	4b10      	ldr	r3, [pc, #64]	; (8003380 <MX_RTC_Init+0x5c>)
 800333e:	4a11      	ldr	r2, [pc, #68]	; (8003384 <MX_RTC_Init+0x60>)
 8003340:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003342:	4b0f      	ldr	r3, [pc, #60]	; (8003380 <MX_RTC_Init+0x5c>)
 8003344:	2200      	movs	r2, #0
 8003346:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 99;
 8003348:	4b0d      	ldr	r3, [pc, #52]	; (8003380 <MX_RTC_Init+0x5c>)
 800334a:	2263      	movs	r2, #99	; 0x63
 800334c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 299;
 800334e:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <MX_RTC_Init+0x5c>)
 8003350:	f240 122b 	movw	r2, #299	; 0x12b
 8003354:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003356:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <MX_RTC_Init+0x5c>)
 8003358:	2200      	movs	r2, #0
 800335a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800335c:	4b08      	ldr	r3, [pc, #32]	; (8003380 <MX_RTC_Init+0x5c>)
 800335e:	2200      	movs	r2, #0
 8003360:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003362:	4b07      	ldr	r3, [pc, #28]	; (8003380 <MX_RTC_Init+0x5c>)
 8003364:	2200      	movs	r2, #0
 8003366:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003368:	4805      	ldr	r0, [pc, #20]	; (8003380 <MX_RTC_Init+0x5c>)
 800336a:	f001 fc7b 	bl	8004c64 <HAL_RTC_Init>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8003374:	f7ff ffd0 	bl	8003318 <Error_Handler>

  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003378:	bf00      	nop
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	200034c4 	.word	0x200034c4
 8003384:	40002800 	.word	0x40002800

08003388 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003390:	f107 030c 	add.w	r3, r7, #12
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	605a      	str	r2, [r3, #4]
 800339a:	609a      	str	r2, [r3, #8]
 800339c:	60da      	str	r2, [r3, #12]
 800339e:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a0c      	ldr	r2, [pc, #48]	; (80033d8 <HAL_RTC_MspInit+0x50>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d111      	bne.n	80033ce <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80033aa:	2302      	movs	r3, #2
 80033ac:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80033ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033b2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033b4:	f107 030c 	add.w	r3, r7, #12
 80033b8:	4618      	mov	r0, r3
 80033ba:	f001 fb65 	bl	8004a88 <HAL_RCCEx_PeriphCLKConfig>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80033c4:	f7ff ffa8 	bl	8003318 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80033c8:	4b04      	ldr	r3, [pc, #16]	; (80033dc <HAL_RTC_MspInit+0x54>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80033ce:	bf00      	nop
 80033d0:	3720      	adds	r7, #32
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40002800 	.word	0x40002800
 80033dc:	42470e3c 	.word	0x42470e3c

080033e0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80033e4:	4b17      	ldr	r3, [pc, #92]	; (8003444 <MX_SPI1_Init+0x64>)
 80033e6:	4a18      	ldr	r2, [pc, #96]	; (8003448 <MX_SPI1_Init+0x68>)
 80033e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80033ea:	4b16      	ldr	r3, [pc, #88]	; (8003444 <MX_SPI1_Init+0x64>)
 80033ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80033f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80033f2:	4b14      	ldr	r3, [pc, #80]	; (8003444 <MX_SPI1_Init+0x64>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80033f8:	4b12      	ldr	r3, [pc, #72]	; (8003444 <MX_SPI1_Init+0x64>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033fe:	4b11      	ldr	r3, [pc, #68]	; (8003444 <MX_SPI1_Init+0x64>)
 8003400:	2200      	movs	r2, #0
 8003402:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003404:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <MX_SPI1_Init+0x64>)
 8003406:	2200      	movs	r2, #0
 8003408:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800340a:	4b0e      	ldr	r3, [pc, #56]	; (8003444 <MX_SPI1_Init+0x64>)
 800340c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003410:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003412:	4b0c      	ldr	r3, [pc, #48]	; (8003444 <MX_SPI1_Init+0x64>)
 8003414:	2200      	movs	r2, #0
 8003416:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003418:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <MX_SPI1_Init+0x64>)
 800341a:	2200      	movs	r2, #0
 800341c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800341e:	4b09      	ldr	r3, [pc, #36]	; (8003444 <MX_SPI1_Init+0x64>)
 8003420:	2200      	movs	r2, #0
 8003422:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003424:	4b07      	ldr	r3, [pc, #28]	; (8003444 <MX_SPI1_Init+0x64>)
 8003426:	2200      	movs	r2, #0
 8003428:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800342a:	4b06      	ldr	r3, [pc, #24]	; (8003444 <MX_SPI1_Init+0x64>)
 800342c:	220a      	movs	r2, #10
 800342e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003430:	4804      	ldr	r0, [pc, #16]	; (8003444 <MX_SPI1_Init+0x64>)
 8003432:	f001 ff47 	bl	80052c4 <HAL_SPI_Init>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800343c:	f7ff ff6c 	bl	8003318 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003440:	bf00      	nop
 8003442:	bd80      	pop	{r7, pc}
 8003444:	200034e4 	.word	0x200034e4
 8003448:	40013000 	.word	0x40013000

0800344c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003450:	4b17      	ldr	r3, [pc, #92]	; (80034b0 <MX_SPI2_Init+0x64>)
 8003452:	4a18      	ldr	r2, [pc, #96]	; (80034b4 <MX_SPI2_Init+0x68>)
 8003454:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003456:	4b16      	ldr	r3, [pc, #88]	; (80034b0 <MX_SPI2_Init+0x64>)
 8003458:	f44f 7282 	mov.w	r2, #260	; 0x104
 800345c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800345e:	4b14      	ldr	r3, [pc, #80]	; (80034b0 <MX_SPI2_Init+0x64>)
 8003460:	2200      	movs	r2, #0
 8003462:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003464:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <MX_SPI2_Init+0x64>)
 8003466:	2200      	movs	r2, #0
 8003468:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800346a:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <MX_SPI2_Init+0x64>)
 800346c:	2200      	movs	r2, #0
 800346e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003470:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <MX_SPI2_Init+0x64>)
 8003472:	2200      	movs	r2, #0
 8003474:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003476:	4b0e      	ldr	r3, [pc, #56]	; (80034b0 <MX_SPI2_Init+0x64>)
 8003478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800347c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800347e:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <MX_SPI2_Init+0x64>)
 8003480:	2200      	movs	r2, #0
 8003482:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003484:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <MX_SPI2_Init+0x64>)
 8003486:	2200      	movs	r2, #0
 8003488:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800348a:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <MX_SPI2_Init+0x64>)
 800348c:	2200      	movs	r2, #0
 800348e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003490:	4b07      	ldr	r3, [pc, #28]	; (80034b0 <MX_SPI2_Init+0x64>)
 8003492:	2200      	movs	r2, #0
 8003494:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003496:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <MX_SPI2_Init+0x64>)
 8003498:	220a      	movs	r2, #10
 800349a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800349c:	4804      	ldr	r0, [pc, #16]	; (80034b0 <MX_SPI2_Init+0x64>)
 800349e:	f001 ff11 	bl	80052c4 <HAL_SPI_Init>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80034a8:	f7ff ff36 	bl	8003318 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80034ac:	bf00      	nop
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	2000353c 	.word	0x2000353c
 80034b4:	40003800 	.word	0x40003800

080034b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08c      	sub	sp, #48	; 0x30
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c0:	f107 031c 	add.w	r3, r7, #28
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	605a      	str	r2, [r3, #4]
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	60da      	str	r2, [r3, #12]
 80034ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a32      	ldr	r2, [pc, #200]	; (80035a0 <HAL_SPI_MspInit+0xe8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d12c      	bne.n	8003534 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	61bb      	str	r3, [r7, #24]
 80034de:	4b31      	ldr	r3, [pc, #196]	; (80035a4 <HAL_SPI_MspInit+0xec>)
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	4a30      	ldr	r2, [pc, #192]	; (80035a4 <HAL_SPI_MspInit+0xec>)
 80034e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034e8:	6453      	str	r3, [r2, #68]	; 0x44
 80034ea:	4b2e      	ldr	r3, [pc, #184]	; (80035a4 <HAL_SPI_MspInit+0xec>)
 80034ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034f2:	61bb      	str	r3, [r7, #24]
 80034f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]
 80034fa:	4b2a      	ldr	r3, [pc, #168]	; (80035a4 <HAL_SPI_MspInit+0xec>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	4a29      	ldr	r2, [pc, #164]	; (80035a4 <HAL_SPI_MspInit+0xec>)
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	6313      	str	r3, [r2, #48]	; 0x30
 8003506:	4b27      	ldr	r3, [pc, #156]	; (80035a4 <HAL_SPI_MspInit+0xec>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003512:	23e0      	movs	r3, #224	; 0xe0
 8003514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003516:	2302      	movs	r3, #2
 8003518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351a:	2300      	movs	r3, #0
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800351e:	2303      	movs	r3, #3
 8003520:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003522:	2305      	movs	r3, #5
 8003524:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003526:	f107 031c 	add.w	r3, r7, #28
 800352a:	4619      	mov	r1, r3
 800352c:	481e      	ldr	r0, [pc, #120]	; (80035a8 <HAL_SPI_MspInit+0xf0>)
 800352e:	f000 fca1 	bl	8003e74 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003532:	e031      	b.n	8003598 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a1c      	ldr	r2, [pc, #112]	; (80035ac <HAL_SPI_MspInit+0xf4>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d12c      	bne.n	8003598 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	4b18      	ldr	r3, [pc, #96]	; (80035a4 <HAL_SPI_MspInit+0xec>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	4a17      	ldr	r2, [pc, #92]	; (80035a4 <HAL_SPI_MspInit+0xec>)
 8003548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800354c:	6413      	str	r3, [r2, #64]	; 0x40
 800354e:	4b15      	ldr	r3, [pc, #84]	; (80035a4 <HAL_SPI_MspInit+0xec>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <HAL_SPI_MspInit+0xec>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	4a10      	ldr	r2, [pc, #64]	; (80035a4 <HAL_SPI_MspInit+0xec>)
 8003564:	f043 0302 	orr.w	r3, r3, #2
 8003568:	6313      	str	r3, [r2, #48]	; 0x30
 800356a:	4b0e      	ldr	r3, [pc, #56]	; (80035a4 <HAL_SPI_MspInit+0xec>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8003576:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800357a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800357c:	2302      	movs	r3, #2
 800357e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003580:	2300      	movs	r3, #0
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003584:	2303      	movs	r3, #3
 8003586:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003588:	2305      	movs	r3, #5
 800358a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800358c:	f107 031c 	add.w	r3, r7, #28
 8003590:	4619      	mov	r1, r3
 8003592:	4807      	ldr	r0, [pc, #28]	; (80035b0 <HAL_SPI_MspInit+0xf8>)
 8003594:	f000 fc6e 	bl	8003e74 <HAL_GPIO_Init>
}
 8003598:	bf00      	nop
 800359a:	3730      	adds	r7, #48	; 0x30
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40013000 	.word	0x40013000
 80035a4:	40023800 	.word	0x40023800
 80035a8:	40020000 	.word	0x40020000
 80035ac:	40003800 	.word	0x40003800
 80035b0:	40020400 	.word	0x40020400

080035b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	607b      	str	r3, [r7, #4]
 80035be:	4b10      	ldr	r3, [pc, #64]	; (8003600 <HAL_MspInit+0x4c>)
 80035c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c2:	4a0f      	ldr	r2, [pc, #60]	; (8003600 <HAL_MspInit+0x4c>)
 80035c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035c8:	6453      	str	r3, [r2, #68]	; 0x44
 80035ca:	4b0d      	ldr	r3, [pc, #52]	; (8003600 <HAL_MspInit+0x4c>)
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035d2:	607b      	str	r3, [r7, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035d6:	2300      	movs	r3, #0
 80035d8:	603b      	str	r3, [r7, #0]
 80035da:	4b09      	ldr	r3, [pc, #36]	; (8003600 <HAL_MspInit+0x4c>)
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	4a08      	ldr	r2, [pc, #32]	; (8003600 <HAL_MspInit+0x4c>)
 80035e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e4:	6413      	str	r3, [r2, #64]	; 0x40
 80035e6:	4b06      	ldr	r3, [pc, #24]	; (8003600 <HAL_MspInit+0x4c>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ee:	603b      	str	r3, [r7, #0]
 80035f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	40023800 	.word	0x40023800

08003604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003608:	e7fe      	b.n	8003608 <NMI_Handler+0x4>

0800360a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800360a:	b480      	push	{r7}
 800360c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800360e:	e7fe      	b.n	800360e <HardFault_Handler+0x4>

08003610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003614:	e7fe      	b.n	8003614 <MemManage_Handler+0x4>

08003616 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003616:	b480      	push	{r7}
 8003618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800361a:	e7fe      	b.n	800361a <BusFault_Handler+0x4>

0800361c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003620:	e7fe      	b.n	8003620 <UsageFault_Handler+0x4>

08003622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003622:	b480      	push	{r7}
 8003624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003626:	bf00      	nop
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003634:	bf00      	nop
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800363e:	b480      	push	{r7}
 8003640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003642:	bf00      	nop
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (Timer1 > 0) Timer1--;
 8003650:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <SysTick_Handler+0x34>)
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <SysTick_Handler+0x18>
 8003658:	4b09      	ldr	r3, [pc, #36]	; (8003680 <SysTick_Handler+0x34>)
 800365a:	881b      	ldrh	r3, [r3, #0]
 800365c:	3b01      	subs	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	4b07      	ldr	r3, [pc, #28]	; (8003680 <SysTick_Handler+0x34>)
 8003662:	801a      	strh	r2, [r3, #0]
	if (Timer2 > 0) Timer2--;
 8003664:	4b07      	ldr	r3, [pc, #28]	; (8003684 <SysTick_Handler+0x38>)
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <SysTick_Handler+0x2c>
 800366c:	4b05      	ldr	r3, [pc, #20]	; (8003684 <SysTick_Handler+0x38>)
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	3b01      	subs	r3, #1
 8003672:	b29a      	uxth	r2, r3
 8003674:	4b03      	ldr	r3, [pc, #12]	; (8003684 <SysTick_Handler+0x38>)
 8003676:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003678:	f000 faa6 	bl	8003bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800367c:	bf00      	nop
 800367e:	bd80      	pop	{r7, pc}
 8003680:	2000029c 	.word	0x2000029c
 8003684:	2000029e 	.word	0x2000029e

08003688 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800368c:	4802      	ldr	r0, [pc, #8]	; (8003698 <TIM3_IRQHandler+0x10>)
 800368e:	f002 fc73 	bl	8005f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003692:	bf00      	nop
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20003598 	.word	0x20003598

0800369c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80036a0:	4802      	ldr	r0, [pc, #8]	; (80036ac <TIM4_IRQHandler+0x10>)
 80036a2:	f002 fc69 	bl	8005f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80036a6:	bf00      	nop
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	200035e0 	.word	0x200035e0

080036b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
	return 1;
 80036b4:	2301      	movs	r3, #1
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <_kill>:

int _kill(int pid, int sig)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80036ca:	f00b f96f 	bl	800e9ac <__errno>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2216      	movs	r2, #22
 80036d2:	601a      	str	r2, [r3, #0]
	return -1;
 80036d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <_exit>:

void _exit (int status)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80036e8:	f04f 31ff 	mov.w	r1, #4294967295
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7ff ffe7 	bl	80036c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80036f2:	e7fe      	b.n	80036f2 <_exit+0x12>

080036f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	e00a      	b.n	800371c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003706:	f3af 8000 	nop.w
 800370a:	4601      	mov	r1, r0
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	60ba      	str	r2, [r7, #8]
 8003712:	b2ca      	uxtb	r2, r1
 8003714:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	3301      	adds	r3, #1
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	429a      	cmp	r2, r3
 8003722:	dbf0      	blt.n	8003706 <_read+0x12>
	}

return len;
 8003724:	687b      	ldr	r3, [r7, #4]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <_close>:
	}
	return len;
}

int _close(int file)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
	return -1;
 8003736:	f04f 33ff 	mov.w	r3, #4294967295
}
 800373a:	4618      	mov	r0, r3
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003756:	605a      	str	r2, [r3, #4]
	return 0;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <_isatty>:

int _isatty(int file)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
	return 1;
 800376e:	2301      	movs	r3, #1
}
 8003770:	4618      	mov	r0, r3
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
	return 0;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
	...

08003798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037a0:	4a14      	ldr	r2, [pc, #80]	; (80037f4 <_sbrk+0x5c>)
 80037a2:	4b15      	ldr	r3, [pc, #84]	; (80037f8 <_sbrk+0x60>)
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037ac:	4b13      	ldr	r3, [pc, #76]	; (80037fc <_sbrk+0x64>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d102      	bne.n	80037ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037b4:	4b11      	ldr	r3, [pc, #68]	; (80037fc <_sbrk+0x64>)
 80037b6:	4a12      	ldr	r2, [pc, #72]	; (8003800 <_sbrk+0x68>)
 80037b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037ba:	4b10      	ldr	r3, [pc, #64]	; (80037fc <_sbrk+0x64>)
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4413      	add	r3, r2
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d207      	bcs.n	80037d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037c8:	f00b f8f0 	bl	800e9ac <__errno>
 80037cc:	4603      	mov	r3, r0
 80037ce:	220c      	movs	r2, #12
 80037d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037d2:	f04f 33ff 	mov.w	r3, #4294967295
 80037d6:	e009      	b.n	80037ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037d8:	4b08      	ldr	r3, [pc, #32]	; (80037fc <_sbrk+0x64>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037de:	4b07      	ldr	r3, [pc, #28]	; (80037fc <_sbrk+0x64>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4413      	add	r3, r2
 80037e6:	4a05      	ldr	r2, [pc, #20]	; (80037fc <_sbrk+0x64>)
 80037e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037ea:	68fb      	ldr	r3, [r7, #12]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	20010000 	.word	0x20010000
 80037f8:	00000400 	.word	0x00000400
 80037fc:	20003594 	.word	0x20003594
 8003800:	20003960 	.word	0x20003960

08003804 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003808:	4b06      	ldr	r3, [pc, #24]	; (8003824 <SystemInit+0x20>)
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380e:	4a05      	ldr	r2, [pc, #20]	; (8003824 <SystemInit+0x20>)
 8003810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003818:	bf00      	nop
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	e000ed00 	.word	0xe000ed00

08003828 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800382e:	f107 0308 	add.w	r3, r7, #8
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	605a      	str	r2, [r3, #4]
 8003838:	609a      	str	r2, [r3, #8]
 800383a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800383c:	463b      	mov	r3, r7
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003844:	4b1d      	ldr	r3, [pc, #116]	; (80038bc <MX_TIM3_Init+0x94>)
 8003846:	4a1e      	ldr	r2, [pc, #120]	; (80038c0 <MX_TIM3_Init+0x98>)
 8003848:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5-1;
 800384a:	4b1c      	ldr	r3, [pc, #112]	; (80038bc <MX_TIM3_Init+0x94>)
 800384c:	2204      	movs	r2, #4
 800384e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003850:	4b1a      	ldr	r3, [pc, #104]	; (80038bc <MX_TIM3_Init+0x94>)
 8003852:	2200      	movs	r2, #0
 8003854:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 25000-1;
 8003856:	4b19      	ldr	r3, [pc, #100]	; (80038bc <MX_TIM3_Init+0x94>)
 8003858:	f246 12a7 	movw	r2, #24999	; 0x61a7
 800385c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800385e:	4b17      	ldr	r3, [pc, #92]	; (80038bc <MX_TIM3_Init+0x94>)
 8003860:	2200      	movs	r2, #0
 8003862:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003864:	4b15      	ldr	r3, [pc, #84]	; (80038bc <MX_TIM3_Init+0x94>)
 8003866:	2200      	movs	r2, #0
 8003868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800386a:	4814      	ldr	r0, [pc, #80]	; (80038bc <MX_TIM3_Init+0x94>)
 800386c:	f002 fad2 	bl	8005e14 <HAL_TIM_Base_Init>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003876:	f7ff fd4f 	bl	8003318 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800387a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800387e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003880:	f107 0308 	add.w	r3, r7, #8
 8003884:	4619      	mov	r1, r3
 8003886:	480d      	ldr	r0, [pc, #52]	; (80038bc <MX_TIM3_Init+0x94>)
 8003888:	f002 fc7e 	bl	8006188 <HAL_TIM_ConfigClockSource>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003892:	f7ff fd41 	bl	8003318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003896:	2300      	movs	r3, #0
 8003898:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800389a:	2300      	movs	r3, #0
 800389c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800389e:	463b      	mov	r3, r7
 80038a0:	4619      	mov	r1, r3
 80038a2:	4806      	ldr	r0, [pc, #24]	; (80038bc <MX_TIM3_Init+0x94>)
 80038a4:	f002 fe7a 	bl	800659c <HAL_TIMEx_MasterConfigSynchronization>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80038ae:	f7ff fd33 	bl	8003318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80038b2:	bf00      	nop
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	20003598 	.word	0x20003598
 80038c0:	40000400 	.word	0x40000400

080038c4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038ca:	f107 0308 	add.w	r3, r7, #8
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	605a      	str	r2, [r3, #4]
 80038d4:	609a      	str	r2, [r3, #8]
 80038d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038d8:	463b      	mov	r3, r7
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80038e0:	4b1d      	ldr	r3, [pc, #116]	; (8003958 <MX_TIM4_Init+0x94>)
 80038e2:	4a1e      	ldr	r2, [pc, #120]	; (800395c <MX_TIM4_Init+0x98>)
 80038e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000-1;
 80038e6:	4b1c      	ldr	r3, [pc, #112]	; (8003958 <MX_TIM4_Init+0x94>)
 80038e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038ec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038ee:	4b1a      	ldr	r3, [pc, #104]	; (8003958 <MX_TIM4_Init+0x94>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 25000-1;
 80038f4:	4b18      	ldr	r3, [pc, #96]	; (8003958 <MX_TIM4_Init+0x94>)
 80038f6:	f246 12a7 	movw	r2, #24999	; 0x61a7
 80038fa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038fc:	4b16      	ldr	r3, [pc, #88]	; (8003958 <MX_TIM4_Init+0x94>)
 80038fe:	2200      	movs	r2, #0
 8003900:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003902:	4b15      	ldr	r3, [pc, #84]	; (8003958 <MX_TIM4_Init+0x94>)
 8003904:	2200      	movs	r2, #0
 8003906:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003908:	4813      	ldr	r0, [pc, #76]	; (8003958 <MX_TIM4_Init+0x94>)
 800390a:	f002 fa83 	bl	8005e14 <HAL_TIM_Base_Init>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003914:	f7ff fd00 	bl	8003318 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800391c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800391e:	f107 0308 	add.w	r3, r7, #8
 8003922:	4619      	mov	r1, r3
 8003924:	480c      	ldr	r0, [pc, #48]	; (8003958 <MX_TIM4_Init+0x94>)
 8003926:	f002 fc2f 	bl	8006188 <HAL_TIM_ConfigClockSource>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003930:	f7ff fcf2 	bl	8003318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003934:	2300      	movs	r3, #0
 8003936:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003938:	2300      	movs	r3, #0
 800393a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800393c:	463b      	mov	r3, r7
 800393e:	4619      	mov	r1, r3
 8003940:	4805      	ldr	r0, [pc, #20]	; (8003958 <MX_TIM4_Init+0x94>)
 8003942:	f002 fe2b 	bl	800659c <HAL_TIMEx_MasterConfigSynchronization>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800394c:	f7ff fce4 	bl	8003318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003950:	bf00      	nop
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	200035e0 	.word	0x200035e0
 800395c:	40000800 	.word	0x40000800

08003960 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a1c      	ldr	r2, [pc, #112]	; (80039e0 <HAL_TIM_Base_MspInit+0x80>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d116      	bne.n	80039a0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	4b1b      	ldr	r3, [pc, #108]	; (80039e4 <HAL_TIM_Base_MspInit+0x84>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	4a1a      	ldr	r2, [pc, #104]	; (80039e4 <HAL_TIM_Base_MspInit+0x84>)
 800397c:	f043 0302 	orr.w	r3, r3, #2
 8003980:	6413      	str	r3, [r2, #64]	; 0x40
 8003982:	4b18      	ldr	r3, [pc, #96]	; (80039e4 <HAL_TIM_Base_MspInit+0x84>)
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800398e:	2200      	movs	r2, #0
 8003990:	2101      	movs	r1, #1
 8003992:	201d      	movs	r0, #29
 8003994:	f000 fa37 	bl	8003e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003998:	201d      	movs	r0, #29
 800399a:	f000 fa50 	bl	8003e3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800399e:	e01a      	b.n	80039d6 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a10      	ldr	r2, [pc, #64]	; (80039e8 <HAL_TIM_Base_MspInit+0x88>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d115      	bne.n	80039d6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80039aa:	2300      	movs	r3, #0
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	4b0d      	ldr	r3, [pc, #52]	; (80039e4 <HAL_TIM_Base_MspInit+0x84>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	4a0c      	ldr	r2, [pc, #48]	; (80039e4 <HAL_TIM_Base_MspInit+0x84>)
 80039b4:	f043 0304 	orr.w	r3, r3, #4
 80039b8:	6413      	str	r3, [r2, #64]	; 0x40
 80039ba:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <HAL_TIM_Base_MspInit+0x84>)
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	60bb      	str	r3, [r7, #8]
 80039c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80039c6:	2200      	movs	r2, #0
 80039c8:	2101      	movs	r1, #1
 80039ca:	201e      	movs	r0, #30
 80039cc:	f000 fa1b 	bl	8003e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80039d0:	201e      	movs	r0, #30
 80039d2:	f000 fa34 	bl	8003e3e <HAL_NVIC_EnableIRQ>
}
 80039d6:	bf00      	nop
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40000400 	.word	0x40000400
 80039e4:	40023800 	.word	0x40023800
 80039e8:	40000800 	.word	0x40000800

080039ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80039f0:	4b11      	ldr	r3, [pc, #68]	; (8003a38 <MX_USART1_UART_Init+0x4c>)
 80039f2:	4a12      	ldr	r2, [pc, #72]	; (8003a3c <MX_USART1_UART_Init+0x50>)
 80039f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80039f6:	4b10      	ldr	r3, [pc, #64]	; (8003a38 <MX_USART1_UART_Init+0x4c>)
 80039f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80039fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80039fe:	4b0e      	ldr	r3, [pc, #56]	; (8003a38 <MX_USART1_UART_Init+0x4c>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a04:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <MX_USART1_UART_Init+0x4c>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a0a:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <MX_USART1_UART_Init+0x4c>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a10:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <MX_USART1_UART_Init+0x4c>)
 8003a12:	220c      	movs	r2, #12
 8003a14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a16:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <MX_USART1_UART_Init+0x4c>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a1c:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <MX_USART1_UART_Init+0x4c>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a22:	4805      	ldr	r0, [pc, #20]	; (8003a38 <MX_USART1_UART_Init+0x4c>)
 8003a24:	f002 fe3c 	bl	80066a0 <HAL_UART_Init>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003a2e:	f7ff fc73 	bl	8003318 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20003628 	.word	0x20003628
 8003a3c:	40011000 	.word	0x40011000

08003a40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08a      	sub	sp, #40	; 0x28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a48:	f107 0314 	add.w	r3, r7, #20
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	605a      	str	r2, [r3, #4]
 8003a52:	609a      	str	r2, [r3, #8]
 8003a54:	60da      	str	r2, [r3, #12]
 8003a56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a19      	ldr	r2, [pc, #100]	; (8003ac4 <HAL_UART_MspInit+0x84>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d12c      	bne.n	8003abc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a62:	2300      	movs	r3, #0
 8003a64:	613b      	str	r3, [r7, #16]
 8003a66:	4b18      	ldr	r3, [pc, #96]	; (8003ac8 <HAL_UART_MspInit+0x88>)
 8003a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6a:	4a17      	ldr	r2, [pc, #92]	; (8003ac8 <HAL_UART_MspInit+0x88>)
 8003a6c:	f043 0310 	orr.w	r3, r3, #16
 8003a70:	6453      	str	r3, [r2, #68]	; 0x44
 8003a72:	4b15      	ldr	r3, [pc, #84]	; (8003ac8 <HAL_UART_MspInit+0x88>)
 8003a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a76:	f003 0310 	and.w	r3, r3, #16
 8003a7a:	613b      	str	r3, [r7, #16]
 8003a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	4b11      	ldr	r3, [pc, #68]	; (8003ac8 <HAL_UART_MspInit+0x88>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	4a10      	ldr	r2, [pc, #64]	; (8003ac8 <HAL_UART_MspInit+0x88>)
 8003a88:	f043 0301 	orr.w	r3, r3, #1
 8003a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a8e:	4b0e      	ldr	r3, [pc, #56]	; (8003ac8 <HAL_UART_MspInit+0x88>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003a9a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003aac:	2307      	movs	r3, #7
 8003aae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab0:	f107 0314 	add.w	r3, r7, #20
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4805      	ldr	r0, [pc, #20]	; (8003acc <HAL_UART_MspInit+0x8c>)
 8003ab8:	f000 f9dc 	bl	8003e74 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003abc:	bf00      	nop
 8003abe:	3728      	adds	r7, #40	; 0x28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40011000 	.word	0x40011000
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	40020000 	.word	0x40020000

08003ad0 <Reset_Handler>:
 8003ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b08 <LoopFillZerobss+0x12>
 8003ad4:	480d      	ldr	r0, [pc, #52]	; (8003b0c <LoopFillZerobss+0x16>)
 8003ad6:	490e      	ldr	r1, [pc, #56]	; (8003b10 <LoopFillZerobss+0x1a>)
 8003ad8:	4a0e      	ldr	r2, [pc, #56]	; (8003b14 <LoopFillZerobss+0x1e>)
 8003ada:	2300      	movs	r3, #0
 8003adc:	e002      	b.n	8003ae4 <LoopCopyDataInit>

08003ade <CopyDataInit>:
 8003ade:	58d4      	ldr	r4, [r2, r3]
 8003ae0:	50c4      	str	r4, [r0, r3]
 8003ae2:	3304      	adds	r3, #4

08003ae4 <LoopCopyDataInit>:
 8003ae4:	18c4      	adds	r4, r0, r3
 8003ae6:	428c      	cmp	r4, r1
 8003ae8:	d3f9      	bcc.n	8003ade <CopyDataInit>
 8003aea:	4a0b      	ldr	r2, [pc, #44]	; (8003b18 <LoopFillZerobss+0x22>)
 8003aec:	4c0b      	ldr	r4, [pc, #44]	; (8003b1c <LoopFillZerobss+0x26>)
 8003aee:	2300      	movs	r3, #0
 8003af0:	e001      	b.n	8003af6 <LoopFillZerobss>

08003af2 <FillZerobss>:
 8003af2:	6013      	str	r3, [r2, #0]
 8003af4:	3204      	adds	r2, #4

08003af6 <LoopFillZerobss>:
 8003af6:	42a2      	cmp	r2, r4
 8003af8:	d3fb      	bcc.n	8003af2 <FillZerobss>
 8003afa:	f7ff fe83 	bl	8003804 <SystemInit>
 8003afe:	f00a ff5b 	bl	800e9b8 <__libc_init_array>
 8003b02:	f7fd fffb 	bl	8001afc <main>
 8003b06:	4770      	bx	lr
 8003b08:	20010000 	.word	0x20010000
 8003b0c:	20000000 	.word	0x20000000
 8003b10:	20000280 	.word	0x20000280
 8003b14:	0801461c 	.word	0x0801461c
 8003b18:	20000280 	.word	0x20000280
 8003b1c:	20003960 	.word	0x20003960

08003b20 <ADC_IRQHandler>:
 8003b20:	e7fe      	b.n	8003b20 <ADC_IRQHandler>
	...

08003b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b28:	4b0e      	ldr	r3, [pc, #56]	; (8003b64 <HAL_Init+0x40>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a0d      	ldr	r2, [pc, #52]	; (8003b64 <HAL_Init+0x40>)
 8003b2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b34:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <HAL_Init+0x40>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a0a      	ldr	r2, [pc, #40]	; (8003b64 <HAL_Init+0x40>)
 8003b3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b40:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <HAL_Init+0x40>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a07      	ldr	r2, [pc, #28]	; (8003b64 <HAL_Init+0x40>)
 8003b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b4c:	2003      	movs	r0, #3
 8003b4e:	f000 f94f 	bl	8003df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b52:	2000      	movs	r0, #0
 8003b54:	f000 f808 	bl	8003b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b58:	f7ff fd2c 	bl	80035b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	40023c00 	.word	0x40023c00

08003b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b70:	4b12      	ldr	r3, [pc, #72]	; (8003bbc <HAL_InitTick+0x54>)
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	4b12      	ldr	r3, [pc, #72]	; (8003bc0 <HAL_InitTick+0x58>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	4619      	mov	r1, r3
 8003b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 f967 	bl	8003e5a <HAL_SYSTICK_Config>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e00e      	b.n	8003bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b0f      	cmp	r3, #15
 8003b9a:	d80a      	bhi.n	8003bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba4:	f000 f92f 	bl	8003e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ba8:	4a06      	ldr	r2, [pc, #24]	; (8003bc4 <HAL_InitTick+0x5c>)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	e000      	b.n	8003bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	2000005c 	.word	0x2000005c
 8003bc0:	20000064 	.word	0x20000064
 8003bc4:	20000060 	.word	0x20000060

08003bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bcc:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <HAL_IncTick+0x20>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <HAL_IncTick+0x24>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	4a04      	ldr	r2, [pc, #16]	; (8003bec <HAL_IncTick+0x24>)
 8003bda:	6013      	str	r3, [r2, #0]
}
 8003bdc:	bf00      	nop
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	20000064 	.word	0x20000064
 8003bec:	2000366c 	.word	0x2000366c

08003bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8003bf4:	4b03      	ldr	r3, [pc, #12]	; (8003c04 <HAL_GetTick+0x14>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	2000366c 	.word	0x2000366c

08003c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c10:	f7ff ffee 	bl	8003bf0 <HAL_GetTick>
 8003c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c20:	d005      	beq.n	8003c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c22:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <HAL_Delay+0x44>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c2e:	bf00      	nop
 8003c30:	f7ff ffde 	bl	8003bf0 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d8f7      	bhi.n	8003c30 <HAL_Delay+0x28>
  {
  }
}
 8003c40:	bf00      	nop
 8003c42:	bf00      	nop
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	20000064 	.word	0x20000064

08003c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c60:	4b0c      	ldr	r3, [pc, #48]	; (8003c94 <__NVIC_SetPriorityGrouping+0x44>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c82:	4a04      	ldr	r2, [pc, #16]	; (8003c94 <__NVIC_SetPriorityGrouping+0x44>)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	60d3      	str	r3, [r2, #12]
}
 8003c88:	bf00      	nop
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	e000ed00 	.word	0xe000ed00

08003c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c9c:	4b04      	ldr	r3, [pc, #16]	; (8003cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	0a1b      	lsrs	r3, r3, #8
 8003ca2:	f003 0307 	and.w	r3, r3, #7
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	e000ed00 	.word	0xe000ed00

08003cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	4603      	mov	r3, r0
 8003cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	db0b      	blt.n	8003cde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cc6:	79fb      	ldrb	r3, [r7, #7]
 8003cc8:	f003 021f 	and.w	r2, r3, #31
 8003ccc:	4907      	ldr	r1, [pc, #28]	; (8003cec <__NVIC_EnableIRQ+0x38>)
 8003cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd2:	095b      	lsrs	r3, r3, #5
 8003cd4:	2001      	movs	r0, #1
 8003cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8003cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	e000e100 	.word	0xe000e100

08003cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	6039      	str	r1, [r7, #0]
 8003cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	db0a      	blt.n	8003d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	490c      	ldr	r1, [pc, #48]	; (8003d3c <__NVIC_SetPriority+0x4c>)
 8003d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0e:	0112      	lsls	r2, r2, #4
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	440b      	add	r3, r1
 8003d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d18:	e00a      	b.n	8003d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	4908      	ldr	r1, [pc, #32]	; (8003d40 <__NVIC_SetPriority+0x50>)
 8003d20:	79fb      	ldrb	r3, [r7, #7]
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	3b04      	subs	r3, #4
 8003d28:	0112      	lsls	r2, r2, #4
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	761a      	strb	r2, [r3, #24]
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	e000e100 	.word	0xe000e100
 8003d40:	e000ed00 	.word	0xe000ed00

08003d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b089      	sub	sp, #36	; 0x24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f1c3 0307 	rsb	r3, r3, #7
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	bf28      	it	cs
 8003d62:	2304      	movcs	r3, #4
 8003d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	3304      	adds	r3, #4
 8003d6a:	2b06      	cmp	r3, #6
 8003d6c:	d902      	bls.n	8003d74 <NVIC_EncodePriority+0x30>
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	3b03      	subs	r3, #3
 8003d72:	e000      	b.n	8003d76 <NVIC_EncodePriority+0x32>
 8003d74:	2300      	movs	r3, #0
 8003d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d78:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	43da      	mvns	r2, r3
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	401a      	ands	r2, r3
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	fa01 f303 	lsl.w	r3, r1, r3
 8003d96:	43d9      	mvns	r1, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d9c:	4313      	orrs	r3, r2
         );
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3724      	adds	r7, #36	; 0x24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
	...

08003dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dbc:	d301      	bcc.n	8003dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e00f      	b.n	8003de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dc2:	4a0a      	ldr	r2, [pc, #40]	; (8003dec <SysTick_Config+0x40>)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dca:	210f      	movs	r1, #15
 8003dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd0:	f7ff ff8e 	bl	8003cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dd4:	4b05      	ldr	r3, [pc, #20]	; (8003dec <SysTick_Config+0x40>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dda:	4b04      	ldr	r3, [pc, #16]	; (8003dec <SysTick_Config+0x40>)
 8003ddc:	2207      	movs	r2, #7
 8003dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	e000e010 	.word	0xe000e010

08003df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7ff ff29 	bl	8003c50 <__NVIC_SetPriorityGrouping>
}
 8003dfe:	bf00      	nop
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b086      	sub	sp, #24
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	60b9      	str	r1, [r7, #8]
 8003e10:	607a      	str	r2, [r7, #4]
 8003e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e18:	f7ff ff3e 	bl	8003c98 <__NVIC_GetPriorityGrouping>
 8003e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	68b9      	ldr	r1, [r7, #8]
 8003e22:	6978      	ldr	r0, [r7, #20]
 8003e24:	f7ff ff8e 	bl	8003d44 <NVIC_EncodePriority>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e2e:	4611      	mov	r1, r2
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff ff5d 	bl	8003cf0 <__NVIC_SetPriority>
}
 8003e36:	bf00      	nop
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b082      	sub	sp, #8
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	4603      	mov	r3, r0
 8003e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff ff31 	bl	8003cb4 <__NVIC_EnableIRQ>
}
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b082      	sub	sp, #8
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7ff ffa2 	bl	8003dac <SysTick_Config>
 8003e68:	4603      	mov	r3, r0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b089      	sub	sp, #36	; 0x24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61fb      	str	r3, [r7, #28]
 8003e8e:	e159      	b.n	8004144 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e90:	2201      	movs	r2, #1
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	f040 8148 	bne.w	800413e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d005      	beq.n	8003ec6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d130      	bne.n	8003f28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	2203      	movs	r2, #3
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	4013      	ands	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003efc:	2201      	movs	r2, #1
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	091b      	lsrs	r3, r3, #4
 8003f12:	f003 0201 	and.w	r2, r3, #1
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f003 0303 	and.w	r3, r3, #3
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	d017      	beq.n	8003f64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	2203      	movs	r2, #3
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 0303 	and.w	r3, r3, #3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d123      	bne.n	8003fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	08da      	lsrs	r2, r3, #3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3208      	adds	r2, #8
 8003f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	220f      	movs	r2, #15
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	4013      	ands	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	08da      	lsrs	r2, r3, #3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3208      	adds	r2, #8
 8003fb2:	69b9      	ldr	r1, [r7, #24]
 8003fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	2203      	movs	r2, #3
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 0203 	and.w	r2, r3, #3
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 80a2 	beq.w	800413e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	4b57      	ldr	r3, [pc, #348]	; (800415c <HAL_GPIO_Init+0x2e8>)
 8004000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004002:	4a56      	ldr	r2, [pc, #344]	; (800415c <HAL_GPIO_Init+0x2e8>)
 8004004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004008:	6453      	str	r3, [r2, #68]	; 0x44
 800400a:	4b54      	ldr	r3, [pc, #336]	; (800415c <HAL_GPIO_Init+0x2e8>)
 800400c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004016:	4a52      	ldr	r2, [pc, #328]	; (8004160 <HAL_GPIO_Init+0x2ec>)
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	089b      	lsrs	r3, r3, #2
 800401c:	3302      	adds	r3, #2
 800401e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	220f      	movs	r2, #15
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	43db      	mvns	r3, r3
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	4013      	ands	r3, r2
 8004038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a49      	ldr	r2, [pc, #292]	; (8004164 <HAL_GPIO_Init+0x2f0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d019      	beq.n	8004076 <HAL_GPIO_Init+0x202>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a48      	ldr	r2, [pc, #288]	; (8004168 <HAL_GPIO_Init+0x2f4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d013      	beq.n	8004072 <HAL_GPIO_Init+0x1fe>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a47      	ldr	r2, [pc, #284]	; (800416c <HAL_GPIO_Init+0x2f8>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d00d      	beq.n	800406e <HAL_GPIO_Init+0x1fa>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a46      	ldr	r2, [pc, #280]	; (8004170 <HAL_GPIO_Init+0x2fc>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d007      	beq.n	800406a <HAL_GPIO_Init+0x1f6>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a45      	ldr	r2, [pc, #276]	; (8004174 <HAL_GPIO_Init+0x300>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d101      	bne.n	8004066 <HAL_GPIO_Init+0x1f2>
 8004062:	2304      	movs	r3, #4
 8004064:	e008      	b.n	8004078 <HAL_GPIO_Init+0x204>
 8004066:	2307      	movs	r3, #7
 8004068:	e006      	b.n	8004078 <HAL_GPIO_Init+0x204>
 800406a:	2303      	movs	r3, #3
 800406c:	e004      	b.n	8004078 <HAL_GPIO_Init+0x204>
 800406e:	2302      	movs	r3, #2
 8004070:	e002      	b.n	8004078 <HAL_GPIO_Init+0x204>
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <HAL_GPIO_Init+0x204>
 8004076:	2300      	movs	r3, #0
 8004078:	69fa      	ldr	r2, [r7, #28]
 800407a:	f002 0203 	and.w	r2, r2, #3
 800407e:	0092      	lsls	r2, r2, #2
 8004080:	4093      	lsls	r3, r2
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	4313      	orrs	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004088:	4935      	ldr	r1, [pc, #212]	; (8004160 <HAL_GPIO_Init+0x2ec>)
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	089b      	lsrs	r3, r3, #2
 800408e:	3302      	adds	r3, #2
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004096:	4b38      	ldr	r3, [pc, #224]	; (8004178 <HAL_GPIO_Init+0x304>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	43db      	mvns	r3, r3
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4013      	ands	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040ba:	4a2f      	ldr	r2, [pc, #188]	; (8004178 <HAL_GPIO_Init+0x304>)
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040c0:	4b2d      	ldr	r3, [pc, #180]	; (8004178 <HAL_GPIO_Init+0x304>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	43db      	mvns	r3, r3
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	4013      	ands	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040e4:	4a24      	ldr	r2, [pc, #144]	; (8004178 <HAL_GPIO_Init+0x304>)
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040ea:	4b23      	ldr	r3, [pc, #140]	; (8004178 <HAL_GPIO_Init+0x304>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	43db      	mvns	r3, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4013      	ands	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800410e:	4a1a      	ldr	r2, [pc, #104]	; (8004178 <HAL_GPIO_Init+0x304>)
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004114:	4b18      	ldr	r3, [pc, #96]	; (8004178 <HAL_GPIO_Init+0x304>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	43db      	mvns	r3, r3
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	4013      	ands	r3, r2
 8004122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004138:	4a0f      	ldr	r2, [pc, #60]	; (8004178 <HAL_GPIO_Init+0x304>)
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	3301      	adds	r3, #1
 8004142:	61fb      	str	r3, [r7, #28]
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	2b0f      	cmp	r3, #15
 8004148:	f67f aea2 	bls.w	8003e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800414c:	bf00      	nop
 800414e:	bf00      	nop
 8004150:	3724      	adds	r7, #36	; 0x24
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	40023800 	.word	0x40023800
 8004160:	40013800 	.word	0x40013800
 8004164:	40020000 	.word	0x40020000
 8004168:	40020400 	.word	0x40020400
 800416c:	40020800 	.word	0x40020800
 8004170:	40020c00 	.word	0x40020c00
 8004174:	40021000 	.word	0x40021000
 8004178:	40013c00 	.word	0x40013c00

0800417c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	807b      	strh	r3, [r7, #2]
 8004188:	4613      	mov	r3, r2
 800418a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800418c:	787b      	ldrb	r3, [r7, #1]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004192:	887a      	ldrh	r2, [r7, #2]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004198:	e003      	b.n	80041a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800419a:	887b      	ldrh	r3, [r7, #2]
 800419c:	041a      	lsls	r2, r3, #16
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	619a      	str	r2, [r3, #24]
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
	...

080041b0 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80041b6:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <HAL_PWR_EnableBkUpAccess+0x20>)
 80041b8:	2201      	movs	r2, #1
 80041ba:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80041bc:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <HAL_PWR_EnableBkUpAccess+0x24>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80041c2:	687b      	ldr	r3, [r7, #4]
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	420e0020 	.word	0x420e0020
 80041d4:	40007000 	.word	0x40007000

080041d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e267      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d075      	beq.n	80042e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041f6:	4b88      	ldr	r3, [pc, #544]	; (8004418 <HAL_RCC_OscConfig+0x240>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 030c 	and.w	r3, r3, #12
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d00c      	beq.n	800421c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004202:	4b85      	ldr	r3, [pc, #532]	; (8004418 <HAL_RCC_OscConfig+0x240>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800420a:	2b08      	cmp	r3, #8
 800420c:	d112      	bne.n	8004234 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800420e:	4b82      	ldr	r3, [pc, #520]	; (8004418 <HAL_RCC_OscConfig+0x240>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800421a:	d10b      	bne.n	8004234 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800421c:	4b7e      	ldr	r3, [pc, #504]	; (8004418 <HAL_RCC_OscConfig+0x240>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d05b      	beq.n	80042e0 <HAL_RCC_OscConfig+0x108>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d157      	bne.n	80042e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e242      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800423c:	d106      	bne.n	800424c <HAL_RCC_OscConfig+0x74>
 800423e:	4b76      	ldr	r3, [pc, #472]	; (8004418 <HAL_RCC_OscConfig+0x240>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a75      	ldr	r2, [pc, #468]	; (8004418 <HAL_RCC_OscConfig+0x240>)
 8004244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	e01d      	b.n	8004288 <HAL_RCC_OscConfig+0xb0>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004254:	d10c      	bne.n	8004270 <HAL_RCC_OscConfig+0x98>
 8004256:	4b70      	ldr	r3, [pc, #448]	; (8004418 <HAL_RCC_OscConfig+0x240>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a6f      	ldr	r2, [pc, #444]	; (8004418 <HAL_RCC_OscConfig+0x240>)
 800425c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	4b6d      	ldr	r3, [pc, #436]	; (8004418 <HAL_RCC_OscConfig+0x240>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a6c      	ldr	r2, [pc, #432]	; (8004418 <HAL_RCC_OscConfig+0x240>)
 8004268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	e00b      	b.n	8004288 <HAL_RCC_OscConfig+0xb0>
 8004270:	4b69      	ldr	r3, [pc, #420]	; (8004418 <HAL_RCC_OscConfig+0x240>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a68      	ldr	r2, [pc, #416]	; (8004418 <HAL_RCC_OscConfig+0x240>)
 8004276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	4b66      	ldr	r3, [pc, #408]	; (8004418 <HAL_RCC_OscConfig+0x240>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a65      	ldr	r2, [pc, #404]	; (8004418 <HAL_RCC_OscConfig+0x240>)
 8004282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d013      	beq.n	80042b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004290:	f7ff fcae 	bl	8003bf0 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004298:	f7ff fcaa 	bl	8003bf0 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b64      	cmp	r3, #100	; 0x64
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e207      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042aa:	4b5b      	ldr	r3, [pc, #364]	; (8004418 <HAL_RCC_OscConfig+0x240>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0f0      	beq.n	8004298 <HAL_RCC_OscConfig+0xc0>
 80042b6:	e014      	b.n	80042e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b8:	f7ff fc9a 	bl	8003bf0 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042c0:	f7ff fc96 	bl	8003bf0 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b64      	cmp	r3, #100	; 0x64
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e1f3      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042d2:	4b51      	ldr	r3, [pc, #324]	; (8004418 <HAL_RCC_OscConfig+0x240>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1f0      	bne.n	80042c0 <HAL_RCC_OscConfig+0xe8>
 80042de:	e000      	b.n	80042e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d063      	beq.n	80043b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042ee:	4b4a      	ldr	r3, [pc, #296]	; (8004418 <HAL_RCC_OscConfig+0x240>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00b      	beq.n	8004312 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042fa:	4b47      	ldr	r3, [pc, #284]	; (8004418 <HAL_RCC_OscConfig+0x240>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004302:	2b08      	cmp	r3, #8
 8004304:	d11c      	bne.n	8004340 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004306:	4b44      	ldr	r3, [pc, #272]	; (8004418 <HAL_RCC_OscConfig+0x240>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d116      	bne.n	8004340 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004312:	4b41      	ldr	r3, [pc, #260]	; (8004418 <HAL_RCC_OscConfig+0x240>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d005      	beq.n	800432a <HAL_RCC_OscConfig+0x152>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d001      	beq.n	800432a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e1c7      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800432a:	4b3b      	ldr	r3, [pc, #236]	; (8004418 <HAL_RCC_OscConfig+0x240>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	4937      	ldr	r1, [pc, #220]	; (8004418 <HAL_RCC_OscConfig+0x240>)
 800433a:	4313      	orrs	r3, r2
 800433c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800433e:	e03a      	b.n	80043b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d020      	beq.n	800438a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004348:	4b34      	ldr	r3, [pc, #208]	; (800441c <HAL_RCC_OscConfig+0x244>)
 800434a:	2201      	movs	r2, #1
 800434c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434e:	f7ff fc4f 	bl	8003bf0 <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004356:	f7ff fc4b 	bl	8003bf0 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e1a8      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004368:	4b2b      	ldr	r3, [pc, #172]	; (8004418 <HAL_RCC_OscConfig+0x240>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0f0      	beq.n	8004356 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004374:	4b28      	ldr	r3, [pc, #160]	; (8004418 <HAL_RCC_OscConfig+0x240>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	4925      	ldr	r1, [pc, #148]	; (8004418 <HAL_RCC_OscConfig+0x240>)
 8004384:	4313      	orrs	r3, r2
 8004386:	600b      	str	r3, [r1, #0]
 8004388:	e015      	b.n	80043b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800438a:	4b24      	ldr	r3, [pc, #144]	; (800441c <HAL_RCC_OscConfig+0x244>)
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004390:	f7ff fc2e 	bl	8003bf0 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004398:	f7ff fc2a 	bl	8003bf0 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e187      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043aa:	4b1b      	ldr	r3, [pc, #108]	; (8004418 <HAL_RCC_OscConfig+0x240>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d036      	beq.n	8004430 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d016      	beq.n	80043f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ca:	4b15      	ldr	r3, [pc, #84]	; (8004420 <HAL_RCC_OscConfig+0x248>)
 80043cc:	2201      	movs	r2, #1
 80043ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d0:	f7ff fc0e 	bl	8003bf0 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043d8:	f7ff fc0a 	bl	8003bf0 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e167      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ea:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <HAL_RCC_OscConfig+0x240>)
 80043ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0f0      	beq.n	80043d8 <HAL_RCC_OscConfig+0x200>
 80043f6:	e01b      	b.n	8004430 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043f8:	4b09      	ldr	r3, [pc, #36]	; (8004420 <HAL_RCC_OscConfig+0x248>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043fe:	f7ff fbf7 	bl	8003bf0 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004404:	e00e      	b.n	8004424 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004406:	f7ff fbf3 	bl	8003bf0 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d907      	bls.n	8004424 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e150      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
 8004418:	40023800 	.word	0x40023800
 800441c:	42470000 	.word	0x42470000
 8004420:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004424:	4b88      	ldr	r3, [pc, #544]	; (8004648 <HAL_RCC_OscConfig+0x470>)
 8004426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1ea      	bne.n	8004406 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 8097 	beq.w	800456c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800443e:	2300      	movs	r3, #0
 8004440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004442:	4b81      	ldr	r3, [pc, #516]	; (8004648 <HAL_RCC_OscConfig+0x470>)
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10f      	bne.n	800446e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800444e:	2300      	movs	r3, #0
 8004450:	60bb      	str	r3, [r7, #8]
 8004452:	4b7d      	ldr	r3, [pc, #500]	; (8004648 <HAL_RCC_OscConfig+0x470>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	4a7c      	ldr	r2, [pc, #496]	; (8004648 <HAL_RCC_OscConfig+0x470>)
 8004458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800445c:	6413      	str	r3, [r2, #64]	; 0x40
 800445e:	4b7a      	ldr	r3, [pc, #488]	; (8004648 <HAL_RCC_OscConfig+0x470>)
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004466:	60bb      	str	r3, [r7, #8]
 8004468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800446a:	2301      	movs	r3, #1
 800446c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446e:	4b77      	ldr	r3, [pc, #476]	; (800464c <HAL_RCC_OscConfig+0x474>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004476:	2b00      	cmp	r3, #0
 8004478:	d118      	bne.n	80044ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800447a:	4b74      	ldr	r3, [pc, #464]	; (800464c <HAL_RCC_OscConfig+0x474>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a73      	ldr	r2, [pc, #460]	; (800464c <HAL_RCC_OscConfig+0x474>)
 8004480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004486:	f7ff fbb3 	bl	8003bf0 <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800448c:	e008      	b.n	80044a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800448e:	f7ff fbaf 	bl	8003bf0 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e10c      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a0:	4b6a      	ldr	r3, [pc, #424]	; (800464c <HAL_RCC_OscConfig+0x474>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0f0      	beq.n	800448e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d106      	bne.n	80044c2 <HAL_RCC_OscConfig+0x2ea>
 80044b4:	4b64      	ldr	r3, [pc, #400]	; (8004648 <HAL_RCC_OscConfig+0x470>)
 80044b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b8:	4a63      	ldr	r2, [pc, #396]	; (8004648 <HAL_RCC_OscConfig+0x470>)
 80044ba:	f043 0301 	orr.w	r3, r3, #1
 80044be:	6713      	str	r3, [r2, #112]	; 0x70
 80044c0:	e01c      	b.n	80044fc <HAL_RCC_OscConfig+0x324>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	2b05      	cmp	r3, #5
 80044c8:	d10c      	bne.n	80044e4 <HAL_RCC_OscConfig+0x30c>
 80044ca:	4b5f      	ldr	r3, [pc, #380]	; (8004648 <HAL_RCC_OscConfig+0x470>)
 80044cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ce:	4a5e      	ldr	r2, [pc, #376]	; (8004648 <HAL_RCC_OscConfig+0x470>)
 80044d0:	f043 0304 	orr.w	r3, r3, #4
 80044d4:	6713      	str	r3, [r2, #112]	; 0x70
 80044d6:	4b5c      	ldr	r3, [pc, #368]	; (8004648 <HAL_RCC_OscConfig+0x470>)
 80044d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044da:	4a5b      	ldr	r2, [pc, #364]	; (8004648 <HAL_RCC_OscConfig+0x470>)
 80044dc:	f043 0301 	orr.w	r3, r3, #1
 80044e0:	6713      	str	r3, [r2, #112]	; 0x70
 80044e2:	e00b      	b.n	80044fc <HAL_RCC_OscConfig+0x324>
 80044e4:	4b58      	ldr	r3, [pc, #352]	; (8004648 <HAL_RCC_OscConfig+0x470>)
 80044e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e8:	4a57      	ldr	r2, [pc, #348]	; (8004648 <HAL_RCC_OscConfig+0x470>)
 80044ea:	f023 0301 	bic.w	r3, r3, #1
 80044ee:	6713      	str	r3, [r2, #112]	; 0x70
 80044f0:	4b55      	ldr	r3, [pc, #340]	; (8004648 <HAL_RCC_OscConfig+0x470>)
 80044f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f4:	4a54      	ldr	r2, [pc, #336]	; (8004648 <HAL_RCC_OscConfig+0x470>)
 80044f6:	f023 0304 	bic.w	r3, r3, #4
 80044fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d015      	beq.n	8004530 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004504:	f7ff fb74 	bl	8003bf0 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450a:	e00a      	b.n	8004522 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800450c:	f7ff fb70 	bl	8003bf0 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	f241 3288 	movw	r2, #5000	; 0x1388
 800451a:	4293      	cmp	r3, r2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e0cb      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004522:	4b49      	ldr	r3, [pc, #292]	; (8004648 <HAL_RCC_OscConfig+0x470>)
 8004524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0ee      	beq.n	800450c <HAL_RCC_OscConfig+0x334>
 800452e:	e014      	b.n	800455a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004530:	f7ff fb5e 	bl	8003bf0 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004536:	e00a      	b.n	800454e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004538:	f7ff fb5a 	bl	8003bf0 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	f241 3288 	movw	r2, #5000	; 0x1388
 8004546:	4293      	cmp	r3, r2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e0b5      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800454e:	4b3e      	ldr	r3, [pc, #248]	; (8004648 <HAL_RCC_OscConfig+0x470>)
 8004550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1ee      	bne.n	8004538 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800455a:	7dfb      	ldrb	r3, [r7, #23]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d105      	bne.n	800456c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004560:	4b39      	ldr	r3, [pc, #228]	; (8004648 <HAL_RCC_OscConfig+0x470>)
 8004562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004564:	4a38      	ldr	r2, [pc, #224]	; (8004648 <HAL_RCC_OscConfig+0x470>)
 8004566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800456a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 80a1 	beq.w	80046b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004576:	4b34      	ldr	r3, [pc, #208]	; (8004648 <HAL_RCC_OscConfig+0x470>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 030c 	and.w	r3, r3, #12
 800457e:	2b08      	cmp	r3, #8
 8004580:	d05c      	beq.n	800463c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	2b02      	cmp	r3, #2
 8004588:	d141      	bne.n	800460e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800458a:	4b31      	ldr	r3, [pc, #196]	; (8004650 <HAL_RCC_OscConfig+0x478>)
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004590:	f7ff fb2e 	bl	8003bf0 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004598:	f7ff fb2a 	bl	8003bf0 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e087      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045aa:	4b27      	ldr	r3, [pc, #156]	; (8004648 <HAL_RCC_OscConfig+0x470>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1f0      	bne.n	8004598 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69da      	ldr	r2, [r3, #28]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	019b      	lsls	r3, r3, #6
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045cc:	085b      	lsrs	r3, r3, #1
 80045ce:	3b01      	subs	r3, #1
 80045d0:	041b      	lsls	r3, r3, #16
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d8:	061b      	lsls	r3, r3, #24
 80045da:	491b      	ldr	r1, [pc, #108]	; (8004648 <HAL_RCC_OscConfig+0x470>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045e0:	4b1b      	ldr	r3, [pc, #108]	; (8004650 <HAL_RCC_OscConfig+0x478>)
 80045e2:	2201      	movs	r2, #1
 80045e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e6:	f7ff fb03 	bl	8003bf0 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ee:	f7ff faff 	bl	8003bf0 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e05c      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004600:	4b11      	ldr	r3, [pc, #68]	; (8004648 <HAL_RCC_OscConfig+0x470>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0f0      	beq.n	80045ee <HAL_RCC_OscConfig+0x416>
 800460c:	e054      	b.n	80046b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800460e:	4b10      	ldr	r3, [pc, #64]	; (8004650 <HAL_RCC_OscConfig+0x478>)
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004614:	f7ff faec 	bl	8003bf0 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800461c:	f7ff fae8 	bl	8003bf0 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e045      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800462e:	4b06      	ldr	r3, [pc, #24]	; (8004648 <HAL_RCC_OscConfig+0x470>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f0      	bne.n	800461c <HAL_RCC_OscConfig+0x444>
 800463a:	e03d      	b.n	80046b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d107      	bne.n	8004654 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e038      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
 8004648:	40023800 	.word	0x40023800
 800464c:	40007000 	.word	0x40007000
 8004650:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004654:	4b1b      	ldr	r3, [pc, #108]	; (80046c4 <HAL_RCC_OscConfig+0x4ec>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d028      	beq.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800466c:	429a      	cmp	r2, r3
 800466e:	d121      	bne.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800467a:	429a      	cmp	r2, r3
 800467c:	d11a      	bne.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004684:	4013      	ands	r3, r2
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800468a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800468c:	4293      	cmp	r3, r2
 800468e:	d111      	bne.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469a:	085b      	lsrs	r3, r3, #1
 800469c:	3b01      	subs	r3, #1
 800469e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d107      	bne.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d001      	beq.n	80046b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e000      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40023800 	.word	0x40023800

080046c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e0cc      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046dc:	4b68      	ldr	r3, [pc, #416]	; (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d90c      	bls.n	8004704 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ea:	4b65      	ldr	r3, [pc, #404]	; (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f2:	4b63      	ldr	r3, [pc, #396]	; (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d001      	beq.n	8004704 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e0b8      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d020      	beq.n	8004752 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800471c:	4b59      	ldr	r3, [pc, #356]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	4a58      	ldr	r2, [pc, #352]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004726:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004734:	4b53      	ldr	r3, [pc, #332]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	4a52      	ldr	r2, [pc, #328]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800473a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800473e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004740:	4b50      	ldr	r3, [pc, #320]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	494d      	ldr	r1, [pc, #308]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	4313      	orrs	r3, r2
 8004750:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d044      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d107      	bne.n	8004776 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004766:	4b47      	ldr	r3, [pc, #284]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d119      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e07f      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b02      	cmp	r3, #2
 800477c:	d003      	beq.n	8004786 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004782:	2b03      	cmp	r3, #3
 8004784:	d107      	bne.n	8004796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004786:	4b3f      	ldr	r3, [pc, #252]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d109      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e06f      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004796:	4b3b      	ldr	r3, [pc, #236]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e067      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047a6:	4b37      	ldr	r3, [pc, #220]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f023 0203 	bic.w	r2, r3, #3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	4934      	ldr	r1, [pc, #208]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047b8:	f7ff fa1a 	bl	8003bf0 <HAL_GetTick>
 80047bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047be:	e00a      	b.n	80047d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047c0:	f7ff fa16 	bl	8003bf0 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e04f      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d6:	4b2b      	ldr	r3, [pc, #172]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 020c 	and.w	r2, r3, #12
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d1eb      	bne.n	80047c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047e8:	4b25      	ldr	r3, [pc, #148]	; (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d20c      	bcs.n	8004810 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047f6:	4b22      	ldr	r3, [pc, #136]	; (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047fe:	4b20      	ldr	r3, [pc, #128]	; (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d001      	beq.n	8004810 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e032      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d008      	beq.n	800482e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800481c:	4b19      	ldr	r3, [pc, #100]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	4916      	ldr	r1, [pc, #88]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	4313      	orrs	r3, r2
 800482c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b00      	cmp	r3, #0
 8004838:	d009      	beq.n	800484e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800483a:	4b12      	ldr	r3, [pc, #72]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	490e      	ldr	r1, [pc, #56]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800484a:	4313      	orrs	r3, r2
 800484c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800484e:	f000 f821 	bl	8004894 <HAL_RCC_GetSysClockFreq>
 8004852:	4602      	mov	r2, r0
 8004854:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	091b      	lsrs	r3, r3, #4
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	490a      	ldr	r1, [pc, #40]	; (8004888 <HAL_RCC_ClockConfig+0x1c0>)
 8004860:	5ccb      	ldrb	r3, [r1, r3]
 8004862:	fa22 f303 	lsr.w	r3, r2, r3
 8004866:	4a09      	ldr	r2, [pc, #36]	; (800488c <HAL_RCC_ClockConfig+0x1c4>)
 8004868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800486a:	4b09      	ldr	r3, [pc, #36]	; (8004890 <HAL_RCC_ClockConfig+0x1c8>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff f97a 	bl	8003b68 <HAL_InitTick>

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	40023c00 	.word	0x40023c00
 8004884:	40023800 	.word	0x40023800
 8004888:	08013d08 	.word	0x08013d08
 800488c:	2000005c 	.word	0x2000005c
 8004890:	20000060 	.word	0x20000060

08004894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004898:	b090      	sub	sp, #64	; 0x40
 800489a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	637b      	str	r3, [r7, #52]	; 0x34
 80048a0:	2300      	movs	r3, #0
 80048a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048a4:	2300      	movs	r3, #0
 80048a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048ac:	4b59      	ldr	r3, [pc, #356]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f003 030c 	and.w	r3, r3, #12
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d00d      	beq.n	80048d4 <HAL_RCC_GetSysClockFreq+0x40>
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	f200 80a1 	bhi.w	8004a00 <HAL_RCC_GetSysClockFreq+0x16c>
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <HAL_RCC_GetSysClockFreq+0x34>
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d003      	beq.n	80048ce <HAL_RCC_GetSysClockFreq+0x3a>
 80048c6:	e09b      	b.n	8004a00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048c8:	4b53      	ldr	r3, [pc, #332]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x184>)
 80048ca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80048cc:	e09b      	b.n	8004a06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048ce:	4b53      	ldr	r3, [pc, #332]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x188>)
 80048d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80048d2:	e098      	b.n	8004a06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048d4:	4b4f      	ldr	r3, [pc, #316]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048de:	4b4d      	ldr	r3, [pc, #308]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d028      	beq.n	800493c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ea:	4b4a      	ldr	r3, [pc, #296]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	099b      	lsrs	r3, r3, #6
 80048f0:	2200      	movs	r2, #0
 80048f2:	623b      	str	r3, [r7, #32]
 80048f4:	627a      	str	r2, [r7, #36]	; 0x24
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80048fc:	2100      	movs	r1, #0
 80048fe:	4b47      	ldr	r3, [pc, #284]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x188>)
 8004900:	fb03 f201 	mul.w	r2, r3, r1
 8004904:	2300      	movs	r3, #0
 8004906:	fb00 f303 	mul.w	r3, r0, r3
 800490a:	4413      	add	r3, r2
 800490c:	4a43      	ldr	r2, [pc, #268]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x188>)
 800490e:	fba0 1202 	umull	r1, r2, r0, r2
 8004912:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004914:	460a      	mov	r2, r1
 8004916:	62ba      	str	r2, [r7, #40]	; 0x28
 8004918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800491a:	4413      	add	r3, r2
 800491c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800491e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004920:	2200      	movs	r2, #0
 8004922:	61bb      	str	r3, [r7, #24]
 8004924:	61fa      	str	r2, [r7, #28]
 8004926:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800492a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800492e:	f7fc f9b3 	bl	8000c98 <__aeabi_uldivmod>
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	4613      	mov	r3, r2
 8004938:	63fb      	str	r3, [r7, #60]	; 0x3c
 800493a:	e053      	b.n	80049e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800493c:	4b35      	ldr	r3, [pc, #212]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x180>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	099b      	lsrs	r3, r3, #6
 8004942:	2200      	movs	r2, #0
 8004944:	613b      	str	r3, [r7, #16]
 8004946:	617a      	str	r2, [r7, #20]
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800494e:	f04f 0b00 	mov.w	fp, #0
 8004952:	4652      	mov	r2, sl
 8004954:	465b      	mov	r3, fp
 8004956:	f04f 0000 	mov.w	r0, #0
 800495a:	f04f 0100 	mov.w	r1, #0
 800495e:	0159      	lsls	r1, r3, #5
 8004960:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004964:	0150      	lsls	r0, r2, #5
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	ebb2 080a 	subs.w	r8, r2, sl
 800496e:	eb63 090b 	sbc.w	r9, r3, fp
 8004972:	f04f 0200 	mov.w	r2, #0
 8004976:	f04f 0300 	mov.w	r3, #0
 800497a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800497e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004982:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004986:	ebb2 0408 	subs.w	r4, r2, r8
 800498a:	eb63 0509 	sbc.w	r5, r3, r9
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	f04f 0300 	mov.w	r3, #0
 8004996:	00eb      	lsls	r3, r5, #3
 8004998:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800499c:	00e2      	lsls	r2, r4, #3
 800499e:	4614      	mov	r4, r2
 80049a0:	461d      	mov	r5, r3
 80049a2:	eb14 030a 	adds.w	r3, r4, sl
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	eb45 030b 	adc.w	r3, r5, fp
 80049ac:	607b      	str	r3, [r7, #4]
 80049ae:	f04f 0200 	mov.w	r2, #0
 80049b2:	f04f 0300 	mov.w	r3, #0
 80049b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049ba:	4629      	mov	r1, r5
 80049bc:	028b      	lsls	r3, r1, #10
 80049be:	4621      	mov	r1, r4
 80049c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049c4:	4621      	mov	r1, r4
 80049c6:	028a      	lsls	r2, r1, #10
 80049c8:	4610      	mov	r0, r2
 80049ca:	4619      	mov	r1, r3
 80049cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ce:	2200      	movs	r2, #0
 80049d0:	60bb      	str	r3, [r7, #8]
 80049d2:	60fa      	str	r2, [r7, #12]
 80049d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049d8:	f7fc f95e 	bl	8000c98 <__aeabi_uldivmod>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	4613      	mov	r3, r2
 80049e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049e4:	4b0b      	ldr	r3, [pc, #44]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	0c1b      	lsrs	r3, r3, #16
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	3301      	adds	r3, #1
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80049f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80049fe:	e002      	b.n	8004a06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a00:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a02:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3740      	adds	r7, #64	; 0x40
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a12:	bf00      	nop
 8004a14:	40023800 	.word	0x40023800
 8004a18:	00f42400 	.word	0x00f42400
 8004a1c:	017d7840 	.word	0x017d7840

08004a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a24:	4b03      	ldr	r3, [pc, #12]	; (8004a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a26:	681b      	ldr	r3, [r3, #0]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	2000005c 	.word	0x2000005c

08004a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a3c:	f7ff fff0 	bl	8004a20 <HAL_RCC_GetHCLKFreq>
 8004a40:	4602      	mov	r2, r0
 8004a42:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	0a9b      	lsrs	r3, r3, #10
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	4903      	ldr	r1, [pc, #12]	; (8004a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a4e:	5ccb      	ldrb	r3, [r1, r3]
 8004a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	40023800 	.word	0x40023800
 8004a5c:	08013d18 	.word	0x08013d18

08004a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a64:	f7ff ffdc 	bl	8004a20 <HAL_RCC_GetHCLKFreq>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	0b5b      	lsrs	r3, r3, #13
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	4903      	ldr	r1, [pc, #12]	; (8004a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a76:	5ccb      	ldrb	r3, [r1, r3]
 8004a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40023800 	.word	0x40023800
 8004a84:	08013d18 	.word	0x08013d18

08004a88 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d105      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d035      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ab0:	4b67      	ldr	r3, [pc, #412]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ab6:	f7ff f89b 	bl	8003bf0 <HAL_GetTick>
 8004aba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004abc:	e008      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004abe:	f7ff f897 	bl	8003bf0 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e0ba      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ad0:	4b60      	ldr	r3, [pc, #384]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1f0      	bne.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	019a      	lsls	r2, r3, #6
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	071b      	lsls	r3, r3, #28
 8004ae8:	495a      	ldr	r1, [pc, #360]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004af0:	4b57      	ldr	r3, [pc, #348]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004af2:	2201      	movs	r2, #1
 8004af4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004af6:	f7ff f87b 	bl	8003bf0 <HAL_GetTick>
 8004afa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004afc:	e008      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004afe:	f7ff f877 	bl	8003bf0 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e09a      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b10:	4b50      	ldr	r3, [pc, #320]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0f0      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 8083 	beq.w	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	4b49      	ldr	r3, [pc, #292]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	4a48      	ldr	r2, [pc, #288]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b38:	6413      	str	r3, [r2, #64]	; 0x40
 8004b3a:	4b46      	ldr	r3, [pc, #280]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b46:	4b44      	ldr	r3, [pc, #272]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a43      	ldr	r2, [pc, #268]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b50:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b52:	f7ff f84d 	bl	8003bf0 <HAL_GetTick>
 8004b56:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b58:	e008      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b5a:	f7ff f849 	bl	8003bf0 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e06c      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b6c:	4b3a      	ldr	r3, [pc, #232]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0f0      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b78:	4b36      	ldr	r3, [pc, #216]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b80:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d02f      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d028      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b96:	4b2f      	ldr	r3, [pc, #188]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b9e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ba0:	4b2e      	ldr	r3, [pc, #184]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ba6:	4b2d      	ldr	r3, [pc, #180]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004bac:	4a29      	ldr	r2, [pc, #164]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004bb2:	4b28      	ldr	r3, [pc, #160]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d114      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004bbe:	f7ff f817 	bl	8003bf0 <HAL_GetTick>
 8004bc2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc4:	e00a      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bc6:	f7ff f813 	bl	8003bf0 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e034      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bdc:	4b1d      	ldr	r3, [pc, #116]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0ee      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bf4:	d10d      	bne.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004bf6:	4b17      	ldr	r3, [pc, #92]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c0a:	4912      	ldr	r1, [pc, #72]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	608b      	str	r3, [r1, #8]
 8004c10:	e005      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004c12:	4b10      	ldr	r3, [pc, #64]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	4a0f      	ldr	r2, [pc, #60]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c18:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004c1c:	6093      	str	r3, [r2, #8]
 8004c1e:	4b0d      	ldr	r3, [pc, #52]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c2a:	490a      	ldr	r1, [pc, #40]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0308 	and.w	r3, r3, #8
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	7c1a      	ldrb	r2, [r3, #16]
 8004c40:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c42:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	42470068 	.word	0x42470068
 8004c54:	40023800 	.word	0x40023800
 8004c58:	40007000 	.word	0x40007000
 8004c5c:	42470e40 	.word	0x42470e40
 8004c60:	424711e0 	.word	0x424711e0

08004c64 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e066      	b.n	8004d48 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	7f5b      	ldrb	r3, [r3, #29]
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d105      	bne.n	8004c90 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7fe fb7c 	bl	8003388 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2202      	movs	r2, #2
 8004c94:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	22ca      	movs	r2, #202	; 0xca
 8004c9c:	625a      	str	r2, [r3, #36]	; 0x24
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2253      	movs	r2, #83	; 0x53
 8004ca4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fa45 	bl	8005136 <RTC_EnterInitMode>
 8004cac:	4603      	mov	r3, r0
 8004cae:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d12c      	bne.n	8004d10 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6812      	ldr	r2, [r2, #0]
 8004cc0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004cc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cc8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6899      	ldr	r1, [r3, #8]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	68d2      	ldr	r2, [r2, #12]
 8004cf0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6919      	ldr	r1, [r3, #16]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	041a      	lsls	r2, r3, #16
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fa4c 	bl	80051a4 <RTC_ExitInitMode>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d113      	bne.n	8004d3e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d24:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	699a      	ldr	r2, [r3, #24]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	22ff      	movs	r2, #255	; 0xff
 8004d44:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004d50:	b590      	push	{r4, r7, lr}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	7f1b      	ldrb	r3, [r3, #28]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d101      	bne.n	8004d6c <HAL_RTC_SetTime+0x1c>
 8004d68:	2302      	movs	r3, #2
 8004d6a:	e087      	b.n	8004e7c <HAL_RTC_SetTime+0x12c>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2202      	movs	r2, #2
 8004d76:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d126      	bne.n	8004dcc <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d102      	bne.n	8004d92 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 fa29 	bl	80051ee <RTC_ByteToBcd2>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	785b      	ldrb	r3, [r3, #1]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 fa22 	bl	80051ee <RTC_ByteToBcd2>
 8004daa:	4603      	mov	r3, r0
 8004dac:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004dae:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	789b      	ldrb	r3, [r3, #2]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 fa1a 	bl	80051ee <RTC_ByteToBcd2>
 8004dba:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004dbc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	78db      	ldrb	r3, [r3, #3]
 8004dc4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]
 8004dca:	e018      	b.n	8004dfe <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d102      	bne.n	8004de0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	785b      	ldrb	r3, [r3, #1]
 8004dea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004dec:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004df2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	78db      	ldrb	r3, [r3, #3]
 8004df8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	22ca      	movs	r2, #202	; 0xca
 8004e04:	625a      	str	r2, [r3, #36]	; 0x24
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2253      	movs	r2, #83	; 0x53
 8004e0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 f991 	bl	8005136 <RTC_EnterInitMode>
 8004e14:	4603      	mov	r3, r0
 8004e16:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004e18:	7cfb      	ldrb	r3, [r7, #19]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d120      	bne.n	8004e60 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004e28:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004e2c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e3c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6899      	ldr	r1, [r3, #8]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 f9a4 	bl	80051a4 <RTC_ExitInitMode>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004e60:	7cfb      	ldrb	r3, [r7, #19]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d102      	bne.n	8004e6c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	22ff      	movs	r2, #255	; 0xff
 8004e72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	771a      	strb	r2, [r3, #28]

  return status;
 8004e7a:	7cfb      	ldrb	r3, [r7, #19]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	371c      	adds	r7, #28
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd90      	pop	{r4, r7, pc}

08004e84 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004eb6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004eba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	0c1b      	lsrs	r3, r3, #16
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ec6:	b2da      	uxtb	r2, r3
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	0a1b      	lsrs	r3, r3, #8
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	0d9b      	lsrs	r3, r3, #22
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d11a      	bne.n	8004f36 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 f98f 	bl	8005228 <RTC_Bcd2ToByte>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	785b      	ldrb	r3, [r3, #1]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 f986 	bl	8005228 <RTC_Bcd2ToByte>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	461a      	mov	r2, r3
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	789b      	ldrb	r3, [r3, #2]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 f97d 	bl	8005228 <RTC_Bcd2ToByte>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	461a      	mov	r2, r3
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3718      	adds	r7, #24
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f40:	b590      	push	{r4, r7, lr}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	7f1b      	ldrb	r3, [r3, #28]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <HAL_RTC_SetDate+0x1c>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	e071      	b.n	8005040 <HAL_RTC_SetDate+0x100>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2202      	movs	r2, #2
 8004f66:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10e      	bne.n	8004f8c <HAL_RTC_SetDate+0x4c>
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	785b      	ldrb	r3, [r3, #1]
 8004f72:	f003 0310 	and.w	r3, r3, #16
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d008      	beq.n	8004f8c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	785b      	ldrb	r3, [r3, #1]
 8004f7e:	f023 0310 	bic.w	r3, r3, #16
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	330a      	adds	r3, #10
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d11c      	bne.n	8004fcc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	78db      	ldrb	r3, [r3, #3]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 f929 	bl	80051ee <RTC_ByteToBcd2>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	785b      	ldrb	r3, [r3, #1]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f000 f922 	bl	80051ee <RTC_ByteToBcd2>
 8004faa:	4603      	mov	r3, r0
 8004fac:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004fae:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	789b      	ldrb	r3, [r3, #2]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f000 f91a 	bl	80051ee <RTC_ByteToBcd2>
 8004fba:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004fbc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	617b      	str	r3, [r7, #20]
 8004fca:	e00e      	b.n	8004fea <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	78db      	ldrb	r3, [r3, #3]
 8004fd0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	785b      	ldrb	r3, [r3, #1]
 8004fd6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004fd8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004fde:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	22ca      	movs	r2, #202	; 0xca
 8004ff0:	625a      	str	r2, [r3, #36]	; 0x24
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2253      	movs	r2, #83	; 0x53
 8004ff8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 f89b 	bl	8005136 <RTC_EnterInitMode>
 8005000:	4603      	mov	r3, r0
 8005002:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005004:	7cfb      	ldrb	r3, [r7, #19]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10c      	bne.n	8005024 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005014:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005018:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f000 f8c2 	bl	80051a4 <RTC_ExitInitMode>
 8005020:	4603      	mov	r3, r0
 8005022:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005024:	7cfb      	ldrb	r3, [r7, #19]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d102      	bne.n	8005030 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2201      	movs	r2, #1
 800502e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	22ff      	movs	r2, #255	; 0xff
 8005036:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	771a      	strb	r2, [r3, #28]

  return status;
 800503e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005040:	4618      	mov	r0, r3
 8005042:	371c      	adds	r7, #28
 8005044:	46bd      	mov	sp, r7
 8005046:	bd90      	pop	{r4, r7, pc}

08005048 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005062:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005066:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	0c1b      	lsrs	r3, r3, #16
 800506c:	b2da      	uxtb	r2, r3
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	0a1b      	lsrs	r3, r3, #8
 8005076:	b2db      	uxtb	r3, r3
 8005078:	f003 031f 	and.w	r3, r3, #31
 800507c:	b2da      	uxtb	r2, r3
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	b2db      	uxtb	r3, r3
 8005086:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800508a:	b2da      	uxtb	r2, r3
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	0b5b      	lsrs	r3, r3, #13
 8005094:	b2db      	uxtb	r3, r3
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	b2da      	uxtb	r2, r3
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d11a      	bne.n	80050dc <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	78db      	ldrb	r3, [r3, #3]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 f8bc 	bl	8005228 <RTC_Bcd2ToByte>
 80050b0:	4603      	mov	r3, r0
 80050b2:	461a      	mov	r2, r3
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	785b      	ldrb	r3, [r3, #1]
 80050bc:	4618      	mov	r0, r3
 80050be:	f000 f8b3 	bl	8005228 <RTC_Bcd2ToByte>
 80050c2:	4603      	mov	r3, r0
 80050c4:	461a      	mov	r2, r3
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	789b      	ldrb	r3, [r3, #2]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 f8aa 	bl	8005228 <RTC_Bcd2ToByte>
 80050d4:	4603      	mov	r3, r0
 80050d6:	461a      	mov	r2, r3
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b084      	sub	sp, #16
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005100:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005102:	f7fe fd75 	bl	8003bf0 <HAL_GetTick>
 8005106:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005108:	e009      	b.n	800511e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800510a:	f7fe fd71 	bl	8003bf0 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005118:	d901      	bls.n	800511e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e007      	b.n	800512e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f003 0320 	and.w	r3, r3, #32
 8005128:	2b00      	cmp	r3, #0
 800512a:	d0ee      	beq.n	800510a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b084      	sub	sp, #16
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005150:	2b00      	cmp	r3, #0
 8005152:	d122      	bne.n	800519a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005162:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005164:	f7fe fd44 	bl	8003bf0 <HAL_GetTick>
 8005168:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800516a:	e00c      	b.n	8005186 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800516c:	f7fe fd40 	bl	8003bf0 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800517a:	d904      	bls.n	8005186 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2204      	movs	r2, #4
 8005180:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005190:	2b00      	cmp	r3, #0
 8005192:	d102      	bne.n	800519a <RTC_EnterInitMode+0x64>
 8005194:	7bfb      	ldrb	r3, [r7, #15]
 8005196:	2b01      	cmp	r3, #1
 8005198:	d1e8      	bne.n	800516c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800519a:	7bfb      	ldrb	r3, [r7, #15]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051ac:	2300      	movs	r3, #0
 80051ae:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051be:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f003 0320 	and.w	r3, r3, #32
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10a      	bne.n	80051e4 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7ff ff89 	bl	80050e6 <HAL_RTC_WaitForSynchro>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d004      	beq.n	80051e4 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2204      	movs	r2, #4
 80051de:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80051e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b085      	sub	sp, #20
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	4603      	mov	r3, r0
 80051f6:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80051fc:	e005      	b.n	800520a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80051fe:	7bfb      	ldrb	r3, [r7, #15]
 8005200:	3301      	adds	r3, #1
 8005202:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005204:	79fb      	ldrb	r3, [r7, #7]
 8005206:	3b0a      	subs	r3, #10
 8005208:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800520a:	79fb      	ldrb	r3, [r7, #7]
 800520c:	2b09      	cmp	r3, #9
 800520e:	d8f6      	bhi.n	80051fe <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005210:	7bfb      	ldrb	r3, [r7, #15]
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	b2da      	uxtb	r2, r3
 8005216:	79fb      	ldrb	r3, [r7, #7]
 8005218:	4313      	orrs	r3, r2
 800521a:	b2db      	uxtb	r3, r3
}
 800521c:	4618      	mov	r0, r3
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	4603      	mov	r3, r0
 8005230:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005236:	79fb      	ldrb	r3, [r7, #7]
 8005238:	091b      	lsrs	r3, r3, #4
 800523a:	b2db      	uxtb	r3, r3
 800523c:	461a      	mov	r2, r3
 800523e:	0092      	lsls	r2, r2, #2
 8005240:	4413      	add	r3, r2
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005246:	79fb      	ldrb	r3, [r7, #7]
 8005248:	f003 030f 	and.w	r3, r3, #15
 800524c:	b2da      	uxtb	r2, r3
 800524e:	7bfb      	ldrb	r3, [r7, #15]
 8005250:	4413      	add	r3, r2
 8005252:	b2db      	uxtb	r3, r3
}
 8005254:	4618      	mov	r0, r3
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3350      	adds	r3, #80	; 0x50
 8005276:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	4413      	add	r3, r2
 8005280:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	601a      	str	r2, [r3, #0]
}
 8005288:	bf00      	nop
 800528a:	371c      	adds	r7, #28
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3350      	adds	r3, #80	; 0x50
 80052a8:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4413      	add	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e07b      	b.n	80053ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d108      	bne.n	80052f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052e6:	d009      	beq.n	80052fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	61da      	str	r2, [r3, #28]
 80052ee:	e005      	b.n	80052fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d106      	bne.n	800531c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7fe f8ce 	bl	80034b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005332:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005344:	431a      	orrs	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800534e:	431a      	orrs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	431a      	orrs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	431a      	orrs	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800536c:	431a      	orrs	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005376:	431a      	orrs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005380:	ea42 0103 	orr.w	r1, r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005388:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	0c1b      	lsrs	r3, r3, #16
 800539a:	f003 0104 	and.w	r1, r3, #4
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	f003 0210 	and.w	r2, r3, #16
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	69da      	ldr	r2, [r3, #28]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b088      	sub	sp, #32
 80053da:	af00      	add	r7, sp, #0
 80053dc:	60f8      	str	r0, [r7, #12]
 80053de:	60b9      	str	r1, [r7, #8]
 80053e0:	603b      	str	r3, [r7, #0]
 80053e2:	4613      	mov	r3, r2
 80053e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d101      	bne.n	80053f8 <HAL_SPI_Transmit+0x22>
 80053f4:	2302      	movs	r3, #2
 80053f6:	e126      	b.n	8005646 <HAL_SPI_Transmit+0x270>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005400:	f7fe fbf6 	bl	8003bf0 <HAL_GetTick>
 8005404:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005406:	88fb      	ldrh	r3, [r7, #6]
 8005408:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b01      	cmp	r3, #1
 8005414:	d002      	beq.n	800541c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005416:	2302      	movs	r3, #2
 8005418:	77fb      	strb	r3, [r7, #31]
    goto error;
 800541a:	e10b      	b.n	8005634 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d002      	beq.n	8005428 <HAL_SPI_Transmit+0x52>
 8005422:	88fb      	ldrh	r3, [r7, #6]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d102      	bne.n	800542e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800542c:	e102      	b.n	8005634 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2203      	movs	r2, #3
 8005432:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	88fa      	ldrh	r2, [r7, #6]
 8005446:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	88fa      	ldrh	r2, [r7, #6]
 800544c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005474:	d10f      	bne.n	8005496 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005484:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005494:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a0:	2b40      	cmp	r3, #64	; 0x40
 80054a2:	d007      	beq.n	80054b4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054bc:	d14b      	bne.n	8005556 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d002      	beq.n	80054cc <HAL_SPI_Transmit+0xf6>
 80054c6:	8afb      	ldrh	r3, [r7, #22]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d13e      	bne.n	800554a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d0:	881a      	ldrh	r2, [r3, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054dc:	1c9a      	adds	r2, r3, #2
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	3b01      	subs	r3, #1
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80054f0:	e02b      	b.n	800554a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d112      	bne.n	8005526 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005504:	881a      	ldrh	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005510:	1c9a      	adds	r2, r3, #2
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800551a:	b29b      	uxth	r3, r3
 800551c:	3b01      	subs	r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	86da      	strh	r2, [r3, #54]	; 0x36
 8005524:	e011      	b.n	800554a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005526:	f7fe fb63 	bl	8003bf0 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	429a      	cmp	r2, r3
 8005534:	d803      	bhi.n	800553e <HAL_SPI_Transmit+0x168>
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553c:	d102      	bne.n	8005544 <HAL_SPI_Transmit+0x16e>
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d102      	bne.n	800554a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005548:	e074      	b.n	8005634 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800554e:	b29b      	uxth	r3, r3
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1ce      	bne.n	80054f2 <HAL_SPI_Transmit+0x11c>
 8005554:	e04c      	b.n	80055f0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d002      	beq.n	8005564 <HAL_SPI_Transmit+0x18e>
 800555e:	8afb      	ldrh	r3, [r7, #22]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d140      	bne.n	80055e6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	330c      	adds	r3, #12
 800556e:	7812      	ldrb	r2, [r2, #0]
 8005570:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005576:	1c5a      	adds	r2, r3, #1
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005580:	b29b      	uxth	r3, r3
 8005582:	3b01      	subs	r3, #1
 8005584:	b29a      	uxth	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800558a:	e02c      	b.n	80055e6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b02      	cmp	r3, #2
 8005598:	d113      	bne.n	80055c2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	330c      	adds	r3, #12
 80055a4:	7812      	ldrb	r2, [r2, #0]
 80055a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	86da      	strh	r2, [r3, #54]	; 0x36
 80055c0:	e011      	b.n	80055e6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055c2:	f7fe fb15 	bl	8003bf0 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d803      	bhi.n	80055da <HAL_SPI_Transmit+0x204>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d8:	d102      	bne.n	80055e0 <HAL_SPI_Transmit+0x20a>
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d102      	bne.n	80055e6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80055e4:	e026      	b.n	8005634 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1cd      	bne.n	800558c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	6839      	ldr	r1, [r7, #0]
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f000 fbcb 	bl	8005d90 <SPI_EndRxTxTransaction>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2220      	movs	r2, #32
 8005604:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10a      	bne.n	8005624 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800560e:	2300      	movs	r3, #0
 8005610:	613b      	str	r3, [r7, #16]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	613b      	str	r3, [r7, #16]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	77fb      	strb	r3, [r7, #31]
 8005630:	e000      	b.n	8005634 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005632:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005644:	7ffb      	ldrb	r3, [r7, #31]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3720      	adds	r7, #32
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b088      	sub	sp, #32
 8005652:	af02      	add	r7, sp, #8
 8005654:	60f8      	str	r0, [r7, #12]
 8005656:	60b9      	str	r1, [r7, #8]
 8005658:	603b      	str	r3, [r7, #0]
 800565a:	4613      	mov	r3, r2
 800565c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800565e:	2300      	movs	r3, #0
 8005660:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800566a:	d112      	bne.n	8005692 <HAL_SPI_Receive+0x44>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10e      	bne.n	8005692 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2204      	movs	r2, #4
 8005678:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800567c:	88fa      	ldrh	r2, [r7, #6]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	4613      	mov	r3, r2
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	68b9      	ldr	r1, [r7, #8]
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 f8f1 	bl	8005870 <HAL_SPI_TransmitReceive>
 800568e:	4603      	mov	r3, r0
 8005690:	e0ea      	b.n	8005868 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005698:	2b01      	cmp	r3, #1
 800569a:	d101      	bne.n	80056a0 <HAL_SPI_Receive+0x52>
 800569c:	2302      	movs	r3, #2
 800569e:	e0e3      	b.n	8005868 <HAL_SPI_Receive+0x21a>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056a8:	f7fe faa2 	bl	8003bf0 <HAL_GetTick>
 80056ac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d002      	beq.n	80056c0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80056ba:	2302      	movs	r3, #2
 80056bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056be:	e0ca      	b.n	8005856 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <HAL_SPI_Receive+0x7e>
 80056c6:	88fb      	ldrh	r3, [r7, #6]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d102      	bne.n	80056d2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056d0:	e0c1      	b.n	8005856 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2204      	movs	r2, #4
 80056d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	88fa      	ldrh	r2, [r7, #6]
 80056ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	88fa      	ldrh	r2, [r7, #6]
 80056f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005718:	d10f      	bne.n	800573a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005728:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005738:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005744:	2b40      	cmp	r3, #64	; 0x40
 8005746:	d007      	beq.n	8005758 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005756:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d162      	bne.n	8005826 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005760:	e02e      	b.n	80057c0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b01      	cmp	r3, #1
 800576e:	d115      	bne.n	800579c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f103 020c 	add.w	r2, r3, #12
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	7812      	ldrb	r2, [r2, #0]
 800577e:	b2d2      	uxtb	r2, r2
 8005780:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005790:	b29b      	uxth	r3, r3
 8005792:	3b01      	subs	r3, #1
 8005794:	b29a      	uxth	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	87da      	strh	r2, [r3, #62]	; 0x3e
 800579a:	e011      	b.n	80057c0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800579c:	f7fe fa28 	bl	8003bf0 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d803      	bhi.n	80057b4 <HAL_SPI_Receive+0x166>
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b2:	d102      	bne.n	80057ba <HAL_SPI_Receive+0x16c>
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d102      	bne.n	80057c0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80057be:	e04a      	b.n	8005856 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1cb      	bne.n	8005762 <HAL_SPI_Receive+0x114>
 80057ca:	e031      	b.n	8005830 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d113      	bne.n	8005802 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68da      	ldr	r2, [r3, #12]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e4:	b292      	uxth	r2, r2
 80057e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ec:	1c9a      	adds	r2, r3, #2
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	3b01      	subs	r3, #1
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005800:	e011      	b.n	8005826 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005802:	f7fe f9f5 	bl	8003bf0 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	429a      	cmp	r2, r3
 8005810:	d803      	bhi.n	800581a <HAL_SPI_Receive+0x1cc>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005818:	d102      	bne.n	8005820 <HAL_SPI_Receive+0x1d2>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d102      	bne.n	8005826 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005824:	e017      	b.n	8005856 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800582a:	b29b      	uxth	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1cd      	bne.n	80057cc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	6839      	ldr	r1, [r7, #0]
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 fa45 	bl	8005cc4 <SPI_EndRxTransaction>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d002      	beq.n	8005846 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2220      	movs	r2, #32
 8005844:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584a:	2b00      	cmp	r3, #0
 800584c:	d002      	beq.n	8005854 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	75fb      	strb	r3, [r7, #23]
 8005852:	e000      	b.n	8005856 <HAL_SPI_Receive+0x208>
  }

error :
 8005854:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005866:	7dfb      	ldrb	r3, [r7, #23]
}
 8005868:	4618      	mov	r0, r3
 800586a:	3718      	adds	r7, #24
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b08c      	sub	sp, #48	; 0x30
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
 800587c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800587e:	2301      	movs	r3, #1
 8005880:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800588e:	2b01      	cmp	r3, #1
 8005890:	d101      	bne.n	8005896 <HAL_SPI_TransmitReceive+0x26>
 8005892:	2302      	movs	r3, #2
 8005894:	e18a      	b.n	8005bac <HAL_SPI_TransmitReceive+0x33c>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800589e:	f7fe f9a7 	bl	8003bf0 <HAL_GetTick>
 80058a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80058b4:	887b      	ldrh	r3, [r7, #2]
 80058b6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80058b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d00f      	beq.n	80058e0 <HAL_SPI_TransmitReceive+0x70>
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058c6:	d107      	bne.n	80058d8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d103      	bne.n	80058d8 <HAL_SPI_TransmitReceive+0x68>
 80058d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058d4:	2b04      	cmp	r3, #4
 80058d6:	d003      	beq.n	80058e0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80058d8:	2302      	movs	r3, #2
 80058da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80058de:	e15b      	b.n	8005b98 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d005      	beq.n	80058f2 <HAL_SPI_TransmitReceive+0x82>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d002      	beq.n	80058f2 <HAL_SPI_TransmitReceive+0x82>
 80058ec:	887b      	ldrh	r3, [r7, #2]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d103      	bne.n	80058fa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80058f8:	e14e      	b.n	8005b98 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b04      	cmp	r3, #4
 8005904:	d003      	beq.n	800590e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2205      	movs	r2, #5
 800590a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	887a      	ldrh	r2, [r7, #2]
 800591e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	887a      	ldrh	r2, [r7, #2]
 8005924:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	887a      	ldrh	r2, [r7, #2]
 8005930:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	887a      	ldrh	r2, [r7, #2]
 8005936:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594e:	2b40      	cmp	r3, #64	; 0x40
 8005950:	d007      	beq.n	8005962 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005960:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800596a:	d178      	bne.n	8005a5e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d002      	beq.n	800597a <HAL_SPI_TransmitReceive+0x10a>
 8005974:	8b7b      	ldrh	r3, [r7, #26]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d166      	bne.n	8005a48 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597e:	881a      	ldrh	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598a:	1c9a      	adds	r2, r3, #2
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005994:	b29b      	uxth	r3, r3
 8005996:	3b01      	subs	r3, #1
 8005998:	b29a      	uxth	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800599e:	e053      	b.n	8005a48 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d11b      	bne.n	80059e6 <HAL_SPI_TransmitReceive+0x176>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d016      	beq.n	80059e6 <HAL_SPI_TransmitReceive+0x176>
 80059b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d113      	bne.n	80059e6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c2:	881a      	ldrh	r2, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ce:	1c9a      	adds	r2, r3, #2
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059d8:	b29b      	uxth	r3, r3
 80059da:	3b01      	subs	r3, #1
 80059dc:	b29a      	uxth	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059e2:	2300      	movs	r3, #0
 80059e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d119      	bne.n	8005a28 <HAL_SPI_TransmitReceive+0x1b8>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d014      	beq.n	8005a28 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68da      	ldr	r2, [r3, #12]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a08:	b292      	uxth	r2, r2
 8005a0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a10:	1c9a      	adds	r2, r3, #2
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a24:	2301      	movs	r3, #1
 8005a26:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a28:	f7fe f8e2 	bl	8003bf0 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d807      	bhi.n	8005a48 <HAL_SPI_TransmitReceive+0x1d8>
 8005a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3e:	d003      	beq.n	8005a48 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a46:	e0a7      	b.n	8005b98 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1a6      	bne.n	80059a0 <HAL_SPI_TransmitReceive+0x130>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1a1      	bne.n	80059a0 <HAL_SPI_TransmitReceive+0x130>
 8005a5c:	e07c      	b.n	8005b58 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <HAL_SPI_TransmitReceive+0x1fc>
 8005a66:	8b7b      	ldrh	r3, [r7, #26]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d16b      	bne.n	8005b44 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	330c      	adds	r3, #12
 8005a76:	7812      	ldrb	r2, [r2, #0]
 8005a78:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7e:	1c5a      	adds	r2, r3, #1
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a92:	e057      	b.n	8005b44 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d11c      	bne.n	8005adc <HAL_SPI_TransmitReceive+0x26c>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d017      	beq.n	8005adc <HAL_SPI_TransmitReceive+0x26c>
 8005aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d114      	bne.n	8005adc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	330c      	adds	r3, #12
 8005abc:	7812      	ldrb	r2, [r2, #0]
 8005abe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d119      	bne.n	8005b1e <HAL_SPI_TransmitReceive+0x2ae>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d014      	beq.n	8005b1e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68da      	ldr	r2, [r3, #12]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afe:	b2d2      	uxtb	r2, r2
 8005b00:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	3b01      	subs	r3, #1
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b1e:	f7fe f867 	bl	8003bf0 <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d803      	bhi.n	8005b36 <HAL_SPI_TransmitReceive+0x2c6>
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b34:	d102      	bne.n	8005b3c <HAL_SPI_TransmitReceive+0x2cc>
 8005b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d103      	bne.n	8005b44 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005b42:	e029      	b.n	8005b98 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1a2      	bne.n	8005a94 <HAL_SPI_TransmitReceive+0x224>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d19d      	bne.n	8005a94 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 f917 	bl	8005d90 <SPI_EndRxTxTransaction>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d006      	beq.n	8005b76 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2220      	movs	r2, #32
 8005b72:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005b74:	e010      	b.n	8005b98 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10b      	bne.n	8005b96 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b7e:	2300      	movs	r3, #0
 8005b80:	617b      	str	r3, [r7, #20]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	617b      	str	r3, [r7, #20]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	617b      	str	r3, [r7, #20]
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	e000      	b.n	8005b98 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005b96:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ba8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3730      	adds	r7, #48	; 0x30
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b088      	sub	sp, #32
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	603b      	str	r3, [r7, #0]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005bc4:	f7fe f814 	bl	8003bf0 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bcc:	1a9b      	subs	r3, r3, r2
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005bd4:	f7fe f80c 	bl	8003bf0 <HAL_GetTick>
 8005bd8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005bda:	4b39      	ldr	r3, [pc, #228]	; (8005cc0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	015b      	lsls	r3, r3, #5
 8005be0:	0d1b      	lsrs	r3, r3, #20
 8005be2:	69fa      	ldr	r2, [r7, #28]
 8005be4:	fb02 f303 	mul.w	r3, r2, r3
 8005be8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bea:	e054      	b.n	8005c96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf2:	d050      	beq.n	8005c96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bf4:	f7fd fffc 	bl	8003bf0 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	69fa      	ldr	r2, [r7, #28]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d902      	bls.n	8005c0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d13d      	bne.n	8005c86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c22:	d111      	bne.n	8005c48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c2c:	d004      	beq.n	8005c38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c36:	d107      	bne.n	8005c48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c50:	d10f      	bne.n	8005c72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c60:	601a      	str	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e017      	b.n	8005cb6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	3b01      	subs	r3, #1
 8005c94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	bf0c      	ite	eq
 8005ca6:	2301      	moveq	r3, #1
 8005ca8:	2300      	movne	r3, #0
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	461a      	mov	r2, r3
 8005cae:	79fb      	ldrb	r3, [r7, #7]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d19b      	bne.n	8005bec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3720      	adds	r7, #32
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	2000005c 	.word	0x2000005c

08005cc4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af02      	add	r7, sp, #8
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cd8:	d111      	bne.n	8005cfe <SPI_EndRxTransaction+0x3a>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ce2:	d004      	beq.n	8005cee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cec:	d107      	bne.n	8005cfe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cfc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d06:	d12a      	bne.n	8005d5e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d10:	d012      	beq.n	8005d38 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	2180      	movs	r1, #128	; 0x80
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f7ff ff49 	bl	8005bb4 <SPI_WaitFlagStateUntilTimeout>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d02d      	beq.n	8005d84 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d2c:	f043 0220 	orr.w	r2, r3, #32
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e026      	b.n	8005d86 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	2101      	movs	r1, #1
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f7ff ff36 	bl	8005bb4 <SPI_WaitFlagStateUntilTimeout>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d01a      	beq.n	8005d84 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d52:	f043 0220 	orr.w	r2, r3, #32
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e013      	b.n	8005d86 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2200      	movs	r2, #0
 8005d66:	2101      	movs	r1, #1
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f7ff ff23 	bl	8005bb4 <SPI_WaitFlagStateUntilTimeout>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d007      	beq.n	8005d84 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d78:	f043 0220 	orr.w	r2, r3, #32
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e000      	b.n	8005d86 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
	...

08005d90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b088      	sub	sp, #32
 8005d94:	af02      	add	r7, sp, #8
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d9c:	4b1b      	ldr	r3, [pc, #108]	; (8005e0c <SPI_EndRxTxTransaction+0x7c>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a1b      	ldr	r2, [pc, #108]	; (8005e10 <SPI_EndRxTxTransaction+0x80>)
 8005da2:	fba2 2303 	umull	r2, r3, r2, r3
 8005da6:	0d5b      	lsrs	r3, r3, #21
 8005da8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005dac:	fb02 f303 	mul.w	r3, r2, r3
 8005db0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dba:	d112      	bne.n	8005de2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	2180      	movs	r1, #128	; 0x80
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f7ff fef4 	bl	8005bb4 <SPI_WaitFlagStateUntilTimeout>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d016      	beq.n	8005e00 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd6:	f043 0220 	orr.w	r2, r3, #32
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e00f      	b.n	8005e02 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00a      	beq.n	8005dfe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	3b01      	subs	r3, #1
 8005dec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df8:	2b80      	cmp	r3, #128	; 0x80
 8005dfa:	d0f2      	beq.n	8005de2 <SPI_EndRxTxTransaction+0x52>
 8005dfc:	e000      	b.n	8005e00 <SPI_EndRxTxTransaction+0x70>
        break;
 8005dfe:	bf00      	nop
  }

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	2000005c 	.word	0x2000005c
 8005e10:	165e9f81 	.word	0x165e9f81

08005e14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e041      	b.n	8005eaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d106      	bne.n	8005e40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f7fd fd90 	bl	8003960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3304      	adds	r3, #4
 8005e50:	4619      	mov	r1, r3
 8005e52:	4610      	mov	r0, r2
 8005e54:	f000 fa88 	bl	8006368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
	...

08005eb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d001      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e044      	b.n	8005f56 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68da      	ldr	r2, [r3, #12]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f042 0201 	orr.w	r2, r2, #1
 8005ee2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a1e      	ldr	r2, [pc, #120]	; (8005f64 <HAL_TIM_Base_Start_IT+0xb0>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d018      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0x6c>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ef6:	d013      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0x6c>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a1a      	ldr	r2, [pc, #104]	; (8005f68 <HAL_TIM_Base_Start_IT+0xb4>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d00e      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0x6c>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a19      	ldr	r2, [pc, #100]	; (8005f6c <HAL_TIM_Base_Start_IT+0xb8>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d009      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0x6c>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a17      	ldr	r2, [pc, #92]	; (8005f70 <HAL_TIM_Base_Start_IT+0xbc>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d004      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0x6c>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a16      	ldr	r2, [pc, #88]	; (8005f74 <HAL_TIM_Base_Start_IT+0xc0>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d111      	bne.n	8005f44 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f003 0307 	and.w	r3, r3, #7
 8005f2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2b06      	cmp	r3, #6
 8005f30:	d010      	beq.n	8005f54 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f042 0201 	orr.w	r2, r2, #1
 8005f40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f42:	e007      	b.n	8005f54 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f042 0201 	orr.w	r2, r2, #1
 8005f52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	40010000 	.word	0x40010000
 8005f68:	40000400 	.word	0x40000400
 8005f6c:	40000800 	.word	0x40000800
 8005f70:	40000c00 	.word	0x40000c00
 8005f74:	40014000 	.word	0x40014000

08005f78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d122      	bne.n	8005fd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f003 0302 	and.w	r3, r3, #2
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d11b      	bne.n	8005fd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f06f 0202 	mvn.w	r2, #2
 8005fa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	f003 0303 	and.w	r3, r3, #3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f9b5 	bl	800632a <HAL_TIM_IC_CaptureCallback>
 8005fc0:	e005      	b.n	8005fce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f9a7 	bl	8006316 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f9b8 	bl	800633e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	f003 0304 	and.w	r3, r3, #4
 8005fde:	2b04      	cmp	r3, #4
 8005fe0:	d122      	bne.n	8006028 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f003 0304 	and.w	r3, r3, #4
 8005fec:	2b04      	cmp	r3, #4
 8005fee:	d11b      	bne.n	8006028 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f06f 0204 	mvn.w	r2, #4
 8005ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2202      	movs	r2, #2
 8005ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800600a:	2b00      	cmp	r3, #0
 800600c:	d003      	beq.n	8006016 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f98b 	bl	800632a <HAL_TIM_IC_CaptureCallback>
 8006014:	e005      	b.n	8006022 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f97d 	bl	8006316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 f98e 	bl	800633e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	f003 0308 	and.w	r3, r3, #8
 8006032:	2b08      	cmp	r3, #8
 8006034:	d122      	bne.n	800607c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f003 0308 	and.w	r3, r3, #8
 8006040:	2b08      	cmp	r3, #8
 8006042:	d11b      	bne.n	800607c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f06f 0208 	mvn.w	r2, #8
 800604c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2204      	movs	r2, #4
 8006052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	f003 0303 	and.w	r3, r3, #3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f961 	bl	800632a <HAL_TIM_IC_CaptureCallback>
 8006068:	e005      	b.n	8006076 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f953 	bl	8006316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f964 	bl	800633e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	f003 0310 	and.w	r3, r3, #16
 8006086:	2b10      	cmp	r3, #16
 8006088:	d122      	bne.n	80060d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f003 0310 	and.w	r3, r3, #16
 8006094:	2b10      	cmp	r3, #16
 8006096:	d11b      	bne.n	80060d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f06f 0210 	mvn.w	r2, #16
 80060a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2208      	movs	r2, #8
 80060a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d003      	beq.n	80060be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f937 	bl	800632a <HAL_TIM_IC_CaptureCallback>
 80060bc:	e005      	b.n	80060ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f929 	bl	8006316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f93a 	bl	800633e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d10e      	bne.n	80060fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d107      	bne.n	80060fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f06f 0201 	mvn.w	r2, #1
 80060f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7fb fdb2 	bl	8001c60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006106:	2b80      	cmp	r3, #128	; 0x80
 8006108:	d10e      	bne.n	8006128 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006114:	2b80      	cmp	r3, #128	; 0x80
 8006116:	d107      	bne.n	8006128 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fab2 	bl	800668c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006132:	2b40      	cmp	r3, #64	; 0x40
 8006134:	d10e      	bne.n	8006154 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006140:	2b40      	cmp	r3, #64	; 0x40
 8006142:	d107      	bne.n	8006154 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800614c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f8ff 	bl	8006352 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f003 0320 	and.w	r3, r3, #32
 800615e:	2b20      	cmp	r3, #32
 8006160:	d10e      	bne.n	8006180 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f003 0320 	and.w	r3, r3, #32
 800616c:	2b20      	cmp	r3, #32
 800616e:	d107      	bne.n	8006180 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f06f 0220 	mvn.w	r2, #32
 8006178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fa7c 	bl	8006678 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006180:	bf00      	nop
 8006182:	3708      	adds	r7, #8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800619c:	2b01      	cmp	r3, #1
 800619e:	d101      	bne.n	80061a4 <HAL_TIM_ConfigClockSource+0x1c>
 80061a0:	2302      	movs	r3, #2
 80061a2:	e0b4      	b.n	800630e <HAL_TIM_ConfigClockSource+0x186>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2202      	movs	r2, #2
 80061b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80061c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061dc:	d03e      	beq.n	800625c <HAL_TIM_ConfigClockSource+0xd4>
 80061de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061e2:	f200 8087 	bhi.w	80062f4 <HAL_TIM_ConfigClockSource+0x16c>
 80061e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ea:	f000 8086 	beq.w	80062fa <HAL_TIM_ConfigClockSource+0x172>
 80061ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061f2:	d87f      	bhi.n	80062f4 <HAL_TIM_ConfigClockSource+0x16c>
 80061f4:	2b70      	cmp	r3, #112	; 0x70
 80061f6:	d01a      	beq.n	800622e <HAL_TIM_ConfigClockSource+0xa6>
 80061f8:	2b70      	cmp	r3, #112	; 0x70
 80061fa:	d87b      	bhi.n	80062f4 <HAL_TIM_ConfigClockSource+0x16c>
 80061fc:	2b60      	cmp	r3, #96	; 0x60
 80061fe:	d050      	beq.n	80062a2 <HAL_TIM_ConfigClockSource+0x11a>
 8006200:	2b60      	cmp	r3, #96	; 0x60
 8006202:	d877      	bhi.n	80062f4 <HAL_TIM_ConfigClockSource+0x16c>
 8006204:	2b50      	cmp	r3, #80	; 0x50
 8006206:	d03c      	beq.n	8006282 <HAL_TIM_ConfigClockSource+0xfa>
 8006208:	2b50      	cmp	r3, #80	; 0x50
 800620a:	d873      	bhi.n	80062f4 <HAL_TIM_ConfigClockSource+0x16c>
 800620c:	2b40      	cmp	r3, #64	; 0x40
 800620e:	d058      	beq.n	80062c2 <HAL_TIM_ConfigClockSource+0x13a>
 8006210:	2b40      	cmp	r3, #64	; 0x40
 8006212:	d86f      	bhi.n	80062f4 <HAL_TIM_ConfigClockSource+0x16c>
 8006214:	2b30      	cmp	r3, #48	; 0x30
 8006216:	d064      	beq.n	80062e2 <HAL_TIM_ConfigClockSource+0x15a>
 8006218:	2b30      	cmp	r3, #48	; 0x30
 800621a:	d86b      	bhi.n	80062f4 <HAL_TIM_ConfigClockSource+0x16c>
 800621c:	2b20      	cmp	r3, #32
 800621e:	d060      	beq.n	80062e2 <HAL_TIM_ConfigClockSource+0x15a>
 8006220:	2b20      	cmp	r3, #32
 8006222:	d867      	bhi.n	80062f4 <HAL_TIM_ConfigClockSource+0x16c>
 8006224:	2b00      	cmp	r3, #0
 8006226:	d05c      	beq.n	80062e2 <HAL_TIM_ConfigClockSource+0x15a>
 8006228:	2b10      	cmp	r3, #16
 800622a:	d05a      	beq.n	80062e2 <HAL_TIM_ConfigClockSource+0x15a>
 800622c:	e062      	b.n	80062f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6818      	ldr	r0, [r3, #0]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	6899      	ldr	r1, [r3, #8]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	f000 f98d 	bl	800655c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006250:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	609a      	str	r2, [r3, #8]
      break;
 800625a:	e04f      	b.n	80062fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6818      	ldr	r0, [r3, #0]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	6899      	ldr	r1, [r3, #8]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f000 f976 	bl	800655c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689a      	ldr	r2, [r3, #8]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800627e:	609a      	str	r2, [r3, #8]
      break;
 8006280:	e03c      	b.n	80062fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6818      	ldr	r0, [r3, #0]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	6859      	ldr	r1, [r3, #4]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	461a      	mov	r2, r3
 8006290:	f000 f8ea 	bl	8006468 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2150      	movs	r1, #80	; 0x50
 800629a:	4618      	mov	r0, r3
 800629c:	f000 f943 	bl	8006526 <TIM_ITRx_SetConfig>
      break;
 80062a0:	e02c      	b.n	80062fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6818      	ldr	r0, [r3, #0]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	6859      	ldr	r1, [r3, #4]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	461a      	mov	r2, r3
 80062b0:	f000 f909 	bl	80064c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2160      	movs	r1, #96	; 0x60
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 f933 	bl	8006526 <TIM_ITRx_SetConfig>
      break;
 80062c0:	e01c      	b.n	80062fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6818      	ldr	r0, [r3, #0]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	6859      	ldr	r1, [r3, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	461a      	mov	r2, r3
 80062d0:	f000 f8ca 	bl	8006468 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2140      	movs	r1, #64	; 0x40
 80062da:	4618      	mov	r0, r3
 80062dc:	f000 f923 	bl	8006526 <TIM_ITRx_SetConfig>
      break;
 80062e0:	e00c      	b.n	80062fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4619      	mov	r1, r3
 80062ec:	4610      	mov	r0, r2
 80062ee:	f000 f91a 	bl	8006526 <TIM_ITRx_SetConfig>
      break;
 80062f2:	e003      	b.n	80062fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	73fb      	strb	r3, [r7, #15]
      break;
 80062f8:	e000      	b.n	80062fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80062fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800630c:	7bfb      	ldrb	r3, [r7, #15]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006316:	b480      	push	{r7}
 8006318:	b083      	sub	sp, #12
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800631e:	bf00      	nop
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800632a:	b480      	push	{r7}
 800632c:	b083      	sub	sp, #12
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006332:	bf00      	nop
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800633e:	b480      	push	{r7}
 8006340:	b083      	sub	sp, #12
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006346:	bf00      	nop
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006352:	b480      	push	{r7}
 8006354:	b083      	sub	sp, #12
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800635a:	bf00      	nop
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
	...

08006368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a34      	ldr	r2, [pc, #208]	; (800644c <TIM_Base_SetConfig+0xe4>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d00f      	beq.n	80063a0 <TIM_Base_SetConfig+0x38>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006386:	d00b      	beq.n	80063a0 <TIM_Base_SetConfig+0x38>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a31      	ldr	r2, [pc, #196]	; (8006450 <TIM_Base_SetConfig+0xe8>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d007      	beq.n	80063a0 <TIM_Base_SetConfig+0x38>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a30      	ldr	r2, [pc, #192]	; (8006454 <TIM_Base_SetConfig+0xec>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d003      	beq.n	80063a0 <TIM_Base_SetConfig+0x38>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a2f      	ldr	r2, [pc, #188]	; (8006458 <TIM_Base_SetConfig+0xf0>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d108      	bne.n	80063b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a25      	ldr	r2, [pc, #148]	; (800644c <TIM_Base_SetConfig+0xe4>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d01b      	beq.n	80063f2 <TIM_Base_SetConfig+0x8a>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c0:	d017      	beq.n	80063f2 <TIM_Base_SetConfig+0x8a>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a22      	ldr	r2, [pc, #136]	; (8006450 <TIM_Base_SetConfig+0xe8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d013      	beq.n	80063f2 <TIM_Base_SetConfig+0x8a>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a21      	ldr	r2, [pc, #132]	; (8006454 <TIM_Base_SetConfig+0xec>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d00f      	beq.n	80063f2 <TIM_Base_SetConfig+0x8a>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a20      	ldr	r2, [pc, #128]	; (8006458 <TIM_Base_SetConfig+0xf0>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d00b      	beq.n	80063f2 <TIM_Base_SetConfig+0x8a>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a1f      	ldr	r2, [pc, #124]	; (800645c <TIM_Base_SetConfig+0xf4>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d007      	beq.n	80063f2 <TIM_Base_SetConfig+0x8a>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a1e      	ldr	r2, [pc, #120]	; (8006460 <TIM_Base_SetConfig+0xf8>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d003      	beq.n	80063f2 <TIM_Base_SetConfig+0x8a>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a1d      	ldr	r2, [pc, #116]	; (8006464 <TIM_Base_SetConfig+0xfc>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d108      	bne.n	8006404 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	4313      	orrs	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	4313      	orrs	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	689a      	ldr	r2, [r3, #8]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a08      	ldr	r2, [pc, #32]	; (800644c <TIM_Base_SetConfig+0xe4>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d103      	bne.n	8006438 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	691a      	ldr	r2, [r3, #16]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	615a      	str	r2, [r3, #20]
}
 800643e:	bf00      	nop
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	40010000 	.word	0x40010000
 8006450:	40000400 	.word	0x40000400
 8006454:	40000800 	.word	0x40000800
 8006458:	40000c00 	.word	0x40000c00
 800645c:	40014000 	.word	0x40014000
 8006460:	40014400 	.word	0x40014400
 8006464:	40014800 	.word	0x40014800

08006468 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006468:	b480      	push	{r7}
 800646a:	b087      	sub	sp, #28
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	f023 0201 	bic.w	r2, r3, #1
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006492:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	011b      	lsls	r3, r3, #4
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	4313      	orrs	r3, r2
 800649c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f023 030a 	bic.w	r3, r3, #10
 80064a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	621a      	str	r2, [r3, #32]
}
 80064ba:	bf00      	nop
 80064bc:	371c      	adds	r7, #28
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b087      	sub	sp, #28
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	60f8      	str	r0, [r7, #12]
 80064ce:	60b9      	str	r1, [r7, #8]
 80064d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	f023 0210 	bic.w	r2, r3, #16
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6a1b      	ldr	r3, [r3, #32]
 80064e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	031b      	lsls	r3, r3, #12
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006502:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	011b      	lsls	r3, r3, #4
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	4313      	orrs	r3, r2
 800650c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	621a      	str	r2, [r3, #32]
}
 800651a:	bf00      	nop
 800651c:	371c      	adds	r7, #28
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006526:	b480      	push	{r7}
 8006528:	b085      	sub	sp, #20
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4313      	orrs	r3, r2
 8006544:	f043 0307 	orr.w	r3, r3, #7
 8006548:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	609a      	str	r2, [r3, #8]
}
 8006550:	bf00      	nop
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006576:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	021a      	lsls	r2, r3, #8
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	431a      	orrs	r2, r3
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	4313      	orrs	r3, r2
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	4313      	orrs	r3, r2
 8006588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	609a      	str	r2, [r3, #8]
}
 8006590:	bf00      	nop
 8006592:	371c      	adds	r7, #28
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d101      	bne.n	80065b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065b0:	2302      	movs	r3, #2
 80065b2:	e050      	b.n	8006656 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2202      	movs	r2, #2
 80065c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a1c      	ldr	r2, [pc, #112]	; (8006664 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d018      	beq.n	800662a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006600:	d013      	beq.n	800662a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a18      	ldr	r2, [pc, #96]	; (8006668 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d00e      	beq.n	800662a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a16      	ldr	r2, [pc, #88]	; (800666c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d009      	beq.n	800662a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a15      	ldr	r2, [pc, #84]	; (8006670 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d004      	beq.n	800662a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a13      	ldr	r2, [pc, #76]	; (8006674 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d10c      	bne.n	8006644 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006630:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	4313      	orrs	r3, r2
 800663a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	40010000 	.word	0x40010000
 8006668:	40000400 	.word	0x40000400
 800666c:	40000800 	.word	0x40000800
 8006670:	40000c00 	.word	0x40000c00
 8006674:	40014000 	.word	0x40014000

08006678 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e03f      	b.n	8006732 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d106      	bne.n	80066cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f7fd f9ba 	bl	8003a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2224      	movs	r2, #36	; 0x24
 80066d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68da      	ldr	r2, [r3, #12]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f929 	bl	800693c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	691a      	ldr	r2, [r3, #16]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	695a      	ldr	r2, [r3, #20]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006708:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68da      	ldr	r2, [r3, #12]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006718:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2220      	movs	r2, #32
 8006724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2220      	movs	r2, #32
 800672c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3708      	adds	r7, #8
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b08a      	sub	sp, #40	; 0x28
 800673e:	af02      	add	r7, sp, #8
 8006740:	60f8      	str	r0, [r7, #12]
 8006742:	60b9      	str	r1, [r7, #8]
 8006744:	603b      	str	r3, [r7, #0]
 8006746:	4613      	mov	r3, r2
 8006748:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800674a:	2300      	movs	r3, #0
 800674c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b20      	cmp	r3, #32
 8006758:	d17c      	bne.n	8006854 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d002      	beq.n	8006766 <HAL_UART_Transmit+0x2c>
 8006760:	88fb      	ldrh	r3, [r7, #6]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e075      	b.n	8006856 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006770:	2b01      	cmp	r3, #1
 8006772:	d101      	bne.n	8006778 <HAL_UART_Transmit+0x3e>
 8006774:	2302      	movs	r3, #2
 8006776:	e06e      	b.n	8006856 <HAL_UART_Transmit+0x11c>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2221      	movs	r2, #33	; 0x21
 800678a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800678e:	f7fd fa2f 	bl	8003bf0 <HAL_GetTick>
 8006792:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	88fa      	ldrh	r2, [r7, #6]
 8006798:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	88fa      	ldrh	r2, [r7, #6]
 800679e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067a8:	d108      	bne.n	80067bc <HAL_UART_Transmit+0x82>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d104      	bne.n	80067bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80067b2:	2300      	movs	r3, #0
 80067b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	61bb      	str	r3, [r7, #24]
 80067ba:	e003      	b.n	80067c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067c0:	2300      	movs	r3, #0
 80067c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80067cc:	e02a      	b.n	8006824 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	2200      	movs	r2, #0
 80067d6:	2180      	movs	r1, #128	; 0x80
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 f840 	bl	800685e <UART_WaitOnFlagUntilTimeout>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d001      	beq.n	80067e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e036      	b.n	8006856 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10b      	bne.n	8006806 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	881b      	ldrh	r3, [r3, #0]
 80067f2:	461a      	mov	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	3302      	adds	r3, #2
 8006802:	61bb      	str	r3, [r7, #24]
 8006804:	e007      	b.n	8006816 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	781a      	ldrb	r2, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	3301      	adds	r3, #1
 8006814:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800681a:	b29b      	uxth	r3, r3
 800681c:	3b01      	subs	r3, #1
 800681e:	b29a      	uxth	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006828:	b29b      	uxth	r3, r3
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1cf      	bne.n	80067ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	2200      	movs	r2, #0
 8006836:	2140      	movs	r1, #64	; 0x40
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f000 f810 	bl	800685e <UART_WaitOnFlagUntilTimeout>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d001      	beq.n	8006848 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e006      	b.n	8006856 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2220      	movs	r2, #32
 800684c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006850:	2300      	movs	r3, #0
 8006852:	e000      	b.n	8006856 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006854:	2302      	movs	r3, #2
  }
}
 8006856:	4618      	mov	r0, r3
 8006858:	3720      	adds	r7, #32
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b090      	sub	sp, #64	; 0x40
 8006862:	af00      	add	r7, sp, #0
 8006864:	60f8      	str	r0, [r7, #12]
 8006866:	60b9      	str	r1, [r7, #8]
 8006868:	603b      	str	r3, [r7, #0]
 800686a:	4613      	mov	r3, r2
 800686c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800686e:	e050      	b.n	8006912 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006876:	d04c      	beq.n	8006912 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800687a:	2b00      	cmp	r3, #0
 800687c:	d007      	beq.n	800688e <UART_WaitOnFlagUntilTimeout+0x30>
 800687e:	f7fd f9b7 	bl	8003bf0 <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800688a:	429a      	cmp	r2, r3
 800688c:	d241      	bcs.n	8006912 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	330c      	adds	r3, #12
 8006894:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006898:	e853 3f00 	ldrex	r3, [r3]
 800689c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800689e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	330c      	adds	r3, #12
 80068ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80068ae:	637a      	str	r2, [r7, #52]	; 0x34
 80068b0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068b6:	e841 2300 	strex	r3, r2, [r1]
 80068ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1e5      	bne.n	800688e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	3314      	adds	r3, #20
 80068c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	e853 3f00 	ldrex	r3, [r3]
 80068d0:	613b      	str	r3, [r7, #16]
   return(result);
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	f023 0301 	bic.w	r3, r3, #1
 80068d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	3314      	adds	r3, #20
 80068e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068e2:	623a      	str	r2, [r7, #32]
 80068e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e6:	69f9      	ldr	r1, [r7, #28]
 80068e8:	6a3a      	ldr	r2, [r7, #32]
 80068ea:	e841 2300 	strex	r3, r2, [r1]
 80068ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1e5      	bne.n	80068c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2220      	movs	r2, #32
 80068fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2220      	movs	r2, #32
 8006902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e00f      	b.n	8006932 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	4013      	ands	r3, r2
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	429a      	cmp	r2, r3
 8006920:	bf0c      	ite	eq
 8006922:	2301      	moveq	r3, #1
 8006924:	2300      	movne	r3, #0
 8006926:	b2db      	uxtb	r3, r3
 8006928:	461a      	mov	r2, r3
 800692a:	79fb      	ldrb	r3, [r7, #7]
 800692c:	429a      	cmp	r2, r3
 800692e:	d09f      	beq.n	8006870 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3740      	adds	r7, #64	; 0x40
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
	...

0800693c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800693c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006940:	b0c0      	sub	sp, #256	; 0x100
 8006942:	af00      	add	r7, sp, #0
 8006944:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006958:	68d9      	ldr	r1, [r3, #12]
 800695a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	ea40 0301 	orr.w	r3, r0, r1
 8006964:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800696a:	689a      	ldr	r2, [r3, #8]
 800696c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	431a      	orrs	r2, r3
 8006974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	431a      	orrs	r2, r3
 800697c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006980:	69db      	ldr	r3, [r3, #28]
 8006982:	4313      	orrs	r3, r2
 8006984:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006994:	f021 010c 	bic.w	r1, r1, #12
 8006998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069a2:	430b      	orrs	r3, r1
 80069a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80069b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069b6:	6999      	ldr	r1, [r3, #24]
 80069b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	ea40 0301 	orr.w	r3, r0, r1
 80069c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80069c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	4b8f      	ldr	r3, [pc, #572]	; (8006c08 <UART_SetConfig+0x2cc>)
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d005      	beq.n	80069dc <UART_SetConfig+0xa0>
 80069d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	4b8d      	ldr	r3, [pc, #564]	; (8006c0c <UART_SetConfig+0x2d0>)
 80069d8:	429a      	cmp	r2, r3
 80069da:	d104      	bne.n	80069e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80069dc:	f7fe f840 	bl	8004a60 <HAL_RCC_GetPCLK2Freq>
 80069e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80069e4:	e003      	b.n	80069ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80069e6:	f7fe f827 	bl	8004a38 <HAL_RCC_GetPCLK1Freq>
 80069ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f2:	69db      	ldr	r3, [r3, #28]
 80069f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069f8:	f040 810c 	bne.w	8006c14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a00:	2200      	movs	r2, #0
 8006a02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006a0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006a0e:	4622      	mov	r2, r4
 8006a10:	462b      	mov	r3, r5
 8006a12:	1891      	adds	r1, r2, r2
 8006a14:	65b9      	str	r1, [r7, #88]	; 0x58
 8006a16:	415b      	adcs	r3, r3
 8006a18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006a1e:	4621      	mov	r1, r4
 8006a20:	eb12 0801 	adds.w	r8, r2, r1
 8006a24:	4629      	mov	r1, r5
 8006a26:	eb43 0901 	adc.w	r9, r3, r1
 8006a2a:	f04f 0200 	mov.w	r2, #0
 8006a2e:	f04f 0300 	mov.w	r3, #0
 8006a32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a3e:	4690      	mov	r8, r2
 8006a40:	4699      	mov	r9, r3
 8006a42:	4623      	mov	r3, r4
 8006a44:	eb18 0303 	adds.w	r3, r8, r3
 8006a48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a4c:	462b      	mov	r3, r5
 8006a4e:	eb49 0303 	adc.w	r3, r9, r3
 8006a52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006a66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	18db      	adds	r3, r3, r3
 8006a6e:	653b      	str	r3, [r7, #80]	; 0x50
 8006a70:	4613      	mov	r3, r2
 8006a72:	eb42 0303 	adc.w	r3, r2, r3
 8006a76:	657b      	str	r3, [r7, #84]	; 0x54
 8006a78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006a7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006a80:	f7fa f90a 	bl	8000c98 <__aeabi_uldivmod>
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	4b61      	ldr	r3, [pc, #388]	; (8006c10 <UART_SetConfig+0x2d4>)
 8006a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8006a8e:	095b      	lsrs	r3, r3, #5
 8006a90:	011c      	lsls	r4, r3, #4
 8006a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a96:	2200      	movs	r2, #0
 8006a98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006aa0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006aa4:	4642      	mov	r2, r8
 8006aa6:	464b      	mov	r3, r9
 8006aa8:	1891      	adds	r1, r2, r2
 8006aaa:	64b9      	str	r1, [r7, #72]	; 0x48
 8006aac:	415b      	adcs	r3, r3
 8006aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ab0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006ab4:	4641      	mov	r1, r8
 8006ab6:	eb12 0a01 	adds.w	sl, r2, r1
 8006aba:	4649      	mov	r1, r9
 8006abc:	eb43 0b01 	adc.w	fp, r3, r1
 8006ac0:	f04f 0200 	mov.w	r2, #0
 8006ac4:	f04f 0300 	mov.w	r3, #0
 8006ac8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006acc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ad0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ad4:	4692      	mov	sl, r2
 8006ad6:	469b      	mov	fp, r3
 8006ad8:	4643      	mov	r3, r8
 8006ada:	eb1a 0303 	adds.w	r3, sl, r3
 8006ade:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ae2:	464b      	mov	r3, r9
 8006ae4:	eb4b 0303 	adc.w	r3, fp, r3
 8006ae8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006af8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006afc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006b00:	460b      	mov	r3, r1
 8006b02:	18db      	adds	r3, r3, r3
 8006b04:	643b      	str	r3, [r7, #64]	; 0x40
 8006b06:	4613      	mov	r3, r2
 8006b08:	eb42 0303 	adc.w	r3, r2, r3
 8006b0c:	647b      	str	r3, [r7, #68]	; 0x44
 8006b0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006b16:	f7fa f8bf 	bl	8000c98 <__aeabi_uldivmod>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	4611      	mov	r1, r2
 8006b20:	4b3b      	ldr	r3, [pc, #236]	; (8006c10 <UART_SetConfig+0x2d4>)
 8006b22:	fba3 2301 	umull	r2, r3, r3, r1
 8006b26:	095b      	lsrs	r3, r3, #5
 8006b28:	2264      	movs	r2, #100	; 0x64
 8006b2a:	fb02 f303 	mul.w	r3, r2, r3
 8006b2e:	1acb      	subs	r3, r1, r3
 8006b30:	00db      	lsls	r3, r3, #3
 8006b32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006b36:	4b36      	ldr	r3, [pc, #216]	; (8006c10 <UART_SetConfig+0x2d4>)
 8006b38:	fba3 2302 	umull	r2, r3, r3, r2
 8006b3c:	095b      	lsrs	r3, r3, #5
 8006b3e:	005b      	lsls	r3, r3, #1
 8006b40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b44:	441c      	add	r4, r3
 8006b46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006b54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006b58:	4642      	mov	r2, r8
 8006b5a:	464b      	mov	r3, r9
 8006b5c:	1891      	adds	r1, r2, r2
 8006b5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b60:	415b      	adcs	r3, r3
 8006b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b68:	4641      	mov	r1, r8
 8006b6a:	1851      	adds	r1, r2, r1
 8006b6c:	6339      	str	r1, [r7, #48]	; 0x30
 8006b6e:	4649      	mov	r1, r9
 8006b70:	414b      	adcs	r3, r1
 8006b72:	637b      	str	r3, [r7, #52]	; 0x34
 8006b74:	f04f 0200 	mov.w	r2, #0
 8006b78:	f04f 0300 	mov.w	r3, #0
 8006b7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006b80:	4659      	mov	r1, fp
 8006b82:	00cb      	lsls	r3, r1, #3
 8006b84:	4651      	mov	r1, sl
 8006b86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b8a:	4651      	mov	r1, sl
 8006b8c:	00ca      	lsls	r2, r1, #3
 8006b8e:	4610      	mov	r0, r2
 8006b90:	4619      	mov	r1, r3
 8006b92:	4603      	mov	r3, r0
 8006b94:	4642      	mov	r2, r8
 8006b96:	189b      	adds	r3, r3, r2
 8006b98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b9c:	464b      	mov	r3, r9
 8006b9e:	460a      	mov	r2, r1
 8006ba0:	eb42 0303 	adc.w	r3, r2, r3
 8006ba4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006bb4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006bb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	18db      	adds	r3, r3, r3
 8006bc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	eb42 0303 	adc.w	r3, r2, r3
 8006bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006bce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006bd2:	f7fa f861 	bl	8000c98 <__aeabi_uldivmod>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	460b      	mov	r3, r1
 8006bda:	4b0d      	ldr	r3, [pc, #52]	; (8006c10 <UART_SetConfig+0x2d4>)
 8006bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8006be0:	095b      	lsrs	r3, r3, #5
 8006be2:	2164      	movs	r1, #100	; 0x64
 8006be4:	fb01 f303 	mul.w	r3, r1, r3
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	00db      	lsls	r3, r3, #3
 8006bec:	3332      	adds	r3, #50	; 0x32
 8006bee:	4a08      	ldr	r2, [pc, #32]	; (8006c10 <UART_SetConfig+0x2d4>)
 8006bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf4:	095b      	lsrs	r3, r3, #5
 8006bf6:	f003 0207 	and.w	r2, r3, #7
 8006bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4422      	add	r2, r4
 8006c02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c04:	e105      	b.n	8006e12 <UART_SetConfig+0x4d6>
 8006c06:	bf00      	nop
 8006c08:	40011000 	.word	0x40011000
 8006c0c:	40011400 	.word	0x40011400
 8006c10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006c22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006c26:	4642      	mov	r2, r8
 8006c28:	464b      	mov	r3, r9
 8006c2a:	1891      	adds	r1, r2, r2
 8006c2c:	6239      	str	r1, [r7, #32]
 8006c2e:	415b      	adcs	r3, r3
 8006c30:	627b      	str	r3, [r7, #36]	; 0x24
 8006c32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c36:	4641      	mov	r1, r8
 8006c38:	1854      	adds	r4, r2, r1
 8006c3a:	4649      	mov	r1, r9
 8006c3c:	eb43 0501 	adc.w	r5, r3, r1
 8006c40:	f04f 0200 	mov.w	r2, #0
 8006c44:	f04f 0300 	mov.w	r3, #0
 8006c48:	00eb      	lsls	r3, r5, #3
 8006c4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c4e:	00e2      	lsls	r2, r4, #3
 8006c50:	4614      	mov	r4, r2
 8006c52:	461d      	mov	r5, r3
 8006c54:	4643      	mov	r3, r8
 8006c56:	18e3      	adds	r3, r4, r3
 8006c58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c5c:	464b      	mov	r3, r9
 8006c5e:	eb45 0303 	adc.w	r3, r5, r3
 8006c62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c76:	f04f 0200 	mov.w	r2, #0
 8006c7a:	f04f 0300 	mov.w	r3, #0
 8006c7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006c82:	4629      	mov	r1, r5
 8006c84:	008b      	lsls	r3, r1, #2
 8006c86:	4621      	mov	r1, r4
 8006c88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c8c:	4621      	mov	r1, r4
 8006c8e:	008a      	lsls	r2, r1, #2
 8006c90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006c94:	f7fa f800 	bl	8000c98 <__aeabi_uldivmod>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	4b60      	ldr	r3, [pc, #384]	; (8006e20 <UART_SetConfig+0x4e4>)
 8006c9e:	fba3 2302 	umull	r2, r3, r3, r2
 8006ca2:	095b      	lsrs	r3, r3, #5
 8006ca4:	011c      	lsls	r4, r3, #4
 8006ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006caa:	2200      	movs	r2, #0
 8006cac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006cb0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006cb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006cb8:	4642      	mov	r2, r8
 8006cba:	464b      	mov	r3, r9
 8006cbc:	1891      	adds	r1, r2, r2
 8006cbe:	61b9      	str	r1, [r7, #24]
 8006cc0:	415b      	adcs	r3, r3
 8006cc2:	61fb      	str	r3, [r7, #28]
 8006cc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cc8:	4641      	mov	r1, r8
 8006cca:	1851      	adds	r1, r2, r1
 8006ccc:	6139      	str	r1, [r7, #16]
 8006cce:	4649      	mov	r1, r9
 8006cd0:	414b      	adcs	r3, r1
 8006cd2:	617b      	str	r3, [r7, #20]
 8006cd4:	f04f 0200 	mov.w	r2, #0
 8006cd8:	f04f 0300 	mov.w	r3, #0
 8006cdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ce0:	4659      	mov	r1, fp
 8006ce2:	00cb      	lsls	r3, r1, #3
 8006ce4:	4651      	mov	r1, sl
 8006ce6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cea:	4651      	mov	r1, sl
 8006cec:	00ca      	lsls	r2, r1, #3
 8006cee:	4610      	mov	r0, r2
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	4642      	mov	r2, r8
 8006cf6:	189b      	adds	r3, r3, r2
 8006cf8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006cfc:	464b      	mov	r3, r9
 8006cfe:	460a      	mov	r2, r1
 8006d00:	eb42 0303 	adc.w	r3, r2, r3
 8006d04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006d14:	f04f 0200 	mov.w	r2, #0
 8006d18:	f04f 0300 	mov.w	r3, #0
 8006d1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006d20:	4649      	mov	r1, r9
 8006d22:	008b      	lsls	r3, r1, #2
 8006d24:	4641      	mov	r1, r8
 8006d26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d2a:	4641      	mov	r1, r8
 8006d2c:	008a      	lsls	r2, r1, #2
 8006d2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006d32:	f7f9 ffb1 	bl	8000c98 <__aeabi_uldivmod>
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4b39      	ldr	r3, [pc, #228]	; (8006e20 <UART_SetConfig+0x4e4>)
 8006d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8006d40:	095b      	lsrs	r3, r3, #5
 8006d42:	2164      	movs	r1, #100	; 0x64
 8006d44:	fb01 f303 	mul.w	r3, r1, r3
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	011b      	lsls	r3, r3, #4
 8006d4c:	3332      	adds	r3, #50	; 0x32
 8006d4e:	4a34      	ldr	r2, [pc, #208]	; (8006e20 <UART_SetConfig+0x4e4>)
 8006d50:	fba2 2303 	umull	r2, r3, r2, r3
 8006d54:	095b      	lsrs	r3, r3, #5
 8006d56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d5a:	441c      	add	r4, r3
 8006d5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d60:	2200      	movs	r2, #0
 8006d62:	673b      	str	r3, [r7, #112]	; 0x70
 8006d64:	677a      	str	r2, [r7, #116]	; 0x74
 8006d66:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006d6a:	4642      	mov	r2, r8
 8006d6c:	464b      	mov	r3, r9
 8006d6e:	1891      	adds	r1, r2, r2
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	415b      	adcs	r3, r3
 8006d74:	60fb      	str	r3, [r7, #12]
 8006d76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d7a:	4641      	mov	r1, r8
 8006d7c:	1851      	adds	r1, r2, r1
 8006d7e:	6039      	str	r1, [r7, #0]
 8006d80:	4649      	mov	r1, r9
 8006d82:	414b      	adcs	r3, r1
 8006d84:	607b      	str	r3, [r7, #4]
 8006d86:	f04f 0200 	mov.w	r2, #0
 8006d8a:	f04f 0300 	mov.w	r3, #0
 8006d8e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d92:	4659      	mov	r1, fp
 8006d94:	00cb      	lsls	r3, r1, #3
 8006d96:	4651      	mov	r1, sl
 8006d98:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d9c:	4651      	mov	r1, sl
 8006d9e:	00ca      	lsls	r2, r1, #3
 8006da0:	4610      	mov	r0, r2
 8006da2:	4619      	mov	r1, r3
 8006da4:	4603      	mov	r3, r0
 8006da6:	4642      	mov	r2, r8
 8006da8:	189b      	adds	r3, r3, r2
 8006daa:	66bb      	str	r3, [r7, #104]	; 0x68
 8006dac:	464b      	mov	r3, r9
 8006dae:	460a      	mov	r2, r1
 8006db0:	eb42 0303 	adc.w	r3, r2, r3
 8006db4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	663b      	str	r3, [r7, #96]	; 0x60
 8006dc0:	667a      	str	r2, [r7, #100]	; 0x64
 8006dc2:	f04f 0200 	mov.w	r2, #0
 8006dc6:	f04f 0300 	mov.w	r3, #0
 8006dca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006dce:	4649      	mov	r1, r9
 8006dd0:	008b      	lsls	r3, r1, #2
 8006dd2:	4641      	mov	r1, r8
 8006dd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dd8:	4641      	mov	r1, r8
 8006dda:	008a      	lsls	r2, r1, #2
 8006ddc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006de0:	f7f9 ff5a 	bl	8000c98 <__aeabi_uldivmod>
 8006de4:	4602      	mov	r2, r0
 8006de6:	460b      	mov	r3, r1
 8006de8:	4b0d      	ldr	r3, [pc, #52]	; (8006e20 <UART_SetConfig+0x4e4>)
 8006dea:	fba3 1302 	umull	r1, r3, r3, r2
 8006dee:	095b      	lsrs	r3, r3, #5
 8006df0:	2164      	movs	r1, #100	; 0x64
 8006df2:	fb01 f303 	mul.w	r3, r1, r3
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	011b      	lsls	r3, r3, #4
 8006dfa:	3332      	adds	r3, #50	; 0x32
 8006dfc:	4a08      	ldr	r2, [pc, #32]	; (8006e20 <UART_SetConfig+0x4e4>)
 8006dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006e02:	095b      	lsrs	r3, r3, #5
 8006e04:	f003 020f 	and.w	r2, r3, #15
 8006e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4422      	add	r2, r4
 8006e10:	609a      	str	r2, [r3, #8]
}
 8006e12:	bf00      	nop
 8006e14:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e1e:	bf00      	nop
 8006e20:	51eb851f 	.word	0x51eb851f

08006e24 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006e28:	4904      	ldr	r1, [pc, #16]	; (8006e3c <MX_FATFS_Init+0x18>)
 8006e2a:	4805      	ldr	r0, [pc, #20]	; (8006e40 <MX_FATFS_Init+0x1c>)
 8006e2c:	f003 fe9c 	bl	800ab68 <FATFS_LinkDriver>
 8006e30:	4603      	mov	r3, r0
 8006e32:	461a      	mov	r2, r3
 8006e34:	4b03      	ldr	r3, [pc, #12]	; (8006e44 <MX_FATFS_Init+0x20>)
 8006e36:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006e38:	bf00      	nop
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	20003674 	.word	0x20003674
 8006e40:	20000068 	.word	0x20000068
 8006e44:	20003670 	.word	0x20003670

08006e48 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006e4c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	4603      	mov	r3, r0
 8006e60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8006e62:	79fb      	ldrb	r3, [r7, #7]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7fa fa87 	bl	8001378 <SD_disk_initialize>
 8006e6a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3708      	adds	r7, #8
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8006e7e:	79fb      	ldrb	r3, [r7, #7]
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7fa fb5f 	bl	8001544 <SD_disk_status>
 8006e86:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60b9      	str	r1, [r7, #8]
 8006e98:	607a      	str	r2, [r7, #4]
 8006e9a:	603b      	str	r3, [r7, #0]
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8006ea0:	7bf8      	ldrb	r0, [r7, #15]
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	68b9      	ldr	r1, [r7, #8]
 8006ea8:	f7fa fb62 	bl	8001570 <SD_disk_read>
 8006eac:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b084      	sub	sp, #16
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
 8006ec0:	603b      	str	r3, [r7, #0]
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8006ec6:	7bf8      	ldrb	r0, [r7, #15]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	68b9      	ldr	r1, [r7, #8]
 8006ece:	f7fa fbb9 	bl	8001644 <SD_disk_write>
 8006ed2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	603a      	str	r2, [r7, #0]
 8006ee6:	71fb      	strb	r3, [r7, #7]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006eec:	79b9      	ldrb	r1, [r7, #6]
 8006eee:	79fb      	ldrb	r3, [r7, #7]
 8006ef0:	683a      	ldr	r2, [r7, #0]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fa fc2a 	bl	800174c <SD_disk_ioctl>
 8006ef8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
	...

08006f04 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006f0e:	79fb      	ldrb	r3, [r7, #7]
 8006f10:	4a08      	ldr	r2, [pc, #32]	; (8006f34 <disk_status+0x30>)
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	79fa      	ldrb	r2, [r7, #7]
 8006f1c:	4905      	ldr	r1, [pc, #20]	; (8006f34 <disk_status+0x30>)
 8006f1e:	440a      	add	r2, r1
 8006f20:	7a12      	ldrb	r2, [r2, #8]
 8006f22:	4610      	mov	r0, r2
 8006f24:	4798      	blx	r3
 8006f26:	4603      	mov	r3, r0
 8006f28:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	200038a0 	.word	0x200038a0

08006f38 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	4603      	mov	r3, r0
 8006f40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006f46:	79fb      	ldrb	r3, [r7, #7]
 8006f48:	4a0d      	ldr	r2, [pc, #52]	; (8006f80 <disk_initialize+0x48>)
 8006f4a:	5cd3      	ldrb	r3, [r2, r3]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d111      	bne.n	8006f74 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006f50:	79fb      	ldrb	r3, [r7, #7]
 8006f52:	4a0b      	ldr	r2, [pc, #44]	; (8006f80 <disk_initialize+0x48>)
 8006f54:	2101      	movs	r1, #1
 8006f56:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006f58:	79fb      	ldrb	r3, [r7, #7]
 8006f5a:	4a09      	ldr	r2, [pc, #36]	; (8006f80 <disk_initialize+0x48>)
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4413      	add	r3, r2
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	79fa      	ldrb	r2, [r7, #7]
 8006f66:	4906      	ldr	r1, [pc, #24]	; (8006f80 <disk_initialize+0x48>)
 8006f68:	440a      	add	r2, r1
 8006f6a:	7a12      	ldrb	r2, [r2, #8]
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	4798      	blx	r3
 8006f70:	4603      	mov	r3, r0
 8006f72:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	200038a0 	.word	0x200038a0

08006f84 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006f84:	b590      	push	{r4, r7, lr}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60b9      	str	r1, [r7, #8]
 8006f8c:	607a      	str	r2, [r7, #4]
 8006f8e:	603b      	str	r3, [r7, #0]
 8006f90:	4603      	mov	r3, r0
 8006f92:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
 8006f96:	4a0a      	ldr	r2, [pc, #40]	; (8006fc0 <disk_read+0x3c>)
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	689c      	ldr	r4, [r3, #8]
 8006fa0:	7bfb      	ldrb	r3, [r7, #15]
 8006fa2:	4a07      	ldr	r2, [pc, #28]	; (8006fc0 <disk_read+0x3c>)
 8006fa4:	4413      	add	r3, r2
 8006fa6:	7a18      	ldrb	r0, [r3, #8]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	68b9      	ldr	r1, [r7, #8]
 8006fae:	47a0      	blx	r4
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	75fb      	strb	r3, [r7, #23]
  return res;
 8006fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	371c      	adds	r7, #28
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd90      	pop	{r4, r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	200038a0 	.word	0x200038a0

08006fc4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006fc4:	b590      	push	{r4, r7, lr}
 8006fc6:	b087      	sub	sp, #28
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60b9      	str	r1, [r7, #8]
 8006fcc:	607a      	str	r2, [r7, #4]
 8006fce:	603b      	str	r3, [r7, #0]
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
 8006fd6:	4a0a      	ldr	r2, [pc, #40]	; (8007000 <disk_write+0x3c>)
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	68dc      	ldr	r4, [r3, #12]
 8006fe0:	7bfb      	ldrb	r3, [r7, #15]
 8006fe2:	4a07      	ldr	r2, [pc, #28]	; (8007000 <disk_write+0x3c>)
 8006fe4:	4413      	add	r3, r2
 8006fe6:	7a18      	ldrb	r0, [r3, #8]
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	68b9      	ldr	r1, [r7, #8]
 8006fee:	47a0      	blx	r4
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	75fb      	strb	r3, [r7, #23]
  return res;
 8006ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	371c      	adds	r7, #28
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd90      	pop	{r4, r7, pc}
 8006ffe:	bf00      	nop
 8007000:	200038a0 	.word	0x200038a0

08007004 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	4603      	mov	r3, r0
 800700c:	603a      	str	r2, [r7, #0]
 800700e:	71fb      	strb	r3, [r7, #7]
 8007010:	460b      	mov	r3, r1
 8007012:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007014:	79fb      	ldrb	r3, [r7, #7]
 8007016:	4a09      	ldr	r2, [pc, #36]	; (800703c <disk_ioctl+0x38>)
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4413      	add	r3, r2
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	79fa      	ldrb	r2, [r7, #7]
 8007022:	4906      	ldr	r1, [pc, #24]	; (800703c <disk_ioctl+0x38>)
 8007024:	440a      	add	r2, r1
 8007026:	7a10      	ldrb	r0, [r2, #8]
 8007028:	79b9      	ldrb	r1, [r7, #6]
 800702a:	683a      	ldr	r2, [r7, #0]
 800702c:	4798      	blx	r3
 800702e:	4603      	mov	r3, r0
 8007030:	73fb      	strb	r3, [r7, #15]
  return res;
 8007032:	7bfb      	ldrb	r3, [r7, #15]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	200038a0 	.word	0x200038a0

08007040 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	3301      	adds	r3, #1
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007050:	89fb      	ldrh	r3, [r7, #14]
 8007052:	021b      	lsls	r3, r3, #8
 8007054:	b21a      	sxth	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	b21b      	sxth	r3, r3
 800705c:	4313      	orrs	r3, r2
 800705e:	b21b      	sxth	r3, r3
 8007060:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007062:	89fb      	ldrh	r3, [r7, #14]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3714      	adds	r7, #20
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3303      	adds	r3, #3
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	021b      	lsls	r3, r3, #8
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	3202      	adds	r2, #2
 8007088:	7812      	ldrb	r2, [r2, #0]
 800708a:	4313      	orrs	r3, r2
 800708c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	021b      	lsls	r3, r3, #8
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	3201      	adds	r2, #1
 8007096:	7812      	ldrb	r2, [r2, #0]
 8007098:	4313      	orrs	r3, r2
 800709a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	021b      	lsls	r3, r3, #8
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	7812      	ldrb	r2, [r2, #0]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	60fb      	str	r3, [r7, #12]
	return rv;
 80070a8:	68fb      	ldr	r3, [r7, #12]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3714      	adds	r7, #20
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80070b6:	b480      	push	{r7}
 80070b8:	b083      	sub	sp, #12
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
 80070be:	460b      	mov	r3, r1
 80070c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	1c5a      	adds	r2, r3, #1
 80070c6:	607a      	str	r2, [r7, #4]
 80070c8:	887a      	ldrh	r2, [r7, #2]
 80070ca:	b2d2      	uxtb	r2, r2
 80070cc:	701a      	strb	r2, [r3, #0]
 80070ce:	887b      	ldrh	r3, [r7, #2]
 80070d0:	0a1b      	lsrs	r3, r3, #8
 80070d2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	1c5a      	adds	r2, r3, #1
 80070d8:	607a      	str	r2, [r7, #4]
 80070da:	887a      	ldrh	r2, [r7, #2]
 80070dc:	b2d2      	uxtb	r2, r2
 80070de:	701a      	strb	r2, [r3, #0]
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	1c5a      	adds	r2, r3, #1
 80070fa:	607a      	str	r2, [r7, #4]
 80070fc:	683a      	ldr	r2, [r7, #0]
 80070fe:	b2d2      	uxtb	r2, r2
 8007100:	701a      	strb	r2, [r3, #0]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	0a1b      	lsrs	r3, r3, #8
 8007106:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	1c5a      	adds	r2, r3, #1
 800710c:	607a      	str	r2, [r7, #4]
 800710e:	683a      	ldr	r2, [r7, #0]
 8007110:	b2d2      	uxtb	r2, r2
 8007112:	701a      	strb	r2, [r3, #0]
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	0a1b      	lsrs	r3, r3, #8
 8007118:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	1c5a      	adds	r2, r3, #1
 800711e:	607a      	str	r2, [r7, #4]
 8007120:	683a      	ldr	r2, [r7, #0]
 8007122:	b2d2      	uxtb	r2, r2
 8007124:	701a      	strb	r2, [r3, #0]
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	0a1b      	lsrs	r3, r3, #8
 800712a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	1c5a      	adds	r2, r3, #1
 8007130:	607a      	str	r2, [r7, #4]
 8007132:	683a      	ldr	r2, [r7, #0]
 8007134:	b2d2      	uxtb	r2, r2
 8007136:	701a      	strb	r2, [r3, #0]
}
 8007138:	bf00      	nop
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007144:	b480      	push	{r7}
 8007146:	b087      	sub	sp, #28
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00d      	beq.n	800717a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	1c53      	adds	r3, r2, #1
 8007162:	613b      	str	r3, [r7, #16]
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	1c59      	adds	r1, r3, #1
 8007168:	6179      	str	r1, [r7, #20]
 800716a:	7812      	ldrb	r2, [r2, #0]
 800716c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	3b01      	subs	r3, #1
 8007172:	607b      	str	r3, [r7, #4]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1f1      	bne.n	800715e <mem_cpy+0x1a>
	}
}
 800717a:	bf00      	nop
 800717c:	371c      	adds	r7, #28
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007186:	b480      	push	{r7}
 8007188:	b087      	sub	sp, #28
 800718a:	af00      	add	r7, sp, #0
 800718c:	60f8      	str	r0, [r7, #12]
 800718e:	60b9      	str	r1, [r7, #8]
 8007190:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	1c5a      	adds	r2, r3, #1
 800719a:	617a      	str	r2, [r7, #20]
 800719c:	68ba      	ldr	r2, [r7, #8]
 800719e:	b2d2      	uxtb	r2, r2
 80071a0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	3b01      	subs	r3, #1
 80071a6:	607b      	str	r3, [r7, #4]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1f3      	bne.n	8007196 <mem_set+0x10>
}
 80071ae:	bf00      	nop
 80071b0:	bf00      	nop
 80071b2:	371c      	adds	r7, #28
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80071bc:	b480      	push	{r7}
 80071be:	b089      	sub	sp, #36	; 0x24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	61fb      	str	r3, [r7, #28]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80071d0:	2300      	movs	r3, #0
 80071d2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	1c5a      	adds	r2, r3, #1
 80071d8:	61fa      	str	r2, [r7, #28]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	4619      	mov	r1, r3
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	1c5a      	adds	r2, r3, #1
 80071e2:	61ba      	str	r2, [r7, #24]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	1acb      	subs	r3, r1, r3
 80071e8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	3b01      	subs	r3, #1
 80071ee:	607b      	str	r3, [r7, #4]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d002      	beq.n	80071fc <mem_cmp+0x40>
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d0eb      	beq.n	80071d4 <mem_cmp+0x18>

	return r;
 80071fc:	697b      	ldr	r3, [r7, #20]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3724      	adds	r7, #36	; 0x24
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800720a:	b480      	push	{r7}
 800720c:	b083      	sub	sp, #12
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
 8007212:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007214:	e002      	b.n	800721c <chk_chr+0x12>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	3301      	adds	r3, #1
 800721a:	607b      	str	r3, [r7, #4]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d005      	beq.n	8007230 <chk_chr+0x26>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	461a      	mov	r2, r3
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	4293      	cmp	r3, r2
 800722e:	d1f2      	bne.n	8007216 <chk_chr+0xc>
	return *str;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	781b      	ldrb	r3, [r3, #0]
}
 8007234:	4618      	mov	r0, r3
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800724a:	2300      	movs	r3, #0
 800724c:	60bb      	str	r3, [r7, #8]
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	60fb      	str	r3, [r7, #12]
 8007252:	e029      	b.n	80072a8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007254:	4a27      	ldr	r2, [pc, #156]	; (80072f4 <chk_lock+0xb4>)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	011b      	lsls	r3, r3, #4
 800725a:	4413      	add	r3, r2
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d01d      	beq.n	800729e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007262:	4a24      	ldr	r2, [pc, #144]	; (80072f4 <chk_lock+0xb4>)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	011b      	lsls	r3, r3, #4
 8007268:	4413      	add	r3, r2
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	429a      	cmp	r2, r3
 8007272:	d116      	bne.n	80072a2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007274:	4a1f      	ldr	r2, [pc, #124]	; (80072f4 <chk_lock+0xb4>)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	011b      	lsls	r3, r3, #4
 800727a:	4413      	add	r3, r2
 800727c:	3304      	adds	r3, #4
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007284:	429a      	cmp	r2, r3
 8007286:	d10c      	bne.n	80072a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007288:	4a1a      	ldr	r2, [pc, #104]	; (80072f4 <chk_lock+0xb4>)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	011b      	lsls	r3, r3, #4
 800728e:	4413      	add	r3, r2
 8007290:	3308      	adds	r3, #8
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007298:	429a      	cmp	r2, r3
 800729a:	d102      	bne.n	80072a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800729c:	e007      	b.n	80072ae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800729e:	2301      	movs	r3, #1
 80072a0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	3301      	adds	r3, #1
 80072a6:	60fb      	str	r3, [r7, #12]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d9d2      	bls.n	8007254 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d109      	bne.n	80072c8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d102      	bne.n	80072c0 <chk_lock+0x80>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d101      	bne.n	80072c4 <chk_lock+0x84>
 80072c0:	2300      	movs	r3, #0
 80072c2:	e010      	b.n	80072e6 <chk_lock+0xa6>
 80072c4:	2312      	movs	r3, #18
 80072c6:	e00e      	b.n	80072e6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d108      	bne.n	80072e0 <chk_lock+0xa0>
 80072ce:	4a09      	ldr	r2, [pc, #36]	; (80072f4 <chk_lock+0xb4>)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	011b      	lsls	r3, r3, #4
 80072d4:	4413      	add	r3, r2
 80072d6:	330c      	adds	r3, #12
 80072d8:	881b      	ldrh	r3, [r3, #0]
 80072da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072de:	d101      	bne.n	80072e4 <chk_lock+0xa4>
 80072e0:	2310      	movs	r3, #16
 80072e2:	e000      	b.n	80072e6 <chk_lock+0xa6>
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3714      	adds	r7, #20
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	20003680 	.word	0x20003680

080072f8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80072fe:	2300      	movs	r3, #0
 8007300:	607b      	str	r3, [r7, #4]
 8007302:	e002      	b.n	800730a <enq_lock+0x12>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	3301      	adds	r3, #1
 8007308:	607b      	str	r3, [r7, #4]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d806      	bhi.n	800731e <enq_lock+0x26>
 8007310:	4a09      	ldr	r2, [pc, #36]	; (8007338 <enq_lock+0x40>)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	011b      	lsls	r3, r3, #4
 8007316:	4413      	add	r3, r2
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d1f2      	bne.n	8007304 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2b02      	cmp	r3, #2
 8007322:	bf14      	ite	ne
 8007324:	2301      	movne	r3, #1
 8007326:	2300      	moveq	r3, #0
 8007328:	b2db      	uxtb	r3, r3
}
 800732a:	4618      	mov	r0, r3
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	20003680 	.word	0x20003680

0800733c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007346:	2300      	movs	r3, #0
 8007348:	60fb      	str	r3, [r7, #12]
 800734a:	e01f      	b.n	800738c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800734c:	4a41      	ldr	r2, [pc, #260]	; (8007454 <inc_lock+0x118>)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	011b      	lsls	r3, r3, #4
 8007352:	4413      	add	r3, r2
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	429a      	cmp	r2, r3
 800735c:	d113      	bne.n	8007386 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800735e:	4a3d      	ldr	r2, [pc, #244]	; (8007454 <inc_lock+0x118>)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	011b      	lsls	r3, r3, #4
 8007364:	4413      	add	r3, r2
 8007366:	3304      	adds	r3, #4
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800736e:	429a      	cmp	r2, r3
 8007370:	d109      	bne.n	8007386 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007372:	4a38      	ldr	r2, [pc, #224]	; (8007454 <inc_lock+0x118>)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	011b      	lsls	r3, r3, #4
 8007378:	4413      	add	r3, r2
 800737a:	3308      	adds	r3, #8
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007382:	429a      	cmp	r2, r3
 8007384:	d006      	beq.n	8007394 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	3301      	adds	r3, #1
 800738a:	60fb      	str	r3, [r7, #12]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d9dc      	bls.n	800734c <inc_lock+0x10>
 8007392:	e000      	b.n	8007396 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007394:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2b02      	cmp	r3, #2
 800739a:	d132      	bne.n	8007402 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800739c:	2300      	movs	r3, #0
 800739e:	60fb      	str	r3, [r7, #12]
 80073a0:	e002      	b.n	80073a8 <inc_lock+0x6c>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	3301      	adds	r3, #1
 80073a6:	60fb      	str	r3, [r7, #12]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d806      	bhi.n	80073bc <inc_lock+0x80>
 80073ae:	4a29      	ldr	r2, [pc, #164]	; (8007454 <inc_lock+0x118>)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	011b      	lsls	r3, r3, #4
 80073b4:	4413      	add	r3, r2
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1f2      	bne.n	80073a2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d101      	bne.n	80073c6 <inc_lock+0x8a>
 80073c2:	2300      	movs	r3, #0
 80073c4:	e040      	b.n	8007448 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	4922      	ldr	r1, [pc, #136]	; (8007454 <inc_lock+0x118>)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	011b      	lsls	r3, r3, #4
 80073d0:	440b      	add	r3, r1
 80073d2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	689a      	ldr	r2, [r3, #8]
 80073d8:	491e      	ldr	r1, [pc, #120]	; (8007454 <inc_lock+0x118>)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	011b      	lsls	r3, r3, #4
 80073de:	440b      	add	r3, r1
 80073e0:	3304      	adds	r3, #4
 80073e2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	695a      	ldr	r2, [r3, #20]
 80073e8:	491a      	ldr	r1, [pc, #104]	; (8007454 <inc_lock+0x118>)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	011b      	lsls	r3, r3, #4
 80073ee:	440b      	add	r3, r1
 80073f0:	3308      	adds	r3, #8
 80073f2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80073f4:	4a17      	ldr	r2, [pc, #92]	; (8007454 <inc_lock+0x118>)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	011b      	lsls	r3, r3, #4
 80073fa:	4413      	add	r3, r2
 80073fc:	330c      	adds	r3, #12
 80073fe:	2200      	movs	r2, #0
 8007400:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d009      	beq.n	800741c <inc_lock+0xe0>
 8007408:	4a12      	ldr	r2, [pc, #72]	; (8007454 <inc_lock+0x118>)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	011b      	lsls	r3, r3, #4
 800740e:	4413      	add	r3, r2
 8007410:	330c      	adds	r3, #12
 8007412:	881b      	ldrh	r3, [r3, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d001      	beq.n	800741c <inc_lock+0xe0>
 8007418:	2300      	movs	r3, #0
 800741a:	e015      	b.n	8007448 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d108      	bne.n	8007434 <inc_lock+0xf8>
 8007422:	4a0c      	ldr	r2, [pc, #48]	; (8007454 <inc_lock+0x118>)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	011b      	lsls	r3, r3, #4
 8007428:	4413      	add	r3, r2
 800742a:	330c      	adds	r3, #12
 800742c:	881b      	ldrh	r3, [r3, #0]
 800742e:	3301      	adds	r3, #1
 8007430:	b29a      	uxth	r2, r3
 8007432:	e001      	b.n	8007438 <inc_lock+0xfc>
 8007434:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007438:	4906      	ldr	r1, [pc, #24]	; (8007454 <inc_lock+0x118>)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	011b      	lsls	r3, r3, #4
 800743e:	440b      	add	r3, r1
 8007440:	330c      	adds	r3, #12
 8007442:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	3301      	adds	r3, #1
}
 8007448:	4618      	mov	r0, r3
 800744a:	3714      	adds	r7, #20
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr
 8007454:	20003680 	.word	0x20003680

08007458 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	3b01      	subs	r3, #1
 8007464:	607b      	str	r3, [r7, #4]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d825      	bhi.n	80074b8 <dec_lock+0x60>
		n = Files[i].ctr;
 800746c:	4a17      	ldr	r2, [pc, #92]	; (80074cc <dec_lock+0x74>)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	011b      	lsls	r3, r3, #4
 8007472:	4413      	add	r3, r2
 8007474:	330c      	adds	r3, #12
 8007476:	881b      	ldrh	r3, [r3, #0]
 8007478:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800747a:	89fb      	ldrh	r3, [r7, #14]
 800747c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007480:	d101      	bne.n	8007486 <dec_lock+0x2e>
 8007482:	2300      	movs	r3, #0
 8007484:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007486:	89fb      	ldrh	r3, [r7, #14]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <dec_lock+0x3a>
 800748c:	89fb      	ldrh	r3, [r7, #14]
 800748e:	3b01      	subs	r3, #1
 8007490:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007492:	4a0e      	ldr	r2, [pc, #56]	; (80074cc <dec_lock+0x74>)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	011b      	lsls	r3, r3, #4
 8007498:	4413      	add	r3, r2
 800749a:	330c      	adds	r3, #12
 800749c:	89fa      	ldrh	r2, [r7, #14]
 800749e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80074a0:	89fb      	ldrh	r3, [r7, #14]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d105      	bne.n	80074b2 <dec_lock+0x5a>
 80074a6:	4a09      	ldr	r2, [pc, #36]	; (80074cc <dec_lock+0x74>)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	011b      	lsls	r3, r3, #4
 80074ac:	4413      	add	r3, r2
 80074ae:	2200      	movs	r2, #0
 80074b0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	737b      	strb	r3, [r7, #13]
 80074b6:	e001      	b.n	80074bc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80074b8:	2302      	movs	r3, #2
 80074ba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80074bc:	7b7b      	ldrb	r3, [r7, #13]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	20003680 	.word	0x20003680

080074d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80074d8:	2300      	movs	r3, #0
 80074da:	60fb      	str	r3, [r7, #12]
 80074dc:	e010      	b.n	8007500 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80074de:	4a0d      	ldr	r2, [pc, #52]	; (8007514 <clear_lock+0x44>)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	011b      	lsls	r3, r3, #4
 80074e4:	4413      	add	r3, r2
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d105      	bne.n	80074fa <clear_lock+0x2a>
 80074ee:	4a09      	ldr	r2, [pc, #36]	; (8007514 <clear_lock+0x44>)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	011b      	lsls	r3, r3, #4
 80074f4:	4413      	add	r3, r2
 80074f6:	2200      	movs	r2, #0
 80074f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	3301      	adds	r3, #1
 80074fe:	60fb      	str	r3, [r7, #12]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d9eb      	bls.n	80074de <clear_lock+0xe>
	}
}
 8007506:	bf00      	nop
 8007508:	bf00      	nop
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr
 8007514:	20003680 	.word	0x20003680

08007518 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007520:	2300      	movs	r3, #0
 8007522:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	78db      	ldrb	r3, [r3, #3]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d034      	beq.n	8007596 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007530:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	7858      	ldrb	r0, [r3, #1]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800753c:	2301      	movs	r3, #1
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	f7ff fd40 	bl	8006fc4 <disk_write>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d002      	beq.n	8007550 <sync_window+0x38>
			res = FR_DISK_ERR;
 800754a:	2301      	movs	r3, #1
 800754c:	73fb      	strb	r3, [r7, #15]
 800754e:	e022      	b.n	8007596 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	1ad2      	subs	r2, r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	429a      	cmp	r2, r3
 8007564:	d217      	bcs.n	8007596 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	789b      	ldrb	r3, [r3, #2]
 800756a:	613b      	str	r3, [r7, #16]
 800756c:	e010      	b.n	8007590 <sync_window+0x78>
					wsect += fs->fsize;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a1b      	ldr	r3, [r3, #32]
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	4413      	add	r3, r2
 8007576:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	7858      	ldrb	r0, [r3, #1]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007582:	2301      	movs	r3, #1
 8007584:	697a      	ldr	r2, [r7, #20]
 8007586:	f7ff fd1d 	bl	8006fc4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	3b01      	subs	r3, #1
 800758e:	613b      	str	r3, [r7, #16]
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d8eb      	bhi.n	800756e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007596:	7bfb      	ldrb	r3, [r7, #15]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3718      	adds	r7, #24
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80075aa:	2300      	movs	r3, #0
 80075ac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b2:	683a      	ldr	r2, [r7, #0]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d01b      	beq.n	80075f0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f7ff ffad 	bl	8007518 <sync_window>
 80075be:	4603      	mov	r3, r0
 80075c0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80075c2:	7bfb      	ldrb	r3, [r7, #15]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d113      	bne.n	80075f0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	7858      	ldrb	r0, [r3, #1]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80075d2:	2301      	movs	r3, #1
 80075d4:	683a      	ldr	r2, [r7, #0]
 80075d6:	f7ff fcd5 	bl	8006f84 <disk_read>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d004      	beq.n	80075ea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80075e0:	f04f 33ff 	mov.w	r3, #4294967295
 80075e4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
	...

080075fc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7ff ff87 	bl	8007518 <sync_window>
 800760a:	4603      	mov	r3, r0
 800760c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800760e:	7bfb      	ldrb	r3, [r7, #15]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d159      	bne.n	80076c8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	2b03      	cmp	r3, #3
 800761a:	d149      	bne.n	80076b0 <sync_fs+0xb4>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	791b      	ldrb	r3, [r3, #4]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d145      	bne.n	80076b0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	899b      	ldrh	r3, [r3, #12]
 800762e:	461a      	mov	r2, r3
 8007630:	2100      	movs	r1, #0
 8007632:	f7ff fda8 	bl	8007186 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	3338      	adds	r3, #56	; 0x38
 800763a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800763e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007642:	4618      	mov	r0, r3
 8007644:	f7ff fd37 	bl	80070b6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	3338      	adds	r3, #56	; 0x38
 800764c:	4921      	ldr	r1, [pc, #132]	; (80076d4 <sync_fs+0xd8>)
 800764e:	4618      	mov	r0, r3
 8007650:	f7ff fd4c 	bl	80070ec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	3338      	adds	r3, #56	; 0x38
 8007658:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800765c:	491e      	ldr	r1, [pc, #120]	; (80076d8 <sync_fs+0xdc>)
 800765e:	4618      	mov	r0, r3
 8007660:	f7ff fd44 	bl	80070ec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	3338      	adds	r3, #56	; 0x38
 8007668:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	699b      	ldr	r3, [r3, #24]
 8007670:	4619      	mov	r1, r3
 8007672:	4610      	mov	r0, r2
 8007674:	f7ff fd3a 	bl	80070ec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	3338      	adds	r3, #56	; 0x38
 800767c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	695b      	ldr	r3, [r3, #20]
 8007684:	4619      	mov	r1, r3
 8007686:	4610      	mov	r0, r2
 8007688:	f7ff fd30 	bl	80070ec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007690:	1c5a      	adds	r2, r3, #1
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	7858      	ldrb	r0, [r3, #1]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076a4:	2301      	movs	r3, #1
 80076a6:	f7ff fc8d 	bl	8006fc4 <disk_write>
			fs->fsi_flag = 0;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	785b      	ldrb	r3, [r3, #1]
 80076b4:	2200      	movs	r2, #0
 80076b6:	2100      	movs	r1, #0
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7ff fca3 	bl	8007004 <disk_ioctl>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d001      	beq.n	80076c8 <sync_fs+0xcc>
 80076c4:	2301      	movs	r3, #1
 80076c6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	41615252 	.word	0x41615252
 80076d8:	61417272 	.word	0x61417272

080076dc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	3b02      	subs	r3, #2
 80076ea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	69db      	ldr	r3, [r3, #28]
 80076f0:	3b02      	subs	r3, #2
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d301      	bcc.n	80076fc <clust2sect+0x20>
 80076f8:	2300      	movs	r3, #0
 80076fa:	e008      	b.n	800770e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	895b      	ldrh	r3, [r3, #10]
 8007700:	461a      	mov	r2, r3
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	fb03 f202 	mul.w	r2, r3, r2
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800770c:	4413      	add	r3, r2
}
 800770e:	4618      	mov	r0, r3
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b086      	sub	sp, #24
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
 8007722:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d904      	bls.n	800773a <get_fat+0x20>
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	69db      	ldr	r3, [r3, #28]
 8007734:	683a      	ldr	r2, [r7, #0]
 8007736:	429a      	cmp	r2, r3
 8007738:	d302      	bcc.n	8007740 <get_fat+0x26>
		val = 1;	/* Internal error */
 800773a:	2301      	movs	r3, #1
 800773c:	617b      	str	r3, [r7, #20]
 800773e:	e0bb      	b.n	80078b8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007740:	f04f 33ff 	mov.w	r3, #4294967295
 8007744:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	2b03      	cmp	r3, #3
 800774c:	f000 8083 	beq.w	8007856 <get_fat+0x13c>
 8007750:	2b03      	cmp	r3, #3
 8007752:	f300 80a7 	bgt.w	80078a4 <get_fat+0x18a>
 8007756:	2b01      	cmp	r3, #1
 8007758:	d002      	beq.n	8007760 <get_fat+0x46>
 800775a:	2b02      	cmp	r3, #2
 800775c:	d056      	beq.n	800780c <get_fat+0xf2>
 800775e:	e0a1      	b.n	80078a4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	60fb      	str	r3, [r7, #12]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	085b      	lsrs	r3, r3, #1
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	4413      	add	r3, r2
 800776c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	899b      	ldrh	r3, [r3, #12]
 8007776:	4619      	mov	r1, r3
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	fbb3 f3f1 	udiv	r3, r3, r1
 800777e:	4413      	add	r3, r2
 8007780:	4619      	mov	r1, r3
 8007782:	6938      	ldr	r0, [r7, #16]
 8007784:	f7ff ff0c 	bl	80075a0 <move_window>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	f040 808d 	bne.w	80078aa <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	1c5a      	adds	r2, r3, #1
 8007794:	60fa      	str	r2, [r7, #12]
 8007796:	693a      	ldr	r2, [r7, #16]
 8007798:	8992      	ldrh	r2, [r2, #12]
 800779a:	fbb3 f1f2 	udiv	r1, r3, r2
 800779e:	fb01 f202 	mul.w	r2, r1, r2
 80077a2:	1a9b      	subs	r3, r3, r2
 80077a4:	693a      	ldr	r2, [r7, #16]
 80077a6:	4413      	add	r3, r2
 80077a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80077ac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	899b      	ldrh	r3, [r3, #12]
 80077b6:	4619      	mov	r1, r3
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80077be:	4413      	add	r3, r2
 80077c0:	4619      	mov	r1, r3
 80077c2:	6938      	ldr	r0, [r7, #16]
 80077c4:	f7ff feec 	bl	80075a0 <move_window>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d16f      	bne.n	80078ae <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	899b      	ldrh	r3, [r3, #12]
 80077d2:	461a      	mov	r2, r3
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80077da:	fb01 f202 	mul.w	r2, r1, r2
 80077de:	1a9b      	subs	r3, r3, r2
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	4413      	add	r3, r2
 80077e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80077e8:	021b      	lsls	r3, r3, #8
 80077ea:	461a      	mov	r2, r3
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	f003 0301 	and.w	r3, r3, #1
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d002      	beq.n	8007802 <get_fat+0xe8>
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	091b      	lsrs	r3, r3, #4
 8007800:	e002      	b.n	8007808 <get_fat+0xee>
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007808:	617b      	str	r3, [r7, #20]
			break;
 800780a:	e055      	b.n	80078b8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	899b      	ldrh	r3, [r3, #12]
 8007814:	085b      	lsrs	r3, r3, #1
 8007816:	b29b      	uxth	r3, r3
 8007818:	4619      	mov	r1, r3
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007820:	4413      	add	r3, r2
 8007822:	4619      	mov	r1, r3
 8007824:	6938      	ldr	r0, [r7, #16]
 8007826:	f7ff febb 	bl	80075a0 <move_window>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d140      	bne.n	80078b2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	005b      	lsls	r3, r3, #1
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	8992      	ldrh	r2, [r2, #12]
 800783e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007842:	fb00 f202 	mul.w	r2, r0, r2
 8007846:	1a9b      	subs	r3, r3, r2
 8007848:	440b      	add	r3, r1
 800784a:	4618      	mov	r0, r3
 800784c:	f7ff fbf8 	bl	8007040 <ld_word>
 8007850:	4603      	mov	r3, r0
 8007852:	617b      	str	r3, [r7, #20]
			break;
 8007854:	e030      	b.n	80078b8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	899b      	ldrh	r3, [r3, #12]
 800785e:	089b      	lsrs	r3, r3, #2
 8007860:	b29b      	uxth	r3, r3
 8007862:	4619      	mov	r1, r3
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	fbb3 f3f1 	udiv	r3, r3, r1
 800786a:	4413      	add	r3, r2
 800786c:	4619      	mov	r1, r3
 800786e:	6938      	ldr	r0, [r7, #16]
 8007870:	f7ff fe96 	bl	80075a0 <move_window>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d11d      	bne.n	80078b6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	8992      	ldrh	r2, [r2, #12]
 8007888:	fbb3 f0f2 	udiv	r0, r3, r2
 800788c:	fb00 f202 	mul.w	r2, r0, r2
 8007890:	1a9b      	subs	r3, r3, r2
 8007892:	440b      	add	r3, r1
 8007894:	4618      	mov	r0, r3
 8007896:	f7ff fbeb 	bl	8007070 <ld_dword>
 800789a:	4603      	mov	r3, r0
 800789c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80078a0:	617b      	str	r3, [r7, #20]
			break;
 80078a2:	e009      	b.n	80078b8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80078a4:	2301      	movs	r3, #1
 80078a6:	617b      	str	r3, [r7, #20]
 80078a8:	e006      	b.n	80078b8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80078aa:	bf00      	nop
 80078ac:	e004      	b.n	80078b8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80078ae:	bf00      	nop
 80078b0:	e002      	b.n	80078b8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80078b2:	bf00      	nop
 80078b4:	e000      	b.n	80078b8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80078b6:	bf00      	nop
		}
	}

	return val;
 80078b8:	697b      	ldr	r3, [r7, #20]
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3718      	adds	r7, #24
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80078c2:	b590      	push	{r4, r7, lr}
 80078c4:	b089      	sub	sp, #36	; 0x24
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	60f8      	str	r0, [r7, #12]
 80078ca:	60b9      	str	r1, [r7, #8]
 80078cc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80078ce:	2302      	movs	r3, #2
 80078d0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	f240 8102 	bls.w	8007ade <put_fat+0x21c>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	69db      	ldr	r3, [r3, #28]
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	f080 80fc 	bcs.w	8007ade <put_fat+0x21c>
		switch (fs->fs_type) {
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	2b03      	cmp	r3, #3
 80078ec:	f000 80b6 	beq.w	8007a5c <put_fat+0x19a>
 80078f0:	2b03      	cmp	r3, #3
 80078f2:	f300 80fd 	bgt.w	8007af0 <put_fat+0x22e>
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d003      	beq.n	8007902 <put_fat+0x40>
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	f000 8083 	beq.w	8007a06 <put_fat+0x144>
 8007900:	e0f6      	b.n	8007af0 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	61bb      	str	r3, [r7, #24]
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	085b      	lsrs	r3, r3, #1
 800790a:	69ba      	ldr	r2, [r7, #24]
 800790c:	4413      	add	r3, r2
 800790e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	899b      	ldrh	r3, [r3, #12]
 8007918:	4619      	mov	r1, r3
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007920:	4413      	add	r3, r2
 8007922:	4619      	mov	r1, r3
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f7ff fe3b 	bl	80075a0 <move_window>
 800792a:	4603      	mov	r3, r0
 800792c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800792e:	7ffb      	ldrb	r3, [r7, #31]
 8007930:	2b00      	cmp	r3, #0
 8007932:	f040 80d6 	bne.w	8007ae2 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	1c5a      	adds	r2, r3, #1
 8007940:	61ba      	str	r2, [r7, #24]
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	8992      	ldrh	r2, [r2, #12]
 8007946:	fbb3 f0f2 	udiv	r0, r3, r2
 800794a:	fb00 f202 	mul.w	r2, r0, r2
 800794e:	1a9b      	subs	r3, r3, r2
 8007950:	440b      	add	r3, r1
 8007952:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	f003 0301 	and.w	r3, r3, #1
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00d      	beq.n	800797a <put_fat+0xb8>
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	b25b      	sxtb	r3, r3
 8007964:	f003 030f 	and.w	r3, r3, #15
 8007968:	b25a      	sxtb	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	b2db      	uxtb	r3, r3
 800796e:	011b      	lsls	r3, r3, #4
 8007970:	b25b      	sxtb	r3, r3
 8007972:	4313      	orrs	r3, r2
 8007974:	b25b      	sxtb	r3, r3
 8007976:	b2db      	uxtb	r3, r3
 8007978:	e001      	b.n	800797e <put_fat+0xbc>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	b2db      	uxtb	r3, r3
 800797e:	697a      	ldr	r2, [r7, #20]
 8007980:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2201      	movs	r2, #1
 8007986:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	899b      	ldrh	r3, [r3, #12]
 8007990:	4619      	mov	r1, r3
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	fbb3 f3f1 	udiv	r3, r3, r1
 8007998:	4413      	add	r3, r2
 800799a:	4619      	mov	r1, r3
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f7ff fdff 	bl	80075a0 <move_window>
 80079a2:	4603      	mov	r3, r0
 80079a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80079a6:	7ffb      	ldrb	r3, [r7, #31]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f040 809c 	bne.w	8007ae6 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	899b      	ldrh	r3, [r3, #12]
 80079b8:	461a      	mov	r2, r3
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80079c0:	fb00 f202 	mul.w	r2, r0, r2
 80079c4:	1a9b      	subs	r3, r3, r2
 80079c6:	440b      	add	r3, r1
 80079c8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	f003 0301 	and.w	r3, r3, #1
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d003      	beq.n	80079dc <put_fat+0x11a>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	091b      	lsrs	r3, r3, #4
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	e00e      	b.n	80079fa <put_fat+0x138>
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	b25b      	sxtb	r3, r3
 80079e2:	f023 030f 	bic.w	r3, r3, #15
 80079e6:	b25a      	sxtb	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	0a1b      	lsrs	r3, r3, #8
 80079ec:	b25b      	sxtb	r3, r3
 80079ee:	f003 030f 	and.w	r3, r3, #15
 80079f2:	b25b      	sxtb	r3, r3
 80079f4:	4313      	orrs	r3, r2
 80079f6:	b25b      	sxtb	r3, r3
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2201      	movs	r2, #1
 8007a02:	70da      	strb	r2, [r3, #3]
			break;
 8007a04:	e074      	b.n	8007af0 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	899b      	ldrh	r3, [r3, #12]
 8007a0e:	085b      	lsrs	r3, r3, #1
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	4619      	mov	r1, r3
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a1a:	4413      	add	r3, r2
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f7ff fdbe 	bl	80075a0 <move_window>
 8007a24:	4603      	mov	r3, r0
 8007a26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007a28:	7ffb      	ldrb	r3, [r7, #31]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d15d      	bne.n	8007aea <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	005b      	lsls	r3, r3, #1
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	8992      	ldrh	r2, [r2, #12]
 8007a3c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a40:	fb00 f202 	mul.w	r2, r0, r2
 8007a44:	1a9b      	subs	r3, r3, r2
 8007a46:	440b      	add	r3, r1
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	b292      	uxth	r2, r2
 8007a4c:	4611      	mov	r1, r2
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7ff fb31 	bl	80070b6 <st_word>
			fs->wflag = 1;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2201      	movs	r2, #1
 8007a58:	70da      	strb	r2, [r3, #3]
			break;
 8007a5a:	e049      	b.n	8007af0 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	899b      	ldrh	r3, [r3, #12]
 8007a64:	089b      	lsrs	r3, r3, #2
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	4619      	mov	r1, r3
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a70:	4413      	add	r3, r2
 8007a72:	4619      	mov	r1, r3
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f7ff fd93 	bl	80075a0 <move_window>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007a7e:	7ffb      	ldrb	r3, [r7, #31]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d134      	bne.n	8007aee <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	8992      	ldrh	r2, [r2, #12]
 8007a98:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a9c:	fb00 f202 	mul.w	r2, r0, r2
 8007aa0:	1a9b      	subs	r3, r3, r2
 8007aa2:	440b      	add	r3, r1
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7ff fae3 	bl	8007070 <ld_dword>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007ab0:	4323      	orrs	r3, r4
 8007ab2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	8992      	ldrh	r2, [r2, #12]
 8007ac2:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ac6:	fb00 f202 	mul.w	r2, r0, r2
 8007aca:	1a9b      	subs	r3, r3, r2
 8007acc:	440b      	add	r3, r1
 8007ace:	6879      	ldr	r1, [r7, #4]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7ff fb0b 	bl	80070ec <st_dword>
			fs->wflag = 1;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	70da      	strb	r2, [r3, #3]
			break;
 8007adc:	e008      	b.n	8007af0 <put_fat+0x22e>
		}
	}
 8007ade:	bf00      	nop
 8007ae0:	e006      	b.n	8007af0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007ae2:	bf00      	nop
 8007ae4:	e004      	b.n	8007af0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007ae6:	bf00      	nop
 8007ae8:	e002      	b.n	8007af0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007aea:	bf00      	nop
 8007aec:	e000      	b.n	8007af0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007aee:	bf00      	nop
	return res;
 8007af0:	7ffb      	ldrb	r3, [r7, #31]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3724      	adds	r7, #36	; 0x24
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd90      	pop	{r4, r7, pc}

08007afa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b088      	sub	sp, #32
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	60f8      	str	r0, [r7, #12]
 8007b02:	60b9      	str	r1, [r7, #8]
 8007b04:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d904      	bls.n	8007b20 <remove_chain+0x26>
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	69db      	ldr	r3, [r3, #28]
 8007b1a:	68ba      	ldr	r2, [r7, #8]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d301      	bcc.n	8007b24 <remove_chain+0x2a>
 8007b20:	2302      	movs	r3, #2
 8007b22:	e04b      	b.n	8007bbc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00c      	beq.n	8007b44 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b2e:	6879      	ldr	r1, [r7, #4]
 8007b30:	69b8      	ldr	r0, [r7, #24]
 8007b32:	f7ff fec6 	bl	80078c2 <put_fat>
 8007b36:	4603      	mov	r3, r0
 8007b38:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007b3a:	7ffb      	ldrb	r3, [r7, #31]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <remove_chain+0x4a>
 8007b40:	7ffb      	ldrb	r3, [r7, #31]
 8007b42:	e03b      	b.n	8007bbc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007b44:	68b9      	ldr	r1, [r7, #8]
 8007b46:	68f8      	ldr	r0, [r7, #12]
 8007b48:	f7ff fde7 	bl	800771a <get_fat>
 8007b4c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d031      	beq.n	8007bb8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d101      	bne.n	8007b5e <remove_chain+0x64>
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	e02e      	b.n	8007bbc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b64:	d101      	bne.n	8007b6a <remove_chain+0x70>
 8007b66:	2301      	movs	r3, #1
 8007b68:	e028      	b.n	8007bbc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	68b9      	ldr	r1, [r7, #8]
 8007b6e:	69b8      	ldr	r0, [r7, #24]
 8007b70:	f7ff fea7 	bl	80078c2 <put_fat>
 8007b74:	4603      	mov	r3, r0
 8007b76:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007b78:	7ffb      	ldrb	r3, [r7, #31]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d001      	beq.n	8007b82 <remove_chain+0x88>
 8007b7e:	7ffb      	ldrb	r3, [r7, #31]
 8007b80:	e01c      	b.n	8007bbc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	699a      	ldr	r2, [r3, #24]
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	69db      	ldr	r3, [r3, #28]
 8007b8a:	3b02      	subs	r3, #2
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d20b      	bcs.n	8007ba8 <remove_chain+0xae>
			fs->free_clst++;
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	699b      	ldr	r3, [r3, #24]
 8007b94:	1c5a      	adds	r2, r3, #1
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	791b      	ldrb	r3, [r3, #4]
 8007b9e:	f043 0301 	orr.w	r3, r3, #1
 8007ba2:	b2da      	uxtb	r2, r3
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	69db      	ldr	r3, [r3, #28]
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d3c6      	bcc.n	8007b44 <remove_chain+0x4a>
 8007bb6:	e000      	b.n	8007bba <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007bb8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3720      	adds	r7, #32
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b088      	sub	sp, #32
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10d      	bne.n	8007bf6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d004      	beq.n	8007bf0 <create_chain+0x2c>
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	69db      	ldr	r3, [r3, #28]
 8007bea:	69ba      	ldr	r2, [r7, #24]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d31b      	bcc.n	8007c28 <create_chain+0x64>
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	61bb      	str	r3, [r7, #24]
 8007bf4:	e018      	b.n	8007c28 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007bf6:	6839      	ldr	r1, [r7, #0]
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7ff fd8e 	bl	800771a <get_fat>
 8007bfe:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d801      	bhi.n	8007c0a <create_chain+0x46>
 8007c06:	2301      	movs	r3, #1
 8007c08:	e070      	b.n	8007cec <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c10:	d101      	bne.n	8007c16 <create_chain+0x52>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	e06a      	b.n	8007cec <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	69db      	ldr	r3, [r3, #28]
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d201      	bcs.n	8007c24 <create_chain+0x60>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	e063      	b.n	8007cec <create_chain+0x128>
		scl = clst;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	69db      	ldr	r3, [r3, #28]
 8007c36:	69fa      	ldr	r2, [r7, #28]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d307      	bcc.n	8007c4c <create_chain+0x88>
				ncl = 2;
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007c40:	69fa      	ldr	r2, [r7, #28]
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d901      	bls.n	8007c4c <create_chain+0x88>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	e04f      	b.n	8007cec <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007c4c:	69f9      	ldr	r1, [r7, #28]
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f7ff fd63 	bl	800771a <get_fat>
 8007c54:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00e      	beq.n	8007c7a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d003      	beq.n	8007c6a <create_chain+0xa6>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c68:	d101      	bne.n	8007c6e <create_chain+0xaa>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	e03e      	b.n	8007cec <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007c6e:	69fa      	ldr	r2, [r7, #28]
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d1da      	bne.n	8007c2c <create_chain+0x68>
 8007c76:	2300      	movs	r3, #0
 8007c78:	e038      	b.n	8007cec <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007c7a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c80:	69f9      	ldr	r1, [r7, #28]
 8007c82:	6938      	ldr	r0, [r7, #16]
 8007c84:	f7ff fe1d 	bl	80078c2 <put_fat>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007c8c:	7dfb      	ldrb	r3, [r7, #23]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d109      	bne.n	8007ca6 <create_chain+0xe2>
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d006      	beq.n	8007ca6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007c98:	69fa      	ldr	r2, [r7, #28]
 8007c9a:	6839      	ldr	r1, [r7, #0]
 8007c9c:	6938      	ldr	r0, [r7, #16]
 8007c9e:	f7ff fe10 	bl	80078c2 <put_fat>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007ca6:	7dfb      	ldrb	r3, [r7, #23]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d116      	bne.n	8007cda <create_chain+0x116>
		fs->last_clst = ncl;
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	69fa      	ldr	r2, [r7, #28]
 8007cb0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	699a      	ldr	r2, [r3, #24]
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	69db      	ldr	r3, [r3, #28]
 8007cba:	3b02      	subs	r3, #2
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d804      	bhi.n	8007cca <create_chain+0x106>
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	699b      	ldr	r3, [r3, #24]
 8007cc4:	1e5a      	subs	r2, r3, #1
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	791b      	ldrb	r3, [r3, #4]
 8007cce:	f043 0301 	orr.w	r3, r3, #1
 8007cd2:	b2da      	uxtb	r2, r3
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	711a      	strb	r2, [r3, #4]
 8007cd8:	e007      	b.n	8007cea <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007cda:	7dfb      	ldrb	r3, [r7, #23]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d102      	bne.n	8007ce6 <create_chain+0x122>
 8007ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ce4:	e000      	b.n	8007ce8 <create_chain+0x124>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007cea:	69fb      	ldr	r3, [r7, #28]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3720      	adds	r7, #32
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b087      	sub	sp, #28
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d08:	3304      	adds	r3, #4
 8007d0a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	899b      	ldrh	r3, [r3, #12]
 8007d10:	461a      	mov	r2, r3
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	8952      	ldrh	r2, [r2, #10]
 8007d1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d20:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	1d1a      	adds	r2, r3, #4
 8007d26:	613a      	str	r2, [r7, #16]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d101      	bne.n	8007d36 <clmt_clust+0x42>
 8007d32:	2300      	movs	r3, #0
 8007d34:	e010      	b.n	8007d58 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d307      	bcc.n	8007d4e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	1ad3      	subs	r3, r2, r3
 8007d44:	617b      	str	r3, [r7, #20]
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	3304      	adds	r3, #4
 8007d4a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007d4c:	e7e9      	b.n	8007d22 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007d4e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	4413      	add	r3, r2
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	371c      	adds	r7, #28
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b086      	sub	sp, #24
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d7a:	d204      	bcs.n	8007d86 <dir_sdi+0x22>
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	f003 031f 	and.w	r3, r3, #31
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d001      	beq.n	8007d8a <dir_sdi+0x26>
		return FR_INT_ERR;
 8007d86:	2302      	movs	r3, #2
 8007d88:	e071      	b.n	8007e6e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	683a      	ldr	r2, [r7, #0]
 8007d8e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d106      	bne.n	8007daa <dir_sdi+0x46>
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d902      	bls.n	8007daa <dir_sdi+0x46>
		clst = fs->dirbase;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10c      	bne.n	8007dca <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	095b      	lsrs	r3, r3, #5
 8007db4:	693a      	ldr	r2, [r7, #16]
 8007db6:	8912      	ldrh	r2, [r2, #8]
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d301      	bcc.n	8007dc0 <dir_sdi+0x5c>
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	e056      	b.n	8007e6e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	61da      	str	r2, [r3, #28]
 8007dc8:	e02d      	b.n	8007e26 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	895b      	ldrh	r3, [r3, #10]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	899b      	ldrh	r3, [r3, #12]
 8007dd4:	fb02 f303 	mul.w	r3, r2, r3
 8007dd8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007dda:	e019      	b.n	8007e10 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6979      	ldr	r1, [r7, #20]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7ff fc9a 	bl	800771a <get_fat>
 8007de6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dee:	d101      	bne.n	8007df4 <dir_sdi+0x90>
 8007df0:	2301      	movs	r3, #1
 8007df2:	e03c      	b.n	8007e6e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d904      	bls.n	8007e04 <dir_sdi+0xa0>
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	69db      	ldr	r3, [r3, #28]
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d301      	bcc.n	8007e08 <dir_sdi+0xa4>
 8007e04:	2302      	movs	r3, #2
 8007e06:	e032      	b.n	8007e6e <dir_sdi+0x10a>
			ofs -= csz;
 8007e08:	683a      	ldr	r2, [r7, #0]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007e10:	683a      	ldr	r2, [r7, #0]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d2e1      	bcs.n	8007ddc <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007e18:	6979      	ldr	r1, [r7, #20]
 8007e1a:	6938      	ldr	r0, [r7, #16]
 8007e1c:	f7ff fc5e 	bl	80076dc <clust2sect>
 8007e20:	4602      	mov	r2, r0
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	697a      	ldr	r2, [r7, #20]
 8007e2a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	69db      	ldr	r3, [r3, #28]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d101      	bne.n	8007e38 <dir_sdi+0xd4>
 8007e34:	2302      	movs	r3, #2
 8007e36:	e01a      	b.n	8007e6e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	69da      	ldr	r2, [r3, #28]
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	899b      	ldrh	r3, [r3, #12]
 8007e40:	4619      	mov	r1, r3
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e48:	441a      	add	r2, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	899b      	ldrh	r3, [r3, #12]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e60:	fb00 f202 	mul.w	r2, r0, r2
 8007e64:	1a9b      	subs	r3, r3, r2
 8007e66:	18ca      	adds	r2, r1, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3718      	adds	r7, #24
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b086      	sub	sp, #24
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	3320      	adds	r3, #32
 8007e8c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	69db      	ldr	r3, [r3, #28]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d003      	beq.n	8007e9e <dir_next+0x28>
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e9c:	d301      	bcc.n	8007ea2 <dir_next+0x2c>
 8007e9e:	2304      	movs	r3, #4
 8007ea0:	e0bb      	b.n	800801a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	899b      	ldrh	r3, [r3, #12]
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	fbb3 f1f2 	udiv	r1, r3, r2
 8007eae:	fb01 f202 	mul.w	r2, r1, r2
 8007eb2:	1a9b      	subs	r3, r3, r2
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f040 809d 	bne.w	8007ff4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	69db      	ldr	r3, [r3, #28]
 8007ebe:	1c5a      	adds	r2, r3, #1
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d10b      	bne.n	8007ee4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	095b      	lsrs	r3, r3, #5
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	8912      	ldrh	r2, [r2, #8]
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	f0c0 808d 	bcc.w	8007ff4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	61da      	str	r2, [r3, #28]
 8007ee0:	2304      	movs	r3, #4
 8007ee2:	e09a      	b.n	800801a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	899b      	ldrh	r3, [r3, #12]
 8007ee8:	461a      	mov	r2, r3
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	8952      	ldrh	r2, [r2, #10]
 8007ef4:	3a01      	subs	r2, #1
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d17b      	bne.n	8007ff4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	4619      	mov	r1, r3
 8007f04:	4610      	mov	r0, r2
 8007f06:	f7ff fc08 	bl	800771a <get_fat>
 8007f0a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d801      	bhi.n	8007f16 <dir_next+0xa0>
 8007f12:	2302      	movs	r3, #2
 8007f14:	e081      	b.n	800801a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1c:	d101      	bne.n	8007f22 <dir_next+0xac>
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e07b      	b.n	800801a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	69db      	ldr	r3, [r3, #28]
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d359      	bcc.n	8007fe0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d104      	bne.n	8007f3c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	61da      	str	r2, [r3, #28]
 8007f38:	2304      	movs	r3, #4
 8007f3a:	e06e      	b.n	800801a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	4619      	mov	r1, r3
 8007f44:	4610      	mov	r0, r2
 8007f46:	f7ff fe3d 	bl	8007bc4 <create_chain>
 8007f4a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <dir_next+0xe0>
 8007f52:	2307      	movs	r3, #7
 8007f54:	e061      	b.n	800801a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d101      	bne.n	8007f60 <dir_next+0xea>
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	e05c      	b.n	800801a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f66:	d101      	bne.n	8007f6c <dir_next+0xf6>
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e056      	b.n	800801a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f7ff fad3 	bl	8007518 <sync_window>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d001      	beq.n	8007f7c <dir_next+0x106>
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e04e      	b.n	800801a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	899b      	ldrh	r3, [r3, #12]
 8007f86:	461a      	mov	r2, r3
 8007f88:	2100      	movs	r1, #0
 8007f8a:	f7ff f8fc 	bl	8007186 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007f8e:	2300      	movs	r3, #0
 8007f90:	613b      	str	r3, [r7, #16]
 8007f92:	6979      	ldr	r1, [r7, #20]
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f7ff fba1 	bl	80076dc <clust2sect>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	635a      	str	r2, [r3, #52]	; 0x34
 8007fa0:	e012      	b.n	8007fc8 <dir_next+0x152>
						fs->wflag = 1;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f7ff fab5 	bl	8007518 <sync_window>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d001      	beq.n	8007fb8 <dir_next+0x142>
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e030      	b.n	800801a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	613b      	str	r3, [r7, #16]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc2:	1c5a      	adds	r2, r3, #1
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	635a      	str	r2, [r3, #52]	; 0x34
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	895b      	ldrh	r3, [r3, #10]
 8007fcc:	461a      	mov	r2, r3
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d3e6      	bcc.n	8007fa2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	1ad2      	subs	r2, r2, r3
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	697a      	ldr	r2, [r7, #20]
 8007fe4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007fe6:	6979      	ldr	r1, [r7, #20]
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f7ff fb77 	bl	80076dc <clust2sect>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	899b      	ldrh	r3, [r3, #12]
 8008004:	461a      	mov	r2, r3
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	fbb3 f0f2 	udiv	r0, r3, r2
 800800c:	fb00 f202 	mul.w	r2, r0, r2
 8008010:	1a9b      	subs	r3, r3, r2
 8008012:	18ca      	adds	r2, r1, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3718      	adds	r7, #24
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b086      	sub	sp, #24
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
 800802a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008032:	2100      	movs	r1, #0
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f7ff fe95 	bl	8007d64 <dir_sdi>
 800803a:	4603      	mov	r3, r0
 800803c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800803e:	7dfb      	ldrb	r3, [r7, #23]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d12b      	bne.n	800809c <dir_alloc+0x7a>
		n = 0;
 8008044:	2300      	movs	r3, #0
 8008046:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	69db      	ldr	r3, [r3, #28]
 800804c:	4619      	mov	r1, r3
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f7ff faa6 	bl	80075a0 <move_window>
 8008054:	4603      	mov	r3, r0
 8008056:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008058:	7dfb      	ldrb	r3, [r7, #23]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d11d      	bne.n	800809a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	2be5      	cmp	r3, #229	; 0xe5
 8008066:	d004      	beq.n	8008072 <dir_alloc+0x50>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a1b      	ldr	r3, [r3, #32]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d107      	bne.n	8008082 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	3301      	adds	r3, #1
 8008076:	613b      	str	r3, [r7, #16]
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	429a      	cmp	r2, r3
 800807e:	d102      	bne.n	8008086 <dir_alloc+0x64>
 8008080:	e00c      	b.n	800809c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008082:	2300      	movs	r3, #0
 8008084:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008086:	2101      	movs	r1, #1
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f7ff fef4 	bl	8007e76 <dir_next>
 800808e:	4603      	mov	r3, r0
 8008090:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008092:	7dfb      	ldrb	r3, [r7, #23]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d0d7      	beq.n	8008048 <dir_alloc+0x26>
 8008098:	e000      	b.n	800809c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800809a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800809c:	7dfb      	ldrb	r3, [r7, #23]
 800809e:	2b04      	cmp	r3, #4
 80080a0:	d101      	bne.n	80080a6 <dir_alloc+0x84>
 80080a2:	2307      	movs	r3, #7
 80080a4:	75fb      	strb	r3, [r7, #23]
	return res;
 80080a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3718      	adds	r7, #24
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	331a      	adds	r3, #26
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fe ffbe 	bl	8007040 <ld_word>
 80080c4:	4603      	mov	r3, r0
 80080c6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	2b03      	cmp	r3, #3
 80080ce:	d109      	bne.n	80080e4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	3314      	adds	r3, #20
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7fe ffb3 	bl	8007040 <ld_word>
 80080da:	4603      	mov	r3, r0
 80080dc:	041b      	lsls	r3, r3, #16
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80080e4:	68fb      	ldr	r3, [r7, #12]
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b084      	sub	sp, #16
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	60f8      	str	r0, [r7, #12]
 80080f6:	60b9      	str	r1, [r7, #8]
 80080f8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	331a      	adds	r3, #26
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	b292      	uxth	r2, r2
 8008102:	4611      	mov	r1, r2
 8008104:	4618      	mov	r0, r3
 8008106:	f7fe ffd6 	bl	80070b6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	2b03      	cmp	r3, #3
 8008110:	d109      	bne.n	8008126 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	f103 0214 	add.w	r2, r3, #20
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	0c1b      	lsrs	r3, r3, #16
 800811c:	b29b      	uxth	r3, r3
 800811e:	4619      	mov	r1, r3
 8008120:	4610      	mov	r0, r2
 8008122:	f7fe ffc8 	bl	80070b6 <st_word>
	}
}
 8008126:	bf00      	nop
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
	...

08008130 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008130:	b590      	push	{r4, r7, lr}
 8008132:	b087      	sub	sp, #28
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	331a      	adds	r3, #26
 800813e:	4618      	mov	r0, r3
 8008140:	f7fe ff7e 	bl	8007040 <ld_word>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d001      	beq.n	800814e <cmp_lfn+0x1e>
 800814a:	2300      	movs	r3, #0
 800814c:	e059      	b.n	8008202 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008156:	1e5a      	subs	r2, r3, #1
 8008158:	4613      	mov	r3, r2
 800815a:	005b      	lsls	r3, r3, #1
 800815c:	4413      	add	r3, r2
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	4413      	add	r3, r2
 8008162:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008164:	2301      	movs	r3, #1
 8008166:	81fb      	strh	r3, [r7, #14]
 8008168:	2300      	movs	r3, #0
 800816a:	613b      	str	r3, [r7, #16]
 800816c:	e033      	b.n	80081d6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800816e:	4a27      	ldr	r2, [pc, #156]	; (800820c <cmp_lfn+0xdc>)
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	4413      	add	r3, r2
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	4413      	add	r3, r2
 800817c:	4618      	mov	r0, r3
 800817e:	f7fe ff5f 	bl	8007040 <ld_word>
 8008182:	4603      	mov	r3, r0
 8008184:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008186:	89fb      	ldrh	r3, [r7, #14]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d01a      	beq.n	80081c2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	2bfe      	cmp	r3, #254	; 0xfe
 8008190:	d812      	bhi.n	80081b8 <cmp_lfn+0x88>
 8008192:	89bb      	ldrh	r3, [r7, #12]
 8008194:	4618      	mov	r0, r3
 8008196:	f002 fd33 	bl	800ac00 <ff_wtoupper>
 800819a:	4603      	mov	r3, r0
 800819c:	461c      	mov	r4, r3
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	1c5a      	adds	r2, r3, #1
 80081a2:	617a      	str	r2, [r7, #20]
 80081a4:	005b      	lsls	r3, r3, #1
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	4413      	add	r3, r2
 80081aa:	881b      	ldrh	r3, [r3, #0]
 80081ac:	4618      	mov	r0, r3
 80081ae:	f002 fd27 	bl	800ac00 <ff_wtoupper>
 80081b2:	4603      	mov	r3, r0
 80081b4:	429c      	cmp	r4, r3
 80081b6:	d001      	beq.n	80081bc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80081b8:	2300      	movs	r3, #0
 80081ba:	e022      	b.n	8008202 <cmp_lfn+0xd2>
			}
			wc = uc;
 80081bc:	89bb      	ldrh	r3, [r7, #12]
 80081be:	81fb      	strh	r3, [r7, #14]
 80081c0:	e006      	b.n	80081d0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80081c2:	89bb      	ldrh	r3, [r7, #12]
 80081c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d001      	beq.n	80081d0 <cmp_lfn+0xa0>
 80081cc:	2300      	movs	r3, #0
 80081ce:	e018      	b.n	8008202 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	3301      	adds	r3, #1
 80081d4:	613b      	str	r3, [r7, #16]
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	2b0c      	cmp	r3, #12
 80081da:	d9c8      	bls.n	800816e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00b      	beq.n	8008200 <cmp_lfn+0xd0>
 80081e8:	89fb      	ldrh	r3, [r7, #14]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d008      	beq.n	8008200 <cmp_lfn+0xd0>
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	005b      	lsls	r3, r3, #1
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	4413      	add	r3, r2
 80081f6:	881b      	ldrh	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d001      	beq.n	8008200 <cmp_lfn+0xd0>
 80081fc:	2300      	movs	r3, #0
 80081fe:	e000      	b.n	8008202 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8008200:	2301      	movs	r3, #1
}
 8008202:	4618      	mov	r0, r3
 8008204:	371c      	adds	r7, #28
 8008206:	46bd      	mov	sp, r7
 8008208:	bd90      	pop	{r4, r7, pc}
 800820a:	bf00      	nop
 800820c:	08013da0 	.word	0x08013da0

08008210 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	331a      	adds	r3, #26
 800821e:	4618      	mov	r0, r3
 8008220:	f7fe ff0e 	bl	8007040 <ld_word>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d001      	beq.n	800822e <pick_lfn+0x1e>
 800822a:	2300      	movs	r3, #0
 800822c:	e04d      	b.n	80082ca <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008236:	1e5a      	subs	r2, r3, #1
 8008238:	4613      	mov	r3, r2
 800823a:	005b      	lsls	r3, r3, #1
 800823c:	4413      	add	r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4413      	add	r3, r2
 8008242:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008244:	2301      	movs	r3, #1
 8008246:	81fb      	strh	r3, [r7, #14]
 8008248:	2300      	movs	r3, #0
 800824a:	613b      	str	r3, [r7, #16]
 800824c:	e028      	b.n	80082a0 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800824e:	4a21      	ldr	r2, [pc, #132]	; (80082d4 <pick_lfn+0xc4>)
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	4413      	add	r3, r2
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	461a      	mov	r2, r3
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	4413      	add	r3, r2
 800825c:	4618      	mov	r0, r3
 800825e:	f7fe feef 	bl	8007040 <ld_word>
 8008262:	4603      	mov	r3, r0
 8008264:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008266:	89fb      	ldrh	r3, [r7, #14]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00f      	beq.n	800828c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	2bfe      	cmp	r3, #254	; 0xfe
 8008270:	d901      	bls.n	8008276 <pick_lfn+0x66>
 8008272:	2300      	movs	r3, #0
 8008274:	e029      	b.n	80082ca <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8008276:	89bb      	ldrh	r3, [r7, #12]
 8008278:	81fb      	strh	r3, [r7, #14]
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	1c5a      	adds	r2, r3, #1
 800827e:	617a      	str	r2, [r7, #20]
 8008280:	005b      	lsls	r3, r3, #1
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	4413      	add	r3, r2
 8008286:	89fa      	ldrh	r2, [r7, #14]
 8008288:	801a      	strh	r2, [r3, #0]
 800828a:	e006      	b.n	800829a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800828c:	89bb      	ldrh	r3, [r7, #12]
 800828e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008292:	4293      	cmp	r3, r2
 8008294:	d001      	beq.n	800829a <pick_lfn+0x8a>
 8008296:	2300      	movs	r3, #0
 8008298:	e017      	b.n	80082ca <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	3301      	adds	r3, #1
 800829e:	613b      	str	r3, [r7, #16]
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	2b0c      	cmp	r3, #12
 80082a4:	d9d3      	bls.n	800824e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00a      	beq.n	80082c8 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	2bfe      	cmp	r3, #254	; 0xfe
 80082b6:	d901      	bls.n	80082bc <pick_lfn+0xac>
 80082b8:	2300      	movs	r3, #0
 80082ba:	e006      	b.n	80082ca <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	005b      	lsls	r3, r3, #1
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	4413      	add	r3, r2
 80082c4:	2200      	movs	r2, #0
 80082c6:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80082c8:	2301      	movs	r3, #1
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3718      	adds	r7, #24
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	08013da0 	.word	0x08013da0

080082d8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b088      	sub	sp, #32
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	4611      	mov	r1, r2
 80082e4:	461a      	mov	r2, r3
 80082e6:	460b      	mov	r3, r1
 80082e8:	71fb      	strb	r3, [r7, #7]
 80082ea:	4613      	mov	r3, r2
 80082ec:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	330d      	adds	r3, #13
 80082f2:	79ba      	ldrb	r2, [r7, #6]
 80082f4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	330b      	adds	r3, #11
 80082fa:	220f      	movs	r2, #15
 80082fc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	330c      	adds	r3, #12
 8008302:	2200      	movs	r2, #0
 8008304:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	331a      	adds	r3, #26
 800830a:	2100      	movs	r1, #0
 800830c:	4618      	mov	r0, r3
 800830e:	f7fe fed2 	bl	80070b6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008312:	79fb      	ldrb	r3, [r7, #7]
 8008314:	1e5a      	subs	r2, r3, #1
 8008316:	4613      	mov	r3, r2
 8008318:	005b      	lsls	r3, r3, #1
 800831a:	4413      	add	r3, r2
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	4413      	add	r3, r2
 8008320:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008322:	2300      	movs	r3, #0
 8008324:	82fb      	strh	r3, [r7, #22]
 8008326:	2300      	movs	r3, #0
 8008328:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800832a:	8afb      	ldrh	r3, [r7, #22]
 800832c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008330:	4293      	cmp	r3, r2
 8008332:	d007      	beq.n	8008344 <put_lfn+0x6c>
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	1c5a      	adds	r2, r3, #1
 8008338:	61fa      	str	r2, [r7, #28]
 800833a:	005b      	lsls	r3, r3, #1
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	4413      	add	r3, r2
 8008340:	881b      	ldrh	r3, [r3, #0]
 8008342:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008344:	4a17      	ldr	r2, [pc, #92]	; (80083a4 <put_lfn+0xcc>)
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	4413      	add	r3, r2
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	461a      	mov	r2, r3
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	4413      	add	r3, r2
 8008352:	8afa      	ldrh	r2, [r7, #22]
 8008354:	4611      	mov	r1, r2
 8008356:	4618      	mov	r0, r3
 8008358:	f7fe fead 	bl	80070b6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800835c:	8afb      	ldrh	r3, [r7, #22]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d102      	bne.n	8008368 <put_lfn+0x90>
 8008362:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008366:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	3301      	adds	r3, #1
 800836c:	61bb      	str	r3, [r7, #24]
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	2b0c      	cmp	r3, #12
 8008372:	d9da      	bls.n	800832a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008374:	8afb      	ldrh	r3, [r7, #22]
 8008376:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800837a:	4293      	cmp	r3, r2
 800837c:	d006      	beq.n	800838c <put_lfn+0xb4>
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	005b      	lsls	r3, r3, #1
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	4413      	add	r3, r2
 8008386:	881b      	ldrh	r3, [r3, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d103      	bne.n	8008394 <put_lfn+0xbc>
 800838c:	79fb      	ldrb	r3, [r7, #7]
 800838e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008392:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	79fa      	ldrb	r2, [r7, #7]
 8008398:	701a      	strb	r2, [r3, #0]
}
 800839a:	bf00      	nop
 800839c:	3720      	adds	r7, #32
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	08013da0 	.word	0x08013da0

080083a8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b08c      	sub	sp, #48	; 0x30
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	607a      	str	r2, [r7, #4]
 80083b4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80083b6:	220b      	movs	r2, #11
 80083b8:	68b9      	ldr	r1, [r7, #8]
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	f7fe fec2 	bl	8007144 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	2b05      	cmp	r3, #5
 80083c4:	d92b      	bls.n	800841e <gen_numname+0x76>
		sr = seq;
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80083ca:	e022      	b.n	8008412 <gen_numname+0x6a>
			wc = *lfn++;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	1c9a      	adds	r2, r3, #2
 80083d0:	607a      	str	r2, [r7, #4]
 80083d2:	881b      	ldrh	r3, [r3, #0]
 80083d4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80083d6:	2300      	movs	r3, #0
 80083d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80083da:	e017      	b.n	800840c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	005a      	lsls	r2, r3, #1
 80083e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80083e2:	f003 0301 	and.w	r3, r3, #1
 80083e6:	4413      	add	r3, r2
 80083e8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80083ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80083ec:	085b      	lsrs	r3, r3, #1
 80083ee:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d005      	beq.n	8008406 <gen_numname+0x5e>
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8008400:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8008404:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008408:	3301      	adds	r3, #1
 800840a:	62bb      	str	r3, [r7, #40]	; 0x28
 800840c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840e:	2b0f      	cmp	r3, #15
 8008410:	d9e4      	bls.n	80083dc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	881b      	ldrh	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1d8      	bne.n	80083cc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800841e:	2307      	movs	r3, #7
 8008420:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	b2db      	uxtb	r3, r3
 8008426:	f003 030f 	and.w	r3, r3, #15
 800842a:	b2db      	uxtb	r3, r3
 800842c:	3330      	adds	r3, #48	; 0x30
 800842e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8008432:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008436:	2b39      	cmp	r3, #57	; 0x39
 8008438:	d904      	bls.n	8008444 <gen_numname+0x9c>
 800843a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800843e:	3307      	adds	r3, #7
 8008440:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8008444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008446:	1e5a      	subs	r2, r3, #1
 8008448:	62ba      	str	r2, [r7, #40]	; 0x28
 800844a:	3330      	adds	r3, #48	; 0x30
 800844c:	443b      	add	r3, r7
 800844e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008452:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	091b      	lsrs	r3, r3, #4
 800845a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1df      	bne.n	8008422 <gen_numname+0x7a>
	ns[i] = '~';
 8008462:	f107 0214 	add.w	r2, r7, #20
 8008466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008468:	4413      	add	r3, r2
 800846a:	227e      	movs	r2, #126	; 0x7e
 800846c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800846e:	2300      	movs	r3, #0
 8008470:	627b      	str	r3, [r7, #36]	; 0x24
 8008472:	e002      	b.n	800847a <gen_numname+0xd2>
 8008474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008476:	3301      	adds	r3, #1
 8008478:	627b      	str	r3, [r7, #36]	; 0x24
 800847a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800847c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847e:	429a      	cmp	r2, r3
 8008480:	d205      	bcs.n	800848e <gen_numname+0xe6>
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008486:	4413      	add	r3, r2
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	2b20      	cmp	r3, #32
 800848c:	d1f2      	bne.n	8008474 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800848e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008490:	2b07      	cmp	r3, #7
 8008492:	d807      	bhi.n	80084a4 <gen_numname+0xfc>
 8008494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008496:	1c5a      	adds	r2, r3, #1
 8008498:	62ba      	str	r2, [r7, #40]	; 0x28
 800849a:	3330      	adds	r3, #48	; 0x30
 800849c:	443b      	add	r3, r7
 800849e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80084a2:	e000      	b.n	80084a6 <gen_numname+0xfe>
 80084a4:	2120      	movs	r1, #32
 80084a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a8:	1c5a      	adds	r2, r3, #1
 80084aa:	627a      	str	r2, [r7, #36]	; 0x24
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	4413      	add	r3, r2
 80084b0:	460a      	mov	r2, r1
 80084b2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80084b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b6:	2b07      	cmp	r3, #7
 80084b8:	d9e9      	bls.n	800848e <gen_numname+0xe6>
}
 80084ba:	bf00      	nop
 80084bc:	bf00      	nop
 80084be:	3730      	adds	r7, #48	; 0x30
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80084cc:	2300      	movs	r3, #0
 80084ce:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80084d0:	230b      	movs	r3, #11
 80084d2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
 80084d6:	b2da      	uxtb	r2, r3
 80084d8:	0852      	lsrs	r2, r2, #1
 80084da:	01db      	lsls	r3, r3, #7
 80084dc:	4313      	orrs	r3, r2
 80084de:	b2da      	uxtb	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	1c59      	adds	r1, r3, #1
 80084e4:	6079      	str	r1, [r7, #4]
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	4413      	add	r3, r2
 80084ea:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	3b01      	subs	r3, #1
 80084f0:	60bb      	str	r3, [r7, #8]
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1ed      	bne.n	80084d4 <sum_sfn+0x10>
	return sum;
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3714      	adds	r7, #20
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr

08008506 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b086      	sub	sp, #24
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
 800850e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8008510:	2304      	movs	r3, #4
 8008512:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800851a:	23ff      	movs	r3, #255	; 0xff
 800851c:	757b      	strb	r3, [r7, #21]
 800851e:	23ff      	movs	r3, #255	; 0xff
 8008520:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8008522:	e081      	b.n	8008628 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	69db      	ldr	r3, [r3, #28]
 8008528:	4619      	mov	r1, r3
 800852a:	6938      	ldr	r0, [r7, #16]
 800852c:	f7ff f838 	bl	80075a0 <move_window>
 8008530:	4603      	mov	r3, r0
 8008532:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008534:	7dfb      	ldrb	r3, [r7, #23]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d17c      	bne.n	8008634 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a1b      	ldr	r3, [r3, #32]
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8008542:	7dbb      	ldrb	r3, [r7, #22]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d102      	bne.n	800854e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8008548:	2304      	movs	r3, #4
 800854a:	75fb      	strb	r3, [r7, #23]
 800854c:	e077      	b.n	800863e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a1b      	ldr	r3, [r3, #32]
 8008552:	330b      	adds	r3, #11
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800855a:	73fb      	strb	r3, [r7, #15]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	7bfa      	ldrb	r2, [r7, #15]
 8008560:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8008562:	7dbb      	ldrb	r3, [r7, #22]
 8008564:	2be5      	cmp	r3, #229	; 0xe5
 8008566:	d00e      	beq.n	8008586 <dir_read+0x80>
 8008568:	7dbb      	ldrb	r3, [r7, #22]
 800856a:	2b2e      	cmp	r3, #46	; 0x2e
 800856c:	d00b      	beq.n	8008586 <dir_read+0x80>
 800856e:	7bfb      	ldrb	r3, [r7, #15]
 8008570:	f023 0320 	bic.w	r3, r3, #32
 8008574:	2b08      	cmp	r3, #8
 8008576:	bf0c      	ite	eq
 8008578:	2301      	moveq	r3, #1
 800857a:	2300      	movne	r3, #0
 800857c:	b2db      	uxtb	r3, r3
 800857e:	461a      	mov	r2, r3
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	4293      	cmp	r3, r2
 8008584:	d002      	beq.n	800858c <dir_read+0x86>
				ord = 0xFF;
 8008586:	23ff      	movs	r3, #255	; 0xff
 8008588:	757b      	strb	r3, [r7, #21]
 800858a:	e044      	b.n	8008616 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800858c:	7bfb      	ldrb	r3, [r7, #15]
 800858e:	2b0f      	cmp	r3, #15
 8008590:	d12f      	bne.n	80085f2 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8008592:	7dbb      	ldrb	r3, [r7, #22]
 8008594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00d      	beq.n	80085b8 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a1b      	ldr	r3, [r3, #32]
 80085a0:	7b5b      	ldrb	r3, [r3, #13]
 80085a2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80085a4:	7dbb      	ldrb	r3, [r7, #22]
 80085a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085aa:	75bb      	strb	r3, [r7, #22]
 80085ac:	7dbb      	ldrb	r3, [r7, #22]
 80085ae:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	695a      	ldr	r2, [r3, #20]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80085b8:	7dba      	ldrb	r2, [r7, #22]
 80085ba:	7d7b      	ldrb	r3, [r7, #21]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d115      	bne.n	80085ec <dir_read+0xe6>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6a1b      	ldr	r3, [r3, #32]
 80085c4:	330d      	adds	r3, #13
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	7d3a      	ldrb	r2, [r7, #20]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d10e      	bne.n	80085ec <dir_read+0xe6>
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	691a      	ldr	r2, [r3, #16]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a1b      	ldr	r3, [r3, #32]
 80085d6:	4619      	mov	r1, r3
 80085d8:	4610      	mov	r0, r2
 80085da:	f7ff fe19 	bl	8008210 <pick_lfn>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d003      	beq.n	80085ec <dir_read+0xe6>
 80085e4:	7d7b      	ldrb	r3, [r7, #21]
 80085e6:	3b01      	subs	r3, #1
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	e000      	b.n	80085ee <dir_read+0xe8>
 80085ec:	23ff      	movs	r3, #255	; 0xff
 80085ee:	757b      	strb	r3, [r7, #21]
 80085f0:	e011      	b.n	8008616 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80085f2:	7d7b      	ldrb	r3, [r7, #21]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d109      	bne.n	800860c <dir_read+0x106>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a1b      	ldr	r3, [r3, #32]
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7ff ff61 	bl	80084c4 <sum_sfn>
 8008602:	4603      	mov	r3, r0
 8008604:	461a      	mov	r2, r3
 8008606:	7d3b      	ldrb	r3, [r7, #20]
 8008608:	4293      	cmp	r3, r2
 800860a:	d015      	beq.n	8008638 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f04f 32ff 	mov.w	r2, #4294967295
 8008612:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8008614:	e010      	b.n	8008638 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8008616:	2100      	movs	r1, #0
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f7ff fc2c 	bl	8007e76 <dir_next>
 800861e:	4603      	mov	r3, r0
 8008620:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008622:	7dfb      	ldrb	r3, [r7, #23]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d109      	bne.n	800863c <dir_read+0x136>
	while (dp->sect) {
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	69db      	ldr	r3, [r3, #28]
 800862c:	2b00      	cmp	r3, #0
 800862e:	f47f af79 	bne.w	8008524 <dir_read+0x1e>
 8008632:	e004      	b.n	800863e <dir_read+0x138>
		if (res != FR_OK) break;
 8008634:	bf00      	nop
 8008636:	e002      	b.n	800863e <dir_read+0x138>
					break;
 8008638:	bf00      	nop
 800863a:	e000      	b.n	800863e <dir_read+0x138>
		if (res != FR_OK) break;
 800863c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800863e:	7dfb      	ldrb	r3, [r7, #23]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d002      	beq.n	800864a <dir_read+0x144>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	61da      	str	r2, [r3, #28]
	return res;
 800864a:	7dfb      	ldrb	r3, [r7, #23]
}
 800864c:	4618      	mov	r0, r3
 800864e:	3718      	adds	r7, #24
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008662:	2100      	movs	r1, #0
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f7ff fb7d 	bl	8007d64 <dir_sdi>
 800866a:	4603      	mov	r3, r0
 800866c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800866e:	7dfb      	ldrb	r3, [r7, #23]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d001      	beq.n	8008678 <dir_find+0x24>
 8008674:	7dfb      	ldrb	r3, [r7, #23]
 8008676:	e0a9      	b.n	80087cc <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008678:	23ff      	movs	r3, #255	; 0xff
 800867a:	753b      	strb	r3, [r7, #20]
 800867c:	7d3b      	ldrb	r3, [r7, #20]
 800867e:	757b      	strb	r3, [r7, #21]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f04f 32ff 	mov.w	r2, #4294967295
 8008686:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	69db      	ldr	r3, [r3, #28]
 800868c:	4619      	mov	r1, r3
 800868e:	6938      	ldr	r0, [r7, #16]
 8008690:	f7fe ff86 	bl	80075a0 <move_window>
 8008694:	4603      	mov	r3, r0
 8008696:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008698:	7dfb      	ldrb	r3, [r7, #23]
 800869a:	2b00      	cmp	r3, #0
 800869c:	f040 8090 	bne.w	80087c0 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a1b      	ldr	r3, [r3, #32]
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80086a8:	7dbb      	ldrb	r3, [r7, #22]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d102      	bne.n	80086b4 <dir_find+0x60>
 80086ae:	2304      	movs	r3, #4
 80086b0:	75fb      	strb	r3, [r7, #23]
 80086b2:	e08a      	b.n	80087ca <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a1b      	ldr	r3, [r3, #32]
 80086b8:	330b      	adds	r3, #11
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086c0:	73fb      	strb	r3, [r7, #15]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	7bfa      	ldrb	r2, [r7, #15]
 80086c6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80086c8:	7dbb      	ldrb	r3, [r7, #22]
 80086ca:	2be5      	cmp	r3, #229	; 0xe5
 80086cc:	d007      	beq.n	80086de <dir_find+0x8a>
 80086ce:	7bfb      	ldrb	r3, [r7, #15]
 80086d0:	f003 0308 	and.w	r3, r3, #8
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d009      	beq.n	80086ec <dir_find+0x98>
 80086d8:	7bfb      	ldrb	r3, [r7, #15]
 80086da:	2b0f      	cmp	r3, #15
 80086dc:	d006      	beq.n	80086ec <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80086de:	23ff      	movs	r3, #255	; 0xff
 80086e0:	757b      	strb	r3, [r7, #21]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f04f 32ff 	mov.w	r2, #4294967295
 80086e8:	631a      	str	r2, [r3, #48]	; 0x30
 80086ea:	e05e      	b.n	80087aa <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80086ec:	7bfb      	ldrb	r3, [r7, #15]
 80086ee:	2b0f      	cmp	r3, #15
 80086f0:	d136      	bne.n	8008760 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80086f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d154      	bne.n	80087aa <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008700:	7dbb      	ldrb	r3, [r7, #22]
 8008702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00d      	beq.n	8008726 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a1b      	ldr	r3, [r3, #32]
 800870e:	7b5b      	ldrb	r3, [r3, #13]
 8008710:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008712:	7dbb      	ldrb	r3, [r7, #22]
 8008714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008718:	75bb      	strb	r3, [r7, #22]
 800871a:	7dbb      	ldrb	r3, [r7, #22]
 800871c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	695a      	ldr	r2, [r3, #20]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008726:	7dba      	ldrb	r2, [r7, #22]
 8008728:	7d7b      	ldrb	r3, [r7, #21]
 800872a:	429a      	cmp	r2, r3
 800872c:	d115      	bne.n	800875a <dir_find+0x106>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6a1b      	ldr	r3, [r3, #32]
 8008732:	330d      	adds	r3, #13
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	7d3a      	ldrb	r2, [r7, #20]
 8008738:	429a      	cmp	r2, r3
 800873a:	d10e      	bne.n	800875a <dir_find+0x106>
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	691a      	ldr	r2, [r3, #16]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6a1b      	ldr	r3, [r3, #32]
 8008744:	4619      	mov	r1, r3
 8008746:	4610      	mov	r0, r2
 8008748:	f7ff fcf2 	bl	8008130 <cmp_lfn>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d003      	beq.n	800875a <dir_find+0x106>
 8008752:	7d7b      	ldrb	r3, [r7, #21]
 8008754:	3b01      	subs	r3, #1
 8008756:	b2db      	uxtb	r3, r3
 8008758:	e000      	b.n	800875c <dir_find+0x108>
 800875a:	23ff      	movs	r3, #255	; 0xff
 800875c:	757b      	strb	r3, [r7, #21]
 800875e:	e024      	b.n	80087aa <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008760:	7d7b      	ldrb	r3, [r7, #21]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d109      	bne.n	800877a <dir_find+0x126>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a1b      	ldr	r3, [r3, #32]
 800876a:	4618      	mov	r0, r3
 800876c:	f7ff feaa 	bl	80084c4 <sum_sfn>
 8008770:	4603      	mov	r3, r0
 8008772:	461a      	mov	r2, r3
 8008774:	7d3b      	ldrb	r3, [r7, #20]
 8008776:	4293      	cmp	r3, r2
 8008778:	d024      	beq.n	80087c4 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008780:	f003 0301 	and.w	r3, r3, #1
 8008784:	2b00      	cmp	r3, #0
 8008786:	d10a      	bne.n	800879e <dir_find+0x14a>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a18      	ldr	r0, [r3, #32]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	3324      	adds	r3, #36	; 0x24
 8008790:	220b      	movs	r2, #11
 8008792:	4619      	mov	r1, r3
 8008794:	f7fe fd12 	bl	80071bc <mem_cmp>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d014      	beq.n	80087c8 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800879e:	23ff      	movs	r3, #255	; 0xff
 80087a0:	757b      	strb	r3, [r7, #21]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f04f 32ff 	mov.w	r2, #4294967295
 80087a8:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80087aa:	2100      	movs	r1, #0
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f7ff fb62 	bl	8007e76 <dir_next>
 80087b2:	4603      	mov	r3, r0
 80087b4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80087b6:	7dfb      	ldrb	r3, [r7, #23]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	f43f af65 	beq.w	8008688 <dir_find+0x34>
 80087be:	e004      	b.n	80087ca <dir_find+0x176>
		if (res != FR_OK) break;
 80087c0:	bf00      	nop
 80087c2:	e002      	b.n	80087ca <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80087c4:	bf00      	nop
 80087c6:	e000      	b.n	80087ca <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80087c8:	bf00      	nop

	return res;
 80087ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3718      	adds	r7, #24
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b08c      	sub	sp, #48	; 0x30
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80087e8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d001      	beq.n	80087f4 <dir_register+0x20>
 80087f0:	2306      	movs	r3, #6
 80087f2:	e0e0      	b.n	80089b6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80087f4:	2300      	movs	r3, #0
 80087f6:	627b      	str	r3, [r7, #36]	; 0x24
 80087f8:	e002      	b.n	8008800 <dir_register+0x2c>
 80087fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fc:	3301      	adds	r3, #1
 80087fe:	627b      	str	r3, [r7, #36]	; 0x24
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	691a      	ldr	r2, [r3, #16]
 8008804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008806:	005b      	lsls	r3, r3, #1
 8008808:	4413      	add	r3, r2
 800880a:	881b      	ldrh	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1f4      	bne.n	80087fa <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8008816:	f107 030c 	add.w	r3, r7, #12
 800881a:	220c      	movs	r2, #12
 800881c:	4618      	mov	r0, r3
 800881e:	f7fe fc91 	bl	8007144 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008822:	7dfb      	ldrb	r3, [r7, #23]
 8008824:	f003 0301 	and.w	r3, r3, #1
 8008828:	2b00      	cmp	r3, #0
 800882a:	d032      	beq.n	8008892 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2240      	movs	r2, #64	; 0x40
 8008830:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8008834:	2301      	movs	r3, #1
 8008836:	62bb      	str	r3, [r7, #40]	; 0x28
 8008838:	e016      	b.n	8008868 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	691a      	ldr	r2, [r3, #16]
 8008844:	f107 010c 	add.w	r1, r7, #12
 8008848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884a:	f7ff fdad 	bl	80083a8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f7ff ff00 	bl	8008654 <dir_find>
 8008854:	4603      	mov	r3, r0
 8008856:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800885a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800885e:	2b00      	cmp	r3, #0
 8008860:	d106      	bne.n	8008870 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008864:	3301      	adds	r3, #1
 8008866:	62bb      	str	r3, [r7, #40]	; 0x28
 8008868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886a:	2b63      	cmp	r3, #99	; 0x63
 800886c:	d9e5      	bls.n	800883a <dir_register+0x66>
 800886e:	e000      	b.n	8008872 <dir_register+0x9e>
			if (res != FR_OK) break;
 8008870:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008874:	2b64      	cmp	r3, #100	; 0x64
 8008876:	d101      	bne.n	800887c <dir_register+0xa8>
 8008878:	2307      	movs	r3, #7
 800887a:	e09c      	b.n	80089b6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800887c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008880:	2b04      	cmp	r3, #4
 8008882:	d002      	beq.n	800888a <dir_register+0xb6>
 8008884:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008888:	e095      	b.n	80089b6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800888a:	7dfa      	ldrb	r2, [r7, #23]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008892:	7dfb      	ldrb	r3, [r7, #23]
 8008894:	f003 0302 	and.w	r3, r3, #2
 8008898:	2b00      	cmp	r3, #0
 800889a:	d007      	beq.n	80088ac <dir_register+0xd8>
 800889c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889e:	330c      	adds	r3, #12
 80088a0:	4a47      	ldr	r2, [pc, #284]	; (80089c0 <dir_register+0x1ec>)
 80088a2:	fba2 2303 	umull	r2, r3, r2, r3
 80088a6:	089b      	lsrs	r3, r3, #2
 80088a8:	3301      	adds	r3, #1
 80088aa:	e000      	b.n	80088ae <dir_register+0xda>
 80088ac:	2301      	movs	r3, #1
 80088ae:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80088b0:	6a39      	ldr	r1, [r7, #32]
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f7ff fbb5 	bl	8008022 <dir_alloc>
 80088b8:	4603      	mov	r3, r0
 80088ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80088be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d148      	bne.n	8008958 <dir_register+0x184>
 80088c6:	6a3b      	ldr	r3, [r7, #32]
 80088c8:	3b01      	subs	r3, #1
 80088ca:	623b      	str	r3, [r7, #32]
 80088cc:	6a3b      	ldr	r3, [r7, #32]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d042      	beq.n	8008958 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	695a      	ldr	r2, [r3, #20]
 80088d6:	6a3b      	ldr	r3, [r7, #32]
 80088d8:	015b      	lsls	r3, r3, #5
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	4619      	mov	r1, r3
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f7ff fa40 	bl	8007d64 <dir_sdi>
 80088e4:	4603      	mov	r3, r0
 80088e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80088ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d132      	bne.n	8008958 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	3324      	adds	r3, #36	; 0x24
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7ff fde4 	bl	80084c4 <sum_sfn>
 80088fc:	4603      	mov	r3, r0
 80088fe:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	69db      	ldr	r3, [r3, #28]
 8008904:	4619      	mov	r1, r3
 8008906:	69f8      	ldr	r0, [r7, #28]
 8008908:	f7fe fe4a 	bl	80075a0 <move_window>
 800890c:	4603      	mov	r3, r0
 800890e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8008912:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008916:	2b00      	cmp	r3, #0
 8008918:	d11d      	bne.n	8008956 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	6918      	ldr	r0, [r3, #16]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a19      	ldr	r1, [r3, #32]
 8008922:	6a3b      	ldr	r3, [r7, #32]
 8008924:	b2da      	uxtb	r2, r3
 8008926:	7efb      	ldrb	r3, [r7, #27]
 8008928:	f7ff fcd6 	bl	80082d8 <put_lfn>
				fs->wflag = 1;
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	2201      	movs	r2, #1
 8008930:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008932:	2100      	movs	r1, #0
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7ff fa9e 	bl	8007e76 <dir_next>
 800893a:	4603      	mov	r3, r0
 800893c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8008940:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008944:	2b00      	cmp	r3, #0
 8008946:	d107      	bne.n	8008958 <dir_register+0x184>
 8008948:	6a3b      	ldr	r3, [r7, #32]
 800894a:	3b01      	subs	r3, #1
 800894c:	623b      	str	r3, [r7, #32]
 800894e:	6a3b      	ldr	r3, [r7, #32]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1d5      	bne.n	8008900 <dir_register+0x12c>
 8008954:	e000      	b.n	8008958 <dir_register+0x184>
				if (res != FR_OK) break;
 8008956:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008958:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800895c:	2b00      	cmp	r3, #0
 800895e:	d128      	bne.n	80089b2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	69db      	ldr	r3, [r3, #28]
 8008964:	4619      	mov	r1, r3
 8008966:	69f8      	ldr	r0, [r7, #28]
 8008968:	f7fe fe1a 	bl	80075a0 <move_window>
 800896c:	4603      	mov	r3, r0
 800896e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008972:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008976:	2b00      	cmp	r3, #0
 8008978:	d11b      	bne.n	80089b2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a1b      	ldr	r3, [r3, #32]
 800897e:	2220      	movs	r2, #32
 8008980:	2100      	movs	r1, #0
 8008982:	4618      	mov	r0, r3
 8008984:	f7fe fbff 	bl	8007186 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a18      	ldr	r0, [r3, #32]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	3324      	adds	r3, #36	; 0x24
 8008990:	220b      	movs	r2, #11
 8008992:	4619      	mov	r1, r3
 8008994:	f7fe fbd6 	bl	8007144 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a1b      	ldr	r3, [r3, #32]
 80089a2:	330c      	adds	r3, #12
 80089a4:	f002 0218 	and.w	r2, r2, #24
 80089a8:	b2d2      	uxtb	r2, r2
 80089aa:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	2201      	movs	r2, #1
 80089b0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80089b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3730      	adds	r7, #48	; 0x30
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	4ec4ec4f 	.word	0x4ec4ec4f

080089c4 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b086      	sub	sp, #24
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	695b      	ldr	r3, [r3, #20]
 80089d6:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e0:	d007      	beq.n	80089f2 <dir_remove+0x2e>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e6:	4619      	mov	r1, r3
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f7ff f9bb 	bl	8007d64 <dir_sdi>
 80089ee:	4603      	mov	r3, r0
 80089f0:	e000      	b.n	80089f4 <dir_remove+0x30>
 80089f2:	2300      	movs	r3, #0
 80089f4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80089f6:	7dfb      	ldrb	r3, [r7, #23]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d128      	bne.n	8008a4e <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	69db      	ldr	r3, [r3, #28]
 8008a00:	4619      	mov	r1, r3
 8008a02:	6938      	ldr	r0, [r7, #16]
 8008a04:	f7fe fdcc 	bl	80075a0 <move_window>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008a0c:	7dfb      	ldrb	r3, [r7, #23]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d115      	bne.n	8008a3e <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a1b      	ldr	r3, [r3, #32]
 8008a16:	22e5      	movs	r2, #229	; 0xe5
 8008a18:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	695b      	ldr	r3, [r3, #20]
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d90b      	bls.n	8008a42 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f7ff fa22 	bl	8007e76 <dir_next>
 8008a32:	4603      	mov	r3, r0
 8008a34:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8008a36:	7dfb      	ldrb	r3, [r7, #23]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d0df      	beq.n	80089fc <dir_remove+0x38>
 8008a3c:	e002      	b.n	8008a44 <dir_remove+0x80>
			if (res != FR_OK) break;
 8008a3e:	bf00      	nop
 8008a40:	e000      	b.n	8008a44 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8008a42:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8008a44:	7dfb      	ldrb	r3, [r7, #23]
 8008a46:	2b04      	cmp	r3, #4
 8008a48:	d101      	bne.n	8008a4e <dir_remove+0x8a>
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8008a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3718      	adds	r7, #24
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b088      	sub	sp, #32
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	69db      	ldr	r3, [r3, #28]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f000 80c9 	beq.w	8008c0a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a80:	d032      	beq.n	8008ae8 <get_fileinfo+0x90>
			i = j = 0;
 8008a82:	2300      	movs	r3, #0
 8008a84:	61bb      	str	r3, [r7, #24]
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8008a8a:	e01b      	b.n	8008ac4 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8008a8c:	89fb      	ldrh	r3, [r7, #14]
 8008a8e:	2100      	movs	r1, #0
 8008a90:	4618      	mov	r0, r3
 8008a92:	f002 f879 	bl	800ab88 <ff_convert>
 8008a96:	4603      	mov	r3, r0
 8008a98:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8008a9a:	89fb      	ldrh	r3, [r7, #14]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d102      	bne.n	8008aa6 <get_fileinfo+0x4e>
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	61fb      	str	r3, [r7, #28]
 8008aa4:	e01a      	b.n	8008adc <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	2bfe      	cmp	r3, #254	; 0xfe
 8008aaa:	d902      	bls.n	8008ab2 <get_fileinfo+0x5a>
 8008aac:	2300      	movs	r3, #0
 8008aae:	61fb      	str	r3, [r7, #28]
 8008ab0:	e014      	b.n	8008adc <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	1c5a      	adds	r2, r3, #1
 8008ab6:	61fa      	str	r2, [r7, #28]
 8008ab8:	89fa      	ldrh	r2, [r7, #14]
 8008aba:	b2d1      	uxtb	r1, r2
 8008abc:	683a      	ldr	r2, [r7, #0]
 8008abe:	4413      	add	r3, r2
 8008ac0:	460a      	mov	r2, r1
 8008ac2:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	691a      	ldr	r2, [r3, #16]
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	1c59      	adds	r1, r3, #1
 8008acc:	61b9      	str	r1, [r7, #24]
 8008ace:	005b      	lsls	r3, r3, #1
 8008ad0:	4413      	add	r3, r2
 8008ad2:	881b      	ldrh	r3, [r3, #0]
 8008ad4:	81fb      	strh	r3, [r7, #14]
 8008ad6:	89fb      	ldrh	r3, [r7, #14]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1d7      	bne.n	8008a8c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8008adc:	683a      	ldr	r2, [r7, #0]
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	3316      	adds	r3, #22
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	61bb      	str	r3, [r7, #24]
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8008af0:	683a      	ldr	r2, [r7, #0]
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	4413      	add	r3, r2
 8008af6:	3316      	adds	r3, #22
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8008afc:	e04c      	b.n	8008b98 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a1a      	ldr	r2, [r3, #32]
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	1c59      	adds	r1, r3, #1
 8008b06:	61f9      	str	r1, [r7, #28]
 8008b08:	4413      	add	r3, r2
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8008b0e:	7dfb      	ldrb	r3, [r7, #23]
 8008b10:	2b20      	cmp	r3, #32
 8008b12:	d100      	bne.n	8008b16 <get_fileinfo+0xbe>
 8008b14:	e040      	b.n	8008b98 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8008b16:	7dfb      	ldrb	r3, [r7, #23]
 8008b18:	2b05      	cmp	r3, #5
 8008b1a:	d101      	bne.n	8008b20 <get_fileinfo+0xc8>
 8008b1c:	23e5      	movs	r3, #229	; 0xe5
 8008b1e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	2b09      	cmp	r3, #9
 8008b24:	d10f      	bne.n	8008b46 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8008b26:	89bb      	ldrh	r3, [r7, #12]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d105      	bne.n	8008b38 <get_fileinfo+0xe0>
 8008b2c:	683a      	ldr	r2, [r7, #0]
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	4413      	add	r3, r2
 8008b32:	3316      	adds	r3, #22
 8008b34:	222e      	movs	r2, #46	; 0x2e
 8008b36:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8008b38:	69bb      	ldr	r3, [r7, #24]
 8008b3a:	1c5a      	adds	r2, r3, #1
 8008b3c:	61ba      	str	r2, [r7, #24]
 8008b3e:	683a      	ldr	r2, [r7, #0]
 8008b40:	4413      	add	r3, r2
 8008b42:	222e      	movs	r2, #46	; 0x2e
 8008b44:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8008b46:	683a      	ldr	r2, [r7, #0]
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	3309      	adds	r3, #9
 8008b4e:	7dfa      	ldrb	r2, [r7, #23]
 8008b50:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8008b52:	89bb      	ldrh	r3, [r7, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d11c      	bne.n	8008b92 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8008b58:	7dfb      	ldrb	r3, [r7, #23]
 8008b5a:	2b40      	cmp	r3, #64	; 0x40
 8008b5c:	d913      	bls.n	8008b86 <get_fileinfo+0x12e>
 8008b5e:	7dfb      	ldrb	r3, [r7, #23]
 8008b60:	2b5a      	cmp	r3, #90	; 0x5a
 8008b62:	d810      	bhi.n	8008b86 <get_fileinfo+0x12e>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a1b      	ldr	r3, [r3, #32]
 8008b68:	330c      	adds	r3, #12
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	2b08      	cmp	r3, #8
 8008b72:	d901      	bls.n	8008b78 <get_fileinfo+0x120>
 8008b74:	2310      	movs	r3, #16
 8008b76:	e000      	b.n	8008b7a <get_fileinfo+0x122>
 8008b78:	2308      	movs	r3, #8
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d002      	beq.n	8008b86 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8008b80:	7dfb      	ldrb	r3, [r7, #23]
 8008b82:	3320      	adds	r3, #32
 8008b84:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8008b86:	683a      	ldr	r2, [r7, #0]
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	4413      	add	r3, r2
 8008b8c:	3316      	adds	r3, #22
 8008b8e:	7dfa      	ldrb	r2, [r7, #23]
 8008b90:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	3301      	adds	r3, #1
 8008b96:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	2b0a      	cmp	r3, #10
 8008b9c:	d9af      	bls.n	8008afe <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8008b9e:	89bb      	ldrh	r3, [r7, #12]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d10d      	bne.n	8008bc0 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8008ba4:	683a      	ldr	r2, [r7, #0]
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	4413      	add	r3, r2
 8008baa:	3316      	adds	r3, #22
 8008bac:	2200      	movs	r2, #0
 8008bae:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6a1b      	ldr	r3, [r3, #32]
 8008bb4:	330c      	adds	r3, #12
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d101      	bne.n	8008bc0 <get_fileinfo+0x168>
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8008bc0:	683a      	ldr	r2, [r7, #0]
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	3309      	adds	r3, #9
 8008bc8:	2200      	movs	r2, #0
 8008bca:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6a1b      	ldr	r3, [r3, #32]
 8008bd0:	7ada      	ldrb	r2, [r3, #11]
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	331c      	adds	r3, #28
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7fe fa47 	bl	8007070 <ld_dword>
 8008be2:	4602      	mov	r2, r0
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6a1b      	ldr	r3, [r3, #32]
 8008bec:	3316      	adds	r3, #22
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7fe fa3e 	bl	8007070 <ld_dword>
 8008bf4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	80da      	strh	r2, [r3, #6]
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	0c1b      	lsrs	r3, r3, #16
 8008c02:	b29a      	uxth	r2, r3
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	809a      	strh	r2, [r3, #4]
 8008c08:	e000      	b.n	8008c0c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008c0a:	bf00      	nop
}
 8008c0c:	3720      	adds	r7, #32
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
	...

08008c14 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	1c59      	adds	r1, r3, #1
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	6011      	str	r1, [r2, #0]
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8008c2a:	89fb      	ldrh	r3, [r7, #14]
 8008c2c:	2b60      	cmp	r3, #96	; 0x60
 8008c2e:	d905      	bls.n	8008c3c <get_achar+0x28>
 8008c30:	89fb      	ldrh	r3, [r7, #14]
 8008c32:	2b7a      	cmp	r3, #122	; 0x7a
 8008c34:	d802      	bhi.n	8008c3c <get_achar+0x28>
 8008c36:	89fb      	ldrh	r3, [r7, #14]
 8008c38:	3b20      	subs	r3, #32
 8008c3a:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8008c3c:	89fb      	ldrh	r3, [r7, #14]
 8008c3e:	2b7f      	cmp	r3, #127	; 0x7f
 8008c40:	d904      	bls.n	8008c4c <get_achar+0x38>
 8008c42:	89fb      	ldrh	r3, [r7, #14]
 8008c44:	3b80      	subs	r3, #128	; 0x80
 8008c46:	4a05      	ldr	r2, [pc, #20]	; (8008c5c <get_achar+0x48>)
 8008c48:	5cd3      	ldrb	r3, [r2, r3]
 8008c4a:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 8008c4c:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3714      	adds	r7, #20
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr
 8008c5a:	bf00      	nop
 8008c5c:	08013d20 	.word	0x08013d20

08008c60 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b08a      	sub	sp, #40	; 0x28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	607a      	str	r2, [r7, #4]
 8008c6c:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8008c6e:	e009      	b.n	8008c84 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8008c70:	f107 0308 	add.w	r3, r7, #8
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7ff ffcd 	bl	8008c14 <get_achar>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d101      	bne.n	8008c84 <pattern_matching+0x24>
 8008c80:	2300      	movs	r3, #0
 8008c82:	e064      	b.n	8008d4e <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	1e5a      	subs	r2, r3, #1
 8008c88:	607a      	str	r2, [r7, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1f0      	bne.n	8008c70 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d104      	bne.n	8008ca0 <pattern_matching+0x40>
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d001      	beq.n	8008ca0 <pattern_matching+0x40>
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e056      	b.n	8008d4e <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	617b      	str	r3, [r7, #20]
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	2b3f      	cmp	r3, #63	; 0x3f
 8008cae:	d003      	beq.n	8008cb8 <pattern_matching+0x58>
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8008cb6:	d126      	bne.n	8008d06 <pattern_matching+0xa6>
				nm = nx = 0;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	61fb      	str	r3, [r7, #28]
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	1c5a      	adds	r2, r3, #1
 8008cc4:	617a      	str	r2, [r7, #20]
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	2b3f      	cmp	r3, #63	; 0x3f
 8008cca:	d103      	bne.n	8008cd4 <pattern_matching+0x74>
 8008ccc:	6a3b      	ldr	r3, [r7, #32]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	623b      	str	r3, [r7, #32]
 8008cd2:	e001      	b.n	8008cd8 <pattern_matching+0x78>
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	2b3f      	cmp	r3, #63	; 0x3f
 8008cde:	d0ef      	beq.n	8008cc0 <pattern_matching+0x60>
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ce6:	d0eb      	beq.n	8008cc0 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8008ce8:	6978      	ldr	r0, [r7, #20]
 8008cea:	6939      	ldr	r1, [r7, #16]
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	6a3a      	ldr	r2, [r7, #32]
 8008cf0:	f7ff ffb6 	bl	8008c60 <pattern_matching>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d001      	beq.n	8008cfe <pattern_matching+0x9e>
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e027      	b.n	8008d4e <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008d04:	e017      	b.n	8008d36 <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 8008d06:	f107 0314 	add.w	r3, r7, #20
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7ff ff82 	bl	8008c14 <get_achar>
 8008d10:	4603      	mov	r3, r0
 8008d12:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 8008d14:	f107 0310 	add.w	r3, r7, #16
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7ff ff7b 	bl	8008c14 <get_achar>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 8008d22:	8b7a      	ldrh	r2, [r7, #26]
 8008d24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d104      	bne.n	8008d34 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 8008d2a:	8b7b      	ldrh	r3, [r7, #26]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d1bb      	bne.n	8008ca8 <pattern_matching+0x48>
 8008d30:	2301      	movs	r3, #1
 8008d32:	e00c      	b.n	8008d4e <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 8008d34:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 8008d36:	f107 0308 	add.w	r3, r7, #8
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7ff ff6a 	bl	8008c14 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d002      	beq.n	8008d4c <pattern_matching+0xec>
 8008d46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d1a9      	bne.n	8008ca0 <pattern_matching+0x40>

	return 0;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3728      	adds	r7, #40	; 0x28
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
	...

08008d58 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b08a      	sub	sp, #40	; 0x28
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	613b      	str	r3, [r7, #16]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	60fb      	str	r3, [r7, #12]
 8008d70:	2300      	movs	r3, #0
 8008d72:	617b      	str	r3, [r7, #20]
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	1c5a      	adds	r2, r3, #1
 8008d7c:	61ba      	str	r2, [r7, #24]
 8008d7e:	693a      	ldr	r2, [r7, #16]
 8008d80:	4413      	add	r3, r2
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008d86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d88:	2b1f      	cmp	r3, #31
 8008d8a:	d940      	bls.n	8008e0e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008d8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d8e:	2b2f      	cmp	r3, #47	; 0x2f
 8008d90:	d006      	beq.n	8008da0 <create_name+0x48>
 8008d92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d94:	2b5c      	cmp	r3, #92	; 0x5c
 8008d96:	d110      	bne.n	8008dba <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008d98:	e002      	b.n	8008da0 <create_name+0x48>
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	61bb      	str	r3, [r7, #24]
 8008da0:	693a      	ldr	r2, [r7, #16]
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	4413      	add	r3, r2
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	2b2f      	cmp	r3, #47	; 0x2f
 8008daa:	d0f6      	beq.n	8008d9a <create_name+0x42>
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	4413      	add	r3, r2
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	2b5c      	cmp	r3, #92	; 0x5c
 8008db6:	d0f0      	beq.n	8008d9a <create_name+0x42>
			break;
 8008db8:	e02a      	b.n	8008e10 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	2bfe      	cmp	r3, #254	; 0xfe
 8008dbe:	d901      	bls.n	8008dc4 <create_name+0x6c>
 8008dc0:	2306      	movs	r3, #6
 8008dc2:	e17d      	b.n	80090c0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008dc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008dca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dcc:	2101      	movs	r1, #1
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f001 feda 	bl	800ab88 <ff_convert>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008dd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d101      	bne.n	8008de2 <create_name+0x8a>
 8008dde:	2306      	movs	r3, #6
 8008de0:	e16e      	b.n	80090c0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008de2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008de4:	2b7f      	cmp	r3, #127	; 0x7f
 8008de6:	d809      	bhi.n	8008dfc <create_name+0xa4>
 8008de8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dea:	4619      	mov	r1, r3
 8008dec:	488d      	ldr	r0, [pc, #564]	; (8009024 <create_name+0x2cc>)
 8008dee:	f7fe fa0c 	bl	800720a <chk_chr>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d001      	beq.n	8008dfc <create_name+0xa4>
 8008df8:	2306      	movs	r3, #6
 8008dfa:	e161      	b.n	80090c0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	1c5a      	adds	r2, r3, #1
 8008e00:	617a      	str	r2, [r7, #20]
 8008e02:	005b      	lsls	r3, r3, #1
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	4413      	add	r3, r2
 8008e08:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008e0a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008e0c:	e7b4      	b.n	8008d78 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008e0e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008e10:	693a      	ldr	r2, [r7, #16]
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	441a      	add	r2, r3
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008e1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e1c:	2b1f      	cmp	r3, #31
 8008e1e:	d801      	bhi.n	8008e24 <create_name+0xcc>
 8008e20:	2304      	movs	r3, #4
 8008e22:	e000      	b.n	8008e26 <create_name+0xce>
 8008e24:	2300      	movs	r3, #0
 8008e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008e2a:	e011      	b.n	8008e50 <create_name+0xf8>
		w = lfn[di - 1];
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008e32:	3b01      	subs	r3, #1
 8008e34:	005b      	lsls	r3, r3, #1
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	4413      	add	r3, r2
 8008e3a:	881b      	ldrh	r3, [r3, #0]
 8008e3c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8008e3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e40:	2b20      	cmp	r3, #32
 8008e42:	d002      	beq.n	8008e4a <create_name+0xf2>
 8008e44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e46:	2b2e      	cmp	r3, #46	; 0x2e
 8008e48:	d106      	bne.n	8008e58 <create_name+0x100>
		di--;
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	3b01      	subs	r3, #1
 8008e4e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1ea      	bne.n	8008e2c <create_name+0xd4>
 8008e56:	e000      	b.n	8008e5a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008e58:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	005b      	lsls	r3, r3, #1
 8008e5e:	68fa      	ldr	r2, [r7, #12]
 8008e60:	4413      	add	r3, r2
 8008e62:	2200      	movs	r2, #0
 8008e64:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d101      	bne.n	8008e70 <create_name+0x118>
 8008e6c:	2306      	movs	r3, #6
 8008e6e:	e127      	b.n	80090c0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	3324      	adds	r3, #36	; 0x24
 8008e74:	220b      	movs	r2, #11
 8008e76:	2120      	movs	r1, #32
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7fe f984 	bl	8007186 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008e7e:	2300      	movs	r3, #0
 8008e80:	61bb      	str	r3, [r7, #24]
 8008e82:	e002      	b.n	8008e8a <create_name+0x132>
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	3301      	adds	r3, #1
 8008e88:	61bb      	str	r3, [r7, #24]
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	005b      	lsls	r3, r3, #1
 8008e8e:	68fa      	ldr	r2, [r7, #12]
 8008e90:	4413      	add	r3, r2
 8008e92:	881b      	ldrh	r3, [r3, #0]
 8008e94:	2b20      	cmp	r3, #32
 8008e96:	d0f5      	beq.n	8008e84 <create_name+0x12c>
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	005b      	lsls	r3, r3, #1
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	881b      	ldrh	r3, [r3, #0]
 8008ea2:	2b2e      	cmp	r3, #46	; 0x2e
 8008ea4:	d0ee      	beq.n	8008e84 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d009      	beq.n	8008ec0 <create_name+0x168>
 8008eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008eb0:	f043 0303 	orr.w	r3, r3, #3
 8008eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008eb8:	e002      	b.n	8008ec0 <create_name+0x168>
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	617b      	str	r3, [r7, #20]
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d009      	beq.n	8008eda <create_name+0x182>
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	005b      	lsls	r3, r3, #1
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	881b      	ldrh	r3, [r3, #0]
 8008ed6:	2b2e      	cmp	r3, #46	; 0x2e
 8008ed8:	d1ef      	bne.n	8008eba <create_name+0x162>

	i = b = 0; ni = 8;
 8008eda:	2300      	movs	r3, #0
 8008edc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	623b      	str	r3, [r7, #32]
 8008ee4:	2308      	movs	r3, #8
 8008ee6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	1c5a      	adds	r2, r3, #1
 8008eec:	61ba      	str	r2, [r7, #24]
 8008eee:	005b      	lsls	r3, r3, #1
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	881b      	ldrh	r3, [r3, #0]
 8008ef6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008ef8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f000 8090 	beq.w	8009020 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008f00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f02:	2b20      	cmp	r3, #32
 8008f04:	d006      	beq.n	8008f14 <create_name+0x1bc>
 8008f06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f08:	2b2e      	cmp	r3, #46	; 0x2e
 8008f0a:	d10a      	bne.n	8008f22 <create_name+0x1ca>
 8008f0c:	69ba      	ldr	r2, [r7, #24]
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d006      	beq.n	8008f22 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008f14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f18:	f043 0303 	orr.w	r3, r3, #3
 8008f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008f20:	e07d      	b.n	800901e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008f22:	6a3a      	ldr	r2, [r7, #32]
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d203      	bcs.n	8008f32 <create_name+0x1da>
 8008f2a:	69ba      	ldr	r2, [r7, #24]
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d123      	bne.n	8008f7a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	2b0b      	cmp	r3, #11
 8008f36:	d106      	bne.n	8008f46 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8008f38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f3c:	f043 0303 	orr.w	r3, r3, #3
 8008f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008f44:	e075      	b.n	8009032 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008f46:	69ba      	ldr	r2, [r7, #24]
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d005      	beq.n	8008f5a <create_name+0x202>
 8008f4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f52:	f043 0303 	orr.w	r3, r3, #3
 8008f56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8008f5a:	69ba      	ldr	r2, [r7, #24]
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d866      	bhi.n	8009030 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	61bb      	str	r3, [r7, #24]
 8008f66:	2308      	movs	r3, #8
 8008f68:	623b      	str	r3, [r7, #32]
 8008f6a:	230b      	movs	r3, #11
 8008f6c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008f6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008f78:	e051      	b.n	800901e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008f7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f7c:	2b7f      	cmp	r3, #127	; 0x7f
 8008f7e:	d914      	bls.n	8008faa <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008f80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f82:	2100      	movs	r1, #0
 8008f84:	4618      	mov	r0, r3
 8008f86:	f001 fdff 	bl	800ab88 <ff_convert>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008f8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d004      	beq.n	8008f9e <create_name+0x246>
 8008f94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f96:	3b80      	subs	r3, #128	; 0x80
 8008f98:	4a23      	ldr	r2, [pc, #140]	; (8009028 <create_name+0x2d0>)
 8008f9a:	5cd3      	ldrb	r3, [r2, r3]
 8008f9c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008f9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fa2:	f043 0302 	orr.w	r3, r3, #2
 8008fa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008faa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d007      	beq.n	8008fc0 <create_name+0x268>
 8008fb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	481d      	ldr	r0, [pc, #116]	; (800902c <create_name+0x2d4>)
 8008fb6:	f7fe f928 	bl	800720a <chk_chr>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d008      	beq.n	8008fd2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008fc0:	235f      	movs	r3, #95	; 0x5f
 8008fc2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fc8:	f043 0303 	orr.w	r3, r3, #3
 8008fcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008fd0:	e01b      	b.n	800900a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008fd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008fd4:	2b40      	cmp	r3, #64	; 0x40
 8008fd6:	d909      	bls.n	8008fec <create_name+0x294>
 8008fd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008fda:	2b5a      	cmp	r3, #90	; 0x5a
 8008fdc:	d806      	bhi.n	8008fec <create_name+0x294>
					b |= 2;
 8008fde:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008fe2:	f043 0302 	orr.w	r3, r3, #2
 8008fe6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008fea:	e00e      	b.n	800900a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008fec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008fee:	2b60      	cmp	r3, #96	; 0x60
 8008ff0:	d90b      	bls.n	800900a <create_name+0x2b2>
 8008ff2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ff4:	2b7a      	cmp	r3, #122	; 0x7a
 8008ff6:	d808      	bhi.n	800900a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008ff8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008ffc:	f043 0301 	orr.w	r3, r3, #1
 8009000:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009004:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009006:	3b20      	subs	r3, #32
 8009008:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800900a:	6a3b      	ldr	r3, [r7, #32]
 800900c:	1c5a      	adds	r2, r3, #1
 800900e:	623a      	str	r2, [r7, #32]
 8009010:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009012:	b2d1      	uxtb	r1, r2
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	4413      	add	r3, r2
 8009018:	460a      	mov	r2, r1
 800901a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800901e:	e763      	b.n	8008ee8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009020:	bf00      	nop
 8009022:	e006      	b.n	8009032 <create_name+0x2da>
 8009024:	08013c58 	.word	0x08013c58
 8009028:	08013d20 	.word	0x08013d20
 800902c:	08013c64 	.word	0x08013c64
			if (si > di) break;			/* No extension */
 8009030:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009038:	2be5      	cmp	r3, #229	; 0xe5
 800903a:	d103      	bne.n	8009044 <create_name+0x2ec>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2205      	movs	r2, #5
 8009040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	2b08      	cmp	r3, #8
 8009048:	d104      	bne.n	8009054 <create_name+0x2fc>
 800904a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009054:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009058:	f003 030c 	and.w	r3, r3, #12
 800905c:	2b0c      	cmp	r3, #12
 800905e:	d005      	beq.n	800906c <create_name+0x314>
 8009060:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009064:	f003 0303 	and.w	r3, r3, #3
 8009068:	2b03      	cmp	r3, #3
 800906a:	d105      	bne.n	8009078 <create_name+0x320>
 800906c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009070:	f043 0302 	orr.w	r3, r3, #2
 8009074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800907c:	f003 0302 	and.w	r3, r3, #2
 8009080:	2b00      	cmp	r3, #0
 8009082:	d117      	bne.n	80090b4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009084:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009088:	f003 0303 	and.w	r3, r3, #3
 800908c:	2b01      	cmp	r3, #1
 800908e:	d105      	bne.n	800909c <create_name+0x344>
 8009090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009094:	f043 0310 	orr.w	r3, r3, #16
 8009098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800909c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80090a0:	f003 030c 	and.w	r3, r3, #12
 80090a4:	2b04      	cmp	r3, #4
 80090a6:	d105      	bne.n	80090b4 <create_name+0x35c>
 80090a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090ac:	f043 0308 	orr.w	r3, r3, #8
 80090b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80090ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80090be:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3728      	adds	r7, #40	; 0x28
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b086      	sub	sp, #24
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80090dc:	e002      	b.n	80090e4 <follow_path+0x1c>
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	3301      	adds	r3, #1
 80090e2:	603b      	str	r3, [r7, #0]
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	2b2f      	cmp	r3, #47	; 0x2f
 80090ea:	d0f8      	beq.n	80090de <follow_path+0x16>
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	2b5c      	cmp	r3, #92	; 0x5c
 80090f2:	d0f4      	beq.n	80090de <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	2200      	movs	r2, #0
 80090f8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	2b1f      	cmp	r3, #31
 8009100:	d80a      	bhi.n	8009118 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2280      	movs	r2, #128	; 0x80
 8009106:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800910a:	2100      	movs	r1, #0
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f7fe fe29 	bl	8007d64 <dir_sdi>
 8009112:	4603      	mov	r3, r0
 8009114:	75fb      	strb	r3, [r7, #23]
 8009116:	e048      	b.n	80091aa <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009118:	463b      	mov	r3, r7
 800911a:	4619      	mov	r1, r3
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f7ff fe1b 	bl	8008d58 <create_name>
 8009122:	4603      	mov	r3, r0
 8009124:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009126:	7dfb      	ldrb	r3, [r7, #23]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d139      	bne.n	80091a0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f7ff fa91 	bl	8008654 <dir_find>
 8009132:	4603      	mov	r3, r0
 8009134:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800913c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800913e:	7dfb      	ldrb	r3, [r7, #23]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d00a      	beq.n	800915a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009144:	7dfb      	ldrb	r3, [r7, #23]
 8009146:	2b04      	cmp	r3, #4
 8009148:	d12c      	bne.n	80091a4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800914a:	7afb      	ldrb	r3, [r7, #11]
 800914c:	f003 0304 	and.w	r3, r3, #4
 8009150:	2b00      	cmp	r3, #0
 8009152:	d127      	bne.n	80091a4 <follow_path+0xdc>
 8009154:	2305      	movs	r3, #5
 8009156:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009158:	e024      	b.n	80091a4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800915a:	7afb      	ldrb	r3, [r7, #11]
 800915c:	f003 0304 	and.w	r3, r3, #4
 8009160:	2b00      	cmp	r3, #0
 8009162:	d121      	bne.n	80091a8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	799b      	ldrb	r3, [r3, #6]
 8009168:	f003 0310 	and.w	r3, r3, #16
 800916c:	2b00      	cmp	r3, #0
 800916e:	d102      	bne.n	8009176 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009170:	2305      	movs	r3, #5
 8009172:	75fb      	strb	r3, [r7, #23]
 8009174:	e019      	b.n	80091aa <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	695b      	ldr	r3, [r3, #20]
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	8992      	ldrh	r2, [r2, #12]
 8009184:	fbb3 f0f2 	udiv	r0, r3, r2
 8009188:	fb00 f202 	mul.w	r2, r0, r2
 800918c:	1a9b      	subs	r3, r3, r2
 800918e:	440b      	add	r3, r1
 8009190:	4619      	mov	r1, r3
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f7fe ff8c 	bl	80080b0 <ld_clust>
 8009198:	4602      	mov	r2, r0
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800919e:	e7bb      	b.n	8009118 <follow_path+0x50>
			if (res != FR_OK) break;
 80091a0:	bf00      	nop
 80091a2:	e002      	b.n	80091aa <follow_path+0xe2>
				break;
 80091a4:	bf00      	nop
 80091a6:	e000      	b.n	80091aa <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80091a8:	bf00      	nop
			}
		}
	}

	return res;
 80091aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3718      	adds	r7, #24
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b087      	sub	sp, #28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80091bc:	f04f 33ff 	mov.w	r3, #4294967295
 80091c0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d031      	beq.n	800922e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	617b      	str	r3, [r7, #20]
 80091d0:	e002      	b.n	80091d8 <get_ldnumber+0x24>
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	3301      	adds	r3, #1
 80091d6:	617b      	str	r3, [r7, #20]
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	2b1f      	cmp	r3, #31
 80091de:	d903      	bls.n	80091e8 <get_ldnumber+0x34>
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	2b3a      	cmp	r3, #58	; 0x3a
 80091e6:	d1f4      	bne.n	80091d2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	2b3a      	cmp	r3, #58	; 0x3a
 80091ee:	d11c      	bne.n	800922a <get_ldnumber+0x76>
			tp = *path;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	1c5a      	adds	r2, r3, #1
 80091fa:	60fa      	str	r2, [r7, #12]
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	3b30      	subs	r3, #48	; 0x30
 8009200:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	2b09      	cmp	r3, #9
 8009206:	d80e      	bhi.n	8009226 <get_ldnumber+0x72>
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	429a      	cmp	r2, r3
 800920e:	d10a      	bne.n	8009226 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d107      	bne.n	8009226 <get_ldnumber+0x72>
					vol = (int)i;
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	3301      	adds	r3, #1
 800921e:	617b      	str	r3, [r7, #20]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	697a      	ldr	r2, [r7, #20]
 8009224:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	e002      	b.n	8009230 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800922a:	2300      	movs	r3, #0
 800922c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800922e:	693b      	ldr	r3, [r7, #16]
}
 8009230:	4618      	mov	r0, r3
 8009232:	371c      	adds	r7, #28
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2200      	movs	r2, #0
 800924a:	70da      	strb	r2, [r3, #3]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f04f 32ff 	mov.w	r2, #4294967295
 8009252:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009254:	6839      	ldr	r1, [r7, #0]
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f7fe f9a2 	bl	80075a0 <move_window>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d001      	beq.n	8009266 <check_fs+0x2a>
 8009262:	2304      	movs	r3, #4
 8009264:	e038      	b.n	80092d8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	3338      	adds	r3, #56	; 0x38
 800926a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800926e:	4618      	mov	r0, r3
 8009270:	f7fd fee6 	bl	8007040 <ld_word>
 8009274:	4603      	mov	r3, r0
 8009276:	461a      	mov	r2, r3
 8009278:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800927c:	429a      	cmp	r2, r3
 800927e:	d001      	beq.n	8009284 <check_fs+0x48>
 8009280:	2303      	movs	r3, #3
 8009282:	e029      	b.n	80092d8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800928a:	2be9      	cmp	r3, #233	; 0xe9
 800928c:	d009      	beq.n	80092a2 <check_fs+0x66>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009294:	2beb      	cmp	r3, #235	; 0xeb
 8009296:	d11e      	bne.n	80092d6 <check_fs+0x9a>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800929e:	2b90      	cmp	r3, #144	; 0x90
 80092a0:	d119      	bne.n	80092d6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	3338      	adds	r3, #56	; 0x38
 80092a6:	3336      	adds	r3, #54	; 0x36
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7fd fee1 	bl	8007070 <ld_dword>
 80092ae:	4603      	mov	r3, r0
 80092b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80092b4:	4a0a      	ldr	r2, [pc, #40]	; (80092e0 <check_fs+0xa4>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d101      	bne.n	80092be <check_fs+0x82>
 80092ba:	2300      	movs	r3, #0
 80092bc:	e00c      	b.n	80092d8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	3338      	adds	r3, #56	; 0x38
 80092c2:	3352      	adds	r3, #82	; 0x52
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7fd fed3 	bl	8007070 <ld_dword>
 80092ca:	4603      	mov	r3, r0
 80092cc:	4a05      	ldr	r2, [pc, #20]	; (80092e4 <check_fs+0xa8>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d101      	bne.n	80092d6 <check_fs+0x9a>
 80092d2:	2300      	movs	r3, #0
 80092d4:	e000      	b.n	80092d8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80092d6:	2302      	movs	r3, #2
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3708      	adds	r7, #8
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	00544146 	.word	0x00544146
 80092e4:	33544146 	.word	0x33544146

080092e8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b096      	sub	sp, #88	; 0x58
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	4613      	mov	r3, r2
 80092f4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	2200      	movs	r2, #0
 80092fa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80092fc:	68f8      	ldr	r0, [r7, #12]
 80092fe:	f7ff ff59 	bl	80091b4 <get_ldnumber>
 8009302:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009306:	2b00      	cmp	r3, #0
 8009308:	da01      	bge.n	800930e <find_volume+0x26>
 800930a:	230b      	movs	r3, #11
 800930c:	e265      	b.n	80097da <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800930e:	4a9f      	ldr	r2, [pc, #636]	; (800958c <find_volume+0x2a4>)
 8009310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009316:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931a:	2b00      	cmp	r3, #0
 800931c:	d101      	bne.n	8009322 <find_volume+0x3a>
 800931e:	230c      	movs	r3, #12
 8009320:	e25b      	b.n	80097da <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009326:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009328:	79fb      	ldrb	r3, [r7, #7]
 800932a:	f023 0301 	bic.w	r3, r3, #1
 800932e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d01a      	beq.n	800936e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933a:	785b      	ldrb	r3, [r3, #1]
 800933c:	4618      	mov	r0, r3
 800933e:	f7fd fde1 	bl	8006f04 <disk_status>
 8009342:	4603      	mov	r3, r0
 8009344:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009348:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800934c:	f003 0301 	and.w	r3, r3, #1
 8009350:	2b00      	cmp	r3, #0
 8009352:	d10c      	bne.n	800936e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009354:	79fb      	ldrb	r3, [r7, #7]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d007      	beq.n	800936a <find_volume+0x82>
 800935a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800935e:	f003 0304 	and.w	r3, r3, #4
 8009362:	2b00      	cmp	r3, #0
 8009364:	d001      	beq.n	800936a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009366:	230a      	movs	r3, #10
 8009368:	e237      	b.n	80097da <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800936a:	2300      	movs	r3, #0
 800936c:	e235      	b.n	80097da <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800936e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009370:	2200      	movs	r2, #0
 8009372:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009376:	b2da      	uxtb	r2, r3
 8009378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800937c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937e:	785b      	ldrb	r3, [r3, #1]
 8009380:	4618      	mov	r0, r3
 8009382:	f7fd fdd9 	bl	8006f38 <disk_initialize>
 8009386:	4603      	mov	r3, r0
 8009388:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800938c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009390:	f003 0301 	and.w	r3, r3, #1
 8009394:	2b00      	cmp	r3, #0
 8009396:	d001      	beq.n	800939c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009398:	2303      	movs	r3, #3
 800939a:	e21e      	b.n	80097da <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800939c:	79fb      	ldrb	r3, [r7, #7]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d007      	beq.n	80093b2 <find_volume+0xca>
 80093a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093a6:	f003 0304 	and.w	r3, r3, #4
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d001      	beq.n	80093b2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80093ae:	230a      	movs	r3, #10
 80093b0:	e213      	b.n	80097da <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80093b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b4:	7858      	ldrb	r0, [r3, #1]
 80093b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b8:	330c      	adds	r3, #12
 80093ba:	461a      	mov	r2, r3
 80093bc:	2102      	movs	r1, #2
 80093be:	f7fd fe21 	bl	8007004 <disk_ioctl>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d001      	beq.n	80093cc <find_volume+0xe4>
 80093c8:	2301      	movs	r3, #1
 80093ca:	e206      	b.n	80097da <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80093cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ce:	899b      	ldrh	r3, [r3, #12]
 80093d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093d4:	d80d      	bhi.n	80093f2 <find_volume+0x10a>
 80093d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d8:	899b      	ldrh	r3, [r3, #12]
 80093da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093de:	d308      	bcc.n	80093f2 <find_volume+0x10a>
 80093e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e2:	899b      	ldrh	r3, [r3, #12]
 80093e4:	461a      	mov	r2, r3
 80093e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e8:	899b      	ldrh	r3, [r3, #12]
 80093ea:	3b01      	subs	r3, #1
 80093ec:	4013      	ands	r3, r2
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d001      	beq.n	80093f6 <find_volume+0x10e>
 80093f2:	2301      	movs	r3, #1
 80093f4:	e1f1      	b.n	80097da <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80093f6:	2300      	movs	r3, #0
 80093f8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80093fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80093fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80093fe:	f7ff ff1d 	bl	800923c <check_fs>
 8009402:	4603      	mov	r3, r0
 8009404:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009408:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800940c:	2b02      	cmp	r3, #2
 800940e:	d149      	bne.n	80094a4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009410:	2300      	movs	r3, #0
 8009412:	643b      	str	r3, [r7, #64]	; 0x40
 8009414:	e01e      	b.n	8009454 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009418:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800941c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800941e:	011b      	lsls	r3, r3, #4
 8009420:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009424:	4413      	add	r3, r2
 8009426:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942a:	3304      	adds	r3, #4
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d006      	beq.n	8009440 <find_volume+0x158>
 8009432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009434:	3308      	adds	r3, #8
 8009436:	4618      	mov	r0, r3
 8009438:	f7fd fe1a 	bl	8007070 <ld_dword>
 800943c:	4602      	mov	r2, r0
 800943e:	e000      	b.n	8009442 <find_volume+0x15a>
 8009440:	2200      	movs	r2, #0
 8009442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	3358      	adds	r3, #88	; 0x58
 8009448:	443b      	add	r3, r7
 800944a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800944e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009450:	3301      	adds	r3, #1
 8009452:	643b      	str	r3, [r7, #64]	; 0x40
 8009454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009456:	2b03      	cmp	r3, #3
 8009458:	d9dd      	bls.n	8009416 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800945a:	2300      	movs	r3, #0
 800945c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800945e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009460:	2b00      	cmp	r3, #0
 8009462:	d002      	beq.n	800946a <find_volume+0x182>
 8009464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009466:	3b01      	subs	r3, #1
 8009468:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800946a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	3358      	adds	r3, #88	; 0x58
 8009470:	443b      	add	r3, r7
 8009472:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009476:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800947a:	2b00      	cmp	r3, #0
 800947c:	d005      	beq.n	800948a <find_volume+0x1a2>
 800947e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009480:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009482:	f7ff fedb 	bl	800923c <check_fs>
 8009486:	4603      	mov	r3, r0
 8009488:	e000      	b.n	800948c <find_volume+0x1a4>
 800948a:	2303      	movs	r3, #3
 800948c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009490:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009494:	2b01      	cmp	r3, #1
 8009496:	d905      	bls.n	80094a4 <find_volume+0x1bc>
 8009498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800949a:	3301      	adds	r3, #1
 800949c:	643b      	str	r3, [r7, #64]	; 0x40
 800949e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094a0:	2b03      	cmp	r3, #3
 80094a2:	d9e2      	bls.n	800946a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80094a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80094a8:	2b04      	cmp	r3, #4
 80094aa:	d101      	bne.n	80094b0 <find_volume+0x1c8>
 80094ac:	2301      	movs	r3, #1
 80094ae:	e194      	b.n	80097da <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80094b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d901      	bls.n	80094bc <find_volume+0x1d4>
 80094b8:	230d      	movs	r3, #13
 80094ba:	e18e      	b.n	80097da <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80094bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094be:	3338      	adds	r3, #56	; 0x38
 80094c0:	330b      	adds	r3, #11
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7fd fdbc 	bl	8007040 <ld_word>
 80094c8:	4603      	mov	r3, r0
 80094ca:	461a      	mov	r2, r3
 80094cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ce:	899b      	ldrh	r3, [r3, #12]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d001      	beq.n	80094d8 <find_volume+0x1f0>
 80094d4:	230d      	movs	r3, #13
 80094d6:	e180      	b.n	80097da <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80094d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094da:	3338      	adds	r3, #56	; 0x38
 80094dc:	3316      	adds	r3, #22
 80094de:	4618      	mov	r0, r3
 80094e0:	f7fd fdae 	bl	8007040 <ld_word>
 80094e4:	4603      	mov	r3, r0
 80094e6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80094e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d106      	bne.n	80094fc <find_volume+0x214>
 80094ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f0:	3338      	adds	r3, #56	; 0x38
 80094f2:	3324      	adds	r3, #36	; 0x24
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7fd fdbb 	bl	8007070 <ld_dword>
 80094fa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80094fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009500:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009504:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8009508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800950c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950e:	789b      	ldrb	r3, [r3, #2]
 8009510:	2b01      	cmp	r3, #1
 8009512:	d005      	beq.n	8009520 <find_volume+0x238>
 8009514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009516:	789b      	ldrb	r3, [r3, #2]
 8009518:	2b02      	cmp	r3, #2
 800951a:	d001      	beq.n	8009520 <find_volume+0x238>
 800951c:	230d      	movs	r3, #13
 800951e:	e15c      	b.n	80097da <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009522:	789b      	ldrb	r3, [r3, #2]
 8009524:	461a      	mov	r2, r3
 8009526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009528:	fb02 f303 	mul.w	r3, r2, r3
 800952c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800952e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009530:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009534:	b29a      	uxth	r2, r3
 8009536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009538:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800953a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953c:	895b      	ldrh	r3, [r3, #10]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d008      	beq.n	8009554 <find_volume+0x26c>
 8009542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009544:	895b      	ldrh	r3, [r3, #10]
 8009546:	461a      	mov	r2, r3
 8009548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954a:	895b      	ldrh	r3, [r3, #10]
 800954c:	3b01      	subs	r3, #1
 800954e:	4013      	ands	r3, r2
 8009550:	2b00      	cmp	r3, #0
 8009552:	d001      	beq.n	8009558 <find_volume+0x270>
 8009554:	230d      	movs	r3, #13
 8009556:	e140      	b.n	80097da <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955a:	3338      	adds	r3, #56	; 0x38
 800955c:	3311      	adds	r3, #17
 800955e:	4618      	mov	r0, r3
 8009560:	f7fd fd6e 	bl	8007040 <ld_word>
 8009564:	4603      	mov	r3, r0
 8009566:	461a      	mov	r2, r3
 8009568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800956c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956e:	891b      	ldrh	r3, [r3, #8]
 8009570:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009572:	8992      	ldrh	r2, [r2, #12]
 8009574:	0952      	lsrs	r2, r2, #5
 8009576:	b292      	uxth	r2, r2
 8009578:	fbb3 f1f2 	udiv	r1, r3, r2
 800957c:	fb01 f202 	mul.w	r2, r1, r2
 8009580:	1a9b      	subs	r3, r3, r2
 8009582:	b29b      	uxth	r3, r3
 8009584:	2b00      	cmp	r3, #0
 8009586:	d003      	beq.n	8009590 <find_volume+0x2a8>
 8009588:	230d      	movs	r3, #13
 800958a:	e126      	b.n	80097da <find_volume+0x4f2>
 800958c:	20003678 	.word	0x20003678

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009592:	3338      	adds	r3, #56	; 0x38
 8009594:	3313      	adds	r3, #19
 8009596:	4618      	mov	r0, r3
 8009598:	f7fd fd52 	bl	8007040 <ld_word>
 800959c:	4603      	mov	r3, r0
 800959e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80095a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d106      	bne.n	80095b4 <find_volume+0x2cc>
 80095a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a8:	3338      	adds	r3, #56	; 0x38
 80095aa:	3320      	adds	r3, #32
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7fd fd5f 	bl	8007070 <ld_dword>
 80095b2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80095b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b6:	3338      	adds	r3, #56	; 0x38
 80095b8:	330e      	adds	r3, #14
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7fd fd40 	bl	8007040 <ld_word>
 80095c0:	4603      	mov	r3, r0
 80095c2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80095c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d101      	bne.n	80095ce <find_volume+0x2e6>
 80095ca:	230d      	movs	r3, #13
 80095cc:	e105      	b.n	80097da <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80095ce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80095d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095d2:	4413      	add	r3, r2
 80095d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095d6:	8911      	ldrh	r1, [r2, #8]
 80095d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095da:	8992      	ldrh	r2, [r2, #12]
 80095dc:	0952      	lsrs	r2, r2, #5
 80095de:	b292      	uxth	r2, r2
 80095e0:	fbb1 f2f2 	udiv	r2, r1, r2
 80095e4:	b292      	uxth	r2, r2
 80095e6:	4413      	add	r3, r2
 80095e8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80095ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d201      	bcs.n	80095f6 <find_volume+0x30e>
 80095f2:	230d      	movs	r3, #13
 80095f4:	e0f1      	b.n	80097da <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80095f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fa:	1ad3      	subs	r3, r2, r3
 80095fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095fe:	8952      	ldrh	r2, [r2, #10]
 8009600:	fbb3 f3f2 	udiv	r3, r3, r2
 8009604:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009608:	2b00      	cmp	r3, #0
 800960a:	d101      	bne.n	8009610 <find_volume+0x328>
 800960c:	230d      	movs	r3, #13
 800960e:	e0e4      	b.n	80097da <find_volume+0x4f2>
		fmt = FS_FAT32;
 8009610:	2303      	movs	r3, #3
 8009612:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009618:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800961c:	4293      	cmp	r3, r2
 800961e:	d802      	bhi.n	8009626 <find_volume+0x33e>
 8009620:	2302      	movs	r3, #2
 8009622:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009628:	f640 72f5 	movw	r2, #4085	; 0xff5
 800962c:	4293      	cmp	r3, r2
 800962e:	d802      	bhi.n	8009636 <find_volume+0x34e>
 8009630:	2301      	movs	r3, #1
 8009632:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009638:	1c9a      	adds	r2, r3, #2
 800963a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800963c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800963e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009640:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009642:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009644:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009648:	441a      	add	r2, r3
 800964a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800964e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009652:	441a      	add	r2, r3
 8009654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009656:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8009658:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800965c:	2b03      	cmp	r3, #3
 800965e:	d11e      	bne.n	800969e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009662:	3338      	adds	r3, #56	; 0x38
 8009664:	332a      	adds	r3, #42	; 0x2a
 8009666:	4618      	mov	r0, r3
 8009668:	f7fd fcea 	bl	8007040 <ld_word>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d001      	beq.n	8009676 <find_volume+0x38e>
 8009672:	230d      	movs	r3, #13
 8009674:	e0b1      	b.n	80097da <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009678:	891b      	ldrh	r3, [r3, #8]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d001      	beq.n	8009682 <find_volume+0x39a>
 800967e:	230d      	movs	r3, #13
 8009680:	e0ab      	b.n	80097da <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009684:	3338      	adds	r3, #56	; 0x38
 8009686:	332c      	adds	r3, #44	; 0x2c
 8009688:	4618      	mov	r0, r3
 800968a:	f7fd fcf1 	bl	8007070 <ld_dword>
 800968e:	4602      	mov	r2, r0
 8009690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009692:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009696:	69db      	ldr	r3, [r3, #28]
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	647b      	str	r3, [r7, #68]	; 0x44
 800969c:	e01f      	b.n	80096de <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800969e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a0:	891b      	ldrh	r3, [r3, #8]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d101      	bne.n	80096aa <find_volume+0x3c2>
 80096a6:	230d      	movs	r3, #13
 80096a8:	e097      	b.n	80097da <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80096aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096b0:	441a      	add	r2, r3
 80096b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80096b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	d103      	bne.n	80096c6 <find_volume+0x3de>
 80096be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c0:	69db      	ldr	r3, [r3, #28]
 80096c2:	005b      	lsls	r3, r3, #1
 80096c4:	e00a      	b.n	80096dc <find_volume+0x3f4>
 80096c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c8:	69da      	ldr	r2, [r3, #28]
 80096ca:	4613      	mov	r3, r2
 80096cc:	005b      	lsls	r3, r3, #1
 80096ce:	4413      	add	r3, r2
 80096d0:	085a      	lsrs	r2, r3, #1
 80096d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d4:	69db      	ldr	r3, [r3, #28]
 80096d6:	f003 0301 	and.w	r3, r3, #1
 80096da:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80096dc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80096de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e0:	6a1a      	ldr	r2, [r3, #32]
 80096e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e4:	899b      	ldrh	r3, [r3, #12]
 80096e6:	4619      	mov	r1, r3
 80096e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096ea:	440b      	add	r3, r1
 80096ec:	3b01      	subs	r3, #1
 80096ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80096f0:	8989      	ldrh	r1, [r1, #12]
 80096f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d201      	bcs.n	80096fe <find_volume+0x416>
 80096fa:	230d      	movs	r3, #13
 80096fc:	e06d      	b.n	80097da <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80096fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009700:	f04f 32ff 	mov.w	r2, #4294967295
 8009704:	619a      	str	r2, [r3, #24]
 8009706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009708:	699a      	ldr	r2, [r3, #24]
 800970a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800970e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009710:	2280      	movs	r2, #128	; 0x80
 8009712:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009714:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009718:	2b03      	cmp	r3, #3
 800971a:	d149      	bne.n	80097b0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800971c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971e:	3338      	adds	r3, #56	; 0x38
 8009720:	3330      	adds	r3, #48	; 0x30
 8009722:	4618      	mov	r0, r3
 8009724:	f7fd fc8c 	bl	8007040 <ld_word>
 8009728:	4603      	mov	r3, r0
 800972a:	2b01      	cmp	r3, #1
 800972c:	d140      	bne.n	80097b0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800972e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009730:	3301      	adds	r3, #1
 8009732:	4619      	mov	r1, r3
 8009734:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009736:	f7fd ff33 	bl	80075a0 <move_window>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d137      	bne.n	80097b0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8009740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009742:	2200      	movs	r2, #0
 8009744:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009748:	3338      	adds	r3, #56	; 0x38
 800974a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800974e:	4618      	mov	r0, r3
 8009750:	f7fd fc76 	bl	8007040 <ld_word>
 8009754:	4603      	mov	r3, r0
 8009756:	461a      	mov	r2, r3
 8009758:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800975c:	429a      	cmp	r2, r3
 800975e:	d127      	bne.n	80097b0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009762:	3338      	adds	r3, #56	; 0x38
 8009764:	4618      	mov	r0, r3
 8009766:	f7fd fc83 	bl	8007070 <ld_dword>
 800976a:	4603      	mov	r3, r0
 800976c:	4a1d      	ldr	r2, [pc, #116]	; (80097e4 <find_volume+0x4fc>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d11e      	bne.n	80097b0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009774:	3338      	adds	r3, #56	; 0x38
 8009776:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800977a:	4618      	mov	r0, r3
 800977c:	f7fd fc78 	bl	8007070 <ld_dword>
 8009780:	4603      	mov	r3, r0
 8009782:	4a19      	ldr	r2, [pc, #100]	; (80097e8 <find_volume+0x500>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d113      	bne.n	80097b0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978a:	3338      	adds	r3, #56	; 0x38
 800978c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009790:	4618      	mov	r0, r3
 8009792:	f7fd fc6d 	bl	8007070 <ld_dword>
 8009796:	4602      	mov	r2, r0
 8009798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800979c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979e:	3338      	adds	r3, #56	; 0x38
 80097a0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7fd fc63 	bl	8007070 <ld_dword>
 80097aa:	4602      	mov	r2, r0
 80097ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ae:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80097b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80097b6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80097b8:	4b0c      	ldr	r3, [pc, #48]	; (80097ec <find_volume+0x504>)
 80097ba:	881b      	ldrh	r3, [r3, #0]
 80097bc:	3301      	adds	r3, #1
 80097be:	b29a      	uxth	r2, r3
 80097c0:	4b0a      	ldr	r3, [pc, #40]	; (80097ec <find_volume+0x504>)
 80097c2:	801a      	strh	r2, [r3, #0]
 80097c4:	4b09      	ldr	r3, [pc, #36]	; (80097ec <find_volume+0x504>)
 80097c6:	881a      	ldrh	r2, [r3, #0]
 80097c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ca:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80097cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ce:	4a08      	ldr	r2, [pc, #32]	; (80097f0 <find_volume+0x508>)
 80097d0:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80097d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80097d4:	f7fd fe7c 	bl	80074d0 <clear_lock>
#endif
	return FR_OK;
 80097d8:	2300      	movs	r3, #0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3758      	adds	r7, #88	; 0x58
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	41615252 	.word	0x41615252
 80097e8:	61417272 	.word	0x61417272
 80097ec:	2000367c 	.word	0x2000367c
 80097f0:	200036a0 	.word	0x200036a0

080097f4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80097fe:	2309      	movs	r3, #9
 8009800:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d01c      	beq.n	8009842 <validate+0x4e>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d018      	beq.n	8009842 <validate+0x4e>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d013      	beq.n	8009842 <validate+0x4e>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	889a      	ldrh	r2, [r3, #4]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	88db      	ldrh	r3, [r3, #6]
 8009824:	429a      	cmp	r2, r3
 8009826:	d10c      	bne.n	8009842 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	785b      	ldrb	r3, [r3, #1]
 800982e:	4618      	mov	r0, r3
 8009830:	f7fd fb68 	bl	8006f04 <disk_status>
 8009834:	4603      	mov	r3, r0
 8009836:	f003 0301 	and.w	r3, r3, #1
 800983a:	2b00      	cmp	r3, #0
 800983c:	d101      	bne.n	8009842 <validate+0x4e>
			res = FR_OK;
 800983e:	2300      	movs	r3, #0
 8009840:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009842:	7bfb      	ldrb	r3, [r7, #15]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d102      	bne.n	800984e <validate+0x5a>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	e000      	b.n	8009850 <validate+0x5c>
 800984e:	2300      	movs	r3, #0
 8009850:	683a      	ldr	r2, [r7, #0]
 8009852:	6013      	str	r3, [r2, #0]
	return res;
 8009854:	7bfb      	ldrb	r3, [r7, #15]
}
 8009856:	4618      	mov	r0, r3
 8009858:	3710      	adds	r7, #16
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
	...

08009860 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b088      	sub	sp, #32
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	4613      	mov	r3, r2
 800986c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009872:	f107 0310 	add.w	r3, r7, #16
 8009876:	4618      	mov	r0, r3
 8009878:	f7ff fc9c 	bl	80091b4 <get_ldnumber>
 800987c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	2b00      	cmp	r3, #0
 8009882:	da01      	bge.n	8009888 <f_mount+0x28>
 8009884:	230b      	movs	r3, #11
 8009886:	e02b      	b.n	80098e0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009888:	4a17      	ldr	r2, [pc, #92]	; (80098e8 <f_mount+0x88>)
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009890:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d005      	beq.n	80098a4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009898:	69b8      	ldr	r0, [r7, #24]
 800989a:	f7fd fe19 	bl	80074d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	2200      	movs	r2, #0
 80098a2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d002      	beq.n	80098b0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2200      	movs	r2, #0
 80098ae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	490d      	ldr	r1, [pc, #52]	; (80098e8 <f_mount+0x88>)
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d002      	beq.n	80098c6 <f_mount+0x66>
 80098c0:	79fb      	ldrb	r3, [r7, #7]
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d001      	beq.n	80098ca <f_mount+0x6a>
 80098c6:	2300      	movs	r3, #0
 80098c8:	e00a      	b.n	80098e0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80098ca:	f107 010c 	add.w	r1, r7, #12
 80098ce:	f107 0308 	add.w	r3, r7, #8
 80098d2:	2200      	movs	r2, #0
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7ff fd07 	bl	80092e8 <find_volume>
 80098da:	4603      	mov	r3, r0
 80098dc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80098de:	7dfb      	ldrb	r3, [r7, #23]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3720      	adds	r7, #32
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	20003678 	.word	0x20003678

080098ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b09a      	sub	sp, #104	; 0x68
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	4613      	mov	r3, r2
 80098f8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d101      	bne.n	8009904 <f_open+0x18>
 8009900:	2309      	movs	r3, #9
 8009902:	e1bb      	b.n	8009c7c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009904:	79fb      	ldrb	r3, [r7, #7]
 8009906:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800990a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800990c:	79fa      	ldrb	r2, [r7, #7]
 800990e:	f107 0110 	add.w	r1, r7, #16
 8009912:	f107 0308 	add.w	r3, r7, #8
 8009916:	4618      	mov	r0, r3
 8009918:	f7ff fce6 	bl	80092e8 <find_volume>
 800991c:	4603      	mov	r3, r0
 800991e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8009922:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009926:	2b00      	cmp	r3, #0
 8009928:	f040 819f 	bne.w	8009c6a <f_open+0x37e>
		dj.obj.fs = fs;
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009930:	68ba      	ldr	r2, [r7, #8]
 8009932:	f107 0314 	add.w	r3, r7, #20
 8009936:	4611      	mov	r1, r2
 8009938:	4618      	mov	r0, r3
 800993a:	f7ff fbc5 	bl	80090c8 <follow_path>
 800993e:	4603      	mov	r3, r0
 8009940:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009944:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009948:	2b00      	cmp	r3, #0
 800994a:	d11a      	bne.n	8009982 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800994c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009950:	b25b      	sxtb	r3, r3
 8009952:	2b00      	cmp	r3, #0
 8009954:	da03      	bge.n	800995e <f_open+0x72>
				res = FR_INVALID_NAME;
 8009956:	2306      	movs	r3, #6
 8009958:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800995c:	e011      	b.n	8009982 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800995e:	79fb      	ldrb	r3, [r7, #7]
 8009960:	f023 0301 	bic.w	r3, r3, #1
 8009964:	2b00      	cmp	r3, #0
 8009966:	bf14      	ite	ne
 8009968:	2301      	movne	r3, #1
 800996a:	2300      	moveq	r3, #0
 800996c:	b2db      	uxtb	r3, r3
 800996e:	461a      	mov	r2, r3
 8009970:	f107 0314 	add.w	r3, r7, #20
 8009974:	4611      	mov	r1, r2
 8009976:	4618      	mov	r0, r3
 8009978:	f7fd fc62 	bl	8007240 <chk_lock>
 800997c:	4603      	mov	r3, r0
 800997e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009982:	79fb      	ldrb	r3, [r7, #7]
 8009984:	f003 031c 	and.w	r3, r3, #28
 8009988:	2b00      	cmp	r3, #0
 800998a:	d07f      	beq.n	8009a8c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800998c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009990:	2b00      	cmp	r3, #0
 8009992:	d017      	beq.n	80099c4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009994:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009998:	2b04      	cmp	r3, #4
 800999a:	d10e      	bne.n	80099ba <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800999c:	f7fd fcac 	bl	80072f8 <enq_lock>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d006      	beq.n	80099b4 <f_open+0xc8>
 80099a6:	f107 0314 	add.w	r3, r7, #20
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7fe ff12 	bl	80087d4 <dir_register>
 80099b0:	4603      	mov	r3, r0
 80099b2:	e000      	b.n	80099b6 <f_open+0xca>
 80099b4:	2312      	movs	r3, #18
 80099b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80099ba:	79fb      	ldrb	r3, [r7, #7]
 80099bc:	f043 0308 	orr.w	r3, r3, #8
 80099c0:	71fb      	strb	r3, [r7, #7]
 80099c2:	e010      	b.n	80099e6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80099c4:	7ebb      	ldrb	r3, [r7, #26]
 80099c6:	f003 0311 	and.w	r3, r3, #17
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d003      	beq.n	80099d6 <f_open+0xea>
					res = FR_DENIED;
 80099ce:	2307      	movs	r3, #7
 80099d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80099d4:	e007      	b.n	80099e6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80099d6:	79fb      	ldrb	r3, [r7, #7]
 80099d8:	f003 0304 	and.w	r3, r3, #4
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d002      	beq.n	80099e6 <f_open+0xfa>
 80099e0:	2308      	movs	r3, #8
 80099e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80099e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d168      	bne.n	8009ac0 <f_open+0x1d4>
 80099ee:	79fb      	ldrb	r3, [r7, #7]
 80099f0:	f003 0308 	and.w	r3, r3, #8
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d063      	beq.n	8009ac0 <f_open+0x1d4>
				dw = GET_FATTIME();
 80099f8:	f7fd fa26 	bl	8006e48 <get_fattime>
 80099fc:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80099fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a00:	330e      	adds	r3, #14
 8009a02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7fd fb71 	bl	80070ec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a0c:	3316      	adds	r3, #22
 8009a0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a10:	4618      	mov	r0, r3
 8009a12:	f7fd fb6b 	bl	80070ec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a18:	330b      	adds	r3, #11
 8009a1a:	2220      	movs	r2, #32
 8009a1c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a22:	4611      	mov	r1, r2
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7fe fb43 	bl	80080b0 <ld_clust>
 8009a2a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a30:	2200      	movs	r2, #0
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7fe fb5b 	bl	80080ee <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a3a:	331c      	adds	r3, #28
 8009a3c:	2100      	movs	r1, #0
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7fd fb54 	bl	80070ec <st_dword>
					fs->wflag = 1;
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	2201      	movs	r2, #1
 8009a48:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d037      	beq.n	8009ac0 <f_open+0x1d4>
						dw = fs->winsect;
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a54:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8009a56:	f107 0314 	add.w	r3, r7, #20
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7fe f84b 	bl	8007afa <remove_chain>
 8009a64:	4603      	mov	r3, r0
 8009a66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8009a6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d126      	bne.n	8009ac0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fd fd92 	bl	80075a0 <move_window>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009a86:	3a01      	subs	r2, #1
 8009a88:	615a      	str	r2, [r3, #20]
 8009a8a:	e019      	b.n	8009ac0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009a8c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d115      	bne.n	8009ac0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009a94:	7ebb      	ldrb	r3, [r7, #26]
 8009a96:	f003 0310 	and.w	r3, r3, #16
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d003      	beq.n	8009aa6 <f_open+0x1ba>
					res = FR_NO_FILE;
 8009a9e:	2304      	movs	r3, #4
 8009aa0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009aa4:	e00c      	b.n	8009ac0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009aa6:	79fb      	ldrb	r3, [r7, #7]
 8009aa8:	f003 0302 	and.w	r3, r3, #2
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d007      	beq.n	8009ac0 <f_open+0x1d4>
 8009ab0:	7ebb      	ldrb	r3, [r7, #26]
 8009ab2:	f003 0301 	and.w	r3, r3, #1
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d002      	beq.n	8009ac0 <f_open+0x1d4>
						res = FR_DENIED;
 8009aba:	2307      	movs	r3, #7
 8009abc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8009ac0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d128      	bne.n	8009b1a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009ac8:	79fb      	ldrb	r3, [r7, #7]
 8009aca:	f003 0308 	and.w	r3, r3, #8
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d003      	beq.n	8009ada <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009ad2:	79fb      	ldrb	r3, [r7, #7]
 8009ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ad8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009ae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009ae8:	79fb      	ldrb	r3, [r7, #7]
 8009aea:	f023 0301 	bic.w	r3, r3, #1
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	bf14      	ite	ne
 8009af2:	2301      	movne	r3, #1
 8009af4:	2300      	moveq	r3, #0
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	461a      	mov	r2, r3
 8009afa:	f107 0314 	add.w	r3, r7, #20
 8009afe:	4611      	mov	r1, r2
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7fd fc1b 	bl	800733c <inc_lock>
 8009b06:	4602      	mov	r2, r0
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	691b      	ldr	r3, [r3, #16]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d102      	bne.n	8009b1a <f_open+0x22e>
 8009b14:	2302      	movs	r3, #2
 8009b16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009b1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	f040 80a3 	bne.w	8009c6a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b28:	4611      	mov	r1, r2
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7fe fac0 	bl	80080b0 <ld_clust>
 8009b30:	4602      	mov	r2, r0
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b38:	331c      	adds	r3, #28
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7fd fa98 	bl	8007070 <ld_dword>
 8009b40:	4602      	mov	r2, r0
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009b4c:	693a      	ldr	r2, [r7, #16]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	88da      	ldrh	r2, [r3, #6]
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	79fa      	ldrb	r2, [r7, #7]
 8009b5e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2200      	movs	r2, #0
 8009b64:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	3330      	adds	r3, #48	; 0x30
 8009b76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009b7a:	2100      	movs	r1, #0
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7fd fb02 	bl	8007186 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009b82:	79fb      	ldrb	r3, [r7, #7]
 8009b84:	f003 0320 	and.w	r3, r3, #32
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d06e      	beq.n	8009c6a <f_open+0x37e>
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	68db      	ldr	r3, [r3, #12]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d06a      	beq.n	8009c6a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	68da      	ldr	r2, [r3, #12]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	895b      	ldrh	r3, [r3, #10]
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	899b      	ldrh	r3, [r3, #12]
 8009ba6:	fb02 f303 	mul.w	r3, r2, r3
 8009baa:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009bb8:	e016      	b.n	8009be8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7fd fdab 	bl	800771a <get_fat>
 8009bc4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8009bc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d802      	bhi.n	8009bd2 <f_open+0x2e6>
 8009bcc:	2302      	movs	r3, #2
 8009bce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009bd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd8:	d102      	bne.n	8009be0 <f_open+0x2f4>
 8009bda:	2301      	movs	r3, #1
 8009bdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009be0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009be4:	1ad3      	subs	r3, r2, r3
 8009be6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009be8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d103      	bne.n	8009bf8 <f_open+0x30c>
 8009bf0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d8e0      	bhi.n	8009bba <f_open+0x2ce>
				}
				fp->clust = clst;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009bfc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009bfe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d131      	bne.n	8009c6a <f_open+0x37e>
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	899b      	ldrh	r3, [r3, #12]
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c12:	fb01 f202 	mul.w	r2, r1, r2
 8009c16:	1a9b      	subs	r3, r3, r2
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d026      	beq.n	8009c6a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7fd fd5b 	bl	80076dc <clust2sect>
 8009c26:	64f8      	str	r0, [r7, #76]	; 0x4c
 8009c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d103      	bne.n	8009c36 <f_open+0x34a>
						res = FR_INT_ERR;
 8009c2e:	2302      	movs	r3, #2
 8009c30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009c34:	e019      	b.n	8009c6a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	899b      	ldrh	r3, [r3, #12]
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c44:	441a      	add	r2, r3
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	7858      	ldrb	r0, [r3, #1]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6a1a      	ldr	r2, [r3, #32]
 8009c58:	2301      	movs	r3, #1
 8009c5a:	f7fd f993 	bl	8006f84 <disk_read>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d002      	beq.n	8009c6a <f_open+0x37e>
 8009c64:	2301      	movs	r3, #1
 8009c66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009c6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d002      	beq.n	8009c78 <f_open+0x38c>
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2200      	movs	r2, #0
 8009c76:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009c78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3768      	adds	r7, #104	; 0x68
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b08e      	sub	sp, #56	; 0x38
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	607a      	str	r2, [r7, #4]
 8009c90:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f107 0214 	add.w	r2, r7, #20
 8009ca2:	4611      	mov	r1, r2
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7ff fda5 	bl	80097f4 <validate>
 8009caa:	4603      	mov	r3, r0
 8009cac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009cb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d107      	bne.n	8009cc8 <f_read+0x44>
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	7d5b      	ldrb	r3, [r3, #21]
 8009cbc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009cc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d002      	beq.n	8009cce <f_read+0x4a>
 8009cc8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ccc:	e135      	b.n	8009f3a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	7d1b      	ldrb	r3, [r3, #20]
 8009cd2:	f003 0301 	and.w	r3, r3, #1
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d101      	bne.n	8009cde <f_read+0x5a>
 8009cda:	2307      	movs	r3, #7
 8009cdc:	e12d      	b.n	8009f3a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	68da      	ldr	r2, [r3, #12]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	699b      	ldr	r3, [r3, #24]
 8009ce6:	1ad3      	subs	r3, r2, r3
 8009ce8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	6a3b      	ldr	r3, [r7, #32]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	f240 811e 	bls.w	8009f30 <f_read+0x2ac>
 8009cf4:	6a3b      	ldr	r3, [r7, #32]
 8009cf6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009cf8:	e11a      	b.n	8009f30 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	699b      	ldr	r3, [r3, #24]
 8009cfe:	697a      	ldr	r2, [r7, #20]
 8009d00:	8992      	ldrh	r2, [r2, #12]
 8009d02:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d06:	fb01 f202 	mul.w	r2, r1, r2
 8009d0a:	1a9b      	subs	r3, r3, r2
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	f040 80d5 	bne.w	8009ebc <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	699b      	ldr	r3, [r3, #24]
 8009d16:	697a      	ldr	r2, [r7, #20]
 8009d18:	8992      	ldrh	r2, [r2, #12]
 8009d1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d1e:	697a      	ldr	r2, [r7, #20]
 8009d20:	8952      	ldrh	r2, [r2, #10]
 8009d22:	3a01      	subs	r2, #1
 8009d24:	4013      	ands	r3, r2
 8009d26:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009d28:	69fb      	ldr	r3, [r7, #28]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d12f      	bne.n	8009d8e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	699b      	ldr	r3, [r3, #24]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d103      	bne.n	8009d3e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	633b      	str	r3, [r7, #48]	; 0x30
 8009d3c:	e013      	b.n	8009d66 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d007      	beq.n	8009d56 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	699b      	ldr	r3, [r3, #24]
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f7fd ffd1 	bl	8007cf4 <clmt_clust>
 8009d52:	6338      	str	r0, [r7, #48]	; 0x30
 8009d54:	e007      	b.n	8009d66 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009d56:	68fa      	ldr	r2, [r7, #12]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	69db      	ldr	r3, [r3, #28]
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	4610      	mov	r0, r2
 8009d60:	f7fd fcdb 	bl	800771a <get_fat>
 8009d64:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d804      	bhi.n	8009d76 <f_read+0xf2>
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2202      	movs	r2, #2
 8009d70:	755a      	strb	r2, [r3, #21]
 8009d72:	2302      	movs	r3, #2
 8009d74:	e0e1      	b.n	8009f3a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d7c:	d104      	bne.n	8009d88 <f_read+0x104>
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2201      	movs	r2, #1
 8009d82:	755a      	strb	r2, [r3, #21]
 8009d84:	2301      	movs	r3, #1
 8009d86:	e0d8      	b.n	8009f3a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d8c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009d8e:	697a      	ldr	r2, [r7, #20]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	69db      	ldr	r3, [r3, #28]
 8009d94:	4619      	mov	r1, r3
 8009d96:	4610      	mov	r0, r2
 8009d98:	f7fd fca0 	bl	80076dc <clust2sect>
 8009d9c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009d9e:	69bb      	ldr	r3, [r7, #24]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d104      	bne.n	8009dae <f_read+0x12a>
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2202      	movs	r2, #2
 8009da8:	755a      	strb	r2, [r3, #21]
 8009daa:	2302      	movs	r3, #2
 8009dac:	e0c5      	b.n	8009f3a <f_read+0x2b6>
			sect += csect;
 8009dae:	69ba      	ldr	r2, [r7, #24]
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	4413      	add	r3, r2
 8009db4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	899b      	ldrh	r3, [r3, #12]
 8009dba:	461a      	mov	r2, r3
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8009dc2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d041      	beq.n	8009e4e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009dca:	69fa      	ldr	r2, [r7, #28]
 8009dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dce:	4413      	add	r3, r2
 8009dd0:	697a      	ldr	r2, [r7, #20]
 8009dd2:	8952      	ldrh	r2, [r2, #10]
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d905      	bls.n	8009de4 <f_read+0x160>
					cc = fs->csize - csect;
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	895b      	ldrh	r3, [r3, #10]
 8009ddc:	461a      	mov	r2, r3
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	1ad3      	subs	r3, r2, r3
 8009de2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	7858      	ldrb	r0, [r3, #1]
 8009de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dea:	69ba      	ldr	r2, [r7, #24]
 8009dec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009dee:	f7fd f8c9 	bl	8006f84 <disk_read>
 8009df2:	4603      	mov	r3, r0
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d004      	beq.n	8009e02 <f_read+0x17e>
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	755a      	strb	r2, [r3, #21]
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e09b      	b.n	8009f3a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	7d1b      	ldrb	r3, [r3, #20]
 8009e06:	b25b      	sxtb	r3, r3
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	da18      	bge.n	8009e3e <f_read+0x1ba>
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6a1a      	ldr	r2, [r3, #32]
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	1ad3      	subs	r3, r2, r3
 8009e14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d911      	bls.n	8009e3e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6a1a      	ldr	r2, [r3, #32]
 8009e1e:	69bb      	ldr	r3, [r7, #24]
 8009e20:	1ad3      	subs	r3, r2, r3
 8009e22:	697a      	ldr	r2, [r7, #20]
 8009e24:	8992      	ldrh	r2, [r2, #12]
 8009e26:	fb02 f303 	mul.w	r3, r2, r3
 8009e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e2c:	18d0      	adds	r0, r2, r3
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	899b      	ldrh	r3, [r3, #12]
 8009e38:	461a      	mov	r2, r3
 8009e3a:	f7fd f983 	bl	8007144 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	899b      	ldrh	r3, [r3, #12]
 8009e42:	461a      	mov	r2, r3
 8009e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e46:	fb02 f303 	mul.w	r3, r2, r3
 8009e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8009e4c:	e05c      	b.n	8009f08 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6a1b      	ldr	r3, [r3, #32]
 8009e52:	69ba      	ldr	r2, [r7, #24]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d02e      	beq.n	8009eb6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	7d1b      	ldrb	r3, [r3, #20]
 8009e5c:	b25b      	sxtb	r3, r3
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	da18      	bge.n	8009e94 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	7858      	ldrb	r0, [r3, #1]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	6a1a      	ldr	r2, [r3, #32]
 8009e70:	2301      	movs	r3, #1
 8009e72:	f7fd f8a7 	bl	8006fc4 <disk_write>
 8009e76:	4603      	mov	r3, r0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d004      	beq.n	8009e86 <f_read+0x202>
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	755a      	strb	r2, [r3, #21]
 8009e82:	2301      	movs	r3, #1
 8009e84:	e059      	b.n	8009f3a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	7d1b      	ldrb	r3, [r3, #20]
 8009e8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e8e:	b2da      	uxtb	r2, r3
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	7858      	ldrb	r0, [r3, #1]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	69ba      	ldr	r2, [r7, #24]
 8009ea2:	f7fd f86f 	bl	8006f84 <disk_read>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d004      	beq.n	8009eb6 <f_read+0x232>
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	755a      	strb	r2, [r3, #21]
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e041      	b.n	8009f3a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	69ba      	ldr	r2, [r7, #24]
 8009eba:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	899b      	ldrh	r3, [r3, #12]
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	699b      	ldr	r3, [r3, #24]
 8009ec6:	697a      	ldr	r2, [r7, #20]
 8009ec8:	8992      	ldrh	r2, [r2, #12]
 8009eca:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ece:	fb01 f202 	mul.w	r2, r1, r2
 8009ed2:	1a9b      	subs	r3, r3, r2
 8009ed4:	1ac3      	subs	r3, r0, r3
 8009ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d901      	bls.n	8009ee4 <f_read+0x260>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	699b      	ldr	r3, [r3, #24]
 8009eee:	697a      	ldr	r2, [r7, #20]
 8009ef0:	8992      	ldrh	r2, [r2, #12]
 8009ef2:	fbb3 f0f2 	udiv	r0, r3, r2
 8009ef6:	fb00 f202 	mul.w	r2, r0, r2
 8009efa:	1a9b      	subs	r3, r3, r2
 8009efc:	440b      	add	r3, r1
 8009efe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f00:	4619      	mov	r1, r3
 8009f02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f04:	f7fd f91e 	bl	8007144 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f0c:	4413      	add	r3, r2
 8009f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	699a      	ldr	r2, [r3, #24]
 8009f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f16:	441a      	add	r2, r3
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	619a      	str	r2, [r3, #24]
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f22:	441a      	add	r2, r3
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	601a      	str	r2, [r3, #0]
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f2c:	1ad3      	subs	r3, r2, r3
 8009f2e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f47f aee1 	bne.w	8009cfa <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009f38:	2300      	movs	r3, #0
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3738      	adds	r7, #56	; 0x38
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b08c      	sub	sp, #48	; 0x30
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	60f8      	str	r0, [r7, #12]
 8009f4a:	60b9      	str	r1, [r7, #8]
 8009f4c:	607a      	str	r2, [r7, #4]
 8009f4e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	2200      	movs	r2, #0
 8009f58:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f107 0210 	add.w	r2, r7, #16
 8009f60:	4611      	mov	r1, r2
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7ff fc46 	bl	80097f4 <validate>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009f6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d107      	bne.n	8009f86 <f_write+0x44>
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	7d5b      	ldrb	r3, [r3, #21]
 8009f7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009f7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d002      	beq.n	8009f8c <f_write+0x4a>
 8009f86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f8a:	e16a      	b.n	800a262 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	7d1b      	ldrb	r3, [r3, #20]
 8009f90:	f003 0302 	and.w	r3, r3, #2
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d101      	bne.n	8009f9c <f_write+0x5a>
 8009f98:	2307      	movs	r3, #7
 8009f9a:	e162      	b.n	800a262 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	699a      	ldr	r2, [r3, #24]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	441a      	add	r2, r3
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	699b      	ldr	r3, [r3, #24]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	f080 814c 	bcs.w	800a246 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	699b      	ldr	r3, [r3, #24]
 8009fb2:	43db      	mvns	r3, r3
 8009fb4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009fb6:	e146      	b.n	800a246 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	699b      	ldr	r3, [r3, #24]
 8009fbc:	693a      	ldr	r2, [r7, #16]
 8009fbe:	8992      	ldrh	r2, [r2, #12]
 8009fc0:	fbb3 f1f2 	udiv	r1, r3, r2
 8009fc4:	fb01 f202 	mul.w	r2, r1, r2
 8009fc8:	1a9b      	subs	r3, r3, r2
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	f040 80f1 	bne.w	800a1b2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	699b      	ldr	r3, [r3, #24]
 8009fd4:	693a      	ldr	r2, [r7, #16]
 8009fd6:	8992      	ldrh	r2, [r2, #12]
 8009fd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fdc:	693a      	ldr	r2, [r7, #16]
 8009fde:	8952      	ldrh	r2, [r2, #10]
 8009fe0:	3a01      	subs	r2, #1
 8009fe2:	4013      	ands	r3, r2
 8009fe4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009fe6:	69bb      	ldr	r3, [r7, #24]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d143      	bne.n	800a074 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	699b      	ldr	r3, [r3, #24]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d10c      	bne.n	800a00e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d11a      	bne.n	800a036 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2100      	movs	r1, #0
 800a004:	4618      	mov	r0, r3
 800a006:	f7fd fddd 	bl	8007bc4 <create_chain>
 800a00a:	62b8      	str	r0, [r7, #40]	; 0x28
 800a00c:	e013      	b.n	800a036 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a012:	2b00      	cmp	r3, #0
 800a014:	d007      	beq.n	800a026 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	699b      	ldr	r3, [r3, #24]
 800a01a:	4619      	mov	r1, r3
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f7fd fe69 	bl	8007cf4 <clmt_clust>
 800a022:	62b8      	str	r0, [r7, #40]	; 0x28
 800a024:	e007      	b.n	800a036 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	69db      	ldr	r3, [r3, #28]
 800a02c:	4619      	mov	r1, r3
 800a02e:	4610      	mov	r0, r2
 800a030:	f7fd fdc8 	bl	8007bc4 <create_chain>
 800a034:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f000 8109 	beq.w	800a250 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a040:	2b01      	cmp	r3, #1
 800a042:	d104      	bne.n	800a04e <f_write+0x10c>
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2202      	movs	r2, #2
 800a048:	755a      	strb	r2, [r3, #21]
 800a04a:	2302      	movs	r3, #2
 800a04c:	e109      	b.n	800a262 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a050:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a054:	d104      	bne.n	800a060 <f_write+0x11e>
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2201      	movs	r2, #1
 800a05a:	755a      	strb	r2, [r3, #21]
 800a05c:	2301      	movs	r3, #1
 800a05e:	e100      	b.n	800a262 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a064:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	689b      	ldr	r3, [r3, #8]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d102      	bne.n	800a074 <f_write+0x132>
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a072:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	7d1b      	ldrb	r3, [r3, #20]
 800a078:	b25b      	sxtb	r3, r3
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	da18      	bge.n	800a0b0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	7858      	ldrb	r0, [r3, #1]
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6a1a      	ldr	r2, [r3, #32]
 800a08c:	2301      	movs	r3, #1
 800a08e:	f7fc ff99 	bl	8006fc4 <disk_write>
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d004      	beq.n	800a0a2 <f_write+0x160>
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2201      	movs	r2, #1
 800a09c:	755a      	strb	r2, [r3, #21]
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e0df      	b.n	800a262 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	7d1b      	ldrb	r3, [r3, #20]
 800a0a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0aa:	b2da      	uxtb	r2, r3
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a0b0:	693a      	ldr	r2, [r7, #16]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	69db      	ldr	r3, [r3, #28]
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	4610      	mov	r0, r2
 800a0ba:	f7fd fb0f 	bl	80076dc <clust2sect>
 800a0be:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d104      	bne.n	800a0d0 <f_write+0x18e>
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2202      	movs	r2, #2
 800a0ca:	755a      	strb	r2, [r3, #21]
 800a0cc:	2302      	movs	r3, #2
 800a0ce:	e0c8      	b.n	800a262 <f_write+0x320>
			sect += csect;
 800a0d0:	697a      	ldr	r2, [r7, #20]
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	4413      	add	r3, r2
 800a0d6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	899b      	ldrh	r3, [r3, #12]
 800a0dc:	461a      	mov	r2, r3
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0e4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a0e6:	6a3b      	ldr	r3, [r7, #32]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d043      	beq.n	800a174 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a0ec:	69ba      	ldr	r2, [r7, #24]
 800a0ee:	6a3b      	ldr	r3, [r7, #32]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	693a      	ldr	r2, [r7, #16]
 800a0f4:	8952      	ldrh	r2, [r2, #10]
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d905      	bls.n	800a106 <f_write+0x1c4>
					cc = fs->csize - csect;
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	895b      	ldrh	r3, [r3, #10]
 800a0fe:	461a      	mov	r2, r3
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	1ad3      	subs	r3, r2, r3
 800a104:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	7858      	ldrb	r0, [r3, #1]
 800a10a:	6a3b      	ldr	r3, [r7, #32]
 800a10c:	697a      	ldr	r2, [r7, #20]
 800a10e:	69f9      	ldr	r1, [r7, #28]
 800a110:	f7fc ff58 	bl	8006fc4 <disk_write>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d004      	beq.n	800a124 <f_write+0x1e2>
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2201      	movs	r2, #1
 800a11e:	755a      	strb	r2, [r3, #21]
 800a120:	2301      	movs	r3, #1
 800a122:	e09e      	b.n	800a262 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6a1a      	ldr	r2, [r3, #32]
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	1ad3      	subs	r3, r2, r3
 800a12c:	6a3a      	ldr	r2, [r7, #32]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d918      	bls.n	800a164 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6a1a      	ldr	r2, [r3, #32]
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	1ad3      	subs	r3, r2, r3
 800a140:	693a      	ldr	r2, [r7, #16]
 800a142:	8992      	ldrh	r2, [r2, #12]
 800a144:	fb02 f303 	mul.w	r3, r2, r3
 800a148:	69fa      	ldr	r2, [r7, #28]
 800a14a:	18d1      	adds	r1, r2, r3
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	899b      	ldrh	r3, [r3, #12]
 800a150:	461a      	mov	r2, r3
 800a152:	f7fc fff7 	bl	8007144 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	7d1b      	ldrb	r3, [r3, #20]
 800a15a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a15e:	b2da      	uxtb	r2, r3
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	899b      	ldrh	r3, [r3, #12]
 800a168:	461a      	mov	r2, r3
 800a16a:	6a3b      	ldr	r3, [r7, #32]
 800a16c:	fb02 f303 	mul.w	r3, r2, r3
 800a170:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a172:	e04b      	b.n	800a20c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6a1b      	ldr	r3, [r3, #32]
 800a178:	697a      	ldr	r2, [r7, #20]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d016      	beq.n	800a1ac <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	699a      	ldr	r2, [r3, #24]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a186:	429a      	cmp	r2, r3
 800a188:	d210      	bcs.n	800a1ac <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	7858      	ldrb	r0, [r3, #1]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a194:	2301      	movs	r3, #1
 800a196:	697a      	ldr	r2, [r7, #20]
 800a198:	f7fc fef4 	bl	8006f84 <disk_read>
 800a19c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d004      	beq.n	800a1ac <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	755a      	strb	r2, [r3, #21]
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e05a      	b.n	800a262 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	697a      	ldr	r2, [r7, #20]
 800a1b0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	899b      	ldrh	r3, [r3, #12]
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	699b      	ldr	r3, [r3, #24]
 800a1bc:	693a      	ldr	r2, [r7, #16]
 800a1be:	8992      	ldrh	r2, [r2, #12]
 800a1c0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1c4:	fb01 f202 	mul.w	r2, r1, r2
 800a1c8:	1a9b      	subs	r3, r3, r2
 800a1ca:	1ac3      	subs	r3, r0, r3
 800a1cc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a1ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d901      	bls.n	800a1da <f_write+0x298>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	699b      	ldr	r3, [r3, #24]
 800a1e4:	693a      	ldr	r2, [r7, #16]
 800a1e6:	8992      	ldrh	r2, [r2, #12]
 800a1e8:	fbb3 f0f2 	udiv	r0, r3, r2
 800a1ec:	fb00 f202 	mul.w	r2, r0, r2
 800a1f0:	1a9b      	subs	r3, r3, r2
 800a1f2:	440b      	add	r3, r1
 800a1f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1f6:	69f9      	ldr	r1, [r7, #28]
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7fc ffa3 	bl	8007144 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	7d1b      	ldrb	r3, [r3, #20]
 800a202:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a206:	b2da      	uxtb	r2, r3
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a20c:	69fa      	ldr	r2, [r7, #28]
 800a20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a210:	4413      	add	r3, r2
 800a212:	61fb      	str	r3, [r7, #28]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	699a      	ldr	r2, [r3, #24]
 800a218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21a:	441a      	add	r2, r3
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	619a      	str	r2, [r3, #24]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	68da      	ldr	r2, [r3, #12]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	699b      	ldr	r3, [r3, #24]
 800a228:	429a      	cmp	r2, r3
 800a22a:	bf38      	it	cc
 800a22c:	461a      	movcc	r2, r3
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	60da      	str	r2, [r3, #12]
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	681a      	ldr	r2, [r3, #0]
 800a236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a238:	441a      	add	r2, r3
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	601a      	str	r2, [r3, #0]
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a242:	1ad3      	subs	r3, r2, r3
 800a244:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	f47f aeb5 	bne.w	8009fb8 <f_write+0x76>
 800a24e:	e000      	b.n	800a252 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a250:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	7d1b      	ldrb	r3, [r3, #20]
 800a256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a25a:	b2da      	uxtb	r2, r3
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a260:	2300      	movs	r3, #0
}
 800a262:	4618      	mov	r0, r3
 800a264:	3730      	adds	r7, #48	; 0x30
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}

0800a26a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a26a:	b580      	push	{r7, lr}
 800a26c:	b086      	sub	sp, #24
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f107 0208 	add.w	r2, r7, #8
 800a278:	4611      	mov	r1, r2
 800a27a:	4618      	mov	r0, r3
 800a27c:	f7ff faba 	bl	80097f4 <validate>
 800a280:	4603      	mov	r3, r0
 800a282:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a284:	7dfb      	ldrb	r3, [r7, #23]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d168      	bne.n	800a35c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	7d1b      	ldrb	r3, [r3, #20]
 800a28e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a292:	2b00      	cmp	r3, #0
 800a294:	d062      	beq.n	800a35c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	7d1b      	ldrb	r3, [r3, #20]
 800a29a:	b25b      	sxtb	r3, r3
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	da15      	bge.n	800a2cc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	7858      	ldrb	r0, [r3, #1]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a1a      	ldr	r2, [r3, #32]
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	f7fc fe88 	bl	8006fc4 <disk_write>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d001      	beq.n	800a2be <f_sync+0x54>
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e04f      	b.n	800a35e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	7d1b      	ldrb	r3, [r3, #20]
 800a2c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2c6:	b2da      	uxtb	r2, r3
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a2cc:	f7fc fdbc 	bl	8006e48 <get_fattime>
 800a2d0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a2d2:	68ba      	ldr	r2, [r7, #8]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d8:	4619      	mov	r1, r3
 800a2da:	4610      	mov	r0, r2
 800a2dc:	f7fd f960 	bl	80075a0 <move_window>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a2e4:	7dfb      	ldrb	r3, [r7, #23]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d138      	bne.n	800a35c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ee:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	330b      	adds	r3, #11
 800a2f4:	781a      	ldrb	r2, [r3, #0]
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	330b      	adds	r3, #11
 800a2fa:	f042 0220 	orr.w	r2, r2, #32
 800a2fe:	b2d2      	uxtb	r2, r2
 800a300:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6818      	ldr	r0, [r3, #0]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	689b      	ldr	r3, [r3, #8]
 800a30a:	461a      	mov	r2, r3
 800a30c:	68f9      	ldr	r1, [r7, #12]
 800a30e:	f7fd feee 	bl	80080ee <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f103 021c 	add.w	r2, r3, #28
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	4619      	mov	r1, r3
 800a31e:	4610      	mov	r0, r2
 800a320:	f7fc fee4 	bl	80070ec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	3316      	adds	r3, #22
 800a328:	6939      	ldr	r1, [r7, #16]
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7fc fede 	bl	80070ec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	3312      	adds	r3, #18
 800a334:	2100      	movs	r1, #0
 800a336:	4618      	mov	r0, r3
 800a338:	f7fc febd 	bl	80070b6 <st_word>
					fs->wflag = 1;
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	2201      	movs	r2, #1
 800a340:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	4618      	mov	r0, r3
 800a346:	f7fd f959 	bl	80075fc <sync_fs>
 800a34a:	4603      	mov	r3, r0
 800a34c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	7d1b      	ldrb	r3, [r3, #20]
 800a352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a356:	b2da      	uxtb	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a35c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3718      	adds	r7, #24
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b084      	sub	sp, #16
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f7ff ff7b 	bl	800a26a <f_sync>
 800a374:	4603      	mov	r3, r0
 800a376:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a378:	7bfb      	ldrb	r3, [r7, #15]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d118      	bne.n	800a3b0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f107 0208 	add.w	r2, r7, #8
 800a384:	4611      	mov	r1, r2
 800a386:	4618      	mov	r0, r3
 800a388:	f7ff fa34 	bl	80097f4 <validate>
 800a38c:	4603      	mov	r3, r0
 800a38e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a390:	7bfb      	ldrb	r3, [r7, #15]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d10c      	bne.n	800a3b0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	691b      	ldr	r3, [r3, #16]
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7fd f85c 	bl	8007458 <dec_lock>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a3a4:	7bfb      	ldrb	r3, [r7, #15]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d102      	bne.n	800a3b0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a3b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3710      	adds	r7, #16
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b086      	sub	sp, #24
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
 800a3c2:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d101      	bne.n	800a3ce <f_opendir+0x14>
 800a3ca:	2309      	movs	r3, #9
 800a3cc:	e064      	b.n	800a498 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800a3d2:	f107 010c 	add.w	r1, r7, #12
 800a3d6:	463b      	mov	r3, r7
 800a3d8:	2200      	movs	r2, #0
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7fe ff84 	bl	80092e8 <find_volume>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a3e4:	7dfb      	ldrb	r3, [r7, #23]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d14f      	bne.n	800a48a <f_opendir+0xd0>
		obj->fs = fs;
 800a3ea:	68fa      	ldr	r2, [r7, #12]
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f7fe fe67 	bl	80090c8 <follow_path>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800a3fe:	7dfb      	ldrb	r3, [r7, #23]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d13d      	bne.n	800a480 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a40a:	b25b      	sxtb	r3, r3
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	db12      	blt.n	800a436 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	799b      	ldrb	r3, [r3, #6]
 800a414:	f003 0310 	and.w	r3, r3, #16
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d00a      	beq.n	800a432 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800a41c:	68fa      	ldr	r2, [r7, #12]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6a1b      	ldr	r3, [r3, #32]
 800a422:	4619      	mov	r1, r3
 800a424:	4610      	mov	r0, r2
 800a426:	f7fd fe43 	bl	80080b0 <ld_clust>
 800a42a:	4602      	mov	r2, r0
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	609a      	str	r2, [r3, #8]
 800a430:	e001      	b.n	800a436 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800a432:	2305      	movs	r3, #5
 800a434:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800a436:	7dfb      	ldrb	r3, [r7, #23]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d121      	bne.n	800a480 <f_opendir+0xc6>
				obj->id = fs->id;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	88da      	ldrh	r2, [r3, #6]
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800a444:	2100      	movs	r1, #0
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f7fd fc8c 	bl	8007d64 <dir_sdi>
 800a44c:	4603      	mov	r3, r0
 800a44e:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800a450:	7dfb      	ldrb	r3, [r7, #23]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d114      	bne.n	800a480 <f_opendir+0xc6>
					if (obj->sclust) {
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00d      	beq.n	800a47a <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800a45e:	2100      	movs	r1, #0
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f7fc ff6b 	bl	800733c <inc_lock>
 800a466:	4602      	mov	r2, r0
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d105      	bne.n	800a480 <f_opendir+0xc6>
 800a474:	2312      	movs	r3, #18
 800a476:	75fb      	strb	r3, [r7, #23]
 800a478:	e002      	b.n	800a480 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	2200      	movs	r2, #0
 800a47e:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800a480:	7dfb      	ldrb	r3, [r7, #23]
 800a482:	2b04      	cmp	r3, #4
 800a484:	d101      	bne.n	800a48a <f_opendir+0xd0>
 800a486:	2305      	movs	r3, #5
 800a488:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800a48a:	7dfb      	ldrb	r3, [r7, #23]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d002      	beq.n	800a496 <f_opendir+0xdc>
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	2200      	movs	r2, #0
 800a494:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a496:	7dfb      	ldrb	r3, [r7, #23]
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3718      	adds	r7, #24
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f107 0208 	add.w	r2, r7, #8
 800a4b0:	4611      	mov	r1, r2
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7ff f99e 	bl	80097f4 <validate>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a4bc:	7bfb      	ldrb	r3, [r7, #15]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d126      	bne.n	800a510 <f_readdir+0x70>
		if (!fno) {
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d106      	bne.n	800a4d6 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800a4c8:	2100      	movs	r1, #0
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f7fd fc4a 	bl	8007d64 <dir_sdi>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	73fb      	strb	r3, [r7, #15]
 800a4d4:	e01c      	b.n	800a510 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800a4d6:	2100      	movs	r1, #0
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f7fe f814 	bl	8008506 <dir_read>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800a4e2:	7bfb      	ldrb	r3, [r7, #15]
 800a4e4:	2b04      	cmp	r3, #4
 800a4e6:	d101      	bne.n	800a4ec <f_readdir+0x4c>
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800a4ec:	7bfb      	ldrb	r3, [r7, #15]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d10e      	bne.n	800a510 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800a4f2:	6839      	ldr	r1, [r7, #0]
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f7fe faaf 	bl	8008a58 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800a4fa:	2100      	movs	r1, #0
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f7fd fcba 	bl	8007e76 <dir_next>
 800a502:	4603      	mov	r3, r0
 800a504:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800a506:	7bfb      	ldrb	r3, [r7, #15]
 800a508:	2b04      	cmp	r3, #4
 800a50a:	d101      	bne.n	800a510 <f_readdir+0x70>
 800a50c:	2300      	movs	r3, #0
 800a50e:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800a510:	7bfb      	ldrb	r3, [r7, #15]
}
 800a512:	4618      	mov	r0, r3
 800a514:	3710      	adds	r7, #16
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800a51a:	b580      	push	{r7, lr}
 800a51c:	b084      	sub	sp, #16
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
 800a522:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 800a524:	6839      	ldr	r1, [r7, #0]
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f7ff ffba 	bl	800a4a0 <f_readdir>
 800a52c:	4603      	mov	r3, r0
 800a52e:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800a530:	7bfb      	ldrb	r3, [r7, #15]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d114      	bne.n	800a560 <f_findnext+0x46>
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d011      	beq.n	800a560 <f_findnext+0x46>
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	7d9b      	ldrb	r3, [r3, #22]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d00d      	beq.n	800a560 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	f103 0116 	add.w	r1, r3, #22
 800a54e:	2300      	movs	r3, #0
 800a550:	2200      	movs	r2, #0
 800a552:	f7fe fb85 	bl	8008c60 <pattern_matching>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d100      	bne.n	800a55e <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 800a55c:	e7e2      	b.n	800a524 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800a55e:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 800a560:	7bfb      	ldrb	r3, [r7, #15]
}
 800a562:	4618      	mov	r0, r3
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b086      	sub	sp, #24
 800a56e:	af00      	add	r7, sp, #0
 800a570:	60f8      	str	r0, [r7, #12]
 800a572:	60b9      	str	r1, [r7, #8]
 800a574:	607a      	str	r2, [r7, #4]
 800a576:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	683a      	ldr	r2, [r7, #0]
 800a57c:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 800a57e:	6879      	ldr	r1, [r7, #4]
 800a580:	68f8      	ldr	r0, [r7, #12]
 800a582:	f7ff ff1a 	bl	800a3ba <f_opendir>
 800a586:	4603      	mov	r3, r0
 800a588:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a58a:	7dfb      	ldrb	r3, [r7, #23]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d105      	bne.n	800a59c <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 800a590:	68b9      	ldr	r1, [r7, #8]
 800a592:	68f8      	ldr	r0, [r7, #12]
 800a594:	f7ff ffc1 	bl	800a51a <f_findnext>
 800a598:	4603      	mov	r3, r0
 800a59a:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 800a59c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3718      	adds	r7, #24
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b0a2      	sub	sp, #136	; 0x88
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800a5b4:	f107 010c 	add.w	r1, r7, #12
 800a5b8:	1d3b      	adds	r3, r7, #4
 800a5ba:	2202      	movs	r2, #2
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7fe fe93 	bl	80092e8 <find_volume>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	dj.obj.fs = fs;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	64bb      	str	r3, [r7, #72]	; 0x48
	if (res == FR_OK) {
 800a5cc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	f040 8092 	bne.w	800a6fa <f_unlink+0x154>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a5dc:	4611      	mov	r1, r2
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7fe fd72 	bl	80090c8 <follow_path>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800a5ea:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d108      	bne.n	800a604 <f_unlink+0x5e>
 800a5f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a5f6:	2102      	movs	r1, #2
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7fc fe21 	bl	8007240 <chk_lock>
 800a5fe:	4603      	mov	r3, r0
 800a600:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800a604:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d176      	bne.n	800a6fa <f_unlink+0x154>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800a60c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a610:	b25b      	sxtb	r3, r3
 800a612:	2b00      	cmp	r3, #0
 800a614:	da03      	bge.n	800a61e <f_unlink+0x78>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800a616:	2306      	movs	r3, #6
 800a618:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800a61c:	e008      	b.n	800a630 <f_unlink+0x8a>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800a61e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800a622:	f003 0301 	and.w	r3, r3, #1
 800a626:	2b00      	cmp	r3, #0
 800a628:	d002      	beq.n	800a630 <f_unlink+0x8a>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800a62a:	2307      	movs	r3, #7
 800a62c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
			if (res == FR_OK) {
 800a630:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800a634:	2b00      	cmp	r3, #0
 800a636:	d136      	bne.n	800a6a6 <f_unlink+0x100>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a63c:	4611      	mov	r1, r2
 800a63e:	4618      	mov	r0, r3
 800a640:	f7fd fd36 	bl	80080b0 <ld_clust>
 800a644:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800a648:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800a64c:	f003 0310 	and.w	r3, r3, #16
 800a650:	2b00      	cmp	r3, #0
 800a652:	d028      	beq.n	800a6a6 <f_unlink+0x100>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800a658:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a65c:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800a65e:	f107 0310 	add.w	r3, r7, #16
 800a662:	2100      	movs	r1, #0
 800a664:	4618      	mov	r0, r3
 800a666:	f7fd fb7d 	bl	8007d64 <dir_sdi>
 800a66a:	4603      	mov	r3, r0
 800a66c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						if (res == FR_OK) {
 800a670:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800a674:	2b00      	cmp	r3, #0
 800a676:	d116      	bne.n	800a6a6 <f_unlink+0x100>
							res = dir_read(&sdj, 0);			/* Read an item */
 800a678:	f107 0310 	add.w	r3, r7, #16
 800a67c:	2100      	movs	r1, #0
 800a67e:	4618      	mov	r0, r3
 800a680:	f7fd ff41 	bl	8008506 <dir_read>
 800a684:	4603      	mov	r3, r0
 800a686:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800a68a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d102      	bne.n	800a698 <f_unlink+0xf2>
 800a692:	2307      	movs	r3, #7
 800a694:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800a698:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800a69c:	2b04      	cmp	r3, #4
 800a69e:	d102      	bne.n	800a6a6 <f_unlink+0x100>
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						}
					}
				}
			}
			if (res == FR_OK) {
 800a6a6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d125      	bne.n	800a6fa <f_unlink+0x154>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800a6ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7fe f986 	bl	80089c4 <dir_remove>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800a6be:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d10e      	bne.n	800a6e4 <f_unlink+0x13e>
 800a6c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00a      	beq.n	800a6e4 <f_unlink+0x13e>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800a6ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7fd fa0e 	bl	8007afa <remove_chain>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800a6e4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d106      	bne.n	800a6fa <f_unlink+0x154>
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7fc ff84 	bl	80075fc <sync_fs>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800a6fa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3788      	adds	r7, #136	; 0x88
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800a706:	b580      	push	{r7, lr}
 800a708:	b098      	sub	sp, #96	; 0x60
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800a70e:	f107 0108 	add.w	r1, r7, #8
 800a712:	1d3b      	adds	r3, r7, #4
 800a714:	2202      	movs	r2, #2
 800a716:	4618      	mov	r0, r3
 800a718:	f7fe fde6 	bl	80092e8 <find_volume>
 800a71c:	4603      	mov	r3, r0
 800a71e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800a726:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	f040 80f2 	bne.w	800a914 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	f107 030c 	add.w	r3, r7, #12
 800a736:	4611      	mov	r1, r2
 800a738:	4618      	mov	r0, r3
 800a73a:	f7fe fcc5 	bl	80090c8 <follow_path>
 800a73e:	4603      	mov	r3, r0
 800a740:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800a744:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d102      	bne.n	800a752 <f_mkdir+0x4c>
 800a74c:	2308      	movs	r3, #8
 800a74e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800a752:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a756:	2b04      	cmp	r3, #4
 800a758:	f040 80dc 	bne.w	800a914 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800a75c:	f107 030c 	add.w	r3, r7, #12
 800a760:	2100      	movs	r1, #0
 800a762:	4618      	mov	r0, r3
 800a764:	f7fd fa2e 	bl	8007bc4 <create_chain>
 800a768:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	895b      	ldrh	r3, [r3, #10]
 800a76e:	461a      	mov	r2, r3
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	899b      	ldrh	r3, [r3, #12]
 800a774:	fb02 f303 	mul.w	r3, r2, r3
 800a778:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800a77a:	2300      	movs	r3, #0
 800a77c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800a780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a782:	2b00      	cmp	r3, #0
 800a784:	d102      	bne.n	800a78c <f_mkdir+0x86>
 800a786:	2307      	movs	r3, #7
 800a788:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 800a78c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d102      	bne.n	800a798 <f_mkdir+0x92>
 800a792:	2302      	movs	r3, #2
 800a794:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a79a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a79e:	d102      	bne.n	800a7a6 <f_mkdir+0xa0>
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800a7a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d106      	bne.n	800a7bc <f_mkdir+0xb6>
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f7fc feb1 	bl	8007518 <sync_window>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 800a7bc:	f7fc fb44 	bl	8006e48 <get_fattime>
 800a7c0:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 800a7c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d16c      	bne.n	800a8a4 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7fc ff84 	bl	80076dc <clust2sect>
 800a7d4:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	3338      	adds	r3, #56	; 0x38
 800a7da:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	899b      	ldrh	r3, [r3, #12]
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	2100      	movs	r1, #0
 800a7e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a7e6:	f7fc fcce 	bl	8007186 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800a7ea:	220b      	movs	r2, #11
 800a7ec:	2120      	movs	r1, #32
 800a7ee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a7f0:	f7fc fcc9 	bl	8007186 <mem_set>
					dir[DIR_Name] = '.';
 800a7f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7f6:	222e      	movs	r2, #46	; 0x2e
 800a7f8:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800a7fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7fc:	330b      	adds	r3, #11
 800a7fe:	2210      	movs	r2, #16
 800a800:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800a802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a804:	3316      	adds	r3, #22
 800a806:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a808:	4618      	mov	r0, r3
 800a80a:	f7fc fc6f 	bl	80070ec <st_dword>
					st_clust(fs, dir, dcl);
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a812:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a814:	4618      	mov	r0, r3
 800a816:	f7fd fc6a 	bl	80080ee <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800a81a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a81c:	3320      	adds	r3, #32
 800a81e:	2220      	movs	r2, #32
 800a820:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a822:	4618      	mov	r0, r3
 800a824:	f7fc fc8e 	bl	8007144 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800a828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a82a:	3321      	adds	r3, #33	; 0x21
 800a82c:	222e      	movs	r2, #46	; 0x2e
 800a82e:	701a      	strb	r2, [r3, #0]
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	2b03      	cmp	r3, #3
 800a83a:	d106      	bne.n	800a84a <f_mkdir+0x144>
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a840:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a842:	429a      	cmp	r2, r3
 800a844:	d101      	bne.n	800a84a <f_mkdir+0x144>
 800a846:	2300      	movs	r3, #0
 800a848:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 800a84a:	68b8      	ldr	r0, [r7, #8]
 800a84c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a84e:	3320      	adds	r3, #32
 800a850:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a852:	4619      	mov	r1, r3
 800a854:	f7fd fc4b 	bl	80080ee <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	895b      	ldrh	r3, [r3, #10]
 800a85c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a85e:	e01c      	b.n	800a89a <f_mkdir+0x194>
					fs->winsect = dsc++;
 800a860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a862:	1c5a      	adds	r2, r3, #1
 800a864:	657a      	str	r2, [r7, #84]	; 0x54
 800a866:	68ba      	ldr	r2, [r7, #8]
 800a868:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	2201      	movs	r2, #1
 800a86e:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	4618      	mov	r0, r3
 800a874:	f7fc fe50 	bl	8007518 <sync_window>
 800a878:	4603      	mov	r3, r0
 800a87a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 800a87e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a882:	2b00      	cmp	r3, #0
 800a884:	d10d      	bne.n	800a8a2 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	899b      	ldrh	r3, [r3, #12]
 800a88a:	461a      	mov	r2, r3
 800a88c:	2100      	movs	r1, #0
 800a88e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a890:	f7fc fc79 	bl	8007186 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800a894:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a896:	3b01      	subs	r3, #1
 800a898:	65bb      	str	r3, [r7, #88]	; 0x58
 800a89a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d1df      	bne.n	800a860 <f_mkdir+0x15a>
 800a8a0:	e000      	b.n	800a8a4 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 800a8a2:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800a8a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d107      	bne.n	800a8bc <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800a8ac:	f107 030c 	add.w	r3, r7, #12
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7fd ff8f 	bl	80087d4 <dir_register>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 800a8bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d120      	bne.n	800a906 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800a8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c6:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800a8c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8ca:	3316      	adds	r3, #22
 800a8cc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7fc fc0c 	bl	80070ec <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a8d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7fd fc07 	bl	80080ee <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800a8e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8e2:	330b      	adds	r3, #11
 800a8e4:	2210      	movs	r2, #16
 800a8e6:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800a8ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d10e      	bne.n	800a914 <f_mkdir+0x20e>
					res = sync_fs(fs);
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7fc fe7f 	bl	80075fc <sync_fs>
 800a8fe:	4603      	mov	r3, r0
 800a900:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a904:	e006      	b.n	800a914 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800a906:	f107 030c 	add.w	r3, r7, #12
 800a90a:	2200      	movs	r2, #0
 800a90c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a90e:	4618      	mov	r0, r3
 800a910:	f7fd f8f3 	bl	8007afa <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800a914:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3760      	adds	r7, #96	; 0x60
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b088      	sub	sp, #32
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	607a      	str	r2, [r7, #4]
	int n = 0;
 800a92c:	2300      	movs	r3, #0
 800a92e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a934:	e01b      	b.n	800a96e <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800a936:	f107 0310 	add.w	r3, r7, #16
 800a93a:	f107 0114 	add.w	r1, r7, #20
 800a93e:	2201      	movs	r2, #1
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f7ff f99f 	bl	8009c84 <f_read>
		if (rc != 1) break;
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d116      	bne.n	800a97a <f_gets+0x5a>
		c = s[0];
 800a94c:	7d3b      	ldrb	r3, [r7, #20]
 800a94e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800a950:	7dfb      	ldrb	r3, [r7, #23]
 800a952:	2b0d      	cmp	r3, #13
 800a954:	d100      	bne.n	800a958 <f_gets+0x38>
 800a956:	e00a      	b.n	800a96e <f_gets+0x4e>
		*p++ = c;
 800a958:	69bb      	ldr	r3, [r7, #24]
 800a95a:	1c5a      	adds	r2, r3, #1
 800a95c:	61ba      	str	r2, [r7, #24]
 800a95e:	7dfa      	ldrb	r2, [r7, #23]
 800a960:	701a      	strb	r2, [r3, #0]
		n++;
 800a962:	69fb      	ldr	r3, [r7, #28]
 800a964:	3301      	adds	r3, #1
 800a966:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800a968:	7dfb      	ldrb	r3, [r7, #23]
 800a96a:	2b0a      	cmp	r3, #10
 800a96c:	d007      	beq.n	800a97e <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	3b01      	subs	r3, #1
 800a972:	69fa      	ldr	r2, [r7, #28]
 800a974:	429a      	cmp	r2, r3
 800a976:	dbde      	blt.n	800a936 <f_gets+0x16>
 800a978:	e002      	b.n	800a980 <f_gets+0x60>
		if (rc != 1) break;
 800a97a:	bf00      	nop
 800a97c:	e000      	b.n	800a980 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800a97e:	bf00      	nop
	}
	*p = 0;
 800a980:	69bb      	ldr	r3, [r7, #24]
 800a982:	2200      	movs	r2, #0
 800a984:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800a986:	69fb      	ldr	r3, [r7, #28]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d001      	beq.n	800a990 <f_gets+0x70>
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	e000      	b.n	800a992 <f_gets+0x72>
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	3720      	adds	r7, #32
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800a99a:	b580      	push	{r7, lr}
 800a99c:	b084      	sub	sp, #16
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
 800a9a2:	460b      	mov	r3, r1
 800a9a4:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800a9a6:	78fb      	ldrb	r3, [r7, #3]
 800a9a8:	2b0a      	cmp	r3, #10
 800a9aa:	d103      	bne.n	800a9b4 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a9ac:	210d      	movs	r1, #13
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f7ff fff3 	bl	800a99a <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	db25      	blt.n	800aa0c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	1c5a      	adds	r2, r3, #1
 800a9c4:	60fa      	str	r2, [r7, #12]
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	4413      	add	r3, r2
 800a9ca:	78fa      	ldrb	r2, [r7, #3]
 800a9cc:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2b3c      	cmp	r3, #60	; 0x3c
 800a9d2:	dd12      	ble.n	800a9fa <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6818      	ldr	r0, [r3, #0]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f103 010c 	add.w	r1, r3, #12
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	f107 0308 	add.w	r3, r7, #8
 800a9e4:	f7ff faad 	bl	8009f42 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a9e8:	68ba      	ldr	r2, [r7, #8]
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d101      	bne.n	800a9f4 <putc_bfd+0x5a>
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	e001      	b.n	800a9f8 <putc_bfd+0x5e>
 800a9f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a9f8:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	68fa      	ldr	r2, [r7, #12]
 800a9fe:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	1c5a      	adds	r2, r3, #1
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	609a      	str	r2, [r3, #8]
 800aa0a:	e000      	b.n	800aa0e <putc_bfd+0x74>
	if (i < 0) return;
 800aa0c:	bf00      	nop
}
 800aa0e:	3710      	adds	r7, #16
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}

0800aa14 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b084      	sub	sp, #16
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	db16      	blt.n	800aa52 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6818      	ldr	r0, [r3, #0]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f103 010c 	add.w	r1, r3, #12
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	461a      	mov	r2, r3
 800aa34:	f107 030c 	add.w	r3, r7, #12
 800aa38:	f7ff fa83 	bl	8009f42 <f_write>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d107      	bne.n	800aa52 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	68fa      	ldr	r2, [r7, #12]
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d102      	bne.n	800aa52 <putc_flush+0x3e>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	e001      	b.n	800aa56 <putc_flush+0x42>
	return EOF;
 800aa52:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3710      	adds	r7, #16
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800aa5e:	b480      	push	{r7}
 800aa60:	b083      	sub	sp, #12
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
 800aa66:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	683a      	ldr	r2, [r7, #0]
 800aa6c:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2200      	movs	r2, #0
 800aa72:	605a      	str	r2, [r3, #4]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	685a      	ldr	r2, [r3, #4]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	609a      	str	r2, [r3, #8]
}
 800aa7c:	bf00      	nop
 800aa7e:	370c      	adds	r7, #12
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b096      	sub	sp, #88	; 0x58
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800aa92:	f107 030c 	add.w	r3, r7, #12
 800aa96:	6839      	ldr	r1, [r7, #0]
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7ff ffe0 	bl	800aa5e <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800aa9e:	e009      	b.n	800aab4 <f_puts+0x2c>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	1c5a      	adds	r2, r3, #1
 800aaa4:	607a      	str	r2, [r7, #4]
 800aaa6:	781a      	ldrb	r2, [r3, #0]
 800aaa8:	f107 030c 	add.w	r3, r7, #12
 800aaac:	4611      	mov	r1, r2
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7ff ff73 	bl	800a99a <putc_bfd>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d1f1      	bne.n	800aaa0 <f_puts+0x18>
	return putc_flush(&pb);
 800aabc:	f107 030c 	add.w	r3, r7, #12
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7ff ffa7 	bl	800aa14 <putc_flush>
 800aac6:	4603      	mov	r3, r0
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3758      	adds	r7, #88	; 0x58
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b087      	sub	sp, #28
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	4613      	mov	r3, r2
 800aadc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800aade:	2301      	movs	r3, #1
 800aae0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800aae2:	2300      	movs	r3, #0
 800aae4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800aae6:	4b1f      	ldr	r3, [pc, #124]	; (800ab64 <FATFS_LinkDriverEx+0x94>)
 800aae8:	7a5b      	ldrb	r3, [r3, #9]
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d131      	bne.n	800ab54 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800aaf0:	4b1c      	ldr	r3, [pc, #112]	; (800ab64 <FATFS_LinkDriverEx+0x94>)
 800aaf2:	7a5b      	ldrb	r3, [r3, #9]
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	4b1a      	ldr	r3, [pc, #104]	; (800ab64 <FATFS_LinkDriverEx+0x94>)
 800aafa:	2100      	movs	r1, #0
 800aafc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800aafe:	4b19      	ldr	r3, [pc, #100]	; (800ab64 <FATFS_LinkDriverEx+0x94>)
 800ab00:	7a5b      	ldrb	r3, [r3, #9]
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	4a17      	ldr	r2, [pc, #92]	; (800ab64 <FATFS_LinkDriverEx+0x94>)
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	4413      	add	r3, r2
 800ab0a:	68fa      	ldr	r2, [r7, #12]
 800ab0c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ab0e:	4b15      	ldr	r3, [pc, #84]	; (800ab64 <FATFS_LinkDriverEx+0x94>)
 800ab10:	7a5b      	ldrb	r3, [r3, #9]
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	461a      	mov	r2, r3
 800ab16:	4b13      	ldr	r3, [pc, #76]	; (800ab64 <FATFS_LinkDriverEx+0x94>)
 800ab18:	4413      	add	r3, r2
 800ab1a:	79fa      	ldrb	r2, [r7, #7]
 800ab1c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ab1e:	4b11      	ldr	r3, [pc, #68]	; (800ab64 <FATFS_LinkDriverEx+0x94>)
 800ab20:	7a5b      	ldrb	r3, [r3, #9]
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	1c5a      	adds	r2, r3, #1
 800ab26:	b2d1      	uxtb	r1, r2
 800ab28:	4a0e      	ldr	r2, [pc, #56]	; (800ab64 <FATFS_LinkDriverEx+0x94>)
 800ab2a:	7251      	strb	r1, [r2, #9]
 800ab2c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ab2e:	7dbb      	ldrb	r3, [r7, #22]
 800ab30:	3330      	adds	r3, #48	; 0x30
 800ab32:	b2da      	uxtb	r2, r3
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	223a      	movs	r2, #58	; 0x3a
 800ab3e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	3302      	adds	r3, #2
 800ab44:	222f      	movs	r2, #47	; 0x2f
 800ab46:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	3303      	adds	r3, #3
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ab50:	2300      	movs	r3, #0
 800ab52:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ab54:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	371c      	adds	r7, #28
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	200038a0 	.word	0x200038a0

0800ab68 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ab72:	2200      	movs	r2, #0
 800ab74:	6839      	ldr	r1, [r7, #0]
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f7ff ffaa 	bl	800aad0 <FATFS_LinkDriverEx>
 800ab7c:	4603      	mov	r3, r0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3708      	adds	r7, #8
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
	...

0800ab88 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b085      	sub	sp, #20
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	4603      	mov	r3, r0
 800ab90:	6039      	str	r1, [r7, #0]
 800ab92:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ab94:	88fb      	ldrh	r3, [r7, #6]
 800ab96:	2b7f      	cmp	r3, #127	; 0x7f
 800ab98:	d802      	bhi.n	800aba0 <ff_convert+0x18>
		c = chr;
 800ab9a:	88fb      	ldrh	r3, [r7, #6]
 800ab9c:	81fb      	strh	r3, [r7, #14]
 800ab9e:	e025      	b.n	800abec <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00b      	beq.n	800abbe <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800aba6:	88fb      	ldrh	r3, [r7, #6]
 800aba8:	2bff      	cmp	r3, #255	; 0xff
 800abaa:	d805      	bhi.n	800abb8 <ff_convert+0x30>
 800abac:	88fb      	ldrh	r3, [r7, #6]
 800abae:	3b80      	subs	r3, #128	; 0x80
 800abb0:	4a12      	ldr	r2, [pc, #72]	; (800abfc <ff_convert+0x74>)
 800abb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abb6:	e000      	b.n	800abba <ff_convert+0x32>
 800abb8:	2300      	movs	r3, #0
 800abba:	81fb      	strh	r3, [r7, #14]
 800abbc:	e016      	b.n	800abec <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800abbe:	2300      	movs	r3, #0
 800abc0:	81fb      	strh	r3, [r7, #14]
 800abc2:	e009      	b.n	800abd8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800abc4:	89fb      	ldrh	r3, [r7, #14]
 800abc6:	4a0d      	ldr	r2, [pc, #52]	; (800abfc <ff_convert+0x74>)
 800abc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abcc:	88fa      	ldrh	r2, [r7, #6]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d006      	beq.n	800abe0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800abd2:	89fb      	ldrh	r3, [r7, #14]
 800abd4:	3301      	adds	r3, #1
 800abd6:	81fb      	strh	r3, [r7, #14]
 800abd8:	89fb      	ldrh	r3, [r7, #14]
 800abda:	2b7f      	cmp	r3, #127	; 0x7f
 800abdc:	d9f2      	bls.n	800abc4 <ff_convert+0x3c>
 800abde:	e000      	b.n	800abe2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800abe0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800abe2:	89fb      	ldrh	r3, [r7, #14]
 800abe4:	3380      	adds	r3, #128	; 0x80
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800abec:	89fb      	ldrh	r3, [r7, #14]
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3714      	adds	r7, #20
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr
 800abfa:	bf00      	nop
 800abfc:	08013db0 	.word	0x08013db0

0800ac00 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b087      	sub	sp, #28
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	4603      	mov	r3, r0
 800ac08:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ac0a:	88fb      	ldrh	r3, [r7, #6]
 800ac0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac10:	d201      	bcs.n	800ac16 <ff_wtoupper+0x16>
 800ac12:	4b3e      	ldr	r3, [pc, #248]	; (800ad0c <ff_wtoupper+0x10c>)
 800ac14:	e000      	b.n	800ac18 <ff_wtoupper+0x18>
 800ac16:	4b3e      	ldr	r3, [pc, #248]	; (800ad10 <ff_wtoupper+0x110>)
 800ac18:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	1c9a      	adds	r2, r3, #2
 800ac1e:	617a      	str	r2, [r7, #20]
 800ac20:	881b      	ldrh	r3, [r3, #0]
 800ac22:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ac24:	8a7b      	ldrh	r3, [r7, #18]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d068      	beq.n	800acfc <ff_wtoupper+0xfc>
 800ac2a:	88fa      	ldrh	r2, [r7, #6]
 800ac2c:	8a7b      	ldrh	r3, [r7, #18]
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d364      	bcc.n	800acfc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	1c9a      	adds	r2, r3, #2
 800ac36:	617a      	str	r2, [r7, #20]
 800ac38:	881b      	ldrh	r3, [r3, #0]
 800ac3a:	823b      	strh	r3, [r7, #16]
 800ac3c:	8a3b      	ldrh	r3, [r7, #16]
 800ac3e:	0a1b      	lsrs	r3, r3, #8
 800ac40:	81fb      	strh	r3, [r7, #14]
 800ac42:	8a3b      	ldrh	r3, [r7, #16]
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ac48:	88fa      	ldrh	r2, [r7, #6]
 800ac4a:	8a79      	ldrh	r1, [r7, #18]
 800ac4c:	8a3b      	ldrh	r3, [r7, #16]
 800ac4e:	440b      	add	r3, r1
 800ac50:	429a      	cmp	r2, r3
 800ac52:	da49      	bge.n	800ace8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ac54:	89fb      	ldrh	r3, [r7, #14]
 800ac56:	2b08      	cmp	r3, #8
 800ac58:	d84f      	bhi.n	800acfa <ff_wtoupper+0xfa>
 800ac5a:	a201      	add	r2, pc, #4	; (adr r2, 800ac60 <ff_wtoupper+0x60>)
 800ac5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac60:	0800ac85 	.word	0x0800ac85
 800ac64:	0800ac97 	.word	0x0800ac97
 800ac68:	0800acad 	.word	0x0800acad
 800ac6c:	0800acb5 	.word	0x0800acb5
 800ac70:	0800acbd 	.word	0x0800acbd
 800ac74:	0800acc5 	.word	0x0800acc5
 800ac78:	0800accd 	.word	0x0800accd
 800ac7c:	0800acd5 	.word	0x0800acd5
 800ac80:	0800acdd 	.word	0x0800acdd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ac84:	88fa      	ldrh	r2, [r7, #6]
 800ac86:	8a7b      	ldrh	r3, [r7, #18]
 800ac88:	1ad3      	subs	r3, r2, r3
 800ac8a:	005b      	lsls	r3, r3, #1
 800ac8c:	697a      	ldr	r2, [r7, #20]
 800ac8e:	4413      	add	r3, r2
 800ac90:	881b      	ldrh	r3, [r3, #0]
 800ac92:	80fb      	strh	r3, [r7, #6]
 800ac94:	e027      	b.n	800ace6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ac96:	88fa      	ldrh	r2, [r7, #6]
 800ac98:	8a7b      	ldrh	r3, [r7, #18]
 800ac9a:	1ad3      	subs	r3, r2, r3
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	f003 0301 	and.w	r3, r3, #1
 800aca2:	b29b      	uxth	r3, r3
 800aca4:	88fa      	ldrh	r2, [r7, #6]
 800aca6:	1ad3      	subs	r3, r2, r3
 800aca8:	80fb      	strh	r3, [r7, #6]
 800acaa:	e01c      	b.n	800ace6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800acac:	88fb      	ldrh	r3, [r7, #6]
 800acae:	3b10      	subs	r3, #16
 800acb0:	80fb      	strh	r3, [r7, #6]
 800acb2:	e018      	b.n	800ace6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800acb4:	88fb      	ldrh	r3, [r7, #6]
 800acb6:	3b20      	subs	r3, #32
 800acb8:	80fb      	strh	r3, [r7, #6]
 800acba:	e014      	b.n	800ace6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800acbc:	88fb      	ldrh	r3, [r7, #6]
 800acbe:	3b30      	subs	r3, #48	; 0x30
 800acc0:	80fb      	strh	r3, [r7, #6]
 800acc2:	e010      	b.n	800ace6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800acc4:	88fb      	ldrh	r3, [r7, #6]
 800acc6:	3b1a      	subs	r3, #26
 800acc8:	80fb      	strh	r3, [r7, #6]
 800acca:	e00c      	b.n	800ace6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800accc:	88fb      	ldrh	r3, [r7, #6]
 800acce:	3308      	adds	r3, #8
 800acd0:	80fb      	strh	r3, [r7, #6]
 800acd2:	e008      	b.n	800ace6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800acd4:	88fb      	ldrh	r3, [r7, #6]
 800acd6:	3b50      	subs	r3, #80	; 0x50
 800acd8:	80fb      	strh	r3, [r7, #6]
 800acda:	e004      	b.n	800ace6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800acdc:	88fb      	ldrh	r3, [r7, #6]
 800acde:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800ace2:	80fb      	strh	r3, [r7, #6]
 800ace4:	bf00      	nop
			}
			break;
 800ace6:	e008      	b.n	800acfa <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ace8:	89fb      	ldrh	r3, [r7, #14]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d195      	bne.n	800ac1a <ff_wtoupper+0x1a>
 800acee:	8a3b      	ldrh	r3, [r7, #16]
 800acf0:	005b      	lsls	r3, r3, #1
 800acf2:	697a      	ldr	r2, [r7, #20]
 800acf4:	4413      	add	r3, r2
 800acf6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800acf8:	e78f      	b.n	800ac1a <ff_wtoupper+0x1a>
			break;
 800acfa:	bf00      	nop
	}

	return chr;
 800acfc:	88fb      	ldrh	r3, [r7, #6]
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	371c      	adds	r7, #28
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr
 800ad0a:	bf00      	nop
 800ad0c:	08013eb0 	.word	0x08013eb0
 800ad10:	080140a4 	.word	0x080140a4

0800ad14 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 800ad1c:	4b22      	ldr	r3, [pc, #136]	; (800ada8 <WIZCHIP_READ+0x94>)
 800ad1e:	68db      	ldr	r3, [r3, #12]
 800ad20:	4798      	blx	r3
   WIZCHIP.CS._select();
 800ad22:	4b21      	ldr	r3, [pc, #132]	; (800ada8 <WIZCHIP_READ+0x94>)
 800ad24:	695b      	ldr	r3, [r3, #20]
 800ad26:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800ad28:	4b1f      	ldr	r3, [pc, #124]	; (800ada8 <WIZCHIP_READ+0x94>)
 800ad2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d003      	beq.n	800ad38 <WIZCHIP_READ+0x24>
 800ad30:	4b1d      	ldr	r3, [pc, #116]	; (800ada8 <WIZCHIP_READ+0x94>)
 800ad32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d114      	bne.n	800ad62 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800ad38:	4b1b      	ldr	r3, [pc, #108]	; (800ada8 <WIZCHIP_READ+0x94>)
 800ad3a:	6a1b      	ldr	r3, [r3, #32]
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	0c12      	lsrs	r2, r2, #16
 800ad40:	b2d2      	uxtb	r2, r2
 800ad42:	4610      	mov	r0, r2
 800ad44:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800ad46:	4b18      	ldr	r3, [pc, #96]	; (800ada8 <WIZCHIP_READ+0x94>)
 800ad48:	6a1b      	ldr	r3, [r3, #32]
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	0a12      	lsrs	r2, r2, #8
 800ad4e:	b2d2      	uxtb	r2, r2
 800ad50:	4610      	mov	r0, r2
 800ad52:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800ad54:	4b14      	ldr	r3, [pc, #80]	; (800ada8 <WIZCHIP_READ+0x94>)
 800ad56:	6a1b      	ldr	r3, [r3, #32]
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	b2d2      	uxtb	r2, r2
 800ad5c:	4610      	mov	r0, r2
 800ad5e:	4798      	blx	r3
 800ad60:	e011      	b.n	800ad86 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	0c1b      	lsrs	r3, r3, #16
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	0a1b      	lsrs	r3, r3, #8
 800ad6e:	b2db      	uxtb	r3, r3
 800ad70:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800ad78:	4b0b      	ldr	r3, [pc, #44]	; (800ada8 <WIZCHIP_READ+0x94>)
 800ad7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad7c:	f107 020c 	add.w	r2, r7, #12
 800ad80:	2103      	movs	r1, #3
 800ad82:	4610      	mov	r0, r2
 800ad84:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800ad86:	4b08      	ldr	r3, [pc, #32]	; (800ada8 <WIZCHIP_READ+0x94>)
 800ad88:	69db      	ldr	r3, [r3, #28]
 800ad8a:	4798      	blx	r3
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 800ad90:	4b05      	ldr	r3, [pc, #20]	; (800ada8 <WIZCHIP_READ+0x94>)
 800ad92:	699b      	ldr	r3, [r3, #24]
 800ad94:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800ad96:	4b04      	ldr	r3, [pc, #16]	; (800ada8 <WIZCHIP_READ+0x94>)
 800ad98:	691b      	ldr	r3, [r3, #16]
 800ad9a:	4798      	blx	r3
   return ret;
 800ad9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3710      	adds	r7, #16
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	20000080 	.word	0x20000080

0800adac <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	460b      	mov	r3, r1
 800adb6:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 800adb8:	4b22      	ldr	r3, [pc, #136]	; (800ae44 <WIZCHIP_WRITE+0x98>)
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	4798      	blx	r3
   WIZCHIP.CS._select();
 800adbe:	4b21      	ldr	r3, [pc, #132]	; (800ae44 <WIZCHIP_WRITE+0x98>)
 800adc0:	695b      	ldr	r3, [r3, #20]
 800adc2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f043 0304 	orr.w	r3, r3, #4
 800adca:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800adcc:	4b1d      	ldr	r3, [pc, #116]	; (800ae44 <WIZCHIP_WRITE+0x98>)
 800adce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800add0:	2b00      	cmp	r3, #0
 800add2:	d119      	bne.n	800ae08 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800add4:	4b1b      	ldr	r3, [pc, #108]	; (800ae44 <WIZCHIP_WRITE+0x98>)
 800add6:	6a1b      	ldr	r3, [r3, #32]
 800add8:	687a      	ldr	r2, [r7, #4]
 800adda:	0c12      	lsrs	r2, r2, #16
 800addc:	b2d2      	uxtb	r2, r2
 800adde:	4610      	mov	r0, r2
 800ade0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800ade2:	4b18      	ldr	r3, [pc, #96]	; (800ae44 <WIZCHIP_WRITE+0x98>)
 800ade4:	6a1b      	ldr	r3, [r3, #32]
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	0a12      	lsrs	r2, r2, #8
 800adea:	b2d2      	uxtb	r2, r2
 800adec:	4610      	mov	r0, r2
 800adee:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800adf0:	4b14      	ldr	r3, [pc, #80]	; (800ae44 <WIZCHIP_WRITE+0x98>)
 800adf2:	6a1b      	ldr	r3, [r3, #32]
 800adf4:	687a      	ldr	r2, [r7, #4]
 800adf6:	b2d2      	uxtb	r2, r2
 800adf8:	4610      	mov	r0, r2
 800adfa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 800adfc:	4b11      	ldr	r3, [pc, #68]	; (800ae44 <WIZCHIP_WRITE+0x98>)
 800adfe:	6a1b      	ldr	r3, [r3, #32]
 800ae00:	78fa      	ldrb	r2, [r7, #3]
 800ae02:	4610      	mov	r0, r2
 800ae04:	4798      	blx	r3
 800ae06:	e013      	b.n	800ae30 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	0c1b      	lsrs	r3, r3, #16
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	0a1b      	lsrs	r3, r3, #8
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800ae1e:	78fb      	ldrb	r3, [r7, #3]
 800ae20:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800ae22:	4b08      	ldr	r3, [pc, #32]	; (800ae44 <WIZCHIP_WRITE+0x98>)
 800ae24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae26:	f107 020c 	add.w	r2, r7, #12
 800ae2a:	2104      	movs	r1, #4
 800ae2c:	4610      	mov	r0, r2
 800ae2e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800ae30:	4b04      	ldr	r3, [pc, #16]	; (800ae44 <WIZCHIP_WRITE+0x98>)
 800ae32:	699b      	ldr	r3, [r3, #24]
 800ae34:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800ae36:	4b03      	ldr	r3, [pc, #12]	; (800ae44 <WIZCHIP_WRITE+0x98>)
 800ae38:	691b      	ldr	r3, [r3, #16]
 800ae3a:	4798      	blx	r3
}
 800ae3c:	bf00      	nop
 800ae3e:	3710      	adds	r7, #16
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	20000080 	.word	0x20000080

0800ae48 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800ae48:	b590      	push	{r4, r7, lr}
 800ae4a:	b087      	sub	sp, #28
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	4613      	mov	r3, r2
 800ae54:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800ae56:	4b2b      	ldr	r3, [pc, #172]	; (800af04 <WIZCHIP_READ_BUF+0xbc>)
 800ae58:	68db      	ldr	r3, [r3, #12]
 800ae5a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800ae5c:	4b29      	ldr	r3, [pc, #164]	; (800af04 <WIZCHIP_READ_BUF+0xbc>)
 800ae5e:	695b      	ldr	r3, [r3, #20]
 800ae60:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800ae62:	4b28      	ldr	r3, [pc, #160]	; (800af04 <WIZCHIP_READ_BUF+0xbc>)
 800ae64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d003      	beq.n	800ae72 <WIZCHIP_READ_BUF+0x2a>
 800ae6a:	4b26      	ldr	r3, [pc, #152]	; (800af04 <WIZCHIP_READ_BUF+0xbc>)
 800ae6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d126      	bne.n	800aec0 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800ae72:	4b24      	ldr	r3, [pc, #144]	; (800af04 <WIZCHIP_READ_BUF+0xbc>)
 800ae74:	6a1b      	ldr	r3, [r3, #32]
 800ae76:	68fa      	ldr	r2, [r7, #12]
 800ae78:	0c12      	lsrs	r2, r2, #16
 800ae7a:	b2d2      	uxtb	r2, r2
 800ae7c:	4610      	mov	r0, r2
 800ae7e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800ae80:	4b20      	ldr	r3, [pc, #128]	; (800af04 <WIZCHIP_READ_BUF+0xbc>)
 800ae82:	6a1b      	ldr	r3, [r3, #32]
 800ae84:	68fa      	ldr	r2, [r7, #12]
 800ae86:	0a12      	lsrs	r2, r2, #8
 800ae88:	b2d2      	uxtb	r2, r2
 800ae8a:	4610      	mov	r0, r2
 800ae8c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800ae8e:	4b1d      	ldr	r3, [pc, #116]	; (800af04 <WIZCHIP_READ_BUF+0xbc>)
 800ae90:	6a1b      	ldr	r3, [r3, #32]
 800ae92:	68fa      	ldr	r2, [r7, #12]
 800ae94:	b2d2      	uxtb	r2, r2
 800ae96:	4610      	mov	r0, r2
 800ae98:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	82fb      	strh	r3, [r7, #22]
 800ae9e:	e00a      	b.n	800aeb6 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 800aea0:	4b18      	ldr	r3, [pc, #96]	; (800af04 <WIZCHIP_READ_BUF+0xbc>)
 800aea2:	69db      	ldr	r3, [r3, #28]
 800aea4:	8afa      	ldrh	r2, [r7, #22]
 800aea6:	68b9      	ldr	r1, [r7, #8]
 800aea8:	188c      	adds	r4, r1, r2
 800aeaa:	4798      	blx	r3
 800aeac:	4603      	mov	r3, r0
 800aeae:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 800aeb0:	8afb      	ldrh	r3, [r7, #22]
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	82fb      	strh	r3, [r7, #22]
 800aeb6:	8afa      	ldrh	r2, [r7, #22]
 800aeb8:	88fb      	ldrh	r3, [r7, #6]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d3f0      	bcc.n	800aea0 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800aebe:	e017      	b.n	800aef0 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	0c1b      	lsrs	r3, r3, #16
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	0a1b      	lsrs	r3, r3, #8
 800aecc:	b2db      	uxtb	r3, r3
 800aece:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800aed6:	4b0b      	ldr	r3, [pc, #44]	; (800af04 <WIZCHIP_READ_BUF+0xbc>)
 800aed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeda:	f107 0210 	add.w	r2, r7, #16
 800aede:	2103      	movs	r1, #3
 800aee0:	4610      	mov	r0, r2
 800aee2:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 800aee4:	4b07      	ldr	r3, [pc, #28]	; (800af04 <WIZCHIP_READ_BUF+0xbc>)
 800aee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee8:	88fa      	ldrh	r2, [r7, #6]
 800aeea:	4611      	mov	r1, r2
 800aeec:	68b8      	ldr	r0, [r7, #8]
 800aeee:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800aef0:	4b04      	ldr	r3, [pc, #16]	; (800af04 <WIZCHIP_READ_BUF+0xbc>)
 800aef2:	699b      	ldr	r3, [r3, #24]
 800aef4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800aef6:	4b03      	ldr	r3, [pc, #12]	; (800af04 <WIZCHIP_READ_BUF+0xbc>)
 800aef8:	691b      	ldr	r3, [r3, #16]
 800aefa:	4798      	blx	r3
}
 800aefc:	bf00      	nop
 800aefe:	371c      	adds	r7, #28
 800af00:	46bd      	mov	sp, r7
 800af02:	bd90      	pop	{r4, r7, pc}
 800af04:	20000080 	.word	0x20000080

0800af08 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b086      	sub	sp, #24
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	60b9      	str	r1, [r7, #8]
 800af12:	4613      	mov	r3, r2
 800af14:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800af16:	4b2b      	ldr	r3, [pc, #172]	; (800afc4 <WIZCHIP_WRITE_BUF+0xbc>)
 800af18:	68db      	ldr	r3, [r3, #12]
 800af1a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800af1c:	4b29      	ldr	r3, [pc, #164]	; (800afc4 <WIZCHIP_WRITE_BUF+0xbc>)
 800af1e:	695b      	ldr	r3, [r3, #20]
 800af20:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f043 0304 	orr.w	r3, r3, #4
 800af28:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800af2a:	4b26      	ldr	r3, [pc, #152]	; (800afc4 <WIZCHIP_WRITE_BUF+0xbc>)
 800af2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d126      	bne.n	800af80 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800af32:	4b24      	ldr	r3, [pc, #144]	; (800afc4 <WIZCHIP_WRITE_BUF+0xbc>)
 800af34:	6a1b      	ldr	r3, [r3, #32]
 800af36:	68fa      	ldr	r2, [r7, #12]
 800af38:	0c12      	lsrs	r2, r2, #16
 800af3a:	b2d2      	uxtb	r2, r2
 800af3c:	4610      	mov	r0, r2
 800af3e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800af40:	4b20      	ldr	r3, [pc, #128]	; (800afc4 <WIZCHIP_WRITE_BUF+0xbc>)
 800af42:	6a1b      	ldr	r3, [r3, #32]
 800af44:	68fa      	ldr	r2, [r7, #12]
 800af46:	0a12      	lsrs	r2, r2, #8
 800af48:	b2d2      	uxtb	r2, r2
 800af4a:	4610      	mov	r0, r2
 800af4c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800af4e:	4b1d      	ldr	r3, [pc, #116]	; (800afc4 <WIZCHIP_WRITE_BUF+0xbc>)
 800af50:	6a1b      	ldr	r3, [r3, #32]
 800af52:	68fa      	ldr	r2, [r7, #12]
 800af54:	b2d2      	uxtb	r2, r2
 800af56:	4610      	mov	r0, r2
 800af58:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800af5a:	2300      	movs	r3, #0
 800af5c:	82fb      	strh	r3, [r7, #22]
 800af5e:	e00a      	b.n	800af76 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 800af60:	4b18      	ldr	r3, [pc, #96]	; (800afc4 <WIZCHIP_WRITE_BUF+0xbc>)
 800af62:	6a1b      	ldr	r3, [r3, #32]
 800af64:	8afa      	ldrh	r2, [r7, #22]
 800af66:	68b9      	ldr	r1, [r7, #8]
 800af68:	440a      	add	r2, r1
 800af6a:	7812      	ldrb	r2, [r2, #0]
 800af6c:	4610      	mov	r0, r2
 800af6e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800af70:	8afb      	ldrh	r3, [r7, #22]
 800af72:	3301      	adds	r3, #1
 800af74:	82fb      	strh	r3, [r7, #22]
 800af76:	8afa      	ldrh	r2, [r7, #22]
 800af78:	88fb      	ldrh	r3, [r7, #6]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d3f0      	bcc.n	800af60 <WIZCHIP_WRITE_BUF+0x58>
 800af7e:	e017      	b.n	800afb0 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	0c1b      	lsrs	r3, r3, #16
 800af84:	b2db      	uxtb	r3, r3
 800af86:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	0a1b      	lsrs	r3, r3, #8
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	b2db      	uxtb	r3, r3
 800af94:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800af96:	4b0b      	ldr	r3, [pc, #44]	; (800afc4 <WIZCHIP_WRITE_BUF+0xbc>)
 800af98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af9a:	f107 0210 	add.w	r2, r7, #16
 800af9e:	2103      	movs	r1, #3
 800afa0:	4610      	mov	r0, r2
 800afa2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 800afa4:	4b07      	ldr	r3, [pc, #28]	; (800afc4 <WIZCHIP_WRITE_BUF+0xbc>)
 800afa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afa8:	88fa      	ldrh	r2, [r7, #6]
 800afaa:	4611      	mov	r1, r2
 800afac:	68b8      	ldr	r0, [r7, #8]
 800afae:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800afb0:	4b04      	ldr	r3, [pc, #16]	; (800afc4 <WIZCHIP_WRITE_BUF+0xbc>)
 800afb2:	699b      	ldr	r3, [r3, #24]
 800afb4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800afb6:	4b03      	ldr	r3, [pc, #12]	; (800afc4 <WIZCHIP_WRITE_BUF+0xbc>)
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	4798      	blx	r3
}
 800afbc:	bf00      	nop
 800afbe:	3718      	adds	r7, #24
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	20000080 	.word	0x20000080

0800afc8 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 800afc8:	b590      	push	{r4, r7, lr}
 800afca:	b085      	sub	sp, #20
 800afcc:	af00      	add	r7, sp, #0
 800afce:	4603      	mov	r3, r0
 800afd0:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800afd2:	2300      	movs	r3, #0
 800afd4:	81fb      	strh	r3, [r7, #14]
 800afd6:	2300      	movs	r3, #0
 800afd8:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800afda:	79fb      	ldrb	r3, [r7, #7]
 800afdc:	009b      	lsls	r3, r3, #2
 800afde:	3301      	adds	r3, #1
 800afe0:	00db      	lsls	r3, r3, #3
 800afe2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800afe6:	4618      	mov	r0, r3
 800afe8:	f7ff fe94 	bl	800ad14 <WIZCHIP_READ>
 800afec:	4603      	mov	r3, r0
 800afee:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800aff0:	89bb      	ldrh	r3, [r7, #12]
 800aff2:	021b      	lsls	r3, r3, #8
 800aff4:	b29c      	uxth	r4, r3
 800aff6:	79fb      	ldrb	r3, [r7, #7]
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	3301      	adds	r3, #1
 800affc:	00db      	lsls	r3, r3, #3
 800affe:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800b002:	4618      	mov	r0, r3
 800b004:	f7ff fe86 	bl	800ad14 <WIZCHIP_READ>
 800b008:	4603      	mov	r3, r0
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	4423      	add	r3, r4
 800b00e:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800b010:	89bb      	ldrh	r3, [r7, #12]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d01a      	beq.n	800b04c <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800b016:	79fb      	ldrb	r3, [r7, #7]
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	3301      	adds	r3, #1
 800b01c:	00db      	lsls	r3, r3, #3
 800b01e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b022:	4618      	mov	r0, r3
 800b024:	f7ff fe76 	bl	800ad14 <WIZCHIP_READ>
 800b028:	4603      	mov	r3, r0
 800b02a:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800b02c:	89fb      	ldrh	r3, [r7, #14]
 800b02e:	021b      	lsls	r3, r3, #8
 800b030:	b29c      	uxth	r4, r3
 800b032:	79fb      	ldrb	r3, [r7, #7]
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	3301      	adds	r3, #1
 800b038:	00db      	lsls	r3, r3, #3
 800b03a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800b03e:	4618      	mov	r0, r3
 800b040:	f7ff fe68 	bl	800ad14 <WIZCHIP_READ>
 800b044:	4603      	mov	r3, r0
 800b046:	b29b      	uxth	r3, r3
 800b048:	4423      	add	r3, r4
 800b04a:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800b04c:	89fa      	ldrh	r2, [r7, #14]
 800b04e:	89bb      	ldrh	r3, [r7, #12]
 800b050:	429a      	cmp	r2, r3
 800b052:	d1c2      	bne.n	800afda <getSn_TX_FSR+0x12>
   return val;
 800b054:	89fb      	ldrh	r3, [r7, #14]
}
 800b056:	4618      	mov	r0, r3
 800b058:	3714      	adds	r7, #20
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd90      	pop	{r4, r7, pc}

0800b05e <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800b05e:	b590      	push	{r4, r7, lr}
 800b060:	b085      	sub	sp, #20
 800b062:	af00      	add	r7, sp, #0
 800b064:	4603      	mov	r3, r0
 800b066:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800b068:	2300      	movs	r3, #0
 800b06a:	81fb      	strh	r3, [r7, #14]
 800b06c:	2300      	movs	r3, #0
 800b06e:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 800b070:	79fb      	ldrb	r3, [r7, #7]
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	3301      	adds	r3, #1
 800b076:	00db      	lsls	r3, r3, #3
 800b078:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7ff fe49 	bl	800ad14 <WIZCHIP_READ>
 800b082:	4603      	mov	r3, r0
 800b084:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800b086:	89bb      	ldrh	r3, [r7, #12]
 800b088:	021b      	lsls	r3, r3, #8
 800b08a:	b29c      	uxth	r4, r3
 800b08c:	79fb      	ldrb	r3, [r7, #7]
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	3301      	adds	r3, #1
 800b092:	00db      	lsls	r3, r3, #3
 800b094:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800b098:	4618      	mov	r0, r3
 800b09a:	f7ff fe3b 	bl	800ad14 <WIZCHIP_READ>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	4423      	add	r3, r4
 800b0a4:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800b0a6:	89bb      	ldrh	r3, [r7, #12]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d01a      	beq.n	800b0e2 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 800b0ac:	79fb      	ldrb	r3, [r7, #7]
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	00db      	lsls	r3, r3, #3
 800b0b4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f7ff fe2b 	bl	800ad14 <WIZCHIP_READ>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800b0c2:	89fb      	ldrh	r3, [r7, #14]
 800b0c4:	021b      	lsls	r3, r3, #8
 800b0c6:	b29c      	uxth	r4, r3
 800b0c8:	79fb      	ldrb	r3, [r7, #7]
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	00db      	lsls	r3, r3, #3
 800b0d0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7ff fe1d 	bl	800ad14 <WIZCHIP_READ>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	4423      	add	r3, r4
 800b0e0:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800b0e2:	89fa      	ldrh	r2, [r7, #14]
 800b0e4:	89bb      	ldrh	r3, [r7, #12]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d1c2      	bne.n	800b070 <getSn_RX_RSR+0x12>
   return val;
 800b0ea:	89fb      	ldrh	r3, [r7, #14]
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3714      	adds	r7, #20
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd90      	pop	{r4, r7, pc}

0800b0f4 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800b0f4:	b590      	push	{r4, r7, lr}
 800b0f6:	b085      	sub	sp, #20
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	6039      	str	r1, [r7, #0]
 800b0fe:	71fb      	strb	r3, [r7, #7]
 800b100:	4613      	mov	r3, r2
 800b102:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800b104:	2300      	movs	r3, #0
 800b106:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800b108:	2300      	movs	r3, #0
 800b10a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 800b10c:	88bb      	ldrh	r3, [r7, #4]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d048      	beq.n	800b1a4 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 800b112:	79fb      	ldrb	r3, [r7, #7]
 800b114:	009b      	lsls	r3, r3, #2
 800b116:	3301      	adds	r3, #1
 800b118:	00db      	lsls	r3, r3, #3
 800b11a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800b11e:	4618      	mov	r0, r3
 800b120:	f7ff fdf8 	bl	800ad14 <WIZCHIP_READ>
 800b124:	4603      	mov	r3, r0
 800b126:	b29b      	uxth	r3, r3
 800b128:	021b      	lsls	r3, r3, #8
 800b12a:	b29c      	uxth	r4, r3
 800b12c:	79fb      	ldrb	r3, [r7, #7]
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	3301      	adds	r3, #1
 800b132:	00db      	lsls	r3, r3, #3
 800b134:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800b138:	4618      	mov	r0, r3
 800b13a:	f7ff fdeb 	bl	800ad14 <WIZCHIP_READ>
 800b13e:	4603      	mov	r3, r0
 800b140:	b29b      	uxth	r3, r3
 800b142:	4423      	add	r3, r4
 800b144:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800b146:	89fb      	ldrh	r3, [r7, #14]
 800b148:	021b      	lsls	r3, r3, #8
 800b14a:	79fa      	ldrb	r2, [r7, #7]
 800b14c:	0092      	lsls	r2, r2, #2
 800b14e:	3202      	adds	r2, #2
 800b150:	00d2      	lsls	r2, r2, #3
 800b152:	4413      	add	r3, r2
 800b154:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 800b156:	88bb      	ldrh	r3, [r7, #4]
 800b158:	461a      	mov	r2, r3
 800b15a:	6839      	ldr	r1, [r7, #0]
 800b15c:	68b8      	ldr	r0, [r7, #8]
 800b15e:	f7ff fed3 	bl	800af08 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800b162:	89fa      	ldrh	r2, [r7, #14]
 800b164:	88bb      	ldrh	r3, [r7, #4]
 800b166:	4413      	add	r3, r2
 800b168:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800b16a:	79fb      	ldrb	r3, [r7, #7]
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	3301      	adds	r3, #1
 800b170:	00db      	lsls	r3, r3, #3
 800b172:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800b176:	461a      	mov	r2, r3
 800b178:	89fb      	ldrh	r3, [r7, #14]
 800b17a:	0a1b      	lsrs	r3, r3, #8
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	4619      	mov	r1, r3
 800b182:	4610      	mov	r0, r2
 800b184:	f7ff fe12 	bl	800adac <WIZCHIP_WRITE>
 800b188:	79fb      	ldrb	r3, [r7, #7]
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	3301      	adds	r3, #1
 800b18e:	00db      	lsls	r3, r3, #3
 800b190:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800b194:	461a      	mov	r2, r3
 800b196:	89fb      	ldrh	r3, [r7, #14]
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	4619      	mov	r1, r3
 800b19c:	4610      	mov	r0, r2
 800b19e:	f7ff fe05 	bl	800adac <WIZCHIP_WRITE>
 800b1a2:	e000      	b.n	800b1a6 <wiz_send_data+0xb2>
   if(len == 0)  return;
 800b1a4:	bf00      	nop
}
 800b1a6:	3714      	adds	r7, #20
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd90      	pop	{r4, r7, pc}

0800b1ac <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800b1ac:	b590      	push	{r4, r7, lr}
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	6039      	str	r1, [r7, #0]
 800b1b6:	71fb      	strb	r3, [r7, #7]
 800b1b8:	4613      	mov	r3, r2
 800b1ba:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 800b1c4:	88bb      	ldrh	r3, [r7, #4]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d048      	beq.n	800b25c <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 800b1ca:	79fb      	ldrb	r3, [r7, #7]
 800b1cc:	009b      	lsls	r3, r3, #2
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	00db      	lsls	r3, r3, #3
 800b1d2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7ff fd9c 	bl	800ad14 <WIZCHIP_READ>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	021b      	lsls	r3, r3, #8
 800b1e2:	b29c      	uxth	r4, r3
 800b1e4:	79fb      	ldrb	r3, [r7, #7]
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	00db      	lsls	r3, r3, #3
 800b1ec:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f7ff fd8f 	bl	800ad14 <WIZCHIP_READ>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	4423      	add	r3, r4
 800b1fc:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800b1fe:	89fb      	ldrh	r3, [r7, #14]
 800b200:	021b      	lsls	r3, r3, #8
 800b202:	79fa      	ldrb	r2, [r7, #7]
 800b204:	0092      	lsls	r2, r2, #2
 800b206:	3203      	adds	r2, #3
 800b208:	00d2      	lsls	r2, r2, #3
 800b20a:	4413      	add	r3, r2
 800b20c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800b20e:	88bb      	ldrh	r3, [r7, #4]
 800b210:	461a      	mov	r2, r3
 800b212:	6839      	ldr	r1, [r7, #0]
 800b214:	68b8      	ldr	r0, [r7, #8]
 800b216:	f7ff fe17 	bl	800ae48 <WIZCHIP_READ_BUF>
   ptr += len;
 800b21a:	89fa      	ldrh	r2, [r7, #14]
 800b21c:	88bb      	ldrh	r3, [r7, #4]
 800b21e:	4413      	add	r3, r2
 800b220:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800b222:	79fb      	ldrb	r3, [r7, #7]
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	3301      	adds	r3, #1
 800b228:	00db      	lsls	r3, r3, #3
 800b22a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800b22e:	461a      	mov	r2, r3
 800b230:	89fb      	ldrh	r3, [r7, #14]
 800b232:	0a1b      	lsrs	r3, r3, #8
 800b234:	b29b      	uxth	r3, r3
 800b236:	b2db      	uxtb	r3, r3
 800b238:	4619      	mov	r1, r3
 800b23a:	4610      	mov	r0, r2
 800b23c:	f7ff fdb6 	bl	800adac <WIZCHIP_WRITE>
 800b240:	79fb      	ldrb	r3, [r7, #7]
 800b242:	009b      	lsls	r3, r3, #2
 800b244:	3301      	adds	r3, #1
 800b246:	00db      	lsls	r3, r3, #3
 800b248:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800b24c:	461a      	mov	r2, r3
 800b24e:	89fb      	ldrh	r3, [r7, #14]
 800b250:	b2db      	uxtb	r3, r3
 800b252:	4619      	mov	r1, r3
 800b254:	4610      	mov	r0, r2
 800b256:	f7ff fda9 	bl	800adac <WIZCHIP_WRITE>
 800b25a:	e000      	b.n	800b25e <wiz_recv_data+0xb2>
   if(len == 0) return;
 800b25c:	bf00      	nop
}
 800b25e:	3714      	adds	r7, #20
 800b260:	46bd      	mov	sp, r7
 800b262:	bd90      	pop	{r4, r7, pc}

0800b264 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 800b264:	b590      	push	{r4, r7, lr}
 800b266:	b085      	sub	sp, #20
 800b268:	af00      	add	r7, sp, #0
 800b26a:	4603      	mov	r3, r0
 800b26c:	460a      	mov	r2, r1
 800b26e:	71fb      	strb	r3, [r7, #7]
 800b270:	4613      	mov	r3, r2
 800b272:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800b274:	2300      	movs	r3, #0
 800b276:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 800b278:	79fb      	ldrb	r3, [r7, #7]
 800b27a:	009b      	lsls	r3, r3, #2
 800b27c:	3301      	adds	r3, #1
 800b27e:	00db      	lsls	r3, r3, #3
 800b280:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800b284:	4618      	mov	r0, r3
 800b286:	f7ff fd45 	bl	800ad14 <WIZCHIP_READ>
 800b28a:	4603      	mov	r3, r0
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	021b      	lsls	r3, r3, #8
 800b290:	b29c      	uxth	r4, r3
 800b292:	79fb      	ldrb	r3, [r7, #7]
 800b294:	009b      	lsls	r3, r3, #2
 800b296:	3301      	adds	r3, #1
 800b298:	00db      	lsls	r3, r3, #3
 800b29a:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7ff fd38 	bl	800ad14 <WIZCHIP_READ>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	b29b      	uxth	r3, r3
 800b2a8:	4423      	add	r3, r4
 800b2aa:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 800b2ac:	89fa      	ldrh	r2, [r7, #14]
 800b2ae:	88bb      	ldrh	r3, [r7, #4]
 800b2b0:	4413      	add	r3, r2
 800b2b2:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 800b2b4:	79fb      	ldrb	r3, [r7, #7]
 800b2b6:	009b      	lsls	r3, r3, #2
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	00db      	lsls	r3, r3, #3
 800b2bc:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	89fb      	ldrh	r3, [r7, #14]
 800b2c4:	0a1b      	lsrs	r3, r3, #8
 800b2c6:	b29b      	uxth	r3, r3
 800b2c8:	b2db      	uxtb	r3, r3
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	4610      	mov	r0, r2
 800b2ce:	f7ff fd6d 	bl	800adac <WIZCHIP_WRITE>
 800b2d2:	79fb      	ldrb	r3, [r7, #7]
 800b2d4:	009b      	lsls	r3, r3, #2
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	00db      	lsls	r3, r3, #3
 800b2da:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800b2de:	461a      	mov	r2, r3
 800b2e0:	89fb      	ldrh	r3, [r7, #14]
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	4610      	mov	r0, r2
 800b2e8:	f7ff fd60 	bl	800adac <WIZCHIP_WRITE>
}
 800b2ec:	bf00      	nop
 800b2ee:	3714      	adds	r7, #20
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd90      	pop	{r4, r7, pc}

0800b2f4 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 800b2f4:	b590      	push	{r4, r7, lr}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	4604      	mov	r4, r0
 800b2fc:	4608      	mov	r0, r1
 800b2fe:	4611      	mov	r1, r2
 800b300:	461a      	mov	r2, r3
 800b302:	4623      	mov	r3, r4
 800b304:	71fb      	strb	r3, [r7, #7]
 800b306:	4603      	mov	r3, r0
 800b308:	71bb      	strb	r3, [r7, #6]
 800b30a:	460b      	mov	r3, r1
 800b30c:	80bb      	strh	r3, [r7, #4]
 800b30e:	4613      	mov	r3, r2
 800b310:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800b312:	79fb      	ldrb	r3, [r7, #7]
 800b314:	2b08      	cmp	r3, #8
 800b316:	d902      	bls.n	800b31e <socket+0x2a>
 800b318:	f04f 33ff 	mov.w	r3, #4294967295
 800b31c:	e0f2      	b.n	800b504 <socket+0x210>
	switch(protocol)
 800b31e:	79bb      	ldrb	r3, [r7, #6]
 800b320:	2b01      	cmp	r3, #1
 800b322:	d005      	beq.n	800b330 <socket+0x3c>
 800b324:	2b00      	cmp	r3, #0
 800b326:	dd11      	ble.n	800b34c <socket+0x58>
 800b328:	3b02      	subs	r3, #2
 800b32a:	2b02      	cmp	r3, #2
 800b32c:	d80e      	bhi.n	800b34c <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800b32e:	e011      	b.n	800b354 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 800b330:	f107 030c 	add.w	r3, r7, #12
 800b334:	2204      	movs	r2, #4
 800b336:	4619      	mov	r1, r3
 800b338:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800b33c:	f7ff fd84 	bl	800ae48 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d105      	bne.n	800b352 <socket+0x5e>
 800b346:	f06f 0302 	mvn.w	r3, #2
 800b34a:	e0db      	b.n	800b504 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 800b34c:	f06f 0304 	mvn.w	r3, #4
 800b350:	e0d8      	b.n	800b504 <socket+0x210>
	    break;
 800b352:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800b354:	78fb      	ldrb	r3, [r7, #3]
 800b356:	f003 0304 	and.w	r3, r3, #4
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d002      	beq.n	800b364 <socket+0x70>
 800b35e:	f06f 0305 	mvn.w	r3, #5
 800b362:	e0cf      	b.n	800b504 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 800b364:	78fb      	ldrb	r3, [r7, #3]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d025      	beq.n	800b3b6 <socket+0xc2>
	{
   	switch(protocol)
 800b36a:	79bb      	ldrb	r3, [r7, #6]
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d002      	beq.n	800b376 <socket+0x82>
 800b370:	2b02      	cmp	r3, #2
 800b372:	d008      	beq.n	800b386 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800b374:	e024      	b.n	800b3c0 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800b376:	78fb      	ldrb	r3, [r7, #3]
 800b378:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d11c      	bne.n	800b3ba <socket+0xc6>
 800b380:	f06f 0305 	mvn.w	r3, #5
 800b384:	e0be      	b.n	800b504 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 800b386:	78fb      	ldrb	r3, [r7, #3]
 800b388:	f003 0320 	and.w	r3, r3, #32
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d006      	beq.n	800b39e <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800b390:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b394:	2b00      	cmp	r3, #0
 800b396:	db02      	blt.n	800b39e <socket+0xaa>
 800b398:	f06f 0305 	mvn.w	r3, #5
 800b39c:	e0b2      	b.n	800b504 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 800b39e:	78fb      	ldrb	r3, [r7, #3]
 800b3a0:	f003 0310 	and.w	r3, r3, #16
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d00a      	beq.n	800b3be <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 800b3a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	db06      	blt.n	800b3be <socket+0xca>
 800b3b0:	f06f 0305 	mvn.w	r3, #5
 800b3b4:	e0a6      	b.n	800b504 <socket+0x210>
   	}
   }
 800b3b6:	bf00      	nop
 800b3b8:	e002      	b.n	800b3c0 <socket+0xcc>
   	      break;
 800b3ba:	bf00      	nop
 800b3bc:	e000      	b.n	800b3c0 <socket+0xcc>
   	      break;
 800b3be:	bf00      	nop
	close(sn);
 800b3c0:	79fb      	ldrb	r3, [r7, #7]
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f000 f8ac 	bl	800b520 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 800b3c8:	79fb      	ldrb	r3, [r7, #7]
 800b3ca:	009b      	lsls	r3, r3, #2
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	00db      	lsls	r3, r3, #3
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b3d6:	f023 030f 	bic.w	r3, r3, #15
 800b3da:	b25a      	sxtb	r2, r3
 800b3dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	b25b      	sxtb	r3, r3
 800b3e4:	b2db      	uxtb	r3, r3
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	f7ff fce0 	bl	800adac <WIZCHIP_WRITE>
    #endif
	if(!port)
 800b3ec:	88bb      	ldrh	r3, [r7, #4]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d110      	bne.n	800b414 <socket+0x120>
	{
	   port = sock_any_port++;
 800b3f2:	4b46      	ldr	r3, [pc, #280]	; (800b50c <socket+0x218>)
 800b3f4:	881b      	ldrh	r3, [r3, #0]
 800b3f6:	1c5a      	adds	r2, r3, #1
 800b3f8:	b291      	uxth	r1, r2
 800b3fa:	4a44      	ldr	r2, [pc, #272]	; (800b50c <socket+0x218>)
 800b3fc:	8011      	strh	r1, [r2, #0]
 800b3fe:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 800b400:	4b42      	ldr	r3, [pc, #264]	; (800b50c <socket+0x218>)
 800b402:	881b      	ldrh	r3, [r3, #0]
 800b404:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800b408:	4293      	cmp	r3, r2
 800b40a:	d103      	bne.n	800b414 <socket+0x120>
 800b40c:	4b3f      	ldr	r3, [pc, #252]	; (800b50c <socket+0x218>)
 800b40e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b412:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800b414:	79fb      	ldrb	r3, [r7, #7]
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	3301      	adds	r3, #1
 800b41a:	00db      	lsls	r3, r3, #3
 800b41c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b420:	461a      	mov	r2, r3
 800b422:	88bb      	ldrh	r3, [r7, #4]
 800b424:	0a1b      	lsrs	r3, r3, #8
 800b426:	b29b      	uxth	r3, r3
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	4619      	mov	r1, r3
 800b42c:	4610      	mov	r0, r2
 800b42e:	f7ff fcbd 	bl	800adac <WIZCHIP_WRITE>
 800b432:	79fb      	ldrb	r3, [r7, #7]
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	3301      	adds	r3, #1
 800b438:	00db      	lsls	r3, r3, #3
 800b43a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b43e:	461a      	mov	r2, r3
 800b440:	88bb      	ldrh	r3, [r7, #4]
 800b442:	b2db      	uxtb	r3, r3
 800b444:	4619      	mov	r1, r3
 800b446:	4610      	mov	r0, r2
 800b448:	f7ff fcb0 	bl	800adac <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 800b44c:	79fb      	ldrb	r3, [r7, #7]
 800b44e:	009b      	lsls	r3, r3, #2
 800b450:	3301      	adds	r3, #1
 800b452:	00db      	lsls	r3, r3, #3
 800b454:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b458:	2101      	movs	r1, #1
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7ff fca6 	bl	800adac <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800b460:	bf00      	nop
 800b462:	79fb      	ldrb	r3, [r7, #7]
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	3301      	adds	r3, #1
 800b468:	00db      	lsls	r3, r3, #3
 800b46a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b46e:	4618      	mov	r0, r3
 800b470:	f7ff fc50 	bl	800ad14 <WIZCHIP_READ>
 800b474:	4603      	mov	r3, r0
 800b476:	2b00      	cmp	r3, #0
 800b478:	d1f3      	bne.n	800b462 <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800b47a:	79fb      	ldrb	r3, [r7, #7]
 800b47c:	2201      	movs	r2, #1
 800b47e:	fa02 f303 	lsl.w	r3, r2, r3
 800b482:	b21b      	sxth	r3, r3
 800b484:	43db      	mvns	r3, r3
 800b486:	b21a      	sxth	r2, r3
 800b488:	4b21      	ldr	r3, [pc, #132]	; (800b510 <socket+0x21c>)
 800b48a:	881b      	ldrh	r3, [r3, #0]
 800b48c:	b21b      	sxth	r3, r3
 800b48e:	4013      	ands	r3, r2
 800b490:	b21b      	sxth	r3, r3
 800b492:	b29a      	uxth	r2, r3
 800b494:	4b1e      	ldr	r3, [pc, #120]	; (800b510 <socket+0x21c>)
 800b496:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800b498:	78fb      	ldrb	r3, [r7, #3]
 800b49a:	f003 0201 	and.w	r2, r3, #1
 800b49e:	79fb      	ldrb	r3, [r7, #7]
 800b4a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b4a4:	b21a      	sxth	r2, r3
 800b4a6:	4b1a      	ldr	r3, [pc, #104]	; (800b510 <socket+0x21c>)
 800b4a8:	881b      	ldrh	r3, [r3, #0]
 800b4aa:	b21b      	sxth	r3, r3
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	b21b      	sxth	r3, r3
 800b4b0:	b29a      	uxth	r2, r3
 800b4b2:	4b17      	ldr	r3, [pc, #92]	; (800b510 <socket+0x21c>)
 800b4b4:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 800b4b6:	79fb      	ldrb	r3, [r7, #7]
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	fa02 f303 	lsl.w	r3, r2, r3
 800b4be:	b21b      	sxth	r3, r3
 800b4c0:	43db      	mvns	r3, r3
 800b4c2:	b21a      	sxth	r2, r3
 800b4c4:	4b13      	ldr	r3, [pc, #76]	; (800b514 <socket+0x220>)
 800b4c6:	881b      	ldrh	r3, [r3, #0]
 800b4c8:	b21b      	sxth	r3, r3
 800b4ca:	4013      	ands	r3, r2
 800b4cc:	b21b      	sxth	r3, r3
 800b4ce:	b29a      	uxth	r2, r3
 800b4d0:	4b10      	ldr	r3, [pc, #64]	; (800b514 <socket+0x220>)
 800b4d2:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800b4d4:	79fb      	ldrb	r3, [r7, #7]
 800b4d6:	4a10      	ldr	r2, [pc, #64]	; (800b518 <socket+0x224>)
 800b4d8:	2100      	movs	r1, #0
 800b4da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 800b4de:	79fb      	ldrb	r3, [r7, #7]
 800b4e0:	4a0e      	ldr	r2, [pc, #56]	; (800b51c <socket+0x228>)
 800b4e2:	2100      	movs	r1, #0
 800b4e4:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800b4e6:	bf00      	nop
 800b4e8:	79fb      	ldrb	r3, [r7, #7]
 800b4ea:	009b      	lsls	r3, r3, #2
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	00db      	lsls	r3, r3, #3
 800b4f0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f7ff fc0d 	bl	800ad14 <WIZCHIP_READ>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d0f3      	beq.n	800b4e8 <socket+0x1f4>
   return (int8_t)sn;
 800b500:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800b504:	4618      	mov	r0, r3
 800b506:	3714      	adds	r7, #20
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd90      	pop	{r4, r7, pc}
 800b50c:	2000007c 	.word	0x2000007c
 800b510:	200038ac 	.word	0x200038ac
 800b514:	200038ae 	.word	0x200038ae
 800b518:	200038b0 	.word	0x200038b0
 800b51c:	200038c0 	.word	0x200038c0

0800b520 <close>:

int8_t close(uint8_t sn)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b082      	sub	sp, #8
 800b524:	af00      	add	r7, sp, #0
 800b526:	4603      	mov	r3, r0
 800b528:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800b52a:	79fb      	ldrb	r3, [r7, #7]
 800b52c:	2b08      	cmp	r3, #8
 800b52e:	d902      	bls.n	800b536 <close+0x16>
 800b530:	f04f 33ff 	mov.w	r3, #4294967295
 800b534:	e055      	b.n	800b5e2 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800b536:	79fb      	ldrb	r3, [r7, #7]
 800b538:	009b      	lsls	r3, r3, #2
 800b53a:	3301      	adds	r3, #1
 800b53c:	00db      	lsls	r3, r3, #3
 800b53e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b542:	2110      	movs	r1, #16
 800b544:	4618      	mov	r0, r3
 800b546:	f7ff fc31 	bl	800adac <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 800b54a:	bf00      	nop
 800b54c:	79fb      	ldrb	r3, [r7, #7]
 800b54e:	009b      	lsls	r3, r3, #2
 800b550:	3301      	adds	r3, #1
 800b552:	00db      	lsls	r3, r3, #3
 800b554:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b558:	4618      	mov	r0, r3
 800b55a:	f7ff fbdb 	bl	800ad14 <WIZCHIP_READ>
 800b55e:	4603      	mov	r3, r0
 800b560:	2b00      	cmp	r3, #0
 800b562:	d1f3      	bne.n	800b54c <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 800b564:	79fb      	ldrb	r3, [r7, #7]
 800b566:	009b      	lsls	r3, r3, #2
 800b568:	3301      	adds	r3, #1
 800b56a:	00db      	lsls	r3, r3, #3
 800b56c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b570:	211f      	movs	r1, #31
 800b572:	4618      	mov	r0, r3
 800b574:	f7ff fc1a 	bl	800adac <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 800b578:	79fb      	ldrb	r3, [r7, #7]
 800b57a:	2201      	movs	r2, #1
 800b57c:	fa02 f303 	lsl.w	r3, r2, r3
 800b580:	b21b      	sxth	r3, r3
 800b582:	43db      	mvns	r3, r3
 800b584:	b21a      	sxth	r2, r3
 800b586:	4b19      	ldr	r3, [pc, #100]	; (800b5ec <close+0xcc>)
 800b588:	881b      	ldrh	r3, [r3, #0]
 800b58a:	b21b      	sxth	r3, r3
 800b58c:	4013      	ands	r3, r2
 800b58e:	b21b      	sxth	r3, r3
 800b590:	b29a      	uxth	r2, r3
 800b592:	4b16      	ldr	r3, [pc, #88]	; (800b5ec <close+0xcc>)
 800b594:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800b596:	79fb      	ldrb	r3, [r7, #7]
 800b598:	2201      	movs	r2, #1
 800b59a:	fa02 f303 	lsl.w	r3, r2, r3
 800b59e:	b21b      	sxth	r3, r3
 800b5a0:	43db      	mvns	r3, r3
 800b5a2:	b21a      	sxth	r2, r3
 800b5a4:	4b12      	ldr	r3, [pc, #72]	; (800b5f0 <close+0xd0>)
 800b5a6:	881b      	ldrh	r3, [r3, #0]
 800b5a8:	b21b      	sxth	r3, r3
 800b5aa:	4013      	ands	r3, r2
 800b5ac:	b21b      	sxth	r3, r3
 800b5ae:	b29a      	uxth	r2, r3
 800b5b0:	4b0f      	ldr	r3, [pc, #60]	; (800b5f0 <close+0xd0>)
 800b5b2:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 800b5b4:	79fb      	ldrb	r3, [r7, #7]
 800b5b6:	4a0f      	ldr	r2, [pc, #60]	; (800b5f4 <close+0xd4>)
 800b5b8:	2100      	movs	r1, #0
 800b5ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800b5be:	79fb      	ldrb	r3, [r7, #7]
 800b5c0:	4a0d      	ldr	r2, [pc, #52]	; (800b5f8 <close+0xd8>)
 800b5c2:	2100      	movs	r1, #0
 800b5c4:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800b5c6:	bf00      	nop
 800b5c8:	79fb      	ldrb	r3, [r7, #7]
 800b5ca:	009b      	lsls	r3, r3, #2
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	00db      	lsls	r3, r3, #3
 800b5d0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7ff fb9d 	bl	800ad14 <WIZCHIP_READ>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d1f3      	bne.n	800b5c8 <close+0xa8>
	return SOCK_OK;
 800b5e0:	2301      	movs	r3, #1
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3708      	adds	r7, #8
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	200038ac 	.word	0x200038ac
 800b5f0:	200038ae 	.word	0x200038ae
 800b5f4:	200038b0 	.word	0x200038b0
 800b5f8:	200038c0 	.word	0x200038c0

0800b5fc <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	4603      	mov	r3, r0
 800b604:	6039      	str	r1, [r7, #0]
 800b606:	71fb      	strb	r3, [r7, #7]
 800b608:	4613      	mov	r3, r2
 800b60a:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 800b60c:	79fb      	ldrb	r3, [r7, #7]
 800b60e:	2b08      	cmp	r3, #8
 800b610:	d902      	bls.n	800b618 <connect+0x1c>
 800b612:	f04f 33ff 	mov.w	r3, #4294967295
 800b616:	e0c6      	b.n	800b7a6 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800b618:	79fb      	ldrb	r3, [r7, #7]
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	3301      	adds	r3, #1
 800b61e:	00db      	lsls	r3, r3, #3
 800b620:	4618      	mov	r0, r3
 800b622:	f7ff fb77 	bl	800ad14 <WIZCHIP_READ>
 800b626:	4603      	mov	r3, r0
 800b628:	f003 030f 	and.w	r3, r3, #15
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	d002      	beq.n	800b636 <connect+0x3a>
 800b630:	f06f 0304 	mvn.w	r3, #4
 800b634:	e0b7      	b.n	800b7a6 <connect+0x1aa>
   CHECK_SOCKINIT();
 800b636:	79fb      	ldrb	r3, [r7, #7]
 800b638:	009b      	lsls	r3, r3, #2
 800b63a:	3301      	adds	r3, #1
 800b63c:	00db      	lsls	r3, r3, #3
 800b63e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800b642:	4618      	mov	r0, r3
 800b644:	f7ff fb66 	bl	800ad14 <WIZCHIP_READ>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b13      	cmp	r3, #19
 800b64c:	d002      	beq.n	800b654 <connect+0x58>
 800b64e:	f06f 0302 	mvn.w	r3, #2
 800b652:	e0a8      	b.n	800b7a6 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	021b      	lsls	r3, r3, #8
 800b65e:	683a      	ldr	r2, [r7, #0]
 800b660:	3201      	adds	r2, #1
 800b662:	7812      	ldrb	r2, [r2, #0]
 800b664:	4413      	add	r3, r2
 800b666:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	021b      	lsls	r3, r3, #8
 800b66c:	683a      	ldr	r2, [r7, #0]
 800b66e:	3202      	adds	r2, #2
 800b670:	7812      	ldrb	r2, [r2, #0]
 800b672:	4413      	add	r3, r2
 800b674:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	021b      	lsls	r3, r3, #8
 800b67a:	683a      	ldr	r2, [r7, #0]
 800b67c:	3203      	adds	r2, #3
 800b67e:	7812      	ldrb	r2, [r2, #0]
 800b680:	4413      	add	r3, r2
 800b682:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b68a:	d002      	beq.n	800b692 <connect+0x96>
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d102      	bne.n	800b698 <connect+0x9c>
 800b692:	f06f 030b 	mvn.w	r3, #11
 800b696:	e086      	b.n	800b7a6 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 800b698:	88bb      	ldrh	r3, [r7, #4]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d102      	bne.n	800b6a4 <connect+0xa8>
 800b69e:	f06f 030a 	mvn.w	r3, #10
 800b6a2:	e080      	b.n	800b7a6 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 800b6a4:	79fb      	ldrb	r3, [r7, #7]
 800b6a6:	009b      	lsls	r3, r3, #2
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	00db      	lsls	r3, r3, #3
 800b6ac:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800b6b0:	2204      	movs	r2, #4
 800b6b2:	6839      	ldr	r1, [r7, #0]
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f7ff fc27 	bl	800af08 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 800b6ba:	79fb      	ldrb	r3, [r7, #7]
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	3301      	adds	r3, #1
 800b6c0:	00db      	lsls	r3, r3, #3
 800b6c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	88bb      	ldrh	r3, [r7, #4]
 800b6ca:	0a1b      	lsrs	r3, r3, #8
 800b6cc:	b29b      	uxth	r3, r3
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	4610      	mov	r0, r2
 800b6d4:	f7ff fb6a 	bl	800adac <WIZCHIP_WRITE>
 800b6d8:	79fb      	ldrb	r3, [r7, #7]
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	3301      	adds	r3, #1
 800b6de:	00db      	lsls	r3, r3, #3
 800b6e0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	88bb      	ldrh	r3, [r7, #4]
 800b6e8:	b2db      	uxtb	r3, r3
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	4610      	mov	r0, r2
 800b6ee:	f7ff fb5d 	bl	800adac <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 800b6f2:	79fb      	ldrb	r3, [r7, #7]
 800b6f4:	009b      	lsls	r3, r3, #2
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	00db      	lsls	r3, r3, #3
 800b6fa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b6fe:	2104      	movs	r1, #4
 800b700:	4618      	mov	r0, r3
 800b702:	f7ff fb53 	bl	800adac <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800b706:	bf00      	nop
 800b708:	79fb      	ldrb	r3, [r7, #7]
 800b70a:	009b      	lsls	r3, r3, #2
 800b70c:	3301      	adds	r3, #1
 800b70e:	00db      	lsls	r3, r3, #3
 800b710:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b714:	4618      	mov	r0, r3
 800b716:	f7ff fafd 	bl	800ad14 <WIZCHIP_READ>
 800b71a:	4603      	mov	r3, r0
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d1f3      	bne.n	800b708 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800b720:	4b23      	ldr	r3, [pc, #140]	; (800b7b0 <connect+0x1b4>)
 800b722:	881b      	ldrh	r3, [r3, #0]
 800b724:	461a      	mov	r2, r3
 800b726:	79fb      	ldrb	r3, [r7, #7]
 800b728:	fa42 f303 	asr.w	r3, r2, r3
 800b72c:	f003 0301 	and.w	r3, r3, #1
 800b730:	2b00      	cmp	r3, #0
 800b732:	d02b      	beq.n	800b78c <connect+0x190>
 800b734:	2300      	movs	r3, #0
 800b736:	e036      	b.n	800b7a6 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 800b738:	79fb      	ldrb	r3, [r7, #7]
 800b73a:	009b      	lsls	r3, r3, #2
 800b73c:	3301      	adds	r3, #1
 800b73e:	00db      	lsls	r3, r3, #3
 800b740:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b744:	4618      	mov	r0, r3
 800b746:	f7ff fae5 	bl	800ad14 <WIZCHIP_READ>
 800b74a:	4603      	mov	r3, r0
 800b74c:	f003 0308 	and.w	r3, r3, #8
 800b750:	2b00      	cmp	r3, #0
 800b752:	d00c      	beq.n	800b76e <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 800b754:	79fb      	ldrb	r3, [r7, #7]
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	3301      	adds	r3, #1
 800b75a:	00db      	lsls	r3, r3, #3
 800b75c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b760:	2108      	movs	r1, #8
 800b762:	4618      	mov	r0, r3
 800b764:	f7ff fb22 	bl	800adac <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 800b768:	f06f 030c 	mvn.w	r3, #12
 800b76c:	e01b      	b.n	800b7a6 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 800b76e:	79fb      	ldrb	r3, [r7, #7]
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	3301      	adds	r3, #1
 800b774:	00db      	lsls	r3, r3, #3
 800b776:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800b77a:	4618      	mov	r0, r3
 800b77c:	f7ff faca 	bl	800ad14 <WIZCHIP_READ>
 800b780:	4603      	mov	r3, r0
 800b782:	2b00      	cmp	r3, #0
 800b784:	d102      	bne.n	800b78c <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 800b786:	f06f 0303 	mvn.w	r3, #3
 800b78a:	e00c      	b.n	800b7a6 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 800b78c:	79fb      	ldrb	r3, [r7, #7]
 800b78e:	009b      	lsls	r3, r3, #2
 800b790:	3301      	adds	r3, #1
 800b792:	00db      	lsls	r3, r3, #3
 800b794:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800b798:	4618      	mov	r0, r3
 800b79a:	f7ff fabb 	bl	800ad14 <WIZCHIP_READ>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b17      	cmp	r3, #23
 800b7a2:	d1c9      	bne.n	800b738 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 800b7a4:	2301      	movs	r3, #1
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3710      	adds	r7, #16
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	200038ac 	.word	0x200038ac

0800b7b4 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800b7be:	79fb      	ldrb	r3, [r7, #7]
 800b7c0:	2b08      	cmp	r3, #8
 800b7c2:	d902      	bls.n	800b7ca <disconnect+0x16>
 800b7c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b7c8:	e062      	b.n	800b890 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800b7ca:	79fb      	ldrb	r3, [r7, #7]
 800b7cc:	009b      	lsls	r3, r3, #2
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	00db      	lsls	r3, r3, #3
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f7ff fa9e 	bl	800ad14 <WIZCHIP_READ>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	f003 030f 	and.w	r3, r3, #15
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d002      	beq.n	800b7e8 <disconnect+0x34>
 800b7e2:	f06f 0304 	mvn.w	r3, #4
 800b7e6:	e053      	b.n	800b890 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 800b7e8:	79fb      	ldrb	r3, [r7, #7]
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	3301      	adds	r3, #1
 800b7ee:	00db      	lsls	r3, r3, #3
 800b7f0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b7f4:	2108      	movs	r1, #8
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7ff fad8 	bl	800adac <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800b7fc:	bf00      	nop
 800b7fe:	79fb      	ldrb	r3, [r7, #7]
 800b800:	009b      	lsls	r3, r3, #2
 800b802:	3301      	adds	r3, #1
 800b804:	00db      	lsls	r3, r3, #3
 800b806:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7ff fa82 	bl	800ad14 <WIZCHIP_READ>
 800b810:	4603      	mov	r3, r0
 800b812:	2b00      	cmp	r3, #0
 800b814:	d1f3      	bne.n	800b7fe <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 800b816:	79fb      	ldrb	r3, [r7, #7]
 800b818:	2201      	movs	r2, #1
 800b81a:	fa02 f303 	lsl.w	r3, r2, r3
 800b81e:	b21b      	sxth	r3, r3
 800b820:	43db      	mvns	r3, r3
 800b822:	b21a      	sxth	r2, r3
 800b824:	4b1c      	ldr	r3, [pc, #112]	; (800b898 <disconnect+0xe4>)
 800b826:	881b      	ldrh	r3, [r3, #0]
 800b828:	b21b      	sxth	r3, r3
 800b82a:	4013      	ands	r3, r2
 800b82c:	b21b      	sxth	r3, r3
 800b82e:	b29a      	uxth	r2, r3
 800b830:	4b19      	ldr	r3, [pc, #100]	; (800b898 <disconnect+0xe4>)
 800b832:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800b834:	4b19      	ldr	r3, [pc, #100]	; (800b89c <disconnect+0xe8>)
 800b836:	881b      	ldrh	r3, [r3, #0]
 800b838:	461a      	mov	r2, r3
 800b83a:	79fb      	ldrb	r3, [r7, #7]
 800b83c:	fa42 f303 	asr.w	r3, r2, r3
 800b840:	f003 0301 	and.w	r3, r3, #1
 800b844:	2b00      	cmp	r3, #0
 800b846:	d016      	beq.n	800b876 <disconnect+0xc2>
 800b848:	2300      	movs	r3, #0
 800b84a:	e021      	b.n	800b890 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 800b84c:	79fb      	ldrb	r3, [r7, #7]
 800b84e:	009b      	lsls	r3, r3, #2
 800b850:	3301      	adds	r3, #1
 800b852:	00db      	lsls	r3, r3, #3
 800b854:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b858:	4618      	mov	r0, r3
 800b85a:	f7ff fa5b 	bl	800ad14 <WIZCHIP_READ>
 800b85e:	4603      	mov	r3, r0
 800b860:	f003 0308 	and.w	r3, r3, #8
 800b864:	2b00      	cmp	r3, #0
 800b866:	d006      	beq.n	800b876 <disconnect+0xc2>
	   {
	      close(sn);
 800b868:	79fb      	ldrb	r3, [r7, #7]
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7ff fe58 	bl	800b520 <close>
	      return SOCKERR_TIMEOUT;
 800b870:	f06f 030c 	mvn.w	r3, #12
 800b874:	e00c      	b.n	800b890 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 800b876:	79fb      	ldrb	r3, [r7, #7]
 800b878:	009b      	lsls	r3, r3, #2
 800b87a:	3301      	adds	r3, #1
 800b87c:	00db      	lsls	r3, r3, #3
 800b87e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800b882:	4618      	mov	r0, r3
 800b884:	f7ff fa46 	bl	800ad14 <WIZCHIP_READ>
 800b888:	4603      	mov	r3, r0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d1de      	bne.n	800b84c <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 800b88e:	2301      	movs	r3, #1
}
 800b890:	4618      	mov	r0, r3
 800b892:	3708      	adds	r7, #8
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}
 800b898:	200038ae 	.word	0x200038ae
 800b89c:	200038ac 	.word	0x200038ac

0800b8a0 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	6039      	str	r1, [r7, #0]
 800b8aa:	71fb      	strb	r3, [r7, #7]
 800b8ac:	4613      	mov	r3, r2
 800b8ae:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 800b8b8:	79fb      	ldrb	r3, [r7, #7]
 800b8ba:	2b08      	cmp	r3, #8
 800b8bc:	d902      	bls.n	800b8c4 <send+0x24>
 800b8be:	f04f 33ff 	mov.w	r3, #4294967295
 800b8c2:	e0de      	b.n	800ba82 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800b8c4:	79fb      	ldrb	r3, [r7, #7]
 800b8c6:	009b      	lsls	r3, r3, #2
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	00db      	lsls	r3, r3, #3
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f7ff fa21 	bl	800ad14 <WIZCHIP_READ>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	f003 030f 	and.w	r3, r3, #15
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d002      	beq.n	800b8e2 <send+0x42>
 800b8dc:	f06f 0304 	mvn.w	r3, #4
 800b8e0:	e0cf      	b.n	800ba82 <send+0x1e2>
   CHECK_SOCKDATA();
 800b8e2:	88bb      	ldrh	r3, [r7, #4]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d102      	bne.n	800b8ee <send+0x4e>
 800b8e8:	f06f 030d 	mvn.w	r3, #13
 800b8ec:	e0c9      	b.n	800ba82 <send+0x1e2>
   tmp = getSn_SR(sn);
 800b8ee:	79fb      	ldrb	r3, [r7, #7]
 800b8f0:	009b      	lsls	r3, r3, #2
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	00db      	lsls	r3, r3, #3
 800b8f6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7ff fa0a 	bl	800ad14 <WIZCHIP_READ>
 800b900:	4603      	mov	r3, r0
 800b902:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800b904:	7bfb      	ldrb	r3, [r7, #15]
 800b906:	2b17      	cmp	r3, #23
 800b908:	d005      	beq.n	800b916 <send+0x76>
 800b90a:	7bfb      	ldrb	r3, [r7, #15]
 800b90c:	2b1c      	cmp	r3, #28
 800b90e:	d002      	beq.n	800b916 <send+0x76>
 800b910:	f06f 0306 	mvn.w	r3, #6
 800b914:	e0b5      	b.n	800ba82 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 800b916:	4b5d      	ldr	r3, [pc, #372]	; (800ba8c <send+0x1ec>)
 800b918:	881b      	ldrh	r3, [r3, #0]
 800b91a:	461a      	mov	r2, r3
 800b91c:	79fb      	ldrb	r3, [r7, #7]
 800b91e:	fa42 f303 	asr.w	r3, r2, r3
 800b922:	f003 0301 	and.w	r3, r3, #1
 800b926:	2b00      	cmp	r3, #0
 800b928:	d039      	beq.n	800b99e <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800b92a:	79fb      	ldrb	r3, [r7, #7]
 800b92c:	009b      	lsls	r3, r3, #2
 800b92e:	3301      	adds	r3, #1
 800b930:	00db      	lsls	r3, r3, #3
 800b932:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b936:	4618      	mov	r0, r3
 800b938:	f7ff f9ec 	bl	800ad14 <WIZCHIP_READ>
 800b93c:	4603      	mov	r3, r0
 800b93e:	f003 031f 	and.w	r3, r3, #31
 800b942:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 800b944:	7bfb      	ldrb	r3, [r7, #15]
 800b946:	f003 0310 	and.w	r3, r3, #16
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d019      	beq.n	800b982 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800b94e:	79fb      	ldrb	r3, [r7, #7]
 800b950:	009b      	lsls	r3, r3, #2
 800b952:	3301      	adds	r3, #1
 800b954:	00db      	lsls	r3, r3, #3
 800b956:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b95a:	2110      	movs	r1, #16
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7ff fa25 	bl	800adac <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 800b962:	79fb      	ldrb	r3, [r7, #7]
 800b964:	2201      	movs	r2, #1
 800b966:	fa02 f303 	lsl.w	r3, r2, r3
 800b96a:	b21b      	sxth	r3, r3
 800b96c:	43db      	mvns	r3, r3
 800b96e:	b21a      	sxth	r2, r3
 800b970:	4b46      	ldr	r3, [pc, #280]	; (800ba8c <send+0x1ec>)
 800b972:	881b      	ldrh	r3, [r3, #0]
 800b974:	b21b      	sxth	r3, r3
 800b976:	4013      	ands	r3, r2
 800b978:	b21b      	sxth	r3, r3
 800b97a:	b29a      	uxth	r2, r3
 800b97c:	4b43      	ldr	r3, [pc, #268]	; (800ba8c <send+0x1ec>)
 800b97e:	801a      	strh	r2, [r3, #0]
 800b980:	e00d      	b.n	800b99e <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 800b982:	7bfb      	ldrb	r3, [r7, #15]
 800b984:	f003 0308 	and.w	r3, r3, #8
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d006      	beq.n	800b99a <send+0xfa>
      {
         close(sn);
 800b98c:	79fb      	ldrb	r3, [r7, #7]
 800b98e:	4618      	mov	r0, r3
 800b990:	f7ff fdc6 	bl	800b520 <close>
         return SOCKERR_TIMEOUT;
 800b994:	f06f 030c 	mvn.w	r3, #12
 800b998:	e073      	b.n	800ba82 <send+0x1e2>
      }
      else return SOCK_BUSY;
 800b99a:	2300      	movs	r3, #0
 800b99c:	e071      	b.n	800ba82 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 800b99e:	79fb      	ldrb	r3, [r7, #7]
 800b9a0:	009b      	lsls	r3, r3, #2
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	00db      	lsls	r3, r3, #3
 800b9a6:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7ff f9b2 	bl	800ad14 <WIZCHIP_READ>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	029b      	lsls	r3, r3, #10
 800b9b6:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800b9b8:	88ba      	ldrh	r2, [r7, #4]
 800b9ba:	89bb      	ldrh	r3, [r7, #12]
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d901      	bls.n	800b9c4 <send+0x124>
 800b9c0:	89bb      	ldrh	r3, [r7, #12]
 800b9c2:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800b9c4:	79fb      	ldrb	r3, [r7, #7]
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f7ff fafe 	bl	800afc8 <getSn_TX_FSR>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 800b9d0:	79fb      	ldrb	r3, [r7, #7]
 800b9d2:	009b      	lsls	r3, r3, #2
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	00db      	lsls	r3, r3, #3
 800b9d8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7ff f999 	bl	800ad14 <WIZCHIP_READ>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800b9e6:	7bfb      	ldrb	r3, [r7, #15]
 800b9e8:	2b17      	cmp	r3, #23
 800b9ea:	d009      	beq.n	800ba00 <send+0x160>
 800b9ec:	7bfb      	ldrb	r3, [r7, #15]
 800b9ee:	2b1c      	cmp	r3, #28
 800b9f0:	d006      	beq.n	800ba00 <send+0x160>
      {
         close(sn);
 800b9f2:	79fb      	ldrb	r3, [r7, #7]
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7ff fd93 	bl	800b520 <close>
         return SOCKERR_SOCKSTATUS;
 800b9fa:	f06f 0306 	mvn.w	r3, #6
 800b9fe:	e040      	b.n	800ba82 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800ba00:	4b23      	ldr	r3, [pc, #140]	; (800ba90 <send+0x1f0>)
 800ba02:	881b      	ldrh	r3, [r3, #0]
 800ba04:	461a      	mov	r2, r3
 800ba06:	79fb      	ldrb	r3, [r7, #7]
 800ba08:	fa42 f303 	asr.w	r3, r2, r3
 800ba0c:	f003 0301 	and.w	r3, r3, #1
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d005      	beq.n	800ba20 <send+0x180>
 800ba14:	88ba      	ldrh	r2, [r7, #4]
 800ba16:	89bb      	ldrh	r3, [r7, #12]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d901      	bls.n	800ba20 <send+0x180>
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	e030      	b.n	800ba82 <send+0x1e2>
      if(len <= freesize) break;
 800ba20:	88ba      	ldrh	r2, [r7, #4]
 800ba22:	89bb      	ldrh	r3, [r7, #12]
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d900      	bls.n	800ba2a <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 800ba28:	e7cc      	b.n	800b9c4 <send+0x124>
      if(len <= freesize) break;
 800ba2a:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 800ba2c:	88ba      	ldrh	r2, [r7, #4]
 800ba2e:	79fb      	ldrb	r3, [r7, #7]
 800ba30:	6839      	ldr	r1, [r7, #0]
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7ff fb5e 	bl	800b0f4 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 800ba38:	79fb      	ldrb	r3, [r7, #7]
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	3301      	adds	r3, #1
 800ba3e:	00db      	lsls	r3, r3, #3
 800ba40:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ba44:	2120      	movs	r1, #32
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7ff f9b0 	bl	800adac <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 800ba4c:	bf00      	nop
 800ba4e:	79fb      	ldrb	r3, [r7, #7]
 800ba50:	009b      	lsls	r3, r3, #2
 800ba52:	3301      	adds	r3, #1
 800ba54:	00db      	lsls	r3, r3, #3
 800ba56:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7ff f95a 	bl	800ad14 <WIZCHIP_READ>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d1f3      	bne.n	800ba4e <send+0x1ae>
   sock_is_sending |= (1 << sn);
 800ba66:	79fb      	ldrb	r3, [r7, #7]
 800ba68:	2201      	movs	r2, #1
 800ba6a:	fa02 f303 	lsl.w	r3, r2, r3
 800ba6e:	b21a      	sxth	r2, r3
 800ba70:	4b06      	ldr	r3, [pc, #24]	; (800ba8c <send+0x1ec>)
 800ba72:	881b      	ldrh	r3, [r3, #0]
 800ba74:	b21b      	sxth	r3, r3
 800ba76:	4313      	orrs	r3, r2
 800ba78:	b21b      	sxth	r3, r3
 800ba7a:	b29a      	uxth	r2, r3
 800ba7c:	4b03      	ldr	r3, [pc, #12]	; (800ba8c <send+0x1ec>)
 800ba7e:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800ba80:	88bb      	ldrh	r3, [r7, #4]
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3710      	adds	r7, #16
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	200038ae 	.word	0x200038ae
 800ba90:	200038ac 	.word	0x200038ac

0800ba94 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800ba94:	b590      	push	{r4, r7, lr}
 800ba96:	b085      	sub	sp, #20
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	6039      	str	r1, [r7, #0]
 800ba9e:	71fb      	strb	r3, [r7, #7]
 800baa0:	4613      	mov	r3, r2
 800baa2:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 800baa4:	2300      	movs	r3, #0
 800baa6:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 800baa8:	2300      	movs	r3, #0
 800baaa:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 800baac:	79fb      	ldrb	r3, [r7, #7]
 800baae:	2b08      	cmp	r3, #8
 800bab0:	d902      	bls.n	800bab8 <recv+0x24>
 800bab2:	f04f 33ff 	mov.w	r3, #4294967295
 800bab6:	e09c      	b.n	800bbf2 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800bab8:	79fb      	ldrb	r3, [r7, #7]
 800baba:	009b      	lsls	r3, r3, #2
 800babc:	3301      	adds	r3, #1
 800babe:	00db      	lsls	r3, r3, #3
 800bac0:	4618      	mov	r0, r3
 800bac2:	f7ff f927 	bl	800ad14 <WIZCHIP_READ>
 800bac6:	4603      	mov	r3, r0
 800bac8:	f003 030f 	and.w	r3, r3, #15
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d002      	beq.n	800bad6 <recv+0x42>
 800bad0:	f06f 0304 	mvn.w	r3, #4
 800bad4:	e08d      	b.n	800bbf2 <recv+0x15e>
   CHECK_SOCKDATA();
 800bad6:	88bb      	ldrh	r3, [r7, #4]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d102      	bne.n	800bae2 <recv+0x4e>
 800badc:	f06f 030d 	mvn.w	r3, #13
 800bae0:	e087      	b.n	800bbf2 <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 800bae2:	79fb      	ldrb	r3, [r7, #7]
 800bae4:	009b      	lsls	r3, r3, #2
 800bae6:	3301      	adds	r3, #1
 800bae8:	00db      	lsls	r3, r3, #3
 800baea:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800baee:	4618      	mov	r0, r3
 800baf0:	f7ff f910 	bl	800ad14 <WIZCHIP_READ>
 800baf4:	4603      	mov	r3, r0
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	029b      	lsls	r3, r3, #10
 800bafa:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 800bafc:	89ba      	ldrh	r2, [r7, #12]
 800bafe:	88bb      	ldrh	r3, [r7, #4]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d201      	bcs.n	800bb08 <recv+0x74>
 800bb04:	89bb      	ldrh	r3, [r7, #12]
 800bb06:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 800bb08:	79fb      	ldrb	r3, [r7, #7]
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7ff faa7 	bl	800b05e <getSn_RX_RSR>
 800bb10:	4603      	mov	r3, r0
 800bb12:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 800bb14:	79fb      	ldrb	r3, [r7, #7]
 800bb16:	009b      	lsls	r3, r3, #2
 800bb18:	3301      	adds	r3, #1
 800bb1a:	00db      	lsls	r3, r3, #3
 800bb1c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800bb20:	4618      	mov	r0, r3
 800bb22:	f7ff f8f7 	bl	800ad14 <WIZCHIP_READ>
 800bb26:	4603      	mov	r3, r0
 800bb28:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 800bb2a:	7bfb      	ldrb	r3, [r7, #15]
 800bb2c:	2b17      	cmp	r3, #23
 800bb2e:	d026      	beq.n	800bb7e <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 800bb30:	7bfb      	ldrb	r3, [r7, #15]
 800bb32:	2b1c      	cmp	r3, #28
 800bb34:	d11c      	bne.n	800bb70 <recv+0xdc>
            {
               if(recvsize != 0) break;
 800bb36:	89bb      	ldrh	r3, [r7, #12]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d133      	bne.n	800bba4 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 800bb3c:	79fb      	ldrb	r3, [r7, #7]
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7ff fa42 	bl	800afc8 <getSn_TX_FSR>
 800bb44:	4603      	mov	r3, r0
 800bb46:	461c      	mov	r4, r3
 800bb48:	79fb      	ldrb	r3, [r7, #7]
 800bb4a:	009b      	lsls	r3, r3, #2
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	00db      	lsls	r3, r3, #3
 800bb50:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800bb54:	4618      	mov	r0, r3
 800bb56:	f7ff f8dd 	bl	800ad14 <WIZCHIP_READ>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	029b      	lsls	r3, r3, #10
 800bb5e:	429c      	cmp	r4, r3
 800bb60:	d10d      	bne.n	800bb7e <recv+0xea>
               {
                  close(sn);
 800bb62:	79fb      	ldrb	r3, [r7, #7]
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7ff fcdb 	bl	800b520 <close>
                  return SOCKERR_SOCKSTATUS;
 800bb6a:	f06f 0306 	mvn.w	r3, #6
 800bb6e:	e040      	b.n	800bbf2 <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 800bb70:	79fb      	ldrb	r3, [r7, #7]
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7ff fcd4 	bl	800b520 <close>
               return SOCKERR_SOCKSTATUS;
 800bb78:	f06f 0306 	mvn.w	r3, #6
 800bb7c:	e039      	b.n	800bbf2 <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 800bb7e:	4b1f      	ldr	r3, [pc, #124]	; (800bbfc <recv+0x168>)
 800bb80:	881b      	ldrh	r3, [r3, #0]
 800bb82:	461a      	mov	r2, r3
 800bb84:	79fb      	ldrb	r3, [r7, #7]
 800bb86:	fa42 f303 	asr.w	r3, r2, r3
 800bb8a:	f003 0301 	and.w	r3, r3, #1
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d004      	beq.n	800bb9c <recv+0x108>
 800bb92:	89bb      	ldrh	r3, [r7, #12]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d101      	bne.n	800bb9c <recv+0x108>
 800bb98:	2300      	movs	r3, #0
 800bb9a:	e02a      	b.n	800bbf2 <recv+0x15e>
         if(recvsize != 0) break;
 800bb9c:	89bb      	ldrh	r3, [r7, #12]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d102      	bne.n	800bba8 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 800bba2:	e7b1      	b.n	800bb08 <recv+0x74>
               if(recvsize != 0) break;
 800bba4:	bf00      	nop
 800bba6:	e000      	b.n	800bbaa <recv+0x116>
         if(recvsize != 0) break;
 800bba8:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 800bbaa:	89ba      	ldrh	r2, [r7, #12]
 800bbac:	88bb      	ldrh	r3, [r7, #4]
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	d201      	bcs.n	800bbb6 <recv+0x122>
 800bbb2:	89bb      	ldrh	r3, [r7, #12]
 800bbb4:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 800bbb6:	88ba      	ldrh	r2, [r7, #4]
 800bbb8:	79fb      	ldrb	r3, [r7, #7]
 800bbba:	6839      	ldr	r1, [r7, #0]
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7ff faf5 	bl	800b1ac <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800bbc2:	79fb      	ldrb	r3, [r7, #7]
 800bbc4:	009b      	lsls	r3, r3, #2
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	00db      	lsls	r3, r3, #3
 800bbca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800bbce:	2140      	movs	r1, #64	; 0x40
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f7ff f8eb 	bl	800adac <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800bbd6:	bf00      	nop
 800bbd8:	79fb      	ldrb	r3, [r7, #7]
 800bbda:	009b      	lsls	r3, r3, #2
 800bbdc:	3301      	adds	r3, #1
 800bbde:	00db      	lsls	r3, r3, #3
 800bbe0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f7ff f895 	bl	800ad14 <WIZCHIP_READ>
 800bbea:	4603      	mov	r3, r0
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d1f3      	bne.n	800bbd8 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800bbf0:	88bb      	ldrh	r3, [r7, #4]
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3714      	adds	r7, #20
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd90      	pop	{r4, r7, pc}
 800bbfa:	bf00      	nop
 800bbfc:	200038ac 	.word	0x200038ac

0800bc00 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b086      	sub	sp, #24
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	60b9      	str	r1, [r7, #8]
 800bc08:	607b      	str	r3, [r7, #4]
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	73fb      	strb	r3, [r7, #15]
 800bc0e:	4613      	mov	r3, r2
 800bc10:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 800bc12:	2300      	movs	r3, #0
 800bc14:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 800bc16:	2300      	movs	r3, #0
 800bc18:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 800bc1a:	7bfb      	ldrb	r3, [r7, #15]
 800bc1c:	2b08      	cmp	r3, #8
 800bc1e:	d902      	bls.n	800bc26 <sendto+0x26>
 800bc20:	f04f 33ff 	mov.w	r3, #4294967295
 800bc24:	e11b      	b.n	800be5e <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 800bc26:	7bfb      	ldrb	r3, [r7, #15]
 800bc28:	009b      	lsls	r3, r3, #2
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	00db      	lsls	r3, r3, #3
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7ff f870 	bl	800ad14 <WIZCHIP_READ>
 800bc34:	4603      	mov	r3, r0
 800bc36:	f003 030f 	and.w	r3, r3, #15
 800bc3a:	3b02      	subs	r3, #2
 800bc3c:	2b02      	cmp	r3, #2
 800bc3e:	d902      	bls.n	800bc46 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 800bc40:	f06f 0304 	mvn.w	r3, #4
 800bc44:	e10b      	b.n	800be5e <sendto+0x25e>
         break;
 800bc46:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800bc48:	89bb      	ldrh	r3, [r7, #12]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d102      	bne.n	800bc54 <sendto+0x54>
 800bc4e:	f06f 030d 	mvn.w	r3, #13
 800bc52:	e104      	b.n	800be5e <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	021b      	lsls	r3, r3, #8
 800bc5e:	687a      	ldr	r2, [r7, #4]
 800bc60:	3201      	adds	r2, #1
 800bc62:	7812      	ldrb	r2, [r2, #0]
 800bc64:	4413      	add	r3, r2
 800bc66:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	021b      	lsls	r3, r3, #8
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	3202      	adds	r2, #2
 800bc70:	7812      	ldrb	r2, [r2, #0]
 800bc72:	4413      	add	r3, r2
 800bc74:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	021b      	lsls	r3, r3, #8
 800bc7a:	687a      	ldr	r2, [r7, #4]
 800bc7c:	3203      	adds	r2, #3
 800bc7e:	7812      	ldrb	r2, [r2, #0]
 800bc80:	4413      	add	r3, r2
 800bc82:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d10e      	bne.n	800bca8 <sendto+0xa8>
 800bc8a:	7bfb      	ldrb	r3, [r7, #15]
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	3301      	adds	r3, #1
 800bc90:	00db      	lsls	r3, r3, #3
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7ff f83e 	bl	800ad14 <WIZCHIP_READ>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	f003 0304 	and.w	r3, r3, #4
 800bc9e:	2b04      	cmp	r3, #4
 800bca0:	d002      	beq.n	800bca8 <sendto+0xa8>
 800bca2:	f06f 030b 	mvn.w	r3, #11
 800bca6:	e0da      	b.n	800be5e <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 800bca8:	8c3b      	ldrh	r3, [r7, #32]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d10e      	bne.n	800bccc <sendto+0xcc>
 800bcae:	7bfb      	ldrb	r3, [r7, #15]
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	00db      	lsls	r3, r3, #3
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f7ff f82c 	bl	800ad14 <WIZCHIP_READ>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	f003 0304 	and.w	r3, r3, #4
 800bcc2:	2b04      	cmp	r3, #4
 800bcc4:	d002      	beq.n	800bccc <sendto+0xcc>
 800bcc6:	f06f 030a 	mvn.w	r3, #10
 800bcca:	e0c8      	b.n	800be5e <sendto+0x25e>
   tmp = getSn_SR(sn);
 800bccc:	7bfb      	ldrb	r3, [r7, #15]
 800bcce:	009b      	lsls	r3, r3, #2
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	00db      	lsls	r3, r3, #3
 800bcd4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7ff f81b 	bl	800ad14 <WIZCHIP_READ>
 800bcde:	4603      	mov	r3, r0
 800bce0:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 800bce2:	7dfb      	ldrb	r3, [r7, #23]
 800bce4:	2b42      	cmp	r3, #66	; 0x42
 800bce6:	d008      	beq.n	800bcfa <sendto+0xfa>
 800bce8:	7dfb      	ldrb	r3, [r7, #23]
 800bcea:	2b22      	cmp	r3, #34	; 0x22
 800bcec:	d005      	beq.n	800bcfa <sendto+0xfa>
 800bcee:	7dfb      	ldrb	r3, [r7, #23]
 800bcf0:	2b32      	cmp	r3, #50	; 0x32
 800bcf2:	d002      	beq.n	800bcfa <sendto+0xfa>
 800bcf4:	f06f 0306 	mvn.w	r3, #6
 800bcf8:	e0b1      	b.n	800be5e <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 800bcfa:	7bfb      	ldrb	r3, [r7, #15]
 800bcfc:	009b      	lsls	r3, r3, #2
 800bcfe:	3301      	adds	r3, #1
 800bd00:	00db      	lsls	r3, r3, #3
 800bd02:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800bd06:	2204      	movs	r2, #4
 800bd08:	6879      	ldr	r1, [r7, #4]
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7ff f8fc 	bl	800af08 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 800bd10:	7bfb      	ldrb	r3, [r7, #15]
 800bd12:	009b      	lsls	r3, r3, #2
 800bd14:	3301      	adds	r3, #1
 800bd16:	00db      	lsls	r3, r3, #3
 800bd18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd1c:	461a      	mov	r2, r3
 800bd1e:	8c3b      	ldrh	r3, [r7, #32]
 800bd20:	0a1b      	lsrs	r3, r3, #8
 800bd22:	b29b      	uxth	r3, r3
 800bd24:	b2db      	uxtb	r3, r3
 800bd26:	4619      	mov	r1, r3
 800bd28:	4610      	mov	r0, r2
 800bd2a:	f7ff f83f 	bl	800adac <WIZCHIP_WRITE>
 800bd2e:	7bfb      	ldrb	r3, [r7, #15]
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	3301      	adds	r3, #1
 800bd34:	00db      	lsls	r3, r3, #3
 800bd36:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	8c3b      	ldrh	r3, [r7, #32]
 800bd3e:	b2db      	uxtb	r3, r3
 800bd40:	4619      	mov	r1, r3
 800bd42:	4610      	mov	r0, r2
 800bd44:	f7ff f832 	bl	800adac <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 800bd48:	7bfb      	ldrb	r3, [r7, #15]
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	3301      	adds	r3, #1
 800bd4e:	00db      	lsls	r3, r3, #3
 800bd50:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7fe ffdd 	bl	800ad14 <WIZCHIP_READ>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	029b      	lsls	r3, r3, #10
 800bd60:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800bd62:	89ba      	ldrh	r2, [r7, #12]
 800bd64:	8abb      	ldrh	r3, [r7, #20]
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d901      	bls.n	800bd6e <sendto+0x16e>
 800bd6a:	8abb      	ldrh	r3, [r7, #20]
 800bd6c:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800bd6e:	7bfb      	ldrb	r3, [r7, #15]
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7ff f929 	bl	800afc8 <getSn_TX_FSR>
 800bd76:	4603      	mov	r3, r0
 800bd78:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800bd7a:	7bfb      	ldrb	r3, [r7, #15]
 800bd7c:	009b      	lsls	r3, r3, #2
 800bd7e:	3301      	adds	r3, #1
 800bd80:	00db      	lsls	r3, r3, #3
 800bd82:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7fe ffc4 	bl	800ad14 <WIZCHIP_READ>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d102      	bne.n	800bd98 <sendto+0x198>
 800bd92:	f06f 0303 	mvn.w	r3, #3
 800bd96:	e062      	b.n	800be5e <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800bd98:	4b33      	ldr	r3, [pc, #204]	; (800be68 <sendto+0x268>)
 800bd9a:	881b      	ldrh	r3, [r3, #0]
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	7bfb      	ldrb	r3, [r7, #15]
 800bda0:	fa42 f303 	asr.w	r3, r2, r3
 800bda4:	f003 0301 	and.w	r3, r3, #1
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d005      	beq.n	800bdb8 <sendto+0x1b8>
 800bdac:	89ba      	ldrh	r2, [r7, #12]
 800bdae:	8abb      	ldrh	r3, [r7, #20]
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d901      	bls.n	800bdb8 <sendto+0x1b8>
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	e052      	b.n	800be5e <sendto+0x25e>
      if(len <= freesize) break;
 800bdb8:	89ba      	ldrh	r2, [r7, #12]
 800bdba:	8abb      	ldrh	r3, [r7, #20]
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d900      	bls.n	800bdc2 <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 800bdc0:	e7d5      	b.n	800bd6e <sendto+0x16e>
      if(len <= freesize) break;
 800bdc2:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 800bdc4:	89ba      	ldrh	r2, [r7, #12]
 800bdc6:	7bfb      	ldrb	r3, [r7, #15]
 800bdc8:	68b9      	ldr	r1, [r7, #8]
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7ff f992 	bl	800b0f4 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 800bdd0:	7bfb      	ldrb	r3, [r7, #15]
 800bdd2:	009b      	lsls	r3, r3, #2
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	00db      	lsls	r3, r3, #3
 800bdd8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800bddc:	2120      	movs	r1, #32
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7fe ffe4 	bl	800adac <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800bde4:	bf00      	nop
 800bde6:	7bfb      	ldrb	r3, [r7, #15]
 800bde8:	009b      	lsls	r3, r3, #2
 800bdea:	3301      	adds	r3, #1
 800bdec:	00db      	lsls	r3, r3, #3
 800bdee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f7fe ff8e 	bl	800ad14 <WIZCHIP_READ>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d1f3      	bne.n	800bde6 <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 800bdfe:	7bfb      	ldrb	r3, [r7, #15]
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	3301      	adds	r3, #1
 800be04:	00db      	lsls	r3, r3, #3
 800be06:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7fe ff82 	bl	800ad14 <WIZCHIP_READ>
 800be10:	4603      	mov	r3, r0
 800be12:	f003 031f 	and.w	r3, r3, #31
 800be16:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 800be18:	7dfb      	ldrb	r3, [r7, #23]
 800be1a:	f003 0310 	and.w	r3, r3, #16
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d00c      	beq.n	800be3c <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800be22:	7bfb      	ldrb	r3, [r7, #15]
 800be24:	009b      	lsls	r3, r3, #2
 800be26:	3301      	adds	r3, #1
 800be28:	00db      	lsls	r3, r3, #3
 800be2a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800be2e:	2110      	movs	r1, #16
 800be30:	4618      	mov	r0, r3
 800be32:	f7fe ffbb 	bl	800adac <WIZCHIP_WRITE>
         break;
 800be36:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800be38:	89bb      	ldrh	r3, [r7, #12]
 800be3a:	e010      	b.n	800be5e <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 800be3c:	7dfb      	ldrb	r3, [r7, #23]
 800be3e:	f003 0308 	and.w	r3, r3, #8
 800be42:	2b00      	cmp	r3, #0
 800be44:	d0db      	beq.n	800bdfe <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 800be46:	7bfb      	ldrb	r3, [r7, #15]
 800be48:	009b      	lsls	r3, r3, #2
 800be4a:	3301      	adds	r3, #1
 800be4c:	00db      	lsls	r3, r3, #3
 800be4e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800be52:	2108      	movs	r1, #8
 800be54:	4618      	mov	r0, r3
 800be56:	f7fe ffa9 	bl	800adac <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 800be5a:	f06f 030c 	mvn.w	r3, #12
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3718      	adds	r7, #24
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop
 800be68:	200038ac 	.word	0x200038ac

0800be6c <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b088      	sub	sp, #32
 800be70:	af00      	add	r7, sp, #0
 800be72:	60b9      	str	r1, [r7, #8]
 800be74:	607b      	str	r3, [r7, #4]
 800be76:	4603      	mov	r3, r0
 800be78:	73fb      	strb	r3, [r7, #15]
 800be7a:	4613      	mov	r3, r2
 800be7c:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 800be7e:	2300      	movs	r3, #0
 800be80:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 800be82:	7bfb      	ldrb	r3, [r7, #15]
 800be84:	2b08      	cmp	r3, #8
 800be86:	d902      	bls.n	800be8e <recvfrom+0x22>
 800be88:	f04f 33ff 	mov.w	r3, #4294967295
 800be8c:	e1d4      	b.n	800c238 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 800be8e:	7bfb      	ldrb	r3, [r7, #15]
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	3301      	adds	r3, #1
 800be94:	00db      	lsls	r3, r3, #3
 800be96:	4618      	mov	r0, r3
 800be98:	f7fe ff3c 	bl	800ad14 <WIZCHIP_READ>
 800be9c:	4603      	mov	r3, r0
 800be9e:	777b      	strb	r3, [r7, #29]
 800bea0:	7f7b      	ldrb	r3, [r7, #29]
 800bea2:	f003 030f 	and.w	r3, r3, #15
 800bea6:	3b02      	subs	r3, #2
 800bea8:	2b02      	cmp	r3, #2
 800beaa:	d902      	bls.n	800beb2 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 800beac:	f06f 0304 	mvn.w	r3, #4
 800beb0:	e1c2      	b.n	800c238 <recvfrom+0x3cc>
         break;
 800beb2:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800beb4:	89bb      	ldrh	r3, [r7, #12]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d102      	bne.n	800bec0 <recvfrom+0x54>
 800beba:	f06f 030d 	mvn.w	r3, #13
 800bebe:	e1bb      	b.n	800c238 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 800bec0:	7bfb      	ldrb	r3, [r7, #15]
 800bec2:	4a88      	ldr	r2, [pc, #544]	; (800c0e4 <recvfrom+0x278>)
 800bec4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d128      	bne.n	800bf1e <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 800becc:	7bfb      	ldrb	r3, [r7, #15]
 800bece:	4618      	mov	r0, r3
 800bed0:	f7ff f8c5 	bl	800b05e <getSn_RX_RSR>
 800bed4:	4603      	mov	r3, r0
 800bed6:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800bed8:	7bfb      	ldrb	r3, [r7, #15]
 800beda:	009b      	lsls	r3, r3, #2
 800bedc:	3301      	adds	r3, #1
 800bede:	00db      	lsls	r3, r3, #3
 800bee0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800bee4:	4618      	mov	r0, r3
 800bee6:	f7fe ff15 	bl	800ad14 <WIZCHIP_READ>
 800beea:	4603      	mov	r3, r0
 800beec:	2b00      	cmp	r3, #0
 800beee:	d102      	bne.n	800bef6 <recvfrom+0x8a>
 800bef0:	f06f 0303 	mvn.w	r3, #3
 800bef4:	e1a0      	b.n	800c238 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 800bef6:	4b7c      	ldr	r3, [pc, #496]	; (800c0e8 <recvfrom+0x27c>)
 800bef8:	881b      	ldrh	r3, [r3, #0]
 800befa:	461a      	mov	r2, r3
 800befc:	7bfb      	ldrb	r3, [r7, #15]
 800befe:	fa42 f303 	asr.w	r3, r2, r3
 800bf02:	f003 0301 	and.w	r3, r3, #1
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d004      	beq.n	800bf14 <recvfrom+0xa8>
 800bf0a:	8bfb      	ldrh	r3, [r7, #30]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d101      	bne.n	800bf14 <recvfrom+0xa8>
 800bf10:	2300      	movs	r3, #0
 800bf12:	e191      	b.n	800c238 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 800bf14:	8bfb      	ldrh	r3, [r7, #30]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d100      	bne.n	800bf1c <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 800bf1a:	e7d7      	b.n	800becc <recvfrom+0x60>
         if(pack_len != 0) break;
 800bf1c:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 800bf1e:	7f7b      	ldrb	r3, [r7, #29]
 800bf20:	f003 0307 	and.w	r3, r3, #7
 800bf24:	2b04      	cmp	r3, #4
 800bf26:	d079      	beq.n	800c01c <recvfrom+0x1b0>
 800bf28:	2b04      	cmp	r3, #4
 800bf2a:	f300 8142 	bgt.w	800c1b2 <recvfrom+0x346>
 800bf2e:	2b02      	cmp	r3, #2
 800bf30:	d003      	beq.n	800bf3a <recvfrom+0xce>
 800bf32:	2b03      	cmp	r3, #3
 800bf34:	f000 80dc 	beq.w	800c0f0 <recvfrom+0x284>
 800bf38:	e13b      	b.n	800c1b2 <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 800bf3a:	7bfb      	ldrb	r3, [r7, #15]
 800bf3c:	4a69      	ldr	r2, [pc, #420]	; (800c0e4 <recvfrom+0x278>)
 800bf3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d152      	bne.n	800bfec <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 800bf46:	f107 0114 	add.w	r1, r7, #20
 800bf4a:	7bfb      	ldrb	r3, [r7, #15]
 800bf4c:	2208      	movs	r2, #8
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7ff f92c 	bl	800b1ac <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800bf54:	7bfb      	ldrb	r3, [r7, #15]
 800bf56:	009b      	lsls	r3, r3, #2
 800bf58:	3301      	adds	r3, #1
 800bf5a:	00db      	lsls	r3, r3, #3
 800bf5c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800bf60:	2140      	movs	r1, #64	; 0x40
 800bf62:	4618      	mov	r0, r3
 800bf64:	f7fe ff22 	bl	800adac <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800bf68:	bf00      	nop
 800bf6a:	7bfb      	ldrb	r3, [r7, #15]
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	3301      	adds	r3, #1
 800bf70:	00db      	lsls	r3, r3, #3
 800bf72:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800bf76:	4618      	mov	r0, r3
 800bf78:	f7fe fecc 	bl	800ad14 <WIZCHIP_READ>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d1f3      	bne.n	800bf6a <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 800bf82:	7d3a      	ldrb	r2, [r7, #20]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	7d7a      	ldrb	r2, [r7, #21]
 800bf8e:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	3302      	adds	r3, #2
 800bf94:	7dba      	ldrb	r2, [r7, #22]
 800bf96:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	3303      	adds	r3, #3
 800bf9c:	7dfa      	ldrb	r2, [r7, #23]
 800bf9e:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 800bfa0:	7e3b      	ldrb	r3, [r7, #24]
 800bfa2:	b29a      	uxth	r2, r3
 800bfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa6:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 800bfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfaa:	881b      	ldrh	r3, [r3, #0]
 800bfac:	021b      	lsls	r3, r3, #8
 800bfae:	b29a      	uxth	r2, r3
 800bfb0:	7e7b      	ldrb	r3, [r7, #25]
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	4413      	add	r3, r2
 800bfb6:	b29a      	uxth	r2, r3
 800bfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfba:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 800bfbc:	7eba      	ldrb	r2, [r7, #26]
 800bfbe:	7bfb      	ldrb	r3, [r7, #15]
 800bfc0:	b291      	uxth	r1, r2
 800bfc2:	4a48      	ldr	r2, [pc, #288]	; (800c0e4 <recvfrom+0x278>)
 800bfc4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 800bfc8:	7bfb      	ldrb	r3, [r7, #15]
 800bfca:	4a46      	ldr	r2, [pc, #280]	; (800c0e4 <recvfrom+0x278>)
 800bfcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bfd0:	021b      	lsls	r3, r3, #8
 800bfd2:	b299      	uxth	r1, r3
 800bfd4:	7efb      	ldrb	r3, [r7, #27]
 800bfd6:	b29a      	uxth	r2, r3
 800bfd8:	7bfb      	ldrb	r3, [r7, #15]
 800bfda:	440a      	add	r2, r1
 800bfdc:	b291      	uxth	r1, r2
 800bfde:	4a41      	ldr	r2, [pc, #260]	; (800c0e4 <recvfrom+0x278>)
 800bfe0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 800bfe4:	7bfb      	ldrb	r3, [r7, #15]
 800bfe6:	4a41      	ldr	r2, [pc, #260]	; (800c0ec <recvfrom+0x280>)
 800bfe8:	2180      	movs	r1, #128	; 0x80
 800bfea:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800bfec:	7bfb      	ldrb	r3, [r7, #15]
 800bfee:	4a3d      	ldr	r2, [pc, #244]	; (800c0e4 <recvfrom+0x278>)
 800bff0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bff4:	89ba      	ldrh	r2, [r7, #12]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d202      	bcs.n	800c000 <recvfrom+0x194>
 800bffa:	89bb      	ldrh	r3, [r7, #12]
 800bffc:	83fb      	strh	r3, [r7, #30]
 800bffe:	e004      	b.n	800c00a <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 800c000:	7bfb      	ldrb	r3, [r7, #15]
 800c002:	4a38      	ldr	r2, [pc, #224]	; (800c0e4 <recvfrom+0x278>)
 800c004:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c008:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 800c00a:	8bfb      	ldrh	r3, [r7, #30]
 800c00c:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 800c00e:	8bfa      	ldrh	r2, [r7, #30]
 800c010:	7bfb      	ldrb	r3, [r7, #15]
 800c012:	68b9      	ldr	r1, [r7, #8]
 800c014:	4618      	mov	r0, r3
 800c016:	f7ff f8c9 	bl	800b1ac <wiz_recv_data>
			break;
 800c01a:	e0d6      	b.n	800c1ca <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 800c01c:	7bfb      	ldrb	r3, [r7, #15]
 800c01e:	4a31      	ldr	r2, [pc, #196]	; (800c0e4 <recvfrom+0x278>)
 800c020:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d146      	bne.n	800c0b6 <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 800c028:	f107 0114 	add.w	r1, r7, #20
 800c02c:	7bfb      	ldrb	r3, [r7, #15]
 800c02e:	2202      	movs	r2, #2
 800c030:	4618      	mov	r0, r3
 800c032:	f7ff f8bb 	bl	800b1ac <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800c036:	7bfb      	ldrb	r3, [r7, #15]
 800c038:	009b      	lsls	r3, r3, #2
 800c03a:	3301      	adds	r3, #1
 800c03c:	00db      	lsls	r3, r3, #3
 800c03e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c042:	2140      	movs	r1, #64	; 0x40
 800c044:	4618      	mov	r0, r3
 800c046:	f7fe feb1 	bl	800adac <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800c04a:	bf00      	nop
 800c04c:	7bfb      	ldrb	r3, [r7, #15]
 800c04e:	009b      	lsls	r3, r3, #2
 800c050:	3301      	adds	r3, #1
 800c052:	00db      	lsls	r3, r3, #3
 800c054:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c058:	4618      	mov	r0, r3
 800c05a:	f7fe fe5b 	bl	800ad14 <WIZCHIP_READ>
 800c05e:	4603      	mov	r3, r0
 800c060:	2b00      	cmp	r3, #0
 800c062:	d1f3      	bne.n	800c04c <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 800c064:	7d3a      	ldrb	r2, [r7, #20]
 800c066:	7bfb      	ldrb	r3, [r7, #15]
 800c068:	b291      	uxth	r1, r2
 800c06a:	4a1e      	ldr	r2, [pc, #120]	; (800c0e4 <recvfrom+0x278>)
 800c06c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 800c070:	7bfb      	ldrb	r3, [r7, #15]
 800c072:	4a1c      	ldr	r2, [pc, #112]	; (800c0e4 <recvfrom+0x278>)
 800c074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c078:	021b      	lsls	r3, r3, #8
 800c07a:	b29a      	uxth	r2, r3
 800c07c:	7d7b      	ldrb	r3, [r7, #21]
 800c07e:	b29b      	uxth	r3, r3
 800c080:	4413      	add	r3, r2
 800c082:	b29a      	uxth	r2, r3
 800c084:	7bfb      	ldrb	r3, [r7, #15]
 800c086:	3a02      	subs	r2, #2
 800c088:	b291      	uxth	r1, r2
 800c08a:	4a16      	ldr	r2, [pc, #88]	; (800c0e4 <recvfrom+0x278>)
 800c08c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 800c090:	7bfb      	ldrb	r3, [r7, #15]
 800c092:	4a14      	ldr	r2, [pc, #80]	; (800c0e4 <recvfrom+0x278>)
 800c094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c098:	f240 52ea 	movw	r2, #1514	; 0x5ea
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d906      	bls.n	800c0ae <recvfrom+0x242>
   			{
   			   close(sn);
 800c0a0:	7bfb      	ldrb	r3, [r7, #15]
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7ff fa3c 	bl	800b520 <close>
   			   return SOCKFATAL_PACKLEN;
 800c0a8:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 800c0ac:	e0c4      	b.n	800c238 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 800c0ae:	7bfb      	ldrb	r3, [r7, #15]
 800c0b0:	4a0e      	ldr	r2, [pc, #56]	; (800c0ec <recvfrom+0x280>)
 800c0b2:	2180      	movs	r1, #128	; 0x80
 800c0b4:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800c0b6:	7bfb      	ldrb	r3, [r7, #15]
 800c0b8:	4a0a      	ldr	r2, [pc, #40]	; (800c0e4 <recvfrom+0x278>)
 800c0ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0be:	89ba      	ldrh	r2, [r7, #12]
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d202      	bcs.n	800c0ca <recvfrom+0x25e>
 800c0c4:	89bb      	ldrh	r3, [r7, #12]
 800c0c6:	83fb      	strh	r3, [r7, #30]
 800c0c8:	e004      	b.n	800c0d4 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 800c0ca:	7bfb      	ldrb	r3, [r7, #15]
 800c0cc:	4a05      	ldr	r2, [pc, #20]	; (800c0e4 <recvfrom+0x278>)
 800c0ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0d2:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 800c0d4:	8bfa      	ldrh	r2, [r7, #30]
 800c0d6:	7bfb      	ldrb	r3, [r7, #15]
 800c0d8:	68b9      	ldr	r1, [r7, #8]
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f7ff f866 	bl	800b1ac <wiz_recv_data>
		   break;
 800c0e0:	e073      	b.n	800c1ca <recvfrom+0x35e>
 800c0e2:	bf00      	nop
 800c0e4:	200038b0 	.word	0x200038b0
 800c0e8:	200038ac 	.word	0x200038ac
 800c0ec:	200038c0 	.word	0x200038c0
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 800c0f0:	7bfb      	ldrb	r3, [r7, #15]
 800c0f2:	4a53      	ldr	r2, [pc, #332]	; (800c240 <recvfrom+0x3d4>)
 800c0f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d144      	bne.n	800c186 <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 800c0fc:	f107 0114 	add.w	r1, r7, #20
 800c100:	7bfb      	ldrb	r3, [r7, #15]
 800c102:	2206      	movs	r2, #6
 800c104:	4618      	mov	r0, r3
 800c106:	f7ff f851 	bl	800b1ac <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800c10a:	7bfb      	ldrb	r3, [r7, #15]
 800c10c:	009b      	lsls	r3, r3, #2
 800c10e:	3301      	adds	r3, #1
 800c110:	00db      	lsls	r3, r3, #3
 800c112:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c116:	2140      	movs	r1, #64	; 0x40
 800c118:	4618      	mov	r0, r3
 800c11a:	f7fe fe47 	bl	800adac <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800c11e:	bf00      	nop
 800c120:	7bfb      	ldrb	r3, [r7, #15]
 800c122:	009b      	lsls	r3, r3, #2
 800c124:	3301      	adds	r3, #1
 800c126:	00db      	lsls	r3, r3, #3
 800c128:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c12c:	4618      	mov	r0, r3
 800c12e:	f7fe fdf1 	bl	800ad14 <WIZCHIP_READ>
 800c132:	4603      	mov	r3, r0
 800c134:	2b00      	cmp	r3, #0
 800c136:	d1f3      	bne.n	800c120 <recvfrom+0x2b4>
   			addr[0] = head[0];
 800c138:	7d3a      	ldrb	r2, [r7, #20]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	3301      	adds	r3, #1
 800c142:	7d7a      	ldrb	r2, [r7, #21]
 800c144:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	3302      	adds	r3, #2
 800c14a:	7dba      	ldrb	r2, [r7, #22]
 800c14c:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	3303      	adds	r3, #3
 800c152:	7dfa      	ldrb	r2, [r7, #23]
 800c154:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 800c156:	7e3a      	ldrb	r2, [r7, #24]
 800c158:	7bfb      	ldrb	r3, [r7, #15]
 800c15a:	b291      	uxth	r1, r2
 800c15c:	4a38      	ldr	r2, [pc, #224]	; (800c240 <recvfrom+0x3d4>)
 800c15e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 800c162:	7bfb      	ldrb	r3, [r7, #15]
 800c164:	4a36      	ldr	r2, [pc, #216]	; (800c240 <recvfrom+0x3d4>)
 800c166:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c16a:	021b      	lsls	r3, r3, #8
 800c16c:	b299      	uxth	r1, r3
 800c16e:	7e7b      	ldrb	r3, [r7, #25]
 800c170:	b29a      	uxth	r2, r3
 800c172:	7bfb      	ldrb	r3, [r7, #15]
 800c174:	440a      	add	r2, r1
 800c176:	b291      	uxth	r1, r2
 800c178:	4a31      	ldr	r2, [pc, #196]	; (800c240 <recvfrom+0x3d4>)
 800c17a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 800c17e:	7bfb      	ldrb	r3, [r7, #15]
 800c180:	4a30      	ldr	r2, [pc, #192]	; (800c244 <recvfrom+0x3d8>)
 800c182:	2180      	movs	r1, #128	; 0x80
 800c184:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 800c186:	7bfb      	ldrb	r3, [r7, #15]
 800c188:	4a2d      	ldr	r2, [pc, #180]	; (800c240 <recvfrom+0x3d4>)
 800c18a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c18e:	89ba      	ldrh	r2, [r7, #12]
 800c190:	429a      	cmp	r2, r3
 800c192:	d202      	bcs.n	800c19a <recvfrom+0x32e>
 800c194:	89bb      	ldrh	r3, [r7, #12]
 800c196:	83fb      	strh	r3, [r7, #30]
 800c198:	e004      	b.n	800c1a4 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 800c19a:	7bfb      	ldrb	r3, [r7, #15]
 800c19c:	4a28      	ldr	r2, [pc, #160]	; (800c240 <recvfrom+0x3d4>)
 800c19e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c1a2:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 800c1a4:	8bfa      	ldrh	r2, [r7, #30]
 800c1a6:	7bfb      	ldrb	r3, [r7, #15]
 800c1a8:	68b9      	ldr	r1, [r7, #8]
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7fe fffe 	bl	800b1ac <wiz_recv_data>
			break;
 800c1b0:	e00b      	b.n	800c1ca <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 800c1b2:	8bfa      	ldrh	r2, [r7, #30]
 800c1b4:	7bfb      	ldrb	r3, [r7, #15]
 800c1b6:	4611      	mov	r1, r2
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f7ff f853 	bl	800b264 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 800c1be:	7bfb      	ldrb	r3, [r7, #15]
 800c1c0:	491f      	ldr	r1, [pc, #124]	; (800c240 <recvfrom+0x3d4>)
 800c1c2:	8bfa      	ldrh	r2, [r7, #30]
 800c1c4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 800c1c8:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 800c1ca:	7bfb      	ldrb	r3, [r7, #15]
 800c1cc:	009b      	lsls	r3, r3, #2
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	00db      	lsls	r3, r3, #3
 800c1d2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c1d6:	2140      	movs	r1, #64	; 0x40
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7fe fde7 	bl	800adac <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 800c1de:	bf00      	nop
 800c1e0:	7bfb      	ldrb	r3, [r7, #15]
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	3301      	adds	r3, #1
 800c1e6:	00db      	lsls	r3, r3, #3
 800c1e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f7fe fd91 	bl	800ad14 <WIZCHIP_READ>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d1f3      	bne.n	800c1e0 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 800c1f8:	7bfb      	ldrb	r3, [r7, #15]
 800c1fa:	4a11      	ldr	r2, [pc, #68]	; (800c240 <recvfrom+0x3d4>)
 800c1fc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800c200:	7bfb      	ldrb	r3, [r7, #15]
 800c202:	8bfa      	ldrh	r2, [r7, #30]
 800c204:	1a8a      	subs	r2, r1, r2
 800c206:	b291      	uxth	r1, r2
 800c208:	4a0d      	ldr	r2, [pc, #52]	; (800c240 <recvfrom+0x3d4>)
 800c20a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 800c20e:	7bfb      	ldrb	r3, [r7, #15]
 800c210:	4a0b      	ldr	r2, [pc, #44]	; (800c240 <recvfrom+0x3d4>)
 800c212:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d009      	beq.n	800c22e <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 800c21a:	7bfb      	ldrb	r3, [r7, #15]
 800c21c:	4a09      	ldr	r2, [pc, #36]	; (800c244 <recvfrom+0x3d8>)
 800c21e:	5cd2      	ldrb	r2, [r2, r3]
 800c220:	7bfb      	ldrb	r3, [r7, #15]
 800c222:	f042 0201 	orr.w	r2, r2, #1
 800c226:	b2d1      	uxtb	r1, r2
 800c228:	4a06      	ldr	r2, [pc, #24]	; (800c244 <recvfrom+0x3d8>)
 800c22a:	54d1      	strb	r1, [r2, r3]
 800c22c:	e003      	b.n	800c236 <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 800c22e:	7bfb      	ldrb	r3, [r7, #15]
 800c230:	4a04      	ldr	r2, [pc, #16]	; (800c244 <recvfrom+0x3d8>)
 800c232:	2100      	movs	r1, #0
 800c234:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 800c236:	8bfb      	ldrh	r3, [r7, #30]
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3720      	adds	r7, #32
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}
 800c240:	200038b0 	.word	0x200038b0
 800c244:	200038c0 	.word	0x200038c0

0800c248 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 800c248:	b480      	push	{r7}
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	bf00      	nop
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr

0800c256 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800c256:	b480      	push	{r7}
 800c258:	af00      	add	r7, sp, #0
 800c25a:	bf00      	nop
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr

0800c264 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 800c264:	b480      	push	{r7}
 800c266:	af00      	add	r7, sp, #0
 800c268:	bf00      	nop
 800c26a:	46bd      	mov	sp, r7
 800c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c270:	4770      	bx	lr

0800c272 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800c272:	b480      	push	{r7}
 800c274:	af00      	add	r7, sp, #0
 800c276:	bf00      	nop
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr

0800c280 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 800c280:	b480      	push	{r7}
 800c282:	b083      	sub	sp, #12
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	b2db      	uxtb	r3, r3
 800c28e:	4618      	mov	r0, r3
 800c290:	370c      	adds	r7, #12
 800c292:	46bd      	mov	sp, r7
 800c294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c298:	4770      	bx	lr

0800c29a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800c29a:	b480      	push	{r7}
 800c29c:	b083      	sub	sp, #12
 800c29e:	af00      	add	r7, sp, #0
 800c2a0:	6078      	str	r0, [r7, #4]
 800c2a2:	460b      	mov	r3, r1
 800c2a4:	70fb      	strb	r3, [r7, #3]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	78fa      	ldrb	r2, [r7, #3]
 800c2aa:	701a      	strb	r2, [r3, #0]
 800c2ac:	bf00      	nop
 800c2ae:	370c      	adds	r7, #12
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b6:	4770      	bx	lr

0800c2b8 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 800c2b8:	b480      	push	{r7}
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	2300      	movs	r3, #0
 800c2be:	4618      	mov	r0, r3
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr

0800c2c8 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 800c2c8:	b480      	push	{r7}
 800c2ca:	b083      	sub	sp, #12
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	71fb      	strb	r3, [r7, #7]
 800c2d2:	bf00      	nop
 800c2d4:	370c      	adds	r7, #12
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr
	...

0800c2e0 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b083      	sub	sp, #12
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d002      	beq.n	800c2f6 <reg_wizchip_cs_cbfunc+0x16>
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d106      	bne.n	800c304 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800c2f6:	4b0a      	ldr	r3, [pc, #40]	; (800c320 <reg_wizchip_cs_cbfunc+0x40>)
 800c2f8:	4a0a      	ldr	r2, [pc, #40]	; (800c324 <reg_wizchip_cs_cbfunc+0x44>)
 800c2fa:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 800c2fc:	4b08      	ldr	r3, [pc, #32]	; (800c320 <reg_wizchip_cs_cbfunc+0x40>)
 800c2fe:	4a0a      	ldr	r2, [pc, #40]	; (800c328 <reg_wizchip_cs_cbfunc+0x48>)
 800c300:	619a      	str	r2, [r3, #24]
 800c302:	e006      	b.n	800c312 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 800c304:	4a06      	ldr	r2, [pc, #24]	; (800c320 <reg_wizchip_cs_cbfunc+0x40>)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800c30a:	4a05      	ldr	r2, [pc, #20]	; (800c320 <reg_wizchip_cs_cbfunc+0x40>)
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	6193      	str	r3, [r2, #24]
   }
}
 800c310:	bf00      	nop
 800c312:	bf00      	nop
 800c314:	370c      	adds	r7, #12
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr
 800c31e:	bf00      	nop
 800c320:	20000080 	.word	0x20000080
 800c324:	0800c265 	.word	0x0800c265
 800c328:	0800c273 	.word	0x0800c273

0800c32c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 800c32c:	b480      	push	{r7}
 800c32e:	b083      	sub	sp, #12
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800c336:	bf00      	nop
 800c338:	4b0f      	ldr	r3, [pc, #60]	; (800c378 <reg_wizchip_spi_cbfunc+0x4c>)
 800c33a:	881b      	ldrh	r3, [r3, #0]
 800c33c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c340:	2b00      	cmp	r3, #0
 800c342:	d0f9      	beq.n	800c338 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d002      	beq.n	800c350 <reg_wizchip_spi_cbfunc+0x24>
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d106      	bne.n	800c35e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 800c350:	4b09      	ldr	r3, [pc, #36]	; (800c378 <reg_wizchip_spi_cbfunc+0x4c>)
 800c352:	4a0a      	ldr	r2, [pc, #40]	; (800c37c <reg_wizchip_spi_cbfunc+0x50>)
 800c354:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800c356:	4b08      	ldr	r3, [pc, #32]	; (800c378 <reg_wizchip_spi_cbfunc+0x4c>)
 800c358:	4a09      	ldr	r2, [pc, #36]	; (800c380 <reg_wizchip_spi_cbfunc+0x54>)
 800c35a:	621a      	str	r2, [r3, #32]
 800c35c:	e006      	b.n	800c36c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800c35e:	4a06      	ldr	r2, [pc, #24]	; (800c378 <reg_wizchip_spi_cbfunc+0x4c>)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 800c364:	4a04      	ldr	r2, [pc, #16]	; (800c378 <reg_wizchip_spi_cbfunc+0x4c>)
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	6213      	str	r3, [r2, #32]
   }
}
 800c36a:	bf00      	nop
 800c36c:	bf00      	nop
 800c36e:	370c      	adds	r7, #12
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr
 800c378:	20000080 	.word	0x20000080
 800c37c:	0800c2b9 	.word	0x0800c2b9
 800c380:	0800c2c9 	.word	0x0800c2c9

0800c384 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b086      	sub	sp, #24
 800c388:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800c38a:	1d3b      	adds	r3, r7, #4
 800c38c:	2206      	movs	r2, #6
 800c38e:	4619      	mov	r1, r3
 800c390:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800c394:	f7fe fd58 	bl	800ae48 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800c398:	f107 0314 	add.w	r3, r7, #20
 800c39c:	2204      	movs	r2, #4
 800c39e:	4619      	mov	r1, r3
 800c3a0:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c3a4:	f7fe fd50 	bl	800ae48 <WIZCHIP_READ_BUF>
 800c3a8:	f107 0310 	add.w	r3, r7, #16
 800c3ac:	2204      	movs	r2, #4
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800c3b4:	f7fe fd48 	bl	800ae48 <WIZCHIP_READ_BUF>
 800c3b8:	f107 030c 	add.w	r3, r7, #12
 800c3bc:	2204      	movs	r2, #4
 800c3be:	4619      	mov	r1, r3
 800c3c0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800c3c4:	f7fe fd40 	bl	800ae48 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 800c3c8:	2180      	movs	r1, #128	; 0x80
 800c3ca:	2000      	movs	r0, #0
 800c3cc:	f7fe fcee 	bl	800adac <WIZCHIP_WRITE>
   getMR(); // for delay
 800c3d0:	2000      	movs	r0, #0
 800c3d2:	f7fe fc9f 	bl	800ad14 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800c3d6:	1d3b      	adds	r3, r7, #4
 800c3d8:	2206      	movs	r2, #6
 800c3da:	4619      	mov	r1, r3
 800c3dc:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800c3e0:	f7fe fd92 	bl	800af08 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800c3e4:	f107 0314 	add.w	r3, r7, #20
 800c3e8:	2204      	movs	r2, #4
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c3f0:	f7fe fd8a 	bl	800af08 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800c3f4:	f107 0310 	add.w	r3, r7, #16
 800c3f8:	2204      	movs	r2, #4
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800c400:	f7fe fd82 	bl	800af08 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800c404:	f107 030c 	add.w	r3, r7, #12
 800c408:	2204      	movs	r2, #4
 800c40a:	4619      	mov	r1, r3
 800c40c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800c410:	f7fe fd7a 	bl	800af08 <WIZCHIP_WRITE_BUF>
}
 800c414:	bf00      	nop
 800c416:	3718      	adds	r7, #24
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}

0800c41c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800c426:	2300      	movs	r3, #0
 800c428:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800c42a:	f7ff ffab 	bl	800c384 <wizchip_sw_reset>
   if(txsize)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d03b      	beq.n	800c4ac <wizchip_init+0x90>
   {
      tmp = 0;
 800c434:	2300      	movs	r3, #0
 800c436:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800c438:	2300      	movs	r3, #0
 800c43a:	73fb      	strb	r3, [r7, #15]
 800c43c:	e015      	b.n	800c46a <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 800c43e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c442:	687a      	ldr	r2, [r7, #4]
 800c444:	4413      	add	r3, r2
 800c446:	781a      	ldrb	r2, [r3, #0]
 800c448:	7bbb      	ldrb	r3, [r7, #14]
 800c44a:	4413      	add	r3, r2
 800c44c:	b2db      	uxtb	r3, r3
 800c44e:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 800c450:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c454:	2b10      	cmp	r3, #16
 800c456:	dd02      	ble.n	800c45e <wizchip_init+0x42>
 800c458:	f04f 33ff 	mov.w	r3, #4294967295
 800c45c:	e066      	b.n	800c52c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800c45e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c462:	b2db      	uxtb	r3, r3
 800c464:	3301      	adds	r3, #1
 800c466:	b2db      	uxtb	r3, r3
 800c468:	73fb      	strb	r3, [r7, #15]
 800c46a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c46e:	2b07      	cmp	r3, #7
 800c470:	dde5      	ble.n	800c43e <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800c472:	2300      	movs	r3, #0
 800c474:	73fb      	strb	r3, [r7, #15]
 800c476:	e015      	b.n	800c4a4 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 800c478:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c47c:	009b      	lsls	r3, r3, #2
 800c47e:	3301      	adds	r3, #1
 800c480:	00db      	lsls	r3, r3, #3
 800c482:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800c486:	4618      	mov	r0, r3
 800c488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c48c:	687a      	ldr	r2, [r7, #4]
 800c48e:	4413      	add	r3, r2
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	4619      	mov	r1, r3
 800c494:	f7fe fc8a 	bl	800adac <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800c498:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c49c:	b2db      	uxtb	r3, r3
 800c49e:	3301      	adds	r3, #1
 800c4a0:	b2db      	uxtb	r3, r3
 800c4a2:	73fb      	strb	r3, [r7, #15]
 800c4a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4a8:	2b07      	cmp	r3, #7
 800c4aa:	dde5      	ble.n	800c478 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d03b      	beq.n	800c52a <wizchip_init+0x10e>
   {
      tmp = 0;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	73fb      	strb	r3, [r7, #15]
 800c4ba:	e015      	b.n	800c4e8 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 800c4bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4c0:	683a      	ldr	r2, [r7, #0]
 800c4c2:	4413      	add	r3, r2
 800c4c4:	781a      	ldrb	r2, [r3, #0]
 800c4c6:	7bbb      	ldrb	r3, [r7, #14]
 800c4c8:	4413      	add	r3, r2
 800c4ca:	b2db      	uxtb	r3, r3
 800c4cc:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 800c4ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c4d2:	2b10      	cmp	r3, #16
 800c4d4:	dd02      	ble.n	800c4dc <wizchip_init+0xc0>
 800c4d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c4da:	e027      	b.n	800c52c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800c4dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4e0:	b2db      	uxtb	r3, r3
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	73fb      	strb	r3, [r7, #15]
 800c4e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4ec:	2b07      	cmp	r3, #7
 800c4ee:	dde5      	ble.n	800c4bc <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	73fb      	strb	r3, [r7, #15]
 800c4f4:	e015      	b.n	800c522 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800c4f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4fa:	009b      	lsls	r3, r3, #2
 800c4fc:	3301      	adds	r3, #1
 800c4fe:	00db      	lsls	r3, r3, #3
 800c500:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800c504:	4618      	mov	r0, r3
 800c506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c50a:	683a      	ldr	r2, [r7, #0]
 800c50c:	4413      	add	r3, r2
 800c50e:	781b      	ldrb	r3, [r3, #0]
 800c510:	4619      	mov	r1, r3
 800c512:	f7fe fc4b 	bl	800adac <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800c516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c51a:	b2db      	uxtb	r3, r3
 800c51c:	3301      	adds	r3, #1
 800c51e:	b2db      	uxtb	r3, r3
 800c520:	73fb      	strb	r3, [r7, #15]
 800c522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c526:	2b07      	cmp	r3, #7
 800c528:	dde5      	ble.n	800c4f6 <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 800c52a:	2300      	movs	r3, #0
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3710      	adds	r7, #16
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b082      	sub	sp, #8
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2206      	movs	r2, #6
 800c540:	4619      	mov	r1, r3
 800c542:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800c546:	f7fe fcdf 	bl	800af08 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	330e      	adds	r3, #14
 800c54e:	2204      	movs	r2, #4
 800c550:	4619      	mov	r1, r3
 800c552:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c556:	f7fe fcd7 	bl	800af08 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	330a      	adds	r3, #10
 800c55e:	2204      	movs	r2, #4
 800c560:	4619      	mov	r1, r3
 800c562:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800c566:	f7fe fccf 	bl	800af08 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	3306      	adds	r3, #6
 800c56e:	2204      	movs	r2, #4
 800c570:	4619      	mov	r1, r3
 800c572:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800c576:	f7fe fcc7 	bl	800af08 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	7c9a      	ldrb	r2, [r3, #18]
 800c57e:	4b0b      	ldr	r3, [pc, #44]	; (800c5ac <wizchip_setnetinfo+0x78>)
 800c580:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	7cda      	ldrb	r2, [r3, #19]
 800c586:	4b09      	ldr	r3, [pc, #36]	; (800c5ac <wizchip_setnetinfo+0x78>)
 800c588:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	7d1a      	ldrb	r2, [r3, #20]
 800c58e:	4b07      	ldr	r3, [pc, #28]	; (800c5ac <wizchip_setnetinfo+0x78>)
 800c590:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	7d5a      	ldrb	r2, [r3, #21]
 800c596:	4b05      	ldr	r3, [pc, #20]	; (800c5ac <wizchip_setnetinfo+0x78>)
 800c598:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	7d9a      	ldrb	r2, [r3, #22]
 800c59e:	4b04      	ldr	r3, [pc, #16]	; (800c5b0 <wizchip_setnetinfo+0x7c>)
 800c5a0:	701a      	strb	r2, [r3, #0]
}
 800c5a2:	bf00      	nop
 800c5a4:	3708      	adds	r7, #8
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	200038c8 	.word	0x200038c8
 800c5b0:	200038cc 	.word	0x200038cc

0800c5b4 <wizchip_settimeout>:
{
   return (netmode_type) getMR();
}

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b082      	sub	sp, #8
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800c5c6:	f7fe fbf1 	bl	800adac <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	885b      	ldrh	r3, [r3, #2]
 800c5ce:	0a1b      	lsrs	r3, r3, #8
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	b2db      	uxtb	r3, r3
 800c5d4:	4619      	mov	r1, r3
 800c5d6:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 800c5da:	f7fe fbe7 	bl	800adac <WIZCHIP_WRITE>
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	885b      	ldrh	r3, [r3, #2]
 800c5e2:	b2db      	uxtb	r3, r3
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800c5ea:	f7fe fbdf 	bl	800adac <WIZCHIP_WRITE>
}
 800c5ee:	bf00      	nop
 800c5f0:	3708      	adds	r7, #8
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}

0800c5f6 <NewMessageData>:
 * Contributors:
 *    Allan Stockdill-Mander/Ian Craggs - initial API and implementation and/or initial documentation
 *******************************************************************************/
#include "MQTTClient.h"

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 800c5f6:	b480      	push	{r7}
 800c5f8:	b085      	sub	sp, #20
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	60f8      	str	r0, [r7, #12]
 800c5fe:	60b9      	str	r1, [r7, #8]
 800c600:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	68ba      	ldr	r2, [r7, #8]
 800c606:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	601a      	str	r2, [r3, #0]
}
 800c60e:	bf00      	nop
 800c610:	3714      	adds	r7, #20
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr

0800c61a <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 800c61a:	b480      	push	{r7}
 800c61c:	b083      	sub	sp, #12
 800c61e:	af00      	add	r7, sp, #0
 800c620:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d003      	beq.n	800c636 <getNextPacketId+0x1c>
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	3301      	adds	r3, #1
 800c634:	e000      	b.n	800c638 <getNextPacketId+0x1e>
 800c636:	2301      	movs	r3, #1
 800c638:	687a      	ldr	r2, [r7, #4]
 800c63a:	6013      	str	r3, [r2, #0]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
}
 800c640:	4618      	mov	r0, r3
 800c642:	370c      	adds	r7, #12
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr

0800c64c <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 800c64c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c64e:	b087      	sub	sp, #28
 800c650:	af00      	add	r7, sp, #0
 800c652:	60f8      	str	r0, [r7, #12]
 800c654:	60b9      	str	r1, [r7, #8]
 800c656:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 800c658:	f04f 33ff 	mov.w	r3, #4294967295
 800c65c:	617b      	str	r3, [r7, #20]
        sent = 0;
 800c65e:	2300      	movs	r3, #0
 800c660:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 800c662:	e018      	b.n	800c696 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c668:	689c      	ldr	r4, [r3, #8]
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	691a      	ldr	r2, [r3, #16]
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	18d6      	adds	r6, r2, r3
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 fcee 	bl	800d058 <TimerLeftMS>
 800c67c:	4603      	mov	r3, r0
 800c67e:	68ba      	ldr	r2, [r7, #8]
 800c680:	4631      	mov	r1, r6
 800c682:	4628      	mov	r0, r5
 800c684:	47a0      	blx	r4
 800c686:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	db0e      	blt.n	800c6ac <sendPacket+0x60>
            break;
        sent += rc;
 800c68e:	693a      	ldr	r2, [r7, #16]
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	4413      	add	r3, r2
 800c694:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 800c696:	693a      	ldr	r2, [r7, #16]
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	da07      	bge.n	800c6ae <sendPacket+0x62>
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f000 fc98 	bl	800cfd4 <TimerIsExpired>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d0dc      	beq.n	800c664 <sendPacket+0x18>
 800c6aa:	e000      	b.n	800c6ae <sendPacket+0x62>
            break;
 800c6ac:	bf00      	nop
    }
    if (sent == length)
 800c6ae:	693a      	ldr	r2, [r7, #16]
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	d10b      	bne.n	800c6ce <sendPacket+0x82>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	699b      	ldr	r3, [r3, #24]
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	4610      	mov	r0, r2
 800c6c4:	f000 fcb0 	bl	800d028 <TimerCountdown>
        rc = SUCCESSS;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	617b      	str	r3, [r7, #20]
 800c6cc:	e002      	b.n	800c6d4 <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 800c6ce:	f04f 33ff 	mov.w	r3, #4294967295
 800c6d2:	617b      	str	r3, [r7, #20]
    return rc;
 800c6d4:	697b      	ldr	r3, [r7, #20]
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	371c      	adds	r7, #28
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c6de <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 800c6de:	b580      	push	{r7, lr}
 800c6e0:	b086      	sub	sp, #24
 800c6e2:	af00      	add	r7, sp, #0
 800c6e4:	60f8      	str	r0, [r7, #12]
 800c6e6:	60b9      	str	r1, [r7, #8]
 800c6e8:	607a      	str	r2, [r7, #4]
 800c6ea:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	68ba      	ldr	r2, [r7, #8]
 800c6f0:	651a      	str	r2, [r3, #80]	; 0x50

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	617b      	str	r3, [r7, #20]
 800c6f6:	e009      	b.n	800c70c <MQTTClientInit+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 800c6f8:	68fa      	ldr	r2, [r7, #12]
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	3304      	adds	r3, #4
 800c6fe:	00db      	lsls	r3, r3, #3
 800c700:	4413      	add	r3, r2
 800c702:	2200      	movs	r2, #0
 800c704:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	3301      	adds	r3, #1
 800c70a:	617b      	str	r3, [r7, #20]
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	2b04      	cmp	r3, #4
 800c710:	ddf2      	ble.n	800c6f8 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	687a      	ldr	r2, [r7, #4]
 800c716:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	683a      	ldr	r2, [r7, #0]
 800c71c:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	6a3a      	ldr	r2, [r7, #32]
 800c722:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c728:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c72e:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	2200      	movs	r2, #0
 800c734:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	2200      	movs	r2, #0
 800c73a:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	2200      	movs	r2, #0
 800c740:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	2201      	movs	r2, #1
 800c746:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	3354      	adds	r3, #84	; 0x54
 800c74c:	4618      	mov	r0, r3
 800c74e:	f000 fc34 	bl	800cfba <TimerInit>
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 800c752:	bf00      	nop
 800c754:	3718      	adds	r7, #24
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}

0800c75a <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 800c75a:	b590      	push	{r4, r7, lr}
 800c75c:	b08b      	sub	sp, #44	; 0x2c
 800c75e:	af00      	add	r7, sp, #0
 800c760:	60f8      	str	r0, [r7, #12]
 800c762:	60b9      	str	r1, [r7, #8]
 800c764:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 800c766:	2301      	movs	r3, #1
 800c768:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 800c76a:	2300      	movs	r3, #0
 800c76c:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 800c76e:	2304      	movs	r3, #4
 800c770:	61fb      	str	r3, [r7, #28]

    *value = 0;
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	2200      	movs	r2, #0
 800c776:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 800c778:	f04f 33ff 	mov.w	r3, #4294967295
 800c77c:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800c77e:	6a3b      	ldr	r3, [r7, #32]
 800c780:	3301      	adds	r3, #1
 800c782:	623b      	str	r3, [r7, #32]
 800c784:	6a3a      	ldr	r2, [r7, #32]
 800c786:	69fb      	ldr	r3, [r7, #28]
 800c788:	429a      	cmp	r2, r3
 800c78a:	dd03      	ble.n	800c794 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 800c78c:	f04f 33ff 	mov.w	r3, #4294967295
 800c790:	61bb      	str	r3, [r7, #24]
            goto exit;
 800c792:	e021      	b.n	800c7d8 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c798:	685c      	ldr	r4, [r3, #4]
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c79e:	f107 0117 	add.w	r1, r7, #23
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2201      	movs	r2, #1
 800c7a6:	47a0      	blx	r4
 800c7a8:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 800c7aa:	69bb      	ldr	r3, [r7, #24]
 800c7ac:	2b01      	cmp	r3, #1
 800c7ae:	d112      	bne.n	800c7d6 <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	681a      	ldr	r2, [r3, #0]
 800c7b4:	7dfb      	ldrb	r3, [r7, #23]
 800c7b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c7bc:	fb01 f303 	mul.w	r3, r1, r3
 800c7c0:	441a      	add	r2, r3
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 800c7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c8:	01db      	lsls	r3, r3, #7
 800c7ca:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 800c7cc:	7dfb      	ldrb	r3, [r7, #23]
 800c7ce:	b25b      	sxtb	r3, r3
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	dbd1      	blt.n	800c778 <decodePacket+0x1e>
exit:
 800c7d4:	e000      	b.n	800c7d8 <decodePacket+0x7e>
            goto exit;
 800c7d6:	bf00      	nop
    return len;
 800c7d8:	6a3b      	ldr	r3, [r7, #32]
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	372c      	adds	r7, #44	; 0x2c
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd90      	pop	{r4, r7, pc}

0800c7e2 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 800c7e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7e4:	b089      	sub	sp, #36	; 0x24
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	60f8      	str	r0, [r7, #12]
 800c7ea:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 800c7ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c7f0:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	617b      	str	r3, [r7, #20]
    int len = 0;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c802:	685c      	ldr	r4, [r3, #4]
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	695e      	ldr	r6, [r3, #20]
 800c80c:	68b8      	ldr	r0, [r7, #8]
 800c80e:	f000 fc23 	bl	800d058 <TimerLeftMS>
 800c812:	4603      	mov	r3, r0
 800c814:	2201      	movs	r2, #1
 800c816:	4631      	mov	r1, r6
 800c818:	4628      	mov	r0, r5
 800c81a:	47a0      	blx	r4
 800c81c:	4603      	mov	r3, r0
 800c81e:	2b01      	cmp	r3, #1
 800c820:	d13b      	bne.n	800c89a <readPacket+0xb8>
        goto exit;

    len = 1;
 800c822:	2301      	movs	r3, #1
 800c824:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 800c826:	68b8      	ldr	r0, [r7, #8]
 800c828:	f000 fc16 	bl	800d058 <TimerLeftMS>
 800c82c:	4602      	mov	r2, r0
 800c82e:	f107 0310 	add.w	r3, r7, #16
 800c832:	4619      	mov	r1, r3
 800c834:	68f8      	ldr	r0, [r7, #12]
 800c836:	f7ff ff90 	bl	800c75a <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	695b      	ldr	r3, [r3, #20]
 800c83e:	3301      	adds	r3, #1
 800c840:	693a      	ldr	r2, [r7, #16]
 800c842:	4611      	mov	r1, r2
 800c844:	4618      	mov	r0, r3
 800c846:	f000 ff6c 	bl	800d722 <MQTTPacket_encode>
 800c84a:	4602      	mov	r2, r0
 800c84c:	69bb      	ldr	r3, [r7, #24]
 800c84e:	4413      	add	r3, r2
 800c850:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	2b00      	cmp	r3, #0
 800c856:	dd16      	ble.n	800c886 <readPacket+0xa4>
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c85c:	685c      	ldr	r4, [r3, #4]
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	695a      	ldr	r2, [r3, #20]
 800c866:	69bb      	ldr	r3, [r7, #24]
 800c868:	18d6      	adds	r6, r2, r3
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	607b      	str	r3, [r7, #4]
 800c86e:	68b8      	ldr	r0, [r7, #8]
 800c870:	f000 fbf2 	bl	800d058 <TimerLeftMS>
 800c874:	4603      	mov	r3, r0
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	4631      	mov	r1, r6
 800c87a:	4628      	mov	r0, r5
 800c87c:	47a0      	blx	r4
 800c87e:	4602      	mov	r2, r0
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	429a      	cmp	r2, r3
 800c884:	d10b      	bne.n	800c89e <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	695b      	ldr	r3, [r3, #20]
 800c88a:	781b      	ldrb	r3, [r3, #0]
 800c88c:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 800c88e:	7d3b      	ldrb	r3, [r7, #20]
 800c890:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800c894:	b2db      	uxtb	r3, r3
 800c896:	61fb      	str	r3, [r7, #28]
 800c898:	e002      	b.n	800c8a0 <readPacket+0xbe>
        goto exit;
 800c89a:	bf00      	nop
 800c89c:	e000      	b.n	800c8a0 <readPacket+0xbe>
        goto exit;
 800c89e:	bf00      	nop
exit:
    return rc;
 800c8a0:	69fb      	ldr	r3, [r7, #28]
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3724      	adds	r7, #36	; 0x24
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c8aa <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 800c8aa:	b480      	push	{r7}
 800c8ac:	b087      	sub	sp, #28
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	6078      	str	r0, [r7, #4]
 800c8b2:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	689b      	ldr	r3, [r3, #8]
 800c8bc:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	685b      	ldr	r3, [r3, #4]
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	4413      	add	r3, r2
 800c8c8:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 800c8ca:	e039      	b.n	800c940 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	2b2f      	cmp	r3, #47	; 0x2f
 800c8d2:	d103      	bne.n	800c8dc <isTopicMatched+0x32>
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	781b      	ldrb	r3, [r3, #0]
 800c8d8:	2b2f      	cmp	r3, #47	; 0x2f
 800c8da:	d13a      	bne.n	800c952 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	2b2b      	cmp	r3, #43	; 0x2b
 800c8e2:	d009      	beq.n	800c8f8 <isTopicMatched+0x4e>
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	2b23      	cmp	r3, #35	; 0x23
 800c8ea:	d005      	beq.n	800c8f8 <isTopicMatched+0x4e>
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	781a      	ldrb	r2, [r3, #0]
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	781b      	ldrb	r3, [r3, #0]
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d12e      	bne.n	800c956 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	781b      	ldrb	r3, [r3, #0]
 800c8fc:	2b2b      	cmp	r3, #43	; 0x2b
 800c8fe:	d112      	bne.n	800c926 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	3301      	adds	r3, #1
 800c904:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 800c906:	e005      	b.n	800c914 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	3301      	adds	r3, #1
 800c90c:	613b      	str	r3, [r7, #16]
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	3301      	adds	r3, #1
 800c912:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 800c914:	68fa      	ldr	r2, [r7, #12]
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	429a      	cmp	r2, r3
 800c91a:	d20b      	bcs.n	800c934 <isTopicMatched+0x8a>
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	781b      	ldrb	r3, [r3, #0]
 800c920:	2b2f      	cmp	r3, #47	; 0x2f
 800c922:	d1f1      	bne.n	800c908 <isTopicMatched+0x5e>
 800c924:	e006      	b.n	800c934 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	2b23      	cmp	r3, #35	; 0x23
 800c92c:	d102      	bne.n	800c934 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	3b01      	subs	r3, #1
 800c932:	613b      	str	r3, [r7, #16]
        curf++;
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	3301      	adds	r3, #1
 800c938:	617b      	str	r3, [r7, #20]
        curn++;
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	3301      	adds	r3, #1
 800c93e:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	781b      	ldrb	r3, [r3, #0]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d007      	beq.n	800c958 <isTopicMatched+0xae>
 800c948:	693a      	ldr	r2, [r7, #16]
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d3bd      	bcc.n	800c8cc <isTopicMatched+0x22>
 800c950:	e002      	b.n	800c958 <isTopicMatched+0xae>
            break;
 800c952:	bf00      	nop
 800c954:	e000      	b.n	800c958 <isTopicMatched+0xae>
            break;
 800c956:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 800c958:	693a      	ldr	r2, [r7, #16]
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d105      	bne.n	800c96c <isTopicMatched+0xc2>
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d101      	bne.n	800c96c <isTopicMatched+0xc2>
 800c968:	2301      	movs	r3, #1
 800c96a:	e000      	b.n	800c96e <isTopicMatched+0xc4>
 800c96c:	2300      	movs	r3, #0
 800c96e:	b2db      	uxtb	r3, r3
}
 800c970:	4618      	mov	r0, r3
 800c972:	371c      	adds	r7, #28
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr

0800c97c <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b08a      	sub	sp, #40	; 0x28
 800c980:	af00      	add	r7, sp, #0
 800c982:	60f8      	str	r0, [r7, #12]
 800c984:	60b9      	str	r1, [r7, #8]
 800c986:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 800c988:	f04f 33ff 	mov.w	r3, #4294967295
 800c98c:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800c98e:	2300      	movs	r3, #0
 800c990:	627b      	str	r3, [r7, #36]	; 0x24
 800c992:	e03f      	b.n	800ca14 <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 800c994:	68fa      	ldr	r2, [r7, #12]
 800c996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c998:	3304      	adds	r3, #4
 800c99a:	00db      	lsls	r3, r3, #3
 800c99c:	4413      	add	r3, r2
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d034      	beq.n	800ca0e <deliverMessage+0x92>
 800c9a4:	68fa      	ldr	r2, [r7, #12]
 800c9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a8:	3304      	adds	r3, #4
 800c9aa:	00db      	lsls	r3, r3, #3
 800c9ac:	4413      	add	r3, r2
 800c9ae:	685b      	ldr	r3, [r3, #4]
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	68b8      	ldr	r0, [r7, #8]
 800c9b4:	f001 f884 	bl	800dac0 <MQTTPacket_equals>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d10c      	bne.n	800c9d8 <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 800c9be:	68fa      	ldr	r2, [r7, #12]
 800c9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c2:	3304      	adds	r3, #4
 800c9c4:	00db      	lsls	r3, r3, #3
 800c9c6:	4413      	add	r3, r2
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	68b9      	ldr	r1, [r7, #8]
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f7ff ff6c 	bl	800c8aa <isTopicMatched>
 800c9d2:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d01a      	beq.n	800ca0e <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 800c9d8:	68fa      	ldr	r2, [r7, #12]
 800c9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9dc:	3304      	adds	r3, #4
 800c9de:	00db      	lsls	r3, r3, #3
 800c9e0:	4413      	add	r3, r2
 800c9e2:	689b      	ldr	r3, [r3, #8]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d012      	beq.n	800ca0e <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 800c9e8:	f107 0318 	add.w	r3, r7, #24
 800c9ec:	687a      	ldr	r2, [r7, #4]
 800c9ee:	68b9      	ldr	r1, [r7, #8]
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7ff fe00 	bl	800c5f6 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 800c9f6:	68fa      	ldr	r2, [r7, #12]
 800c9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fa:	3304      	adds	r3, #4
 800c9fc:	00db      	lsls	r3, r3, #3
 800c9fe:	4413      	add	r3, r2
 800ca00:	689b      	ldr	r3, [r3, #8]
 800ca02:	f107 0218 	add.w	r2, r7, #24
 800ca06:	4610      	mov	r0, r2
 800ca08:	4798      	blx	r3
                rc = SUCCESSS;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800ca0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca10:	3301      	adds	r3, #1
 800ca12:	627b      	str	r3, [r7, #36]	; 0x24
 800ca14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca16:	2b04      	cmp	r3, #4
 800ca18:	ddbc      	ble.n	800c994 <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 800ca1a:	6a3b      	ldr	r3, [r7, #32]
 800ca1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca20:	d112      	bne.n	800ca48 <deliverMessage+0xcc>
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d00e      	beq.n	800ca48 <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 800ca2a:	f107 0310 	add.w	r3, r7, #16
 800ca2e:	687a      	ldr	r2, [r7, #4]
 800ca30:	68b9      	ldr	r1, [r7, #8]
 800ca32:	4618      	mov	r0, r3
 800ca34:	f7ff fddf 	bl	800c5f6 <NewMessageData>
        c->defaultMessageHandler(&md);
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca3c:	f107 0210 	add.w	r2, r7, #16
 800ca40:	4610      	mov	r0, r2
 800ca42:	4798      	blx	r3
        rc = SUCCESSS;
 800ca44:	2300      	movs	r3, #0
 800ca46:	623b      	str	r3, [r7, #32]
    }

    return rc;
 800ca48:	6a3b      	ldr	r3, [r7, #32]
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3728      	adds	r7, #40	; 0x28
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}

0800ca52 <keepalive>:


int keepalive(MQTTClient* c)
{
 800ca52:	b580      	push	{r7, lr}
 800ca54:	b086      	sub	sp, #24
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 800ca5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ca5e:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	699b      	ldr	r3, [r3, #24]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d102      	bne.n	800ca6e <keepalive+0x1c>
    {
        rc = SUCCESSS;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	617b      	str	r3, [r7, #20]
        goto exit;
 800ca6c:	e033      	b.n	800cad6 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	3354      	adds	r3, #84	; 0x54
 800ca72:	4618      	mov	r0, r3
 800ca74:	f000 faae 	bl	800cfd4 <TimerIsExpired>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d02a      	beq.n	800cad4 <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	7f1b      	ldrb	r3, [r3, #28]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d126      	bne.n	800cad4 <keepalive+0x82>
        {
            Timer timer;
            TimerInit(&timer);
 800ca86:	f107 0308 	add.w	r3, r7, #8
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f000 fa95 	bl	800cfba <TimerInit>
            TimerCountdownMS(&timer, 1000);
 800ca90:	f107 0308 	add.w	r3, r7, #8
 800ca94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f000 fab1 	bl	800d000 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	691a      	ldr	r2, [r3, #16]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	689b      	ldr	r3, [r3, #8]
 800caa6:	4619      	mov	r1, r3
 800caa8:	4610      	mov	r0, r2
 800caaa:	f000 fd6e 	bl	800d58a <MQTTSerialize_pingreq>
 800caae:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	dd0f      	ble.n	800cad6 <keepalive+0x84>
 800cab6:	f107 0308 	add.w	r3, r7, #8
 800caba:	461a      	mov	r2, r3
 800cabc:	6939      	ldr	r1, [r7, #16]
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f7ff fdc4 	bl	800c64c <sendPacket>
 800cac4:	6178      	str	r0, [r7, #20]
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d104      	bne.n	800cad6 <keepalive+0x84>
                c->ping_outstanding = 1;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2201      	movs	r2, #1
 800cad0:	771a      	strb	r2, [r3, #28]
 800cad2:	e000      	b.n	800cad6 <keepalive+0x84>
        }
    }

exit:
 800cad4:	bf00      	nop
    return rc;
 800cad6:	697b      	ldr	r3, [r7, #20]
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3718      	adds	r7, #24
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 800cae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cae2:	b095      	sub	sp, #84	; 0x54
 800cae4:	af06      	add	r7, sp, #24
 800cae6:	6078      	str	r0, [r7, #4]
 800cae8:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 800caea:	6839      	ldr	r1, [r7, #0]
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f7ff fe78 	bl	800c7e2 <readPacket>
 800caf2:	4603      	mov	r3, r0
 800caf4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    int len = 0,
 800caf6:	2300      	movs	r3, #0
 800caf8:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESSS;
 800cafa:	2300      	movs	r3, #0
 800cafc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
 800cafe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cb00:	3b02      	subs	r3, #2
 800cb02:	2b0b      	cmp	r3, #11
 800cb04:	f200 80c0 	bhi.w	800cc88 <cycle+0x1a8>
 800cb08:	a201      	add	r2, pc, #4	; (adr r2, 800cb10 <cycle+0x30>)
 800cb0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb0e:	bf00      	nop
 800cb10:	0800cc89 	.word	0x0800cc89
 800cb14:	0800cb41 	.word	0x0800cb41
 800cb18:	0800cc89 	.word	0x0800cc89
 800cb1c:	0800cc09 	.word	0x0800cc09
 800cb20:	0800cc89 	.word	0x0800cc89
 800cb24:	0800cc89 	.word	0x0800cc89
 800cb28:	0800cc89 	.word	0x0800cc89
 800cb2c:	0800cc89 	.word	0x0800cc89
 800cb30:	0800cc89 	.word	0x0800cc89
 800cb34:	0800cc89 	.word	0x0800cc89
 800cb38:	0800cc89 	.word	0x0800cc89
 800cb3c:	0800cc7b 	.word	0x0800cc7b
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 800cb48:	4616      	mov	r6, r2
 800cb4a:	f107 0210 	add.w	r2, r7, #16
 800cb4e:	1d15      	adds	r5, r2, #4
 800cb50:	f107 0210 	add.w	r2, r7, #16
 800cb54:	1c54      	adds	r4, r2, #1
 800cb56:	f107 010c 	add.w	r1, r7, #12
 800cb5a:	f107 0210 	add.w	r2, r7, #16
 800cb5e:	1c90      	adds	r0, r2, #2
 800cb60:	9604      	str	r6, [sp, #16]
 800cb62:	9303      	str	r3, [sp, #12]
 800cb64:	f107 0310 	add.w	r3, r7, #16
 800cb68:	330c      	adds	r3, #12
 800cb6a:	9302      	str	r3, [sp, #8]
 800cb6c:	f107 0310 	add.w	r3, r7, #16
 800cb70:	3308      	adds	r3, #8
 800cb72:	9301      	str	r3, [sp, #4]
 800cb74:	f107 0320 	add.w	r3, r7, #32
 800cb78:	9300      	str	r3, [sp, #0]
 800cb7a:	462b      	mov	r3, r5
 800cb7c:	4622      	mov	r2, r4
 800cb7e:	f000 fd13 	bl	800d5a8 <MQTTDeserialize_publish>
 800cb82:	4603      	mov	r3, r0
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	f040 8083 	bne.w	800cc90 <cycle+0x1b0>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	b2db      	uxtb	r3, r3
 800cb8e:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 800cb90:	f107 0210 	add.w	r2, r7, #16
 800cb94:	f107 0320 	add.w	r3, r7, #32
 800cb98:	4619      	mov	r1, r3
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f7ff feee 	bl	800c97c <deliverMessage>
            if (msg.qos != QOS0)
 800cba0:	7c3b      	ldrb	r3, [r7, #16]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d06d      	beq.n	800cc82 <cycle+0x1a2>
            {
                if (msg.qos == QOS1)
 800cba6:	7c3b      	ldrb	r3, [r7, #16]
 800cba8:	2b01      	cmp	r3, #1
 800cbaa:	d10c      	bne.n	800cbc6 <cycle+0xe6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6918      	ldr	r0, [r3, #16]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	689b      	ldr	r3, [r3, #8]
 800cbb4:	4619      	mov	r1, r3
 800cbb6:	8abb      	ldrh	r3, [r7, #20]
 800cbb8:	9300      	str	r3, [sp, #0]
 800cbba:	2300      	movs	r3, #0
 800cbbc:	2204      	movs	r2, #4
 800cbbe:	f001 f84c 	bl	800dc5a <MQTTSerialize_ack>
 800cbc2:	6378      	str	r0, [r7, #52]	; 0x34
 800cbc4:	e00e      	b.n	800cbe4 <cycle+0x104>
                else if (msg.qos == QOS2)
 800cbc6:	7c3b      	ldrb	r3, [r7, #16]
 800cbc8:	2b02      	cmp	r3, #2
 800cbca:	d10b      	bne.n	800cbe4 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6918      	ldr	r0, [r3, #16]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	689b      	ldr	r3, [r3, #8]
 800cbd4:	4619      	mov	r1, r3
 800cbd6:	8abb      	ldrh	r3, [r7, #20]
 800cbd8:	9300      	str	r3, [sp, #0]
 800cbda:	2300      	movs	r3, #0
 800cbdc:	2205      	movs	r2, #5
 800cbde:	f001 f83c 	bl	800dc5a <MQTTSerialize_ack>
 800cbe2:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 800cbe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	dc03      	bgt.n	800cbf2 <cycle+0x112>
                    rc = FAILURE;
 800cbea:	f04f 33ff 	mov.w	r3, #4294967295
 800cbee:	633b      	str	r3, [r7, #48]	; 0x30
 800cbf0:	e005      	b.n	800cbfe <cycle+0x11e>
                else
                    rc = sendPacket(c, len, timer);
 800cbf2:	683a      	ldr	r2, [r7, #0]
 800cbf4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f7ff fd28 	bl	800c64c <sendPacket>
 800cbfc:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 800cbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc04:	d13d      	bne.n	800cc82 <cycle+0x1a2>
                    goto exit; // there was a problem
 800cc06:	e044      	b.n	800cc92 <cycle+0x1b2>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	695c      	ldr	r4, [r3, #20]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	68db      	ldr	r3, [r3, #12]
 800cc10:	f107 020a 	add.w	r2, r7, #10
 800cc14:	f107 0109 	add.w	r1, r7, #9
 800cc18:	f107 0008 	add.w	r0, r7, #8
 800cc1c:	9300      	str	r3, [sp, #0]
 800cc1e:	4623      	mov	r3, r4
 800cc20:	f000 fd34 	bl	800d68c <MQTTDeserialize_ack>
 800cc24:	4603      	mov	r3, r0
 800cc26:	2b01      	cmp	r3, #1
 800cc28:	d003      	beq.n	800cc32 <cycle+0x152>
                rc = FAILURE;
 800cc2a:	f04f 33ff 	mov.w	r3, #4294967295
 800cc2e:	633b      	str	r3, [r7, #48]	; 0x30
 800cc30:	e01e      	b.n	800cc70 <cycle+0x190>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6918      	ldr	r0, [r3, #16]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	689b      	ldr	r3, [r3, #8]
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	897b      	ldrh	r3, [r7, #10]
 800cc3e:	9300      	str	r3, [sp, #0]
 800cc40:	2300      	movs	r3, #0
 800cc42:	2206      	movs	r2, #6
 800cc44:	f001 f809 	bl	800dc5a <MQTTSerialize_ack>
 800cc48:	6378      	str	r0, [r7, #52]	; 0x34
 800cc4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	dc03      	bgt.n	800cc58 <cycle+0x178>
                rc = FAILURE;
 800cc50:	f04f 33ff 	mov.w	r3, #4294967295
 800cc54:	633b      	str	r3, [r7, #48]	; 0x30
 800cc56:	e00b      	b.n	800cc70 <cycle+0x190>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
 800cc58:	683a      	ldr	r2, [r7, #0]
 800cc5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f7ff fcf5 	bl	800c64c <sendPacket>
 800cc62:	6338      	str	r0, [r7, #48]	; 0x30
 800cc64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d002      	beq.n	800cc70 <cycle+0x190>
                rc = FAILURE; // there was a problem
 800cc6a:	f04f 33ff 	mov.w	r3, #4294967295
 800cc6e:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 800cc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc76:	d106      	bne.n	800cc86 <cycle+0x1a6>
                goto exit; // there was a problem
 800cc78:	e00b      	b.n	800cc92 <cycle+0x1b2>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	771a      	strb	r2, [r3, #28]
            break;
 800cc80:	e002      	b.n	800cc88 <cycle+0x1a8>
            break;
 800cc82:	bf00      	nop
 800cc84:	e000      	b.n	800cc88 <cycle+0x1a8>
            break;
 800cc86:	bf00      	nop
    }
    keepalive(c);
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f7ff fee2 	bl	800ca52 <keepalive>
 800cc8e:	e000      	b.n	800cc92 <cycle+0x1b2>
                goto exit;
 800cc90:	bf00      	nop
exit:
    if (rc == SUCCESSS)
 800cc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d101      	bne.n	800cc9c <cycle+0x1bc>
        rc = packet_type;
 800cc98:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cc9a:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
 800cc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	373c      	adds	r7, #60	; 0x3c
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cca6:	bf00      	nop

0800cca8 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b086      	sub	sp, #24
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	6039      	str	r1, [r7, #0]
    int rc = SUCCESSS;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 800ccb6:	f107 030c 	add.w	r3, r7, #12
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f000 f97d 	bl	800cfba <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 800ccc0:	683a      	ldr	r2, [r7, #0]
 800ccc2:	f107 030c 	add.w	r3, r7, #12
 800ccc6:	4611      	mov	r1, r2
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f000 f999 	bl	800d000 <TimerCountdownMS>

    if (cycle(c, &timer) == FAILURE)
 800ccce:	f107 030c 	add.w	r3, r7, #12
 800ccd2:	4619      	mov	r1, r3
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f7ff ff03 	bl	800cae0 <cycle>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cce0:	d102      	bne.n	800cce8 <MQTTYield+0x40>
    {
        rc = FAILURE;
 800cce2:	f04f 33ff 	mov.w	r3, #4294967295
 800cce6:	617b      	str	r3, [r7, #20]
    }

    return rc;
 800cce8:	697b      	ldr	r3, [r7, #20]
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3718      	adds	r7, #24
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}

0800ccf2 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 800ccf2:	b580      	push	{r7, lr}
 800ccf4:	b086      	sub	sp, #24
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	60f8      	str	r0, [r7, #12]
 800ccfa:	60b9      	str	r1, [r7, #8]
 800ccfc:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 800ccfe:	f04f 33ff 	mov.w	r3, #4294967295
 800cd02:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f000 f965 	bl	800cfd4 <TimerIsExpired>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d109      	bne.n	800cd24 <waitfor+0x32>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);
 800cd10:	6879      	ldr	r1, [r7, #4]
 800cd12:	68f8      	ldr	r0, [r7, #12]
 800cd14:	f7ff fee4 	bl	800cae0 <cycle>
 800cd18:	6178      	str	r0, [r7, #20]
 800cd1a:	697a      	ldr	r2, [r7, #20]
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	429a      	cmp	r2, r3
 800cd20:	d1f0      	bne.n	800cd04 <waitfor+0x12>
 800cd22:	e000      	b.n	800cd26 <waitfor+0x34>
            break; // we timed out
 800cd24:	bf00      	nop

    return rc;
 800cd26:	697b      	ldr	r3, [r7, #20]
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3718      	adds	r7, #24
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b09e      	sub	sp, #120	; 0x78
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 800cd3a:	f04f 33ff 	mov.w	r3, #4294967295
 800cd3e:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 800cd40:	4a3d      	ldr	r2, [pc, #244]	; (800ce38 <MQTTConnect+0x108>)
 800cd42:	f107 0310 	add.w	r3, r7, #16
 800cd46:	4611      	mov	r1, r2
 800cd48:	2258      	movs	r2, #88	; 0x58
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f001 fe68 	bl	800ea20 <memcpy>
    int len = 0;
 800cd50:	2300      	movs	r3, #0
 800cd52:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6a1b      	ldr	r3, [r3, #32]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d15d      	bne.n	800ce18 <MQTTConnect+0xe8>
		goto exit;

    TimerInit(&connect_timer);
 800cd5c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800cd60:	4618      	mov	r0, r3
 800cd62:	f000 f92a 	bl	800cfba <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	685a      	ldr	r2, [r3, #4]
 800cd6a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800cd6e:	4611      	mov	r1, r2
 800cd70:	4618      	mov	r0, r3
 800cd72:	f000 f945 	bl	800d000 <TimerCountdownMS>

    if (options == 0)
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d102      	bne.n	800cd82 <MQTTConnect+0x52>
        options = &default_options; /* set default options if none were supplied */
 800cd7c:	f107 0310 	add.w	r3, r7, #16
 800cd80:	603b      	str	r3, [r7, #0]

    c->keepAliveInterval = options->keepAliveInterval;
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	8b1b      	ldrh	r3, [r3, #24]
 800cd86:	461a      	mov	r2, r3
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	699b      	ldr	r3, [r3, #24]
 800cd96:	4619      	mov	r1, r3
 800cd98:	4610      	mov	r0, r2
 800cd9a:	f000 f945 	bl	800d028 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6918      	ldr	r0, [r3, #16]
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	689b      	ldr	r3, [r3, #8]
 800cda6:	683a      	ldr	r2, [r7, #0]
 800cda8:	4619      	mov	r1, r3
 800cdaa:	f000 fa75 	bl	800d298 <MQTTSerialize_connect>
 800cdae:	6738      	str	r0, [r7, #112]	; 0x70
 800cdb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	dd32      	ble.n	800ce1c <MQTTConnect+0xec>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
 800cdb6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800cdba:	461a      	mov	r2, r3
 800cdbc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f7ff fc44 	bl	800c64c <sendPacket>
 800cdc4:	6778      	str	r0, [r7, #116]	; 0x74
 800cdc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d129      	bne.n	800ce20 <MQTTConnect+0xf0>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 800cdcc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	2102      	movs	r1, #2
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f7ff ff8c 	bl	800ccf2 <waitfor>
 800cdda:	4603      	mov	r3, r0
 800cddc:	2b02      	cmp	r3, #2
 800cdde:	d117      	bne.n	800ce10 <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 800cde0:	23ff      	movs	r3, #255	; 0xff
 800cde2:	73fb      	strb	r3, [r7, #15]
        unsigned char sessionPresent = 0;
 800cde4:	2300      	movs	r3, #0
 800cde6:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	695a      	ldr	r2, [r3, #20]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	68db      	ldr	r3, [r3, #12]
 800cdf0:	f107 010f 	add.w	r1, r7, #15
 800cdf4:	f107 000e 	add.w	r0, r7, #14
 800cdf8:	f000 fb3a 	bl	800d470 <MQTTDeserialize_connack>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	2b01      	cmp	r3, #1
 800ce00:	d102      	bne.n	800ce08 <MQTTConnect+0xd8>
            rc = connack_rc;
 800ce02:	7bfb      	ldrb	r3, [r7, #15]
 800ce04:	677b      	str	r3, [r7, #116]	; 0x74
 800ce06:	e00c      	b.n	800ce22 <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 800ce08:	f04f 33ff 	mov.w	r3, #4294967295
 800ce0c:	677b      	str	r3, [r7, #116]	; 0x74
 800ce0e:	e008      	b.n	800ce22 <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 800ce10:	f04f 33ff 	mov.w	r3, #4294967295
 800ce14:	677b      	str	r3, [r7, #116]	; 0x74
 800ce16:	e004      	b.n	800ce22 <MQTTConnect+0xf2>
		goto exit;
 800ce18:	bf00      	nop
 800ce1a:	e002      	b.n	800ce22 <MQTTConnect+0xf2>
        goto exit;
 800ce1c:	bf00      	nop
 800ce1e:	e000      	b.n	800ce22 <MQTTConnect+0xf2>
        goto exit; // there was a problem
 800ce20:	bf00      	nop

exit:
    if (rc == SUCCESSS)
 800ce22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d102      	bne.n	800ce2e <MQTTConnect+0xfe>
        c->isconnected = 1;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
 800ce2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3778      	adds	r7, #120	; 0x78
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}
 800ce38:	08013ca0 	.word	0x08013ca0

0800ce3c <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 800ce3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce3e:	b097      	sub	sp, #92	; 0x5c
 800ce40:	af08      	add	r7, sp, #32
 800ce42:	60f8      	str	r0, [r7, #12]
 800ce44:	60b9      	str	r1, [r7, #8]
 800ce46:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 800ce48:	f04f 33ff 	mov.w	r3, #4294967295
 800ce4c:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	61fb      	str	r3, [r7, #28]
 800ce52:	2300      	movs	r3, #0
 800ce54:	623b      	str	r3, [r7, #32]
 800ce56:	2300      	movs	r3, #0
 800ce58:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	61fb      	str	r3, [r7, #28]
    int len = 0;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	6a1b      	ldr	r3, [r3, #32]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	f000 809b 	beq.w	800cfa2 <MQTTPublish+0x166>
		goto exit;

    TimerInit(&timer);
 800ce6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ce70:	4618      	mov	r0, r3
 800ce72:	f000 f8a2 	bl	800cfba <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	685a      	ldr	r2, [r3, #4]
 800ce7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ce7e:	4611      	mov	r1, r2
 800ce80:	4618      	mov	r0, r3
 800ce82:	f000 f8bd 	bl	800d000 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d003      	beq.n	800ce96 <MQTTPublish+0x5a>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	2b02      	cmp	r3, #2
 800ce94:	d106      	bne.n	800cea4 <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 800ce96:	68f8      	ldr	r0, [r7, #12]
 800ce98:	f7ff fbbf 	bl	800c61a <getNextPacketId>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	b29a      	uxth	r2, r3
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	691b      	ldr	r3, [r3, #16]
 800cea8:	603b      	str	r3, [r7, #0]
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	689b      	ldr	r3, [r3, #8]
 800ceae:	469c      	mov	ip, r3
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	469e      	mov	lr, r3
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	785d      	ldrb	r5, [r3, #1]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	689b      	ldr	r3, [r3, #8]
 800cec2:	687a      	ldr	r2, [r7, #4]
 800cec4:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 800cec6:	9206      	str	r2, [sp, #24]
 800cec8:	9305      	str	r3, [sp, #20]
 800ceca:	ac02      	add	r4, sp, #8
 800cecc:	f107 031c 	add.w	r3, r7, #28
 800ced0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ced4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ced8:	9601      	str	r6, [sp, #4]
 800ceda:	9500      	str	r5, [sp, #0]
 800cedc:	4673      	mov	r3, lr
 800cede:	2200      	movs	r2, #0
 800cee0:	4661      	mov	r1, ip
 800cee2:	6838      	ldr	r0, [r7, #0]
 800cee4:	f000 fe43 	bl	800db6e <MQTTSerialize_publish>
 800cee8:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 800ceea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	dd5a      	ble.n	800cfa6 <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 800cef0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cef4:	461a      	mov	r2, r3
 800cef6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cef8:	68f8      	ldr	r0, [r7, #12]
 800cefa:	f7ff fba7 	bl	800c64c <sendPacket>
 800cefe:	6378      	str	r0, [r7, #52]	; 0x34
 800cf00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d151      	bne.n	800cfaa <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	781b      	ldrb	r3, [r3, #0]
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	d122      	bne.n	800cf54 <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 800cf0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cf12:	461a      	mov	r2, r3
 800cf14:	2104      	movs	r1, #4
 800cf16:	68f8      	ldr	r0, [r7, #12]
 800cf18:	f7ff feeb 	bl	800ccf2 <waitfor>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	2b04      	cmp	r3, #4
 800cf20:	d114      	bne.n	800cf4c <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	695c      	ldr	r4, [r3, #20]
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	68db      	ldr	r3, [r3, #12]
 800cf2a:	f107 021a 	add.w	r2, r7, #26
 800cf2e:	f107 0119 	add.w	r1, r7, #25
 800cf32:	f107 0018 	add.w	r0, r7, #24
 800cf36:	9300      	str	r3, [sp, #0]
 800cf38:	4623      	mov	r3, r4
 800cf3a:	f000 fba7 	bl	800d68c <MQTTDeserialize_ack>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	2b01      	cmp	r3, #1
 800cf42:	d035      	beq.n	800cfb0 <MQTTPublish+0x174>
                rc = FAILURE;
 800cf44:	f04f 33ff 	mov.w	r3, #4294967295
 800cf48:	637b      	str	r3, [r7, #52]	; 0x34
 800cf4a:	e031      	b.n	800cfb0 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 800cf4c:	f04f 33ff 	mov.w	r3, #4294967295
 800cf50:	637b      	str	r3, [r7, #52]	; 0x34
 800cf52:	e02d      	b.n	800cfb0 <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	781b      	ldrb	r3, [r3, #0]
 800cf58:	2b02      	cmp	r3, #2
 800cf5a:	d128      	bne.n	800cfae <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 800cf5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cf60:	461a      	mov	r2, r3
 800cf62:	2107      	movs	r1, #7
 800cf64:	68f8      	ldr	r0, [r7, #12]
 800cf66:	f7ff fec4 	bl	800ccf2 <waitfor>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	2b07      	cmp	r3, #7
 800cf6e:	d114      	bne.n	800cf9a <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	695c      	ldr	r4, [r3, #20]
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	68db      	ldr	r3, [r3, #12]
 800cf78:	f107 0216 	add.w	r2, r7, #22
 800cf7c:	f107 0115 	add.w	r1, r7, #21
 800cf80:	f107 0014 	add.w	r0, r7, #20
 800cf84:	9300      	str	r3, [sp, #0]
 800cf86:	4623      	mov	r3, r4
 800cf88:	f000 fb80 	bl	800d68c <MQTTDeserialize_ack>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	2b01      	cmp	r3, #1
 800cf90:	d00e      	beq.n	800cfb0 <MQTTPublish+0x174>
                rc = FAILURE;
 800cf92:	f04f 33ff 	mov.w	r3, #4294967295
 800cf96:	637b      	str	r3, [r7, #52]	; 0x34
 800cf98:	e00a      	b.n	800cfb0 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 800cf9a:	f04f 33ff 	mov.w	r3, #4294967295
 800cf9e:	637b      	str	r3, [r7, #52]	; 0x34
 800cfa0:	e006      	b.n	800cfb0 <MQTTPublish+0x174>
		goto exit;
 800cfa2:	bf00      	nop
 800cfa4:	e004      	b.n	800cfb0 <MQTTPublish+0x174>
        goto exit;
 800cfa6:	bf00      	nop
 800cfa8:	e002      	b.n	800cfb0 <MQTTPublish+0x174>
        goto exit; // there was a problem
 800cfaa:	bf00      	nop
 800cfac:	e000      	b.n	800cfb0 <MQTTPublish+0x174>
    }

exit:
 800cfae:	bf00      	nop
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 800cfb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	373c      	adds	r7, #60	; 0x3c
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cfba <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 800cfba:	b480      	push	{r7}
 800cfbc:	b083      	sub	sp, #12
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	605a      	str	r2, [r3, #4]
}
 800cfc8:	bf00      	nop
 800cfca:	370c      	adds	r7, #12
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr

0800cfd4 <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 800cfd4:	b480      	push	{r7}
 800cfd6:	b085      	sub	sp, #20
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	685a      	ldr	r2, [r3, #4]
 800cfe0:	4b06      	ldr	r3, [pc, #24]	; (800cffc <TimerIsExpired+0x28>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	1ad3      	subs	r3, r2, r3
 800cfe6:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	0fdb      	lsrs	r3, r3, #31
 800cfec:	b2db      	uxtb	r3, r3
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3714      	adds	r7, #20
 800cff2:	46bd      	mov	sp, r7
 800cff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff8:	4770      	bx	lr
 800cffa:	bf00      	nop
 800cffc:	200038d0 	.word	0x200038d0

0800d000 <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 800d000:	b480      	push	{r7}
 800d002:	b083      	sub	sp, #12
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
 800d008:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 800d00a:	4b06      	ldr	r3, [pc, #24]	; (800d024 <TimerCountdownMS+0x24>)
 800d00c:	681a      	ldr	r2, [r3, #0]
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	441a      	add	r2, r3
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	605a      	str	r2, [r3, #4]
}
 800d016:	bf00      	nop
 800d018:	370c      	adds	r7, #12
 800d01a:	46bd      	mov	sp, r7
 800d01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d020:	4770      	bx	lr
 800d022:	bf00      	nop
 800d024:	200038d0 	.word	0x200038d0

0800d028 <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 800d028:	b480      	push	{r7}
 800d02a:	b083      	sub	sp, #12
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d038:	fb03 f202 	mul.w	r2, r3, r2
 800d03c:	4b05      	ldr	r3, [pc, #20]	; (800d054 <TimerCountdown+0x2c>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	441a      	add	r2, r3
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	605a      	str	r2, [r3, #4]
}
 800d046:	bf00      	nop
 800d048:	370c      	adds	r7, #12
 800d04a:	46bd      	mov	sp, r7
 800d04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d050:	4770      	bx	lr
 800d052:	bf00      	nop
 800d054:	200038d0 	.word	0x200038d0

0800d058 <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 800d058:	b480      	push	{r7}
 800d05a:	b085      	sub	sp, #20
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	685a      	ldr	r2, [r3, #4]
 800d064:	4b06      	ldr	r3, [pc, #24]	; (800d080 <TimerLeftMS+0x28>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	1ad3      	subs	r3, r2, r3
 800d06a:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 800d072:	4618      	mov	r0, r3
 800d074:	3714      	adds	r7, #20
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop
 800d080:	200038d0 	.word	0x200038d0

0800d084 <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	683a      	ldr	r2, [r7, #0]
 800d092:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	4a07      	ldr	r2, [pc, #28]	; (800d0b4 <NewNetwork+0x30>)
 800d098:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	4a06      	ldr	r2, [pc, #24]	; (800d0b8 <NewNetwork+0x34>)
 800d09e:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	4a06      	ldr	r2, [pc, #24]	; (800d0bc <NewNetwork+0x38>)
 800d0a4:	60da      	str	r2, [r3, #12]
}
 800d0a6:	bf00      	nop
 800d0a8:	370c      	adds	r7, #12
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b0:	4770      	bx	lr
 800d0b2:	bf00      	nop
 800d0b4:	0800d0c1 	.word	0x0800d0c1
 800d0b8:	0800d11b 	.word	0x0800d11b
 800d0bc:	0800d163 	.word	0x0800d163

0800d0c0 <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b084      	sub	sp, #16
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	60f8      	str	r0, [r7, #12]
 800d0c8:	60b9      	str	r1, [r7, #8]
 800d0ca:	607a      	str	r2, [r7, #4]
 800d0cc:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	009b      	lsls	r3, r3, #2
 800d0d4:	3301      	adds	r3, #1
 800d0d6:	00db      	lsls	r3, r3, #3
 800d0d8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7fd fe19 	bl	800ad14 <WIZCHIP_READ>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	2b17      	cmp	r3, #23
 800d0e6:	d113      	bne.n	800d110 <w5x00_read+0x50>
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	b2db      	uxtb	r3, r3
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f7fd ffb5 	bl	800b05e <getSn_RX_RSR>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d00a      	beq.n	800d110 <w5x00_read+0x50>
		return recv(n->my_socket, buffer, len);
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	b2db      	uxtb	r3, r3
 800d100:	687a      	ldr	r2, [r7, #4]
 800d102:	b292      	uxth	r2, r2
 800d104:	68b9      	ldr	r1, [r7, #8]
 800d106:	4618      	mov	r0, r3
 800d108:	f7fe fcc4 	bl	800ba94 <recv>
 800d10c:	4603      	mov	r3, r0
 800d10e:	e000      	b.n	800d112 <w5x00_read+0x52>

	return SOCK_ERROR;
 800d110:	2300      	movs	r3, #0
}
 800d112:	4618      	mov	r0, r3
 800d114:	3710      	adds	r7, #16
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}

0800d11a <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 800d11a:	b580      	push	{r7, lr}
 800d11c:	b084      	sub	sp, #16
 800d11e:	af00      	add	r7, sp, #0
 800d120:	60f8      	str	r0, [r7, #12]
 800d122:	60b9      	str	r1, [r7, #8]
 800d124:	607a      	str	r2, [r7, #4]
 800d126:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	009b      	lsls	r3, r3, #2
 800d12e:	3301      	adds	r3, #1
 800d130:	00db      	lsls	r3, r3, #3
 800d132:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800d136:	4618      	mov	r0, r3
 800d138:	f7fd fdec 	bl	800ad14 <WIZCHIP_READ>
 800d13c:	4603      	mov	r3, r0
 800d13e:	2b17      	cmp	r3, #23
 800d140:	d10a      	bne.n	800d158 <w5x00_write+0x3e>
		return send(n->my_socket, buffer, len);
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	b2db      	uxtb	r3, r3
 800d148:	687a      	ldr	r2, [r7, #4]
 800d14a:	b292      	uxth	r2, r2
 800d14c:	68b9      	ldr	r1, [r7, #8]
 800d14e:	4618      	mov	r0, r3
 800d150:	f7fe fba6 	bl	800b8a0 <send>
 800d154:	4603      	mov	r3, r0
 800d156:	e000      	b.n	800d15a <w5x00_write+0x40>

	return SOCK_ERROR;
 800d158:	2300      	movs	r3, #0
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	3710      	adds	r7, #16
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}

0800d162 <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 800d162:	b580      	push	{r7, lr}
 800d164:	b082      	sub	sp, #8
 800d166:	af00      	add	r7, sp, #0
 800d168:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	b2db      	uxtb	r3, r3
 800d170:	4618      	mov	r0, r3
 800d172:	f7fe fb1f 	bl	800b7b4 <disconnect>
}
 800d176:	bf00      	nop
 800d178:	3708      	adds	r7, #8
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}

0800d17e <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 800d17e:	b580      	push	{r7, lr}
 800d180:	b086      	sub	sp, #24
 800d182:	af00      	add	r7, sp, #0
 800d184:	60f8      	str	r0, [r7, #12]
 800d186:	60b9      	str	r1, [r7, #8]
 800d188:	4613      	mov	r3, r2
 800d18a:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 800d18c:	f243 0339 	movw	r3, #12345	; 0x3039
 800d190:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	b2d8      	uxtb	r0, r3
 800d198:	8afa      	ldrh	r2, [r7, #22]
 800d19a:	2300      	movs	r3, #0
 800d19c:	2101      	movs	r1, #1
 800d19e:	f7fe f8a9 	bl	800b2f4 <socket>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	461a      	mov	r2, r3
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	d001      	beq.n	800d1b2 <ConnectNetwork+0x34>
		return SOCK_ERROR;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	e00d      	b.n	800d1ce <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	b2db      	uxtb	r3, r3
 800d1b8:	88fa      	ldrh	r2, [r7, #6]
 800d1ba:	68b9      	ldr	r1, [r7, #8]
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f7fe fa1d 	bl	800b5fc <connect>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	2b01      	cmp	r3, #1
 800d1c6:	d001      	beq.n	800d1cc <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	e000      	b.n	800d1ce <ConnectNetwork+0x50>

	return SOCK_OK;
 800d1cc:	2301      	movs	r3, #1
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3718      	adds	r7, #24
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}

0800d1d6 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 800d1d6:	b590      	push	{r4, r7, lr}
 800d1d8:	b085      	sub	sp, #20
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6078      	str	r0, [r7, #4]
	int len = 0;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	7a1b      	ldrb	r3, [r3, #8]
 800d1e6:	2b03      	cmp	r3, #3
 800d1e8:	d102      	bne.n	800d1f0 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 800d1ea:	230c      	movs	r3, #12
 800d1ec:	60fb      	str	r3, [r7, #12]
 800d1ee:	e005      	b.n	800d1fc <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	7a1b      	ldrb	r3, [r3, #8]
 800d1f4:	2b04      	cmp	r3, #4
 800d1f6:	d101      	bne.n	800d1fc <MQTTSerialize_connectLength+0x26>
		len = 10;
 800d1f8:	230a      	movs	r3, #10
 800d1fa:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	330c      	adds	r3, #12
 800d200:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d204:	f000 fc43 	bl	800da8e <MQTTstrlen>
 800d208:	4603      	mov	r3, r0
 800d20a:	3302      	adds	r3, #2
 800d20c:	68fa      	ldr	r2, [r7, #12]
 800d20e:	4413      	add	r3, r2
 800d210:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	7edb      	ldrb	r3, [r3, #27]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d013      	beq.n	800d242 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	3324      	adds	r3, #36	; 0x24
 800d21e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d222:	f000 fc34 	bl	800da8e <MQTTstrlen>
 800d226:	4603      	mov	r3, r0
 800d228:	1c9c      	adds	r4, r3, #2
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	3330      	adds	r3, #48	; 0x30
 800d22e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d232:	f000 fc2c 	bl	800da8e <MQTTstrlen>
 800d236:	4603      	mov	r3, r0
 800d238:	4423      	add	r3, r4
 800d23a:	3302      	adds	r3, #2
 800d23c:	68fa      	ldr	r2, [r7, #12]
 800d23e:	4413      	add	r3, r2
 800d240:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d246:	2b00      	cmp	r3, #0
 800d248:	d103      	bne.n	800d252 <MQTTSerialize_connectLength+0x7c>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d00a      	beq.n	800d268 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	3340      	adds	r3, #64	; 0x40
 800d256:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d25a:	f000 fc18 	bl	800da8e <MQTTstrlen>
 800d25e:	4603      	mov	r3, r0
 800d260:	3302      	adds	r3, #2
 800d262:	68fa      	ldr	r2, [r7, #12]
 800d264:	4413      	add	r3, r2
 800d266:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d103      	bne.n	800d278 <MQTTSerialize_connectLength+0xa2>
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d274:	2b00      	cmp	r3, #0
 800d276:	d00a      	beq.n	800d28e <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	334c      	adds	r3, #76	; 0x4c
 800d27c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d280:	f000 fc05 	bl	800da8e <MQTTstrlen>
 800d284:	4603      	mov	r3, r0
 800d286:	3302      	adds	r3, #2
 800d288:	68fa      	ldr	r2, [r7, #12]
 800d28a:	4413      	add	r3, r2
 800d28c:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 800d28e:	68fb      	ldr	r3, [r7, #12]
}
 800d290:	4618      	mov	r0, r3
 800d292:	3714      	adds	r7, #20
 800d294:	46bd      	mov	sp, r7
 800d296:	bd90      	pop	{r4, r7, pc}

0800d298 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b08a      	sub	sp, #40	; 0x28
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	60f8      	str	r0, [r7, #12]
 800d2a0:	60b9      	str	r1, [r7, #8]
 800d2a2:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	617b      	str	r3, [r7, #20]
	int len = 0;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	623b      	str	r3, [r7, #32]
	int rc = -1;
 800d2b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d2b8:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f7ff ff8b 	bl	800d1d6 <MQTTSerialize_connectLength>
 800d2c0:	6238      	str	r0, [r7, #32]
 800d2c2:	6a38      	ldr	r0, [r7, #32]
 800d2c4:	f000 fa98 	bl	800d7f8 <MQTTPacket_len>
 800d2c8:	4602      	mov	r2, r0
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	da03      	bge.n	800d2d8 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800d2d0:	f06f 0301 	mvn.w	r3, #1
 800d2d4:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 800d2d6:	e0c2      	b.n	800d45e <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 800d2dc:	7e3b      	ldrb	r3, [r7, #24]
 800d2de:	2201      	movs	r2, #1
 800d2e0:	f362 1307 	bfi	r3, r2, #4, #4
 800d2e4:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800d2e6:	7e3a      	ldrb	r2, [r7, #24]
 800d2e8:	f107 031c 	add.w	r3, r7, #28
 800d2ec:	4611      	mov	r1, r2
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f000 fb11 	bl	800d916 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 800d2f4:	69fb      	ldr	r3, [r7, #28]
 800d2f6:	6a39      	ldr	r1, [r7, #32]
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f000 fa12 	bl	800d722 <MQTTPacket_encode>
 800d2fe:	4602      	mov	r2, r0
 800d300:	69fb      	ldr	r3, [r7, #28]
 800d302:	4413      	add	r3, r2
 800d304:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	7a1b      	ldrb	r3, [r3, #8]
 800d30a:	2b04      	cmp	r3, #4
 800d30c:	d10c      	bne.n	800d328 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 800d30e:	f107 031c 	add.w	r3, r7, #28
 800d312:	4955      	ldr	r1, [pc, #340]	; (800d468 <MQTTSerialize_connect+0x1d0>)
 800d314:	4618      	mov	r0, r3
 800d316:	f000 fb3c 	bl	800d992 <writeCString>
		writeChar(&ptr, (char) 4);
 800d31a:	f107 031c 	add.w	r3, r7, #28
 800d31e:	2104      	movs	r1, #4
 800d320:	4618      	mov	r0, r3
 800d322:	f000 faf8 	bl	800d916 <writeChar>
 800d326:	e00b      	b.n	800d340 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 800d328:	f107 031c 	add.w	r3, r7, #28
 800d32c:	494f      	ldr	r1, [pc, #316]	; (800d46c <MQTTSerialize_connect+0x1d4>)
 800d32e:	4618      	mov	r0, r3
 800d330:	f000 fb2f 	bl	800d992 <writeCString>
		writeChar(&ptr, (char) 3);
 800d334:	f107 031c 	add.w	r3, r7, #28
 800d338:	2103      	movs	r1, #3
 800d33a:	4618      	mov	r0, r3
 800d33c:	f000 faeb 	bl	800d916 <writeChar>
	}

	flags.all = 0;
 800d340:	2300      	movs	r3, #0
 800d342:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	7e9b      	ldrb	r3, [r3, #26]
 800d348:	f003 0301 	and.w	r3, r3, #1
 800d34c:	b2da      	uxtb	r2, r3
 800d34e:	7d3b      	ldrb	r3, [r7, #20]
 800d350:	f362 0341 	bfi	r3, r2, #1, #1
 800d354:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	7edb      	ldrb	r3, [r3, #27]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	bf14      	ite	ne
 800d35e:	2301      	movne	r3, #1
 800d360:	2300      	moveq	r3, #0
 800d362:	b2da      	uxtb	r2, r3
 800d364:	7d3b      	ldrb	r3, [r7, #20]
 800d366:	f362 0382 	bfi	r3, r2, #2, #1
 800d36a:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 800d36c:	7d3b      	ldrb	r3, [r7, #20]
 800d36e:	f003 0304 	and.w	r3, r3, #4
 800d372:	b2db      	uxtb	r3, r3
 800d374:	2b00      	cmp	r3, #0
 800d376:	d013      	beq.n	800d3a0 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d37e:	f003 0303 	and.w	r3, r3, #3
 800d382:	b2da      	uxtb	r2, r3
 800d384:	7d3b      	ldrb	r3, [r7, #20]
 800d386:	f362 03c4 	bfi	r3, r2, #3, #2
 800d38a:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d392:	f003 0301 	and.w	r3, r3, #1
 800d396:	b2da      	uxtb	r2, r3
 800d398:	7d3b      	ldrb	r3, [r7, #20]
 800d39a:	f362 1345 	bfi	r3, r2, #5, #1
 800d39e:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d103      	bne.n	800d3b0 <MQTTSerialize_connect+0x118>
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d003      	beq.n	800d3b8 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 800d3b0:	7d3b      	ldrb	r3, [r7, #20]
 800d3b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3b6:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d103      	bne.n	800d3c8 <MQTTSerialize_connect+0x130>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d003      	beq.n	800d3d0 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 800d3c8:	7d3b      	ldrb	r3, [r7, #20]
 800d3ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3ce:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 800d3d0:	7d3a      	ldrb	r2, [r7, #20]
 800d3d2:	f107 031c 	add.w	r3, r7, #28
 800d3d6:	4611      	mov	r1, r2
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f000 fa9c 	bl	800d916 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	8b1b      	ldrh	r3, [r3, #24]
 800d3e2:	461a      	mov	r2, r3
 800d3e4:	f107 031c 	add.w	r3, r7, #28
 800d3e8:	4611      	mov	r1, r2
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f000 faa8 	bl	800d940 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f107 001c 	add.w	r0, r7, #28
 800d3f6:	330c      	adds	r3, #12
 800d3f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d3fa:	f000 fae9 	bl	800d9d0 <writeMQTTString>
	if (options->willFlag)
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	7edb      	ldrb	r3, [r3, #27]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d00d      	beq.n	800d422 <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f107 001c 	add.w	r0, r7, #28
 800d40c:	3324      	adds	r3, #36	; 0x24
 800d40e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d410:	f000 fade 	bl	800d9d0 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f107 001c 	add.w	r0, r7, #28
 800d41a:	3330      	adds	r3, #48	; 0x30
 800d41c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d41e:	f000 fad7 	bl	800d9d0 <writeMQTTString>
	}
	if (flags.bits.username)
 800d422:	7d3b      	ldrb	r3, [r7, #20]
 800d424:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d428:	b2db      	uxtb	r3, r3
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d006      	beq.n	800d43c <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f107 001c 	add.w	r0, r7, #28
 800d434:	3340      	adds	r3, #64	; 0x40
 800d436:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d438:	f000 faca 	bl	800d9d0 <writeMQTTString>
	if (flags.bits.password)
 800d43c:	7d3b      	ldrb	r3, [r7, #20]
 800d43e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d442:	b2db      	uxtb	r3, r3
 800d444:	2b00      	cmp	r3, #0
 800d446:	d006      	beq.n	800d456 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f107 001c 	add.w	r0, r7, #28
 800d44e:	334c      	adds	r3, #76	; 0x4c
 800d450:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d452:	f000 fabd 	bl	800d9d0 <writeMQTTString>

	rc = ptr - buf;
 800d456:	69fa      	ldr	r2, [r7, #28]
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	1ad3      	subs	r3, r2, r3
 800d45c:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 800d45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d460:	4618      	mov	r0, r3
 800d462:	3728      	adds	r7, #40	; 0x28
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}
 800d468:	08013cf8 	.word	0x08013cf8
 800d46c:	08013d00 	.word	0x08013d00

0800d470 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b08a      	sub	sp, #40	; 0x28
 800d474:	af00      	add	r7, sp, #0
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	60b9      	str	r1, [r7, #8]
 800d47a:	607a      	str	r2, [r7, #4]
 800d47c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800d47e:	2300      	movs	r3, #0
 800d480:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800d486:	2300      	movs	r3, #0
 800d488:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800d48a:	2300      	movs	r3, #0
 800d48c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 800d48e:	2300      	movs	r3, #0
 800d490:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800d492:	f107 0318 	add.w	r3, r7, #24
 800d496:	4618      	mov	r0, r3
 800d498:	f000 fa29 	bl	800d8ee <readChar>
 800d49c:	4603      	mov	r3, r0
 800d49e:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 800d4a0:	7f3b      	ldrb	r3, [r7, #28]
 800d4a2:	f023 030f 	bic.w	r3, r3, #15
 800d4a6:	b2db      	uxtb	r3, r3
 800d4a8:	2b20      	cmp	r3, #32
 800d4aa:	d12e      	bne.n	800d50a <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d4ac:	69bb      	ldr	r3, [r7, #24]
 800d4ae:	f107 0214 	add.w	r2, r7, #20
 800d4b2:	4611      	mov	r1, r2
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f000 f9e9 	bl	800d88c <MQTTPacket_decodeBuf>
 800d4ba:	6278      	str	r0, [r7, #36]	; 0x24
 800d4bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4be:	69bb      	ldr	r3, [r7, #24]
 800d4c0:	4413      	add	r3, r2
 800d4c2:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800d4c4:	69bb      	ldr	r3, [r7, #24]
 800d4c6:	697a      	ldr	r2, [r7, #20]
 800d4c8:	4413      	add	r3, r2
 800d4ca:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 800d4cc:	69bb      	ldr	r3, [r7, #24]
 800d4ce:	6a3a      	ldr	r2, [r7, #32]
 800d4d0:	1ad3      	subs	r3, r2, r3
 800d4d2:	2b01      	cmp	r3, #1
 800d4d4:	dd1b      	ble.n	800d50e <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 800d4d6:	f107 0318 	add.w	r3, r7, #24
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f000 fa07 	bl	800d8ee <readChar>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 800d4e4:	7c3b      	ldrb	r3, [r7, #16]
 800d4e6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d4ea:	b2db      	uxtb	r3, r3
 800d4ec:	461a      	mov	r2, r3
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 800d4f2:	f107 0318 	add.w	r3, r7, #24
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f000 f9f9 	bl	800d8ee <readChar>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	461a      	mov	r2, r3
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	701a      	strb	r2, [r3, #0]

	rc = 1;
 800d504:	2301      	movs	r3, #1
 800d506:	627b      	str	r3, [r7, #36]	; 0x24
 800d508:	e002      	b.n	800d510 <MQTTDeserialize_connack+0xa0>
		goto exit;
 800d50a:	bf00      	nop
 800d50c:	e000      	b.n	800d510 <MQTTDeserialize_connack+0xa0>
		goto exit;
 800d50e:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800d510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d512:	4618      	mov	r0, r3
 800d514:	3728      	adds	r7, #40	; 0x28
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}

0800d51a <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 800d51a:	b580      	push	{r7, lr}
 800d51c:	b088      	sub	sp, #32
 800d51e:	af00      	add	r7, sp, #0
 800d520:	60f8      	str	r0, [r7, #12]
 800d522:	60b9      	str	r1, [r7, #8]
 800d524:	4613      	mov	r3, r2
 800d526:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 800d528:	2300      	movs	r3, #0
 800d52a:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 800d52c:	f04f 33ff 	mov.w	r3, #4294967295
 800d530:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	2b01      	cmp	r3, #1
 800d53a:	dc03      	bgt.n	800d544 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800d53c:	f06f 0301 	mvn.w	r3, #1
 800d540:	61fb      	str	r3, [r7, #28]
		goto exit;
 800d542:	e01d      	b.n	800d580 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 800d544:	2300      	movs	r3, #0
 800d546:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 800d548:	79fb      	ldrb	r3, [r7, #7]
 800d54a:	f003 030f 	and.w	r3, r3, #15
 800d54e:	b2da      	uxtb	r2, r3
 800d550:	7e3b      	ldrb	r3, [r7, #24]
 800d552:	f362 1307 	bfi	r3, r2, #4, #4
 800d556:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800d558:	7e3a      	ldrb	r2, [r7, #24]
 800d55a:	f107 0314 	add.w	r3, r7, #20
 800d55e:	4611      	mov	r1, r2
 800d560:	4618      	mov	r0, r3
 800d562:	f000 f9d8 	bl	800d916 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	2100      	movs	r1, #0
 800d56a:	4618      	mov	r0, r3
 800d56c:	f000 f8d9 	bl	800d722 <MQTTPacket_encode>
 800d570:	4602      	mov	r2, r0
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	4413      	add	r3, r2
 800d576:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 800d578:	697a      	ldr	r2, [r7, #20]
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	1ad3      	subs	r3, r2, r3
 800d57e:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800d580:	69fb      	ldr	r3, [r7, #28]
}
 800d582:	4618      	mov	r0, r3
 800d584:	3720      	adds	r7, #32
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}

0800d58a <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 800d58a:	b580      	push	{r7, lr}
 800d58c:	b082      	sub	sp, #8
 800d58e:	af00      	add	r7, sp, #0
 800d590:	6078      	str	r0, [r7, #4]
 800d592:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 800d594:	220c      	movs	r2, #12
 800d596:	6839      	ldr	r1, [r7, #0]
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f7ff ffbe 	bl	800d51a <MQTTSerialize_zero>
 800d59e:	4603      	mov	r3, r0
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3708      	adds	r7, #8
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b08a      	sub	sp, #40	; 0x28
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	60f8      	str	r0, [r7, #12]
 800d5b0:	60b9      	str	r1, [r7, #8]
 800d5b2:	607a      	str	r2, [r7, #4]
 800d5b4:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800d5ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5bc:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800d5ca:	f107 0318 	add.w	r3, r7, #24
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f000 f98d 	bl	800d8ee <readChar>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 800d5d8:	7f3b      	ldrb	r3, [r7, #28]
 800d5da:	f023 030f 	bic.w	r3, r3, #15
 800d5de:	b2db      	uxtb	r3, r3
 800d5e0:	2b30      	cmp	r3, #48	; 0x30
 800d5e2:	d14b      	bne.n	800d67c <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 800d5e4:	7f3b      	ldrb	r3, [r7, #28]
 800d5e6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800d5ea:	b2db      	uxtb	r3, r3
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 800d5f2:	7f3b      	ldrb	r3, [r7, #28]
 800d5f4:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800d5f8:	b2db      	uxtb	r3, r3
 800d5fa:	461a      	mov	r2, r3
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 800d600:	7f3b      	ldrb	r3, [r7, #28]
 800d602:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d606:	b2db      	uxtb	r3, r3
 800d608:	461a      	mov	r2, r3
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d60e:	69bb      	ldr	r3, [r7, #24]
 800d610:	f107 0214 	add.w	r2, r7, #20
 800d614:	4611      	mov	r1, r2
 800d616:	4618      	mov	r0, r3
 800d618:	f000 f938 	bl	800d88c <MQTTPacket_decodeBuf>
 800d61c:	6278      	str	r0, [r7, #36]	; 0x24
 800d61e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d620:	69bb      	ldr	r3, [r7, #24]
 800d622:	4413      	add	r3, r2
 800d624:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800d626:	69bb      	ldr	r3, [r7, #24]
 800d628:	697a      	ldr	r2, [r7, #20]
 800d62a:	4413      	add	r3, r2
 800d62c:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800d62e:	f107 0318 	add.w	r3, r7, #24
 800d632:	6a3a      	ldr	r2, [r7, #32]
 800d634:	4619      	mov	r1, r3
 800d636:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d638:	f000 f9f8 	bl	800da2c <readMQTTLenString>
 800d63c:	4603      	mov	r3, r0
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d01e      	beq.n	800d680 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 800d642:	69bb      	ldr	r3, [r7, #24]
 800d644:	6a3a      	ldr	r2, [r7, #32]
 800d646:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800d648:	2b00      	cmp	r3, #0
 800d64a:	db19      	blt.n	800d680 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	2b00      	cmp	r3, #0
 800d652:	dd08      	ble.n	800d666 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 800d654:	f107 0318 	add.w	r3, r7, #24
 800d658:	4618      	mov	r0, r3
 800d65a:	f000 f92d 	bl	800d8b8 <readInt>
 800d65e:	4603      	mov	r3, r0
 800d660:	b29a      	uxth	r2, r3
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 800d666:	69bb      	ldr	r3, [r7, #24]
 800d668:	6a3a      	ldr	r2, [r7, #32]
 800d66a:	1ad2      	subs	r2, r2, r3
 800d66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d66e:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 800d670:	69ba      	ldr	r2, [r7, #24]
 800d672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d674:	601a      	str	r2, [r3, #0]
	rc = 1;
 800d676:	2301      	movs	r3, #1
 800d678:	627b      	str	r3, [r7, #36]	; 0x24
 800d67a:	e002      	b.n	800d682 <MQTTDeserialize_publish+0xda>
		goto exit;
 800d67c:	bf00      	nop
 800d67e:	e000      	b.n	800d682 <MQTTDeserialize_publish+0xda>
		goto exit;
 800d680:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800d682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d684:	4618      	mov	r0, r3
 800d686:	3728      	adds	r7, #40	; 0x28
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}

0800d68c <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b08a      	sub	sp, #40	; 0x28
 800d690:	af00      	add	r7, sp, #0
 800d692:	60f8      	str	r0, [r7, #12]
 800d694:	60b9      	str	r1, [r7, #8]
 800d696:	607a      	str	r2, [r7, #4]
 800d698:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800d69a:	2300      	movs	r3, #0
 800d69c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800d6aa:	f107 0318 	add.w	r3, r7, #24
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f000 f91d 	bl	800d8ee <readChar>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 800d6b8:	7f3b      	ldrb	r3, [r7, #28]
 800d6ba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800d6be:	b2db      	uxtb	r3, r3
 800d6c0:	461a      	mov	r2, r3
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 800d6c6:	7f3b      	ldrb	r3, [r7, #28]
 800d6c8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800d6cc:	b2db      	uxtb	r3, r3
 800d6ce:	461a      	mov	r2, r3
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d6d4:	69bb      	ldr	r3, [r7, #24]
 800d6d6:	f107 0214 	add.w	r2, r7, #20
 800d6da:	4611      	mov	r1, r2
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f000 f8d5 	bl	800d88c <MQTTPacket_decodeBuf>
 800d6e2:	6278      	str	r0, [r7, #36]	; 0x24
 800d6e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6e6:	69bb      	ldr	r3, [r7, #24]
 800d6e8:	4413      	add	r3, r2
 800d6ea:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800d6ec:	69bb      	ldr	r3, [r7, #24]
 800d6ee:	697a      	ldr	r2, [r7, #20]
 800d6f0:	4413      	add	r3, r2
 800d6f2:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 800d6f4:	69bb      	ldr	r3, [r7, #24]
 800d6f6:	6a3a      	ldr	r2, [r7, #32]
 800d6f8:	1ad3      	subs	r3, r2, r3
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	dd0b      	ble.n	800d716 <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 800d6fe:	f107 0318 	add.w	r3, r7, #24
 800d702:	4618      	mov	r0, r3
 800d704:	f000 f8d8 	bl	800d8b8 <readInt>
 800d708:	4603      	mov	r3, r0
 800d70a:	b29a      	uxth	r2, r3
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	801a      	strh	r2, [r3, #0]

	rc = 1;
 800d710:	2301      	movs	r3, #1
 800d712:	627b      	str	r3, [r7, #36]	; 0x24
 800d714:	e000      	b.n	800d718 <MQTTDeserialize_ack+0x8c>
		goto exit;
 800d716:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800d718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3728      	adds	r7, #40	; 0x28
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}

0800d722 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 800d722:	b480      	push	{r7}
 800d724:	b085      	sub	sp, #20
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
 800d72a:	6039      	str	r1, [r7, #0]
	int rc = 0;
 800d72c:	2300      	movs	r3, #0
 800d72e:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	425a      	negs	r2, r3
 800d734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d738:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d73c:	bf58      	it	pl
 800d73e:	4253      	negpl	r3, r2
 800d740:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	2b00      	cmp	r3, #0
 800d746:	da00      	bge.n	800d74a <MQTTPacket_encode+0x28>
 800d748:	337f      	adds	r3, #127	; 0x7f
 800d74a:	11db      	asrs	r3, r3, #7
 800d74c:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	2b00      	cmp	r3, #0
 800d752:	dd03      	ble.n	800d75c <MQTTPacket_encode+0x3a>
			d |= 0x80;
 800d754:	7afb      	ldrb	r3, [r7, #11]
 800d756:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d75a:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	1c5a      	adds	r2, r3, #1
 800d760:	60fa      	str	r2, [r7, #12]
 800d762:	461a      	mov	r2, r3
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	4413      	add	r3, r2
 800d768:	7afa      	ldrb	r2, [r7, #11]
 800d76a:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	dcde      	bgt.n	800d730 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 800d772:	68fb      	ldr	r3, [r7, #12]
}
 800d774:	4618      	mov	r0, r3
 800d776:	3714      	adds	r7, #20
 800d778:	46bd      	mov	sp, r7
 800d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77e:	4770      	bx	lr

0800d780 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b086      	sub	sp, #24
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
 800d788:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 800d78a:	2301      	movs	r3, #1
 800d78c:	617b      	str	r3, [r7, #20]
	int len = 0;
 800d78e:	2300      	movs	r3, #0
 800d790:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	2200      	movs	r2, #0
 800d796:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 800d798:	f04f 33ff 	mov.w	r3, #4294967295
 800d79c:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	3301      	adds	r3, #1
 800d7a2:	613b      	str	r3, [r7, #16]
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	2b04      	cmp	r3, #4
 800d7a8:	dd03      	ble.n	800d7b2 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 800d7aa:	f04f 33ff 	mov.w	r3, #4294967295
 800d7ae:	60fb      	str	r3, [r7, #12]
			goto exit;
 800d7b0:	e01d      	b.n	800d7ee <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 800d7b2:	f107 020b 	add.w	r2, r7, #11
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2101      	movs	r1, #1
 800d7ba:	4610      	mov	r0, r2
 800d7bc:	4798      	blx	r3
 800d7be:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	2b01      	cmp	r3, #1
 800d7c4:	d112      	bne.n	800d7ec <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	681a      	ldr	r2, [r3, #0]
 800d7ca:	7afb      	ldrb	r3, [r7, #11]
 800d7cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7d0:	6979      	ldr	r1, [r7, #20]
 800d7d2:	fb01 f303 	mul.w	r3, r1, r3
 800d7d6:	441a      	add	r2, r3
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	01db      	lsls	r3, r3, #7
 800d7e0:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 800d7e2:	7afb      	ldrb	r3, [r7, #11]
 800d7e4:	b25b      	sxtb	r3, r3
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	dbd6      	blt.n	800d798 <MQTTPacket_decode+0x18>
exit:
 800d7ea:	e000      	b.n	800d7ee <MQTTPacket_decode+0x6e>
			goto exit;
 800d7ec:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 800d7ee:	693b      	ldr	r3, [r7, #16]
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3718      	adds	r7, #24
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}

0800d7f8 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b083      	sub	sp, #12
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	3301      	adds	r3, #1
 800d804:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2b7f      	cmp	r3, #127	; 0x7f
 800d80a:	dc03      	bgt.n	800d814 <MQTTPacket_len+0x1c>
		rem_len += 1;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	3301      	adds	r3, #1
 800d810:	607b      	str	r3, [r7, #4]
 800d812:	e012      	b.n	800d83a <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d81a:	da03      	bge.n	800d824 <MQTTPacket_len+0x2c>
		rem_len += 2;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	3302      	adds	r3, #2
 800d820:	607b      	str	r3, [r7, #4]
 800d822:	e00a      	b.n	800d83a <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	4a08      	ldr	r2, [pc, #32]	; (800d848 <MQTTPacket_len+0x50>)
 800d828:	4293      	cmp	r3, r2
 800d82a:	dc03      	bgt.n	800d834 <MQTTPacket_len+0x3c>
		rem_len += 3;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	3303      	adds	r3, #3
 800d830:	607b      	str	r3, [r7, #4]
 800d832:	e002      	b.n	800d83a <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	3304      	adds	r3, #4
 800d838:	607b      	str	r3, [r7, #4]
	return rem_len;
 800d83a:	687b      	ldr	r3, [r7, #4]
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	370c      	adds	r7, #12
 800d840:	46bd      	mov	sp, r7
 800d842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d846:	4770      	bx	lr
 800d848:	001ffffe 	.word	0x001ffffe

0800d84c <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 800d84c:	b480      	push	{r7}
 800d84e:	b085      	sub	sp, #20
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
 800d854:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 800d856:	2300      	movs	r3, #0
 800d858:	60fb      	str	r3, [r7, #12]
 800d85a:	e00a      	b.n	800d872 <bufchar+0x26>
		*c = *bufptr++;
 800d85c:	4b0a      	ldr	r3, [pc, #40]	; (800d888 <bufchar+0x3c>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	1c5a      	adds	r2, r3, #1
 800d862:	4909      	ldr	r1, [pc, #36]	; (800d888 <bufchar+0x3c>)
 800d864:	600a      	str	r2, [r1, #0]
 800d866:	781a      	ldrb	r2, [r3, #0]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	3301      	adds	r3, #1
 800d870:	60fb      	str	r3, [r7, #12]
 800d872:	68fa      	ldr	r2, [r7, #12]
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	429a      	cmp	r2, r3
 800d878:	dbf0      	blt.n	800d85c <bufchar+0x10>
	return count;
 800d87a:	683b      	ldr	r3, [r7, #0]
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3714      	adds	r7, #20
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr
 800d888:	200038d4 	.word	0x200038d4

0800d88c <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b082      	sub	sp, #8
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 800d896:	4a06      	ldr	r2, [pc, #24]	; (800d8b0 <MQTTPacket_decodeBuf+0x24>)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 800d89c:	6839      	ldr	r1, [r7, #0]
 800d89e:	4805      	ldr	r0, [pc, #20]	; (800d8b4 <MQTTPacket_decodeBuf+0x28>)
 800d8a0:	f7ff ff6e 	bl	800d780 <MQTTPacket_decode>
 800d8a4:	4603      	mov	r3, r0
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3708      	adds	r7, #8
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}
 800d8ae:	bf00      	nop
 800d8b0:	200038d4 	.word	0x200038d4
 800d8b4:	0800d84d 	.word	0x0800d84d

0800d8b8 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b085      	sub	sp, #20
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	781b      	ldrb	r3, [r3, #0]
 800d8ca:	021b      	lsls	r3, r3, #8
 800d8cc:	68fa      	ldr	r2, [r7, #12]
 800d8ce:	3201      	adds	r2, #1
 800d8d0:	7812      	ldrb	r2, [r2, #0]
 800d8d2:	4413      	add	r3, r2
 800d8d4:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	1c9a      	adds	r2, r3, #2
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	601a      	str	r2, [r3, #0]
	return len;
 800d8e0:	68bb      	ldr	r3, [r7, #8]
}
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	3714      	adds	r7, #20
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ec:	4770      	bx	lr

0800d8ee <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 800d8ee:	b480      	push	{r7}
 800d8f0:	b085      	sub	sp, #20
 800d8f2:	af00      	add	r7, sp, #0
 800d8f4:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	781b      	ldrb	r3, [r3, #0]
 800d8fc:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	1c5a      	adds	r2, r3, #1
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	601a      	str	r2, [r3, #0]
	return c;
 800d908:	7bfb      	ldrb	r3, [r7, #15]
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3714      	adds	r7, #20
 800d90e:	46bd      	mov	sp, r7
 800d910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d914:	4770      	bx	lr

0800d916 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 800d916:	b480      	push	{r7}
 800d918:	b083      	sub	sp, #12
 800d91a:	af00      	add	r7, sp, #0
 800d91c:	6078      	str	r0, [r7, #4]
 800d91e:	460b      	mov	r3, r1
 800d920:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	78fa      	ldrb	r2, [r7, #3]
 800d928:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	1c5a      	adds	r2, r3, #1
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	601a      	str	r2, [r3, #0]
}
 800d934:	bf00      	nop
 800d936:	370c      	adds	r7, #12
 800d938:	46bd      	mov	sp, r7
 800d93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93e:	4770      	bx	lr

0800d940 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 800d940:	b480      	push	{r7}
 800d942:	b083      	sub	sp, #12
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
 800d948:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	da00      	bge.n	800d952 <writeInt+0x12>
 800d950:	33ff      	adds	r3, #255	; 0xff
 800d952:	121b      	asrs	r3, r3, #8
 800d954:	461a      	mov	r2, r3
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	b2d2      	uxtb	r2, r2
 800d95c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	1c5a      	adds	r2, r3, #1
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	425a      	negs	r2, r3
 800d96c:	b2db      	uxtb	r3, r3
 800d96e:	b2d2      	uxtb	r2, r2
 800d970:	bf58      	it	pl
 800d972:	4253      	negpl	r3, r2
 800d974:	687a      	ldr	r2, [r7, #4]
 800d976:	6812      	ldr	r2, [r2, #0]
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	1c5a      	adds	r2, r3, #1
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	601a      	str	r2, [r3, #0]
}
 800d986:	bf00      	nop
 800d988:	370c      	adds	r7, #12
 800d98a:	46bd      	mov	sp, r7
 800d98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d990:	4770      	bx	lr

0800d992 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 800d992:	b580      	push	{r7, lr}
 800d994:	b084      	sub	sp, #16
 800d996:	af00      	add	r7, sp, #0
 800d998:	6078      	str	r0, [r7, #4]
 800d99a:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 800d99c:	6838      	ldr	r0, [r7, #0]
 800d99e:	f7f2 fc1f 	bl	80001e0 <strlen>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 800d9a6:	68f9      	ldr	r1, [r7, #12]
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f7ff ffc9 	bl	800d940 <writeInt>
	memcpy(*pptr, string, len);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	68fa      	ldr	r2, [r7, #12]
 800d9b4:	6839      	ldr	r1, [r7, #0]
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f001 f832 	bl	800ea20 <memcpy>
	*pptr += len;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681a      	ldr	r2, [r3, #0]
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	441a      	add	r2, r3
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	601a      	str	r2, [r3, #0]
}
 800d9c8:	bf00      	nop
 800d9ca:	3710      	adds	r7, #16
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}

0800d9d0 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b084      	sub	sp, #16
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	60f8      	str	r0, [r7, #12]
 800d9d8:	4638      	mov	r0, r7
 800d9da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	dd12      	ble.n	800da0a <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	4619      	mov	r1, r3
 800d9e8:	68f8      	ldr	r0, [r7, #12]
 800d9ea:	f7ff ffa9 	bl	800d940 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	68b9      	ldr	r1, [r7, #8]
 800d9f4:	687a      	ldr	r2, [r7, #4]
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f001 f812 	bl	800ea20 <memcpy>
		*pptr += mqttstring.lenstring.len;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	687a      	ldr	r2, [r7, #4]
 800da02:	441a      	add	r2, r3
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 800da08:	e00c      	b.n	800da24 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d005      	beq.n	800da1c <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	4619      	mov	r1, r3
 800da14:	68f8      	ldr	r0, [r7, #12]
 800da16:	f7ff ffbc 	bl	800d992 <writeCString>
}
 800da1a:	e003      	b.n	800da24 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 800da1c:	2100      	movs	r1, #0
 800da1e:	68f8      	ldr	r0, [r7, #12]
 800da20:	f7ff ff8e 	bl	800d940 <writeInt>
}
 800da24:	bf00      	nop
 800da26:	3710      	adds	r7, #16
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}

0800da2c <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b086      	sub	sp, #24
 800da30:	af00      	add	r7, sp, #0
 800da32:	60f8      	str	r0, [r7, #12]
 800da34:	60b9      	str	r1, [r7, #8]
 800da36:	607a      	str	r2, [r7, #4]
	int rc = 0;
 800da38:	2300      	movs	r3, #0
 800da3a:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	687a      	ldr	r2, [r7, #4]
 800da42:	1ad3      	subs	r3, r2, r3
 800da44:	2b01      	cmp	r3, #1
 800da46:	dd1a      	ble.n	800da7e <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 800da48:	68b8      	ldr	r0, [r7, #8]
 800da4a:	f7ff ff35 	bl	800d8b8 <readInt>
 800da4e:	4602      	mov	r2, r0
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	68fa      	ldr	r2, [r7, #12]
 800da5a:	6852      	ldr	r2, [r2, #4]
 800da5c:	4413      	add	r3, r2
 800da5e:	687a      	ldr	r2, [r7, #4]
 800da60:	429a      	cmp	r2, r3
 800da62:	d30c      	bcc.n	800da7e <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	681a      	ldr	r2, [r3, #0]
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	68fa      	ldr	r2, [r7, #12]
 800da72:	6852      	ldr	r2, [r2, #4]
 800da74:	441a      	add	r2, r3
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	601a      	str	r2, [r3, #0]
			rc = 1;
 800da7a:	2301      	movs	r3, #1
 800da7c:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2200      	movs	r2, #0
 800da82:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 800da84:	697b      	ldr	r3, [r7, #20]
}
 800da86:	4618      	mov	r0, r3
 800da88:	3718      	adds	r7, #24
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}

0800da8e <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 800da8e:	b580      	push	{r7, lr}
 800da90:	b086      	sub	sp, #24
 800da92:	af00      	add	r7, sp, #0
 800da94:	1d3b      	adds	r3, r7, #4
 800da96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 800da9a:	2300      	movs	r3, #0
 800da9c:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d006      	beq.n	800dab2 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	4618      	mov	r0, r3
 800daa8:	f7f2 fb9a 	bl	80001e0 <strlen>
 800daac:	4603      	mov	r3, r0
 800daae:	617b      	str	r3, [r7, #20]
 800dab0:	e001      	b.n	800dab6 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	617b      	str	r3, [r7, #20]
	return rc;
 800dab6:	697b      	ldr	r3, [r7, #20]
}
 800dab8:	4618      	mov	r0, r3
 800daba:	3718      	adds	r7, #24
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}

0800dac0 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b086      	sub	sp, #24
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
 800dac8:	6039      	str	r1, [r7, #0]
	int alen = 0,
 800daca:	2300      	movs	r3, #0
 800dacc:	617b      	str	r3, [r7, #20]
		blen = 0;
 800dace:	2300      	movs	r3, #0
 800dad0:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d00a      	beq.n	800daf0 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4618      	mov	r0, r3
 800dae6:	f7f2 fb7b 	bl	80001e0 <strlen>
 800daea:	4603      	mov	r3, r0
 800daec:	617b      	str	r3, [r7, #20]
 800daee:	e005      	b.n	800dafc <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	689b      	ldr	r3, [r3, #8]
 800daf4:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	685b      	ldr	r3, [r3, #4]
 800dafa:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 800dafc:	6838      	ldr	r0, [r7, #0]
 800dafe:	f7f2 fb6f 	bl	80001e0 <strlen>
 800db02:	4603      	mov	r3, r0
 800db04:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 800db06:	697a      	ldr	r2, [r7, #20]
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	429a      	cmp	r2, r3
 800db0c:	d10a      	bne.n	800db24 <MQTTPacket_equals+0x64>
 800db0e:	697b      	ldr	r3, [r7, #20]
 800db10:	461a      	mov	r2, r3
 800db12:	6839      	ldr	r1, [r7, #0]
 800db14:	6938      	ldr	r0, [r7, #16]
 800db16:	f001 ffb7 	bl	800fa88 <strncmp>
 800db1a:	4603      	mov	r3, r0
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d101      	bne.n	800db24 <MQTTPacket_equals+0x64>
 800db20:	2301      	movs	r3, #1
 800db22:	e000      	b.n	800db26 <MQTTPacket_equals+0x66>
 800db24:	2300      	movs	r3, #0
}
 800db26:	4618      	mov	r0, r3
 800db28:	3718      	adds	r7, #24
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}

0800db2e <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 800db2e:	b580      	push	{r7, lr}
 800db30:	b086      	sub	sp, #24
 800db32:	af00      	add	r7, sp, #0
 800db34:	60f8      	str	r0, [r7, #12]
 800db36:	4638      	mov	r0, r7
 800db38:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 800db3c:	2300      	movs	r3, #0
 800db3e:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 800db40:	463b      	mov	r3, r7
 800db42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800db46:	f7ff ffa2 	bl	800da8e <MQTTstrlen>
 800db4a:	4603      	mov	r3, r0
 800db4c:	1c9a      	adds	r2, r3, #2
 800db4e:	6a3b      	ldr	r3, [r7, #32]
 800db50:	4413      	add	r3, r2
 800db52:	697a      	ldr	r2, [r7, #20]
 800db54:	4413      	add	r3, r2
 800db56:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	dd02      	ble.n	800db64 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	3302      	adds	r3, #2
 800db62:	617b      	str	r3, [r7, #20]
	return len;
 800db64:	697b      	ldr	r3, [r7, #20]
}
 800db66:	4618      	mov	r0, r3
 800db68:	3718      	adds	r7, #24
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}

0800db6e <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 800db6e:	b580      	push	{r7, lr}
 800db70:	b08a      	sub	sp, #40	; 0x28
 800db72:	af02      	add	r7, sp, #8
 800db74:	60f8      	str	r0, [r7, #12]
 800db76:	60b9      	str	r1, [r7, #8]
 800db78:	603b      	str	r3, [r7, #0]
 800db7a:	4613      	mov	r3, r2
 800db7c:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 800db82:	2300      	movs	r3, #0
 800db84:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 800db86:	2300      	movs	r3, #0
 800db88:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 800db8a:	2300      	movs	r3, #0
 800db8c:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 800db8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db90:	9300      	str	r3, [sp, #0]
 800db92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800db96:	cb0e      	ldmia	r3, {r1, r2, r3}
 800db98:	6838      	ldr	r0, [r7, #0]
 800db9a:	f7ff ffc8 	bl	800db2e <MQTTSerialize_publishLength>
 800db9e:	61b8      	str	r0, [r7, #24]
 800dba0:	69b8      	ldr	r0, [r7, #24]
 800dba2:	f7ff fe29 	bl	800d7f8 <MQTTPacket_len>
 800dba6:	4602      	mov	r2, r0
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	da03      	bge.n	800dbb6 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800dbae:	f06f 0301 	mvn.w	r3, #1
 800dbb2:	61fb      	str	r3, [r7, #28]
		goto exit;
 800dbb4:	e04c      	b.n	800dc50 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 800dbb6:	7c3b      	ldrb	r3, [r7, #16]
 800dbb8:	2203      	movs	r2, #3
 800dbba:	f362 1307 	bfi	r3, r2, #4, #4
 800dbbe:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 800dbc0:	79fb      	ldrb	r3, [r7, #7]
 800dbc2:	f003 0301 	and.w	r3, r3, #1
 800dbc6:	b2da      	uxtb	r2, r3
 800dbc8:	7c3b      	ldrb	r3, [r7, #16]
 800dbca:	f362 03c3 	bfi	r3, r2, #3, #1
 800dbce:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	f003 0303 	and.w	r3, r3, #3
 800dbd6:	b2da      	uxtb	r2, r3
 800dbd8:	7c3b      	ldrb	r3, [r7, #16]
 800dbda:	f362 0342 	bfi	r3, r2, #1, #2
 800dbde:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 800dbe0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dbe4:	f003 0301 	and.w	r3, r3, #1
 800dbe8:	b2da      	uxtb	r2, r3
 800dbea:	7c3b      	ldrb	r3, [r7, #16]
 800dbec:	f362 0300 	bfi	r3, r2, #0, #1
 800dbf0:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 800dbf2:	7c3a      	ldrb	r2, [r7, #16]
 800dbf4:	f107 0314 	add.w	r3, r7, #20
 800dbf8:	4611      	mov	r1, r2
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f7ff fe8b 	bl	800d916 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	69b9      	ldr	r1, [r7, #24]
 800dc04:	4618      	mov	r0, r3
 800dc06:	f7ff fd8c 	bl	800d722 <MQTTPacket_encode>
 800dc0a:	4602      	mov	r2, r0
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	4413      	add	r3, r2
 800dc10:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 800dc12:	f107 0014 	add.w	r0, r7, #20
 800dc16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dc1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dc1c:	f7ff fed8 	bl	800d9d0 <writeMQTTString>

	if (qos > 0)
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	dd06      	ble.n	800dc34 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 800dc26:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800dc28:	f107 0314 	add.w	r3, r7, #20
 800dc2c:	4611      	mov	r1, r2
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7ff fe86 	bl	800d940 <writeInt>

	memcpy(ptr, payload, payloadlen);
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dc38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f000 fef0 	bl	800ea20 <memcpy>
	ptr += payloadlen;
 800dc40:	697a      	ldr	r2, [r7, #20]
 800dc42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc44:	4413      	add	r3, r2
 800dc46:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 800dc48:	697a      	ldr	r2, [r7, #20]
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	1ad3      	subs	r3, r2, r3
 800dc4e:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800dc50:	69fb      	ldr	r3, [r7, #28]
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3720      	adds	r7, #32
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}

0800dc5a <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 800dc5a:	b580      	push	{r7, lr}
 800dc5c:	b088      	sub	sp, #32
 800dc5e:	af00      	add	r7, sp, #0
 800dc60:	60f8      	str	r0, [r7, #12]
 800dc62:	60b9      	str	r1, [r7, #8]
 800dc64:	4611      	mov	r1, r2
 800dc66:	461a      	mov	r2, r3
 800dc68:	460b      	mov	r3, r1
 800dc6a:	71fb      	strb	r3, [r7, #7]
 800dc6c:	4613      	mov	r3, r2
 800dc6e:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 800dc70:	2300      	movs	r3, #0
 800dc72:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 800dc74:	2300      	movs	r3, #0
 800dc76:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	2b03      	cmp	r3, #3
 800dc80:	dc03      	bgt.n	800dc8a <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800dc82:	f06f 0301 	mvn.w	r3, #1
 800dc86:	61fb      	str	r3, [r7, #28]
		goto exit;
 800dc88:	e037      	b.n	800dcfa <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 800dc8a:	79fb      	ldrb	r3, [r7, #7]
 800dc8c:	f003 030f 	and.w	r3, r3, #15
 800dc90:	b2da      	uxtb	r2, r3
 800dc92:	7e3b      	ldrb	r3, [r7, #24]
 800dc94:	f362 1307 	bfi	r3, r2, #4, #4
 800dc98:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 800dc9a:	79bb      	ldrb	r3, [r7, #6]
 800dc9c:	f003 0301 	and.w	r3, r3, #1
 800dca0:	b2da      	uxtb	r2, r3
 800dca2:	7e3b      	ldrb	r3, [r7, #24]
 800dca4:	f362 03c3 	bfi	r3, r2, #3, #1
 800dca8:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 800dcaa:	79fb      	ldrb	r3, [r7, #7]
 800dcac:	2b06      	cmp	r3, #6
 800dcae:	bf0c      	ite	eq
 800dcb0:	2301      	moveq	r3, #1
 800dcb2:	2300      	movne	r3, #0
 800dcb4:	b2db      	uxtb	r3, r3
 800dcb6:	f003 0303 	and.w	r3, r3, #3
 800dcba:	b2da      	uxtb	r2, r3
 800dcbc:	7e3b      	ldrb	r3, [r7, #24]
 800dcbe:	f362 0342 	bfi	r3, r2, #1, #2
 800dcc2:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800dcc4:	7e3a      	ldrb	r2, [r7, #24]
 800dcc6:	f107 0314 	add.w	r3, r7, #20
 800dcca:	4611      	mov	r1, r2
 800dccc:	4618      	mov	r0, r3
 800dcce:	f7ff fe22 	bl	800d916 <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	2102      	movs	r1, #2
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7ff fd23 	bl	800d722 <MQTTPacket_encode>
 800dcdc:	4602      	mov	r2, r0
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	4413      	add	r3, r2
 800dce2:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 800dce4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800dce6:	f107 0314 	add.w	r3, r7, #20
 800dcea:	4611      	mov	r1, r2
 800dcec:	4618      	mov	r0, r3
 800dcee:	f7ff fe27 	bl	800d940 <writeInt>
	rc = ptr - buf;
 800dcf2:	697a      	ldr	r2, [r7, #20]
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	1ad3      	subs	r3, r2, r3
 800dcf8:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800dcfa:	69fb      	ldr	r3, [r7, #28]
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	3720      	adds	r7, #32
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}

0800dd04 <get_seconds_from_ntp_server>:
47) UTC+12:45 (Summer)New Zealand
48) UTC+13:00 Tonga
49) UTC+14:00 Kiribati (Line Islands)
*/
void get_seconds_from_ntp_server(uint8_t *buf, uint16_t idx)
{
 800dd04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dd08:	b0d0      	sub	sp, #320	; 0x140
 800dd0a:	af00      	add	r7, sp, #0
 800dd0c:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
 800dd10:	460b      	mov	r3, r1
 800dd12:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
	tstamp seconds = 0;
 800dd16:	f04f 0200 	mov.w	r2, #0
 800dd1a:	f04f 0300 	mov.w	r3, #0
 800dd1e:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	uint8_t i=0;
 800dd22:	2300      	movs	r3, #0
 800dd24:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	for (i = 0; i < 4; i++)
 800dd28:	2300      	movs	r3, #0
 800dd2a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800dd2e:	e028      	b.n	800dd82 <get_seconds_from_ntp_server+0x7e>
	{
		seconds = (seconds << 8) | buf[idx + i];
 800dd30:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800dd34:	f04f 0000 	mov.w	r0, #0
 800dd38:	f04f 0100 	mov.w	r1, #0
 800dd3c:	0219      	lsls	r1, r3, #8
 800dd3e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800dd42:	0210      	lsls	r0, r2, #8
 800dd44:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 800dd48:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800dd4c:	4413      	add	r3, r2
 800dd4e:	461a      	mov	r2, r3
 800dd50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dd54:	4413      	add	r3, r2
 800dd56:	781b      	ldrb	r3, [r3, #0]
 800dd58:	b2db      	uxtb	r3, r3
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	461c      	mov	r4, r3
 800dd5e:	4615      	mov	r5, r2
 800dd60:	ea40 0304 	orr.w	r3, r0, r4
 800dd64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800dd68:	ea41 0305 	orr.w	r3, r1, r5
 800dd6c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800dd70:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800dd74:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	for (i = 0; i < 4; i++)
 800dd78:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800dd7c:	3301      	adds	r3, #1
 800dd7e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800dd82:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800dd86:	2b03      	cmp	r3, #3
 800dd88:	d9d2      	bls.n	800dd30 <get_seconds_from_ntp_server+0x2c>
	}
	switch (time_zone)
 800dd8a:	4be2      	ldr	r3, [pc, #904]	; (800e114 <get_seconds_from_ntp_server+0x410>)
 800dd8c:	781b      	ldrb	r3, [r3, #0]
 800dd8e:	2b31      	cmp	r3, #49	; 0x31
 800dd90:	f200 82a3 	bhi.w	800e2da <get_seconds_from_ntp_server+0x5d6>
 800dd94:	a201      	add	r2, pc, #4	; (adr r2, 800dd9c <get_seconds_from_ntp_server+0x98>)
 800dd96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd9a:	bf00      	nop
 800dd9c:	0800de65 	.word	0x0800de65
 800dda0:	0800de83 	.word	0x0800de83
 800dda4:	0800dea1 	.word	0x0800dea1
 800dda8:	0800debf 	.word	0x0800debf
 800ddac:	0800dedd 	.word	0x0800dedd
 800ddb0:	0800defb 	.word	0x0800defb
 800ddb4:	0800defb 	.word	0x0800defb
 800ddb8:	0800df19 	.word	0x0800df19
 800ddbc:	0800df19 	.word	0x0800df19
 800ddc0:	0800df37 	.word	0x0800df37
 800ddc4:	0800df37 	.word	0x0800df37
 800ddc8:	0800df55 	.word	0x0800df55
 800ddcc:	0800df55 	.word	0x0800df55
 800ddd0:	0800df55 	.word	0x0800df55
 800ddd4:	0800df73 	.word	0x0800df73
 800ddd8:	0800df91 	.word	0x0800df91
 800dddc:	0800df91 	.word	0x0800df91
 800dde0:	0800dfaf 	.word	0x0800dfaf
 800dde4:	0800dfcd 	.word	0x0800dfcd
 800dde8:	0800dfeb 	.word	0x0800dfeb
 800ddec:	0800e009 	.word	0x0800e009
 800ddf0:	0800e2db 	.word	0x0800e2db
 800ddf4:	0800e2db 	.word	0x0800e2db
 800ddf8:	0800e027 	.word	0x0800e027
 800ddfc:	0800e027 	.word	0x0800e027
 800de00:	0800e027 	.word	0x0800e027
 800de04:	0800e045 	.word	0x0800e045
 800de08:	0800e045 	.word	0x0800e045
 800de0c:	0800e063 	.word	0x0800e063
 800de10:	0800e063 	.word	0x0800e063
 800de14:	0800e083 	.word	0x0800e083
 800de18:	0800e0a3 	.word	0x0800e0a3
 800de1c:	0800e0c1 	.word	0x0800e0c1
 800de20:	0800e0dd 	.word	0x0800e0dd
 800de24:	0800e0f9 	.word	0x0800e0f9
 800de28:	0800e145 	.word	0x0800e145
 800de2c:	0800e161 	.word	0x0800e161
 800de30:	0800e17d 	.word	0x0800e17d
 800de34:	0800e199 	.word	0x0800e199
 800de38:	0800e1b5 	.word	0x0800e1b5
 800de3c:	0800e1cf 	.word	0x0800e1cf
 800de40:	0800e1eb 	.word	0x0800e1eb
 800de44:	0800e207 	.word	0x0800e207
 800de48:	0800e223 	.word	0x0800e223
 800de4c:	0800e23f 	.word	0x0800e23f
 800de50:	0800e25b 	.word	0x0800e25b
 800de54:	0800e277 	.word	0x0800e277
 800de58:	0800e293 	.word	0x0800e293
 800de5c:	0800e2af 	.word	0x0800e2af
 800de60:	0800e2c5 	.word	0x0800e2c5
	{
	case 0:
		seconds -=  12*3600;
 800de64:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800de68:	49ab      	ldr	r1, [pc, #684]	; (800e118 <get_seconds_from_ntp_server+0x414>)
 800de6a:	1851      	adds	r1, r2, r1
 800de6c:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 800de70:	f143 33ff 	adc.w	r3, r3, #4294967295
 800de74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800de78:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 800de7c:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800de80:	e22b      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 1:
		seconds -=  11*3600;
 800de82:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800de86:	49a5      	ldr	r1, [pc, #660]	; (800e11c <get_seconds_from_ntp_server+0x418>)
 800de88:	1851      	adds	r1, r2, r1
 800de8a:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 800de8e:	f143 33ff 	adc.w	r3, r3, #4294967295
 800de92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800de96:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800de9a:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800de9e:	e21c      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 2:
		seconds -=  10*3600;
 800dea0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800dea4:	499e      	ldr	r1, [pc, #632]	; (800e120 <get_seconds_from_ntp_server+0x41c>)
 800dea6:	1851      	adds	r1, r2, r1
 800dea8:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800deac:	f143 33ff 	adc.w	r3, r3, #4294967295
 800deb0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800deb4:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 800deb8:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800debc:	e20d      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 3:
		seconds -=  (9*3600+30*60);
 800debe:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800dec2:	4998      	ldr	r1, [pc, #608]	; (800e124 <get_seconds_from_ntp_server+0x420>)
 800dec4:	1851      	adds	r1, r2, r1
 800dec6:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800deca:	f143 33ff 	adc.w	r3, r3, #4294967295
 800dece:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ded2:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800ded6:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800deda:	e1fe      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 4:
		seconds -=  9*3600;
 800dedc:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800dee0:	4991      	ldr	r1, [pc, #580]	; (800e128 <get_seconds_from_ntp_server+0x424>)
 800dee2:	1851      	adds	r1, r2, r1
 800dee4:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800dee8:	f143 33ff 	adc.w	r3, r3, #4294967295
 800deec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800def0:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 800def4:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800def8:	e1ef      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 5:
	case 6:
		seconds -=  8*3600;
 800defa:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800defe:	f5b2 41e1 	subs.w	r1, r2, #28800	; 0x7080
 800df02:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800df06:	f143 33ff 	adc.w	r3, r3, #4294967295
 800df0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800df0e:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800df12:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800df16:	e1e0      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 7:
	case 8:
		seconds -=  7*3600;
 800df18:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800df1c:	4983      	ldr	r1, [pc, #524]	; (800e12c <get_seconds_from_ntp_server+0x428>)
 800df1e:	1851      	adds	r1, r2, r1
 800df20:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 800df24:	f143 33ff 	adc.w	r3, r3, #4294967295
 800df28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800df2c:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800df30:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800df34:	e1d1      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 9:
	case 10:
		seconds -=  6*3600;
 800df36:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800df3a:	497d      	ldr	r1, [pc, #500]	; (800e130 <get_seconds_from_ntp_server+0x42c>)
 800df3c:	1851      	adds	r1, r2, r1
 800df3e:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 800df42:	f143 33ff 	adc.w	r3, r3, #4294967295
 800df46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800df4a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800df4e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800df52:	e1c2      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 11:
	case 12:
	case 13:
		seconds -= 5*3600;
 800df54:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800df58:	4976      	ldr	r1, [pc, #472]	; (800e134 <get_seconds_from_ntp_server+0x430>)
 800df5a:	1851      	adds	r1, r2, r1
 800df5c:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800df60:	f143 33ff 	adc.w	r3, r3, #4294967295
 800df64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800df68:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800df6c:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800df70:	e1b3      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 14:
		seconds -=  (4*3600+30*60);
 800df72:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800df76:	4970      	ldr	r1, [pc, #448]	; (800e138 <get_seconds_from_ntp_server+0x434>)
 800df78:	1851      	adds	r1, r2, r1
 800df7a:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800df7e:	f143 33ff 	adc.w	r3, r3, #4294967295
 800df82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800df86:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800df8a:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800df8e:	e1a4      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 15:
	case 16:
		seconds -=  4*3600;
 800df90:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800df94:	f5b2 5161 	subs.w	r1, r2, #14400	; 0x3840
 800df98:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800df9c:	f143 33ff 	adc.w	r3, r3, #4294967295
 800dfa0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800dfa4:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800dfa8:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800dfac:	e195      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 17:
		seconds -=  (3*3600+30*60);
 800dfae:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800dfb2:	4962      	ldr	r1, [pc, #392]	; (800e13c <get_seconds_from_ntp_server+0x438>)
 800dfb4:	1851      	adds	r1, r2, r1
 800dfb6:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800dfba:	f143 33ff 	adc.w	r3, r3, #4294967295
 800dfbe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dfc2:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800dfc6:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800dfca:	e186      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 18:
		seconds -=  3*3600;
 800dfcc:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800dfd0:	495b      	ldr	r1, [pc, #364]	; (800e140 <get_seconds_from_ntp_server+0x43c>)
 800dfd2:	1851      	adds	r1, r2, r1
 800dfd4:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800dfd8:	f143 33ff 	adc.w	r3, r3, #4294967295
 800dfdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800dfe0:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800dfe4:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800dfe8:	e177      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 19:
		seconds -=  2*3600;
 800dfea:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800dfee:	f5b2 51e1 	subs.w	r1, r2, #7200	; 0x1c20
 800dff2:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800dff6:	f143 33ff 	adc.w	r3, r3, #4294967295
 800dffa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dffe:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 800e002:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800e006:	e168      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 20:
		seconds -=  1*3600;
 800e008:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800e00c:	f5b2 6161 	subs.w	r1, r2, #3600	; 0xe10
 800e010:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 800e014:	f143 33ff 	adc.w	r3, r3, #4294967295
 800e018:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e01c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800e020:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800e024:	e159      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 22:
		break;
	case 23:
	case 24:
	case 25:
		seconds +=  1*3600;
 800e026:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800e02a:	f512 6161 	adds.w	r1, r2, #3600	; 0xe10
 800e02e:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800e032:	f143 0300 	adc.w	r3, r3, #0
 800e036:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e03a:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 800e03e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800e042:	e14a      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 26:
	case 27:
		seconds +=  2*3600;
 800e044:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800e048:	f512 51e1 	adds.w	r1, r2, #7200	; 0x1c20
 800e04c:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800e050:	f143 0300 	adc.w	r3, r3, #0
 800e054:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e058:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800e05c:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800e060:	e13b      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 28:
	case 29:
		seconds +=  3*3600;
 800e062:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800e066:	f642 2130 	movw	r1, #10800	; 0x2a30
 800e06a:	1851      	adds	r1, r2, r1
 800e06c:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 800e070:	f143 0300 	adc.w	r3, r3, #0
 800e074:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e078:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800e07c:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800e080:	e12b      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 30:
		seconds +=  (3*3600+30*60);
 800e082:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800e086:	f243 1138 	movw	r1, #12600	; 0x3138
 800e08a:	1851      	adds	r1, r2, r1
 800e08c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800e090:	f143 0300 	adc.w	r3, r3, #0
 800e094:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e098:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800e09c:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800e0a0:	e11b      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 31:
		seconds +=  4*3600;
 800e0a2:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800e0a6:	f512 5161 	adds.w	r1, r2, #14400	; 0x3840
 800e0aa:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800e0ae:	f143 0300 	adc.w	r3, r3, #0
 800e0b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e0b6:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800e0ba:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800e0be:	e10c      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 32:
		seconds +=  (4*3600+30*60);
 800e0c0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800e0c4:	f643 7148 	movw	r1, #16200	; 0x3f48
 800e0c8:	1851      	adds	r1, r2, r1
 800e0ca:	67b9      	str	r1, [r7, #120]	; 0x78
 800e0cc:	f143 0300 	adc.w	r3, r3, #0
 800e0d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e0d2:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800e0d6:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800e0da:	e0fe      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 33:
		seconds +=  5*3600;
 800e0dc:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800e0e0:	f244 6150 	movw	r1, #18000	; 0x4650
 800e0e4:	1851      	adds	r1, r2, r1
 800e0e6:	6739      	str	r1, [r7, #112]	; 0x70
 800e0e8:	f143 0300 	adc.w	r3, r3, #0
 800e0ec:	677b      	str	r3, [r7, #116]	; 0x74
 800e0ee:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800e0f2:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800e0f6:	e0f0      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 34:
		seconds +=  (5*3600+30*60);
 800e0f8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800e0fc:	f644 5158 	movw	r1, #19800	; 0x4d58
 800e100:	1851      	adds	r1, r2, r1
 800e102:	66b9      	str	r1, [r7, #104]	; 0x68
 800e104:	f143 0300 	adc.w	r3, r3, #0
 800e108:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e10a:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800e10e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800e112:	e0e2      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
 800e114:	2000394d 	.word	0x2000394d
 800e118:	ffff5740 	.word	0xffff5740
 800e11c:	ffff6550 	.word	0xffff6550
 800e120:	ffff7360 	.word	0xffff7360
 800e124:	ffff7a68 	.word	0xffff7a68
 800e128:	ffff8170 	.word	0xffff8170
 800e12c:	ffff9d90 	.word	0xffff9d90
 800e130:	ffffaba0 	.word	0xffffaba0
 800e134:	ffffb9b0 	.word	0xffffb9b0
 800e138:	ffffc0b8 	.word	0xffffc0b8
 800e13c:	ffffcec8 	.word	0xffffcec8
 800e140:	ffffd5d0 	.word	0xffffd5d0
	case 35:
		seconds +=  (5*3600+45*60);
 800e144:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800e148:	f245 01dc 	movw	r1, #20700	; 0x50dc
 800e14c:	1851      	adds	r1, r2, r1
 800e14e:	6639      	str	r1, [r7, #96]	; 0x60
 800e150:	f143 0300 	adc.w	r3, r3, #0
 800e154:	667b      	str	r3, [r7, #100]	; 0x64
 800e156:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800e15a:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800e15e:	e0bc      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 36:
		seconds +=  6*3600;
 800e160:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800e164:	f245 4160 	movw	r1, #21600	; 0x5460
 800e168:	1851      	adds	r1, r2, r1
 800e16a:	65b9      	str	r1, [r7, #88]	; 0x58
 800e16c:	f143 0300 	adc.w	r3, r3, #0
 800e170:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e172:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800e176:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800e17a:	e0ae      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 37:
		seconds +=  (6*3600+30*60);
 800e17c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800e180:	f645 3168 	movw	r1, #23400	; 0x5b68
 800e184:	1851      	adds	r1, r2, r1
 800e186:	6539      	str	r1, [r7, #80]	; 0x50
 800e188:	f143 0300 	adc.w	r3, r3, #0
 800e18c:	657b      	str	r3, [r7, #84]	; 0x54
 800e18e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800e192:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800e196:	e0a0      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 38:
		seconds +=  7*3600;
 800e198:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800e19c:	f246 2170 	movw	r1, #25200	; 0x6270
 800e1a0:	1851      	adds	r1, r2, r1
 800e1a2:	64b9      	str	r1, [r7, #72]	; 0x48
 800e1a4:	f143 0300 	adc.w	r3, r3, #0
 800e1a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e1aa:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800e1ae:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800e1b2:	e092      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 39:
		seconds +=  8*3600;
 800e1b4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800e1b8:	f512 41e1 	adds.w	r1, r2, #28800	; 0x7080
 800e1bc:	6439      	str	r1, [r7, #64]	; 0x40
 800e1be:	f143 0300 	adc.w	r3, r3, #0
 800e1c2:	647b      	str	r3, [r7, #68]	; 0x44
 800e1c4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800e1c8:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800e1cc:	e085      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 40:
		seconds +=  9*3600;
 800e1ce:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800e1d2:	f647 6190 	movw	r1, #32400	; 0x7e90
 800e1d6:	1851      	adds	r1, r2, r1
 800e1d8:	63b9      	str	r1, [r7, #56]	; 0x38
 800e1da:	f143 0300 	adc.w	r3, r3, #0
 800e1de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e1e0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800e1e4:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800e1e8:	e077      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 41:
		seconds +=  (9*3600+30*60);
 800e1ea:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800e1ee:	f248 5198 	movw	r1, #34200	; 0x8598
 800e1f2:	1851      	adds	r1, r2, r1
 800e1f4:	6339      	str	r1, [r7, #48]	; 0x30
 800e1f6:	f143 0300 	adc.w	r3, r3, #0
 800e1fa:	637b      	str	r3, [r7, #52]	; 0x34
 800e1fc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800e200:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800e204:	e069      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 42:
		seconds +=  10*3600;
 800e206:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800e20a:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 800e20e:	1851      	adds	r1, r2, r1
 800e210:	62b9      	str	r1, [r7, #40]	; 0x28
 800e212:	f143 0300 	adc.w	r3, r3, #0
 800e216:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e218:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800e21c:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800e220:	e05b      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 43:
		seconds +=  (10*3600+30*60);
 800e222:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800e226:	f249 31a8 	movw	r1, #37800	; 0x93a8
 800e22a:	1851      	adds	r1, r2, r1
 800e22c:	6239      	str	r1, [r7, #32]
 800e22e:	f143 0300 	adc.w	r3, r3, #0
 800e232:	627b      	str	r3, [r7, #36]	; 0x24
 800e234:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800e238:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800e23c:	e04d      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 44:
		seconds +=  11*3600;
 800e23e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800e242:	f649 21b0 	movw	r1, #39600	; 0x9ab0
 800e246:	1851      	adds	r1, r2, r1
 800e248:	61b9      	str	r1, [r7, #24]
 800e24a:	f143 0300 	adc.w	r3, r3, #0
 800e24e:	61fb      	str	r3, [r7, #28]
 800e250:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800e254:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800e258:	e03f      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 45:
		seconds +=  (11*3600+30*60);
 800e25a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800e25e:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
 800e262:	1851      	adds	r1, r2, r1
 800e264:	6139      	str	r1, [r7, #16]
 800e266:	f143 0300 	adc.w	r3, r3, #0
 800e26a:	617b      	str	r3, [r7, #20]
 800e26c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e270:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800e274:	e031      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 46:
		seconds +=  12*3600;
 800e276:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800e27a:	f64a 01c0 	movw	r1, #43200	; 0xa8c0
 800e27e:	1851      	adds	r1, r2, r1
 800e280:	60b9      	str	r1, [r7, #8]
 800e282:	f143 0300 	adc.w	r3, r3, #0
 800e286:	60fb      	str	r3, [r7, #12]
 800e288:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800e28c:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800e290:	e023      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 47:
		seconds +=  (12*3600+45*60);
 800e292:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800e296:	f24b 314c 	movw	r1, #45900	; 0xb34c
 800e29a:	1851      	adds	r1, r2, r1
 800e29c:	6039      	str	r1, [r7, #0]
 800e29e:	f143 0300 	adc.w	r3, r3, #0
 800e2a2:	607b      	str	r3, [r7, #4]
 800e2a4:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e2a8:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800e2ac:	e015      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 48:
		seconds +=  13*3600;
 800e2ae:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800e2b2:	f24b 61d0 	movw	r1, #46800	; 0xb6d0
 800e2b6:	eb12 0a01 	adds.w	sl, r2, r1
 800e2ba:	f143 0b00 	adc.w	fp, r3, #0
 800e2be:	e9c7 ab4e 	strd	sl, fp, [r7, #312]	; 0x138
		break;
 800e2c2:	e00a      	b.n	800e2da <get_seconds_from_ntp_server+0x5d6>
	case 49:
		seconds +=  14*3600;
 800e2c4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800e2c8:	f24c 41e0 	movw	r1, #50400	; 0xc4e0
 800e2cc:	eb12 0801 	adds.w	r8, r2, r1
 800e2d0:	f143 0900 	adc.w	r9, r3, #0
 800e2d4:	e9c7 894e 	strd	r8, r9, [r7, #312]	; 0x138
		break;
 800e2d8:	bf00      	nop

	}

	//calculation for date
	calcdatetime(seconds);
 800e2da:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800e2de:	f000 f941 	bl	800e564 <calcdatetime>
}
 800e2e2:	bf00      	nop
 800e2e4:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e2ee:	bf00      	nop

0800e2f0 <SNTP_init>:

void SNTP_init(uint8_t s, uint8_t *ntp_server, uint8_t tz, uint8_t *buf)
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	b087      	sub	sp, #28
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	60b9      	str	r1, [r7, #8]
 800e2f8:	607b      	str	r3, [r7, #4]
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	73fb      	strb	r3, [r7, #15]
 800e2fe:	4613      	mov	r3, r2
 800e300:	73bb      	strb	r3, [r7, #14]
	NTP_SOCKET = s;
 800e302:	4a34      	ldr	r2, [pc, #208]	; (800e3d4 <SNTP_init+0xe4>)
 800e304:	7bfb      	ldrb	r3, [r7, #15]
 800e306:	7013      	strb	r3, [r2, #0]

	NTPformat.dstaddr[0] = ntp_server[0];
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	781a      	ldrb	r2, [r3, #0]
 800e30c:	4b32      	ldr	r3, [pc, #200]	; (800e3d8 <SNTP_init+0xe8>)
 800e30e:	701a      	strb	r2, [r3, #0]
	NTPformat.dstaddr[1] = ntp_server[1];
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	785a      	ldrb	r2, [r3, #1]
 800e314:	4b30      	ldr	r3, [pc, #192]	; (800e3d8 <SNTP_init+0xe8>)
 800e316:	705a      	strb	r2, [r3, #1]
	NTPformat.dstaddr[2] = ntp_server[2];
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	789a      	ldrb	r2, [r3, #2]
 800e31c:	4b2e      	ldr	r3, [pc, #184]	; (800e3d8 <SNTP_init+0xe8>)
 800e31e:	709a      	strb	r2, [r3, #2]
	NTPformat.dstaddr[3] = ntp_server[3];
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	78da      	ldrb	r2, [r3, #3]
 800e324:	4b2c      	ldr	r3, [pc, #176]	; (800e3d8 <SNTP_init+0xe8>)
 800e326:	70da      	strb	r2, [r3, #3]

	time_zone = tz;
 800e328:	4a2c      	ldr	r2, [pc, #176]	; (800e3dc <SNTP_init+0xec>)
 800e32a:	7bbb      	ldrb	r3, [r7, #14]
 800e32c:	7013      	strb	r3, [r2, #0]

	data_buf = buf;
 800e32e:	4a2c      	ldr	r2, [pc, #176]	; (800e3e0 <SNTP_init+0xf0>)
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6013      	str	r3, [r2, #0]

	uint8_t Flag;
	NTPformat.leap = 0;           /* leap indicator */
 800e334:	4b28      	ldr	r3, [pc, #160]	; (800e3d8 <SNTP_init+0xe8>)
 800e336:	2200      	movs	r2, #0
 800e338:	715a      	strb	r2, [r3, #5]
	NTPformat.version = 4;        /* version number */
 800e33a:	4b27      	ldr	r3, [pc, #156]	; (800e3d8 <SNTP_init+0xe8>)
 800e33c:	2204      	movs	r2, #4
 800e33e:	711a      	strb	r2, [r3, #4]
	NTPformat.mode = 3;           /* mode */
 800e340:	4b25      	ldr	r3, [pc, #148]	; (800e3d8 <SNTP_init+0xe8>)
 800e342:	2203      	movs	r2, #3
 800e344:	719a      	strb	r2, [r3, #6]
	NTPformat.stratum = 0;        /* stratum */
 800e346:	4b24      	ldr	r3, [pc, #144]	; (800e3d8 <SNTP_init+0xe8>)
 800e348:	2200      	movs	r2, #0
 800e34a:	71da      	strb	r2, [r3, #7]
	NTPformat.poll = 0;           /* poll interval */
 800e34c:	4b22      	ldr	r3, [pc, #136]	; (800e3d8 <SNTP_init+0xe8>)
 800e34e:	2200      	movs	r2, #0
 800e350:	721a      	strb	r2, [r3, #8]
	NTPformat.precision = 0;      /* precision */
 800e352:	4b21      	ldr	r3, [pc, #132]	; (800e3d8 <SNTP_init+0xe8>)
 800e354:	2200      	movs	r2, #0
 800e356:	725a      	strb	r2, [r3, #9]
	NTPformat.rootdelay = 0;      /* root delay */
 800e358:	4b1f      	ldr	r3, [pc, #124]	; (800e3d8 <SNTP_init+0xe8>)
 800e35a:	2200      	movs	r2, #0
 800e35c:	60da      	str	r2, [r3, #12]
	NTPformat.rootdisp = 0;       /* root dispersion */
 800e35e:	4b1e      	ldr	r3, [pc, #120]	; (800e3d8 <SNTP_init+0xe8>)
 800e360:	2200      	movs	r2, #0
 800e362:	611a      	str	r2, [r3, #16]
	NTPformat.refid = 0;          /* reference ID */
 800e364:	4b1c      	ldr	r3, [pc, #112]	; (800e3d8 <SNTP_init+0xe8>)
 800e366:	2200      	movs	r2, #0
 800e368:	751a      	strb	r2, [r3, #20]
	NTPformat.reftime = 0;        /* reference time */
 800e36a:	491b      	ldr	r1, [pc, #108]	; (800e3d8 <SNTP_init+0xe8>)
 800e36c:	f04f 0200 	mov.w	r2, #0
 800e370:	f04f 0300 	mov.w	r3, #0
 800e374:	e9c1 2306 	strd	r2, r3, [r1, #24]
	NTPformat.org = 0;            /* origin timestamp */
 800e378:	4917      	ldr	r1, [pc, #92]	; (800e3d8 <SNTP_init+0xe8>)
 800e37a:	f04f 0200 	mov.w	r2, #0
 800e37e:	f04f 0300 	mov.w	r3, #0
 800e382:	e9c1 2308 	strd	r2, r3, [r1, #32]
	NTPformat.rec = 0;            /* receive timestamp */
 800e386:	4914      	ldr	r1, [pc, #80]	; (800e3d8 <SNTP_init+0xe8>)
 800e388:	f04f 0200 	mov.w	r2, #0
 800e38c:	f04f 0300 	mov.w	r3, #0
 800e390:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	NTPformat.xmt = 1;            /* transmit timestamp */
 800e394:	4910      	ldr	r1, [pc, #64]	; (800e3d8 <SNTP_init+0xe8>)
 800e396:	f04f 0201 	mov.w	r2, #1
 800e39a:	f04f 0300 	mov.w	r3, #0
 800e39e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	Flag = (NTPformat.leap<<6)+(NTPformat.version<<3)+NTPformat.mode; //one byte Flag
 800e3a2:	4b0d      	ldr	r3, [pc, #52]	; (800e3d8 <SNTP_init+0xe8>)
 800e3a4:	795b      	ldrb	r3, [r3, #5]
 800e3a6:	019b      	lsls	r3, r3, #6
 800e3a8:	b2da      	uxtb	r2, r3
 800e3aa:	4b0b      	ldr	r3, [pc, #44]	; (800e3d8 <SNTP_init+0xe8>)
 800e3ac:	791b      	ldrb	r3, [r3, #4]
 800e3ae:	00db      	lsls	r3, r3, #3
 800e3b0:	b2db      	uxtb	r3, r3
 800e3b2:	4413      	add	r3, r2
 800e3b4:	b2da      	uxtb	r2, r3
 800e3b6:	4b08      	ldr	r3, [pc, #32]	; (800e3d8 <SNTP_init+0xe8>)
 800e3b8:	799b      	ldrb	r3, [r3, #6]
 800e3ba:	4413      	add	r3, r2
 800e3bc:	b2db      	uxtb	r3, r3
 800e3be:	75fb      	strb	r3, [r7, #23]
 800e3c0:	7dfa      	ldrb	r2, [r7, #23]
	memcpy(ntpmessage,(void const*)(&Flag),1);
 800e3c2:	4b08      	ldr	r3, [pc, #32]	; (800e3e4 <SNTP_init+0xf4>)
 800e3c4:	701a      	strb	r2, [r3, #0]
}
 800e3c6:	bf00      	nop
 800e3c8:	371c      	adds	r7, #28
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d0:	4770      	bx	lr
 800e3d2:	bf00      	nop
 800e3d4:	2000394c 	.word	0x2000394c
 800e3d8:	200038d8 	.word	0x200038d8
 800e3dc:	2000394d 	.word	0x2000394d
 800e3e0:	20003948 	.word	0x20003948
 800e3e4:	20003918 	.word	0x20003918

0800e3e8 <SNTP_run>:

int8_t SNTP_run(datetime *time)
{
 800e3e8:	b590      	push	{r4, r7, lr}
 800e3ea:	b089      	sub	sp, #36	; 0x24
 800e3ec:	af02      	add	r7, sp, #8
 800e3ee:	6078      	str	r0, [r7, #4]
	uint16_t RSR_len;
	uint32_t destip = 0;
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	613b      	str	r3, [r7, #16]
	uint16_t destport;
	uint16_t startindex = 40; //last 8-byte of data_buf[size is 48 byte] is xmt, so the startindex should be 40
 800e3f4:	2328      	movs	r3, #40	; 0x28
 800e3f6:	82bb      	strh	r3, [r7, #20]

	switch(getSn_SR(NTP_SOCKET))
 800e3f8:	4b53      	ldr	r3, [pc, #332]	; (800e548 <SNTP_run+0x160>)
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	009b      	lsls	r3, r3, #2
 800e3fe:	3301      	adds	r3, #1
 800e400:	00db      	lsls	r3, r3, #3
 800e402:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800e406:	4618      	mov	r0, r3
 800e408:	f7fc fc84 	bl	800ad14 <WIZCHIP_READ>
 800e40c:	4603      	mov	r3, r0
 800e40e:	2b00      	cmp	r3, #0
 800e410:	f000 808b 	beq.w	800e52a <SNTP_run+0x142>
 800e414:	2b22      	cmp	r3, #34	; 0x22
 800e416:	f040 8091 	bne.w	800e53c <SNTP_run+0x154>
	{
	case SOCK_UDP:
		if ((RSR_len = getSn_RX_RSR(NTP_SOCKET)) > 0)
 800e41a:	4b4b      	ldr	r3, [pc, #300]	; (800e548 <SNTP_run+0x160>)
 800e41c:	781b      	ldrb	r3, [r3, #0]
 800e41e:	4618      	mov	r0, r3
 800e420:	f7fc fe1d 	bl	800b05e <getSn_RX_RSR>
 800e424:	4603      	mov	r3, r0
 800e426:	82fb      	strh	r3, [r7, #22]
 800e428:	8afb      	ldrh	r3, [r7, #22]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d03a      	beq.n	800e4a4 <SNTP_run+0xbc>
		{
			if (RSR_len > MAX_SNTP_BUF_SIZE) RSR_len = MAX_SNTP_BUF_SIZE;	// if Rx data size is lager than TX_RX_MAX_BUF_SIZE
 800e42e:	8afb      	ldrh	r3, [r7, #22]
 800e430:	2b38      	cmp	r3, #56	; 0x38
 800e432:	d901      	bls.n	800e438 <SNTP_run+0x50>
 800e434:	2338      	movs	r3, #56	; 0x38
 800e436:	82fb      	strh	r3, [r7, #22]
			recvfrom(NTP_SOCKET, data_buf, RSR_len, (uint8_t *)&destip, &destport);
 800e438:	4b43      	ldr	r3, [pc, #268]	; (800e548 <SNTP_run+0x160>)
 800e43a:	7818      	ldrb	r0, [r3, #0]
 800e43c:	4b43      	ldr	r3, [pc, #268]	; (800e54c <SNTP_run+0x164>)
 800e43e:	6819      	ldr	r1, [r3, #0]
 800e440:	f107 0410 	add.w	r4, r7, #16
 800e444:	8afa      	ldrh	r2, [r7, #22]
 800e446:	f107 030e 	add.w	r3, r7, #14
 800e44a:	9300      	str	r3, [sp, #0]
 800e44c:	4623      	mov	r3, r4
 800e44e:	f7fd fd0d 	bl	800be6c <recvfrom>

			get_seconds_from_ntp_server(data_buf,startindex);
 800e452:	4b3e      	ldr	r3, [pc, #248]	; (800e54c <SNTP_run+0x164>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	8aba      	ldrh	r2, [r7, #20]
 800e458:	4611      	mov	r1, r2
 800e45a:	4618      	mov	r0, r3
 800e45c:	f7ff fc52 	bl	800dd04 <get_seconds_from_ntp_server>
			time->yy = Nowdatetime.yy;
 800e460:	4b3b      	ldr	r3, [pc, #236]	; (800e550 <SNTP_run+0x168>)
 800e462:	881a      	ldrh	r2, [r3, #0]
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	801a      	strh	r2, [r3, #0]
			time->mo = Nowdatetime.mo;
 800e468:	4b39      	ldr	r3, [pc, #228]	; (800e550 <SNTP_run+0x168>)
 800e46a:	789a      	ldrb	r2, [r3, #2]
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	709a      	strb	r2, [r3, #2]
			time->dd = Nowdatetime.dd;
 800e470:	4b37      	ldr	r3, [pc, #220]	; (800e550 <SNTP_run+0x168>)
 800e472:	78da      	ldrb	r2, [r3, #3]
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	70da      	strb	r2, [r3, #3]
			time->hh = Nowdatetime.hh;
 800e478:	4b35      	ldr	r3, [pc, #212]	; (800e550 <SNTP_run+0x168>)
 800e47a:	791a      	ldrb	r2, [r3, #4]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	711a      	strb	r2, [r3, #4]
			time->mm = Nowdatetime.mm;
 800e480:	4b33      	ldr	r3, [pc, #204]	; (800e550 <SNTP_run+0x168>)
 800e482:	795a      	ldrb	r2, [r3, #5]
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	715a      	strb	r2, [r3, #5]
			time->ss = Nowdatetime.ss;
 800e488:	4b31      	ldr	r3, [pc, #196]	; (800e550 <SNTP_run+0x168>)
 800e48a:	799a      	ldrb	r2, [r3, #6]
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	719a      	strb	r2, [r3, #6]

			ntp_retry_cnt=0;
 800e490:	4b30      	ldr	r3, [pc, #192]	; (800e554 <SNTP_run+0x16c>)
 800e492:	2200      	movs	r2, #0
 800e494:	801a      	strh	r2, [r3, #0]
			close(NTP_SOCKET);
 800e496:	4b2c      	ldr	r3, [pc, #176]	; (800e548 <SNTP_run+0x160>)
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	4618      	mov	r0, r3
 800e49c:	f7fd f840 	bl	800b520 <close>

			return 1;
 800e4a0:	2301      	movs	r3, #1
 800e4a2:	e04c      	b.n	800e53e <SNTP_run+0x156>
		}

		if(ntp_retry_cnt<0xFFFF)
 800e4a4:	4b2b      	ldr	r3, [pc, #172]	; (800e554 <SNTP_run+0x16c>)
 800e4a6:	881b      	ldrh	r3, [r3, #0]
 800e4a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e4ac:	4293      	cmp	r3, r2
 800e4ae:	d033      	beq.n	800e518 <SNTP_run+0x130>
		{
			if(ntp_retry_cnt==0)//first send request, no need to wait
 800e4b0:	4b28      	ldr	r3, [pc, #160]	; (800e554 <SNTP_run+0x16c>)
 800e4b2:	881b      	ldrh	r3, [r3, #0]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d10f      	bne.n	800e4d8 <SNTP_run+0xf0>
			{
				sendto(NTP_SOCKET,ntpmessage,sizeof(ntpmessage),NTPformat.dstaddr,ntp_port);
 800e4b8:	4b23      	ldr	r3, [pc, #140]	; (800e548 <SNTP_run+0x160>)
 800e4ba:	7818      	ldrb	r0, [r3, #0]
 800e4bc:	237b      	movs	r3, #123	; 0x7b
 800e4be:	9300      	str	r3, [sp, #0]
 800e4c0:	4b25      	ldr	r3, [pc, #148]	; (800e558 <SNTP_run+0x170>)
 800e4c2:	2230      	movs	r2, #48	; 0x30
 800e4c4:	4925      	ldr	r1, [pc, #148]	; (800e55c <SNTP_run+0x174>)
 800e4c6:	f7fd fb9b 	bl	800bc00 <sendto>
				ntp_retry_cnt++;
 800e4ca:	4b22      	ldr	r3, [pc, #136]	; (800e554 <SNTP_run+0x16c>)
 800e4cc:	881b      	ldrh	r3, [r3, #0]
 800e4ce:	3301      	adds	r3, #1
 800e4d0:	b29a      	uxth	r2, r3
 800e4d2:	4b20      	ldr	r3, [pc, #128]	; (800e554 <SNTP_run+0x16c>)
 800e4d4:	801a      	strh	r2, [r3, #0]
#ifdef _SNTP_DEBUG_
			printf("ntp retry failed!\r\n");
#endif
			close(NTP_SOCKET);
		}
		break;
 800e4d6:	e030      	b.n	800e53a <SNTP_run+0x152>
				if((ntp_retry_cnt % 0xFFF) == 0) //wait time
 800e4d8:	4b1e      	ldr	r3, [pc, #120]	; (800e554 <SNTP_run+0x16c>)
 800e4da:	881a      	ldrh	r2, [r3, #0]
 800e4dc:	4b20      	ldr	r3, [pc, #128]	; (800e560 <SNTP_run+0x178>)
 800e4de:	fba3 1302 	umull	r1, r3, r3, r2
 800e4e2:	1ad1      	subs	r1, r2, r3
 800e4e4:	0849      	lsrs	r1, r1, #1
 800e4e6:	440b      	add	r3, r1
 800e4e8:	0ad9      	lsrs	r1, r3, #11
 800e4ea:	460b      	mov	r3, r1
 800e4ec:	031b      	lsls	r3, r3, #12
 800e4ee:	1a5b      	subs	r3, r3, r1
 800e4f0:	1ad3      	subs	r3, r2, r3
 800e4f2:	b29b      	uxth	r3, r3
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d120      	bne.n	800e53a <SNTP_run+0x152>
					sendto(NTP_SOCKET,ntpmessage,sizeof(ntpmessage),NTPformat.dstaddr,ntp_port);
 800e4f8:	4b13      	ldr	r3, [pc, #76]	; (800e548 <SNTP_run+0x160>)
 800e4fa:	7818      	ldrb	r0, [r3, #0]
 800e4fc:	237b      	movs	r3, #123	; 0x7b
 800e4fe:	9300      	str	r3, [sp, #0]
 800e500:	4b15      	ldr	r3, [pc, #84]	; (800e558 <SNTP_run+0x170>)
 800e502:	2230      	movs	r2, #48	; 0x30
 800e504:	4915      	ldr	r1, [pc, #84]	; (800e55c <SNTP_run+0x174>)
 800e506:	f7fd fb7b 	bl	800bc00 <sendto>
					ntp_retry_cnt++;
 800e50a:	4b12      	ldr	r3, [pc, #72]	; (800e554 <SNTP_run+0x16c>)
 800e50c:	881b      	ldrh	r3, [r3, #0]
 800e50e:	3301      	adds	r3, #1
 800e510:	b29a      	uxth	r2, r3
 800e512:	4b10      	ldr	r3, [pc, #64]	; (800e554 <SNTP_run+0x16c>)
 800e514:	801a      	strh	r2, [r3, #0]
		break;
 800e516:	e010      	b.n	800e53a <SNTP_run+0x152>
			ntp_retry_cnt=0;
 800e518:	4b0e      	ldr	r3, [pc, #56]	; (800e554 <SNTP_run+0x16c>)
 800e51a:	2200      	movs	r2, #0
 800e51c:	801a      	strh	r2, [r3, #0]
			close(NTP_SOCKET);
 800e51e:	4b0a      	ldr	r3, [pc, #40]	; (800e548 <SNTP_run+0x160>)
 800e520:	781b      	ldrb	r3, [r3, #0]
 800e522:	4618      	mov	r0, r3
 800e524:	f7fc fffc 	bl	800b520 <close>
		break;
 800e528:	e007      	b.n	800e53a <SNTP_run+0x152>
	case SOCK_CLOSED:
		socket(NTP_SOCKET,Sn_MR_UDP,ntp_port,0);
 800e52a:	4b07      	ldr	r3, [pc, #28]	; (800e548 <SNTP_run+0x160>)
 800e52c:	7818      	ldrb	r0, [r3, #0]
 800e52e:	2300      	movs	r3, #0
 800e530:	227b      	movs	r2, #123	; 0x7b
 800e532:	2102      	movs	r1, #2
 800e534:	f7fc fede 	bl	800b2f4 <socket>
		break;
 800e538:	e000      	b.n	800e53c <SNTP_run+0x154>
		break;
 800e53a:	bf00      	nop
	}
	// Return value
	// 0 - failed / 1 - success
	return 0;
 800e53c:	2300      	movs	r3, #0
}
 800e53e:	4618      	mov	r0, r3
 800e540:	371c      	adds	r7, #28
 800e542:	46bd      	mov	sp, r7
 800e544:	bd90      	pop	{r4, r7, pc}
 800e546:	bf00      	nop
 800e548:	2000394c 	.word	0x2000394c
 800e54c:	20003948 	.word	0x20003948
 800e550:	20003910 	.word	0x20003910
 800e554:	2000394e 	.word	0x2000394e
 800e558:	200038d8 	.word	0x200038d8
 800e55c:	20003918 	.word	0x20003918
 800e560:	00100101 	.word	0x00100101

0800e564 <calcdatetime>:

void calcdatetime(tstamp seconds)
{
 800e564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e568:	b0ae      	sub	sp, #184	; 0xb8
 800e56a:	af00      	add	r7, sp, #0
 800e56c:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
	uint8_t yf=0;
 800e570:	2300      	movs	r3, #0
 800e572:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	tstamp n=0,d=0,total_d=0,rz=0;
 800e576:	f04f 0200 	mov.w	r2, #0
 800e57a:	f04f 0300 	mov.w	r3, #0
 800e57e:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 800e582:	f04f 0200 	mov.w	r2, #0
 800e586:	f04f 0300 	mov.w	r3, #0
 800e58a:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 800e58e:	f04f 0200 	mov.w	r2, #0
 800e592:	f04f 0300 	mov.w	r3, #0
 800e596:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 800e59a:	f04f 0200 	mov.w	r2, #0
 800e59e:	f04f 0300 	mov.w	r3, #0
 800e5a2:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	uint16_t y=0,r=0,yr=0;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	signed long long yd=0;
 800e5b8:	f04f 0200 	mov.w	r2, #0
 800e5bc:	f04f 0300 	mov.w	r3, #0
 800e5c0:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88

	n = seconds;
 800e5c4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e5c8:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	total_d = seconds/(SECS_PERDAY);
 800e5cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e5d0:	4ac0      	ldr	r2, [pc, #768]	; (800e8d4 <calcdatetime+0x370>)
 800e5d2:	f04f 0300 	mov.w	r3, #0
 800e5d6:	f7f2 fb5f 	bl	8000c98 <__aeabi_uldivmod>
 800e5da:	4602      	mov	r2, r0
 800e5dc:	460b      	mov	r3, r1
 800e5de:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	d=0;
 800e5e2:	f04f 0200 	mov.w	r2, #0
 800e5e6:	f04f 0300 	mov.w	r3, #0
 800e5ea:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	uint32_t p_year_total_sec=SECS_PERDAY*365;
 800e5ee:	4bba      	ldr	r3, [pc, #744]	; (800e8d8 <calcdatetime+0x374>)
 800e5f0:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t r_year_total_sec=SECS_PERDAY*366;
 800e5f2:	4bba      	ldr	r3, [pc, #744]	; (800e8dc <calcdatetime+0x378>)
 800e5f4:	677b      	str	r3, [r7, #116]	; 0x74
	while(n>=p_year_total_sec)
 800e5f6:	e06c      	b.n	800e6d2 <calcdatetime+0x16e>
	{
		if((EPOCH+r)%400==0 || ((EPOCH+r)%100!=0 && (EPOCH+r)%4==0))
 800e5f8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800e5fc:	f203 716c 	addw	r1, r3, #1900	; 0x76c
 800e600:	4bb7      	ldr	r3, [pc, #732]	; (800e8e0 <calcdatetime+0x37c>)
 800e602:	fb83 2301 	smull	r2, r3, r3, r1
 800e606:	11da      	asrs	r2, r3, #7
 800e608:	17cb      	asrs	r3, r1, #31
 800e60a:	1ad3      	subs	r3, r2, r3
 800e60c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800e610:	fb02 f303 	mul.w	r3, r2, r3
 800e614:	1acb      	subs	r3, r1, r3
 800e616:	2b00      	cmp	r3, #0
 800e618:	d017      	beq.n	800e64a <calcdatetime+0xe6>
 800e61a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800e61e:	f203 716c 	addw	r1, r3, #1900	; 0x76c
 800e622:	4baf      	ldr	r3, [pc, #700]	; (800e8e0 <calcdatetime+0x37c>)
 800e624:	fb83 2301 	smull	r2, r3, r3, r1
 800e628:	115a      	asrs	r2, r3, #5
 800e62a:	17cb      	asrs	r3, r1, #31
 800e62c:	1ad3      	subs	r3, r2, r3
 800e62e:	2264      	movs	r2, #100	; 0x64
 800e630:	fb02 f303 	mul.w	r3, r2, r3
 800e634:	1acb      	subs	r3, r1, r3
 800e636:	2b00      	cmp	r3, #0
 800e638:	d024      	beq.n	800e684 <calcdatetime+0x120>
 800e63a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800e63e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800e642:	f003 0303 	and.w	r3, r3, #3
 800e646:	2b00      	cmp	r3, #0
 800e648:	d11c      	bne.n	800e684 <calcdatetime+0x120>
		{
			n = n -(r_year_total_sec);
 800e64a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e64c:	2200      	movs	r2, #0
 800e64e:	4698      	mov	r8, r3
 800e650:	4691      	mov	r9, r2
 800e652:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800e656:	ebb2 0108 	subs.w	r1, r2, r8
 800e65a:	65b9      	str	r1, [r7, #88]	; 0x58
 800e65c:	eb63 0309 	sbc.w	r3, r3, r9
 800e660:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e662:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e666:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
			d = d + 366;
 800e66a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800e66e:	f512 71b7 	adds.w	r1, r2, #366	; 0x16e
 800e672:	6539      	str	r1, [r7, #80]	; 0x50
 800e674:	f143 0300 	adc.w	r3, r3, #0
 800e678:	657b      	str	r3, [r7, #84]	; 0x54
 800e67a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800e67e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 800e682:	e01c      	b.n	800e6be <calcdatetime+0x15a>
		}
		else
		{
			n = n - (p_year_total_sec);
 800e684:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e686:	2200      	movs	r2, #0
 800e688:	469a      	mov	sl, r3
 800e68a:	4693      	mov	fp, r2
 800e68c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800e690:	ebb2 010a 	subs.w	r1, r2, sl
 800e694:	64b9      	str	r1, [r7, #72]	; 0x48
 800e696:	eb63 030b 	sbc.w	r3, r3, fp
 800e69a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e69c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800e6a0:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
			d = d + 365;
 800e6a4:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800e6a8:	f240 116d 	movw	r1, #365	; 0x16d
 800e6ac:	1851      	adds	r1, r2, r1
 800e6ae:	6439      	str	r1, [r7, #64]	; 0x40
 800e6b0:	f143 0300 	adc.w	r3, r3, #0
 800e6b4:	647b      	str	r3, [r7, #68]	; 0x44
 800e6b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e6ba:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
		}
		r+=1;
 800e6be:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800e6c2:	3301      	adds	r3, #1
 800e6c4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
		y+=1;
 800e6c8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e6cc:	3301      	adds	r3, #1
 800e6ce:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	while(n>=p_year_total_sec)
 800e6d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	461c      	mov	r4, r3
 800e6d8:	4615      	mov	r5, r2
 800e6da:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800e6de:	42a2      	cmp	r2, r4
 800e6e0:	41ab      	sbcs	r3, r5
 800e6e2:	d289      	bcs.n	800e5f8 <calcdatetime+0x94>

	}

	y += EPOCH;
 800e6e4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e6e8:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800e6ec:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

	Nowdatetime.yy = y;
 800e6f0:	4a7c      	ldr	r2, [pc, #496]	; (800e8e4 <calcdatetime+0x380>)
 800e6f2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e6f6:	8013      	strh	r3, [r2, #0]

	yd=0;
 800e6f8:	f04f 0200 	mov.w	r2, #0
 800e6fc:	f04f 0300 	mov.w	r3, #0
 800e700:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	yd = total_d - d;
 800e704:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800e708:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800e70c:	1a84      	subs	r4, r0, r2
 800e70e:	663c      	str	r4, [r7, #96]	; 0x60
 800e710:	eb61 0303 	sbc.w	r3, r1, r3
 800e714:	667b      	str	r3, [r7, #100]	; 0x64
 800e716:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800e71a:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88

	yf=1;
 800e71e:	2301      	movs	r3, #1
 800e720:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	while(yd>=28)
 800e724:	e0c8      	b.n	800e8b8 <calcdatetime+0x354>
	{

		if(yf==1 || yf==3 || yf==5 || yf==7 || yf==8 || yf==10 || yf==12)
 800e726:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800e72a:	2b01      	cmp	r3, #1
 800e72c:	d017      	beq.n	800e75e <calcdatetime+0x1fa>
 800e72e:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800e732:	2b03      	cmp	r3, #3
 800e734:	d013      	beq.n	800e75e <calcdatetime+0x1fa>
 800e736:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800e73a:	2b05      	cmp	r3, #5
 800e73c:	d00f      	beq.n	800e75e <calcdatetime+0x1fa>
 800e73e:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800e742:	2b07      	cmp	r3, #7
 800e744:	d00b      	beq.n	800e75e <calcdatetime+0x1fa>
 800e746:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800e74a:	2b08      	cmp	r3, #8
 800e74c:	d007      	beq.n	800e75e <calcdatetime+0x1fa>
 800e74e:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800e752:	2b0a      	cmp	r3, #10
 800e754:	d003      	beq.n	800e75e <calcdatetime+0x1fa>
 800e756:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800e75a:	2b0c      	cmp	r3, #12
 800e75c:	d11c      	bne.n	800e798 <calcdatetime+0x234>
		{
			yd -= 31;
 800e75e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800e762:	f1b2 011f 	subs.w	r1, r2, #31
 800e766:	63b9      	str	r1, [r7, #56]	; 0x38
 800e768:	f143 33ff 	adc.w	r3, r3, #4294967295
 800e76c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e76e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800e772:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			if(yd<0)break;
 800e776:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	f2c0 80a4 	blt.w	800e8c8 <calcdatetime+0x364>
			rz += 31;
 800e780:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800e784:	f112 011f 	adds.w	r1, r2, #31
 800e788:	6339      	str	r1, [r7, #48]	; 0x30
 800e78a:	f143 0300 	adc.w	r3, r3, #0
 800e78e:	637b      	str	r3, [r7, #52]	; 0x34
 800e790:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800e794:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		}

		if (yf==2)
 800e798:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800e79c:	2b02      	cmp	r3, #2
 800e79e:	d15a      	bne.n	800e856 <calcdatetime+0x2f2>
		{
			if (y%400==0 || (y%100!=0 && y%4==0))
 800e7a0:	f8b7 1096 	ldrh.w	r1, [r7, #150]	; 0x96
 800e7a4:	4b4e      	ldr	r3, [pc, #312]	; (800e8e0 <calcdatetime+0x37c>)
 800e7a6:	fba3 2301 	umull	r2, r3, r3, r1
 800e7aa:	09da      	lsrs	r2, r3, #7
 800e7ac:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800e7b0:	fb02 f303 	mul.w	r3, r2, r3
 800e7b4:	1acb      	subs	r3, r1, r3
 800e7b6:	b29b      	uxth	r3, r3
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d013      	beq.n	800e7e4 <calcdatetime+0x280>
 800e7bc:	f8b7 1096 	ldrh.w	r1, [r7, #150]	; 0x96
 800e7c0:	4b47      	ldr	r3, [pc, #284]	; (800e8e0 <calcdatetime+0x37c>)
 800e7c2:	fba3 2301 	umull	r2, r3, r3, r1
 800e7c6:	095a      	lsrs	r2, r3, #5
 800e7c8:	2364      	movs	r3, #100	; 0x64
 800e7ca:	fb02 f303 	mul.w	r3, r2, r3
 800e7ce:	1acb      	subs	r3, r1, r3
 800e7d0:	b29b      	uxth	r3, r3
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d023      	beq.n	800e81e <calcdatetime+0x2ba>
 800e7d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e7da:	f003 0303 	and.w	r3, r3, #3
 800e7de:	b29b      	uxth	r3, r3
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d11c      	bne.n	800e81e <calcdatetime+0x2ba>
			{
				yd -= 29;
 800e7e4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800e7e8:	f1b2 011d 	subs.w	r1, r2, #29
 800e7ec:	62b9      	str	r1, [r7, #40]	; 0x28
 800e7ee:	f143 33ff 	adc.w	r3, r3, #4294967295
 800e7f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7f4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800e7f8:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
				if(yd<0)break;
 800e7fc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800e800:	2b00      	cmp	r3, #0
 800e802:	db63      	blt.n	800e8cc <calcdatetime+0x368>
				rz += 29;
 800e804:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800e808:	f112 011d 	adds.w	r1, r2, #29
 800e80c:	6239      	str	r1, [r7, #32]
 800e80e:	f143 0300 	adc.w	r3, r3, #0
 800e812:	627b      	str	r3, [r7, #36]	; 0x24
 800e814:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800e818:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
 800e81c:	e01b      	b.n	800e856 <calcdatetime+0x2f2>
			}
			else
			{
				yd -= 28;
 800e81e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800e822:	f1b2 011c 	subs.w	r1, r2, #28
 800e826:	61b9      	str	r1, [r7, #24]
 800e828:	f143 33ff 	adc.w	r3, r3, #4294967295
 800e82c:	61fb      	str	r3, [r7, #28]
 800e82e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800e832:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
				if(yd<0)break;
 800e836:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	db48      	blt.n	800e8d0 <calcdatetime+0x36c>
				rz += 28;
 800e83e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800e842:	f112 011c 	adds.w	r1, r2, #28
 800e846:	6139      	str	r1, [r7, #16]
 800e848:	f143 0300 	adc.w	r3, r3, #0
 800e84c:	617b      	str	r3, [r7, #20]
 800e84e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e852:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			}
		}
		if(yf==4 || yf==6 || yf==9 || yf==11 )
 800e856:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800e85a:	2b04      	cmp	r3, #4
 800e85c:	d00b      	beq.n	800e876 <calcdatetime+0x312>
 800e85e:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800e862:	2b06      	cmp	r3, #6
 800e864:	d007      	beq.n	800e876 <calcdatetime+0x312>
 800e866:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800e86a:	2b09      	cmp	r3, #9
 800e86c:	d003      	beq.n	800e876 <calcdatetime+0x312>
 800e86e:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800e872:	2b0b      	cmp	r3, #11
 800e874:	d11b      	bne.n	800e8ae <calcdatetime+0x34a>
		{
			yd -= 30;
 800e876:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800e87a:	f1b2 011e 	subs.w	r1, r2, #30
 800e87e:	60b9      	str	r1, [r7, #8]
 800e880:	f143 33ff 	adc.w	r3, r3, #4294967295
 800e884:	60fb      	str	r3, [r7, #12]
 800e886:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800e88a:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			if(yd<0)break;
 800e88e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800e892:	2b00      	cmp	r3, #0
 800e894:	db28      	blt.n	800e8e8 <calcdatetime+0x384>
			rz += 30;
 800e896:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800e89a:	f112 011e 	adds.w	r1, r2, #30
 800e89e:	6039      	str	r1, [r7, #0]
 800e8a0:	f143 0300 	adc.w	r3, r3, #0
 800e8a4:	607b      	str	r3, [r7, #4]
 800e8a6:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e8aa:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		}
		yf += 1;
 800e8ae:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800e8b2:	3301      	adds	r3, #1
 800e8b4:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	while(yd>=28)
 800e8b8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800e8bc:	2a1c      	cmp	r2, #28
 800e8be:	f173 0300 	sbcs.w	r3, r3, #0
 800e8c2:	f6bf af30 	bge.w	800e726 <calcdatetime+0x1c2>
 800e8c6:	e010      	b.n	800e8ea <calcdatetime+0x386>
			if(yd<0)break;
 800e8c8:	bf00      	nop
 800e8ca:	e00e      	b.n	800e8ea <calcdatetime+0x386>
				if(yd<0)break;
 800e8cc:	bf00      	nop
 800e8ce:	e00c      	b.n	800e8ea <calcdatetime+0x386>
				if(yd<0)break;
 800e8d0:	bf00      	nop
 800e8d2:	e00a      	b.n	800e8ea <calcdatetime+0x386>
 800e8d4:	00015180 	.word	0x00015180
 800e8d8:	01e13380 	.word	0x01e13380
 800e8dc:	01e28500 	.word	0x01e28500
 800e8e0:	51eb851f 	.word	0x51eb851f
 800e8e4:	20003910 	.word	0x20003910
			if(yd<0)break;
 800e8e8:	bf00      	nop

	}
	Nowdatetime.mo=yf;
 800e8ea:	4a2e      	ldr	r2, [pc, #184]	; (800e9a4 <calcdatetime+0x440>)
 800e8ec:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800e8f0:	7093      	strb	r3, [r2, #2]
	yr = total_d-d-rz;
 800e8f2:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 800e8f6:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800e8fa:	1ad3      	subs	r3, r2, r3
 800e8fc:	b29a      	uxth	r2, r3
 800e8fe:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800e902:	1ad3      	subs	r3, r2, r3
 800e904:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

	yr += 1;
 800e908:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800e90c:	3301      	adds	r3, #1
 800e90e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

	Nowdatetime.dd=yr;
 800e912:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800e916:	b2da      	uxtb	r2, r3
 800e918:	4b22      	ldr	r3, [pc, #136]	; (800e9a4 <calcdatetime+0x440>)
 800e91a:	70da      	strb	r2, [r3, #3]

	//calculation for time
	seconds = seconds%SECS_PERDAY;
 800e91c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e920:	4a21      	ldr	r2, [pc, #132]	; (800e9a8 <calcdatetime+0x444>)
 800e922:	f04f 0300 	mov.w	r3, #0
 800e926:	f7f2 f9b7 	bl	8000c98 <__aeabi_uldivmod>
 800e92a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	Nowdatetime.hh = seconds/3600;
 800e92e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e932:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800e936:	f04f 0300 	mov.w	r3, #0
 800e93a:	f7f2 f9ad 	bl	8000c98 <__aeabi_uldivmod>
 800e93e:	4602      	mov	r2, r0
 800e940:	460b      	mov	r3, r1
 800e942:	b2d2      	uxtb	r2, r2
 800e944:	4b17      	ldr	r3, [pc, #92]	; (800e9a4 <calcdatetime+0x440>)
 800e946:	711a      	strb	r2, [r3, #4]
	Nowdatetime.mm = (seconds%3600)/60;
 800e948:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e94c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800e950:	f04f 0300 	mov.w	r3, #0
 800e954:	f7f2 f9a0 	bl	8000c98 <__aeabi_uldivmod>
 800e958:	4610      	mov	r0, r2
 800e95a:	4619      	mov	r1, r3
 800e95c:	f04f 023c 	mov.w	r2, #60	; 0x3c
 800e960:	f04f 0300 	mov.w	r3, #0
 800e964:	f7f2 f998 	bl	8000c98 <__aeabi_uldivmod>
 800e968:	4602      	mov	r2, r0
 800e96a:	460b      	mov	r3, r1
 800e96c:	b2d2      	uxtb	r2, r2
 800e96e:	4b0d      	ldr	r3, [pc, #52]	; (800e9a4 <calcdatetime+0x440>)
 800e970:	715a      	strb	r2, [r3, #5]
	Nowdatetime.ss = (seconds%3600)%60;
 800e972:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e976:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800e97a:	f04f 0300 	mov.w	r3, #0
 800e97e:	f7f2 f98b 	bl	8000c98 <__aeabi_uldivmod>
 800e982:	4610      	mov	r0, r2
 800e984:	4619      	mov	r1, r3
 800e986:	f04f 023c 	mov.w	r2, #60	; 0x3c
 800e98a:	f04f 0300 	mov.w	r3, #0
 800e98e:	f7f2 f983 	bl	8000c98 <__aeabi_uldivmod>
 800e992:	b2d2      	uxtb	r2, r2
 800e994:	4b03      	ldr	r3, [pc, #12]	; (800e9a4 <calcdatetime+0x440>)
 800e996:	719a      	strb	r2, [r3, #6]

}
 800e998:	bf00      	nop
 800e99a:	37b8      	adds	r7, #184	; 0xb8
 800e99c:	46bd      	mov	sp, r7
 800e99e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e9a2:	bf00      	nop
 800e9a4:	20003910 	.word	0x20003910
 800e9a8:	00015180 	.word	0x00015180

0800e9ac <__errno>:
 800e9ac:	4b01      	ldr	r3, [pc, #4]	; (800e9b4 <__errno+0x8>)
 800e9ae:	6818      	ldr	r0, [r3, #0]
 800e9b0:	4770      	bx	lr
 800e9b2:	bf00      	nop
 800e9b4:	200000ac 	.word	0x200000ac

0800e9b8 <__libc_init_array>:
 800e9b8:	b570      	push	{r4, r5, r6, lr}
 800e9ba:	4d0d      	ldr	r5, [pc, #52]	; (800e9f0 <__libc_init_array+0x38>)
 800e9bc:	4c0d      	ldr	r4, [pc, #52]	; (800e9f4 <__libc_init_array+0x3c>)
 800e9be:	1b64      	subs	r4, r4, r5
 800e9c0:	10a4      	asrs	r4, r4, #2
 800e9c2:	2600      	movs	r6, #0
 800e9c4:	42a6      	cmp	r6, r4
 800e9c6:	d109      	bne.n	800e9dc <__libc_init_array+0x24>
 800e9c8:	4d0b      	ldr	r5, [pc, #44]	; (800e9f8 <__libc_init_array+0x40>)
 800e9ca:	4c0c      	ldr	r4, [pc, #48]	; (800e9fc <__libc_init_array+0x44>)
 800e9cc:	f004 fd2e 	bl	801342c <_init>
 800e9d0:	1b64      	subs	r4, r4, r5
 800e9d2:	10a4      	asrs	r4, r4, #2
 800e9d4:	2600      	movs	r6, #0
 800e9d6:	42a6      	cmp	r6, r4
 800e9d8:	d105      	bne.n	800e9e6 <__libc_init_array+0x2e>
 800e9da:	bd70      	pop	{r4, r5, r6, pc}
 800e9dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9e0:	4798      	blx	r3
 800e9e2:	3601      	adds	r6, #1
 800e9e4:	e7ee      	b.n	800e9c4 <__libc_init_array+0xc>
 800e9e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9ea:	4798      	blx	r3
 800e9ec:	3601      	adds	r6, #1
 800e9ee:	e7f2      	b.n	800e9d6 <__libc_init_array+0x1e>
 800e9f0:	08014614 	.word	0x08014614
 800e9f4:	08014614 	.word	0x08014614
 800e9f8:	08014614 	.word	0x08014614
 800e9fc:	08014618 	.word	0x08014618

0800ea00 <malloc>:
 800ea00:	4b02      	ldr	r3, [pc, #8]	; (800ea0c <malloc+0xc>)
 800ea02:	4601      	mov	r1, r0
 800ea04:	6818      	ldr	r0, [r3, #0]
 800ea06:	f000 b88d 	b.w	800eb24 <_malloc_r>
 800ea0a:	bf00      	nop
 800ea0c:	200000ac 	.word	0x200000ac

0800ea10 <free>:
 800ea10:	4b02      	ldr	r3, [pc, #8]	; (800ea1c <free+0xc>)
 800ea12:	4601      	mov	r1, r0
 800ea14:	6818      	ldr	r0, [r3, #0]
 800ea16:	f000 b819 	b.w	800ea4c <_free_r>
 800ea1a:	bf00      	nop
 800ea1c:	200000ac 	.word	0x200000ac

0800ea20 <memcpy>:
 800ea20:	440a      	add	r2, r1
 800ea22:	4291      	cmp	r1, r2
 800ea24:	f100 33ff 	add.w	r3, r0, #4294967295
 800ea28:	d100      	bne.n	800ea2c <memcpy+0xc>
 800ea2a:	4770      	bx	lr
 800ea2c:	b510      	push	{r4, lr}
 800ea2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea36:	4291      	cmp	r1, r2
 800ea38:	d1f9      	bne.n	800ea2e <memcpy+0xe>
 800ea3a:	bd10      	pop	{r4, pc}

0800ea3c <memset>:
 800ea3c:	4402      	add	r2, r0
 800ea3e:	4603      	mov	r3, r0
 800ea40:	4293      	cmp	r3, r2
 800ea42:	d100      	bne.n	800ea46 <memset+0xa>
 800ea44:	4770      	bx	lr
 800ea46:	f803 1b01 	strb.w	r1, [r3], #1
 800ea4a:	e7f9      	b.n	800ea40 <memset+0x4>

0800ea4c <_free_r>:
 800ea4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea4e:	2900      	cmp	r1, #0
 800ea50:	d044      	beq.n	800eadc <_free_r+0x90>
 800ea52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea56:	9001      	str	r0, [sp, #4]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	f1a1 0404 	sub.w	r4, r1, #4
 800ea5e:	bfb8      	it	lt
 800ea60:	18e4      	addlt	r4, r4, r3
 800ea62:	f003 fbbb 	bl	80121dc <__malloc_lock>
 800ea66:	4a1e      	ldr	r2, [pc, #120]	; (800eae0 <_free_r+0x94>)
 800ea68:	9801      	ldr	r0, [sp, #4]
 800ea6a:	6813      	ldr	r3, [r2, #0]
 800ea6c:	b933      	cbnz	r3, 800ea7c <_free_r+0x30>
 800ea6e:	6063      	str	r3, [r4, #4]
 800ea70:	6014      	str	r4, [r2, #0]
 800ea72:	b003      	add	sp, #12
 800ea74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea78:	f003 bbb6 	b.w	80121e8 <__malloc_unlock>
 800ea7c:	42a3      	cmp	r3, r4
 800ea7e:	d908      	bls.n	800ea92 <_free_r+0x46>
 800ea80:	6825      	ldr	r5, [r4, #0]
 800ea82:	1961      	adds	r1, r4, r5
 800ea84:	428b      	cmp	r3, r1
 800ea86:	bf01      	itttt	eq
 800ea88:	6819      	ldreq	r1, [r3, #0]
 800ea8a:	685b      	ldreq	r3, [r3, #4]
 800ea8c:	1949      	addeq	r1, r1, r5
 800ea8e:	6021      	streq	r1, [r4, #0]
 800ea90:	e7ed      	b.n	800ea6e <_free_r+0x22>
 800ea92:	461a      	mov	r2, r3
 800ea94:	685b      	ldr	r3, [r3, #4]
 800ea96:	b10b      	cbz	r3, 800ea9c <_free_r+0x50>
 800ea98:	42a3      	cmp	r3, r4
 800ea9a:	d9fa      	bls.n	800ea92 <_free_r+0x46>
 800ea9c:	6811      	ldr	r1, [r2, #0]
 800ea9e:	1855      	adds	r5, r2, r1
 800eaa0:	42a5      	cmp	r5, r4
 800eaa2:	d10b      	bne.n	800eabc <_free_r+0x70>
 800eaa4:	6824      	ldr	r4, [r4, #0]
 800eaa6:	4421      	add	r1, r4
 800eaa8:	1854      	adds	r4, r2, r1
 800eaaa:	42a3      	cmp	r3, r4
 800eaac:	6011      	str	r1, [r2, #0]
 800eaae:	d1e0      	bne.n	800ea72 <_free_r+0x26>
 800eab0:	681c      	ldr	r4, [r3, #0]
 800eab2:	685b      	ldr	r3, [r3, #4]
 800eab4:	6053      	str	r3, [r2, #4]
 800eab6:	4421      	add	r1, r4
 800eab8:	6011      	str	r1, [r2, #0]
 800eaba:	e7da      	b.n	800ea72 <_free_r+0x26>
 800eabc:	d902      	bls.n	800eac4 <_free_r+0x78>
 800eabe:	230c      	movs	r3, #12
 800eac0:	6003      	str	r3, [r0, #0]
 800eac2:	e7d6      	b.n	800ea72 <_free_r+0x26>
 800eac4:	6825      	ldr	r5, [r4, #0]
 800eac6:	1961      	adds	r1, r4, r5
 800eac8:	428b      	cmp	r3, r1
 800eaca:	bf04      	itt	eq
 800eacc:	6819      	ldreq	r1, [r3, #0]
 800eace:	685b      	ldreq	r3, [r3, #4]
 800ead0:	6063      	str	r3, [r4, #4]
 800ead2:	bf04      	itt	eq
 800ead4:	1949      	addeq	r1, r1, r5
 800ead6:	6021      	streq	r1, [r4, #0]
 800ead8:	6054      	str	r4, [r2, #4]
 800eada:	e7ca      	b.n	800ea72 <_free_r+0x26>
 800eadc:	b003      	add	sp, #12
 800eade:	bd30      	pop	{r4, r5, pc}
 800eae0:	20003950 	.word	0x20003950

0800eae4 <sbrk_aligned>:
 800eae4:	b570      	push	{r4, r5, r6, lr}
 800eae6:	4e0e      	ldr	r6, [pc, #56]	; (800eb20 <sbrk_aligned+0x3c>)
 800eae8:	460c      	mov	r4, r1
 800eaea:	6831      	ldr	r1, [r6, #0]
 800eaec:	4605      	mov	r5, r0
 800eaee:	b911      	cbnz	r1, 800eaf6 <sbrk_aligned+0x12>
 800eaf0:	f000 ff94 	bl	800fa1c <_sbrk_r>
 800eaf4:	6030      	str	r0, [r6, #0]
 800eaf6:	4621      	mov	r1, r4
 800eaf8:	4628      	mov	r0, r5
 800eafa:	f000 ff8f 	bl	800fa1c <_sbrk_r>
 800eafe:	1c43      	adds	r3, r0, #1
 800eb00:	d00a      	beq.n	800eb18 <sbrk_aligned+0x34>
 800eb02:	1cc4      	adds	r4, r0, #3
 800eb04:	f024 0403 	bic.w	r4, r4, #3
 800eb08:	42a0      	cmp	r0, r4
 800eb0a:	d007      	beq.n	800eb1c <sbrk_aligned+0x38>
 800eb0c:	1a21      	subs	r1, r4, r0
 800eb0e:	4628      	mov	r0, r5
 800eb10:	f000 ff84 	bl	800fa1c <_sbrk_r>
 800eb14:	3001      	adds	r0, #1
 800eb16:	d101      	bne.n	800eb1c <sbrk_aligned+0x38>
 800eb18:	f04f 34ff 	mov.w	r4, #4294967295
 800eb1c:	4620      	mov	r0, r4
 800eb1e:	bd70      	pop	{r4, r5, r6, pc}
 800eb20:	20003954 	.word	0x20003954

0800eb24 <_malloc_r>:
 800eb24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb28:	1ccd      	adds	r5, r1, #3
 800eb2a:	f025 0503 	bic.w	r5, r5, #3
 800eb2e:	3508      	adds	r5, #8
 800eb30:	2d0c      	cmp	r5, #12
 800eb32:	bf38      	it	cc
 800eb34:	250c      	movcc	r5, #12
 800eb36:	2d00      	cmp	r5, #0
 800eb38:	4607      	mov	r7, r0
 800eb3a:	db01      	blt.n	800eb40 <_malloc_r+0x1c>
 800eb3c:	42a9      	cmp	r1, r5
 800eb3e:	d905      	bls.n	800eb4c <_malloc_r+0x28>
 800eb40:	230c      	movs	r3, #12
 800eb42:	603b      	str	r3, [r7, #0]
 800eb44:	2600      	movs	r6, #0
 800eb46:	4630      	mov	r0, r6
 800eb48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb4c:	4e2e      	ldr	r6, [pc, #184]	; (800ec08 <_malloc_r+0xe4>)
 800eb4e:	f003 fb45 	bl	80121dc <__malloc_lock>
 800eb52:	6833      	ldr	r3, [r6, #0]
 800eb54:	461c      	mov	r4, r3
 800eb56:	bb34      	cbnz	r4, 800eba6 <_malloc_r+0x82>
 800eb58:	4629      	mov	r1, r5
 800eb5a:	4638      	mov	r0, r7
 800eb5c:	f7ff ffc2 	bl	800eae4 <sbrk_aligned>
 800eb60:	1c43      	adds	r3, r0, #1
 800eb62:	4604      	mov	r4, r0
 800eb64:	d14d      	bne.n	800ec02 <_malloc_r+0xde>
 800eb66:	6834      	ldr	r4, [r6, #0]
 800eb68:	4626      	mov	r6, r4
 800eb6a:	2e00      	cmp	r6, #0
 800eb6c:	d140      	bne.n	800ebf0 <_malloc_r+0xcc>
 800eb6e:	6823      	ldr	r3, [r4, #0]
 800eb70:	4631      	mov	r1, r6
 800eb72:	4638      	mov	r0, r7
 800eb74:	eb04 0803 	add.w	r8, r4, r3
 800eb78:	f000 ff50 	bl	800fa1c <_sbrk_r>
 800eb7c:	4580      	cmp	r8, r0
 800eb7e:	d13a      	bne.n	800ebf6 <_malloc_r+0xd2>
 800eb80:	6821      	ldr	r1, [r4, #0]
 800eb82:	3503      	adds	r5, #3
 800eb84:	1a6d      	subs	r5, r5, r1
 800eb86:	f025 0503 	bic.w	r5, r5, #3
 800eb8a:	3508      	adds	r5, #8
 800eb8c:	2d0c      	cmp	r5, #12
 800eb8e:	bf38      	it	cc
 800eb90:	250c      	movcc	r5, #12
 800eb92:	4629      	mov	r1, r5
 800eb94:	4638      	mov	r0, r7
 800eb96:	f7ff ffa5 	bl	800eae4 <sbrk_aligned>
 800eb9a:	3001      	adds	r0, #1
 800eb9c:	d02b      	beq.n	800ebf6 <_malloc_r+0xd2>
 800eb9e:	6823      	ldr	r3, [r4, #0]
 800eba0:	442b      	add	r3, r5
 800eba2:	6023      	str	r3, [r4, #0]
 800eba4:	e00e      	b.n	800ebc4 <_malloc_r+0xa0>
 800eba6:	6822      	ldr	r2, [r4, #0]
 800eba8:	1b52      	subs	r2, r2, r5
 800ebaa:	d41e      	bmi.n	800ebea <_malloc_r+0xc6>
 800ebac:	2a0b      	cmp	r2, #11
 800ebae:	d916      	bls.n	800ebde <_malloc_r+0xba>
 800ebb0:	1961      	adds	r1, r4, r5
 800ebb2:	42a3      	cmp	r3, r4
 800ebb4:	6025      	str	r5, [r4, #0]
 800ebb6:	bf18      	it	ne
 800ebb8:	6059      	strne	r1, [r3, #4]
 800ebba:	6863      	ldr	r3, [r4, #4]
 800ebbc:	bf08      	it	eq
 800ebbe:	6031      	streq	r1, [r6, #0]
 800ebc0:	5162      	str	r2, [r4, r5]
 800ebc2:	604b      	str	r3, [r1, #4]
 800ebc4:	4638      	mov	r0, r7
 800ebc6:	f104 060b 	add.w	r6, r4, #11
 800ebca:	f003 fb0d 	bl	80121e8 <__malloc_unlock>
 800ebce:	f026 0607 	bic.w	r6, r6, #7
 800ebd2:	1d23      	adds	r3, r4, #4
 800ebd4:	1af2      	subs	r2, r6, r3
 800ebd6:	d0b6      	beq.n	800eb46 <_malloc_r+0x22>
 800ebd8:	1b9b      	subs	r3, r3, r6
 800ebda:	50a3      	str	r3, [r4, r2]
 800ebdc:	e7b3      	b.n	800eb46 <_malloc_r+0x22>
 800ebde:	6862      	ldr	r2, [r4, #4]
 800ebe0:	42a3      	cmp	r3, r4
 800ebe2:	bf0c      	ite	eq
 800ebe4:	6032      	streq	r2, [r6, #0]
 800ebe6:	605a      	strne	r2, [r3, #4]
 800ebe8:	e7ec      	b.n	800ebc4 <_malloc_r+0xa0>
 800ebea:	4623      	mov	r3, r4
 800ebec:	6864      	ldr	r4, [r4, #4]
 800ebee:	e7b2      	b.n	800eb56 <_malloc_r+0x32>
 800ebf0:	4634      	mov	r4, r6
 800ebf2:	6876      	ldr	r6, [r6, #4]
 800ebf4:	e7b9      	b.n	800eb6a <_malloc_r+0x46>
 800ebf6:	230c      	movs	r3, #12
 800ebf8:	603b      	str	r3, [r7, #0]
 800ebfa:	4638      	mov	r0, r7
 800ebfc:	f003 faf4 	bl	80121e8 <__malloc_unlock>
 800ec00:	e7a1      	b.n	800eb46 <_malloc_r+0x22>
 800ec02:	6025      	str	r5, [r4, #0]
 800ec04:	e7de      	b.n	800ebc4 <_malloc_r+0xa0>
 800ec06:	bf00      	nop
 800ec08:	20003950 	.word	0x20003950

0800ec0c <__cvt>:
 800ec0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec10:	ec55 4b10 	vmov	r4, r5, d0
 800ec14:	2d00      	cmp	r5, #0
 800ec16:	460e      	mov	r6, r1
 800ec18:	4619      	mov	r1, r3
 800ec1a:	462b      	mov	r3, r5
 800ec1c:	bfbb      	ittet	lt
 800ec1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ec22:	461d      	movlt	r5, r3
 800ec24:	2300      	movge	r3, #0
 800ec26:	232d      	movlt	r3, #45	; 0x2d
 800ec28:	700b      	strb	r3, [r1, #0]
 800ec2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec2c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ec30:	4691      	mov	r9, r2
 800ec32:	f023 0820 	bic.w	r8, r3, #32
 800ec36:	bfbc      	itt	lt
 800ec38:	4622      	movlt	r2, r4
 800ec3a:	4614      	movlt	r4, r2
 800ec3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ec40:	d005      	beq.n	800ec4e <__cvt+0x42>
 800ec42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ec46:	d100      	bne.n	800ec4a <__cvt+0x3e>
 800ec48:	3601      	adds	r6, #1
 800ec4a:	2102      	movs	r1, #2
 800ec4c:	e000      	b.n	800ec50 <__cvt+0x44>
 800ec4e:	2103      	movs	r1, #3
 800ec50:	ab03      	add	r3, sp, #12
 800ec52:	9301      	str	r3, [sp, #4]
 800ec54:	ab02      	add	r3, sp, #8
 800ec56:	9300      	str	r3, [sp, #0]
 800ec58:	ec45 4b10 	vmov	d0, r4, r5
 800ec5c:	4653      	mov	r3, sl
 800ec5e:	4632      	mov	r2, r6
 800ec60:	f001 ff2a 	bl	8010ab8 <_dtoa_r>
 800ec64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ec68:	4607      	mov	r7, r0
 800ec6a:	d102      	bne.n	800ec72 <__cvt+0x66>
 800ec6c:	f019 0f01 	tst.w	r9, #1
 800ec70:	d022      	beq.n	800ecb8 <__cvt+0xac>
 800ec72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ec76:	eb07 0906 	add.w	r9, r7, r6
 800ec7a:	d110      	bne.n	800ec9e <__cvt+0x92>
 800ec7c:	783b      	ldrb	r3, [r7, #0]
 800ec7e:	2b30      	cmp	r3, #48	; 0x30
 800ec80:	d10a      	bne.n	800ec98 <__cvt+0x8c>
 800ec82:	2200      	movs	r2, #0
 800ec84:	2300      	movs	r3, #0
 800ec86:	4620      	mov	r0, r4
 800ec88:	4629      	mov	r1, r5
 800ec8a:	f7f1 ff25 	bl	8000ad8 <__aeabi_dcmpeq>
 800ec8e:	b918      	cbnz	r0, 800ec98 <__cvt+0x8c>
 800ec90:	f1c6 0601 	rsb	r6, r6, #1
 800ec94:	f8ca 6000 	str.w	r6, [sl]
 800ec98:	f8da 3000 	ldr.w	r3, [sl]
 800ec9c:	4499      	add	r9, r3
 800ec9e:	2200      	movs	r2, #0
 800eca0:	2300      	movs	r3, #0
 800eca2:	4620      	mov	r0, r4
 800eca4:	4629      	mov	r1, r5
 800eca6:	f7f1 ff17 	bl	8000ad8 <__aeabi_dcmpeq>
 800ecaa:	b108      	cbz	r0, 800ecb0 <__cvt+0xa4>
 800ecac:	f8cd 900c 	str.w	r9, [sp, #12]
 800ecb0:	2230      	movs	r2, #48	; 0x30
 800ecb2:	9b03      	ldr	r3, [sp, #12]
 800ecb4:	454b      	cmp	r3, r9
 800ecb6:	d307      	bcc.n	800ecc8 <__cvt+0xbc>
 800ecb8:	9b03      	ldr	r3, [sp, #12]
 800ecba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ecbc:	1bdb      	subs	r3, r3, r7
 800ecbe:	4638      	mov	r0, r7
 800ecc0:	6013      	str	r3, [r2, #0]
 800ecc2:	b004      	add	sp, #16
 800ecc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecc8:	1c59      	adds	r1, r3, #1
 800ecca:	9103      	str	r1, [sp, #12]
 800eccc:	701a      	strb	r2, [r3, #0]
 800ecce:	e7f0      	b.n	800ecb2 <__cvt+0xa6>

0800ecd0 <__exponent>:
 800ecd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	2900      	cmp	r1, #0
 800ecd6:	bfb8      	it	lt
 800ecd8:	4249      	neglt	r1, r1
 800ecda:	f803 2b02 	strb.w	r2, [r3], #2
 800ecde:	bfb4      	ite	lt
 800ece0:	222d      	movlt	r2, #45	; 0x2d
 800ece2:	222b      	movge	r2, #43	; 0x2b
 800ece4:	2909      	cmp	r1, #9
 800ece6:	7042      	strb	r2, [r0, #1]
 800ece8:	dd2a      	ble.n	800ed40 <__exponent+0x70>
 800ecea:	f10d 0407 	add.w	r4, sp, #7
 800ecee:	46a4      	mov	ip, r4
 800ecf0:	270a      	movs	r7, #10
 800ecf2:	46a6      	mov	lr, r4
 800ecf4:	460a      	mov	r2, r1
 800ecf6:	fb91 f6f7 	sdiv	r6, r1, r7
 800ecfa:	fb07 1516 	mls	r5, r7, r6, r1
 800ecfe:	3530      	adds	r5, #48	; 0x30
 800ed00:	2a63      	cmp	r2, #99	; 0x63
 800ed02:	f104 34ff 	add.w	r4, r4, #4294967295
 800ed06:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ed0a:	4631      	mov	r1, r6
 800ed0c:	dcf1      	bgt.n	800ecf2 <__exponent+0x22>
 800ed0e:	3130      	adds	r1, #48	; 0x30
 800ed10:	f1ae 0502 	sub.w	r5, lr, #2
 800ed14:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ed18:	1c44      	adds	r4, r0, #1
 800ed1a:	4629      	mov	r1, r5
 800ed1c:	4561      	cmp	r1, ip
 800ed1e:	d30a      	bcc.n	800ed36 <__exponent+0x66>
 800ed20:	f10d 0209 	add.w	r2, sp, #9
 800ed24:	eba2 020e 	sub.w	r2, r2, lr
 800ed28:	4565      	cmp	r5, ip
 800ed2a:	bf88      	it	hi
 800ed2c:	2200      	movhi	r2, #0
 800ed2e:	4413      	add	r3, r2
 800ed30:	1a18      	subs	r0, r3, r0
 800ed32:	b003      	add	sp, #12
 800ed34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed36:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed3a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ed3e:	e7ed      	b.n	800ed1c <__exponent+0x4c>
 800ed40:	2330      	movs	r3, #48	; 0x30
 800ed42:	3130      	adds	r1, #48	; 0x30
 800ed44:	7083      	strb	r3, [r0, #2]
 800ed46:	70c1      	strb	r1, [r0, #3]
 800ed48:	1d03      	adds	r3, r0, #4
 800ed4a:	e7f1      	b.n	800ed30 <__exponent+0x60>

0800ed4c <_printf_float>:
 800ed4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed50:	ed2d 8b02 	vpush	{d8}
 800ed54:	b08d      	sub	sp, #52	; 0x34
 800ed56:	460c      	mov	r4, r1
 800ed58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ed5c:	4616      	mov	r6, r2
 800ed5e:	461f      	mov	r7, r3
 800ed60:	4605      	mov	r5, r0
 800ed62:	f003 f9bd 	bl	80120e0 <_localeconv_r>
 800ed66:	f8d0 a000 	ldr.w	sl, [r0]
 800ed6a:	4650      	mov	r0, sl
 800ed6c:	f7f1 fa38 	bl	80001e0 <strlen>
 800ed70:	2300      	movs	r3, #0
 800ed72:	930a      	str	r3, [sp, #40]	; 0x28
 800ed74:	6823      	ldr	r3, [r4, #0]
 800ed76:	9305      	str	r3, [sp, #20]
 800ed78:	f8d8 3000 	ldr.w	r3, [r8]
 800ed7c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ed80:	3307      	adds	r3, #7
 800ed82:	f023 0307 	bic.w	r3, r3, #7
 800ed86:	f103 0208 	add.w	r2, r3, #8
 800ed8a:	f8c8 2000 	str.w	r2, [r8]
 800ed8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed92:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ed96:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ed9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ed9e:	9307      	str	r3, [sp, #28]
 800eda0:	f8cd 8018 	str.w	r8, [sp, #24]
 800eda4:	ee08 0a10 	vmov	s16, r0
 800eda8:	4b9f      	ldr	r3, [pc, #636]	; (800f028 <_printf_float+0x2dc>)
 800edaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800edae:	f04f 32ff 	mov.w	r2, #4294967295
 800edb2:	f7f1 fec3 	bl	8000b3c <__aeabi_dcmpun>
 800edb6:	bb88      	cbnz	r0, 800ee1c <_printf_float+0xd0>
 800edb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800edbc:	4b9a      	ldr	r3, [pc, #616]	; (800f028 <_printf_float+0x2dc>)
 800edbe:	f04f 32ff 	mov.w	r2, #4294967295
 800edc2:	f7f1 fe9d 	bl	8000b00 <__aeabi_dcmple>
 800edc6:	bb48      	cbnz	r0, 800ee1c <_printf_float+0xd0>
 800edc8:	2200      	movs	r2, #0
 800edca:	2300      	movs	r3, #0
 800edcc:	4640      	mov	r0, r8
 800edce:	4649      	mov	r1, r9
 800edd0:	f7f1 fe8c 	bl	8000aec <__aeabi_dcmplt>
 800edd4:	b110      	cbz	r0, 800eddc <_printf_float+0x90>
 800edd6:	232d      	movs	r3, #45	; 0x2d
 800edd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eddc:	4b93      	ldr	r3, [pc, #588]	; (800f02c <_printf_float+0x2e0>)
 800edde:	4894      	ldr	r0, [pc, #592]	; (800f030 <_printf_float+0x2e4>)
 800ede0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ede4:	bf94      	ite	ls
 800ede6:	4698      	movls	r8, r3
 800ede8:	4680      	movhi	r8, r0
 800edea:	2303      	movs	r3, #3
 800edec:	6123      	str	r3, [r4, #16]
 800edee:	9b05      	ldr	r3, [sp, #20]
 800edf0:	f023 0204 	bic.w	r2, r3, #4
 800edf4:	6022      	str	r2, [r4, #0]
 800edf6:	f04f 0900 	mov.w	r9, #0
 800edfa:	9700      	str	r7, [sp, #0]
 800edfc:	4633      	mov	r3, r6
 800edfe:	aa0b      	add	r2, sp, #44	; 0x2c
 800ee00:	4621      	mov	r1, r4
 800ee02:	4628      	mov	r0, r5
 800ee04:	f000 f9d8 	bl	800f1b8 <_printf_common>
 800ee08:	3001      	adds	r0, #1
 800ee0a:	f040 8090 	bne.w	800ef2e <_printf_float+0x1e2>
 800ee0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ee12:	b00d      	add	sp, #52	; 0x34
 800ee14:	ecbd 8b02 	vpop	{d8}
 800ee18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee1c:	4642      	mov	r2, r8
 800ee1e:	464b      	mov	r3, r9
 800ee20:	4640      	mov	r0, r8
 800ee22:	4649      	mov	r1, r9
 800ee24:	f7f1 fe8a 	bl	8000b3c <__aeabi_dcmpun>
 800ee28:	b140      	cbz	r0, 800ee3c <_printf_float+0xf0>
 800ee2a:	464b      	mov	r3, r9
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	bfbc      	itt	lt
 800ee30:	232d      	movlt	r3, #45	; 0x2d
 800ee32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ee36:	487f      	ldr	r0, [pc, #508]	; (800f034 <_printf_float+0x2e8>)
 800ee38:	4b7f      	ldr	r3, [pc, #508]	; (800f038 <_printf_float+0x2ec>)
 800ee3a:	e7d1      	b.n	800ede0 <_printf_float+0x94>
 800ee3c:	6863      	ldr	r3, [r4, #4]
 800ee3e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ee42:	9206      	str	r2, [sp, #24]
 800ee44:	1c5a      	adds	r2, r3, #1
 800ee46:	d13f      	bne.n	800eec8 <_printf_float+0x17c>
 800ee48:	2306      	movs	r3, #6
 800ee4a:	6063      	str	r3, [r4, #4]
 800ee4c:	9b05      	ldr	r3, [sp, #20]
 800ee4e:	6861      	ldr	r1, [r4, #4]
 800ee50:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ee54:	2300      	movs	r3, #0
 800ee56:	9303      	str	r3, [sp, #12]
 800ee58:	ab0a      	add	r3, sp, #40	; 0x28
 800ee5a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ee5e:	ab09      	add	r3, sp, #36	; 0x24
 800ee60:	ec49 8b10 	vmov	d0, r8, r9
 800ee64:	9300      	str	r3, [sp, #0]
 800ee66:	6022      	str	r2, [r4, #0]
 800ee68:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ee6c:	4628      	mov	r0, r5
 800ee6e:	f7ff fecd 	bl	800ec0c <__cvt>
 800ee72:	9b06      	ldr	r3, [sp, #24]
 800ee74:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ee76:	2b47      	cmp	r3, #71	; 0x47
 800ee78:	4680      	mov	r8, r0
 800ee7a:	d108      	bne.n	800ee8e <_printf_float+0x142>
 800ee7c:	1cc8      	adds	r0, r1, #3
 800ee7e:	db02      	blt.n	800ee86 <_printf_float+0x13a>
 800ee80:	6863      	ldr	r3, [r4, #4]
 800ee82:	4299      	cmp	r1, r3
 800ee84:	dd41      	ble.n	800ef0a <_printf_float+0x1be>
 800ee86:	f1ab 0b02 	sub.w	fp, fp, #2
 800ee8a:	fa5f fb8b 	uxtb.w	fp, fp
 800ee8e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ee92:	d820      	bhi.n	800eed6 <_printf_float+0x18a>
 800ee94:	3901      	subs	r1, #1
 800ee96:	465a      	mov	r2, fp
 800ee98:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ee9c:	9109      	str	r1, [sp, #36]	; 0x24
 800ee9e:	f7ff ff17 	bl	800ecd0 <__exponent>
 800eea2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eea4:	1813      	adds	r3, r2, r0
 800eea6:	2a01      	cmp	r2, #1
 800eea8:	4681      	mov	r9, r0
 800eeaa:	6123      	str	r3, [r4, #16]
 800eeac:	dc02      	bgt.n	800eeb4 <_printf_float+0x168>
 800eeae:	6822      	ldr	r2, [r4, #0]
 800eeb0:	07d2      	lsls	r2, r2, #31
 800eeb2:	d501      	bpl.n	800eeb8 <_printf_float+0x16c>
 800eeb4:	3301      	adds	r3, #1
 800eeb6:	6123      	str	r3, [r4, #16]
 800eeb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d09c      	beq.n	800edfa <_printf_float+0xae>
 800eec0:	232d      	movs	r3, #45	; 0x2d
 800eec2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eec6:	e798      	b.n	800edfa <_printf_float+0xae>
 800eec8:	9a06      	ldr	r2, [sp, #24]
 800eeca:	2a47      	cmp	r2, #71	; 0x47
 800eecc:	d1be      	bne.n	800ee4c <_printf_float+0x100>
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d1bc      	bne.n	800ee4c <_printf_float+0x100>
 800eed2:	2301      	movs	r3, #1
 800eed4:	e7b9      	b.n	800ee4a <_printf_float+0xfe>
 800eed6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800eeda:	d118      	bne.n	800ef0e <_printf_float+0x1c2>
 800eedc:	2900      	cmp	r1, #0
 800eede:	6863      	ldr	r3, [r4, #4]
 800eee0:	dd0b      	ble.n	800eefa <_printf_float+0x1ae>
 800eee2:	6121      	str	r1, [r4, #16]
 800eee4:	b913      	cbnz	r3, 800eeec <_printf_float+0x1a0>
 800eee6:	6822      	ldr	r2, [r4, #0]
 800eee8:	07d0      	lsls	r0, r2, #31
 800eeea:	d502      	bpl.n	800eef2 <_printf_float+0x1a6>
 800eeec:	3301      	adds	r3, #1
 800eeee:	440b      	add	r3, r1
 800eef0:	6123      	str	r3, [r4, #16]
 800eef2:	65a1      	str	r1, [r4, #88]	; 0x58
 800eef4:	f04f 0900 	mov.w	r9, #0
 800eef8:	e7de      	b.n	800eeb8 <_printf_float+0x16c>
 800eefa:	b913      	cbnz	r3, 800ef02 <_printf_float+0x1b6>
 800eefc:	6822      	ldr	r2, [r4, #0]
 800eefe:	07d2      	lsls	r2, r2, #31
 800ef00:	d501      	bpl.n	800ef06 <_printf_float+0x1ba>
 800ef02:	3302      	adds	r3, #2
 800ef04:	e7f4      	b.n	800eef0 <_printf_float+0x1a4>
 800ef06:	2301      	movs	r3, #1
 800ef08:	e7f2      	b.n	800eef0 <_printf_float+0x1a4>
 800ef0a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ef0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef10:	4299      	cmp	r1, r3
 800ef12:	db05      	blt.n	800ef20 <_printf_float+0x1d4>
 800ef14:	6823      	ldr	r3, [r4, #0]
 800ef16:	6121      	str	r1, [r4, #16]
 800ef18:	07d8      	lsls	r0, r3, #31
 800ef1a:	d5ea      	bpl.n	800eef2 <_printf_float+0x1a6>
 800ef1c:	1c4b      	adds	r3, r1, #1
 800ef1e:	e7e7      	b.n	800eef0 <_printf_float+0x1a4>
 800ef20:	2900      	cmp	r1, #0
 800ef22:	bfd4      	ite	le
 800ef24:	f1c1 0202 	rsble	r2, r1, #2
 800ef28:	2201      	movgt	r2, #1
 800ef2a:	4413      	add	r3, r2
 800ef2c:	e7e0      	b.n	800eef0 <_printf_float+0x1a4>
 800ef2e:	6823      	ldr	r3, [r4, #0]
 800ef30:	055a      	lsls	r2, r3, #21
 800ef32:	d407      	bmi.n	800ef44 <_printf_float+0x1f8>
 800ef34:	6923      	ldr	r3, [r4, #16]
 800ef36:	4642      	mov	r2, r8
 800ef38:	4631      	mov	r1, r6
 800ef3a:	4628      	mov	r0, r5
 800ef3c:	47b8      	blx	r7
 800ef3e:	3001      	adds	r0, #1
 800ef40:	d12c      	bne.n	800ef9c <_printf_float+0x250>
 800ef42:	e764      	b.n	800ee0e <_printf_float+0xc2>
 800ef44:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ef48:	f240 80e0 	bls.w	800f10c <_printf_float+0x3c0>
 800ef4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ef50:	2200      	movs	r2, #0
 800ef52:	2300      	movs	r3, #0
 800ef54:	f7f1 fdc0 	bl	8000ad8 <__aeabi_dcmpeq>
 800ef58:	2800      	cmp	r0, #0
 800ef5a:	d034      	beq.n	800efc6 <_printf_float+0x27a>
 800ef5c:	4a37      	ldr	r2, [pc, #220]	; (800f03c <_printf_float+0x2f0>)
 800ef5e:	2301      	movs	r3, #1
 800ef60:	4631      	mov	r1, r6
 800ef62:	4628      	mov	r0, r5
 800ef64:	47b8      	blx	r7
 800ef66:	3001      	adds	r0, #1
 800ef68:	f43f af51 	beq.w	800ee0e <_printf_float+0xc2>
 800ef6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ef70:	429a      	cmp	r2, r3
 800ef72:	db02      	blt.n	800ef7a <_printf_float+0x22e>
 800ef74:	6823      	ldr	r3, [r4, #0]
 800ef76:	07d8      	lsls	r0, r3, #31
 800ef78:	d510      	bpl.n	800ef9c <_printf_float+0x250>
 800ef7a:	ee18 3a10 	vmov	r3, s16
 800ef7e:	4652      	mov	r2, sl
 800ef80:	4631      	mov	r1, r6
 800ef82:	4628      	mov	r0, r5
 800ef84:	47b8      	blx	r7
 800ef86:	3001      	adds	r0, #1
 800ef88:	f43f af41 	beq.w	800ee0e <_printf_float+0xc2>
 800ef8c:	f04f 0800 	mov.w	r8, #0
 800ef90:	f104 091a 	add.w	r9, r4, #26
 800ef94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef96:	3b01      	subs	r3, #1
 800ef98:	4543      	cmp	r3, r8
 800ef9a:	dc09      	bgt.n	800efb0 <_printf_float+0x264>
 800ef9c:	6823      	ldr	r3, [r4, #0]
 800ef9e:	079b      	lsls	r3, r3, #30
 800efa0:	f100 8105 	bmi.w	800f1ae <_printf_float+0x462>
 800efa4:	68e0      	ldr	r0, [r4, #12]
 800efa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800efa8:	4298      	cmp	r0, r3
 800efaa:	bfb8      	it	lt
 800efac:	4618      	movlt	r0, r3
 800efae:	e730      	b.n	800ee12 <_printf_float+0xc6>
 800efb0:	2301      	movs	r3, #1
 800efb2:	464a      	mov	r2, r9
 800efb4:	4631      	mov	r1, r6
 800efb6:	4628      	mov	r0, r5
 800efb8:	47b8      	blx	r7
 800efba:	3001      	adds	r0, #1
 800efbc:	f43f af27 	beq.w	800ee0e <_printf_float+0xc2>
 800efc0:	f108 0801 	add.w	r8, r8, #1
 800efc4:	e7e6      	b.n	800ef94 <_printf_float+0x248>
 800efc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efc8:	2b00      	cmp	r3, #0
 800efca:	dc39      	bgt.n	800f040 <_printf_float+0x2f4>
 800efcc:	4a1b      	ldr	r2, [pc, #108]	; (800f03c <_printf_float+0x2f0>)
 800efce:	2301      	movs	r3, #1
 800efd0:	4631      	mov	r1, r6
 800efd2:	4628      	mov	r0, r5
 800efd4:	47b8      	blx	r7
 800efd6:	3001      	adds	r0, #1
 800efd8:	f43f af19 	beq.w	800ee0e <_printf_float+0xc2>
 800efdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800efe0:	4313      	orrs	r3, r2
 800efe2:	d102      	bne.n	800efea <_printf_float+0x29e>
 800efe4:	6823      	ldr	r3, [r4, #0]
 800efe6:	07d9      	lsls	r1, r3, #31
 800efe8:	d5d8      	bpl.n	800ef9c <_printf_float+0x250>
 800efea:	ee18 3a10 	vmov	r3, s16
 800efee:	4652      	mov	r2, sl
 800eff0:	4631      	mov	r1, r6
 800eff2:	4628      	mov	r0, r5
 800eff4:	47b8      	blx	r7
 800eff6:	3001      	adds	r0, #1
 800eff8:	f43f af09 	beq.w	800ee0e <_printf_float+0xc2>
 800effc:	f04f 0900 	mov.w	r9, #0
 800f000:	f104 0a1a 	add.w	sl, r4, #26
 800f004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f006:	425b      	negs	r3, r3
 800f008:	454b      	cmp	r3, r9
 800f00a:	dc01      	bgt.n	800f010 <_printf_float+0x2c4>
 800f00c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f00e:	e792      	b.n	800ef36 <_printf_float+0x1ea>
 800f010:	2301      	movs	r3, #1
 800f012:	4652      	mov	r2, sl
 800f014:	4631      	mov	r1, r6
 800f016:	4628      	mov	r0, r5
 800f018:	47b8      	blx	r7
 800f01a:	3001      	adds	r0, #1
 800f01c:	f43f aef7 	beq.w	800ee0e <_printf_float+0xc2>
 800f020:	f109 0901 	add.w	r9, r9, #1
 800f024:	e7ee      	b.n	800f004 <_printf_float+0x2b8>
 800f026:	bf00      	nop
 800f028:	7fefffff 	.word	0x7fefffff
 800f02c:	08014164 	.word	0x08014164
 800f030:	08014168 	.word	0x08014168
 800f034:	08014170 	.word	0x08014170
 800f038:	0801416c 	.word	0x0801416c
 800f03c:	08014174 	.word	0x08014174
 800f040:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f042:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f044:	429a      	cmp	r2, r3
 800f046:	bfa8      	it	ge
 800f048:	461a      	movge	r2, r3
 800f04a:	2a00      	cmp	r2, #0
 800f04c:	4691      	mov	r9, r2
 800f04e:	dc37      	bgt.n	800f0c0 <_printf_float+0x374>
 800f050:	f04f 0b00 	mov.w	fp, #0
 800f054:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f058:	f104 021a 	add.w	r2, r4, #26
 800f05c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f05e:	9305      	str	r3, [sp, #20]
 800f060:	eba3 0309 	sub.w	r3, r3, r9
 800f064:	455b      	cmp	r3, fp
 800f066:	dc33      	bgt.n	800f0d0 <_printf_float+0x384>
 800f068:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f06c:	429a      	cmp	r2, r3
 800f06e:	db3b      	blt.n	800f0e8 <_printf_float+0x39c>
 800f070:	6823      	ldr	r3, [r4, #0]
 800f072:	07da      	lsls	r2, r3, #31
 800f074:	d438      	bmi.n	800f0e8 <_printf_float+0x39c>
 800f076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f078:	9a05      	ldr	r2, [sp, #20]
 800f07a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f07c:	1a9a      	subs	r2, r3, r2
 800f07e:	eba3 0901 	sub.w	r9, r3, r1
 800f082:	4591      	cmp	r9, r2
 800f084:	bfa8      	it	ge
 800f086:	4691      	movge	r9, r2
 800f088:	f1b9 0f00 	cmp.w	r9, #0
 800f08c:	dc35      	bgt.n	800f0fa <_printf_float+0x3ae>
 800f08e:	f04f 0800 	mov.w	r8, #0
 800f092:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f096:	f104 0a1a 	add.w	sl, r4, #26
 800f09a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f09e:	1a9b      	subs	r3, r3, r2
 800f0a0:	eba3 0309 	sub.w	r3, r3, r9
 800f0a4:	4543      	cmp	r3, r8
 800f0a6:	f77f af79 	ble.w	800ef9c <_printf_float+0x250>
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	4652      	mov	r2, sl
 800f0ae:	4631      	mov	r1, r6
 800f0b0:	4628      	mov	r0, r5
 800f0b2:	47b8      	blx	r7
 800f0b4:	3001      	adds	r0, #1
 800f0b6:	f43f aeaa 	beq.w	800ee0e <_printf_float+0xc2>
 800f0ba:	f108 0801 	add.w	r8, r8, #1
 800f0be:	e7ec      	b.n	800f09a <_printf_float+0x34e>
 800f0c0:	4613      	mov	r3, r2
 800f0c2:	4631      	mov	r1, r6
 800f0c4:	4642      	mov	r2, r8
 800f0c6:	4628      	mov	r0, r5
 800f0c8:	47b8      	blx	r7
 800f0ca:	3001      	adds	r0, #1
 800f0cc:	d1c0      	bne.n	800f050 <_printf_float+0x304>
 800f0ce:	e69e      	b.n	800ee0e <_printf_float+0xc2>
 800f0d0:	2301      	movs	r3, #1
 800f0d2:	4631      	mov	r1, r6
 800f0d4:	4628      	mov	r0, r5
 800f0d6:	9205      	str	r2, [sp, #20]
 800f0d8:	47b8      	blx	r7
 800f0da:	3001      	adds	r0, #1
 800f0dc:	f43f ae97 	beq.w	800ee0e <_printf_float+0xc2>
 800f0e0:	9a05      	ldr	r2, [sp, #20]
 800f0e2:	f10b 0b01 	add.w	fp, fp, #1
 800f0e6:	e7b9      	b.n	800f05c <_printf_float+0x310>
 800f0e8:	ee18 3a10 	vmov	r3, s16
 800f0ec:	4652      	mov	r2, sl
 800f0ee:	4631      	mov	r1, r6
 800f0f0:	4628      	mov	r0, r5
 800f0f2:	47b8      	blx	r7
 800f0f4:	3001      	adds	r0, #1
 800f0f6:	d1be      	bne.n	800f076 <_printf_float+0x32a>
 800f0f8:	e689      	b.n	800ee0e <_printf_float+0xc2>
 800f0fa:	9a05      	ldr	r2, [sp, #20]
 800f0fc:	464b      	mov	r3, r9
 800f0fe:	4442      	add	r2, r8
 800f100:	4631      	mov	r1, r6
 800f102:	4628      	mov	r0, r5
 800f104:	47b8      	blx	r7
 800f106:	3001      	adds	r0, #1
 800f108:	d1c1      	bne.n	800f08e <_printf_float+0x342>
 800f10a:	e680      	b.n	800ee0e <_printf_float+0xc2>
 800f10c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f10e:	2a01      	cmp	r2, #1
 800f110:	dc01      	bgt.n	800f116 <_printf_float+0x3ca>
 800f112:	07db      	lsls	r3, r3, #31
 800f114:	d538      	bpl.n	800f188 <_printf_float+0x43c>
 800f116:	2301      	movs	r3, #1
 800f118:	4642      	mov	r2, r8
 800f11a:	4631      	mov	r1, r6
 800f11c:	4628      	mov	r0, r5
 800f11e:	47b8      	blx	r7
 800f120:	3001      	adds	r0, #1
 800f122:	f43f ae74 	beq.w	800ee0e <_printf_float+0xc2>
 800f126:	ee18 3a10 	vmov	r3, s16
 800f12a:	4652      	mov	r2, sl
 800f12c:	4631      	mov	r1, r6
 800f12e:	4628      	mov	r0, r5
 800f130:	47b8      	blx	r7
 800f132:	3001      	adds	r0, #1
 800f134:	f43f ae6b 	beq.w	800ee0e <_printf_float+0xc2>
 800f138:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f13c:	2200      	movs	r2, #0
 800f13e:	2300      	movs	r3, #0
 800f140:	f7f1 fcca 	bl	8000ad8 <__aeabi_dcmpeq>
 800f144:	b9d8      	cbnz	r0, 800f17e <_printf_float+0x432>
 800f146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f148:	f108 0201 	add.w	r2, r8, #1
 800f14c:	3b01      	subs	r3, #1
 800f14e:	4631      	mov	r1, r6
 800f150:	4628      	mov	r0, r5
 800f152:	47b8      	blx	r7
 800f154:	3001      	adds	r0, #1
 800f156:	d10e      	bne.n	800f176 <_printf_float+0x42a>
 800f158:	e659      	b.n	800ee0e <_printf_float+0xc2>
 800f15a:	2301      	movs	r3, #1
 800f15c:	4652      	mov	r2, sl
 800f15e:	4631      	mov	r1, r6
 800f160:	4628      	mov	r0, r5
 800f162:	47b8      	blx	r7
 800f164:	3001      	adds	r0, #1
 800f166:	f43f ae52 	beq.w	800ee0e <_printf_float+0xc2>
 800f16a:	f108 0801 	add.w	r8, r8, #1
 800f16e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f170:	3b01      	subs	r3, #1
 800f172:	4543      	cmp	r3, r8
 800f174:	dcf1      	bgt.n	800f15a <_printf_float+0x40e>
 800f176:	464b      	mov	r3, r9
 800f178:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f17c:	e6dc      	b.n	800ef38 <_printf_float+0x1ec>
 800f17e:	f04f 0800 	mov.w	r8, #0
 800f182:	f104 0a1a 	add.w	sl, r4, #26
 800f186:	e7f2      	b.n	800f16e <_printf_float+0x422>
 800f188:	2301      	movs	r3, #1
 800f18a:	4642      	mov	r2, r8
 800f18c:	e7df      	b.n	800f14e <_printf_float+0x402>
 800f18e:	2301      	movs	r3, #1
 800f190:	464a      	mov	r2, r9
 800f192:	4631      	mov	r1, r6
 800f194:	4628      	mov	r0, r5
 800f196:	47b8      	blx	r7
 800f198:	3001      	adds	r0, #1
 800f19a:	f43f ae38 	beq.w	800ee0e <_printf_float+0xc2>
 800f19e:	f108 0801 	add.w	r8, r8, #1
 800f1a2:	68e3      	ldr	r3, [r4, #12]
 800f1a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f1a6:	1a5b      	subs	r3, r3, r1
 800f1a8:	4543      	cmp	r3, r8
 800f1aa:	dcf0      	bgt.n	800f18e <_printf_float+0x442>
 800f1ac:	e6fa      	b.n	800efa4 <_printf_float+0x258>
 800f1ae:	f04f 0800 	mov.w	r8, #0
 800f1b2:	f104 0919 	add.w	r9, r4, #25
 800f1b6:	e7f4      	b.n	800f1a2 <_printf_float+0x456>

0800f1b8 <_printf_common>:
 800f1b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1bc:	4616      	mov	r6, r2
 800f1be:	4699      	mov	r9, r3
 800f1c0:	688a      	ldr	r2, [r1, #8]
 800f1c2:	690b      	ldr	r3, [r1, #16]
 800f1c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f1c8:	4293      	cmp	r3, r2
 800f1ca:	bfb8      	it	lt
 800f1cc:	4613      	movlt	r3, r2
 800f1ce:	6033      	str	r3, [r6, #0]
 800f1d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f1d4:	4607      	mov	r7, r0
 800f1d6:	460c      	mov	r4, r1
 800f1d8:	b10a      	cbz	r2, 800f1de <_printf_common+0x26>
 800f1da:	3301      	adds	r3, #1
 800f1dc:	6033      	str	r3, [r6, #0]
 800f1de:	6823      	ldr	r3, [r4, #0]
 800f1e0:	0699      	lsls	r1, r3, #26
 800f1e2:	bf42      	ittt	mi
 800f1e4:	6833      	ldrmi	r3, [r6, #0]
 800f1e6:	3302      	addmi	r3, #2
 800f1e8:	6033      	strmi	r3, [r6, #0]
 800f1ea:	6825      	ldr	r5, [r4, #0]
 800f1ec:	f015 0506 	ands.w	r5, r5, #6
 800f1f0:	d106      	bne.n	800f200 <_printf_common+0x48>
 800f1f2:	f104 0a19 	add.w	sl, r4, #25
 800f1f6:	68e3      	ldr	r3, [r4, #12]
 800f1f8:	6832      	ldr	r2, [r6, #0]
 800f1fa:	1a9b      	subs	r3, r3, r2
 800f1fc:	42ab      	cmp	r3, r5
 800f1fe:	dc26      	bgt.n	800f24e <_printf_common+0x96>
 800f200:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f204:	1e13      	subs	r3, r2, #0
 800f206:	6822      	ldr	r2, [r4, #0]
 800f208:	bf18      	it	ne
 800f20a:	2301      	movne	r3, #1
 800f20c:	0692      	lsls	r2, r2, #26
 800f20e:	d42b      	bmi.n	800f268 <_printf_common+0xb0>
 800f210:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f214:	4649      	mov	r1, r9
 800f216:	4638      	mov	r0, r7
 800f218:	47c0      	blx	r8
 800f21a:	3001      	adds	r0, #1
 800f21c:	d01e      	beq.n	800f25c <_printf_common+0xa4>
 800f21e:	6823      	ldr	r3, [r4, #0]
 800f220:	68e5      	ldr	r5, [r4, #12]
 800f222:	6832      	ldr	r2, [r6, #0]
 800f224:	f003 0306 	and.w	r3, r3, #6
 800f228:	2b04      	cmp	r3, #4
 800f22a:	bf08      	it	eq
 800f22c:	1aad      	subeq	r5, r5, r2
 800f22e:	68a3      	ldr	r3, [r4, #8]
 800f230:	6922      	ldr	r2, [r4, #16]
 800f232:	bf0c      	ite	eq
 800f234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f238:	2500      	movne	r5, #0
 800f23a:	4293      	cmp	r3, r2
 800f23c:	bfc4      	itt	gt
 800f23e:	1a9b      	subgt	r3, r3, r2
 800f240:	18ed      	addgt	r5, r5, r3
 800f242:	2600      	movs	r6, #0
 800f244:	341a      	adds	r4, #26
 800f246:	42b5      	cmp	r5, r6
 800f248:	d11a      	bne.n	800f280 <_printf_common+0xc8>
 800f24a:	2000      	movs	r0, #0
 800f24c:	e008      	b.n	800f260 <_printf_common+0xa8>
 800f24e:	2301      	movs	r3, #1
 800f250:	4652      	mov	r2, sl
 800f252:	4649      	mov	r1, r9
 800f254:	4638      	mov	r0, r7
 800f256:	47c0      	blx	r8
 800f258:	3001      	adds	r0, #1
 800f25a:	d103      	bne.n	800f264 <_printf_common+0xac>
 800f25c:	f04f 30ff 	mov.w	r0, #4294967295
 800f260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f264:	3501      	adds	r5, #1
 800f266:	e7c6      	b.n	800f1f6 <_printf_common+0x3e>
 800f268:	18e1      	adds	r1, r4, r3
 800f26a:	1c5a      	adds	r2, r3, #1
 800f26c:	2030      	movs	r0, #48	; 0x30
 800f26e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f272:	4422      	add	r2, r4
 800f274:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f278:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f27c:	3302      	adds	r3, #2
 800f27e:	e7c7      	b.n	800f210 <_printf_common+0x58>
 800f280:	2301      	movs	r3, #1
 800f282:	4622      	mov	r2, r4
 800f284:	4649      	mov	r1, r9
 800f286:	4638      	mov	r0, r7
 800f288:	47c0      	blx	r8
 800f28a:	3001      	adds	r0, #1
 800f28c:	d0e6      	beq.n	800f25c <_printf_common+0xa4>
 800f28e:	3601      	adds	r6, #1
 800f290:	e7d9      	b.n	800f246 <_printf_common+0x8e>
	...

0800f294 <_printf_i>:
 800f294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f298:	7e0f      	ldrb	r7, [r1, #24]
 800f29a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f29c:	2f78      	cmp	r7, #120	; 0x78
 800f29e:	4691      	mov	r9, r2
 800f2a0:	4680      	mov	r8, r0
 800f2a2:	460c      	mov	r4, r1
 800f2a4:	469a      	mov	sl, r3
 800f2a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f2aa:	d807      	bhi.n	800f2bc <_printf_i+0x28>
 800f2ac:	2f62      	cmp	r7, #98	; 0x62
 800f2ae:	d80a      	bhi.n	800f2c6 <_printf_i+0x32>
 800f2b0:	2f00      	cmp	r7, #0
 800f2b2:	f000 80d8 	beq.w	800f466 <_printf_i+0x1d2>
 800f2b6:	2f58      	cmp	r7, #88	; 0x58
 800f2b8:	f000 80a3 	beq.w	800f402 <_printf_i+0x16e>
 800f2bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f2c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f2c4:	e03a      	b.n	800f33c <_printf_i+0xa8>
 800f2c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f2ca:	2b15      	cmp	r3, #21
 800f2cc:	d8f6      	bhi.n	800f2bc <_printf_i+0x28>
 800f2ce:	a101      	add	r1, pc, #4	; (adr r1, 800f2d4 <_printf_i+0x40>)
 800f2d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f2d4:	0800f32d 	.word	0x0800f32d
 800f2d8:	0800f341 	.word	0x0800f341
 800f2dc:	0800f2bd 	.word	0x0800f2bd
 800f2e0:	0800f2bd 	.word	0x0800f2bd
 800f2e4:	0800f2bd 	.word	0x0800f2bd
 800f2e8:	0800f2bd 	.word	0x0800f2bd
 800f2ec:	0800f341 	.word	0x0800f341
 800f2f0:	0800f2bd 	.word	0x0800f2bd
 800f2f4:	0800f2bd 	.word	0x0800f2bd
 800f2f8:	0800f2bd 	.word	0x0800f2bd
 800f2fc:	0800f2bd 	.word	0x0800f2bd
 800f300:	0800f44d 	.word	0x0800f44d
 800f304:	0800f371 	.word	0x0800f371
 800f308:	0800f42f 	.word	0x0800f42f
 800f30c:	0800f2bd 	.word	0x0800f2bd
 800f310:	0800f2bd 	.word	0x0800f2bd
 800f314:	0800f46f 	.word	0x0800f46f
 800f318:	0800f2bd 	.word	0x0800f2bd
 800f31c:	0800f371 	.word	0x0800f371
 800f320:	0800f2bd 	.word	0x0800f2bd
 800f324:	0800f2bd 	.word	0x0800f2bd
 800f328:	0800f437 	.word	0x0800f437
 800f32c:	682b      	ldr	r3, [r5, #0]
 800f32e:	1d1a      	adds	r2, r3, #4
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	602a      	str	r2, [r5, #0]
 800f334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f338:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f33c:	2301      	movs	r3, #1
 800f33e:	e0a3      	b.n	800f488 <_printf_i+0x1f4>
 800f340:	6820      	ldr	r0, [r4, #0]
 800f342:	6829      	ldr	r1, [r5, #0]
 800f344:	0606      	lsls	r6, r0, #24
 800f346:	f101 0304 	add.w	r3, r1, #4
 800f34a:	d50a      	bpl.n	800f362 <_printf_i+0xce>
 800f34c:	680e      	ldr	r6, [r1, #0]
 800f34e:	602b      	str	r3, [r5, #0]
 800f350:	2e00      	cmp	r6, #0
 800f352:	da03      	bge.n	800f35c <_printf_i+0xc8>
 800f354:	232d      	movs	r3, #45	; 0x2d
 800f356:	4276      	negs	r6, r6
 800f358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f35c:	485e      	ldr	r0, [pc, #376]	; (800f4d8 <_printf_i+0x244>)
 800f35e:	230a      	movs	r3, #10
 800f360:	e019      	b.n	800f396 <_printf_i+0x102>
 800f362:	680e      	ldr	r6, [r1, #0]
 800f364:	602b      	str	r3, [r5, #0]
 800f366:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f36a:	bf18      	it	ne
 800f36c:	b236      	sxthne	r6, r6
 800f36e:	e7ef      	b.n	800f350 <_printf_i+0xbc>
 800f370:	682b      	ldr	r3, [r5, #0]
 800f372:	6820      	ldr	r0, [r4, #0]
 800f374:	1d19      	adds	r1, r3, #4
 800f376:	6029      	str	r1, [r5, #0]
 800f378:	0601      	lsls	r1, r0, #24
 800f37a:	d501      	bpl.n	800f380 <_printf_i+0xec>
 800f37c:	681e      	ldr	r6, [r3, #0]
 800f37e:	e002      	b.n	800f386 <_printf_i+0xf2>
 800f380:	0646      	lsls	r6, r0, #25
 800f382:	d5fb      	bpl.n	800f37c <_printf_i+0xe8>
 800f384:	881e      	ldrh	r6, [r3, #0]
 800f386:	4854      	ldr	r0, [pc, #336]	; (800f4d8 <_printf_i+0x244>)
 800f388:	2f6f      	cmp	r7, #111	; 0x6f
 800f38a:	bf0c      	ite	eq
 800f38c:	2308      	moveq	r3, #8
 800f38e:	230a      	movne	r3, #10
 800f390:	2100      	movs	r1, #0
 800f392:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f396:	6865      	ldr	r5, [r4, #4]
 800f398:	60a5      	str	r5, [r4, #8]
 800f39a:	2d00      	cmp	r5, #0
 800f39c:	bfa2      	ittt	ge
 800f39e:	6821      	ldrge	r1, [r4, #0]
 800f3a0:	f021 0104 	bicge.w	r1, r1, #4
 800f3a4:	6021      	strge	r1, [r4, #0]
 800f3a6:	b90e      	cbnz	r6, 800f3ac <_printf_i+0x118>
 800f3a8:	2d00      	cmp	r5, #0
 800f3aa:	d04d      	beq.n	800f448 <_printf_i+0x1b4>
 800f3ac:	4615      	mov	r5, r2
 800f3ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800f3b2:	fb03 6711 	mls	r7, r3, r1, r6
 800f3b6:	5dc7      	ldrb	r7, [r0, r7]
 800f3b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f3bc:	4637      	mov	r7, r6
 800f3be:	42bb      	cmp	r3, r7
 800f3c0:	460e      	mov	r6, r1
 800f3c2:	d9f4      	bls.n	800f3ae <_printf_i+0x11a>
 800f3c4:	2b08      	cmp	r3, #8
 800f3c6:	d10b      	bne.n	800f3e0 <_printf_i+0x14c>
 800f3c8:	6823      	ldr	r3, [r4, #0]
 800f3ca:	07de      	lsls	r6, r3, #31
 800f3cc:	d508      	bpl.n	800f3e0 <_printf_i+0x14c>
 800f3ce:	6923      	ldr	r3, [r4, #16]
 800f3d0:	6861      	ldr	r1, [r4, #4]
 800f3d2:	4299      	cmp	r1, r3
 800f3d4:	bfde      	ittt	le
 800f3d6:	2330      	movle	r3, #48	; 0x30
 800f3d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f3dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f3e0:	1b52      	subs	r2, r2, r5
 800f3e2:	6122      	str	r2, [r4, #16]
 800f3e4:	f8cd a000 	str.w	sl, [sp]
 800f3e8:	464b      	mov	r3, r9
 800f3ea:	aa03      	add	r2, sp, #12
 800f3ec:	4621      	mov	r1, r4
 800f3ee:	4640      	mov	r0, r8
 800f3f0:	f7ff fee2 	bl	800f1b8 <_printf_common>
 800f3f4:	3001      	adds	r0, #1
 800f3f6:	d14c      	bne.n	800f492 <_printf_i+0x1fe>
 800f3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f3fc:	b004      	add	sp, #16
 800f3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f402:	4835      	ldr	r0, [pc, #212]	; (800f4d8 <_printf_i+0x244>)
 800f404:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f408:	6829      	ldr	r1, [r5, #0]
 800f40a:	6823      	ldr	r3, [r4, #0]
 800f40c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f410:	6029      	str	r1, [r5, #0]
 800f412:	061d      	lsls	r5, r3, #24
 800f414:	d514      	bpl.n	800f440 <_printf_i+0x1ac>
 800f416:	07df      	lsls	r7, r3, #31
 800f418:	bf44      	itt	mi
 800f41a:	f043 0320 	orrmi.w	r3, r3, #32
 800f41e:	6023      	strmi	r3, [r4, #0]
 800f420:	b91e      	cbnz	r6, 800f42a <_printf_i+0x196>
 800f422:	6823      	ldr	r3, [r4, #0]
 800f424:	f023 0320 	bic.w	r3, r3, #32
 800f428:	6023      	str	r3, [r4, #0]
 800f42a:	2310      	movs	r3, #16
 800f42c:	e7b0      	b.n	800f390 <_printf_i+0xfc>
 800f42e:	6823      	ldr	r3, [r4, #0]
 800f430:	f043 0320 	orr.w	r3, r3, #32
 800f434:	6023      	str	r3, [r4, #0]
 800f436:	2378      	movs	r3, #120	; 0x78
 800f438:	4828      	ldr	r0, [pc, #160]	; (800f4dc <_printf_i+0x248>)
 800f43a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f43e:	e7e3      	b.n	800f408 <_printf_i+0x174>
 800f440:	0659      	lsls	r1, r3, #25
 800f442:	bf48      	it	mi
 800f444:	b2b6      	uxthmi	r6, r6
 800f446:	e7e6      	b.n	800f416 <_printf_i+0x182>
 800f448:	4615      	mov	r5, r2
 800f44a:	e7bb      	b.n	800f3c4 <_printf_i+0x130>
 800f44c:	682b      	ldr	r3, [r5, #0]
 800f44e:	6826      	ldr	r6, [r4, #0]
 800f450:	6961      	ldr	r1, [r4, #20]
 800f452:	1d18      	adds	r0, r3, #4
 800f454:	6028      	str	r0, [r5, #0]
 800f456:	0635      	lsls	r5, r6, #24
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	d501      	bpl.n	800f460 <_printf_i+0x1cc>
 800f45c:	6019      	str	r1, [r3, #0]
 800f45e:	e002      	b.n	800f466 <_printf_i+0x1d2>
 800f460:	0670      	lsls	r0, r6, #25
 800f462:	d5fb      	bpl.n	800f45c <_printf_i+0x1c8>
 800f464:	8019      	strh	r1, [r3, #0]
 800f466:	2300      	movs	r3, #0
 800f468:	6123      	str	r3, [r4, #16]
 800f46a:	4615      	mov	r5, r2
 800f46c:	e7ba      	b.n	800f3e4 <_printf_i+0x150>
 800f46e:	682b      	ldr	r3, [r5, #0]
 800f470:	1d1a      	adds	r2, r3, #4
 800f472:	602a      	str	r2, [r5, #0]
 800f474:	681d      	ldr	r5, [r3, #0]
 800f476:	6862      	ldr	r2, [r4, #4]
 800f478:	2100      	movs	r1, #0
 800f47a:	4628      	mov	r0, r5
 800f47c:	f7f0 feb8 	bl	80001f0 <memchr>
 800f480:	b108      	cbz	r0, 800f486 <_printf_i+0x1f2>
 800f482:	1b40      	subs	r0, r0, r5
 800f484:	6060      	str	r0, [r4, #4]
 800f486:	6863      	ldr	r3, [r4, #4]
 800f488:	6123      	str	r3, [r4, #16]
 800f48a:	2300      	movs	r3, #0
 800f48c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f490:	e7a8      	b.n	800f3e4 <_printf_i+0x150>
 800f492:	6923      	ldr	r3, [r4, #16]
 800f494:	462a      	mov	r2, r5
 800f496:	4649      	mov	r1, r9
 800f498:	4640      	mov	r0, r8
 800f49a:	47d0      	blx	sl
 800f49c:	3001      	adds	r0, #1
 800f49e:	d0ab      	beq.n	800f3f8 <_printf_i+0x164>
 800f4a0:	6823      	ldr	r3, [r4, #0]
 800f4a2:	079b      	lsls	r3, r3, #30
 800f4a4:	d413      	bmi.n	800f4ce <_printf_i+0x23a>
 800f4a6:	68e0      	ldr	r0, [r4, #12]
 800f4a8:	9b03      	ldr	r3, [sp, #12]
 800f4aa:	4298      	cmp	r0, r3
 800f4ac:	bfb8      	it	lt
 800f4ae:	4618      	movlt	r0, r3
 800f4b0:	e7a4      	b.n	800f3fc <_printf_i+0x168>
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	4632      	mov	r2, r6
 800f4b6:	4649      	mov	r1, r9
 800f4b8:	4640      	mov	r0, r8
 800f4ba:	47d0      	blx	sl
 800f4bc:	3001      	adds	r0, #1
 800f4be:	d09b      	beq.n	800f3f8 <_printf_i+0x164>
 800f4c0:	3501      	adds	r5, #1
 800f4c2:	68e3      	ldr	r3, [r4, #12]
 800f4c4:	9903      	ldr	r1, [sp, #12]
 800f4c6:	1a5b      	subs	r3, r3, r1
 800f4c8:	42ab      	cmp	r3, r5
 800f4ca:	dcf2      	bgt.n	800f4b2 <_printf_i+0x21e>
 800f4cc:	e7eb      	b.n	800f4a6 <_printf_i+0x212>
 800f4ce:	2500      	movs	r5, #0
 800f4d0:	f104 0619 	add.w	r6, r4, #25
 800f4d4:	e7f5      	b.n	800f4c2 <_printf_i+0x22e>
 800f4d6:	bf00      	nop
 800f4d8:	08014176 	.word	0x08014176
 800f4dc:	08014187 	.word	0x08014187

0800f4e0 <_scanf_float>:
 800f4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4e4:	b087      	sub	sp, #28
 800f4e6:	4617      	mov	r7, r2
 800f4e8:	9303      	str	r3, [sp, #12]
 800f4ea:	688b      	ldr	r3, [r1, #8]
 800f4ec:	1e5a      	subs	r2, r3, #1
 800f4ee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f4f2:	bf83      	ittte	hi
 800f4f4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f4f8:	195b      	addhi	r3, r3, r5
 800f4fa:	9302      	strhi	r3, [sp, #8]
 800f4fc:	2300      	movls	r3, #0
 800f4fe:	bf86      	itte	hi
 800f500:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f504:	608b      	strhi	r3, [r1, #8]
 800f506:	9302      	strls	r3, [sp, #8]
 800f508:	680b      	ldr	r3, [r1, #0]
 800f50a:	468b      	mov	fp, r1
 800f50c:	2500      	movs	r5, #0
 800f50e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f512:	f84b 3b1c 	str.w	r3, [fp], #28
 800f516:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f51a:	4680      	mov	r8, r0
 800f51c:	460c      	mov	r4, r1
 800f51e:	465e      	mov	r6, fp
 800f520:	46aa      	mov	sl, r5
 800f522:	46a9      	mov	r9, r5
 800f524:	9501      	str	r5, [sp, #4]
 800f526:	68a2      	ldr	r2, [r4, #8]
 800f528:	b152      	cbz	r2, 800f540 <_scanf_float+0x60>
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	781b      	ldrb	r3, [r3, #0]
 800f52e:	2b4e      	cmp	r3, #78	; 0x4e
 800f530:	d864      	bhi.n	800f5fc <_scanf_float+0x11c>
 800f532:	2b40      	cmp	r3, #64	; 0x40
 800f534:	d83c      	bhi.n	800f5b0 <_scanf_float+0xd0>
 800f536:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f53a:	b2c8      	uxtb	r0, r1
 800f53c:	280e      	cmp	r0, #14
 800f53e:	d93a      	bls.n	800f5b6 <_scanf_float+0xd6>
 800f540:	f1b9 0f00 	cmp.w	r9, #0
 800f544:	d003      	beq.n	800f54e <_scanf_float+0x6e>
 800f546:	6823      	ldr	r3, [r4, #0]
 800f548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f54c:	6023      	str	r3, [r4, #0]
 800f54e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f552:	f1ba 0f01 	cmp.w	sl, #1
 800f556:	f200 8113 	bhi.w	800f780 <_scanf_float+0x2a0>
 800f55a:	455e      	cmp	r6, fp
 800f55c:	f200 8105 	bhi.w	800f76a <_scanf_float+0x28a>
 800f560:	2501      	movs	r5, #1
 800f562:	4628      	mov	r0, r5
 800f564:	b007      	add	sp, #28
 800f566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f56a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f56e:	2a0d      	cmp	r2, #13
 800f570:	d8e6      	bhi.n	800f540 <_scanf_float+0x60>
 800f572:	a101      	add	r1, pc, #4	; (adr r1, 800f578 <_scanf_float+0x98>)
 800f574:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f578:	0800f6b7 	.word	0x0800f6b7
 800f57c:	0800f541 	.word	0x0800f541
 800f580:	0800f541 	.word	0x0800f541
 800f584:	0800f541 	.word	0x0800f541
 800f588:	0800f717 	.word	0x0800f717
 800f58c:	0800f6ef 	.word	0x0800f6ef
 800f590:	0800f541 	.word	0x0800f541
 800f594:	0800f541 	.word	0x0800f541
 800f598:	0800f6c5 	.word	0x0800f6c5
 800f59c:	0800f541 	.word	0x0800f541
 800f5a0:	0800f541 	.word	0x0800f541
 800f5a4:	0800f541 	.word	0x0800f541
 800f5a8:	0800f541 	.word	0x0800f541
 800f5ac:	0800f67d 	.word	0x0800f67d
 800f5b0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f5b4:	e7db      	b.n	800f56e <_scanf_float+0x8e>
 800f5b6:	290e      	cmp	r1, #14
 800f5b8:	d8c2      	bhi.n	800f540 <_scanf_float+0x60>
 800f5ba:	a001      	add	r0, pc, #4	; (adr r0, 800f5c0 <_scanf_float+0xe0>)
 800f5bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f5c0:	0800f66f 	.word	0x0800f66f
 800f5c4:	0800f541 	.word	0x0800f541
 800f5c8:	0800f66f 	.word	0x0800f66f
 800f5cc:	0800f703 	.word	0x0800f703
 800f5d0:	0800f541 	.word	0x0800f541
 800f5d4:	0800f61d 	.word	0x0800f61d
 800f5d8:	0800f659 	.word	0x0800f659
 800f5dc:	0800f659 	.word	0x0800f659
 800f5e0:	0800f659 	.word	0x0800f659
 800f5e4:	0800f659 	.word	0x0800f659
 800f5e8:	0800f659 	.word	0x0800f659
 800f5ec:	0800f659 	.word	0x0800f659
 800f5f0:	0800f659 	.word	0x0800f659
 800f5f4:	0800f659 	.word	0x0800f659
 800f5f8:	0800f659 	.word	0x0800f659
 800f5fc:	2b6e      	cmp	r3, #110	; 0x6e
 800f5fe:	d809      	bhi.n	800f614 <_scanf_float+0x134>
 800f600:	2b60      	cmp	r3, #96	; 0x60
 800f602:	d8b2      	bhi.n	800f56a <_scanf_float+0x8a>
 800f604:	2b54      	cmp	r3, #84	; 0x54
 800f606:	d077      	beq.n	800f6f8 <_scanf_float+0x218>
 800f608:	2b59      	cmp	r3, #89	; 0x59
 800f60a:	d199      	bne.n	800f540 <_scanf_float+0x60>
 800f60c:	2d07      	cmp	r5, #7
 800f60e:	d197      	bne.n	800f540 <_scanf_float+0x60>
 800f610:	2508      	movs	r5, #8
 800f612:	e029      	b.n	800f668 <_scanf_float+0x188>
 800f614:	2b74      	cmp	r3, #116	; 0x74
 800f616:	d06f      	beq.n	800f6f8 <_scanf_float+0x218>
 800f618:	2b79      	cmp	r3, #121	; 0x79
 800f61a:	e7f6      	b.n	800f60a <_scanf_float+0x12a>
 800f61c:	6821      	ldr	r1, [r4, #0]
 800f61e:	05c8      	lsls	r0, r1, #23
 800f620:	d51a      	bpl.n	800f658 <_scanf_float+0x178>
 800f622:	9b02      	ldr	r3, [sp, #8]
 800f624:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f628:	6021      	str	r1, [r4, #0]
 800f62a:	f109 0901 	add.w	r9, r9, #1
 800f62e:	b11b      	cbz	r3, 800f638 <_scanf_float+0x158>
 800f630:	3b01      	subs	r3, #1
 800f632:	3201      	adds	r2, #1
 800f634:	9302      	str	r3, [sp, #8]
 800f636:	60a2      	str	r2, [r4, #8]
 800f638:	68a3      	ldr	r3, [r4, #8]
 800f63a:	3b01      	subs	r3, #1
 800f63c:	60a3      	str	r3, [r4, #8]
 800f63e:	6923      	ldr	r3, [r4, #16]
 800f640:	3301      	adds	r3, #1
 800f642:	6123      	str	r3, [r4, #16]
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	3b01      	subs	r3, #1
 800f648:	2b00      	cmp	r3, #0
 800f64a:	607b      	str	r3, [r7, #4]
 800f64c:	f340 8084 	ble.w	800f758 <_scanf_float+0x278>
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	3301      	adds	r3, #1
 800f654:	603b      	str	r3, [r7, #0]
 800f656:	e766      	b.n	800f526 <_scanf_float+0x46>
 800f658:	eb1a 0f05 	cmn.w	sl, r5
 800f65c:	f47f af70 	bne.w	800f540 <_scanf_float+0x60>
 800f660:	6822      	ldr	r2, [r4, #0]
 800f662:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f666:	6022      	str	r2, [r4, #0]
 800f668:	f806 3b01 	strb.w	r3, [r6], #1
 800f66c:	e7e4      	b.n	800f638 <_scanf_float+0x158>
 800f66e:	6822      	ldr	r2, [r4, #0]
 800f670:	0610      	lsls	r0, r2, #24
 800f672:	f57f af65 	bpl.w	800f540 <_scanf_float+0x60>
 800f676:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f67a:	e7f4      	b.n	800f666 <_scanf_float+0x186>
 800f67c:	f1ba 0f00 	cmp.w	sl, #0
 800f680:	d10e      	bne.n	800f6a0 <_scanf_float+0x1c0>
 800f682:	f1b9 0f00 	cmp.w	r9, #0
 800f686:	d10e      	bne.n	800f6a6 <_scanf_float+0x1c6>
 800f688:	6822      	ldr	r2, [r4, #0]
 800f68a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f68e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f692:	d108      	bne.n	800f6a6 <_scanf_float+0x1c6>
 800f694:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f698:	6022      	str	r2, [r4, #0]
 800f69a:	f04f 0a01 	mov.w	sl, #1
 800f69e:	e7e3      	b.n	800f668 <_scanf_float+0x188>
 800f6a0:	f1ba 0f02 	cmp.w	sl, #2
 800f6a4:	d055      	beq.n	800f752 <_scanf_float+0x272>
 800f6a6:	2d01      	cmp	r5, #1
 800f6a8:	d002      	beq.n	800f6b0 <_scanf_float+0x1d0>
 800f6aa:	2d04      	cmp	r5, #4
 800f6ac:	f47f af48 	bne.w	800f540 <_scanf_float+0x60>
 800f6b0:	3501      	adds	r5, #1
 800f6b2:	b2ed      	uxtb	r5, r5
 800f6b4:	e7d8      	b.n	800f668 <_scanf_float+0x188>
 800f6b6:	f1ba 0f01 	cmp.w	sl, #1
 800f6ba:	f47f af41 	bne.w	800f540 <_scanf_float+0x60>
 800f6be:	f04f 0a02 	mov.w	sl, #2
 800f6c2:	e7d1      	b.n	800f668 <_scanf_float+0x188>
 800f6c4:	b97d      	cbnz	r5, 800f6e6 <_scanf_float+0x206>
 800f6c6:	f1b9 0f00 	cmp.w	r9, #0
 800f6ca:	f47f af3c 	bne.w	800f546 <_scanf_float+0x66>
 800f6ce:	6822      	ldr	r2, [r4, #0]
 800f6d0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f6d4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f6d8:	f47f af39 	bne.w	800f54e <_scanf_float+0x6e>
 800f6dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f6e0:	6022      	str	r2, [r4, #0]
 800f6e2:	2501      	movs	r5, #1
 800f6e4:	e7c0      	b.n	800f668 <_scanf_float+0x188>
 800f6e6:	2d03      	cmp	r5, #3
 800f6e8:	d0e2      	beq.n	800f6b0 <_scanf_float+0x1d0>
 800f6ea:	2d05      	cmp	r5, #5
 800f6ec:	e7de      	b.n	800f6ac <_scanf_float+0x1cc>
 800f6ee:	2d02      	cmp	r5, #2
 800f6f0:	f47f af26 	bne.w	800f540 <_scanf_float+0x60>
 800f6f4:	2503      	movs	r5, #3
 800f6f6:	e7b7      	b.n	800f668 <_scanf_float+0x188>
 800f6f8:	2d06      	cmp	r5, #6
 800f6fa:	f47f af21 	bne.w	800f540 <_scanf_float+0x60>
 800f6fe:	2507      	movs	r5, #7
 800f700:	e7b2      	b.n	800f668 <_scanf_float+0x188>
 800f702:	6822      	ldr	r2, [r4, #0]
 800f704:	0591      	lsls	r1, r2, #22
 800f706:	f57f af1b 	bpl.w	800f540 <_scanf_float+0x60>
 800f70a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f70e:	6022      	str	r2, [r4, #0]
 800f710:	f8cd 9004 	str.w	r9, [sp, #4]
 800f714:	e7a8      	b.n	800f668 <_scanf_float+0x188>
 800f716:	6822      	ldr	r2, [r4, #0]
 800f718:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f71c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f720:	d006      	beq.n	800f730 <_scanf_float+0x250>
 800f722:	0550      	lsls	r0, r2, #21
 800f724:	f57f af0c 	bpl.w	800f540 <_scanf_float+0x60>
 800f728:	f1b9 0f00 	cmp.w	r9, #0
 800f72c:	f43f af0f 	beq.w	800f54e <_scanf_float+0x6e>
 800f730:	0591      	lsls	r1, r2, #22
 800f732:	bf58      	it	pl
 800f734:	9901      	ldrpl	r1, [sp, #4]
 800f736:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f73a:	bf58      	it	pl
 800f73c:	eba9 0101 	subpl.w	r1, r9, r1
 800f740:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f744:	bf58      	it	pl
 800f746:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f74a:	6022      	str	r2, [r4, #0]
 800f74c:	f04f 0900 	mov.w	r9, #0
 800f750:	e78a      	b.n	800f668 <_scanf_float+0x188>
 800f752:	f04f 0a03 	mov.w	sl, #3
 800f756:	e787      	b.n	800f668 <_scanf_float+0x188>
 800f758:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f75c:	4639      	mov	r1, r7
 800f75e:	4640      	mov	r0, r8
 800f760:	4798      	blx	r3
 800f762:	2800      	cmp	r0, #0
 800f764:	f43f aedf 	beq.w	800f526 <_scanf_float+0x46>
 800f768:	e6ea      	b.n	800f540 <_scanf_float+0x60>
 800f76a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f76e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f772:	463a      	mov	r2, r7
 800f774:	4640      	mov	r0, r8
 800f776:	4798      	blx	r3
 800f778:	6923      	ldr	r3, [r4, #16]
 800f77a:	3b01      	subs	r3, #1
 800f77c:	6123      	str	r3, [r4, #16]
 800f77e:	e6ec      	b.n	800f55a <_scanf_float+0x7a>
 800f780:	1e6b      	subs	r3, r5, #1
 800f782:	2b06      	cmp	r3, #6
 800f784:	d825      	bhi.n	800f7d2 <_scanf_float+0x2f2>
 800f786:	2d02      	cmp	r5, #2
 800f788:	d836      	bhi.n	800f7f8 <_scanf_float+0x318>
 800f78a:	455e      	cmp	r6, fp
 800f78c:	f67f aee8 	bls.w	800f560 <_scanf_float+0x80>
 800f790:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f794:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f798:	463a      	mov	r2, r7
 800f79a:	4640      	mov	r0, r8
 800f79c:	4798      	blx	r3
 800f79e:	6923      	ldr	r3, [r4, #16]
 800f7a0:	3b01      	subs	r3, #1
 800f7a2:	6123      	str	r3, [r4, #16]
 800f7a4:	e7f1      	b.n	800f78a <_scanf_float+0x2aa>
 800f7a6:	9802      	ldr	r0, [sp, #8]
 800f7a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f7ac:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f7b0:	9002      	str	r0, [sp, #8]
 800f7b2:	463a      	mov	r2, r7
 800f7b4:	4640      	mov	r0, r8
 800f7b6:	4798      	blx	r3
 800f7b8:	6923      	ldr	r3, [r4, #16]
 800f7ba:	3b01      	subs	r3, #1
 800f7bc:	6123      	str	r3, [r4, #16]
 800f7be:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f7c2:	fa5f fa8a 	uxtb.w	sl, sl
 800f7c6:	f1ba 0f02 	cmp.w	sl, #2
 800f7ca:	d1ec      	bne.n	800f7a6 <_scanf_float+0x2c6>
 800f7cc:	3d03      	subs	r5, #3
 800f7ce:	b2ed      	uxtb	r5, r5
 800f7d0:	1b76      	subs	r6, r6, r5
 800f7d2:	6823      	ldr	r3, [r4, #0]
 800f7d4:	05da      	lsls	r2, r3, #23
 800f7d6:	d52f      	bpl.n	800f838 <_scanf_float+0x358>
 800f7d8:	055b      	lsls	r3, r3, #21
 800f7da:	d510      	bpl.n	800f7fe <_scanf_float+0x31e>
 800f7dc:	455e      	cmp	r6, fp
 800f7de:	f67f aebf 	bls.w	800f560 <_scanf_float+0x80>
 800f7e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f7e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f7ea:	463a      	mov	r2, r7
 800f7ec:	4640      	mov	r0, r8
 800f7ee:	4798      	blx	r3
 800f7f0:	6923      	ldr	r3, [r4, #16]
 800f7f2:	3b01      	subs	r3, #1
 800f7f4:	6123      	str	r3, [r4, #16]
 800f7f6:	e7f1      	b.n	800f7dc <_scanf_float+0x2fc>
 800f7f8:	46aa      	mov	sl, r5
 800f7fa:	9602      	str	r6, [sp, #8]
 800f7fc:	e7df      	b.n	800f7be <_scanf_float+0x2de>
 800f7fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f802:	6923      	ldr	r3, [r4, #16]
 800f804:	2965      	cmp	r1, #101	; 0x65
 800f806:	f103 33ff 	add.w	r3, r3, #4294967295
 800f80a:	f106 35ff 	add.w	r5, r6, #4294967295
 800f80e:	6123      	str	r3, [r4, #16]
 800f810:	d00c      	beq.n	800f82c <_scanf_float+0x34c>
 800f812:	2945      	cmp	r1, #69	; 0x45
 800f814:	d00a      	beq.n	800f82c <_scanf_float+0x34c>
 800f816:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f81a:	463a      	mov	r2, r7
 800f81c:	4640      	mov	r0, r8
 800f81e:	4798      	blx	r3
 800f820:	6923      	ldr	r3, [r4, #16]
 800f822:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f826:	3b01      	subs	r3, #1
 800f828:	1eb5      	subs	r5, r6, #2
 800f82a:	6123      	str	r3, [r4, #16]
 800f82c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f830:	463a      	mov	r2, r7
 800f832:	4640      	mov	r0, r8
 800f834:	4798      	blx	r3
 800f836:	462e      	mov	r6, r5
 800f838:	6825      	ldr	r5, [r4, #0]
 800f83a:	f015 0510 	ands.w	r5, r5, #16
 800f83e:	d159      	bne.n	800f8f4 <_scanf_float+0x414>
 800f840:	7035      	strb	r5, [r6, #0]
 800f842:	6823      	ldr	r3, [r4, #0]
 800f844:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f84c:	d11b      	bne.n	800f886 <_scanf_float+0x3a6>
 800f84e:	9b01      	ldr	r3, [sp, #4]
 800f850:	454b      	cmp	r3, r9
 800f852:	eba3 0209 	sub.w	r2, r3, r9
 800f856:	d123      	bne.n	800f8a0 <_scanf_float+0x3c0>
 800f858:	2200      	movs	r2, #0
 800f85a:	4659      	mov	r1, fp
 800f85c:	4640      	mov	r0, r8
 800f85e:	f000 ff49 	bl	80106f4 <_strtod_r>
 800f862:	6822      	ldr	r2, [r4, #0]
 800f864:	9b03      	ldr	r3, [sp, #12]
 800f866:	f012 0f02 	tst.w	r2, #2
 800f86a:	ec57 6b10 	vmov	r6, r7, d0
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	d021      	beq.n	800f8b6 <_scanf_float+0x3d6>
 800f872:	9903      	ldr	r1, [sp, #12]
 800f874:	1d1a      	adds	r2, r3, #4
 800f876:	600a      	str	r2, [r1, #0]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	e9c3 6700 	strd	r6, r7, [r3]
 800f87e:	68e3      	ldr	r3, [r4, #12]
 800f880:	3301      	adds	r3, #1
 800f882:	60e3      	str	r3, [r4, #12]
 800f884:	e66d      	b.n	800f562 <_scanf_float+0x82>
 800f886:	9b04      	ldr	r3, [sp, #16]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d0e5      	beq.n	800f858 <_scanf_float+0x378>
 800f88c:	9905      	ldr	r1, [sp, #20]
 800f88e:	230a      	movs	r3, #10
 800f890:	462a      	mov	r2, r5
 800f892:	3101      	adds	r1, #1
 800f894:	4640      	mov	r0, r8
 800f896:	f000 ffc1 	bl	801081c <_strtol_r>
 800f89a:	9b04      	ldr	r3, [sp, #16]
 800f89c:	9e05      	ldr	r6, [sp, #20]
 800f89e:	1ac2      	subs	r2, r0, r3
 800f8a0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f8a4:	429e      	cmp	r6, r3
 800f8a6:	bf28      	it	cs
 800f8a8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f8ac:	4912      	ldr	r1, [pc, #72]	; (800f8f8 <_scanf_float+0x418>)
 800f8ae:	4630      	mov	r0, r6
 800f8b0:	f000 f8ca 	bl	800fa48 <siprintf>
 800f8b4:	e7d0      	b.n	800f858 <_scanf_float+0x378>
 800f8b6:	9903      	ldr	r1, [sp, #12]
 800f8b8:	f012 0f04 	tst.w	r2, #4
 800f8bc:	f103 0204 	add.w	r2, r3, #4
 800f8c0:	600a      	str	r2, [r1, #0]
 800f8c2:	d1d9      	bne.n	800f878 <_scanf_float+0x398>
 800f8c4:	f8d3 8000 	ldr.w	r8, [r3]
 800f8c8:	ee10 2a10 	vmov	r2, s0
 800f8cc:	ee10 0a10 	vmov	r0, s0
 800f8d0:	463b      	mov	r3, r7
 800f8d2:	4639      	mov	r1, r7
 800f8d4:	f7f1 f932 	bl	8000b3c <__aeabi_dcmpun>
 800f8d8:	b128      	cbz	r0, 800f8e6 <_scanf_float+0x406>
 800f8da:	4808      	ldr	r0, [pc, #32]	; (800f8fc <_scanf_float+0x41c>)
 800f8dc:	f000 f8ae 	bl	800fa3c <nanf>
 800f8e0:	ed88 0a00 	vstr	s0, [r8]
 800f8e4:	e7cb      	b.n	800f87e <_scanf_float+0x39e>
 800f8e6:	4630      	mov	r0, r6
 800f8e8:	4639      	mov	r1, r7
 800f8ea:	f7f1 f985 	bl	8000bf8 <__aeabi_d2f>
 800f8ee:	f8c8 0000 	str.w	r0, [r8]
 800f8f2:	e7c4      	b.n	800f87e <_scanf_float+0x39e>
 800f8f4:	2500      	movs	r5, #0
 800f8f6:	e634      	b.n	800f562 <_scanf_float+0x82>
 800f8f8:	08014198 	.word	0x08014198
 800f8fc:	08014608 	.word	0x08014608

0800f900 <iprintf>:
 800f900:	b40f      	push	{r0, r1, r2, r3}
 800f902:	4b0a      	ldr	r3, [pc, #40]	; (800f92c <iprintf+0x2c>)
 800f904:	b513      	push	{r0, r1, r4, lr}
 800f906:	681c      	ldr	r4, [r3, #0]
 800f908:	b124      	cbz	r4, 800f914 <iprintf+0x14>
 800f90a:	69a3      	ldr	r3, [r4, #24]
 800f90c:	b913      	cbnz	r3, 800f914 <iprintf+0x14>
 800f90e:	4620      	mov	r0, r4
 800f910:	f001 ffda 	bl	80118c8 <__sinit>
 800f914:	ab05      	add	r3, sp, #20
 800f916:	9a04      	ldr	r2, [sp, #16]
 800f918:	68a1      	ldr	r1, [r4, #8]
 800f91a:	9301      	str	r3, [sp, #4]
 800f91c:	4620      	mov	r0, r4
 800f91e:	f003 fac5 	bl	8012eac <_vfiprintf_r>
 800f922:	b002      	add	sp, #8
 800f924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f928:	b004      	add	sp, #16
 800f92a:	4770      	bx	lr
 800f92c:	200000ac 	.word	0x200000ac

0800f930 <_puts_r>:
 800f930:	b570      	push	{r4, r5, r6, lr}
 800f932:	460e      	mov	r6, r1
 800f934:	4605      	mov	r5, r0
 800f936:	b118      	cbz	r0, 800f940 <_puts_r+0x10>
 800f938:	6983      	ldr	r3, [r0, #24]
 800f93a:	b90b      	cbnz	r3, 800f940 <_puts_r+0x10>
 800f93c:	f001 ffc4 	bl	80118c8 <__sinit>
 800f940:	69ab      	ldr	r3, [r5, #24]
 800f942:	68ac      	ldr	r4, [r5, #8]
 800f944:	b913      	cbnz	r3, 800f94c <_puts_r+0x1c>
 800f946:	4628      	mov	r0, r5
 800f948:	f001 ffbe 	bl	80118c8 <__sinit>
 800f94c:	4b2c      	ldr	r3, [pc, #176]	; (800fa00 <_puts_r+0xd0>)
 800f94e:	429c      	cmp	r4, r3
 800f950:	d120      	bne.n	800f994 <_puts_r+0x64>
 800f952:	686c      	ldr	r4, [r5, #4]
 800f954:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f956:	07db      	lsls	r3, r3, #31
 800f958:	d405      	bmi.n	800f966 <_puts_r+0x36>
 800f95a:	89a3      	ldrh	r3, [r4, #12]
 800f95c:	0598      	lsls	r0, r3, #22
 800f95e:	d402      	bmi.n	800f966 <_puts_r+0x36>
 800f960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f962:	f002 fbc2 	bl	80120ea <__retarget_lock_acquire_recursive>
 800f966:	89a3      	ldrh	r3, [r4, #12]
 800f968:	0719      	lsls	r1, r3, #28
 800f96a:	d51d      	bpl.n	800f9a8 <_puts_r+0x78>
 800f96c:	6923      	ldr	r3, [r4, #16]
 800f96e:	b1db      	cbz	r3, 800f9a8 <_puts_r+0x78>
 800f970:	3e01      	subs	r6, #1
 800f972:	68a3      	ldr	r3, [r4, #8]
 800f974:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f978:	3b01      	subs	r3, #1
 800f97a:	60a3      	str	r3, [r4, #8]
 800f97c:	bb39      	cbnz	r1, 800f9ce <_puts_r+0x9e>
 800f97e:	2b00      	cmp	r3, #0
 800f980:	da38      	bge.n	800f9f4 <_puts_r+0xc4>
 800f982:	4622      	mov	r2, r4
 800f984:	210a      	movs	r1, #10
 800f986:	4628      	mov	r0, r5
 800f988:	f000 ff4a 	bl	8010820 <__swbuf_r>
 800f98c:	3001      	adds	r0, #1
 800f98e:	d011      	beq.n	800f9b4 <_puts_r+0x84>
 800f990:	250a      	movs	r5, #10
 800f992:	e011      	b.n	800f9b8 <_puts_r+0x88>
 800f994:	4b1b      	ldr	r3, [pc, #108]	; (800fa04 <_puts_r+0xd4>)
 800f996:	429c      	cmp	r4, r3
 800f998:	d101      	bne.n	800f99e <_puts_r+0x6e>
 800f99a:	68ac      	ldr	r4, [r5, #8]
 800f99c:	e7da      	b.n	800f954 <_puts_r+0x24>
 800f99e:	4b1a      	ldr	r3, [pc, #104]	; (800fa08 <_puts_r+0xd8>)
 800f9a0:	429c      	cmp	r4, r3
 800f9a2:	bf08      	it	eq
 800f9a4:	68ec      	ldreq	r4, [r5, #12]
 800f9a6:	e7d5      	b.n	800f954 <_puts_r+0x24>
 800f9a8:	4621      	mov	r1, r4
 800f9aa:	4628      	mov	r0, r5
 800f9ac:	f000 ff8a 	bl	80108c4 <__swsetup_r>
 800f9b0:	2800      	cmp	r0, #0
 800f9b2:	d0dd      	beq.n	800f970 <_puts_r+0x40>
 800f9b4:	f04f 35ff 	mov.w	r5, #4294967295
 800f9b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f9ba:	07da      	lsls	r2, r3, #31
 800f9bc:	d405      	bmi.n	800f9ca <_puts_r+0x9a>
 800f9be:	89a3      	ldrh	r3, [r4, #12]
 800f9c0:	059b      	lsls	r3, r3, #22
 800f9c2:	d402      	bmi.n	800f9ca <_puts_r+0x9a>
 800f9c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f9c6:	f002 fb91 	bl	80120ec <__retarget_lock_release_recursive>
 800f9ca:	4628      	mov	r0, r5
 800f9cc:	bd70      	pop	{r4, r5, r6, pc}
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	da04      	bge.n	800f9dc <_puts_r+0xac>
 800f9d2:	69a2      	ldr	r2, [r4, #24]
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	dc06      	bgt.n	800f9e6 <_puts_r+0xb6>
 800f9d8:	290a      	cmp	r1, #10
 800f9da:	d004      	beq.n	800f9e6 <_puts_r+0xb6>
 800f9dc:	6823      	ldr	r3, [r4, #0]
 800f9de:	1c5a      	adds	r2, r3, #1
 800f9e0:	6022      	str	r2, [r4, #0]
 800f9e2:	7019      	strb	r1, [r3, #0]
 800f9e4:	e7c5      	b.n	800f972 <_puts_r+0x42>
 800f9e6:	4622      	mov	r2, r4
 800f9e8:	4628      	mov	r0, r5
 800f9ea:	f000 ff19 	bl	8010820 <__swbuf_r>
 800f9ee:	3001      	adds	r0, #1
 800f9f0:	d1bf      	bne.n	800f972 <_puts_r+0x42>
 800f9f2:	e7df      	b.n	800f9b4 <_puts_r+0x84>
 800f9f4:	6823      	ldr	r3, [r4, #0]
 800f9f6:	250a      	movs	r5, #10
 800f9f8:	1c5a      	adds	r2, r3, #1
 800f9fa:	6022      	str	r2, [r4, #0]
 800f9fc:	701d      	strb	r5, [r3, #0]
 800f9fe:	e7db      	b.n	800f9b8 <_puts_r+0x88>
 800fa00:	080143a4 	.word	0x080143a4
 800fa04:	080143c4 	.word	0x080143c4
 800fa08:	08014384 	.word	0x08014384

0800fa0c <puts>:
 800fa0c:	4b02      	ldr	r3, [pc, #8]	; (800fa18 <puts+0xc>)
 800fa0e:	4601      	mov	r1, r0
 800fa10:	6818      	ldr	r0, [r3, #0]
 800fa12:	f7ff bf8d 	b.w	800f930 <_puts_r>
 800fa16:	bf00      	nop
 800fa18:	200000ac 	.word	0x200000ac

0800fa1c <_sbrk_r>:
 800fa1c:	b538      	push	{r3, r4, r5, lr}
 800fa1e:	4d06      	ldr	r5, [pc, #24]	; (800fa38 <_sbrk_r+0x1c>)
 800fa20:	2300      	movs	r3, #0
 800fa22:	4604      	mov	r4, r0
 800fa24:	4608      	mov	r0, r1
 800fa26:	602b      	str	r3, [r5, #0]
 800fa28:	f7f3 feb6 	bl	8003798 <_sbrk>
 800fa2c:	1c43      	adds	r3, r0, #1
 800fa2e:	d102      	bne.n	800fa36 <_sbrk_r+0x1a>
 800fa30:	682b      	ldr	r3, [r5, #0]
 800fa32:	b103      	cbz	r3, 800fa36 <_sbrk_r+0x1a>
 800fa34:	6023      	str	r3, [r4, #0]
 800fa36:	bd38      	pop	{r3, r4, r5, pc}
 800fa38:	2000395c 	.word	0x2000395c

0800fa3c <nanf>:
 800fa3c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fa44 <nanf+0x8>
 800fa40:	4770      	bx	lr
 800fa42:	bf00      	nop
 800fa44:	7fc00000 	.word	0x7fc00000

0800fa48 <siprintf>:
 800fa48:	b40e      	push	{r1, r2, r3}
 800fa4a:	b500      	push	{lr}
 800fa4c:	b09c      	sub	sp, #112	; 0x70
 800fa4e:	ab1d      	add	r3, sp, #116	; 0x74
 800fa50:	9002      	str	r0, [sp, #8]
 800fa52:	9006      	str	r0, [sp, #24]
 800fa54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fa58:	4809      	ldr	r0, [pc, #36]	; (800fa80 <siprintf+0x38>)
 800fa5a:	9107      	str	r1, [sp, #28]
 800fa5c:	9104      	str	r1, [sp, #16]
 800fa5e:	4909      	ldr	r1, [pc, #36]	; (800fa84 <siprintf+0x3c>)
 800fa60:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa64:	9105      	str	r1, [sp, #20]
 800fa66:	6800      	ldr	r0, [r0, #0]
 800fa68:	9301      	str	r3, [sp, #4]
 800fa6a:	a902      	add	r1, sp, #8
 800fa6c:	f003 f8f4 	bl	8012c58 <_svfiprintf_r>
 800fa70:	9b02      	ldr	r3, [sp, #8]
 800fa72:	2200      	movs	r2, #0
 800fa74:	701a      	strb	r2, [r3, #0]
 800fa76:	b01c      	add	sp, #112	; 0x70
 800fa78:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa7c:	b003      	add	sp, #12
 800fa7e:	4770      	bx	lr
 800fa80:	200000ac 	.word	0x200000ac
 800fa84:	ffff0208 	.word	0xffff0208

0800fa88 <strncmp>:
 800fa88:	b510      	push	{r4, lr}
 800fa8a:	b17a      	cbz	r2, 800faac <strncmp+0x24>
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	3901      	subs	r1, #1
 800fa90:	1884      	adds	r4, r0, r2
 800fa92:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fa96:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fa9a:	4290      	cmp	r0, r2
 800fa9c:	d101      	bne.n	800faa2 <strncmp+0x1a>
 800fa9e:	42a3      	cmp	r3, r4
 800faa0:	d101      	bne.n	800faa6 <strncmp+0x1e>
 800faa2:	1a80      	subs	r0, r0, r2
 800faa4:	bd10      	pop	{r4, pc}
 800faa6:	2800      	cmp	r0, #0
 800faa8:	d1f3      	bne.n	800fa92 <strncmp+0xa>
 800faaa:	e7fa      	b.n	800faa2 <strncmp+0x1a>
 800faac:	4610      	mov	r0, r2
 800faae:	e7f9      	b.n	800faa4 <strncmp+0x1c>

0800fab0 <sulp>:
 800fab0:	b570      	push	{r4, r5, r6, lr}
 800fab2:	4604      	mov	r4, r0
 800fab4:	460d      	mov	r5, r1
 800fab6:	ec45 4b10 	vmov	d0, r4, r5
 800faba:	4616      	mov	r6, r2
 800fabc:	f002 ff0c 	bl	80128d8 <__ulp>
 800fac0:	ec51 0b10 	vmov	r0, r1, d0
 800fac4:	b17e      	cbz	r6, 800fae6 <sulp+0x36>
 800fac6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800faca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800face:	2b00      	cmp	r3, #0
 800fad0:	dd09      	ble.n	800fae6 <sulp+0x36>
 800fad2:	051b      	lsls	r3, r3, #20
 800fad4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fad8:	2400      	movs	r4, #0
 800fada:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fade:	4622      	mov	r2, r4
 800fae0:	462b      	mov	r3, r5
 800fae2:	f7f0 fd91 	bl	8000608 <__aeabi_dmul>
 800fae6:	bd70      	pop	{r4, r5, r6, pc}

0800fae8 <_strtod_l>:
 800fae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faec:	ed2d 8b02 	vpush	{d8}
 800faf0:	b09d      	sub	sp, #116	; 0x74
 800faf2:	461f      	mov	r7, r3
 800faf4:	2300      	movs	r3, #0
 800faf6:	9318      	str	r3, [sp, #96]	; 0x60
 800faf8:	4ba2      	ldr	r3, [pc, #648]	; (800fd84 <_strtod_l+0x29c>)
 800fafa:	9213      	str	r2, [sp, #76]	; 0x4c
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	9305      	str	r3, [sp, #20]
 800fb00:	4604      	mov	r4, r0
 800fb02:	4618      	mov	r0, r3
 800fb04:	4688      	mov	r8, r1
 800fb06:	f7f0 fb6b 	bl	80001e0 <strlen>
 800fb0a:	f04f 0a00 	mov.w	sl, #0
 800fb0e:	4605      	mov	r5, r0
 800fb10:	f04f 0b00 	mov.w	fp, #0
 800fb14:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fb18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fb1a:	781a      	ldrb	r2, [r3, #0]
 800fb1c:	2a2b      	cmp	r2, #43	; 0x2b
 800fb1e:	d04e      	beq.n	800fbbe <_strtod_l+0xd6>
 800fb20:	d83b      	bhi.n	800fb9a <_strtod_l+0xb2>
 800fb22:	2a0d      	cmp	r2, #13
 800fb24:	d834      	bhi.n	800fb90 <_strtod_l+0xa8>
 800fb26:	2a08      	cmp	r2, #8
 800fb28:	d834      	bhi.n	800fb94 <_strtod_l+0xac>
 800fb2a:	2a00      	cmp	r2, #0
 800fb2c:	d03e      	beq.n	800fbac <_strtod_l+0xc4>
 800fb2e:	2300      	movs	r3, #0
 800fb30:	930a      	str	r3, [sp, #40]	; 0x28
 800fb32:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800fb34:	7833      	ldrb	r3, [r6, #0]
 800fb36:	2b30      	cmp	r3, #48	; 0x30
 800fb38:	f040 80b0 	bne.w	800fc9c <_strtod_l+0x1b4>
 800fb3c:	7873      	ldrb	r3, [r6, #1]
 800fb3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fb42:	2b58      	cmp	r3, #88	; 0x58
 800fb44:	d168      	bne.n	800fc18 <_strtod_l+0x130>
 800fb46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb48:	9301      	str	r3, [sp, #4]
 800fb4a:	ab18      	add	r3, sp, #96	; 0x60
 800fb4c:	9702      	str	r7, [sp, #8]
 800fb4e:	9300      	str	r3, [sp, #0]
 800fb50:	4a8d      	ldr	r2, [pc, #564]	; (800fd88 <_strtod_l+0x2a0>)
 800fb52:	ab19      	add	r3, sp, #100	; 0x64
 800fb54:	a917      	add	r1, sp, #92	; 0x5c
 800fb56:	4620      	mov	r0, r4
 800fb58:	f001 ffba 	bl	8011ad0 <__gethex>
 800fb5c:	f010 0707 	ands.w	r7, r0, #7
 800fb60:	4605      	mov	r5, r0
 800fb62:	d005      	beq.n	800fb70 <_strtod_l+0x88>
 800fb64:	2f06      	cmp	r7, #6
 800fb66:	d12c      	bne.n	800fbc2 <_strtod_l+0xda>
 800fb68:	3601      	adds	r6, #1
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	9617      	str	r6, [sp, #92]	; 0x5c
 800fb6e:	930a      	str	r3, [sp, #40]	; 0x28
 800fb70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	f040 8590 	bne.w	8010698 <_strtod_l+0xbb0>
 800fb78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb7a:	b1eb      	cbz	r3, 800fbb8 <_strtod_l+0xd0>
 800fb7c:	4652      	mov	r2, sl
 800fb7e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fb82:	ec43 2b10 	vmov	d0, r2, r3
 800fb86:	b01d      	add	sp, #116	; 0x74
 800fb88:	ecbd 8b02 	vpop	{d8}
 800fb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb90:	2a20      	cmp	r2, #32
 800fb92:	d1cc      	bne.n	800fb2e <_strtod_l+0x46>
 800fb94:	3301      	adds	r3, #1
 800fb96:	9317      	str	r3, [sp, #92]	; 0x5c
 800fb98:	e7be      	b.n	800fb18 <_strtod_l+0x30>
 800fb9a:	2a2d      	cmp	r2, #45	; 0x2d
 800fb9c:	d1c7      	bne.n	800fb2e <_strtod_l+0x46>
 800fb9e:	2201      	movs	r2, #1
 800fba0:	920a      	str	r2, [sp, #40]	; 0x28
 800fba2:	1c5a      	adds	r2, r3, #1
 800fba4:	9217      	str	r2, [sp, #92]	; 0x5c
 800fba6:	785b      	ldrb	r3, [r3, #1]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d1c2      	bne.n	800fb32 <_strtod_l+0x4a>
 800fbac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fbae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	f040 856e 	bne.w	8010694 <_strtod_l+0xbac>
 800fbb8:	4652      	mov	r2, sl
 800fbba:	465b      	mov	r3, fp
 800fbbc:	e7e1      	b.n	800fb82 <_strtod_l+0x9a>
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	e7ee      	b.n	800fba0 <_strtod_l+0xb8>
 800fbc2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fbc4:	b13a      	cbz	r2, 800fbd6 <_strtod_l+0xee>
 800fbc6:	2135      	movs	r1, #53	; 0x35
 800fbc8:	a81a      	add	r0, sp, #104	; 0x68
 800fbca:	f002 ff90 	bl	8012aee <__copybits>
 800fbce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fbd0:	4620      	mov	r0, r4
 800fbd2:	f002 fb4f 	bl	8012274 <_Bfree>
 800fbd6:	3f01      	subs	r7, #1
 800fbd8:	2f04      	cmp	r7, #4
 800fbda:	d806      	bhi.n	800fbea <_strtod_l+0x102>
 800fbdc:	e8df f007 	tbb	[pc, r7]
 800fbe0:	1714030a 	.word	0x1714030a
 800fbe4:	0a          	.byte	0x0a
 800fbe5:	00          	.byte	0x00
 800fbe6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800fbea:	0728      	lsls	r0, r5, #28
 800fbec:	d5c0      	bpl.n	800fb70 <_strtod_l+0x88>
 800fbee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800fbf2:	e7bd      	b.n	800fb70 <_strtod_l+0x88>
 800fbf4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800fbf8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800fbfa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fbfe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fc02:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fc06:	e7f0      	b.n	800fbea <_strtod_l+0x102>
 800fc08:	f8df b180 	ldr.w	fp, [pc, #384]	; 800fd8c <_strtod_l+0x2a4>
 800fc0c:	e7ed      	b.n	800fbea <_strtod_l+0x102>
 800fc0e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800fc12:	f04f 3aff 	mov.w	sl, #4294967295
 800fc16:	e7e8      	b.n	800fbea <_strtod_l+0x102>
 800fc18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fc1a:	1c5a      	adds	r2, r3, #1
 800fc1c:	9217      	str	r2, [sp, #92]	; 0x5c
 800fc1e:	785b      	ldrb	r3, [r3, #1]
 800fc20:	2b30      	cmp	r3, #48	; 0x30
 800fc22:	d0f9      	beq.n	800fc18 <_strtod_l+0x130>
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d0a3      	beq.n	800fb70 <_strtod_l+0x88>
 800fc28:	2301      	movs	r3, #1
 800fc2a:	f04f 0900 	mov.w	r9, #0
 800fc2e:	9304      	str	r3, [sp, #16]
 800fc30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fc32:	9308      	str	r3, [sp, #32]
 800fc34:	f8cd 901c 	str.w	r9, [sp, #28]
 800fc38:	464f      	mov	r7, r9
 800fc3a:	220a      	movs	r2, #10
 800fc3c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800fc3e:	7806      	ldrb	r6, [r0, #0]
 800fc40:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800fc44:	b2d9      	uxtb	r1, r3
 800fc46:	2909      	cmp	r1, #9
 800fc48:	d92a      	bls.n	800fca0 <_strtod_l+0x1b8>
 800fc4a:	9905      	ldr	r1, [sp, #20]
 800fc4c:	462a      	mov	r2, r5
 800fc4e:	f7ff ff1b 	bl	800fa88 <strncmp>
 800fc52:	b398      	cbz	r0, 800fcbc <_strtod_l+0x1d4>
 800fc54:	2000      	movs	r0, #0
 800fc56:	4632      	mov	r2, r6
 800fc58:	463d      	mov	r5, r7
 800fc5a:	9005      	str	r0, [sp, #20]
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	2a65      	cmp	r2, #101	; 0x65
 800fc60:	d001      	beq.n	800fc66 <_strtod_l+0x17e>
 800fc62:	2a45      	cmp	r2, #69	; 0x45
 800fc64:	d118      	bne.n	800fc98 <_strtod_l+0x1b0>
 800fc66:	b91d      	cbnz	r5, 800fc70 <_strtod_l+0x188>
 800fc68:	9a04      	ldr	r2, [sp, #16]
 800fc6a:	4302      	orrs	r2, r0
 800fc6c:	d09e      	beq.n	800fbac <_strtod_l+0xc4>
 800fc6e:	2500      	movs	r5, #0
 800fc70:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800fc74:	f108 0201 	add.w	r2, r8, #1
 800fc78:	9217      	str	r2, [sp, #92]	; 0x5c
 800fc7a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800fc7e:	2a2b      	cmp	r2, #43	; 0x2b
 800fc80:	d075      	beq.n	800fd6e <_strtod_l+0x286>
 800fc82:	2a2d      	cmp	r2, #45	; 0x2d
 800fc84:	d07b      	beq.n	800fd7e <_strtod_l+0x296>
 800fc86:	f04f 0c00 	mov.w	ip, #0
 800fc8a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800fc8e:	2909      	cmp	r1, #9
 800fc90:	f240 8082 	bls.w	800fd98 <_strtod_l+0x2b0>
 800fc94:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fc98:	2600      	movs	r6, #0
 800fc9a:	e09d      	b.n	800fdd8 <_strtod_l+0x2f0>
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	e7c4      	b.n	800fc2a <_strtod_l+0x142>
 800fca0:	2f08      	cmp	r7, #8
 800fca2:	bfd8      	it	le
 800fca4:	9907      	ldrle	r1, [sp, #28]
 800fca6:	f100 0001 	add.w	r0, r0, #1
 800fcaa:	bfda      	itte	le
 800fcac:	fb02 3301 	mlale	r3, r2, r1, r3
 800fcb0:	9307      	strle	r3, [sp, #28]
 800fcb2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800fcb6:	3701      	adds	r7, #1
 800fcb8:	9017      	str	r0, [sp, #92]	; 0x5c
 800fcba:	e7bf      	b.n	800fc3c <_strtod_l+0x154>
 800fcbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fcbe:	195a      	adds	r2, r3, r5
 800fcc0:	9217      	str	r2, [sp, #92]	; 0x5c
 800fcc2:	5d5a      	ldrb	r2, [r3, r5]
 800fcc4:	2f00      	cmp	r7, #0
 800fcc6:	d037      	beq.n	800fd38 <_strtod_l+0x250>
 800fcc8:	9005      	str	r0, [sp, #20]
 800fcca:	463d      	mov	r5, r7
 800fccc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800fcd0:	2b09      	cmp	r3, #9
 800fcd2:	d912      	bls.n	800fcfa <_strtod_l+0x212>
 800fcd4:	2301      	movs	r3, #1
 800fcd6:	e7c2      	b.n	800fc5e <_strtod_l+0x176>
 800fcd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fcda:	1c5a      	adds	r2, r3, #1
 800fcdc:	9217      	str	r2, [sp, #92]	; 0x5c
 800fcde:	785a      	ldrb	r2, [r3, #1]
 800fce0:	3001      	adds	r0, #1
 800fce2:	2a30      	cmp	r2, #48	; 0x30
 800fce4:	d0f8      	beq.n	800fcd8 <_strtod_l+0x1f0>
 800fce6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800fcea:	2b08      	cmp	r3, #8
 800fcec:	f200 84d9 	bhi.w	80106a2 <_strtod_l+0xbba>
 800fcf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fcf2:	9005      	str	r0, [sp, #20]
 800fcf4:	2000      	movs	r0, #0
 800fcf6:	9308      	str	r3, [sp, #32]
 800fcf8:	4605      	mov	r5, r0
 800fcfa:	3a30      	subs	r2, #48	; 0x30
 800fcfc:	f100 0301 	add.w	r3, r0, #1
 800fd00:	d014      	beq.n	800fd2c <_strtod_l+0x244>
 800fd02:	9905      	ldr	r1, [sp, #20]
 800fd04:	4419      	add	r1, r3
 800fd06:	9105      	str	r1, [sp, #20]
 800fd08:	462b      	mov	r3, r5
 800fd0a:	eb00 0e05 	add.w	lr, r0, r5
 800fd0e:	210a      	movs	r1, #10
 800fd10:	4573      	cmp	r3, lr
 800fd12:	d113      	bne.n	800fd3c <_strtod_l+0x254>
 800fd14:	182b      	adds	r3, r5, r0
 800fd16:	2b08      	cmp	r3, #8
 800fd18:	f105 0501 	add.w	r5, r5, #1
 800fd1c:	4405      	add	r5, r0
 800fd1e:	dc1c      	bgt.n	800fd5a <_strtod_l+0x272>
 800fd20:	9907      	ldr	r1, [sp, #28]
 800fd22:	230a      	movs	r3, #10
 800fd24:	fb03 2301 	mla	r3, r3, r1, r2
 800fd28:	9307      	str	r3, [sp, #28]
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fd2e:	1c51      	adds	r1, r2, #1
 800fd30:	9117      	str	r1, [sp, #92]	; 0x5c
 800fd32:	7852      	ldrb	r2, [r2, #1]
 800fd34:	4618      	mov	r0, r3
 800fd36:	e7c9      	b.n	800fccc <_strtod_l+0x1e4>
 800fd38:	4638      	mov	r0, r7
 800fd3a:	e7d2      	b.n	800fce2 <_strtod_l+0x1fa>
 800fd3c:	2b08      	cmp	r3, #8
 800fd3e:	dc04      	bgt.n	800fd4a <_strtod_l+0x262>
 800fd40:	9e07      	ldr	r6, [sp, #28]
 800fd42:	434e      	muls	r6, r1
 800fd44:	9607      	str	r6, [sp, #28]
 800fd46:	3301      	adds	r3, #1
 800fd48:	e7e2      	b.n	800fd10 <_strtod_l+0x228>
 800fd4a:	f103 0c01 	add.w	ip, r3, #1
 800fd4e:	f1bc 0f10 	cmp.w	ip, #16
 800fd52:	bfd8      	it	le
 800fd54:	fb01 f909 	mulle.w	r9, r1, r9
 800fd58:	e7f5      	b.n	800fd46 <_strtod_l+0x25e>
 800fd5a:	2d10      	cmp	r5, #16
 800fd5c:	bfdc      	itt	le
 800fd5e:	230a      	movle	r3, #10
 800fd60:	fb03 2909 	mlale	r9, r3, r9, r2
 800fd64:	e7e1      	b.n	800fd2a <_strtod_l+0x242>
 800fd66:	2300      	movs	r3, #0
 800fd68:	9305      	str	r3, [sp, #20]
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	e77c      	b.n	800fc68 <_strtod_l+0x180>
 800fd6e:	f04f 0c00 	mov.w	ip, #0
 800fd72:	f108 0202 	add.w	r2, r8, #2
 800fd76:	9217      	str	r2, [sp, #92]	; 0x5c
 800fd78:	f898 2002 	ldrb.w	r2, [r8, #2]
 800fd7c:	e785      	b.n	800fc8a <_strtod_l+0x1a2>
 800fd7e:	f04f 0c01 	mov.w	ip, #1
 800fd82:	e7f6      	b.n	800fd72 <_strtod_l+0x28a>
 800fd84:	0801444c 	.word	0x0801444c
 800fd88:	080141a0 	.word	0x080141a0
 800fd8c:	7ff00000 	.word	0x7ff00000
 800fd90:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fd92:	1c51      	adds	r1, r2, #1
 800fd94:	9117      	str	r1, [sp, #92]	; 0x5c
 800fd96:	7852      	ldrb	r2, [r2, #1]
 800fd98:	2a30      	cmp	r2, #48	; 0x30
 800fd9a:	d0f9      	beq.n	800fd90 <_strtod_l+0x2a8>
 800fd9c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800fda0:	2908      	cmp	r1, #8
 800fda2:	f63f af79 	bhi.w	800fc98 <_strtod_l+0x1b0>
 800fda6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800fdaa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fdac:	9206      	str	r2, [sp, #24]
 800fdae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fdb0:	1c51      	adds	r1, r2, #1
 800fdb2:	9117      	str	r1, [sp, #92]	; 0x5c
 800fdb4:	7852      	ldrb	r2, [r2, #1]
 800fdb6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800fdba:	2e09      	cmp	r6, #9
 800fdbc:	d937      	bls.n	800fe2e <_strtod_l+0x346>
 800fdbe:	9e06      	ldr	r6, [sp, #24]
 800fdc0:	1b89      	subs	r1, r1, r6
 800fdc2:	2908      	cmp	r1, #8
 800fdc4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800fdc8:	dc02      	bgt.n	800fdd0 <_strtod_l+0x2e8>
 800fdca:	4576      	cmp	r6, lr
 800fdcc:	bfa8      	it	ge
 800fdce:	4676      	movge	r6, lr
 800fdd0:	f1bc 0f00 	cmp.w	ip, #0
 800fdd4:	d000      	beq.n	800fdd8 <_strtod_l+0x2f0>
 800fdd6:	4276      	negs	r6, r6
 800fdd8:	2d00      	cmp	r5, #0
 800fdda:	d14d      	bne.n	800fe78 <_strtod_l+0x390>
 800fddc:	9904      	ldr	r1, [sp, #16]
 800fdde:	4301      	orrs	r1, r0
 800fde0:	f47f aec6 	bne.w	800fb70 <_strtod_l+0x88>
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	f47f aee1 	bne.w	800fbac <_strtod_l+0xc4>
 800fdea:	2a69      	cmp	r2, #105	; 0x69
 800fdec:	d027      	beq.n	800fe3e <_strtod_l+0x356>
 800fdee:	dc24      	bgt.n	800fe3a <_strtod_l+0x352>
 800fdf0:	2a49      	cmp	r2, #73	; 0x49
 800fdf2:	d024      	beq.n	800fe3e <_strtod_l+0x356>
 800fdf4:	2a4e      	cmp	r2, #78	; 0x4e
 800fdf6:	f47f aed9 	bne.w	800fbac <_strtod_l+0xc4>
 800fdfa:	499f      	ldr	r1, [pc, #636]	; (8010078 <_strtod_l+0x590>)
 800fdfc:	a817      	add	r0, sp, #92	; 0x5c
 800fdfe:	f002 f8bf 	bl	8011f80 <__match>
 800fe02:	2800      	cmp	r0, #0
 800fe04:	f43f aed2 	beq.w	800fbac <_strtod_l+0xc4>
 800fe08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fe0a:	781b      	ldrb	r3, [r3, #0]
 800fe0c:	2b28      	cmp	r3, #40	; 0x28
 800fe0e:	d12d      	bne.n	800fe6c <_strtod_l+0x384>
 800fe10:	499a      	ldr	r1, [pc, #616]	; (801007c <_strtod_l+0x594>)
 800fe12:	aa1a      	add	r2, sp, #104	; 0x68
 800fe14:	a817      	add	r0, sp, #92	; 0x5c
 800fe16:	f002 f8c7 	bl	8011fa8 <__hexnan>
 800fe1a:	2805      	cmp	r0, #5
 800fe1c:	d126      	bne.n	800fe6c <_strtod_l+0x384>
 800fe1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fe20:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800fe24:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800fe28:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800fe2c:	e6a0      	b.n	800fb70 <_strtod_l+0x88>
 800fe2e:	210a      	movs	r1, #10
 800fe30:	fb01 2e0e 	mla	lr, r1, lr, r2
 800fe34:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800fe38:	e7b9      	b.n	800fdae <_strtod_l+0x2c6>
 800fe3a:	2a6e      	cmp	r2, #110	; 0x6e
 800fe3c:	e7db      	b.n	800fdf6 <_strtod_l+0x30e>
 800fe3e:	4990      	ldr	r1, [pc, #576]	; (8010080 <_strtod_l+0x598>)
 800fe40:	a817      	add	r0, sp, #92	; 0x5c
 800fe42:	f002 f89d 	bl	8011f80 <__match>
 800fe46:	2800      	cmp	r0, #0
 800fe48:	f43f aeb0 	beq.w	800fbac <_strtod_l+0xc4>
 800fe4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fe4e:	498d      	ldr	r1, [pc, #564]	; (8010084 <_strtod_l+0x59c>)
 800fe50:	3b01      	subs	r3, #1
 800fe52:	a817      	add	r0, sp, #92	; 0x5c
 800fe54:	9317      	str	r3, [sp, #92]	; 0x5c
 800fe56:	f002 f893 	bl	8011f80 <__match>
 800fe5a:	b910      	cbnz	r0, 800fe62 <_strtod_l+0x37a>
 800fe5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fe5e:	3301      	adds	r3, #1
 800fe60:	9317      	str	r3, [sp, #92]	; 0x5c
 800fe62:	f8df b230 	ldr.w	fp, [pc, #560]	; 8010094 <_strtod_l+0x5ac>
 800fe66:	f04f 0a00 	mov.w	sl, #0
 800fe6a:	e681      	b.n	800fb70 <_strtod_l+0x88>
 800fe6c:	4886      	ldr	r0, [pc, #536]	; (8010088 <_strtod_l+0x5a0>)
 800fe6e:	f003 f94f 	bl	8013110 <nan>
 800fe72:	ec5b ab10 	vmov	sl, fp, d0
 800fe76:	e67b      	b.n	800fb70 <_strtod_l+0x88>
 800fe78:	9b05      	ldr	r3, [sp, #20]
 800fe7a:	9807      	ldr	r0, [sp, #28]
 800fe7c:	1af3      	subs	r3, r6, r3
 800fe7e:	2f00      	cmp	r7, #0
 800fe80:	bf08      	it	eq
 800fe82:	462f      	moveq	r7, r5
 800fe84:	2d10      	cmp	r5, #16
 800fe86:	9306      	str	r3, [sp, #24]
 800fe88:	46a8      	mov	r8, r5
 800fe8a:	bfa8      	it	ge
 800fe8c:	f04f 0810 	movge.w	r8, #16
 800fe90:	f7f0 fb40 	bl	8000514 <__aeabi_ui2d>
 800fe94:	2d09      	cmp	r5, #9
 800fe96:	4682      	mov	sl, r0
 800fe98:	468b      	mov	fp, r1
 800fe9a:	dd13      	ble.n	800fec4 <_strtod_l+0x3dc>
 800fe9c:	4b7b      	ldr	r3, [pc, #492]	; (801008c <_strtod_l+0x5a4>)
 800fe9e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fea2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fea6:	f7f0 fbaf 	bl	8000608 <__aeabi_dmul>
 800feaa:	4682      	mov	sl, r0
 800feac:	4648      	mov	r0, r9
 800feae:	468b      	mov	fp, r1
 800feb0:	f7f0 fb30 	bl	8000514 <__aeabi_ui2d>
 800feb4:	4602      	mov	r2, r0
 800feb6:	460b      	mov	r3, r1
 800feb8:	4650      	mov	r0, sl
 800feba:	4659      	mov	r1, fp
 800febc:	f7f0 f9ee 	bl	800029c <__adddf3>
 800fec0:	4682      	mov	sl, r0
 800fec2:	468b      	mov	fp, r1
 800fec4:	2d0f      	cmp	r5, #15
 800fec6:	dc38      	bgt.n	800ff3a <_strtod_l+0x452>
 800fec8:	9b06      	ldr	r3, [sp, #24]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	f43f ae50 	beq.w	800fb70 <_strtod_l+0x88>
 800fed0:	dd24      	ble.n	800ff1c <_strtod_l+0x434>
 800fed2:	2b16      	cmp	r3, #22
 800fed4:	dc0b      	bgt.n	800feee <_strtod_l+0x406>
 800fed6:	496d      	ldr	r1, [pc, #436]	; (801008c <_strtod_l+0x5a4>)
 800fed8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fedc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fee0:	4652      	mov	r2, sl
 800fee2:	465b      	mov	r3, fp
 800fee4:	f7f0 fb90 	bl	8000608 <__aeabi_dmul>
 800fee8:	4682      	mov	sl, r0
 800feea:	468b      	mov	fp, r1
 800feec:	e640      	b.n	800fb70 <_strtod_l+0x88>
 800feee:	9a06      	ldr	r2, [sp, #24]
 800fef0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800fef4:	4293      	cmp	r3, r2
 800fef6:	db20      	blt.n	800ff3a <_strtod_l+0x452>
 800fef8:	4c64      	ldr	r4, [pc, #400]	; (801008c <_strtod_l+0x5a4>)
 800fefa:	f1c5 050f 	rsb	r5, r5, #15
 800fefe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ff02:	4652      	mov	r2, sl
 800ff04:	465b      	mov	r3, fp
 800ff06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff0a:	f7f0 fb7d 	bl	8000608 <__aeabi_dmul>
 800ff0e:	9b06      	ldr	r3, [sp, #24]
 800ff10:	1b5d      	subs	r5, r3, r5
 800ff12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ff16:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ff1a:	e7e3      	b.n	800fee4 <_strtod_l+0x3fc>
 800ff1c:	9b06      	ldr	r3, [sp, #24]
 800ff1e:	3316      	adds	r3, #22
 800ff20:	db0b      	blt.n	800ff3a <_strtod_l+0x452>
 800ff22:	9b05      	ldr	r3, [sp, #20]
 800ff24:	1b9e      	subs	r6, r3, r6
 800ff26:	4b59      	ldr	r3, [pc, #356]	; (801008c <_strtod_l+0x5a4>)
 800ff28:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ff2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ff30:	4650      	mov	r0, sl
 800ff32:	4659      	mov	r1, fp
 800ff34:	f7f0 fc92 	bl	800085c <__aeabi_ddiv>
 800ff38:	e7d6      	b.n	800fee8 <_strtod_l+0x400>
 800ff3a:	9b06      	ldr	r3, [sp, #24]
 800ff3c:	eba5 0808 	sub.w	r8, r5, r8
 800ff40:	4498      	add	r8, r3
 800ff42:	f1b8 0f00 	cmp.w	r8, #0
 800ff46:	dd74      	ble.n	8010032 <_strtod_l+0x54a>
 800ff48:	f018 030f 	ands.w	r3, r8, #15
 800ff4c:	d00a      	beq.n	800ff64 <_strtod_l+0x47c>
 800ff4e:	494f      	ldr	r1, [pc, #316]	; (801008c <_strtod_l+0x5a4>)
 800ff50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ff54:	4652      	mov	r2, sl
 800ff56:	465b      	mov	r3, fp
 800ff58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff5c:	f7f0 fb54 	bl	8000608 <__aeabi_dmul>
 800ff60:	4682      	mov	sl, r0
 800ff62:	468b      	mov	fp, r1
 800ff64:	f038 080f 	bics.w	r8, r8, #15
 800ff68:	d04f      	beq.n	801000a <_strtod_l+0x522>
 800ff6a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ff6e:	dd22      	ble.n	800ffb6 <_strtod_l+0x4ce>
 800ff70:	2500      	movs	r5, #0
 800ff72:	462e      	mov	r6, r5
 800ff74:	9507      	str	r5, [sp, #28]
 800ff76:	9505      	str	r5, [sp, #20]
 800ff78:	2322      	movs	r3, #34	; 0x22
 800ff7a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8010094 <_strtod_l+0x5ac>
 800ff7e:	6023      	str	r3, [r4, #0]
 800ff80:	f04f 0a00 	mov.w	sl, #0
 800ff84:	9b07      	ldr	r3, [sp, #28]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	f43f adf2 	beq.w	800fb70 <_strtod_l+0x88>
 800ff8c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ff8e:	4620      	mov	r0, r4
 800ff90:	f002 f970 	bl	8012274 <_Bfree>
 800ff94:	9905      	ldr	r1, [sp, #20]
 800ff96:	4620      	mov	r0, r4
 800ff98:	f002 f96c 	bl	8012274 <_Bfree>
 800ff9c:	4631      	mov	r1, r6
 800ff9e:	4620      	mov	r0, r4
 800ffa0:	f002 f968 	bl	8012274 <_Bfree>
 800ffa4:	9907      	ldr	r1, [sp, #28]
 800ffa6:	4620      	mov	r0, r4
 800ffa8:	f002 f964 	bl	8012274 <_Bfree>
 800ffac:	4629      	mov	r1, r5
 800ffae:	4620      	mov	r0, r4
 800ffb0:	f002 f960 	bl	8012274 <_Bfree>
 800ffb4:	e5dc      	b.n	800fb70 <_strtod_l+0x88>
 800ffb6:	4b36      	ldr	r3, [pc, #216]	; (8010090 <_strtod_l+0x5a8>)
 800ffb8:	9304      	str	r3, [sp, #16]
 800ffba:	2300      	movs	r3, #0
 800ffbc:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ffc0:	4650      	mov	r0, sl
 800ffc2:	4659      	mov	r1, fp
 800ffc4:	4699      	mov	r9, r3
 800ffc6:	f1b8 0f01 	cmp.w	r8, #1
 800ffca:	dc21      	bgt.n	8010010 <_strtod_l+0x528>
 800ffcc:	b10b      	cbz	r3, 800ffd2 <_strtod_l+0x4ea>
 800ffce:	4682      	mov	sl, r0
 800ffd0:	468b      	mov	fp, r1
 800ffd2:	4b2f      	ldr	r3, [pc, #188]	; (8010090 <_strtod_l+0x5a8>)
 800ffd4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ffd8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ffdc:	4652      	mov	r2, sl
 800ffde:	465b      	mov	r3, fp
 800ffe0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ffe4:	f7f0 fb10 	bl	8000608 <__aeabi_dmul>
 800ffe8:	4b2a      	ldr	r3, [pc, #168]	; (8010094 <_strtod_l+0x5ac>)
 800ffea:	460a      	mov	r2, r1
 800ffec:	400b      	ands	r3, r1
 800ffee:	492a      	ldr	r1, [pc, #168]	; (8010098 <_strtod_l+0x5b0>)
 800fff0:	428b      	cmp	r3, r1
 800fff2:	4682      	mov	sl, r0
 800fff4:	d8bc      	bhi.n	800ff70 <_strtod_l+0x488>
 800fff6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fffa:	428b      	cmp	r3, r1
 800fffc:	bf86      	itte	hi
 800fffe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801009c <_strtod_l+0x5b4>
 8010002:	f04f 3aff 	movhi.w	sl, #4294967295
 8010006:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801000a:	2300      	movs	r3, #0
 801000c:	9304      	str	r3, [sp, #16]
 801000e:	e084      	b.n	801011a <_strtod_l+0x632>
 8010010:	f018 0f01 	tst.w	r8, #1
 8010014:	d005      	beq.n	8010022 <_strtod_l+0x53a>
 8010016:	9b04      	ldr	r3, [sp, #16]
 8010018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801001c:	f7f0 faf4 	bl	8000608 <__aeabi_dmul>
 8010020:	2301      	movs	r3, #1
 8010022:	9a04      	ldr	r2, [sp, #16]
 8010024:	3208      	adds	r2, #8
 8010026:	f109 0901 	add.w	r9, r9, #1
 801002a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801002e:	9204      	str	r2, [sp, #16]
 8010030:	e7c9      	b.n	800ffc6 <_strtod_l+0x4de>
 8010032:	d0ea      	beq.n	801000a <_strtod_l+0x522>
 8010034:	f1c8 0800 	rsb	r8, r8, #0
 8010038:	f018 020f 	ands.w	r2, r8, #15
 801003c:	d00a      	beq.n	8010054 <_strtod_l+0x56c>
 801003e:	4b13      	ldr	r3, [pc, #76]	; (801008c <_strtod_l+0x5a4>)
 8010040:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010044:	4650      	mov	r0, sl
 8010046:	4659      	mov	r1, fp
 8010048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801004c:	f7f0 fc06 	bl	800085c <__aeabi_ddiv>
 8010050:	4682      	mov	sl, r0
 8010052:	468b      	mov	fp, r1
 8010054:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010058:	d0d7      	beq.n	801000a <_strtod_l+0x522>
 801005a:	f1b8 0f1f 	cmp.w	r8, #31
 801005e:	dd1f      	ble.n	80100a0 <_strtod_l+0x5b8>
 8010060:	2500      	movs	r5, #0
 8010062:	462e      	mov	r6, r5
 8010064:	9507      	str	r5, [sp, #28]
 8010066:	9505      	str	r5, [sp, #20]
 8010068:	2322      	movs	r3, #34	; 0x22
 801006a:	f04f 0a00 	mov.w	sl, #0
 801006e:	f04f 0b00 	mov.w	fp, #0
 8010072:	6023      	str	r3, [r4, #0]
 8010074:	e786      	b.n	800ff84 <_strtod_l+0x49c>
 8010076:	bf00      	nop
 8010078:	08014171 	.word	0x08014171
 801007c:	080141b4 	.word	0x080141b4
 8010080:	08014169 	.word	0x08014169
 8010084:	080142f4 	.word	0x080142f4
 8010088:	08014608 	.word	0x08014608
 801008c:	080144e8 	.word	0x080144e8
 8010090:	080144c0 	.word	0x080144c0
 8010094:	7ff00000 	.word	0x7ff00000
 8010098:	7ca00000 	.word	0x7ca00000
 801009c:	7fefffff 	.word	0x7fefffff
 80100a0:	f018 0310 	ands.w	r3, r8, #16
 80100a4:	bf18      	it	ne
 80100a6:	236a      	movne	r3, #106	; 0x6a
 80100a8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8010458 <_strtod_l+0x970>
 80100ac:	9304      	str	r3, [sp, #16]
 80100ae:	4650      	mov	r0, sl
 80100b0:	4659      	mov	r1, fp
 80100b2:	2300      	movs	r3, #0
 80100b4:	f018 0f01 	tst.w	r8, #1
 80100b8:	d004      	beq.n	80100c4 <_strtod_l+0x5dc>
 80100ba:	e9d9 2300 	ldrd	r2, r3, [r9]
 80100be:	f7f0 faa3 	bl	8000608 <__aeabi_dmul>
 80100c2:	2301      	movs	r3, #1
 80100c4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80100c8:	f109 0908 	add.w	r9, r9, #8
 80100cc:	d1f2      	bne.n	80100b4 <_strtod_l+0x5cc>
 80100ce:	b10b      	cbz	r3, 80100d4 <_strtod_l+0x5ec>
 80100d0:	4682      	mov	sl, r0
 80100d2:	468b      	mov	fp, r1
 80100d4:	9b04      	ldr	r3, [sp, #16]
 80100d6:	b1c3      	cbz	r3, 801010a <_strtod_l+0x622>
 80100d8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80100dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	4659      	mov	r1, fp
 80100e4:	dd11      	ble.n	801010a <_strtod_l+0x622>
 80100e6:	2b1f      	cmp	r3, #31
 80100e8:	f340 8124 	ble.w	8010334 <_strtod_l+0x84c>
 80100ec:	2b34      	cmp	r3, #52	; 0x34
 80100ee:	bfde      	ittt	le
 80100f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80100f4:	f04f 33ff 	movle.w	r3, #4294967295
 80100f8:	fa03 f202 	lslle.w	r2, r3, r2
 80100fc:	f04f 0a00 	mov.w	sl, #0
 8010100:	bfcc      	ite	gt
 8010102:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010106:	ea02 0b01 	andle.w	fp, r2, r1
 801010a:	2200      	movs	r2, #0
 801010c:	2300      	movs	r3, #0
 801010e:	4650      	mov	r0, sl
 8010110:	4659      	mov	r1, fp
 8010112:	f7f0 fce1 	bl	8000ad8 <__aeabi_dcmpeq>
 8010116:	2800      	cmp	r0, #0
 8010118:	d1a2      	bne.n	8010060 <_strtod_l+0x578>
 801011a:	9b07      	ldr	r3, [sp, #28]
 801011c:	9300      	str	r3, [sp, #0]
 801011e:	9908      	ldr	r1, [sp, #32]
 8010120:	462b      	mov	r3, r5
 8010122:	463a      	mov	r2, r7
 8010124:	4620      	mov	r0, r4
 8010126:	f002 f90d 	bl	8012344 <__s2b>
 801012a:	9007      	str	r0, [sp, #28]
 801012c:	2800      	cmp	r0, #0
 801012e:	f43f af1f 	beq.w	800ff70 <_strtod_l+0x488>
 8010132:	9b05      	ldr	r3, [sp, #20]
 8010134:	1b9e      	subs	r6, r3, r6
 8010136:	9b06      	ldr	r3, [sp, #24]
 8010138:	2b00      	cmp	r3, #0
 801013a:	bfb4      	ite	lt
 801013c:	4633      	movlt	r3, r6
 801013e:	2300      	movge	r3, #0
 8010140:	930c      	str	r3, [sp, #48]	; 0x30
 8010142:	9b06      	ldr	r3, [sp, #24]
 8010144:	2500      	movs	r5, #0
 8010146:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801014a:	9312      	str	r3, [sp, #72]	; 0x48
 801014c:	462e      	mov	r6, r5
 801014e:	9b07      	ldr	r3, [sp, #28]
 8010150:	4620      	mov	r0, r4
 8010152:	6859      	ldr	r1, [r3, #4]
 8010154:	f002 f84e 	bl	80121f4 <_Balloc>
 8010158:	9005      	str	r0, [sp, #20]
 801015a:	2800      	cmp	r0, #0
 801015c:	f43f af0c 	beq.w	800ff78 <_strtod_l+0x490>
 8010160:	9b07      	ldr	r3, [sp, #28]
 8010162:	691a      	ldr	r2, [r3, #16]
 8010164:	3202      	adds	r2, #2
 8010166:	f103 010c 	add.w	r1, r3, #12
 801016a:	0092      	lsls	r2, r2, #2
 801016c:	300c      	adds	r0, #12
 801016e:	f7fe fc57 	bl	800ea20 <memcpy>
 8010172:	ec4b ab10 	vmov	d0, sl, fp
 8010176:	aa1a      	add	r2, sp, #104	; 0x68
 8010178:	a919      	add	r1, sp, #100	; 0x64
 801017a:	4620      	mov	r0, r4
 801017c:	f002 fc28 	bl	80129d0 <__d2b>
 8010180:	ec4b ab18 	vmov	d8, sl, fp
 8010184:	9018      	str	r0, [sp, #96]	; 0x60
 8010186:	2800      	cmp	r0, #0
 8010188:	f43f aef6 	beq.w	800ff78 <_strtod_l+0x490>
 801018c:	2101      	movs	r1, #1
 801018e:	4620      	mov	r0, r4
 8010190:	f002 f972 	bl	8012478 <__i2b>
 8010194:	4606      	mov	r6, r0
 8010196:	2800      	cmp	r0, #0
 8010198:	f43f aeee 	beq.w	800ff78 <_strtod_l+0x490>
 801019c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801019e:	9904      	ldr	r1, [sp, #16]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	bfab      	itete	ge
 80101a4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80101a6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80101a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80101aa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80101ae:	bfac      	ite	ge
 80101b0:	eb03 0902 	addge.w	r9, r3, r2
 80101b4:	1ad7      	sublt	r7, r2, r3
 80101b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80101b8:	eba3 0801 	sub.w	r8, r3, r1
 80101bc:	4490      	add	r8, r2
 80101be:	4ba1      	ldr	r3, [pc, #644]	; (8010444 <_strtod_l+0x95c>)
 80101c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80101c4:	4598      	cmp	r8, r3
 80101c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80101ca:	f280 80c7 	bge.w	801035c <_strtod_l+0x874>
 80101ce:	eba3 0308 	sub.w	r3, r3, r8
 80101d2:	2b1f      	cmp	r3, #31
 80101d4:	eba2 0203 	sub.w	r2, r2, r3
 80101d8:	f04f 0101 	mov.w	r1, #1
 80101dc:	f300 80b1 	bgt.w	8010342 <_strtod_l+0x85a>
 80101e0:	fa01 f303 	lsl.w	r3, r1, r3
 80101e4:	930d      	str	r3, [sp, #52]	; 0x34
 80101e6:	2300      	movs	r3, #0
 80101e8:	9308      	str	r3, [sp, #32]
 80101ea:	eb09 0802 	add.w	r8, r9, r2
 80101ee:	9b04      	ldr	r3, [sp, #16]
 80101f0:	45c1      	cmp	r9, r8
 80101f2:	4417      	add	r7, r2
 80101f4:	441f      	add	r7, r3
 80101f6:	464b      	mov	r3, r9
 80101f8:	bfa8      	it	ge
 80101fa:	4643      	movge	r3, r8
 80101fc:	42bb      	cmp	r3, r7
 80101fe:	bfa8      	it	ge
 8010200:	463b      	movge	r3, r7
 8010202:	2b00      	cmp	r3, #0
 8010204:	bfc2      	ittt	gt
 8010206:	eba8 0803 	subgt.w	r8, r8, r3
 801020a:	1aff      	subgt	r7, r7, r3
 801020c:	eba9 0903 	subgt.w	r9, r9, r3
 8010210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010212:	2b00      	cmp	r3, #0
 8010214:	dd17      	ble.n	8010246 <_strtod_l+0x75e>
 8010216:	4631      	mov	r1, r6
 8010218:	461a      	mov	r2, r3
 801021a:	4620      	mov	r0, r4
 801021c:	f002 f9ec 	bl	80125f8 <__pow5mult>
 8010220:	4606      	mov	r6, r0
 8010222:	2800      	cmp	r0, #0
 8010224:	f43f aea8 	beq.w	800ff78 <_strtod_l+0x490>
 8010228:	4601      	mov	r1, r0
 801022a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801022c:	4620      	mov	r0, r4
 801022e:	f002 f939 	bl	80124a4 <__multiply>
 8010232:	900b      	str	r0, [sp, #44]	; 0x2c
 8010234:	2800      	cmp	r0, #0
 8010236:	f43f ae9f 	beq.w	800ff78 <_strtod_l+0x490>
 801023a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801023c:	4620      	mov	r0, r4
 801023e:	f002 f819 	bl	8012274 <_Bfree>
 8010242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010244:	9318      	str	r3, [sp, #96]	; 0x60
 8010246:	f1b8 0f00 	cmp.w	r8, #0
 801024a:	f300 808c 	bgt.w	8010366 <_strtod_l+0x87e>
 801024e:	9b06      	ldr	r3, [sp, #24]
 8010250:	2b00      	cmp	r3, #0
 8010252:	dd08      	ble.n	8010266 <_strtod_l+0x77e>
 8010254:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010256:	9905      	ldr	r1, [sp, #20]
 8010258:	4620      	mov	r0, r4
 801025a:	f002 f9cd 	bl	80125f8 <__pow5mult>
 801025e:	9005      	str	r0, [sp, #20]
 8010260:	2800      	cmp	r0, #0
 8010262:	f43f ae89 	beq.w	800ff78 <_strtod_l+0x490>
 8010266:	2f00      	cmp	r7, #0
 8010268:	dd08      	ble.n	801027c <_strtod_l+0x794>
 801026a:	9905      	ldr	r1, [sp, #20]
 801026c:	463a      	mov	r2, r7
 801026e:	4620      	mov	r0, r4
 8010270:	f002 fa1c 	bl	80126ac <__lshift>
 8010274:	9005      	str	r0, [sp, #20]
 8010276:	2800      	cmp	r0, #0
 8010278:	f43f ae7e 	beq.w	800ff78 <_strtod_l+0x490>
 801027c:	f1b9 0f00 	cmp.w	r9, #0
 8010280:	dd08      	ble.n	8010294 <_strtod_l+0x7ac>
 8010282:	4631      	mov	r1, r6
 8010284:	464a      	mov	r2, r9
 8010286:	4620      	mov	r0, r4
 8010288:	f002 fa10 	bl	80126ac <__lshift>
 801028c:	4606      	mov	r6, r0
 801028e:	2800      	cmp	r0, #0
 8010290:	f43f ae72 	beq.w	800ff78 <_strtod_l+0x490>
 8010294:	9a05      	ldr	r2, [sp, #20]
 8010296:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010298:	4620      	mov	r0, r4
 801029a:	f002 fa93 	bl	80127c4 <__mdiff>
 801029e:	4605      	mov	r5, r0
 80102a0:	2800      	cmp	r0, #0
 80102a2:	f43f ae69 	beq.w	800ff78 <_strtod_l+0x490>
 80102a6:	68c3      	ldr	r3, [r0, #12]
 80102a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80102aa:	2300      	movs	r3, #0
 80102ac:	60c3      	str	r3, [r0, #12]
 80102ae:	4631      	mov	r1, r6
 80102b0:	f002 fa6c 	bl	801278c <__mcmp>
 80102b4:	2800      	cmp	r0, #0
 80102b6:	da60      	bge.n	801037a <_strtod_l+0x892>
 80102b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102ba:	ea53 030a 	orrs.w	r3, r3, sl
 80102be:	f040 8082 	bne.w	80103c6 <_strtod_l+0x8de>
 80102c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d17d      	bne.n	80103c6 <_strtod_l+0x8de>
 80102ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80102ce:	0d1b      	lsrs	r3, r3, #20
 80102d0:	051b      	lsls	r3, r3, #20
 80102d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80102d6:	d976      	bls.n	80103c6 <_strtod_l+0x8de>
 80102d8:	696b      	ldr	r3, [r5, #20]
 80102da:	b913      	cbnz	r3, 80102e2 <_strtod_l+0x7fa>
 80102dc:	692b      	ldr	r3, [r5, #16]
 80102de:	2b01      	cmp	r3, #1
 80102e0:	dd71      	ble.n	80103c6 <_strtod_l+0x8de>
 80102e2:	4629      	mov	r1, r5
 80102e4:	2201      	movs	r2, #1
 80102e6:	4620      	mov	r0, r4
 80102e8:	f002 f9e0 	bl	80126ac <__lshift>
 80102ec:	4631      	mov	r1, r6
 80102ee:	4605      	mov	r5, r0
 80102f0:	f002 fa4c 	bl	801278c <__mcmp>
 80102f4:	2800      	cmp	r0, #0
 80102f6:	dd66      	ble.n	80103c6 <_strtod_l+0x8de>
 80102f8:	9904      	ldr	r1, [sp, #16]
 80102fa:	4a53      	ldr	r2, [pc, #332]	; (8010448 <_strtod_l+0x960>)
 80102fc:	465b      	mov	r3, fp
 80102fe:	2900      	cmp	r1, #0
 8010300:	f000 8081 	beq.w	8010406 <_strtod_l+0x91e>
 8010304:	ea02 010b 	and.w	r1, r2, fp
 8010308:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801030c:	dc7b      	bgt.n	8010406 <_strtod_l+0x91e>
 801030e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010312:	f77f aea9 	ble.w	8010068 <_strtod_l+0x580>
 8010316:	4b4d      	ldr	r3, [pc, #308]	; (801044c <_strtod_l+0x964>)
 8010318:	4650      	mov	r0, sl
 801031a:	4659      	mov	r1, fp
 801031c:	2200      	movs	r2, #0
 801031e:	f7f0 f973 	bl	8000608 <__aeabi_dmul>
 8010322:	460b      	mov	r3, r1
 8010324:	4303      	orrs	r3, r0
 8010326:	bf08      	it	eq
 8010328:	2322      	moveq	r3, #34	; 0x22
 801032a:	4682      	mov	sl, r0
 801032c:	468b      	mov	fp, r1
 801032e:	bf08      	it	eq
 8010330:	6023      	streq	r3, [r4, #0]
 8010332:	e62b      	b.n	800ff8c <_strtod_l+0x4a4>
 8010334:	f04f 32ff 	mov.w	r2, #4294967295
 8010338:	fa02 f303 	lsl.w	r3, r2, r3
 801033c:	ea03 0a0a 	and.w	sl, r3, sl
 8010340:	e6e3      	b.n	801010a <_strtod_l+0x622>
 8010342:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8010346:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801034a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801034e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8010352:	fa01 f308 	lsl.w	r3, r1, r8
 8010356:	9308      	str	r3, [sp, #32]
 8010358:	910d      	str	r1, [sp, #52]	; 0x34
 801035a:	e746      	b.n	80101ea <_strtod_l+0x702>
 801035c:	2300      	movs	r3, #0
 801035e:	9308      	str	r3, [sp, #32]
 8010360:	2301      	movs	r3, #1
 8010362:	930d      	str	r3, [sp, #52]	; 0x34
 8010364:	e741      	b.n	80101ea <_strtod_l+0x702>
 8010366:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010368:	4642      	mov	r2, r8
 801036a:	4620      	mov	r0, r4
 801036c:	f002 f99e 	bl	80126ac <__lshift>
 8010370:	9018      	str	r0, [sp, #96]	; 0x60
 8010372:	2800      	cmp	r0, #0
 8010374:	f47f af6b 	bne.w	801024e <_strtod_l+0x766>
 8010378:	e5fe      	b.n	800ff78 <_strtod_l+0x490>
 801037a:	465f      	mov	r7, fp
 801037c:	d16e      	bne.n	801045c <_strtod_l+0x974>
 801037e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010380:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010384:	b342      	cbz	r2, 80103d8 <_strtod_l+0x8f0>
 8010386:	4a32      	ldr	r2, [pc, #200]	; (8010450 <_strtod_l+0x968>)
 8010388:	4293      	cmp	r3, r2
 801038a:	d128      	bne.n	80103de <_strtod_l+0x8f6>
 801038c:	9b04      	ldr	r3, [sp, #16]
 801038e:	4651      	mov	r1, sl
 8010390:	b1eb      	cbz	r3, 80103ce <_strtod_l+0x8e6>
 8010392:	4b2d      	ldr	r3, [pc, #180]	; (8010448 <_strtod_l+0x960>)
 8010394:	403b      	ands	r3, r7
 8010396:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801039a:	f04f 32ff 	mov.w	r2, #4294967295
 801039e:	d819      	bhi.n	80103d4 <_strtod_l+0x8ec>
 80103a0:	0d1b      	lsrs	r3, r3, #20
 80103a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80103a6:	fa02 f303 	lsl.w	r3, r2, r3
 80103aa:	4299      	cmp	r1, r3
 80103ac:	d117      	bne.n	80103de <_strtod_l+0x8f6>
 80103ae:	4b29      	ldr	r3, [pc, #164]	; (8010454 <_strtod_l+0x96c>)
 80103b0:	429f      	cmp	r7, r3
 80103b2:	d102      	bne.n	80103ba <_strtod_l+0x8d2>
 80103b4:	3101      	adds	r1, #1
 80103b6:	f43f addf 	beq.w	800ff78 <_strtod_l+0x490>
 80103ba:	4b23      	ldr	r3, [pc, #140]	; (8010448 <_strtod_l+0x960>)
 80103bc:	403b      	ands	r3, r7
 80103be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80103c2:	f04f 0a00 	mov.w	sl, #0
 80103c6:	9b04      	ldr	r3, [sp, #16]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d1a4      	bne.n	8010316 <_strtod_l+0x82e>
 80103cc:	e5de      	b.n	800ff8c <_strtod_l+0x4a4>
 80103ce:	f04f 33ff 	mov.w	r3, #4294967295
 80103d2:	e7ea      	b.n	80103aa <_strtod_l+0x8c2>
 80103d4:	4613      	mov	r3, r2
 80103d6:	e7e8      	b.n	80103aa <_strtod_l+0x8c2>
 80103d8:	ea53 030a 	orrs.w	r3, r3, sl
 80103dc:	d08c      	beq.n	80102f8 <_strtod_l+0x810>
 80103de:	9b08      	ldr	r3, [sp, #32]
 80103e0:	b1db      	cbz	r3, 801041a <_strtod_l+0x932>
 80103e2:	423b      	tst	r3, r7
 80103e4:	d0ef      	beq.n	80103c6 <_strtod_l+0x8de>
 80103e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103e8:	9a04      	ldr	r2, [sp, #16]
 80103ea:	4650      	mov	r0, sl
 80103ec:	4659      	mov	r1, fp
 80103ee:	b1c3      	cbz	r3, 8010422 <_strtod_l+0x93a>
 80103f0:	f7ff fb5e 	bl	800fab0 <sulp>
 80103f4:	4602      	mov	r2, r0
 80103f6:	460b      	mov	r3, r1
 80103f8:	ec51 0b18 	vmov	r0, r1, d8
 80103fc:	f7ef ff4e 	bl	800029c <__adddf3>
 8010400:	4682      	mov	sl, r0
 8010402:	468b      	mov	fp, r1
 8010404:	e7df      	b.n	80103c6 <_strtod_l+0x8de>
 8010406:	4013      	ands	r3, r2
 8010408:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801040c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010410:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010414:	f04f 3aff 	mov.w	sl, #4294967295
 8010418:	e7d5      	b.n	80103c6 <_strtod_l+0x8de>
 801041a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801041c:	ea13 0f0a 	tst.w	r3, sl
 8010420:	e7e0      	b.n	80103e4 <_strtod_l+0x8fc>
 8010422:	f7ff fb45 	bl	800fab0 <sulp>
 8010426:	4602      	mov	r2, r0
 8010428:	460b      	mov	r3, r1
 801042a:	ec51 0b18 	vmov	r0, r1, d8
 801042e:	f7ef ff33 	bl	8000298 <__aeabi_dsub>
 8010432:	2200      	movs	r2, #0
 8010434:	2300      	movs	r3, #0
 8010436:	4682      	mov	sl, r0
 8010438:	468b      	mov	fp, r1
 801043a:	f7f0 fb4d 	bl	8000ad8 <__aeabi_dcmpeq>
 801043e:	2800      	cmp	r0, #0
 8010440:	d0c1      	beq.n	80103c6 <_strtod_l+0x8de>
 8010442:	e611      	b.n	8010068 <_strtod_l+0x580>
 8010444:	fffffc02 	.word	0xfffffc02
 8010448:	7ff00000 	.word	0x7ff00000
 801044c:	39500000 	.word	0x39500000
 8010450:	000fffff 	.word	0x000fffff
 8010454:	7fefffff 	.word	0x7fefffff
 8010458:	080141c8 	.word	0x080141c8
 801045c:	4631      	mov	r1, r6
 801045e:	4628      	mov	r0, r5
 8010460:	f002 fb12 	bl	8012a88 <__ratio>
 8010464:	ec59 8b10 	vmov	r8, r9, d0
 8010468:	ee10 0a10 	vmov	r0, s0
 801046c:	2200      	movs	r2, #0
 801046e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010472:	4649      	mov	r1, r9
 8010474:	f7f0 fb44 	bl	8000b00 <__aeabi_dcmple>
 8010478:	2800      	cmp	r0, #0
 801047a:	d07a      	beq.n	8010572 <_strtod_l+0xa8a>
 801047c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801047e:	2b00      	cmp	r3, #0
 8010480:	d04a      	beq.n	8010518 <_strtod_l+0xa30>
 8010482:	4b95      	ldr	r3, [pc, #596]	; (80106d8 <_strtod_l+0xbf0>)
 8010484:	2200      	movs	r2, #0
 8010486:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801048a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80106d8 <_strtod_l+0xbf0>
 801048e:	f04f 0800 	mov.w	r8, #0
 8010492:	4b92      	ldr	r3, [pc, #584]	; (80106dc <_strtod_l+0xbf4>)
 8010494:	403b      	ands	r3, r7
 8010496:	930d      	str	r3, [sp, #52]	; 0x34
 8010498:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801049a:	4b91      	ldr	r3, [pc, #580]	; (80106e0 <_strtod_l+0xbf8>)
 801049c:	429a      	cmp	r2, r3
 801049e:	f040 80b0 	bne.w	8010602 <_strtod_l+0xb1a>
 80104a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80104a6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80104aa:	ec4b ab10 	vmov	d0, sl, fp
 80104ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80104b2:	f002 fa11 	bl	80128d8 <__ulp>
 80104b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80104ba:	ec53 2b10 	vmov	r2, r3, d0
 80104be:	f7f0 f8a3 	bl	8000608 <__aeabi_dmul>
 80104c2:	4652      	mov	r2, sl
 80104c4:	465b      	mov	r3, fp
 80104c6:	f7ef fee9 	bl	800029c <__adddf3>
 80104ca:	460b      	mov	r3, r1
 80104cc:	4983      	ldr	r1, [pc, #524]	; (80106dc <_strtod_l+0xbf4>)
 80104ce:	4a85      	ldr	r2, [pc, #532]	; (80106e4 <_strtod_l+0xbfc>)
 80104d0:	4019      	ands	r1, r3
 80104d2:	4291      	cmp	r1, r2
 80104d4:	4682      	mov	sl, r0
 80104d6:	d960      	bls.n	801059a <_strtod_l+0xab2>
 80104d8:	ee18 3a90 	vmov	r3, s17
 80104dc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80104e0:	4293      	cmp	r3, r2
 80104e2:	d104      	bne.n	80104ee <_strtod_l+0xa06>
 80104e4:	ee18 3a10 	vmov	r3, s16
 80104e8:	3301      	adds	r3, #1
 80104ea:	f43f ad45 	beq.w	800ff78 <_strtod_l+0x490>
 80104ee:	f8df b200 	ldr.w	fp, [pc, #512]	; 80106f0 <_strtod_l+0xc08>
 80104f2:	f04f 3aff 	mov.w	sl, #4294967295
 80104f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80104f8:	4620      	mov	r0, r4
 80104fa:	f001 febb 	bl	8012274 <_Bfree>
 80104fe:	9905      	ldr	r1, [sp, #20]
 8010500:	4620      	mov	r0, r4
 8010502:	f001 feb7 	bl	8012274 <_Bfree>
 8010506:	4631      	mov	r1, r6
 8010508:	4620      	mov	r0, r4
 801050a:	f001 feb3 	bl	8012274 <_Bfree>
 801050e:	4629      	mov	r1, r5
 8010510:	4620      	mov	r0, r4
 8010512:	f001 feaf 	bl	8012274 <_Bfree>
 8010516:	e61a      	b.n	801014e <_strtod_l+0x666>
 8010518:	f1ba 0f00 	cmp.w	sl, #0
 801051c:	d11b      	bne.n	8010556 <_strtod_l+0xa6e>
 801051e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010522:	b9f3      	cbnz	r3, 8010562 <_strtod_l+0xa7a>
 8010524:	4b6c      	ldr	r3, [pc, #432]	; (80106d8 <_strtod_l+0xbf0>)
 8010526:	2200      	movs	r2, #0
 8010528:	4640      	mov	r0, r8
 801052a:	4649      	mov	r1, r9
 801052c:	f7f0 fade 	bl	8000aec <__aeabi_dcmplt>
 8010530:	b9d0      	cbnz	r0, 8010568 <_strtod_l+0xa80>
 8010532:	4640      	mov	r0, r8
 8010534:	4649      	mov	r1, r9
 8010536:	4b6c      	ldr	r3, [pc, #432]	; (80106e8 <_strtod_l+0xc00>)
 8010538:	2200      	movs	r2, #0
 801053a:	f7f0 f865 	bl	8000608 <__aeabi_dmul>
 801053e:	4680      	mov	r8, r0
 8010540:	4689      	mov	r9, r1
 8010542:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010546:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801054a:	9315      	str	r3, [sp, #84]	; 0x54
 801054c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010550:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010554:	e79d      	b.n	8010492 <_strtod_l+0x9aa>
 8010556:	f1ba 0f01 	cmp.w	sl, #1
 801055a:	d102      	bne.n	8010562 <_strtod_l+0xa7a>
 801055c:	2f00      	cmp	r7, #0
 801055e:	f43f ad83 	beq.w	8010068 <_strtod_l+0x580>
 8010562:	4b62      	ldr	r3, [pc, #392]	; (80106ec <_strtod_l+0xc04>)
 8010564:	2200      	movs	r2, #0
 8010566:	e78e      	b.n	8010486 <_strtod_l+0x99e>
 8010568:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80106e8 <_strtod_l+0xc00>
 801056c:	f04f 0800 	mov.w	r8, #0
 8010570:	e7e7      	b.n	8010542 <_strtod_l+0xa5a>
 8010572:	4b5d      	ldr	r3, [pc, #372]	; (80106e8 <_strtod_l+0xc00>)
 8010574:	4640      	mov	r0, r8
 8010576:	4649      	mov	r1, r9
 8010578:	2200      	movs	r2, #0
 801057a:	f7f0 f845 	bl	8000608 <__aeabi_dmul>
 801057e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010580:	4680      	mov	r8, r0
 8010582:	4689      	mov	r9, r1
 8010584:	b933      	cbnz	r3, 8010594 <_strtod_l+0xaac>
 8010586:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801058a:	900e      	str	r0, [sp, #56]	; 0x38
 801058c:	930f      	str	r3, [sp, #60]	; 0x3c
 801058e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8010592:	e7dd      	b.n	8010550 <_strtod_l+0xa68>
 8010594:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8010598:	e7f9      	b.n	801058e <_strtod_l+0xaa6>
 801059a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801059e:	9b04      	ldr	r3, [sp, #16]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d1a8      	bne.n	80104f6 <_strtod_l+0xa0e>
 80105a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80105a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80105aa:	0d1b      	lsrs	r3, r3, #20
 80105ac:	051b      	lsls	r3, r3, #20
 80105ae:	429a      	cmp	r2, r3
 80105b0:	d1a1      	bne.n	80104f6 <_strtod_l+0xa0e>
 80105b2:	4640      	mov	r0, r8
 80105b4:	4649      	mov	r1, r9
 80105b6:	f7f0 fb87 	bl	8000cc8 <__aeabi_d2lz>
 80105ba:	f7ef fff7 	bl	80005ac <__aeabi_l2d>
 80105be:	4602      	mov	r2, r0
 80105c0:	460b      	mov	r3, r1
 80105c2:	4640      	mov	r0, r8
 80105c4:	4649      	mov	r1, r9
 80105c6:	f7ef fe67 	bl	8000298 <__aeabi_dsub>
 80105ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80105cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80105d0:	ea43 030a 	orr.w	r3, r3, sl
 80105d4:	4313      	orrs	r3, r2
 80105d6:	4680      	mov	r8, r0
 80105d8:	4689      	mov	r9, r1
 80105da:	d055      	beq.n	8010688 <_strtod_l+0xba0>
 80105dc:	a336      	add	r3, pc, #216	; (adr r3, 80106b8 <_strtod_l+0xbd0>)
 80105de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105e2:	f7f0 fa83 	bl	8000aec <__aeabi_dcmplt>
 80105e6:	2800      	cmp	r0, #0
 80105e8:	f47f acd0 	bne.w	800ff8c <_strtod_l+0x4a4>
 80105ec:	a334      	add	r3, pc, #208	; (adr r3, 80106c0 <_strtod_l+0xbd8>)
 80105ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105f2:	4640      	mov	r0, r8
 80105f4:	4649      	mov	r1, r9
 80105f6:	f7f0 fa97 	bl	8000b28 <__aeabi_dcmpgt>
 80105fa:	2800      	cmp	r0, #0
 80105fc:	f43f af7b 	beq.w	80104f6 <_strtod_l+0xa0e>
 8010600:	e4c4      	b.n	800ff8c <_strtod_l+0x4a4>
 8010602:	9b04      	ldr	r3, [sp, #16]
 8010604:	b333      	cbz	r3, 8010654 <_strtod_l+0xb6c>
 8010606:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010608:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801060c:	d822      	bhi.n	8010654 <_strtod_l+0xb6c>
 801060e:	a32e      	add	r3, pc, #184	; (adr r3, 80106c8 <_strtod_l+0xbe0>)
 8010610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010614:	4640      	mov	r0, r8
 8010616:	4649      	mov	r1, r9
 8010618:	f7f0 fa72 	bl	8000b00 <__aeabi_dcmple>
 801061c:	b1a0      	cbz	r0, 8010648 <_strtod_l+0xb60>
 801061e:	4649      	mov	r1, r9
 8010620:	4640      	mov	r0, r8
 8010622:	f7f0 fac9 	bl	8000bb8 <__aeabi_d2uiz>
 8010626:	2801      	cmp	r0, #1
 8010628:	bf38      	it	cc
 801062a:	2001      	movcc	r0, #1
 801062c:	f7ef ff72 	bl	8000514 <__aeabi_ui2d>
 8010630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010632:	4680      	mov	r8, r0
 8010634:	4689      	mov	r9, r1
 8010636:	bb23      	cbnz	r3, 8010682 <_strtod_l+0xb9a>
 8010638:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801063c:	9010      	str	r0, [sp, #64]	; 0x40
 801063e:	9311      	str	r3, [sp, #68]	; 0x44
 8010640:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010644:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801064a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801064c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010650:	1a9b      	subs	r3, r3, r2
 8010652:	9309      	str	r3, [sp, #36]	; 0x24
 8010654:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010658:	eeb0 0a48 	vmov.f32	s0, s16
 801065c:	eef0 0a68 	vmov.f32	s1, s17
 8010660:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010664:	f002 f938 	bl	80128d8 <__ulp>
 8010668:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801066c:	ec53 2b10 	vmov	r2, r3, d0
 8010670:	f7ef ffca 	bl	8000608 <__aeabi_dmul>
 8010674:	ec53 2b18 	vmov	r2, r3, d8
 8010678:	f7ef fe10 	bl	800029c <__adddf3>
 801067c:	4682      	mov	sl, r0
 801067e:	468b      	mov	fp, r1
 8010680:	e78d      	b.n	801059e <_strtod_l+0xab6>
 8010682:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8010686:	e7db      	b.n	8010640 <_strtod_l+0xb58>
 8010688:	a311      	add	r3, pc, #68	; (adr r3, 80106d0 <_strtod_l+0xbe8>)
 801068a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801068e:	f7f0 fa2d 	bl	8000aec <__aeabi_dcmplt>
 8010692:	e7b2      	b.n	80105fa <_strtod_l+0xb12>
 8010694:	2300      	movs	r3, #0
 8010696:	930a      	str	r3, [sp, #40]	; 0x28
 8010698:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801069a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801069c:	6013      	str	r3, [r2, #0]
 801069e:	f7ff ba6b 	b.w	800fb78 <_strtod_l+0x90>
 80106a2:	2a65      	cmp	r2, #101	; 0x65
 80106a4:	f43f ab5f 	beq.w	800fd66 <_strtod_l+0x27e>
 80106a8:	2a45      	cmp	r2, #69	; 0x45
 80106aa:	f43f ab5c 	beq.w	800fd66 <_strtod_l+0x27e>
 80106ae:	2301      	movs	r3, #1
 80106b0:	f7ff bb94 	b.w	800fddc <_strtod_l+0x2f4>
 80106b4:	f3af 8000 	nop.w
 80106b8:	94a03595 	.word	0x94a03595
 80106bc:	3fdfffff 	.word	0x3fdfffff
 80106c0:	35afe535 	.word	0x35afe535
 80106c4:	3fe00000 	.word	0x3fe00000
 80106c8:	ffc00000 	.word	0xffc00000
 80106cc:	41dfffff 	.word	0x41dfffff
 80106d0:	94a03595 	.word	0x94a03595
 80106d4:	3fcfffff 	.word	0x3fcfffff
 80106d8:	3ff00000 	.word	0x3ff00000
 80106dc:	7ff00000 	.word	0x7ff00000
 80106e0:	7fe00000 	.word	0x7fe00000
 80106e4:	7c9fffff 	.word	0x7c9fffff
 80106e8:	3fe00000 	.word	0x3fe00000
 80106ec:	bff00000 	.word	0xbff00000
 80106f0:	7fefffff 	.word	0x7fefffff

080106f4 <_strtod_r>:
 80106f4:	4b01      	ldr	r3, [pc, #4]	; (80106fc <_strtod_r+0x8>)
 80106f6:	f7ff b9f7 	b.w	800fae8 <_strtod_l>
 80106fa:	bf00      	nop
 80106fc:	20000114 	.word	0x20000114

08010700 <strtod>:
 8010700:	460a      	mov	r2, r1
 8010702:	4601      	mov	r1, r0
 8010704:	4802      	ldr	r0, [pc, #8]	; (8010710 <strtod+0x10>)
 8010706:	4b03      	ldr	r3, [pc, #12]	; (8010714 <strtod+0x14>)
 8010708:	6800      	ldr	r0, [r0, #0]
 801070a:	f7ff b9ed 	b.w	800fae8 <_strtod_l>
 801070e:	bf00      	nop
 8010710:	200000ac 	.word	0x200000ac
 8010714:	20000114 	.word	0x20000114

08010718 <_strtol_l.constprop.0>:
 8010718:	2b01      	cmp	r3, #1
 801071a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801071e:	d001      	beq.n	8010724 <_strtol_l.constprop.0+0xc>
 8010720:	2b24      	cmp	r3, #36	; 0x24
 8010722:	d906      	bls.n	8010732 <_strtol_l.constprop.0+0x1a>
 8010724:	f7fe f942 	bl	800e9ac <__errno>
 8010728:	2316      	movs	r3, #22
 801072a:	6003      	str	r3, [r0, #0]
 801072c:	2000      	movs	r0, #0
 801072e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010732:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010818 <_strtol_l.constprop.0+0x100>
 8010736:	460d      	mov	r5, r1
 8010738:	462e      	mov	r6, r5
 801073a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801073e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8010742:	f017 0708 	ands.w	r7, r7, #8
 8010746:	d1f7      	bne.n	8010738 <_strtol_l.constprop.0+0x20>
 8010748:	2c2d      	cmp	r4, #45	; 0x2d
 801074a:	d132      	bne.n	80107b2 <_strtol_l.constprop.0+0x9a>
 801074c:	782c      	ldrb	r4, [r5, #0]
 801074e:	2701      	movs	r7, #1
 8010750:	1cb5      	adds	r5, r6, #2
 8010752:	2b00      	cmp	r3, #0
 8010754:	d05b      	beq.n	801080e <_strtol_l.constprop.0+0xf6>
 8010756:	2b10      	cmp	r3, #16
 8010758:	d109      	bne.n	801076e <_strtol_l.constprop.0+0x56>
 801075a:	2c30      	cmp	r4, #48	; 0x30
 801075c:	d107      	bne.n	801076e <_strtol_l.constprop.0+0x56>
 801075e:	782c      	ldrb	r4, [r5, #0]
 8010760:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010764:	2c58      	cmp	r4, #88	; 0x58
 8010766:	d14d      	bne.n	8010804 <_strtol_l.constprop.0+0xec>
 8010768:	786c      	ldrb	r4, [r5, #1]
 801076a:	2310      	movs	r3, #16
 801076c:	3502      	adds	r5, #2
 801076e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010772:	f108 38ff 	add.w	r8, r8, #4294967295
 8010776:	f04f 0c00 	mov.w	ip, #0
 801077a:	fbb8 f9f3 	udiv	r9, r8, r3
 801077e:	4666      	mov	r6, ip
 8010780:	fb03 8a19 	mls	sl, r3, r9, r8
 8010784:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010788:	f1be 0f09 	cmp.w	lr, #9
 801078c:	d816      	bhi.n	80107bc <_strtol_l.constprop.0+0xa4>
 801078e:	4674      	mov	r4, lr
 8010790:	42a3      	cmp	r3, r4
 8010792:	dd24      	ble.n	80107de <_strtol_l.constprop.0+0xc6>
 8010794:	f1bc 0f00 	cmp.w	ip, #0
 8010798:	db1e      	blt.n	80107d8 <_strtol_l.constprop.0+0xc0>
 801079a:	45b1      	cmp	r9, r6
 801079c:	d31c      	bcc.n	80107d8 <_strtol_l.constprop.0+0xc0>
 801079e:	d101      	bne.n	80107a4 <_strtol_l.constprop.0+0x8c>
 80107a0:	45a2      	cmp	sl, r4
 80107a2:	db19      	blt.n	80107d8 <_strtol_l.constprop.0+0xc0>
 80107a4:	fb06 4603 	mla	r6, r6, r3, r4
 80107a8:	f04f 0c01 	mov.w	ip, #1
 80107ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80107b0:	e7e8      	b.n	8010784 <_strtol_l.constprop.0+0x6c>
 80107b2:	2c2b      	cmp	r4, #43	; 0x2b
 80107b4:	bf04      	itt	eq
 80107b6:	782c      	ldrbeq	r4, [r5, #0]
 80107b8:	1cb5      	addeq	r5, r6, #2
 80107ba:	e7ca      	b.n	8010752 <_strtol_l.constprop.0+0x3a>
 80107bc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80107c0:	f1be 0f19 	cmp.w	lr, #25
 80107c4:	d801      	bhi.n	80107ca <_strtol_l.constprop.0+0xb2>
 80107c6:	3c37      	subs	r4, #55	; 0x37
 80107c8:	e7e2      	b.n	8010790 <_strtol_l.constprop.0+0x78>
 80107ca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80107ce:	f1be 0f19 	cmp.w	lr, #25
 80107d2:	d804      	bhi.n	80107de <_strtol_l.constprop.0+0xc6>
 80107d4:	3c57      	subs	r4, #87	; 0x57
 80107d6:	e7db      	b.n	8010790 <_strtol_l.constprop.0+0x78>
 80107d8:	f04f 3cff 	mov.w	ip, #4294967295
 80107dc:	e7e6      	b.n	80107ac <_strtol_l.constprop.0+0x94>
 80107de:	f1bc 0f00 	cmp.w	ip, #0
 80107e2:	da05      	bge.n	80107f0 <_strtol_l.constprop.0+0xd8>
 80107e4:	2322      	movs	r3, #34	; 0x22
 80107e6:	6003      	str	r3, [r0, #0]
 80107e8:	4646      	mov	r6, r8
 80107ea:	b942      	cbnz	r2, 80107fe <_strtol_l.constprop.0+0xe6>
 80107ec:	4630      	mov	r0, r6
 80107ee:	e79e      	b.n	801072e <_strtol_l.constprop.0+0x16>
 80107f0:	b107      	cbz	r7, 80107f4 <_strtol_l.constprop.0+0xdc>
 80107f2:	4276      	negs	r6, r6
 80107f4:	2a00      	cmp	r2, #0
 80107f6:	d0f9      	beq.n	80107ec <_strtol_l.constprop.0+0xd4>
 80107f8:	f1bc 0f00 	cmp.w	ip, #0
 80107fc:	d000      	beq.n	8010800 <_strtol_l.constprop.0+0xe8>
 80107fe:	1e69      	subs	r1, r5, #1
 8010800:	6011      	str	r1, [r2, #0]
 8010802:	e7f3      	b.n	80107ec <_strtol_l.constprop.0+0xd4>
 8010804:	2430      	movs	r4, #48	; 0x30
 8010806:	2b00      	cmp	r3, #0
 8010808:	d1b1      	bne.n	801076e <_strtol_l.constprop.0+0x56>
 801080a:	2308      	movs	r3, #8
 801080c:	e7af      	b.n	801076e <_strtol_l.constprop.0+0x56>
 801080e:	2c30      	cmp	r4, #48	; 0x30
 8010810:	d0a5      	beq.n	801075e <_strtol_l.constprop.0+0x46>
 8010812:	230a      	movs	r3, #10
 8010814:	e7ab      	b.n	801076e <_strtol_l.constprop.0+0x56>
 8010816:	bf00      	nop
 8010818:	080141f1 	.word	0x080141f1

0801081c <_strtol_r>:
 801081c:	f7ff bf7c 	b.w	8010718 <_strtol_l.constprop.0>

08010820 <__swbuf_r>:
 8010820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010822:	460e      	mov	r6, r1
 8010824:	4614      	mov	r4, r2
 8010826:	4605      	mov	r5, r0
 8010828:	b118      	cbz	r0, 8010832 <__swbuf_r+0x12>
 801082a:	6983      	ldr	r3, [r0, #24]
 801082c:	b90b      	cbnz	r3, 8010832 <__swbuf_r+0x12>
 801082e:	f001 f84b 	bl	80118c8 <__sinit>
 8010832:	4b21      	ldr	r3, [pc, #132]	; (80108b8 <__swbuf_r+0x98>)
 8010834:	429c      	cmp	r4, r3
 8010836:	d12b      	bne.n	8010890 <__swbuf_r+0x70>
 8010838:	686c      	ldr	r4, [r5, #4]
 801083a:	69a3      	ldr	r3, [r4, #24]
 801083c:	60a3      	str	r3, [r4, #8]
 801083e:	89a3      	ldrh	r3, [r4, #12]
 8010840:	071a      	lsls	r2, r3, #28
 8010842:	d52f      	bpl.n	80108a4 <__swbuf_r+0x84>
 8010844:	6923      	ldr	r3, [r4, #16]
 8010846:	b36b      	cbz	r3, 80108a4 <__swbuf_r+0x84>
 8010848:	6923      	ldr	r3, [r4, #16]
 801084a:	6820      	ldr	r0, [r4, #0]
 801084c:	1ac0      	subs	r0, r0, r3
 801084e:	6963      	ldr	r3, [r4, #20]
 8010850:	b2f6      	uxtb	r6, r6
 8010852:	4283      	cmp	r3, r0
 8010854:	4637      	mov	r7, r6
 8010856:	dc04      	bgt.n	8010862 <__swbuf_r+0x42>
 8010858:	4621      	mov	r1, r4
 801085a:	4628      	mov	r0, r5
 801085c:	f000 ffa0 	bl	80117a0 <_fflush_r>
 8010860:	bb30      	cbnz	r0, 80108b0 <__swbuf_r+0x90>
 8010862:	68a3      	ldr	r3, [r4, #8]
 8010864:	3b01      	subs	r3, #1
 8010866:	60a3      	str	r3, [r4, #8]
 8010868:	6823      	ldr	r3, [r4, #0]
 801086a:	1c5a      	adds	r2, r3, #1
 801086c:	6022      	str	r2, [r4, #0]
 801086e:	701e      	strb	r6, [r3, #0]
 8010870:	6963      	ldr	r3, [r4, #20]
 8010872:	3001      	adds	r0, #1
 8010874:	4283      	cmp	r3, r0
 8010876:	d004      	beq.n	8010882 <__swbuf_r+0x62>
 8010878:	89a3      	ldrh	r3, [r4, #12]
 801087a:	07db      	lsls	r3, r3, #31
 801087c:	d506      	bpl.n	801088c <__swbuf_r+0x6c>
 801087e:	2e0a      	cmp	r6, #10
 8010880:	d104      	bne.n	801088c <__swbuf_r+0x6c>
 8010882:	4621      	mov	r1, r4
 8010884:	4628      	mov	r0, r5
 8010886:	f000 ff8b 	bl	80117a0 <_fflush_r>
 801088a:	b988      	cbnz	r0, 80108b0 <__swbuf_r+0x90>
 801088c:	4638      	mov	r0, r7
 801088e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010890:	4b0a      	ldr	r3, [pc, #40]	; (80108bc <__swbuf_r+0x9c>)
 8010892:	429c      	cmp	r4, r3
 8010894:	d101      	bne.n	801089a <__swbuf_r+0x7a>
 8010896:	68ac      	ldr	r4, [r5, #8]
 8010898:	e7cf      	b.n	801083a <__swbuf_r+0x1a>
 801089a:	4b09      	ldr	r3, [pc, #36]	; (80108c0 <__swbuf_r+0xa0>)
 801089c:	429c      	cmp	r4, r3
 801089e:	bf08      	it	eq
 80108a0:	68ec      	ldreq	r4, [r5, #12]
 80108a2:	e7ca      	b.n	801083a <__swbuf_r+0x1a>
 80108a4:	4621      	mov	r1, r4
 80108a6:	4628      	mov	r0, r5
 80108a8:	f000 f80c 	bl	80108c4 <__swsetup_r>
 80108ac:	2800      	cmp	r0, #0
 80108ae:	d0cb      	beq.n	8010848 <__swbuf_r+0x28>
 80108b0:	f04f 37ff 	mov.w	r7, #4294967295
 80108b4:	e7ea      	b.n	801088c <__swbuf_r+0x6c>
 80108b6:	bf00      	nop
 80108b8:	080143a4 	.word	0x080143a4
 80108bc:	080143c4 	.word	0x080143c4
 80108c0:	08014384 	.word	0x08014384

080108c4 <__swsetup_r>:
 80108c4:	4b32      	ldr	r3, [pc, #200]	; (8010990 <__swsetup_r+0xcc>)
 80108c6:	b570      	push	{r4, r5, r6, lr}
 80108c8:	681d      	ldr	r5, [r3, #0]
 80108ca:	4606      	mov	r6, r0
 80108cc:	460c      	mov	r4, r1
 80108ce:	b125      	cbz	r5, 80108da <__swsetup_r+0x16>
 80108d0:	69ab      	ldr	r3, [r5, #24]
 80108d2:	b913      	cbnz	r3, 80108da <__swsetup_r+0x16>
 80108d4:	4628      	mov	r0, r5
 80108d6:	f000 fff7 	bl	80118c8 <__sinit>
 80108da:	4b2e      	ldr	r3, [pc, #184]	; (8010994 <__swsetup_r+0xd0>)
 80108dc:	429c      	cmp	r4, r3
 80108de:	d10f      	bne.n	8010900 <__swsetup_r+0x3c>
 80108e0:	686c      	ldr	r4, [r5, #4]
 80108e2:	89a3      	ldrh	r3, [r4, #12]
 80108e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80108e8:	0719      	lsls	r1, r3, #28
 80108ea:	d42c      	bmi.n	8010946 <__swsetup_r+0x82>
 80108ec:	06dd      	lsls	r5, r3, #27
 80108ee:	d411      	bmi.n	8010914 <__swsetup_r+0x50>
 80108f0:	2309      	movs	r3, #9
 80108f2:	6033      	str	r3, [r6, #0]
 80108f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80108f8:	81a3      	strh	r3, [r4, #12]
 80108fa:	f04f 30ff 	mov.w	r0, #4294967295
 80108fe:	e03e      	b.n	801097e <__swsetup_r+0xba>
 8010900:	4b25      	ldr	r3, [pc, #148]	; (8010998 <__swsetup_r+0xd4>)
 8010902:	429c      	cmp	r4, r3
 8010904:	d101      	bne.n	801090a <__swsetup_r+0x46>
 8010906:	68ac      	ldr	r4, [r5, #8]
 8010908:	e7eb      	b.n	80108e2 <__swsetup_r+0x1e>
 801090a:	4b24      	ldr	r3, [pc, #144]	; (801099c <__swsetup_r+0xd8>)
 801090c:	429c      	cmp	r4, r3
 801090e:	bf08      	it	eq
 8010910:	68ec      	ldreq	r4, [r5, #12]
 8010912:	e7e6      	b.n	80108e2 <__swsetup_r+0x1e>
 8010914:	0758      	lsls	r0, r3, #29
 8010916:	d512      	bpl.n	801093e <__swsetup_r+0x7a>
 8010918:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801091a:	b141      	cbz	r1, 801092e <__swsetup_r+0x6a>
 801091c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010920:	4299      	cmp	r1, r3
 8010922:	d002      	beq.n	801092a <__swsetup_r+0x66>
 8010924:	4630      	mov	r0, r6
 8010926:	f7fe f891 	bl	800ea4c <_free_r>
 801092a:	2300      	movs	r3, #0
 801092c:	6363      	str	r3, [r4, #52]	; 0x34
 801092e:	89a3      	ldrh	r3, [r4, #12]
 8010930:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010934:	81a3      	strh	r3, [r4, #12]
 8010936:	2300      	movs	r3, #0
 8010938:	6063      	str	r3, [r4, #4]
 801093a:	6923      	ldr	r3, [r4, #16]
 801093c:	6023      	str	r3, [r4, #0]
 801093e:	89a3      	ldrh	r3, [r4, #12]
 8010940:	f043 0308 	orr.w	r3, r3, #8
 8010944:	81a3      	strh	r3, [r4, #12]
 8010946:	6923      	ldr	r3, [r4, #16]
 8010948:	b94b      	cbnz	r3, 801095e <__swsetup_r+0x9a>
 801094a:	89a3      	ldrh	r3, [r4, #12]
 801094c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010954:	d003      	beq.n	801095e <__swsetup_r+0x9a>
 8010956:	4621      	mov	r1, r4
 8010958:	4630      	mov	r0, r6
 801095a:	f001 fbed 	bl	8012138 <__smakebuf_r>
 801095e:	89a0      	ldrh	r0, [r4, #12]
 8010960:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010964:	f010 0301 	ands.w	r3, r0, #1
 8010968:	d00a      	beq.n	8010980 <__swsetup_r+0xbc>
 801096a:	2300      	movs	r3, #0
 801096c:	60a3      	str	r3, [r4, #8]
 801096e:	6963      	ldr	r3, [r4, #20]
 8010970:	425b      	negs	r3, r3
 8010972:	61a3      	str	r3, [r4, #24]
 8010974:	6923      	ldr	r3, [r4, #16]
 8010976:	b943      	cbnz	r3, 801098a <__swsetup_r+0xc6>
 8010978:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801097c:	d1ba      	bne.n	80108f4 <__swsetup_r+0x30>
 801097e:	bd70      	pop	{r4, r5, r6, pc}
 8010980:	0781      	lsls	r1, r0, #30
 8010982:	bf58      	it	pl
 8010984:	6963      	ldrpl	r3, [r4, #20]
 8010986:	60a3      	str	r3, [r4, #8]
 8010988:	e7f4      	b.n	8010974 <__swsetup_r+0xb0>
 801098a:	2000      	movs	r0, #0
 801098c:	e7f7      	b.n	801097e <__swsetup_r+0xba>
 801098e:	bf00      	nop
 8010990:	200000ac 	.word	0x200000ac
 8010994:	080143a4 	.word	0x080143a4
 8010998:	080143c4 	.word	0x080143c4
 801099c:	08014384 	.word	0x08014384

080109a0 <quorem>:
 80109a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109a4:	6903      	ldr	r3, [r0, #16]
 80109a6:	690c      	ldr	r4, [r1, #16]
 80109a8:	42a3      	cmp	r3, r4
 80109aa:	4607      	mov	r7, r0
 80109ac:	f2c0 8081 	blt.w	8010ab2 <quorem+0x112>
 80109b0:	3c01      	subs	r4, #1
 80109b2:	f101 0814 	add.w	r8, r1, #20
 80109b6:	f100 0514 	add.w	r5, r0, #20
 80109ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80109be:	9301      	str	r3, [sp, #4]
 80109c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80109c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80109c8:	3301      	adds	r3, #1
 80109ca:	429a      	cmp	r2, r3
 80109cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80109d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80109d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80109d8:	d331      	bcc.n	8010a3e <quorem+0x9e>
 80109da:	f04f 0e00 	mov.w	lr, #0
 80109de:	4640      	mov	r0, r8
 80109e0:	46ac      	mov	ip, r5
 80109e2:	46f2      	mov	sl, lr
 80109e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80109e8:	b293      	uxth	r3, r2
 80109ea:	fb06 e303 	mla	r3, r6, r3, lr
 80109ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80109f2:	b29b      	uxth	r3, r3
 80109f4:	ebaa 0303 	sub.w	r3, sl, r3
 80109f8:	f8dc a000 	ldr.w	sl, [ip]
 80109fc:	0c12      	lsrs	r2, r2, #16
 80109fe:	fa13 f38a 	uxtah	r3, r3, sl
 8010a02:	fb06 e202 	mla	r2, r6, r2, lr
 8010a06:	9300      	str	r3, [sp, #0]
 8010a08:	9b00      	ldr	r3, [sp, #0]
 8010a0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010a0e:	b292      	uxth	r2, r2
 8010a10:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010a14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010a18:	f8bd 3000 	ldrh.w	r3, [sp]
 8010a1c:	4581      	cmp	r9, r0
 8010a1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a22:	f84c 3b04 	str.w	r3, [ip], #4
 8010a26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010a2a:	d2db      	bcs.n	80109e4 <quorem+0x44>
 8010a2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8010a30:	b92b      	cbnz	r3, 8010a3e <quorem+0x9e>
 8010a32:	9b01      	ldr	r3, [sp, #4]
 8010a34:	3b04      	subs	r3, #4
 8010a36:	429d      	cmp	r5, r3
 8010a38:	461a      	mov	r2, r3
 8010a3a:	d32e      	bcc.n	8010a9a <quorem+0xfa>
 8010a3c:	613c      	str	r4, [r7, #16]
 8010a3e:	4638      	mov	r0, r7
 8010a40:	f001 fea4 	bl	801278c <__mcmp>
 8010a44:	2800      	cmp	r0, #0
 8010a46:	db24      	blt.n	8010a92 <quorem+0xf2>
 8010a48:	3601      	adds	r6, #1
 8010a4a:	4628      	mov	r0, r5
 8010a4c:	f04f 0c00 	mov.w	ip, #0
 8010a50:	f858 2b04 	ldr.w	r2, [r8], #4
 8010a54:	f8d0 e000 	ldr.w	lr, [r0]
 8010a58:	b293      	uxth	r3, r2
 8010a5a:	ebac 0303 	sub.w	r3, ip, r3
 8010a5e:	0c12      	lsrs	r2, r2, #16
 8010a60:	fa13 f38e 	uxtah	r3, r3, lr
 8010a64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010a68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010a6c:	b29b      	uxth	r3, r3
 8010a6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a72:	45c1      	cmp	r9, r8
 8010a74:	f840 3b04 	str.w	r3, [r0], #4
 8010a78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010a7c:	d2e8      	bcs.n	8010a50 <quorem+0xb0>
 8010a7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010a82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010a86:	b922      	cbnz	r2, 8010a92 <quorem+0xf2>
 8010a88:	3b04      	subs	r3, #4
 8010a8a:	429d      	cmp	r5, r3
 8010a8c:	461a      	mov	r2, r3
 8010a8e:	d30a      	bcc.n	8010aa6 <quorem+0x106>
 8010a90:	613c      	str	r4, [r7, #16]
 8010a92:	4630      	mov	r0, r6
 8010a94:	b003      	add	sp, #12
 8010a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a9a:	6812      	ldr	r2, [r2, #0]
 8010a9c:	3b04      	subs	r3, #4
 8010a9e:	2a00      	cmp	r2, #0
 8010aa0:	d1cc      	bne.n	8010a3c <quorem+0x9c>
 8010aa2:	3c01      	subs	r4, #1
 8010aa4:	e7c7      	b.n	8010a36 <quorem+0x96>
 8010aa6:	6812      	ldr	r2, [r2, #0]
 8010aa8:	3b04      	subs	r3, #4
 8010aaa:	2a00      	cmp	r2, #0
 8010aac:	d1f0      	bne.n	8010a90 <quorem+0xf0>
 8010aae:	3c01      	subs	r4, #1
 8010ab0:	e7eb      	b.n	8010a8a <quorem+0xea>
 8010ab2:	2000      	movs	r0, #0
 8010ab4:	e7ee      	b.n	8010a94 <quorem+0xf4>
	...

08010ab8 <_dtoa_r>:
 8010ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010abc:	ed2d 8b04 	vpush	{d8-d9}
 8010ac0:	ec57 6b10 	vmov	r6, r7, d0
 8010ac4:	b093      	sub	sp, #76	; 0x4c
 8010ac6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010ac8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010acc:	9106      	str	r1, [sp, #24]
 8010ace:	ee10 aa10 	vmov	sl, s0
 8010ad2:	4604      	mov	r4, r0
 8010ad4:	9209      	str	r2, [sp, #36]	; 0x24
 8010ad6:	930c      	str	r3, [sp, #48]	; 0x30
 8010ad8:	46bb      	mov	fp, r7
 8010ada:	b975      	cbnz	r5, 8010afa <_dtoa_r+0x42>
 8010adc:	2010      	movs	r0, #16
 8010ade:	f7fd ff8f 	bl	800ea00 <malloc>
 8010ae2:	4602      	mov	r2, r0
 8010ae4:	6260      	str	r0, [r4, #36]	; 0x24
 8010ae6:	b920      	cbnz	r0, 8010af2 <_dtoa_r+0x3a>
 8010ae8:	4ba7      	ldr	r3, [pc, #668]	; (8010d88 <_dtoa_r+0x2d0>)
 8010aea:	21ea      	movs	r1, #234	; 0xea
 8010aec:	48a7      	ldr	r0, [pc, #668]	; (8010d8c <_dtoa_r+0x2d4>)
 8010aee:	f002 fb79 	bl	80131e4 <__assert_func>
 8010af2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010af6:	6005      	str	r5, [r0, #0]
 8010af8:	60c5      	str	r5, [r0, #12]
 8010afa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010afc:	6819      	ldr	r1, [r3, #0]
 8010afe:	b151      	cbz	r1, 8010b16 <_dtoa_r+0x5e>
 8010b00:	685a      	ldr	r2, [r3, #4]
 8010b02:	604a      	str	r2, [r1, #4]
 8010b04:	2301      	movs	r3, #1
 8010b06:	4093      	lsls	r3, r2
 8010b08:	608b      	str	r3, [r1, #8]
 8010b0a:	4620      	mov	r0, r4
 8010b0c:	f001 fbb2 	bl	8012274 <_Bfree>
 8010b10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b12:	2200      	movs	r2, #0
 8010b14:	601a      	str	r2, [r3, #0]
 8010b16:	1e3b      	subs	r3, r7, #0
 8010b18:	bfaa      	itet	ge
 8010b1a:	2300      	movge	r3, #0
 8010b1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010b20:	f8c8 3000 	strge.w	r3, [r8]
 8010b24:	4b9a      	ldr	r3, [pc, #616]	; (8010d90 <_dtoa_r+0x2d8>)
 8010b26:	bfbc      	itt	lt
 8010b28:	2201      	movlt	r2, #1
 8010b2a:	f8c8 2000 	strlt.w	r2, [r8]
 8010b2e:	ea33 030b 	bics.w	r3, r3, fp
 8010b32:	d11b      	bne.n	8010b6c <_dtoa_r+0xb4>
 8010b34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010b36:	f242 730f 	movw	r3, #9999	; 0x270f
 8010b3a:	6013      	str	r3, [r2, #0]
 8010b3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010b40:	4333      	orrs	r3, r6
 8010b42:	f000 8592 	beq.w	801166a <_dtoa_r+0xbb2>
 8010b46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010b48:	b963      	cbnz	r3, 8010b64 <_dtoa_r+0xac>
 8010b4a:	4b92      	ldr	r3, [pc, #584]	; (8010d94 <_dtoa_r+0x2dc>)
 8010b4c:	e022      	b.n	8010b94 <_dtoa_r+0xdc>
 8010b4e:	4b92      	ldr	r3, [pc, #584]	; (8010d98 <_dtoa_r+0x2e0>)
 8010b50:	9301      	str	r3, [sp, #4]
 8010b52:	3308      	adds	r3, #8
 8010b54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010b56:	6013      	str	r3, [r2, #0]
 8010b58:	9801      	ldr	r0, [sp, #4]
 8010b5a:	b013      	add	sp, #76	; 0x4c
 8010b5c:	ecbd 8b04 	vpop	{d8-d9}
 8010b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b64:	4b8b      	ldr	r3, [pc, #556]	; (8010d94 <_dtoa_r+0x2dc>)
 8010b66:	9301      	str	r3, [sp, #4]
 8010b68:	3303      	adds	r3, #3
 8010b6a:	e7f3      	b.n	8010b54 <_dtoa_r+0x9c>
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	2300      	movs	r3, #0
 8010b70:	4650      	mov	r0, sl
 8010b72:	4659      	mov	r1, fp
 8010b74:	f7ef ffb0 	bl	8000ad8 <__aeabi_dcmpeq>
 8010b78:	ec4b ab19 	vmov	d9, sl, fp
 8010b7c:	4680      	mov	r8, r0
 8010b7e:	b158      	cbz	r0, 8010b98 <_dtoa_r+0xe0>
 8010b80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010b82:	2301      	movs	r3, #1
 8010b84:	6013      	str	r3, [r2, #0]
 8010b86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	f000 856b 	beq.w	8011664 <_dtoa_r+0xbac>
 8010b8e:	4883      	ldr	r0, [pc, #524]	; (8010d9c <_dtoa_r+0x2e4>)
 8010b90:	6018      	str	r0, [r3, #0]
 8010b92:	1e43      	subs	r3, r0, #1
 8010b94:	9301      	str	r3, [sp, #4]
 8010b96:	e7df      	b.n	8010b58 <_dtoa_r+0xa0>
 8010b98:	ec4b ab10 	vmov	d0, sl, fp
 8010b9c:	aa10      	add	r2, sp, #64	; 0x40
 8010b9e:	a911      	add	r1, sp, #68	; 0x44
 8010ba0:	4620      	mov	r0, r4
 8010ba2:	f001 ff15 	bl	80129d0 <__d2b>
 8010ba6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010baa:	ee08 0a10 	vmov	s16, r0
 8010bae:	2d00      	cmp	r5, #0
 8010bb0:	f000 8084 	beq.w	8010cbc <_dtoa_r+0x204>
 8010bb4:	ee19 3a90 	vmov	r3, s19
 8010bb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010bbc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010bc0:	4656      	mov	r6, sl
 8010bc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010bc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010bca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010bce:	4b74      	ldr	r3, [pc, #464]	; (8010da0 <_dtoa_r+0x2e8>)
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	4630      	mov	r0, r6
 8010bd4:	4639      	mov	r1, r7
 8010bd6:	f7ef fb5f 	bl	8000298 <__aeabi_dsub>
 8010bda:	a365      	add	r3, pc, #404	; (adr r3, 8010d70 <_dtoa_r+0x2b8>)
 8010bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be0:	f7ef fd12 	bl	8000608 <__aeabi_dmul>
 8010be4:	a364      	add	r3, pc, #400	; (adr r3, 8010d78 <_dtoa_r+0x2c0>)
 8010be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bea:	f7ef fb57 	bl	800029c <__adddf3>
 8010bee:	4606      	mov	r6, r0
 8010bf0:	4628      	mov	r0, r5
 8010bf2:	460f      	mov	r7, r1
 8010bf4:	f7ef fc9e 	bl	8000534 <__aeabi_i2d>
 8010bf8:	a361      	add	r3, pc, #388	; (adr r3, 8010d80 <_dtoa_r+0x2c8>)
 8010bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bfe:	f7ef fd03 	bl	8000608 <__aeabi_dmul>
 8010c02:	4602      	mov	r2, r0
 8010c04:	460b      	mov	r3, r1
 8010c06:	4630      	mov	r0, r6
 8010c08:	4639      	mov	r1, r7
 8010c0a:	f7ef fb47 	bl	800029c <__adddf3>
 8010c0e:	4606      	mov	r6, r0
 8010c10:	460f      	mov	r7, r1
 8010c12:	f7ef ffa9 	bl	8000b68 <__aeabi_d2iz>
 8010c16:	2200      	movs	r2, #0
 8010c18:	9000      	str	r0, [sp, #0]
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	4630      	mov	r0, r6
 8010c1e:	4639      	mov	r1, r7
 8010c20:	f7ef ff64 	bl	8000aec <__aeabi_dcmplt>
 8010c24:	b150      	cbz	r0, 8010c3c <_dtoa_r+0x184>
 8010c26:	9800      	ldr	r0, [sp, #0]
 8010c28:	f7ef fc84 	bl	8000534 <__aeabi_i2d>
 8010c2c:	4632      	mov	r2, r6
 8010c2e:	463b      	mov	r3, r7
 8010c30:	f7ef ff52 	bl	8000ad8 <__aeabi_dcmpeq>
 8010c34:	b910      	cbnz	r0, 8010c3c <_dtoa_r+0x184>
 8010c36:	9b00      	ldr	r3, [sp, #0]
 8010c38:	3b01      	subs	r3, #1
 8010c3a:	9300      	str	r3, [sp, #0]
 8010c3c:	9b00      	ldr	r3, [sp, #0]
 8010c3e:	2b16      	cmp	r3, #22
 8010c40:	d85a      	bhi.n	8010cf8 <_dtoa_r+0x240>
 8010c42:	9a00      	ldr	r2, [sp, #0]
 8010c44:	4b57      	ldr	r3, [pc, #348]	; (8010da4 <_dtoa_r+0x2ec>)
 8010c46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c4e:	ec51 0b19 	vmov	r0, r1, d9
 8010c52:	f7ef ff4b 	bl	8000aec <__aeabi_dcmplt>
 8010c56:	2800      	cmp	r0, #0
 8010c58:	d050      	beq.n	8010cfc <_dtoa_r+0x244>
 8010c5a:	9b00      	ldr	r3, [sp, #0]
 8010c5c:	3b01      	subs	r3, #1
 8010c5e:	9300      	str	r3, [sp, #0]
 8010c60:	2300      	movs	r3, #0
 8010c62:	930b      	str	r3, [sp, #44]	; 0x2c
 8010c64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010c66:	1b5d      	subs	r5, r3, r5
 8010c68:	1e6b      	subs	r3, r5, #1
 8010c6a:	9305      	str	r3, [sp, #20]
 8010c6c:	bf45      	ittet	mi
 8010c6e:	f1c5 0301 	rsbmi	r3, r5, #1
 8010c72:	9304      	strmi	r3, [sp, #16]
 8010c74:	2300      	movpl	r3, #0
 8010c76:	2300      	movmi	r3, #0
 8010c78:	bf4c      	ite	mi
 8010c7a:	9305      	strmi	r3, [sp, #20]
 8010c7c:	9304      	strpl	r3, [sp, #16]
 8010c7e:	9b00      	ldr	r3, [sp, #0]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	db3d      	blt.n	8010d00 <_dtoa_r+0x248>
 8010c84:	9b05      	ldr	r3, [sp, #20]
 8010c86:	9a00      	ldr	r2, [sp, #0]
 8010c88:	920a      	str	r2, [sp, #40]	; 0x28
 8010c8a:	4413      	add	r3, r2
 8010c8c:	9305      	str	r3, [sp, #20]
 8010c8e:	2300      	movs	r3, #0
 8010c90:	9307      	str	r3, [sp, #28]
 8010c92:	9b06      	ldr	r3, [sp, #24]
 8010c94:	2b09      	cmp	r3, #9
 8010c96:	f200 8089 	bhi.w	8010dac <_dtoa_r+0x2f4>
 8010c9a:	2b05      	cmp	r3, #5
 8010c9c:	bfc4      	itt	gt
 8010c9e:	3b04      	subgt	r3, #4
 8010ca0:	9306      	strgt	r3, [sp, #24]
 8010ca2:	9b06      	ldr	r3, [sp, #24]
 8010ca4:	f1a3 0302 	sub.w	r3, r3, #2
 8010ca8:	bfcc      	ite	gt
 8010caa:	2500      	movgt	r5, #0
 8010cac:	2501      	movle	r5, #1
 8010cae:	2b03      	cmp	r3, #3
 8010cb0:	f200 8087 	bhi.w	8010dc2 <_dtoa_r+0x30a>
 8010cb4:	e8df f003 	tbb	[pc, r3]
 8010cb8:	59383a2d 	.word	0x59383a2d
 8010cbc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010cc0:	441d      	add	r5, r3
 8010cc2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010cc6:	2b20      	cmp	r3, #32
 8010cc8:	bfc1      	itttt	gt
 8010cca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010cce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010cd2:	fa0b f303 	lslgt.w	r3, fp, r3
 8010cd6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010cda:	bfda      	itte	le
 8010cdc:	f1c3 0320 	rsble	r3, r3, #32
 8010ce0:	fa06 f003 	lslle.w	r0, r6, r3
 8010ce4:	4318      	orrgt	r0, r3
 8010ce6:	f7ef fc15 	bl	8000514 <__aeabi_ui2d>
 8010cea:	2301      	movs	r3, #1
 8010cec:	4606      	mov	r6, r0
 8010cee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010cf2:	3d01      	subs	r5, #1
 8010cf4:	930e      	str	r3, [sp, #56]	; 0x38
 8010cf6:	e76a      	b.n	8010bce <_dtoa_r+0x116>
 8010cf8:	2301      	movs	r3, #1
 8010cfa:	e7b2      	b.n	8010c62 <_dtoa_r+0x1aa>
 8010cfc:	900b      	str	r0, [sp, #44]	; 0x2c
 8010cfe:	e7b1      	b.n	8010c64 <_dtoa_r+0x1ac>
 8010d00:	9b04      	ldr	r3, [sp, #16]
 8010d02:	9a00      	ldr	r2, [sp, #0]
 8010d04:	1a9b      	subs	r3, r3, r2
 8010d06:	9304      	str	r3, [sp, #16]
 8010d08:	4253      	negs	r3, r2
 8010d0a:	9307      	str	r3, [sp, #28]
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8010d10:	e7bf      	b.n	8010c92 <_dtoa_r+0x1da>
 8010d12:	2300      	movs	r3, #0
 8010d14:	9308      	str	r3, [sp, #32]
 8010d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	dc55      	bgt.n	8010dc8 <_dtoa_r+0x310>
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010d22:	461a      	mov	r2, r3
 8010d24:	9209      	str	r2, [sp, #36]	; 0x24
 8010d26:	e00c      	b.n	8010d42 <_dtoa_r+0x28a>
 8010d28:	2301      	movs	r3, #1
 8010d2a:	e7f3      	b.n	8010d14 <_dtoa_r+0x25c>
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d30:	9308      	str	r3, [sp, #32]
 8010d32:	9b00      	ldr	r3, [sp, #0]
 8010d34:	4413      	add	r3, r2
 8010d36:	9302      	str	r3, [sp, #8]
 8010d38:	3301      	adds	r3, #1
 8010d3a:	2b01      	cmp	r3, #1
 8010d3c:	9303      	str	r3, [sp, #12]
 8010d3e:	bfb8      	it	lt
 8010d40:	2301      	movlt	r3, #1
 8010d42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010d44:	2200      	movs	r2, #0
 8010d46:	6042      	str	r2, [r0, #4]
 8010d48:	2204      	movs	r2, #4
 8010d4a:	f102 0614 	add.w	r6, r2, #20
 8010d4e:	429e      	cmp	r6, r3
 8010d50:	6841      	ldr	r1, [r0, #4]
 8010d52:	d93d      	bls.n	8010dd0 <_dtoa_r+0x318>
 8010d54:	4620      	mov	r0, r4
 8010d56:	f001 fa4d 	bl	80121f4 <_Balloc>
 8010d5a:	9001      	str	r0, [sp, #4]
 8010d5c:	2800      	cmp	r0, #0
 8010d5e:	d13b      	bne.n	8010dd8 <_dtoa_r+0x320>
 8010d60:	4b11      	ldr	r3, [pc, #68]	; (8010da8 <_dtoa_r+0x2f0>)
 8010d62:	4602      	mov	r2, r0
 8010d64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010d68:	e6c0      	b.n	8010aec <_dtoa_r+0x34>
 8010d6a:	2301      	movs	r3, #1
 8010d6c:	e7df      	b.n	8010d2e <_dtoa_r+0x276>
 8010d6e:	bf00      	nop
 8010d70:	636f4361 	.word	0x636f4361
 8010d74:	3fd287a7 	.word	0x3fd287a7
 8010d78:	8b60c8b3 	.word	0x8b60c8b3
 8010d7c:	3fc68a28 	.word	0x3fc68a28
 8010d80:	509f79fb 	.word	0x509f79fb
 8010d84:	3fd34413 	.word	0x3fd34413
 8010d88:	080142fe 	.word	0x080142fe
 8010d8c:	08014315 	.word	0x08014315
 8010d90:	7ff00000 	.word	0x7ff00000
 8010d94:	080142fa 	.word	0x080142fa
 8010d98:	080142f1 	.word	0x080142f1
 8010d9c:	08014175 	.word	0x08014175
 8010da0:	3ff80000 	.word	0x3ff80000
 8010da4:	080144e8 	.word	0x080144e8
 8010da8:	08014370 	.word	0x08014370
 8010dac:	2501      	movs	r5, #1
 8010dae:	2300      	movs	r3, #0
 8010db0:	9306      	str	r3, [sp, #24]
 8010db2:	9508      	str	r5, [sp, #32]
 8010db4:	f04f 33ff 	mov.w	r3, #4294967295
 8010db8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	2312      	movs	r3, #18
 8010dc0:	e7b0      	b.n	8010d24 <_dtoa_r+0x26c>
 8010dc2:	2301      	movs	r3, #1
 8010dc4:	9308      	str	r3, [sp, #32]
 8010dc6:	e7f5      	b.n	8010db4 <_dtoa_r+0x2fc>
 8010dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010dce:	e7b8      	b.n	8010d42 <_dtoa_r+0x28a>
 8010dd0:	3101      	adds	r1, #1
 8010dd2:	6041      	str	r1, [r0, #4]
 8010dd4:	0052      	lsls	r2, r2, #1
 8010dd6:	e7b8      	b.n	8010d4a <_dtoa_r+0x292>
 8010dd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010dda:	9a01      	ldr	r2, [sp, #4]
 8010ddc:	601a      	str	r2, [r3, #0]
 8010dde:	9b03      	ldr	r3, [sp, #12]
 8010de0:	2b0e      	cmp	r3, #14
 8010de2:	f200 809d 	bhi.w	8010f20 <_dtoa_r+0x468>
 8010de6:	2d00      	cmp	r5, #0
 8010de8:	f000 809a 	beq.w	8010f20 <_dtoa_r+0x468>
 8010dec:	9b00      	ldr	r3, [sp, #0]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	dd32      	ble.n	8010e58 <_dtoa_r+0x3a0>
 8010df2:	4ab7      	ldr	r2, [pc, #732]	; (80110d0 <_dtoa_r+0x618>)
 8010df4:	f003 030f 	and.w	r3, r3, #15
 8010df8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010dfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010e00:	9b00      	ldr	r3, [sp, #0]
 8010e02:	05d8      	lsls	r0, r3, #23
 8010e04:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010e08:	d516      	bpl.n	8010e38 <_dtoa_r+0x380>
 8010e0a:	4bb2      	ldr	r3, [pc, #712]	; (80110d4 <_dtoa_r+0x61c>)
 8010e0c:	ec51 0b19 	vmov	r0, r1, d9
 8010e10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010e14:	f7ef fd22 	bl	800085c <__aeabi_ddiv>
 8010e18:	f007 070f 	and.w	r7, r7, #15
 8010e1c:	4682      	mov	sl, r0
 8010e1e:	468b      	mov	fp, r1
 8010e20:	2503      	movs	r5, #3
 8010e22:	4eac      	ldr	r6, [pc, #688]	; (80110d4 <_dtoa_r+0x61c>)
 8010e24:	b957      	cbnz	r7, 8010e3c <_dtoa_r+0x384>
 8010e26:	4642      	mov	r2, r8
 8010e28:	464b      	mov	r3, r9
 8010e2a:	4650      	mov	r0, sl
 8010e2c:	4659      	mov	r1, fp
 8010e2e:	f7ef fd15 	bl	800085c <__aeabi_ddiv>
 8010e32:	4682      	mov	sl, r0
 8010e34:	468b      	mov	fp, r1
 8010e36:	e028      	b.n	8010e8a <_dtoa_r+0x3d2>
 8010e38:	2502      	movs	r5, #2
 8010e3a:	e7f2      	b.n	8010e22 <_dtoa_r+0x36a>
 8010e3c:	07f9      	lsls	r1, r7, #31
 8010e3e:	d508      	bpl.n	8010e52 <_dtoa_r+0x39a>
 8010e40:	4640      	mov	r0, r8
 8010e42:	4649      	mov	r1, r9
 8010e44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010e48:	f7ef fbde 	bl	8000608 <__aeabi_dmul>
 8010e4c:	3501      	adds	r5, #1
 8010e4e:	4680      	mov	r8, r0
 8010e50:	4689      	mov	r9, r1
 8010e52:	107f      	asrs	r7, r7, #1
 8010e54:	3608      	adds	r6, #8
 8010e56:	e7e5      	b.n	8010e24 <_dtoa_r+0x36c>
 8010e58:	f000 809b 	beq.w	8010f92 <_dtoa_r+0x4da>
 8010e5c:	9b00      	ldr	r3, [sp, #0]
 8010e5e:	4f9d      	ldr	r7, [pc, #628]	; (80110d4 <_dtoa_r+0x61c>)
 8010e60:	425e      	negs	r6, r3
 8010e62:	4b9b      	ldr	r3, [pc, #620]	; (80110d0 <_dtoa_r+0x618>)
 8010e64:	f006 020f 	and.w	r2, r6, #15
 8010e68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e70:	ec51 0b19 	vmov	r0, r1, d9
 8010e74:	f7ef fbc8 	bl	8000608 <__aeabi_dmul>
 8010e78:	1136      	asrs	r6, r6, #4
 8010e7a:	4682      	mov	sl, r0
 8010e7c:	468b      	mov	fp, r1
 8010e7e:	2300      	movs	r3, #0
 8010e80:	2502      	movs	r5, #2
 8010e82:	2e00      	cmp	r6, #0
 8010e84:	d17a      	bne.n	8010f7c <_dtoa_r+0x4c4>
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d1d3      	bne.n	8010e32 <_dtoa_r+0x37a>
 8010e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	f000 8082 	beq.w	8010f96 <_dtoa_r+0x4de>
 8010e92:	4b91      	ldr	r3, [pc, #580]	; (80110d8 <_dtoa_r+0x620>)
 8010e94:	2200      	movs	r2, #0
 8010e96:	4650      	mov	r0, sl
 8010e98:	4659      	mov	r1, fp
 8010e9a:	f7ef fe27 	bl	8000aec <__aeabi_dcmplt>
 8010e9e:	2800      	cmp	r0, #0
 8010ea0:	d079      	beq.n	8010f96 <_dtoa_r+0x4de>
 8010ea2:	9b03      	ldr	r3, [sp, #12]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d076      	beq.n	8010f96 <_dtoa_r+0x4de>
 8010ea8:	9b02      	ldr	r3, [sp, #8]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	dd36      	ble.n	8010f1c <_dtoa_r+0x464>
 8010eae:	9b00      	ldr	r3, [sp, #0]
 8010eb0:	4650      	mov	r0, sl
 8010eb2:	4659      	mov	r1, fp
 8010eb4:	1e5f      	subs	r7, r3, #1
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	4b88      	ldr	r3, [pc, #544]	; (80110dc <_dtoa_r+0x624>)
 8010eba:	f7ef fba5 	bl	8000608 <__aeabi_dmul>
 8010ebe:	9e02      	ldr	r6, [sp, #8]
 8010ec0:	4682      	mov	sl, r0
 8010ec2:	468b      	mov	fp, r1
 8010ec4:	3501      	adds	r5, #1
 8010ec6:	4628      	mov	r0, r5
 8010ec8:	f7ef fb34 	bl	8000534 <__aeabi_i2d>
 8010ecc:	4652      	mov	r2, sl
 8010ece:	465b      	mov	r3, fp
 8010ed0:	f7ef fb9a 	bl	8000608 <__aeabi_dmul>
 8010ed4:	4b82      	ldr	r3, [pc, #520]	; (80110e0 <_dtoa_r+0x628>)
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	f7ef f9e0 	bl	800029c <__adddf3>
 8010edc:	46d0      	mov	r8, sl
 8010ede:	46d9      	mov	r9, fp
 8010ee0:	4682      	mov	sl, r0
 8010ee2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010ee6:	2e00      	cmp	r6, #0
 8010ee8:	d158      	bne.n	8010f9c <_dtoa_r+0x4e4>
 8010eea:	4b7e      	ldr	r3, [pc, #504]	; (80110e4 <_dtoa_r+0x62c>)
 8010eec:	2200      	movs	r2, #0
 8010eee:	4640      	mov	r0, r8
 8010ef0:	4649      	mov	r1, r9
 8010ef2:	f7ef f9d1 	bl	8000298 <__aeabi_dsub>
 8010ef6:	4652      	mov	r2, sl
 8010ef8:	465b      	mov	r3, fp
 8010efa:	4680      	mov	r8, r0
 8010efc:	4689      	mov	r9, r1
 8010efe:	f7ef fe13 	bl	8000b28 <__aeabi_dcmpgt>
 8010f02:	2800      	cmp	r0, #0
 8010f04:	f040 8295 	bne.w	8011432 <_dtoa_r+0x97a>
 8010f08:	4652      	mov	r2, sl
 8010f0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010f0e:	4640      	mov	r0, r8
 8010f10:	4649      	mov	r1, r9
 8010f12:	f7ef fdeb 	bl	8000aec <__aeabi_dcmplt>
 8010f16:	2800      	cmp	r0, #0
 8010f18:	f040 8289 	bne.w	801142e <_dtoa_r+0x976>
 8010f1c:	ec5b ab19 	vmov	sl, fp, d9
 8010f20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	f2c0 8148 	blt.w	80111b8 <_dtoa_r+0x700>
 8010f28:	9a00      	ldr	r2, [sp, #0]
 8010f2a:	2a0e      	cmp	r2, #14
 8010f2c:	f300 8144 	bgt.w	80111b8 <_dtoa_r+0x700>
 8010f30:	4b67      	ldr	r3, [pc, #412]	; (80110d0 <_dtoa_r+0x618>)
 8010f32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010f36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	f280 80d5 	bge.w	80110ec <_dtoa_r+0x634>
 8010f42:	9b03      	ldr	r3, [sp, #12]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	f300 80d1 	bgt.w	80110ec <_dtoa_r+0x634>
 8010f4a:	f040 826f 	bne.w	801142c <_dtoa_r+0x974>
 8010f4e:	4b65      	ldr	r3, [pc, #404]	; (80110e4 <_dtoa_r+0x62c>)
 8010f50:	2200      	movs	r2, #0
 8010f52:	4640      	mov	r0, r8
 8010f54:	4649      	mov	r1, r9
 8010f56:	f7ef fb57 	bl	8000608 <__aeabi_dmul>
 8010f5a:	4652      	mov	r2, sl
 8010f5c:	465b      	mov	r3, fp
 8010f5e:	f7ef fdd9 	bl	8000b14 <__aeabi_dcmpge>
 8010f62:	9e03      	ldr	r6, [sp, #12]
 8010f64:	4637      	mov	r7, r6
 8010f66:	2800      	cmp	r0, #0
 8010f68:	f040 8245 	bne.w	80113f6 <_dtoa_r+0x93e>
 8010f6c:	9d01      	ldr	r5, [sp, #4]
 8010f6e:	2331      	movs	r3, #49	; 0x31
 8010f70:	f805 3b01 	strb.w	r3, [r5], #1
 8010f74:	9b00      	ldr	r3, [sp, #0]
 8010f76:	3301      	adds	r3, #1
 8010f78:	9300      	str	r3, [sp, #0]
 8010f7a:	e240      	b.n	80113fe <_dtoa_r+0x946>
 8010f7c:	07f2      	lsls	r2, r6, #31
 8010f7e:	d505      	bpl.n	8010f8c <_dtoa_r+0x4d4>
 8010f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010f84:	f7ef fb40 	bl	8000608 <__aeabi_dmul>
 8010f88:	3501      	adds	r5, #1
 8010f8a:	2301      	movs	r3, #1
 8010f8c:	1076      	asrs	r6, r6, #1
 8010f8e:	3708      	adds	r7, #8
 8010f90:	e777      	b.n	8010e82 <_dtoa_r+0x3ca>
 8010f92:	2502      	movs	r5, #2
 8010f94:	e779      	b.n	8010e8a <_dtoa_r+0x3d2>
 8010f96:	9f00      	ldr	r7, [sp, #0]
 8010f98:	9e03      	ldr	r6, [sp, #12]
 8010f9a:	e794      	b.n	8010ec6 <_dtoa_r+0x40e>
 8010f9c:	9901      	ldr	r1, [sp, #4]
 8010f9e:	4b4c      	ldr	r3, [pc, #304]	; (80110d0 <_dtoa_r+0x618>)
 8010fa0:	4431      	add	r1, r6
 8010fa2:	910d      	str	r1, [sp, #52]	; 0x34
 8010fa4:	9908      	ldr	r1, [sp, #32]
 8010fa6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010faa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010fae:	2900      	cmp	r1, #0
 8010fb0:	d043      	beq.n	801103a <_dtoa_r+0x582>
 8010fb2:	494d      	ldr	r1, [pc, #308]	; (80110e8 <_dtoa_r+0x630>)
 8010fb4:	2000      	movs	r0, #0
 8010fb6:	f7ef fc51 	bl	800085c <__aeabi_ddiv>
 8010fba:	4652      	mov	r2, sl
 8010fbc:	465b      	mov	r3, fp
 8010fbe:	f7ef f96b 	bl	8000298 <__aeabi_dsub>
 8010fc2:	9d01      	ldr	r5, [sp, #4]
 8010fc4:	4682      	mov	sl, r0
 8010fc6:	468b      	mov	fp, r1
 8010fc8:	4649      	mov	r1, r9
 8010fca:	4640      	mov	r0, r8
 8010fcc:	f7ef fdcc 	bl	8000b68 <__aeabi_d2iz>
 8010fd0:	4606      	mov	r6, r0
 8010fd2:	f7ef faaf 	bl	8000534 <__aeabi_i2d>
 8010fd6:	4602      	mov	r2, r0
 8010fd8:	460b      	mov	r3, r1
 8010fda:	4640      	mov	r0, r8
 8010fdc:	4649      	mov	r1, r9
 8010fde:	f7ef f95b 	bl	8000298 <__aeabi_dsub>
 8010fe2:	3630      	adds	r6, #48	; 0x30
 8010fe4:	f805 6b01 	strb.w	r6, [r5], #1
 8010fe8:	4652      	mov	r2, sl
 8010fea:	465b      	mov	r3, fp
 8010fec:	4680      	mov	r8, r0
 8010fee:	4689      	mov	r9, r1
 8010ff0:	f7ef fd7c 	bl	8000aec <__aeabi_dcmplt>
 8010ff4:	2800      	cmp	r0, #0
 8010ff6:	d163      	bne.n	80110c0 <_dtoa_r+0x608>
 8010ff8:	4642      	mov	r2, r8
 8010ffa:	464b      	mov	r3, r9
 8010ffc:	4936      	ldr	r1, [pc, #216]	; (80110d8 <_dtoa_r+0x620>)
 8010ffe:	2000      	movs	r0, #0
 8011000:	f7ef f94a 	bl	8000298 <__aeabi_dsub>
 8011004:	4652      	mov	r2, sl
 8011006:	465b      	mov	r3, fp
 8011008:	f7ef fd70 	bl	8000aec <__aeabi_dcmplt>
 801100c:	2800      	cmp	r0, #0
 801100e:	f040 80b5 	bne.w	801117c <_dtoa_r+0x6c4>
 8011012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011014:	429d      	cmp	r5, r3
 8011016:	d081      	beq.n	8010f1c <_dtoa_r+0x464>
 8011018:	4b30      	ldr	r3, [pc, #192]	; (80110dc <_dtoa_r+0x624>)
 801101a:	2200      	movs	r2, #0
 801101c:	4650      	mov	r0, sl
 801101e:	4659      	mov	r1, fp
 8011020:	f7ef faf2 	bl	8000608 <__aeabi_dmul>
 8011024:	4b2d      	ldr	r3, [pc, #180]	; (80110dc <_dtoa_r+0x624>)
 8011026:	4682      	mov	sl, r0
 8011028:	468b      	mov	fp, r1
 801102a:	4640      	mov	r0, r8
 801102c:	4649      	mov	r1, r9
 801102e:	2200      	movs	r2, #0
 8011030:	f7ef faea 	bl	8000608 <__aeabi_dmul>
 8011034:	4680      	mov	r8, r0
 8011036:	4689      	mov	r9, r1
 8011038:	e7c6      	b.n	8010fc8 <_dtoa_r+0x510>
 801103a:	4650      	mov	r0, sl
 801103c:	4659      	mov	r1, fp
 801103e:	f7ef fae3 	bl	8000608 <__aeabi_dmul>
 8011042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011044:	9d01      	ldr	r5, [sp, #4]
 8011046:	930f      	str	r3, [sp, #60]	; 0x3c
 8011048:	4682      	mov	sl, r0
 801104a:	468b      	mov	fp, r1
 801104c:	4649      	mov	r1, r9
 801104e:	4640      	mov	r0, r8
 8011050:	f7ef fd8a 	bl	8000b68 <__aeabi_d2iz>
 8011054:	4606      	mov	r6, r0
 8011056:	f7ef fa6d 	bl	8000534 <__aeabi_i2d>
 801105a:	3630      	adds	r6, #48	; 0x30
 801105c:	4602      	mov	r2, r0
 801105e:	460b      	mov	r3, r1
 8011060:	4640      	mov	r0, r8
 8011062:	4649      	mov	r1, r9
 8011064:	f7ef f918 	bl	8000298 <__aeabi_dsub>
 8011068:	f805 6b01 	strb.w	r6, [r5], #1
 801106c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801106e:	429d      	cmp	r5, r3
 8011070:	4680      	mov	r8, r0
 8011072:	4689      	mov	r9, r1
 8011074:	f04f 0200 	mov.w	r2, #0
 8011078:	d124      	bne.n	80110c4 <_dtoa_r+0x60c>
 801107a:	4b1b      	ldr	r3, [pc, #108]	; (80110e8 <_dtoa_r+0x630>)
 801107c:	4650      	mov	r0, sl
 801107e:	4659      	mov	r1, fp
 8011080:	f7ef f90c 	bl	800029c <__adddf3>
 8011084:	4602      	mov	r2, r0
 8011086:	460b      	mov	r3, r1
 8011088:	4640      	mov	r0, r8
 801108a:	4649      	mov	r1, r9
 801108c:	f7ef fd4c 	bl	8000b28 <__aeabi_dcmpgt>
 8011090:	2800      	cmp	r0, #0
 8011092:	d173      	bne.n	801117c <_dtoa_r+0x6c4>
 8011094:	4652      	mov	r2, sl
 8011096:	465b      	mov	r3, fp
 8011098:	4913      	ldr	r1, [pc, #76]	; (80110e8 <_dtoa_r+0x630>)
 801109a:	2000      	movs	r0, #0
 801109c:	f7ef f8fc 	bl	8000298 <__aeabi_dsub>
 80110a0:	4602      	mov	r2, r0
 80110a2:	460b      	mov	r3, r1
 80110a4:	4640      	mov	r0, r8
 80110a6:	4649      	mov	r1, r9
 80110a8:	f7ef fd20 	bl	8000aec <__aeabi_dcmplt>
 80110ac:	2800      	cmp	r0, #0
 80110ae:	f43f af35 	beq.w	8010f1c <_dtoa_r+0x464>
 80110b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80110b4:	1e6b      	subs	r3, r5, #1
 80110b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80110b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80110bc:	2b30      	cmp	r3, #48	; 0x30
 80110be:	d0f8      	beq.n	80110b2 <_dtoa_r+0x5fa>
 80110c0:	9700      	str	r7, [sp, #0]
 80110c2:	e049      	b.n	8011158 <_dtoa_r+0x6a0>
 80110c4:	4b05      	ldr	r3, [pc, #20]	; (80110dc <_dtoa_r+0x624>)
 80110c6:	f7ef fa9f 	bl	8000608 <__aeabi_dmul>
 80110ca:	4680      	mov	r8, r0
 80110cc:	4689      	mov	r9, r1
 80110ce:	e7bd      	b.n	801104c <_dtoa_r+0x594>
 80110d0:	080144e8 	.word	0x080144e8
 80110d4:	080144c0 	.word	0x080144c0
 80110d8:	3ff00000 	.word	0x3ff00000
 80110dc:	40240000 	.word	0x40240000
 80110e0:	401c0000 	.word	0x401c0000
 80110e4:	40140000 	.word	0x40140000
 80110e8:	3fe00000 	.word	0x3fe00000
 80110ec:	9d01      	ldr	r5, [sp, #4]
 80110ee:	4656      	mov	r6, sl
 80110f0:	465f      	mov	r7, fp
 80110f2:	4642      	mov	r2, r8
 80110f4:	464b      	mov	r3, r9
 80110f6:	4630      	mov	r0, r6
 80110f8:	4639      	mov	r1, r7
 80110fa:	f7ef fbaf 	bl	800085c <__aeabi_ddiv>
 80110fe:	f7ef fd33 	bl	8000b68 <__aeabi_d2iz>
 8011102:	4682      	mov	sl, r0
 8011104:	f7ef fa16 	bl	8000534 <__aeabi_i2d>
 8011108:	4642      	mov	r2, r8
 801110a:	464b      	mov	r3, r9
 801110c:	f7ef fa7c 	bl	8000608 <__aeabi_dmul>
 8011110:	4602      	mov	r2, r0
 8011112:	460b      	mov	r3, r1
 8011114:	4630      	mov	r0, r6
 8011116:	4639      	mov	r1, r7
 8011118:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801111c:	f7ef f8bc 	bl	8000298 <__aeabi_dsub>
 8011120:	f805 6b01 	strb.w	r6, [r5], #1
 8011124:	9e01      	ldr	r6, [sp, #4]
 8011126:	9f03      	ldr	r7, [sp, #12]
 8011128:	1bae      	subs	r6, r5, r6
 801112a:	42b7      	cmp	r7, r6
 801112c:	4602      	mov	r2, r0
 801112e:	460b      	mov	r3, r1
 8011130:	d135      	bne.n	801119e <_dtoa_r+0x6e6>
 8011132:	f7ef f8b3 	bl	800029c <__adddf3>
 8011136:	4642      	mov	r2, r8
 8011138:	464b      	mov	r3, r9
 801113a:	4606      	mov	r6, r0
 801113c:	460f      	mov	r7, r1
 801113e:	f7ef fcf3 	bl	8000b28 <__aeabi_dcmpgt>
 8011142:	b9d0      	cbnz	r0, 801117a <_dtoa_r+0x6c2>
 8011144:	4642      	mov	r2, r8
 8011146:	464b      	mov	r3, r9
 8011148:	4630      	mov	r0, r6
 801114a:	4639      	mov	r1, r7
 801114c:	f7ef fcc4 	bl	8000ad8 <__aeabi_dcmpeq>
 8011150:	b110      	cbz	r0, 8011158 <_dtoa_r+0x6a0>
 8011152:	f01a 0f01 	tst.w	sl, #1
 8011156:	d110      	bne.n	801117a <_dtoa_r+0x6c2>
 8011158:	4620      	mov	r0, r4
 801115a:	ee18 1a10 	vmov	r1, s16
 801115e:	f001 f889 	bl	8012274 <_Bfree>
 8011162:	2300      	movs	r3, #0
 8011164:	9800      	ldr	r0, [sp, #0]
 8011166:	702b      	strb	r3, [r5, #0]
 8011168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801116a:	3001      	adds	r0, #1
 801116c:	6018      	str	r0, [r3, #0]
 801116e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011170:	2b00      	cmp	r3, #0
 8011172:	f43f acf1 	beq.w	8010b58 <_dtoa_r+0xa0>
 8011176:	601d      	str	r5, [r3, #0]
 8011178:	e4ee      	b.n	8010b58 <_dtoa_r+0xa0>
 801117a:	9f00      	ldr	r7, [sp, #0]
 801117c:	462b      	mov	r3, r5
 801117e:	461d      	mov	r5, r3
 8011180:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011184:	2a39      	cmp	r2, #57	; 0x39
 8011186:	d106      	bne.n	8011196 <_dtoa_r+0x6de>
 8011188:	9a01      	ldr	r2, [sp, #4]
 801118a:	429a      	cmp	r2, r3
 801118c:	d1f7      	bne.n	801117e <_dtoa_r+0x6c6>
 801118e:	9901      	ldr	r1, [sp, #4]
 8011190:	2230      	movs	r2, #48	; 0x30
 8011192:	3701      	adds	r7, #1
 8011194:	700a      	strb	r2, [r1, #0]
 8011196:	781a      	ldrb	r2, [r3, #0]
 8011198:	3201      	adds	r2, #1
 801119a:	701a      	strb	r2, [r3, #0]
 801119c:	e790      	b.n	80110c0 <_dtoa_r+0x608>
 801119e:	4ba6      	ldr	r3, [pc, #664]	; (8011438 <_dtoa_r+0x980>)
 80111a0:	2200      	movs	r2, #0
 80111a2:	f7ef fa31 	bl	8000608 <__aeabi_dmul>
 80111a6:	2200      	movs	r2, #0
 80111a8:	2300      	movs	r3, #0
 80111aa:	4606      	mov	r6, r0
 80111ac:	460f      	mov	r7, r1
 80111ae:	f7ef fc93 	bl	8000ad8 <__aeabi_dcmpeq>
 80111b2:	2800      	cmp	r0, #0
 80111b4:	d09d      	beq.n	80110f2 <_dtoa_r+0x63a>
 80111b6:	e7cf      	b.n	8011158 <_dtoa_r+0x6a0>
 80111b8:	9a08      	ldr	r2, [sp, #32]
 80111ba:	2a00      	cmp	r2, #0
 80111bc:	f000 80d7 	beq.w	801136e <_dtoa_r+0x8b6>
 80111c0:	9a06      	ldr	r2, [sp, #24]
 80111c2:	2a01      	cmp	r2, #1
 80111c4:	f300 80ba 	bgt.w	801133c <_dtoa_r+0x884>
 80111c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80111ca:	2a00      	cmp	r2, #0
 80111cc:	f000 80b2 	beq.w	8011334 <_dtoa_r+0x87c>
 80111d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80111d4:	9e07      	ldr	r6, [sp, #28]
 80111d6:	9d04      	ldr	r5, [sp, #16]
 80111d8:	9a04      	ldr	r2, [sp, #16]
 80111da:	441a      	add	r2, r3
 80111dc:	9204      	str	r2, [sp, #16]
 80111de:	9a05      	ldr	r2, [sp, #20]
 80111e0:	2101      	movs	r1, #1
 80111e2:	441a      	add	r2, r3
 80111e4:	4620      	mov	r0, r4
 80111e6:	9205      	str	r2, [sp, #20]
 80111e8:	f001 f946 	bl	8012478 <__i2b>
 80111ec:	4607      	mov	r7, r0
 80111ee:	2d00      	cmp	r5, #0
 80111f0:	dd0c      	ble.n	801120c <_dtoa_r+0x754>
 80111f2:	9b05      	ldr	r3, [sp, #20]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	dd09      	ble.n	801120c <_dtoa_r+0x754>
 80111f8:	42ab      	cmp	r3, r5
 80111fa:	9a04      	ldr	r2, [sp, #16]
 80111fc:	bfa8      	it	ge
 80111fe:	462b      	movge	r3, r5
 8011200:	1ad2      	subs	r2, r2, r3
 8011202:	9204      	str	r2, [sp, #16]
 8011204:	9a05      	ldr	r2, [sp, #20]
 8011206:	1aed      	subs	r5, r5, r3
 8011208:	1ad3      	subs	r3, r2, r3
 801120a:	9305      	str	r3, [sp, #20]
 801120c:	9b07      	ldr	r3, [sp, #28]
 801120e:	b31b      	cbz	r3, 8011258 <_dtoa_r+0x7a0>
 8011210:	9b08      	ldr	r3, [sp, #32]
 8011212:	2b00      	cmp	r3, #0
 8011214:	f000 80af 	beq.w	8011376 <_dtoa_r+0x8be>
 8011218:	2e00      	cmp	r6, #0
 801121a:	dd13      	ble.n	8011244 <_dtoa_r+0x78c>
 801121c:	4639      	mov	r1, r7
 801121e:	4632      	mov	r2, r6
 8011220:	4620      	mov	r0, r4
 8011222:	f001 f9e9 	bl	80125f8 <__pow5mult>
 8011226:	ee18 2a10 	vmov	r2, s16
 801122a:	4601      	mov	r1, r0
 801122c:	4607      	mov	r7, r0
 801122e:	4620      	mov	r0, r4
 8011230:	f001 f938 	bl	80124a4 <__multiply>
 8011234:	ee18 1a10 	vmov	r1, s16
 8011238:	4680      	mov	r8, r0
 801123a:	4620      	mov	r0, r4
 801123c:	f001 f81a 	bl	8012274 <_Bfree>
 8011240:	ee08 8a10 	vmov	s16, r8
 8011244:	9b07      	ldr	r3, [sp, #28]
 8011246:	1b9a      	subs	r2, r3, r6
 8011248:	d006      	beq.n	8011258 <_dtoa_r+0x7a0>
 801124a:	ee18 1a10 	vmov	r1, s16
 801124e:	4620      	mov	r0, r4
 8011250:	f001 f9d2 	bl	80125f8 <__pow5mult>
 8011254:	ee08 0a10 	vmov	s16, r0
 8011258:	2101      	movs	r1, #1
 801125a:	4620      	mov	r0, r4
 801125c:	f001 f90c 	bl	8012478 <__i2b>
 8011260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011262:	2b00      	cmp	r3, #0
 8011264:	4606      	mov	r6, r0
 8011266:	f340 8088 	ble.w	801137a <_dtoa_r+0x8c2>
 801126a:	461a      	mov	r2, r3
 801126c:	4601      	mov	r1, r0
 801126e:	4620      	mov	r0, r4
 8011270:	f001 f9c2 	bl	80125f8 <__pow5mult>
 8011274:	9b06      	ldr	r3, [sp, #24]
 8011276:	2b01      	cmp	r3, #1
 8011278:	4606      	mov	r6, r0
 801127a:	f340 8081 	ble.w	8011380 <_dtoa_r+0x8c8>
 801127e:	f04f 0800 	mov.w	r8, #0
 8011282:	6933      	ldr	r3, [r6, #16]
 8011284:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011288:	6918      	ldr	r0, [r3, #16]
 801128a:	f001 f8a5 	bl	80123d8 <__hi0bits>
 801128e:	f1c0 0020 	rsb	r0, r0, #32
 8011292:	9b05      	ldr	r3, [sp, #20]
 8011294:	4418      	add	r0, r3
 8011296:	f010 001f 	ands.w	r0, r0, #31
 801129a:	f000 8092 	beq.w	80113c2 <_dtoa_r+0x90a>
 801129e:	f1c0 0320 	rsb	r3, r0, #32
 80112a2:	2b04      	cmp	r3, #4
 80112a4:	f340 808a 	ble.w	80113bc <_dtoa_r+0x904>
 80112a8:	f1c0 001c 	rsb	r0, r0, #28
 80112ac:	9b04      	ldr	r3, [sp, #16]
 80112ae:	4403      	add	r3, r0
 80112b0:	9304      	str	r3, [sp, #16]
 80112b2:	9b05      	ldr	r3, [sp, #20]
 80112b4:	4403      	add	r3, r0
 80112b6:	4405      	add	r5, r0
 80112b8:	9305      	str	r3, [sp, #20]
 80112ba:	9b04      	ldr	r3, [sp, #16]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	dd07      	ble.n	80112d0 <_dtoa_r+0x818>
 80112c0:	ee18 1a10 	vmov	r1, s16
 80112c4:	461a      	mov	r2, r3
 80112c6:	4620      	mov	r0, r4
 80112c8:	f001 f9f0 	bl	80126ac <__lshift>
 80112cc:	ee08 0a10 	vmov	s16, r0
 80112d0:	9b05      	ldr	r3, [sp, #20]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	dd05      	ble.n	80112e2 <_dtoa_r+0x82a>
 80112d6:	4631      	mov	r1, r6
 80112d8:	461a      	mov	r2, r3
 80112da:	4620      	mov	r0, r4
 80112dc:	f001 f9e6 	bl	80126ac <__lshift>
 80112e0:	4606      	mov	r6, r0
 80112e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d06e      	beq.n	80113c6 <_dtoa_r+0x90e>
 80112e8:	ee18 0a10 	vmov	r0, s16
 80112ec:	4631      	mov	r1, r6
 80112ee:	f001 fa4d 	bl	801278c <__mcmp>
 80112f2:	2800      	cmp	r0, #0
 80112f4:	da67      	bge.n	80113c6 <_dtoa_r+0x90e>
 80112f6:	9b00      	ldr	r3, [sp, #0]
 80112f8:	3b01      	subs	r3, #1
 80112fa:	ee18 1a10 	vmov	r1, s16
 80112fe:	9300      	str	r3, [sp, #0]
 8011300:	220a      	movs	r2, #10
 8011302:	2300      	movs	r3, #0
 8011304:	4620      	mov	r0, r4
 8011306:	f000 ffd7 	bl	80122b8 <__multadd>
 801130a:	9b08      	ldr	r3, [sp, #32]
 801130c:	ee08 0a10 	vmov	s16, r0
 8011310:	2b00      	cmp	r3, #0
 8011312:	f000 81b1 	beq.w	8011678 <_dtoa_r+0xbc0>
 8011316:	2300      	movs	r3, #0
 8011318:	4639      	mov	r1, r7
 801131a:	220a      	movs	r2, #10
 801131c:	4620      	mov	r0, r4
 801131e:	f000 ffcb 	bl	80122b8 <__multadd>
 8011322:	9b02      	ldr	r3, [sp, #8]
 8011324:	2b00      	cmp	r3, #0
 8011326:	4607      	mov	r7, r0
 8011328:	f300 808e 	bgt.w	8011448 <_dtoa_r+0x990>
 801132c:	9b06      	ldr	r3, [sp, #24]
 801132e:	2b02      	cmp	r3, #2
 8011330:	dc51      	bgt.n	80113d6 <_dtoa_r+0x91e>
 8011332:	e089      	b.n	8011448 <_dtoa_r+0x990>
 8011334:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011336:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801133a:	e74b      	b.n	80111d4 <_dtoa_r+0x71c>
 801133c:	9b03      	ldr	r3, [sp, #12]
 801133e:	1e5e      	subs	r6, r3, #1
 8011340:	9b07      	ldr	r3, [sp, #28]
 8011342:	42b3      	cmp	r3, r6
 8011344:	bfbf      	itttt	lt
 8011346:	9b07      	ldrlt	r3, [sp, #28]
 8011348:	9607      	strlt	r6, [sp, #28]
 801134a:	1af2      	sublt	r2, r6, r3
 801134c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801134e:	bfb6      	itet	lt
 8011350:	189b      	addlt	r3, r3, r2
 8011352:	1b9e      	subge	r6, r3, r6
 8011354:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011356:	9b03      	ldr	r3, [sp, #12]
 8011358:	bfb8      	it	lt
 801135a:	2600      	movlt	r6, #0
 801135c:	2b00      	cmp	r3, #0
 801135e:	bfb7      	itett	lt
 8011360:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011364:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011368:	1a9d      	sublt	r5, r3, r2
 801136a:	2300      	movlt	r3, #0
 801136c:	e734      	b.n	80111d8 <_dtoa_r+0x720>
 801136e:	9e07      	ldr	r6, [sp, #28]
 8011370:	9d04      	ldr	r5, [sp, #16]
 8011372:	9f08      	ldr	r7, [sp, #32]
 8011374:	e73b      	b.n	80111ee <_dtoa_r+0x736>
 8011376:	9a07      	ldr	r2, [sp, #28]
 8011378:	e767      	b.n	801124a <_dtoa_r+0x792>
 801137a:	9b06      	ldr	r3, [sp, #24]
 801137c:	2b01      	cmp	r3, #1
 801137e:	dc18      	bgt.n	80113b2 <_dtoa_r+0x8fa>
 8011380:	f1ba 0f00 	cmp.w	sl, #0
 8011384:	d115      	bne.n	80113b2 <_dtoa_r+0x8fa>
 8011386:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801138a:	b993      	cbnz	r3, 80113b2 <_dtoa_r+0x8fa>
 801138c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011390:	0d1b      	lsrs	r3, r3, #20
 8011392:	051b      	lsls	r3, r3, #20
 8011394:	b183      	cbz	r3, 80113b8 <_dtoa_r+0x900>
 8011396:	9b04      	ldr	r3, [sp, #16]
 8011398:	3301      	adds	r3, #1
 801139a:	9304      	str	r3, [sp, #16]
 801139c:	9b05      	ldr	r3, [sp, #20]
 801139e:	3301      	adds	r3, #1
 80113a0:	9305      	str	r3, [sp, #20]
 80113a2:	f04f 0801 	mov.w	r8, #1
 80113a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	f47f af6a 	bne.w	8011282 <_dtoa_r+0x7ca>
 80113ae:	2001      	movs	r0, #1
 80113b0:	e76f      	b.n	8011292 <_dtoa_r+0x7da>
 80113b2:	f04f 0800 	mov.w	r8, #0
 80113b6:	e7f6      	b.n	80113a6 <_dtoa_r+0x8ee>
 80113b8:	4698      	mov	r8, r3
 80113ba:	e7f4      	b.n	80113a6 <_dtoa_r+0x8ee>
 80113bc:	f43f af7d 	beq.w	80112ba <_dtoa_r+0x802>
 80113c0:	4618      	mov	r0, r3
 80113c2:	301c      	adds	r0, #28
 80113c4:	e772      	b.n	80112ac <_dtoa_r+0x7f4>
 80113c6:	9b03      	ldr	r3, [sp, #12]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	dc37      	bgt.n	801143c <_dtoa_r+0x984>
 80113cc:	9b06      	ldr	r3, [sp, #24]
 80113ce:	2b02      	cmp	r3, #2
 80113d0:	dd34      	ble.n	801143c <_dtoa_r+0x984>
 80113d2:	9b03      	ldr	r3, [sp, #12]
 80113d4:	9302      	str	r3, [sp, #8]
 80113d6:	9b02      	ldr	r3, [sp, #8]
 80113d8:	b96b      	cbnz	r3, 80113f6 <_dtoa_r+0x93e>
 80113da:	4631      	mov	r1, r6
 80113dc:	2205      	movs	r2, #5
 80113de:	4620      	mov	r0, r4
 80113e0:	f000 ff6a 	bl	80122b8 <__multadd>
 80113e4:	4601      	mov	r1, r0
 80113e6:	4606      	mov	r6, r0
 80113e8:	ee18 0a10 	vmov	r0, s16
 80113ec:	f001 f9ce 	bl	801278c <__mcmp>
 80113f0:	2800      	cmp	r0, #0
 80113f2:	f73f adbb 	bgt.w	8010f6c <_dtoa_r+0x4b4>
 80113f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113f8:	9d01      	ldr	r5, [sp, #4]
 80113fa:	43db      	mvns	r3, r3
 80113fc:	9300      	str	r3, [sp, #0]
 80113fe:	f04f 0800 	mov.w	r8, #0
 8011402:	4631      	mov	r1, r6
 8011404:	4620      	mov	r0, r4
 8011406:	f000 ff35 	bl	8012274 <_Bfree>
 801140a:	2f00      	cmp	r7, #0
 801140c:	f43f aea4 	beq.w	8011158 <_dtoa_r+0x6a0>
 8011410:	f1b8 0f00 	cmp.w	r8, #0
 8011414:	d005      	beq.n	8011422 <_dtoa_r+0x96a>
 8011416:	45b8      	cmp	r8, r7
 8011418:	d003      	beq.n	8011422 <_dtoa_r+0x96a>
 801141a:	4641      	mov	r1, r8
 801141c:	4620      	mov	r0, r4
 801141e:	f000 ff29 	bl	8012274 <_Bfree>
 8011422:	4639      	mov	r1, r7
 8011424:	4620      	mov	r0, r4
 8011426:	f000 ff25 	bl	8012274 <_Bfree>
 801142a:	e695      	b.n	8011158 <_dtoa_r+0x6a0>
 801142c:	2600      	movs	r6, #0
 801142e:	4637      	mov	r7, r6
 8011430:	e7e1      	b.n	80113f6 <_dtoa_r+0x93e>
 8011432:	9700      	str	r7, [sp, #0]
 8011434:	4637      	mov	r7, r6
 8011436:	e599      	b.n	8010f6c <_dtoa_r+0x4b4>
 8011438:	40240000 	.word	0x40240000
 801143c:	9b08      	ldr	r3, [sp, #32]
 801143e:	2b00      	cmp	r3, #0
 8011440:	f000 80ca 	beq.w	80115d8 <_dtoa_r+0xb20>
 8011444:	9b03      	ldr	r3, [sp, #12]
 8011446:	9302      	str	r3, [sp, #8]
 8011448:	2d00      	cmp	r5, #0
 801144a:	dd05      	ble.n	8011458 <_dtoa_r+0x9a0>
 801144c:	4639      	mov	r1, r7
 801144e:	462a      	mov	r2, r5
 8011450:	4620      	mov	r0, r4
 8011452:	f001 f92b 	bl	80126ac <__lshift>
 8011456:	4607      	mov	r7, r0
 8011458:	f1b8 0f00 	cmp.w	r8, #0
 801145c:	d05b      	beq.n	8011516 <_dtoa_r+0xa5e>
 801145e:	6879      	ldr	r1, [r7, #4]
 8011460:	4620      	mov	r0, r4
 8011462:	f000 fec7 	bl	80121f4 <_Balloc>
 8011466:	4605      	mov	r5, r0
 8011468:	b928      	cbnz	r0, 8011476 <_dtoa_r+0x9be>
 801146a:	4b87      	ldr	r3, [pc, #540]	; (8011688 <_dtoa_r+0xbd0>)
 801146c:	4602      	mov	r2, r0
 801146e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011472:	f7ff bb3b 	b.w	8010aec <_dtoa_r+0x34>
 8011476:	693a      	ldr	r2, [r7, #16]
 8011478:	3202      	adds	r2, #2
 801147a:	0092      	lsls	r2, r2, #2
 801147c:	f107 010c 	add.w	r1, r7, #12
 8011480:	300c      	adds	r0, #12
 8011482:	f7fd facd 	bl	800ea20 <memcpy>
 8011486:	2201      	movs	r2, #1
 8011488:	4629      	mov	r1, r5
 801148a:	4620      	mov	r0, r4
 801148c:	f001 f90e 	bl	80126ac <__lshift>
 8011490:	9b01      	ldr	r3, [sp, #4]
 8011492:	f103 0901 	add.w	r9, r3, #1
 8011496:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801149a:	4413      	add	r3, r2
 801149c:	9305      	str	r3, [sp, #20]
 801149e:	f00a 0301 	and.w	r3, sl, #1
 80114a2:	46b8      	mov	r8, r7
 80114a4:	9304      	str	r3, [sp, #16]
 80114a6:	4607      	mov	r7, r0
 80114a8:	4631      	mov	r1, r6
 80114aa:	ee18 0a10 	vmov	r0, s16
 80114ae:	f7ff fa77 	bl	80109a0 <quorem>
 80114b2:	4641      	mov	r1, r8
 80114b4:	9002      	str	r0, [sp, #8]
 80114b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80114ba:	ee18 0a10 	vmov	r0, s16
 80114be:	f001 f965 	bl	801278c <__mcmp>
 80114c2:	463a      	mov	r2, r7
 80114c4:	9003      	str	r0, [sp, #12]
 80114c6:	4631      	mov	r1, r6
 80114c8:	4620      	mov	r0, r4
 80114ca:	f001 f97b 	bl	80127c4 <__mdiff>
 80114ce:	68c2      	ldr	r2, [r0, #12]
 80114d0:	f109 3bff 	add.w	fp, r9, #4294967295
 80114d4:	4605      	mov	r5, r0
 80114d6:	bb02      	cbnz	r2, 801151a <_dtoa_r+0xa62>
 80114d8:	4601      	mov	r1, r0
 80114da:	ee18 0a10 	vmov	r0, s16
 80114de:	f001 f955 	bl	801278c <__mcmp>
 80114e2:	4602      	mov	r2, r0
 80114e4:	4629      	mov	r1, r5
 80114e6:	4620      	mov	r0, r4
 80114e8:	9207      	str	r2, [sp, #28]
 80114ea:	f000 fec3 	bl	8012274 <_Bfree>
 80114ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80114f2:	ea43 0102 	orr.w	r1, r3, r2
 80114f6:	9b04      	ldr	r3, [sp, #16]
 80114f8:	430b      	orrs	r3, r1
 80114fa:	464d      	mov	r5, r9
 80114fc:	d10f      	bne.n	801151e <_dtoa_r+0xa66>
 80114fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011502:	d02a      	beq.n	801155a <_dtoa_r+0xaa2>
 8011504:	9b03      	ldr	r3, [sp, #12]
 8011506:	2b00      	cmp	r3, #0
 8011508:	dd02      	ble.n	8011510 <_dtoa_r+0xa58>
 801150a:	9b02      	ldr	r3, [sp, #8]
 801150c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011510:	f88b a000 	strb.w	sl, [fp]
 8011514:	e775      	b.n	8011402 <_dtoa_r+0x94a>
 8011516:	4638      	mov	r0, r7
 8011518:	e7ba      	b.n	8011490 <_dtoa_r+0x9d8>
 801151a:	2201      	movs	r2, #1
 801151c:	e7e2      	b.n	80114e4 <_dtoa_r+0xa2c>
 801151e:	9b03      	ldr	r3, [sp, #12]
 8011520:	2b00      	cmp	r3, #0
 8011522:	db04      	blt.n	801152e <_dtoa_r+0xa76>
 8011524:	9906      	ldr	r1, [sp, #24]
 8011526:	430b      	orrs	r3, r1
 8011528:	9904      	ldr	r1, [sp, #16]
 801152a:	430b      	orrs	r3, r1
 801152c:	d122      	bne.n	8011574 <_dtoa_r+0xabc>
 801152e:	2a00      	cmp	r2, #0
 8011530:	ddee      	ble.n	8011510 <_dtoa_r+0xa58>
 8011532:	ee18 1a10 	vmov	r1, s16
 8011536:	2201      	movs	r2, #1
 8011538:	4620      	mov	r0, r4
 801153a:	f001 f8b7 	bl	80126ac <__lshift>
 801153e:	4631      	mov	r1, r6
 8011540:	ee08 0a10 	vmov	s16, r0
 8011544:	f001 f922 	bl	801278c <__mcmp>
 8011548:	2800      	cmp	r0, #0
 801154a:	dc03      	bgt.n	8011554 <_dtoa_r+0xa9c>
 801154c:	d1e0      	bne.n	8011510 <_dtoa_r+0xa58>
 801154e:	f01a 0f01 	tst.w	sl, #1
 8011552:	d0dd      	beq.n	8011510 <_dtoa_r+0xa58>
 8011554:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011558:	d1d7      	bne.n	801150a <_dtoa_r+0xa52>
 801155a:	2339      	movs	r3, #57	; 0x39
 801155c:	f88b 3000 	strb.w	r3, [fp]
 8011560:	462b      	mov	r3, r5
 8011562:	461d      	mov	r5, r3
 8011564:	3b01      	subs	r3, #1
 8011566:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801156a:	2a39      	cmp	r2, #57	; 0x39
 801156c:	d071      	beq.n	8011652 <_dtoa_r+0xb9a>
 801156e:	3201      	adds	r2, #1
 8011570:	701a      	strb	r2, [r3, #0]
 8011572:	e746      	b.n	8011402 <_dtoa_r+0x94a>
 8011574:	2a00      	cmp	r2, #0
 8011576:	dd07      	ble.n	8011588 <_dtoa_r+0xad0>
 8011578:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801157c:	d0ed      	beq.n	801155a <_dtoa_r+0xaa2>
 801157e:	f10a 0301 	add.w	r3, sl, #1
 8011582:	f88b 3000 	strb.w	r3, [fp]
 8011586:	e73c      	b.n	8011402 <_dtoa_r+0x94a>
 8011588:	9b05      	ldr	r3, [sp, #20]
 801158a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801158e:	4599      	cmp	r9, r3
 8011590:	d047      	beq.n	8011622 <_dtoa_r+0xb6a>
 8011592:	ee18 1a10 	vmov	r1, s16
 8011596:	2300      	movs	r3, #0
 8011598:	220a      	movs	r2, #10
 801159a:	4620      	mov	r0, r4
 801159c:	f000 fe8c 	bl	80122b8 <__multadd>
 80115a0:	45b8      	cmp	r8, r7
 80115a2:	ee08 0a10 	vmov	s16, r0
 80115a6:	f04f 0300 	mov.w	r3, #0
 80115aa:	f04f 020a 	mov.w	r2, #10
 80115ae:	4641      	mov	r1, r8
 80115b0:	4620      	mov	r0, r4
 80115b2:	d106      	bne.n	80115c2 <_dtoa_r+0xb0a>
 80115b4:	f000 fe80 	bl	80122b8 <__multadd>
 80115b8:	4680      	mov	r8, r0
 80115ba:	4607      	mov	r7, r0
 80115bc:	f109 0901 	add.w	r9, r9, #1
 80115c0:	e772      	b.n	80114a8 <_dtoa_r+0x9f0>
 80115c2:	f000 fe79 	bl	80122b8 <__multadd>
 80115c6:	4639      	mov	r1, r7
 80115c8:	4680      	mov	r8, r0
 80115ca:	2300      	movs	r3, #0
 80115cc:	220a      	movs	r2, #10
 80115ce:	4620      	mov	r0, r4
 80115d0:	f000 fe72 	bl	80122b8 <__multadd>
 80115d4:	4607      	mov	r7, r0
 80115d6:	e7f1      	b.n	80115bc <_dtoa_r+0xb04>
 80115d8:	9b03      	ldr	r3, [sp, #12]
 80115da:	9302      	str	r3, [sp, #8]
 80115dc:	9d01      	ldr	r5, [sp, #4]
 80115de:	ee18 0a10 	vmov	r0, s16
 80115e2:	4631      	mov	r1, r6
 80115e4:	f7ff f9dc 	bl	80109a0 <quorem>
 80115e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80115ec:	9b01      	ldr	r3, [sp, #4]
 80115ee:	f805 ab01 	strb.w	sl, [r5], #1
 80115f2:	1aea      	subs	r2, r5, r3
 80115f4:	9b02      	ldr	r3, [sp, #8]
 80115f6:	4293      	cmp	r3, r2
 80115f8:	dd09      	ble.n	801160e <_dtoa_r+0xb56>
 80115fa:	ee18 1a10 	vmov	r1, s16
 80115fe:	2300      	movs	r3, #0
 8011600:	220a      	movs	r2, #10
 8011602:	4620      	mov	r0, r4
 8011604:	f000 fe58 	bl	80122b8 <__multadd>
 8011608:	ee08 0a10 	vmov	s16, r0
 801160c:	e7e7      	b.n	80115de <_dtoa_r+0xb26>
 801160e:	9b02      	ldr	r3, [sp, #8]
 8011610:	2b00      	cmp	r3, #0
 8011612:	bfc8      	it	gt
 8011614:	461d      	movgt	r5, r3
 8011616:	9b01      	ldr	r3, [sp, #4]
 8011618:	bfd8      	it	le
 801161a:	2501      	movle	r5, #1
 801161c:	441d      	add	r5, r3
 801161e:	f04f 0800 	mov.w	r8, #0
 8011622:	ee18 1a10 	vmov	r1, s16
 8011626:	2201      	movs	r2, #1
 8011628:	4620      	mov	r0, r4
 801162a:	f001 f83f 	bl	80126ac <__lshift>
 801162e:	4631      	mov	r1, r6
 8011630:	ee08 0a10 	vmov	s16, r0
 8011634:	f001 f8aa 	bl	801278c <__mcmp>
 8011638:	2800      	cmp	r0, #0
 801163a:	dc91      	bgt.n	8011560 <_dtoa_r+0xaa8>
 801163c:	d102      	bne.n	8011644 <_dtoa_r+0xb8c>
 801163e:	f01a 0f01 	tst.w	sl, #1
 8011642:	d18d      	bne.n	8011560 <_dtoa_r+0xaa8>
 8011644:	462b      	mov	r3, r5
 8011646:	461d      	mov	r5, r3
 8011648:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801164c:	2a30      	cmp	r2, #48	; 0x30
 801164e:	d0fa      	beq.n	8011646 <_dtoa_r+0xb8e>
 8011650:	e6d7      	b.n	8011402 <_dtoa_r+0x94a>
 8011652:	9a01      	ldr	r2, [sp, #4]
 8011654:	429a      	cmp	r2, r3
 8011656:	d184      	bne.n	8011562 <_dtoa_r+0xaaa>
 8011658:	9b00      	ldr	r3, [sp, #0]
 801165a:	3301      	adds	r3, #1
 801165c:	9300      	str	r3, [sp, #0]
 801165e:	2331      	movs	r3, #49	; 0x31
 8011660:	7013      	strb	r3, [r2, #0]
 8011662:	e6ce      	b.n	8011402 <_dtoa_r+0x94a>
 8011664:	4b09      	ldr	r3, [pc, #36]	; (801168c <_dtoa_r+0xbd4>)
 8011666:	f7ff ba95 	b.w	8010b94 <_dtoa_r+0xdc>
 801166a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801166c:	2b00      	cmp	r3, #0
 801166e:	f47f aa6e 	bne.w	8010b4e <_dtoa_r+0x96>
 8011672:	4b07      	ldr	r3, [pc, #28]	; (8011690 <_dtoa_r+0xbd8>)
 8011674:	f7ff ba8e 	b.w	8010b94 <_dtoa_r+0xdc>
 8011678:	9b02      	ldr	r3, [sp, #8]
 801167a:	2b00      	cmp	r3, #0
 801167c:	dcae      	bgt.n	80115dc <_dtoa_r+0xb24>
 801167e:	9b06      	ldr	r3, [sp, #24]
 8011680:	2b02      	cmp	r3, #2
 8011682:	f73f aea8 	bgt.w	80113d6 <_dtoa_r+0x91e>
 8011686:	e7a9      	b.n	80115dc <_dtoa_r+0xb24>
 8011688:	08014370 	.word	0x08014370
 801168c:	08014174 	.word	0x08014174
 8011690:	080142f1 	.word	0x080142f1

08011694 <__sflush_r>:
 8011694:	898a      	ldrh	r2, [r1, #12]
 8011696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801169a:	4605      	mov	r5, r0
 801169c:	0710      	lsls	r0, r2, #28
 801169e:	460c      	mov	r4, r1
 80116a0:	d458      	bmi.n	8011754 <__sflush_r+0xc0>
 80116a2:	684b      	ldr	r3, [r1, #4]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	dc05      	bgt.n	80116b4 <__sflush_r+0x20>
 80116a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	dc02      	bgt.n	80116b4 <__sflush_r+0x20>
 80116ae:	2000      	movs	r0, #0
 80116b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80116b6:	2e00      	cmp	r6, #0
 80116b8:	d0f9      	beq.n	80116ae <__sflush_r+0x1a>
 80116ba:	2300      	movs	r3, #0
 80116bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80116c0:	682f      	ldr	r7, [r5, #0]
 80116c2:	602b      	str	r3, [r5, #0]
 80116c4:	d032      	beq.n	801172c <__sflush_r+0x98>
 80116c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80116c8:	89a3      	ldrh	r3, [r4, #12]
 80116ca:	075a      	lsls	r2, r3, #29
 80116cc:	d505      	bpl.n	80116da <__sflush_r+0x46>
 80116ce:	6863      	ldr	r3, [r4, #4]
 80116d0:	1ac0      	subs	r0, r0, r3
 80116d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80116d4:	b10b      	cbz	r3, 80116da <__sflush_r+0x46>
 80116d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80116d8:	1ac0      	subs	r0, r0, r3
 80116da:	2300      	movs	r3, #0
 80116dc:	4602      	mov	r2, r0
 80116de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80116e0:	6a21      	ldr	r1, [r4, #32]
 80116e2:	4628      	mov	r0, r5
 80116e4:	47b0      	blx	r6
 80116e6:	1c43      	adds	r3, r0, #1
 80116e8:	89a3      	ldrh	r3, [r4, #12]
 80116ea:	d106      	bne.n	80116fa <__sflush_r+0x66>
 80116ec:	6829      	ldr	r1, [r5, #0]
 80116ee:	291d      	cmp	r1, #29
 80116f0:	d82c      	bhi.n	801174c <__sflush_r+0xb8>
 80116f2:	4a2a      	ldr	r2, [pc, #168]	; (801179c <__sflush_r+0x108>)
 80116f4:	40ca      	lsrs	r2, r1
 80116f6:	07d6      	lsls	r6, r2, #31
 80116f8:	d528      	bpl.n	801174c <__sflush_r+0xb8>
 80116fa:	2200      	movs	r2, #0
 80116fc:	6062      	str	r2, [r4, #4]
 80116fe:	04d9      	lsls	r1, r3, #19
 8011700:	6922      	ldr	r2, [r4, #16]
 8011702:	6022      	str	r2, [r4, #0]
 8011704:	d504      	bpl.n	8011710 <__sflush_r+0x7c>
 8011706:	1c42      	adds	r2, r0, #1
 8011708:	d101      	bne.n	801170e <__sflush_r+0x7a>
 801170a:	682b      	ldr	r3, [r5, #0]
 801170c:	b903      	cbnz	r3, 8011710 <__sflush_r+0x7c>
 801170e:	6560      	str	r0, [r4, #84]	; 0x54
 8011710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011712:	602f      	str	r7, [r5, #0]
 8011714:	2900      	cmp	r1, #0
 8011716:	d0ca      	beq.n	80116ae <__sflush_r+0x1a>
 8011718:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801171c:	4299      	cmp	r1, r3
 801171e:	d002      	beq.n	8011726 <__sflush_r+0x92>
 8011720:	4628      	mov	r0, r5
 8011722:	f7fd f993 	bl	800ea4c <_free_r>
 8011726:	2000      	movs	r0, #0
 8011728:	6360      	str	r0, [r4, #52]	; 0x34
 801172a:	e7c1      	b.n	80116b0 <__sflush_r+0x1c>
 801172c:	6a21      	ldr	r1, [r4, #32]
 801172e:	2301      	movs	r3, #1
 8011730:	4628      	mov	r0, r5
 8011732:	47b0      	blx	r6
 8011734:	1c41      	adds	r1, r0, #1
 8011736:	d1c7      	bne.n	80116c8 <__sflush_r+0x34>
 8011738:	682b      	ldr	r3, [r5, #0]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d0c4      	beq.n	80116c8 <__sflush_r+0x34>
 801173e:	2b1d      	cmp	r3, #29
 8011740:	d001      	beq.n	8011746 <__sflush_r+0xb2>
 8011742:	2b16      	cmp	r3, #22
 8011744:	d101      	bne.n	801174a <__sflush_r+0xb6>
 8011746:	602f      	str	r7, [r5, #0]
 8011748:	e7b1      	b.n	80116ae <__sflush_r+0x1a>
 801174a:	89a3      	ldrh	r3, [r4, #12]
 801174c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011750:	81a3      	strh	r3, [r4, #12]
 8011752:	e7ad      	b.n	80116b0 <__sflush_r+0x1c>
 8011754:	690f      	ldr	r7, [r1, #16]
 8011756:	2f00      	cmp	r7, #0
 8011758:	d0a9      	beq.n	80116ae <__sflush_r+0x1a>
 801175a:	0793      	lsls	r3, r2, #30
 801175c:	680e      	ldr	r6, [r1, #0]
 801175e:	bf08      	it	eq
 8011760:	694b      	ldreq	r3, [r1, #20]
 8011762:	600f      	str	r7, [r1, #0]
 8011764:	bf18      	it	ne
 8011766:	2300      	movne	r3, #0
 8011768:	eba6 0807 	sub.w	r8, r6, r7
 801176c:	608b      	str	r3, [r1, #8]
 801176e:	f1b8 0f00 	cmp.w	r8, #0
 8011772:	dd9c      	ble.n	80116ae <__sflush_r+0x1a>
 8011774:	6a21      	ldr	r1, [r4, #32]
 8011776:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011778:	4643      	mov	r3, r8
 801177a:	463a      	mov	r2, r7
 801177c:	4628      	mov	r0, r5
 801177e:	47b0      	blx	r6
 8011780:	2800      	cmp	r0, #0
 8011782:	dc06      	bgt.n	8011792 <__sflush_r+0xfe>
 8011784:	89a3      	ldrh	r3, [r4, #12]
 8011786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801178a:	81a3      	strh	r3, [r4, #12]
 801178c:	f04f 30ff 	mov.w	r0, #4294967295
 8011790:	e78e      	b.n	80116b0 <__sflush_r+0x1c>
 8011792:	4407      	add	r7, r0
 8011794:	eba8 0800 	sub.w	r8, r8, r0
 8011798:	e7e9      	b.n	801176e <__sflush_r+0xda>
 801179a:	bf00      	nop
 801179c:	20400001 	.word	0x20400001

080117a0 <_fflush_r>:
 80117a0:	b538      	push	{r3, r4, r5, lr}
 80117a2:	690b      	ldr	r3, [r1, #16]
 80117a4:	4605      	mov	r5, r0
 80117a6:	460c      	mov	r4, r1
 80117a8:	b913      	cbnz	r3, 80117b0 <_fflush_r+0x10>
 80117aa:	2500      	movs	r5, #0
 80117ac:	4628      	mov	r0, r5
 80117ae:	bd38      	pop	{r3, r4, r5, pc}
 80117b0:	b118      	cbz	r0, 80117ba <_fflush_r+0x1a>
 80117b2:	6983      	ldr	r3, [r0, #24]
 80117b4:	b90b      	cbnz	r3, 80117ba <_fflush_r+0x1a>
 80117b6:	f000 f887 	bl	80118c8 <__sinit>
 80117ba:	4b14      	ldr	r3, [pc, #80]	; (801180c <_fflush_r+0x6c>)
 80117bc:	429c      	cmp	r4, r3
 80117be:	d11b      	bne.n	80117f8 <_fflush_r+0x58>
 80117c0:	686c      	ldr	r4, [r5, #4]
 80117c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d0ef      	beq.n	80117aa <_fflush_r+0xa>
 80117ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80117cc:	07d0      	lsls	r0, r2, #31
 80117ce:	d404      	bmi.n	80117da <_fflush_r+0x3a>
 80117d0:	0599      	lsls	r1, r3, #22
 80117d2:	d402      	bmi.n	80117da <_fflush_r+0x3a>
 80117d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80117d6:	f000 fc88 	bl	80120ea <__retarget_lock_acquire_recursive>
 80117da:	4628      	mov	r0, r5
 80117dc:	4621      	mov	r1, r4
 80117de:	f7ff ff59 	bl	8011694 <__sflush_r>
 80117e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80117e4:	07da      	lsls	r2, r3, #31
 80117e6:	4605      	mov	r5, r0
 80117e8:	d4e0      	bmi.n	80117ac <_fflush_r+0xc>
 80117ea:	89a3      	ldrh	r3, [r4, #12]
 80117ec:	059b      	lsls	r3, r3, #22
 80117ee:	d4dd      	bmi.n	80117ac <_fflush_r+0xc>
 80117f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80117f2:	f000 fc7b 	bl	80120ec <__retarget_lock_release_recursive>
 80117f6:	e7d9      	b.n	80117ac <_fflush_r+0xc>
 80117f8:	4b05      	ldr	r3, [pc, #20]	; (8011810 <_fflush_r+0x70>)
 80117fa:	429c      	cmp	r4, r3
 80117fc:	d101      	bne.n	8011802 <_fflush_r+0x62>
 80117fe:	68ac      	ldr	r4, [r5, #8]
 8011800:	e7df      	b.n	80117c2 <_fflush_r+0x22>
 8011802:	4b04      	ldr	r3, [pc, #16]	; (8011814 <_fflush_r+0x74>)
 8011804:	429c      	cmp	r4, r3
 8011806:	bf08      	it	eq
 8011808:	68ec      	ldreq	r4, [r5, #12]
 801180a:	e7da      	b.n	80117c2 <_fflush_r+0x22>
 801180c:	080143a4 	.word	0x080143a4
 8011810:	080143c4 	.word	0x080143c4
 8011814:	08014384 	.word	0x08014384

08011818 <std>:
 8011818:	2300      	movs	r3, #0
 801181a:	b510      	push	{r4, lr}
 801181c:	4604      	mov	r4, r0
 801181e:	e9c0 3300 	strd	r3, r3, [r0]
 8011822:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011826:	6083      	str	r3, [r0, #8]
 8011828:	8181      	strh	r1, [r0, #12]
 801182a:	6643      	str	r3, [r0, #100]	; 0x64
 801182c:	81c2      	strh	r2, [r0, #14]
 801182e:	6183      	str	r3, [r0, #24]
 8011830:	4619      	mov	r1, r3
 8011832:	2208      	movs	r2, #8
 8011834:	305c      	adds	r0, #92	; 0x5c
 8011836:	f7fd f901 	bl	800ea3c <memset>
 801183a:	4b05      	ldr	r3, [pc, #20]	; (8011850 <std+0x38>)
 801183c:	6263      	str	r3, [r4, #36]	; 0x24
 801183e:	4b05      	ldr	r3, [pc, #20]	; (8011854 <std+0x3c>)
 8011840:	62a3      	str	r3, [r4, #40]	; 0x28
 8011842:	4b05      	ldr	r3, [pc, #20]	; (8011858 <std+0x40>)
 8011844:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011846:	4b05      	ldr	r3, [pc, #20]	; (801185c <std+0x44>)
 8011848:	6224      	str	r4, [r4, #32]
 801184a:	6323      	str	r3, [r4, #48]	; 0x30
 801184c:	bd10      	pop	{r4, pc}
 801184e:	bf00      	nop
 8011850:	08013121 	.word	0x08013121
 8011854:	08013143 	.word	0x08013143
 8011858:	0801317b 	.word	0x0801317b
 801185c:	0801319f 	.word	0x0801319f

08011860 <_cleanup_r>:
 8011860:	4901      	ldr	r1, [pc, #4]	; (8011868 <_cleanup_r+0x8>)
 8011862:	f000 b8af 	b.w	80119c4 <_fwalk_reent>
 8011866:	bf00      	nop
 8011868:	080117a1 	.word	0x080117a1

0801186c <__sfmoreglue>:
 801186c:	b570      	push	{r4, r5, r6, lr}
 801186e:	2268      	movs	r2, #104	; 0x68
 8011870:	1e4d      	subs	r5, r1, #1
 8011872:	4355      	muls	r5, r2
 8011874:	460e      	mov	r6, r1
 8011876:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801187a:	f7fd f953 	bl	800eb24 <_malloc_r>
 801187e:	4604      	mov	r4, r0
 8011880:	b140      	cbz	r0, 8011894 <__sfmoreglue+0x28>
 8011882:	2100      	movs	r1, #0
 8011884:	e9c0 1600 	strd	r1, r6, [r0]
 8011888:	300c      	adds	r0, #12
 801188a:	60a0      	str	r0, [r4, #8]
 801188c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011890:	f7fd f8d4 	bl	800ea3c <memset>
 8011894:	4620      	mov	r0, r4
 8011896:	bd70      	pop	{r4, r5, r6, pc}

08011898 <__sfp_lock_acquire>:
 8011898:	4801      	ldr	r0, [pc, #4]	; (80118a0 <__sfp_lock_acquire+0x8>)
 801189a:	f000 bc26 	b.w	80120ea <__retarget_lock_acquire_recursive>
 801189e:	bf00      	nop
 80118a0:	20003959 	.word	0x20003959

080118a4 <__sfp_lock_release>:
 80118a4:	4801      	ldr	r0, [pc, #4]	; (80118ac <__sfp_lock_release+0x8>)
 80118a6:	f000 bc21 	b.w	80120ec <__retarget_lock_release_recursive>
 80118aa:	bf00      	nop
 80118ac:	20003959 	.word	0x20003959

080118b0 <__sinit_lock_acquire>:
 80118b0:	4801      	ldr	r0, [pc, #4]	; (80118b8 <__sinit_lock_acquire+0x8>)
 80118b2:	f000 bc1a 	b.w	80120ea <__retarget_lock_acquire_recursive>
 80118b6:	bf00      	nop
 80118b8:	2000395a 	.word	0x2000395a

080118bc <__sinit_lock_release>:
 80118bc:	4801      	ldr	r0, [pc, #4]	; (80118c4 <__sinit_lock_release+0x8>)
 80118be:	f000 bc15 	b.w	80120ec <__retarget_lock_release_recursive>
 80118c2:	bf00      	nop
 80118c4:	2000395a 	.word	0x2000395a

080118c8 <__sinit>:
 80118c8:	b510      	push	{r4, lr}
 80118ca:	4604      	mov	r4, r0
 80118cc:	f7ff fff0 	bl	80118b0 <__sinit_lock_acquire>
 80118d0:	69a3      	ldr	r3, [r4, #24]
 80118d2:	b11b      	cbz	r3, 80118dc <__sinit+0x14>
 80118d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118d8:	f7ff bff0 	b.w	80118bc <__sinit_lock_release>
 80118dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80118e0:	6523      	str	r3, [r4, #80]	; 0x50
 80118e2:	4b13      	ldr	r3, [pc, #76]	; (8011930 <__sinit+0x68>)
 80118e4:	4a13      	ldr	r2, [pc, #76]	; (8011934 <__sinit+0x6c>)
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80118ea:	42a3      	cmp	r3, r4
 80118ec:	bf04      	itt	eq
 80118ee:	2301      	moveq	r3, #1
 80118f0:	61a3      	streq	r3, [r4, #24]
 80118f2:	4620      	mov	r0, r4
 80118f4:	f000 f820 	bl	8011938 <__sfp>
 80118f8:	6060      	str	r0, [r4, #4]
 80118fa:	4620      	mov	r0, r4
 80118fc:	f000 f81c 	bl	8011938 <__sfp>
 8011900:	60a0      	str	r0, [r4, #8]
 8011902:	4620      	mov	r0, r4
 8011904:	f000 f818 	bl	8011938 <__sfp>
 8011908:	2200      	movs	r2, #0
 801190a:	60e0      	str	r0, [r4, #12]
 801190c:	2104      	movs	r1, #4
 801190e:	6860      	ldr	r0, [r4, #4]
 8011910:	f7ff ff82 	bl	8011818 <std>
 8011914:	68a0      	ldr	r0, [r4, #8]
 8011916:	2201      	movs	r2, #1
 8011918:	2109      	movs	r1, #9
 801191a:	f7ff ff7d 	bl	8011818 <std>
 801191e:	68e0      	ldr	r0, [r4, #12]
 8011920:	2202      	movs	r2, #2
 8011922:	2112      	movs	r1, #18
 8011924:	f7ff ff78 	bl	8011818 <std>
 8011928:	2301      	movs	r3, #1
 801192a:	61a3      	str	r3, [r4, #24]
 801192c:	e7d2      	b.n	80118d4 <__sinit+0xc>
 801192e:	bf00      	nop
 8011930:	08014160 	.word	0x08014160
 8011934:	08011861 	.word	0x08011861

08011938 <__sfp>:
 8011938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801193a:	4607      	mov	r7, r0
 801193c:	f7ff ffac 	bl	8011898 <__sfp_lock_acquire>
 8011940:	4b1e      	ldr	r3, [pc, #120]	; (80119bc <__sfp+0x84>)
 8011942:	681e      	ldr	r6, [r3, #0]
 8011944:	69b3      	ldr	r3, [r6, #24]
 8011946:	b913      	cbnz	r3, 801194e <__sfp+0x16>
 8011948:	4630      	mov	r0, r6
 801194a:	f7ff ffbd 	bl	80118c8 <__sinit>
 801194e:	3648      	adds	r6, #72	; 0x48
 8011950:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011954:	3b01      	subs	r3, #1
 8011956:	d503      	bpl.n	8011960 <__sfp+0x28>
 8011958:	6833      	ldr	r3, [r6, #0]
 801195a:	b30b      	cbz	r3, 80119a0 <__sfp+0x68>
 801195c:	6836      	ldr	r6, [r6, #0]
 801195e:	e7f7      	b.n	8011950 <__sfp+0x18>
 8011960:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011964:	b9d5      	cbnz	r5, 801199c <__sfp+0x64>
 8011966:	4b16      	ldr	r3, [pc, #88]	; (80119c0 <__sfp+0x88>)
 8011968:	60e3      	str	r3, [r4, #12]
 801196a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801196e:	6665      	str	r5, [r4, #100]	; 0x64
 8011970:	f000 fbba 	bl	80120e8 <__retarget_lock_init_recursive>
 8011974:	f7ff ff96 	bl	80118a4 <__sfp_lock_release>
 8011978:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801197c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011980:	6025      	str	r5, [r4, #0]
 8011982:	61a5      	str	r5, [r4, #24]
 8011984:	2208      	movs	r2, #8
 8011986:	4629      	mov	r1, r5
 8011988:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801198c:	f7fd f856 	bl	800ea3c <memset>
 8011990:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011994:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011998:	4620      	mov	r0, r4
 801199a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801199c:	3468      	adds	r4, #104	; 0x68
 801199e:	e7d9      	b.n	8011954 <__sfp+0x1c>
 80119a0:	2104      	movs	r1, #4
 80119a2:	4638      	mov	r0, r7
 80119a4:	f7ff ff62 	bl	801186c <__sfmoreglue>
 80119a8:	4604      	mov	r4, r0
 80119aa:	6030      	str	r0, [r6, #0]
 80119ac:	2800      	cmp	r0, #0
 80119ae:	d1d5      	bne.n	801195c <__sfp+0x24>
 80119b0:	f7ff ff78 	bl	80118a4 <__sfp_lock_release>
 80119b4:	230c      	movs	r3, #12
 80119b6:	603b      	str	r3, [r7, #0]
 80119b8:	e7ee      	b.n	8011998 <__sfp+0x60>
 80119ba:	bf00      	nop
 80119bc:	08014160 	.word	0x08014160
 80119c0:	ffff0001 	.word	0xffff0001

080119c4 <_fwalk_reent>:
 80119c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119c8:	4606      	mov	r6, r0
 80119ca:	4688      	mov	r8, r1
 80119cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80119d0:	2700      	movs	r7, #0
 80119d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80119d6:	f1b9 0901 	subs.w	r9, r9, #1
 80119da:	d505      	bpl.n	80119e8 <_fwalk_reent+0x24>
 80119dc:	6824      	ldr	r4, [r4, #0]
 80119de:	2c00      	cmp	r4, #0
 80119e0:	d1f7      	bne.n	80119d2 <_fwalk_reent+0xe>
 80119e2:	4638      	mov	r0, r7
 80119e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119e8:	89ab      	ldrh	r3, [r5, #12]
 80119ea:	2b01      	cmp	r3, #1
 80119ec:	d907      	bls.n	80119fe <_fwalk_reent+0x3a>
 80119ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80119f2:	3301      	adds	r3, #1
 80119f4:	d003      	beq.n	80119fe <_fwalk_reent+0x3a>
 80119f6:	4629      	mov	r1, r5
 80119f8:	4630      	mov	r0, r6
 80119fa:	47c0      	blx	r8
 80119fc:	4307      	orrs	r7, r0
 80119fe:	3568      	adds	r5, #104	; 0x68
 8011a00:	e7e9      	b.n	80119d6 <_fwalk_reent+0x12>

08011a02 <rshift>:
 8011a02:	6903      	ldr	r3, [r0, #16]
 8011a04:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011a08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a0c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011a10:	f100 0414 	add.w	r4, r0, #20
 8011a14:	dd45      	ble.n	8011aa2 <rshift+0xa0>
 8011a16:	f011 011f 	ands.w	r1, r1, #31
 8011a1a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011a1e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011a22:	d10c      	bne.n	8011a3e <rshift+0x3c>
 8011a24:	f100 0710 	add.w	r7, r0, #16
 8011a28:	4629      	mov	r1, r5
 8011a2a:	42b1      	cmp	r1, r6
 8011a2c:	d334      	bcc.n	8011a98 <rshift+0x96>
 8011a2e:	1a9b      	subs	r3, r3, r2
 8011a30:	009b      	lsls	r3, r3, #2
 8011a32:	1eea      	subs	r2, r5, #3
 8011a34:	4296      	cmp	r6, r2
 8011a36:	bf38      	it	cc
 8011a38:	2300      	movcc	r3, #0
 8011a3a:	4423      	add	r3, r4
 8011a3c:	e015      	b.n	8011a6a <rshift+0x68>
 8011a3e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011a42:	f1c1 0820 	rsb	r8, r1, #32
 8011a46:	40cf      	lsrs	r7, r1
 8011a48:	f105 0e04 	add.w	lr, r5, #4
 8011a4c:	46a1      	mov	r9, r4
 8011a4e:	4576      	cmp	r6, lr
 8011a50:	46f4      	mov	ip, lr
 8011a52:	d815      	bhi.n	8011a80 <rshift+0x7e>
 8011a54:	1a9a      	subs	r2, r3, r2
 8011a56:	0092      	lsls	r2, r2, #2
 8011a58:	3a04      	subs	r2, #4
 8011a5a:	3501      	adds	r5, #1
 8011a5c:	42ae      	cmp	r6, r5
 8011a5e:	bf38      	it	cc
 8011a60:	2200      	movcc	r2, #0
 8011a62:	18a3      	adds	r3, r4, r2
 8011a64:	50a7      	str	r7, [r4, r2]
 8011a66:	b107      	cbz	r7, 8011a6a <rshift+0x68>
 8011a68:	3304      	adds	r3, #4
 8011a6a:	1b1a      	subs	r2, r3, r4
 8011a6c:	42a3      	cmp	r3, r4
 8011a6e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011a72:	bf08      	it	eq
 8011a74:	2300      	moveq	r3, #0
 8011a76:	6102      	str	r2, [r0, #16]
 8011a78:	bf08      	it	eq
 8011a7a:	6143      	streq	r3, [r0, #20]
 8011a7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a80:	f8dc c000 	ldr.w	ip, [ip]
 8011a84:	fa0c fc08 	lsl.w	ip, ip, r8
 8011a88:	ea4c 0707 	orr.w	r7, ip, r7
 8011a8c:	f849 7b04 	str.w	r7, [r9], #4
 8011a90:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011a94:	40cf      	lsrs	r7, r1
 8011a96:	e7da      	b.n	8011a4e <rshift+0x4c>
 8011a98:	f851 cb04 	ldr.w	ip, [r1], #4
 8011a9c:	f847 cf04 	str.w	ip, [r7, #4]!
 8011aa0:	e7c3      	b.n	8011a2a <rshift+0x28>
 8011aa2:	4623      	mov	r3, r4
 8011aa4:	e7e1      	b.n	8011a6a <rshift+0x68>

08011aa6 <__hexdig_fun>:
 8011aa6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011aaa:	2b09      	cmp	r3, #9
 8011aac:	d802      	bhi.n	8011ab4 <__hexdig_fun+0xe>
 8011aae:	3820      	subs	r0, #32
 8011ab0:	b2c0      	uxtb	r0, r0
 8011ab2:	4770      	bx	lr
 8011ab4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011ab8:	2b05      	cmp	r3, #5
 8011aba:	d801      	bhi.n	8011ac0 <__hexdig_fun+0x1a>
 8011abc:	3847      	subs	r0, #71	; 0x47
 8011abe:	e7f7      	b.n	8011ab0 <__hexdig_fun+0xa>
 8011ac0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011ac4:	2b05      	cmp	r3, #5
 8011ac6:	d801      	bhi.n	8011acc <__hexdig_fun+0x26>
 8011ac8:	3827      	subs	r0, #39	; 0x27
 8011aca:	e7f1      	b.n	8011ab0 <__hexdig_fun+0xa>
 8011acc:	2000      	movs	r0, #0
 8011ace:	4770      	bx	lr

08011ad0 <__gethex>:
 8011ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ad4:	ed2d 8b02 	vpush	{d8}
 8011ad8:	b089      	sub	sp, #36	; 0x24
 8011ada:	ee08 0a10 	vmov	s16, r0
 8011ade:	9304      	str	r3, [sp, #16]
 8011ae0:	4bb4      	ldr	r3, [pc, #720]	; (8011db4 <__gethex+0x2e4>)
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	9301      	str	r3, [sp, #4]
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	468b      	mov	fp, r1
 8011aea:	4690      	mov	r8, r2
 8011aec:	f7ee fb78 	bl	80001e0 <strlen>
 8011af0:	9b01      	ldr	r3, [sp, #4]
 8011af2:	f8db 2000 	ldr.w	r2, [fp]
 8011af6:	4403      	add	r3, r0
 8011af8:	4682      	mov	sl, r0
 8011afa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011afe:	9305      	str	r3, [sp, #20]
 8011b00:	1c93      	adds	r3, r2, #2
 8011b02:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011b06:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011b0a:	32fe      	adds	r2, #254	; 0xfe
 8011b0c:	18d1      	adds	r1, r2, r3
 8011b0e:	461f      	mov	r7, r3
 8011b10:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011b14:	9100      	str	r1, [sp, #0]
 8011b16:	2830      	cmp	r0, #48	; 0x30
 8011b18:	d0f8      	beq.n	8011b0c <__gethex+0x3c>
 8011b1a:	f7ff ffc4 	bl	8011aa6 <__hexdig_fun>
 8011b1e:	4604      	mov	r4, r0
 8011b20:	2800      	cmp	r0, #0
 8011b22:	d13a      	bne.n	8011b9a <__gethex+0xca>
 8011b24:	9901      	ldr	r1, [sp, #4]
 8011b26:	4652      	mov	r2, sl
 8011b28:	4638      	mov	r0, r7
 8011b2a:	f7fd ffad 	bl	800fa88 <strncmp>
 8011b2e:	4605      	mov	r5, r0
 8011b30:	2800      	cmp	r0, #0
 8011b32:	d168      	bne.n	8011c06 <__gethex+0x136>
 8011b34:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011b38:	eb07 060a 	add.w	r6, r7, sl
 8011b3c:	f7ff ffb3 	bl	8011aa6 <__hexdig_fun>
 8011b40:	2800      	cmp	r0, #0
 8011b42:	d062      	beq.n	8011c0a <__gethex+0x13a>
 8011b44:	4633      	mov	r3, r6
 8011b46:	7818      	ldrb	r0, [r3, #0]
 8011b48:	2830      	cmp	r0, #48	; 0x30
 8011b4a:	461f      	mov	r7, r3
 8011b4c:	f103 0301 	add.w	r3, r3, #1
 8011b50:	d0f9      	beq.n	8011b46 <__gethex+0x76>
 8011b52:	f7ff ffa8 	bl	8011aa6 <__hexdig_fun>
 8011b56:	2301      	movs	r3, #1
 8011b58:	fab0 f480 	clz	r4, r0
 8011b5c:	0964      	lsrs	r4, r4, #5
 8011b5e:	4635      	mov	r5, r6
 8011b60:	9300      	str	r3, [sp, #0]
 8011b62:	463a      	mov	r2, r7
 8011b64:	4616      	mov	r6, r2
 8011b66:	3201      	adds	r2, #1
 8011b68:	7830      	ldrb	r0, [r6, #0]
 8011b6a:	f7ff ff9c 	bl	8011aa6 <__hexdig_fun>
 8011b6e:	2800      	cmp	r0, #0
 8011b70:	d1f8      	bne.n	8011b64 <__gethex+0x94>
 8011b72:	9901      	ldr	r1, [sp, #4]
 8011b74:	4652      	mov	r2, sl
 8011b76:	4630      	mov	r0, r6
 8011b78:	f7fd ff86 	bl	800fa88 <strncmp>
 8011b7c:	b980      	cbnz	r0, 8011ba0 <__gethex+0xd0>
 8011b7e:	b94d      	cbnz	r5, 8011b94 <__gethex+0xc4>
 8011b80:	eb06 050a 	add.w	r5, r6, sl
 8011b84:	462a      	mov	r2, r5
 8011b86:	4616      	mov	r6, r2
 8011b88:	3201      	adds	r2, #1
 8011b8a:	7830      	ldrb	r0, [r6, #0]
 8011b8c:	f7ff ff8b 	bl	8011aa6 <__hexdig_fun>
 8011b90:	2800      	cmp	r0, #0
 8011b92:	d1f8      	bne.n	8011b86 <__gethex+0xb6>
 8011b94:	1bad      	subs	r5, r5, r6
 8011b96:	00ad      	lsls	r5, r5, #2
 8011b98:	e004      	b.n	8011ba4 <__gethex+0xd4>
 8011b9a:	2400      	movs	r4, #0
 8011b9c:	4625      	mov	r5, r4
 8011b9e:	e7e0      	b.n	8011b62 <__gethex+0x92>
 8011ba0:	2d00      	cmp	r5, #0
 8011ba2:	d1f7      	bne.n	8011b94 <__gethex+0xc4>
 8011ba4:	7833      	ldrb	r3, [r6, #0]
 8011ba6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011baa:	2b50      	cmp	r3, #80	; 0x50
 8011bac:	d13b      	bne.n	8011c26 <__gethex+0x156>
 8011bae:	7873      	ldrb	r3, [r6, #1]
 8011bb0:	2b2b      	cmp	r3, #43	; 0x2b
 8011bb2:	d02c      	beq.n	8011c0e <__gethex+0x13e>
 8011bb4:	2b2d      	cmp	r3, #45	; 0x2d
 8011bb6:	d02e      	beq.n	8011c16 <__gethex+0x146>
 8011bb8:	1c71      	adds	r1, r6, #1
 8011bba:	f04f 0900 	mov.w	r9, #0
 8011bbe:	7808      	ldrb	r0, [r1, #0]
 8011bc0:	f7ff ff71 	bl	8011aa6 <__hexdig_fun>
 8011bc4:	1e43      	subs	r3, r0, #1
 8011bc6:	b2db      	uxtb	r3, r3
 8011bc8:	2b18      	cmp	r3, #24
 8011bca:	d82c      	bhi.n	8011c26 <__gethex+0x156>
 8011bcc:	f1a0 0210 	sub.w	r2, r0, #16
 8011bd0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011bd4:	f7ff ff67 	bl	8011aa6 <__hexdig_fun>
 8011bd8:	1e43      	subs	r3, r0, #1
 8011bda:	b2db      	uxtb	r3, r3
 8011bdc:	2b18      	cmp	r3, #24
 8011bde:	d91d      	bls.n	8011c1c <__gethex+0x14c>
 8011be0:	f1b9 0f00 	cmp.w	r9, #0
 8011be4:	d000      	beq.n	8011be8 <__gethex+0x118>
 8011be6:	4252      	negs	r2, r2
 8011be8:	4415      	add	r5, r2
 8011bea:	f8cb 1000 	str.w	r1, [fp]
 8011bee:	b1e4      	cbz	r4, 8011c2a <__gethex+0x15a>
 8011bf0:	9b00      	ldr	r3, [sp, #0]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	bf14      	ite	ne
 8011bf6:	2700      	movne	r7, #0
 8011bf8:	2706      	moveq	r7, #6
 8011bfa:	4638      	mov	r0, r7
 8011bfc:	b009      	add	sp, #36	; 0x24
 8011bfe:	ecbd 8b02 	vpop	{d8}
 8011c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c06:	463e      	mov	r6, r7
 8011c08:	4625      	mov	r5, r4
 8011c0a:	2401      	movs	r4, #1
 8011c0c:	e7ca      	b.n	8011ba4 <__gethex+0xd4>
 8011c0e:	f04f 0900 	mov.w	r9, #0
 8011c12:	1cb1      	adds	r1, r6, #2
 8011c14:	e7d3      	b.n	8011bbe <__gethex+0xee>
 8011c16:	f04f 0901 	mov.w	r9, #1
 8011c1a:	e7fa      	b.n	8011c12 <__gethex+0x142>
 8011c1c:	230a      	movs	r3, #10
 8011c1e:	fb03 0202 	mla	r2, r3, r2, r0
 8011c22:	3a10      	subs	r2, #16
 8011c24:	e7d4      	b.n	8011bd0 <__gethex+0x100>
 8011c26:	4631      	mov	r1, r6
 8011c28:	e7df      	b.n	8011bea <__gethex+0x11a>
 8011c2a:	1bf3      	subs	r3, r6, r7
 8011c2c:	3b01      	subs	r3, #1
 8011c2e:	4621      	mov	r1, r4
 8011c30:	2b07      	cmp	r3, #7
 8011c32:	dc0b      	bgt.n	8011c4c <__gethex+0x17c>
 8011c34:	ee18 0a10 	vmov	r0, s16
 8011c38:	f000 fadc 	bl	80121f4 <_Balloc>
 8011c3c:	4604      	mov	r4, r0
 8011c3e:	b940      	cbnz	r0, 8011c52 <__gethex+0x182>
 8011c40:	4b5d      	ldr	r3, [pc, #372]	; (8011db8 <__gethex+0x2e8>)
 8011c42:	4602      	mov	r2, r0
 8011c44:	21de      	movs	r1, #222	; 0xde
 8011c46:	485d      	ldr	r0, [pc, #372]	; (8011dbc <__gethex+0x2ec>)
 8011c48:	f001 facc 	bl	80131e4 <__assert_func>
 8011c4c:	3101      	adds	r1, #1
 8011c4e:	105b      	asrs	r3, r3, #1
 8011c50:	e7ee      	b.n	8011c30 <__gethex+0x160>
 8011c52:	f100 0914 	add.w	r9, r0, #20
 8011c56:	f04f 0b00 	mov.w	fp, #0
 8011c5a:	f1ca 0301 	rsb	r3, sl, #1
 8011c5e:	f8cd 9008 	str.w	r9, [sp, #8]
 8011c62:	f8cd b000 	str.w	fp, [sp]
 8011c66:	9306      	str	r3, [sp, #24]
 8011c68:	42b7      	cmp	r7, r6
 8011c6a:	d340      	bcc.n	8011cee <__gethex+0x21e>
 8011c6c:	9802      	ldr	r0, [sp, #8]
 8011c6e:	9b00      	ldr	r3, [sp, #0]
 8011c70:	f840 3b04 	str.w	r3, [r0], #4
 8011c74:	eba0 0009 	sub.w	r0, r0, r9
 8011c78:	1080      	asrs	r0, r0, #2
 8011c7a:	0146      	lsls	r6, r0, #5
 8011c7c:	6120      	str	r0, [r4, #16]
 8011c7e:	4618      	mov	r0, r3
 8011c80:	f000 fbaa 	bl	80123d8 <__hi0bits>
 8011c84:	1a30      	subs	r0, r6, r0
 8011c86:	f8d8 6000 	ldr.w	r6, [r8]
 8011c8a:	42b0      	cmp	r0, r6
 8011c8c:	dd63      	ble.n	8011d56 <__gethex+0x286>
 8011c8e:	1b87      	subs	r7, r0, r6
 8011c90:	4639      	mov	r1, r7
 8011c92:	4620      	mov	r0, r4
 8011c94:	f000 ff4e 	bl	8012b34 <__any_on>
 8011c98:	4682      	mov	sl, r0
 8011c9a:	b1a8      	cbz	r0, 8011cc8 <__gethex+0x1f8>
 8011c9c:	1e7b      	subs	r3, r7, #1
 8011c9e:	1159      	asrs	r1, r3, #5
 8011ca0:	f003 021f 	and.w	r2, r3, #31
 8011ca4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011ca8:	f04f 0a01 	mov.w	sl, #1
 8011cac:	fa0a f202 	lsl.w	r2, sl, r2
 8011cb0:	420a      	tst	r2, r1
 8011cb2:	d009      	beq.n	8011cc8 <__gethex+0x1f8>
 8011cb4:	4553      	cmp	r3, sl
 8011cb6:	dd05      	ble.n	8011cc4 <__gethex+0x1f4>
 8011cb8:	1eb9      	subs	r1, r7, #2
 8011cba:	4620      	mov	r0, r4
 8011cbc:	f000 ff3a 	bl	8012b34 <__any_on>
 8011cc0:	2800      	cmp	r0, #0
 8011cc2:	d145      	bne.n	8011d50 <__gethex+0x280>
 8011cc4:	f04f 0a02 	mov.w	sl, #2
 8011cc8:	4639      	mov	r1, r7
 8011cca:	4620      	mov	r0, r4
 8011ccc:	f7ff fe99 	bl	8011a02 <rshift>
 8011cd0:	443d      	add	r5, r7
 8011cd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011cd6:	42ab      	cmp	r3, r5
 8011cd8:	da4c      	bge.n	8011d74 <__gethex+0x2a4>
 8011cda:	ee18 0a10 	vmov	r0, s16
 8011cde:	4621      	mov	r1, r4
 8011ce0:	f000 fac8 	bl	8012274 <_Bfree>
 8011ce4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	6013      	str	r3, [r2, #0]
 8011cea:	27a3      	movs	r7, #163	; 0xa3
 8011cec:	e785      	b.n	8011bfa <__gethex+0x12a>
 8011cee:	1e73      	subs	r3, r6, #1
 8011cf0:	9a05      	ldr	r2, [sp, #20]
 8011cf2:	9303      	str	r3, [sp, #12]
 8011cf4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011cf8:	4293      	cmp	r3, r2
 8011cfa:	d019      	beq.n	8011d30 <__gethex+0x260>
 8011cfc:	f1bb 0f20 	cmp.w	fp, #32
 8011d00:	d107      	bne.n	8011d12 <__gethex+0x242>
 8011d02:	9b02      	ldr	r3, [sp, #8]
 8011d04:	9a00      	ldr	r2, [sp, #0]
 8011d06:	f843 2b04 	str.w	r2, [r3], #4
 8011d0a:	9302      	str	r3, [sp, #8]
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	9300      	str	r3, [sp, #0]
 8011d10:	469b      	mov	fp, r3
 8011d12:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011d16:	f7ff fec6 	bl	8011aa6 <__hexdig_fun>
 8011d1a:	9b00      	ldr	r3, [sp, #0]
 8011d1c:	f000 000f 	and.w	r0, r0, #15
 8011d20:	fa00 f00b 	lsl.w	r0, r0, fp
 8011d24:	4303      	orrs	r3, r0
 8011d26:	9300      	str	r3, [sp, #0]
 8011d28:	f10b 0b04 	add.w	fp, fp, #4
 8011d2c:	9b03      	ldr	r3, [sp, #12]
 8011d2e:	e00d      	b.n	8011d4c <__gethex+0x27c>
 8011d30:	9b03      	ldr	r3, [sp, #12]
 8011d32:	9a06      	ldr	r2, [sp, #24]
 8011d34:	4413      	add	r3, r2
 8011d36:	42bb      	cmp	r3, r7
 8011d38:	d3e0      	bcc.n	8011cfc <__gethex+0x22c>
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	9901      	ldr	r1, [sp, #4]
 8011d3e:	9307      	str	r3, [sp, #28]
 8011d40:	4652      	mov	r2, sl
 8011d42:	f7fd fea1 	bl	800fa88 <strncmp>
 8011d46:	9b07      	ldr	r3, [sp, #28]
 8011d48:	2800      	cmp	r0, #0
 8011d4a:	d1d7      	bne.n	8011cfc <__gethex+0x22c>
 8011d4c:	461e      	mov	r6, r3
 8011d4e:	e78b      	b.n	8011c68 <__gethex+0x198>
 8011d50:	f04f 0a03 	mov.w	sl, #3
 8011d54:	e7b8      	b.n	8011cc8 <__gethex+0x1f8>
 8011d56:	da0a      	bge.n	8011d6e <__gethex+0x29e>
 8011d58:	1a37      	subs	r7, r6, r0
 8011d5a:	4621      	mov	r1, r4
 8011d5c:	ee18 0a10 	vmov	r0, s16
 8011d60:	463a      	mov	r2, r7
 8011d62:	f000 fca3 	bl	80126ac <__lshift>
 8011d66:	1bed      	subs	r5, r5, r7
 8011d68:	4604      	mov	r4, r0
 8011d6a:	f100 0914 	add.w	r9, r0, #20
 8011d6e:	f04f 0a00 	mov.w	sl, #0
 8011d72:	e7ae      	b.n	8011cd2 <__gethex+0x202>
 8011d74:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011d78:	42a8      	cmp	r0, r5
 8011d7a:	dd72      	ble.n	8011e62 <__gethex+0x392>
 8011d7c:	1b45      	subs	r5, r0, r5
 8011d7e:	42ae      	cmp	r6, r5
 8011d80:	dc36      	bgt.n	8011df0 <__gethex+0x320>
 8011d82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011d86:	2b02      	cmp	r3, #2
 8011d88:	d02a      	beq.n	8011de0 <__gethex+0x310>
 8011d8a:	2b03      	cmp	r3, #3
 8011d8c:	d02c      	beq.n	8011de8 <__gethex+0x318>
 8011d8e:	2b01      	cmp	r3, #1
 8011d90:	d11c      	bne.n	8011dcc <__gethex+0x2fc>
 8011d92:	42ae      	cmp	r6, r5
 8011d94:	d11a      	bne.n	8011dcc <__gethex+0x2fc>
 8011d96:	2e01      	cmp	r6, #1
 8011d98:	d112      	bne.n	8011dc0 <__gethex+0x2f0>
 8011d9a:	9a04      	ldr	r2, [sp, #16]
 8011d9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011da0:	6013      	str	r3, [r2, #0]
 8011da2:	2301      	movs	r3, #1
 8011da4:	6123      	str	r3, [r4, #16]
 8011da6:	f8c9 3000 	str.w	r3, [r9]
 8011daa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011dac:	2762      	movs	r7, #98	; 0x62
 8011dae:	601c      	str	r4, [r3, #0]
 8011db0:	e723      	b.n	8011bfa <__gethex+0x12a>
 8011db2:	bf00      	nop
 8011db4:	0801444c 	.word	0x0801444c
 8011db8:	08014370 	.word	0x08014370
 8011dbc:	080143e4 	.word	0x080143e4
 8011dc0:	1e71      	subs	r1, r6, #1
 8011dc2:	4620      	mov	r0, r4
 8011dc4:	f000 feb6 	bl	8012b34 <__any_on>
 8011dc8:	2800      	cmp	r0, #0
 8011dca:	d1e6      	bne.n	8011d9a <__gethex+0x2ca>
 8011dcc:	ee18 0a10 	vmov	r0, s16
 8011dd0:	4621      	mov	r1, r4
 8011dd2:	f000 fa4f 	bl	8012274 <_Bfree>
 8011dd6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011dd8:	2300      	movs	r3, #0
 8011dda:	6013      	str	r3, [r2, #0]
 8011ddc:	2750      	movs	r7, #80	; 0x50
 8011dde:	e70c      	b.n	8011bfa <__gethex+0x12a>
 8011de0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d1f2      	bne.n	8011dcc <__gethex+0x2fc>
 8011de6:	e7d8      	b.n	8011d9a <__gethex+0x2ca>
 8011de8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d1d5      	bne.n	8011d9a <__gethex+0x2ca>
 8011dee:	e7ed      	b.n	8011dcc <__gethex+0x2fc>
 8011df0:	1e6f      	subs	r7, r5, #1
 8011df2:	f1ba 0f00 	cmp.w	sl, #0
 8011df6:	d131      	bne.n	8011e5c <__gethex+0x38c>
 8011df8:	b127      	cbz	r7, 8011e04 <__gethex+0x334>
 8011dfa:	4639      	mov	r1, r7
 8011dfc:	4620      	mov	r0, r4
 8011dfe:	f000 fe99 	bl	8012b34 <__any_on>
 8011e02:	4682      	mov	sl, r0
 8011e04:	117b      	asrs	r3, r7, #5
 8011e06:	2101      	movs	r1, #1
 8011e08:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011e0c:	f007 071f 	and.w	r7, r7, #31
 8011e10:	fa01 f707 	lsl.w	r7, r1, r7
 8011e14:	421f      	tst	r7, r3
 8011e16:	4629      	mov	r1, r5
 8011e18:	4620      	mov	r0, r4
 8011e1a:	bf18      	it	ne
 8011e1c:	f04a 0a02 	orrne.w	sl, sl, #2
 8011e20:	1b76      	subs	r6, r6, r5
 8011e22:	f7ff fdee 	bl	8011a02 <rshift>
 8011e26:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011e2a:	2702      	movs	r7, #2
 8011e2c:	f1ba 0f00 	cmp.w	sl, #0
 8011e30:	d048      	beq.n	8011ec4 <__gethex+0x3f4>
 8011e32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011e36:	2b02      	cmp	r3, #2
 8011e38:	d015      	beq.n	8011e66 <__gethex+0x396>
 8011e3a:	2b03      	cmp	r3, #3
 8011e3c:	d017      	beq.n	8011e6e <__gethex+0x39e>
 8011e3e:	2b01      	cmp	r3, #1
 8011e40:	d109      	bne.n	8011e56 <__gethex+0x386>
 8011e42:	f01a 0f02 	tst.w	sl, #2
 8011e46:	d006      	beq.n	8011e56 <__gethex+0x386>
 8011e48:	f8d9 0000 	ldr.w	r0, [r9]
 8011e4c:	ea4a 0a00 	orr.w	sl, sl, r0
 8011e50:	f01a 0f01 	tst.w	sl, #1
 8011e54:	d10e      	bne.n	8011e74 <__gethex+0x3a4>
 8011e56:	f047 0710 	orr.w	r7, r7, #16
 8011e5a:	e033      	b.n	8011ec4 <__gethex+0x3f4>
 8011e5c:	f04f 0a01 	mov.w	sl, #1
 8011e60:	e7d0      	b.n	8011e04 <__gethex+0x334>
 8011e62:	2701      	movs	r7, #1
 8011e64:	e7e2      	b.n	8011e2c <__gethex+0x35c>
 8011e66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011e68:	f1c3 0301 	rsb	r3, r3, #1
 8011e6c:	9315      	str	r3, [sp, #84]	; 0x54
 8011e6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d0f0      	beq.n	8011e56 <__gethex+0x386>
 8011e74:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011e78:	f104 0314 	add.w	r3, r4, #20
 8011e7c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011e80:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011e84:	f04f 0c00 	mov.w	ip, #0
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e8e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011e92:	d01c      	beq.n	8011ece <__gethex+0x3fe>
 8011e94:	3201      	adds	r2, #1
 8011e96:	6002      	str	r2, [r0, #0]
 8011e98:	2f02      	cmp	r7, #2
 8011e9a:	f104 0314 	add.w	r3, r4, #20
 8011e9e:	d13f      	bne.n	8011f20 <__gethex+0x450>
 8011ea0:	f8d8 2000 	ldr.w	r2, [r8]
 8011ea4:	3a01      	subs	r2, #1
 8011ea6:	42b2      	cmp	r2, r6
 8011ea8:	d10a      	bne.n	8011ec0 <__gethex+0x3f0>
 8011eaa:	1171      	asrs	r1, r6, #5
 8011eac:	2201      	movs	r2, #1
 8011eae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011eb2:	f006 061f 	and.w	r6, r6, #31
 8011eb6:	fa02 f606 	lsl.w	r6, r2, r6
 8011eba:	421e      	tst	r6, r3
 8011ebc:	bf18      	it	ne
 8011ebe:	4617      	movne	r7, r2
 8011ec0:	f047 0720 	orr.w	r7, r7, #32
 8011ec4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011ec6:	601c      	str	r4, [r3, #0]
 8011ec8:	9b04      	ldr	r3, [sp, #16]
 8011eca:	601d      	str	r5, [r3, #0]
 8011ecc:	e695      	b.n	8011bfa <__gethex+0x12a>
 8011ece:	4299      	cmp	r1, r3
 8011ed0:	f843 cc04 	str.w	ip, [r3, #-4]
 8011ed4:	d8d8      	bhi.n	8011e88 <__gethex+0x3b8>
 8011ed6:	68a3      	ldr	r3, [r4, #8]
 8011ed8:	459b      	cmp	fp, r3
 8011eda:	db19      	blt.n	8011f10 <__gethex+0x440>
 8011edc:	6861      	ldr	r1, [r4, #4]
 8011ede:	ee18 0a10 	vmov	r0, s16
 8011ee2:	3101      	adds	r1, #1
 8011ee4:	f000 f986 	bl	80121f4 <_Balloc>
 8011ee8:	4681      	mov	r9, r0
 8011eea:	b918      	cbnz	r0, 8011ef4 <__gethex+0x424>
 8011eec:	4b1a      	ldr	r3, [pc, #104]	; (8011f58 <__gethex+0x488>)
 8011eee:	4602      	mov	r2, r0
 8011ef0:	2184      	movs	r1, #132	; 0x84
 8011ef2:	e6a8      	b.n	8011c46 <__gethex+0x176>
 8011ef4:	6922      	ldr	r2, [r4, #16]
 8011ef6:	3202      	adds	r2, #2
 8011ef8:	f104 010c 	add.w	r1, r4, #12
 8011efc:	0092      	lsls	r2, r2, #2
 8011efe:	300c      	adds	r0, #12
 8011f00:	f7fc fd8e 	bl	800ea20 <memcpy>
 8011f04:	4621      	mov	r1, r4
 8011f06:	ee18 0a10 	vmov	r0, s16
 8011f0a:	f000 f9b3 	bl	8012274 <_Bfree>
 8011f0e:	464c      	mov	r4, r9
 8011f10:	6923      	ldr	r3, [r4, #16]
 8011f12:	1c5a      	adds	r2, r3, #1
 8011f14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011f18:	6122      	str	r2, [r4, #16]
 8011f1a:	2201      	movs	r2, #1
 8011f1c:	615a      	str	r2, [r3, #20]
 8011f1e:	e7bb      	b.n	8011e98 <__gethex+0x3c8>
 8011f20:	6922      	ldr	r2, [r4, #16]
 8011f22:	455a      	cmp	r2, fp
 8011f24:	dd0b      	ble.n	8011f3e <__gethex+0x46e>
 8011f26:	2101      	movs	r1, #1
 8011f28:	4620      	mov	r0, r4
 8011f2a:	f7ff fd6a 	bl	8011a02 <rshift>
 8011f2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011f32:	3501      	adds	r5, #1
 8011f34:	42ab      	cmp	r3, r5
 8011f36:	f6ff aed0 	blt.w	8011cda <__gethex+0x20a>
 8011f3a:	2701      	movs	r7, #1
 8011f3c:	e7c0      	b.n	8011ec0 <__gethex+0x3f0>
 8011f3e:	f016 061f 	ands.w	r6, r6, #31
 8011f42:	d0fa      	beq.n	8011f3a <__gethex+0x46a>
 8011f44:	4453      	add	r3, sl
 8011f46:	f1c6 0620 	rsb	r6, r6, #32
 8011f4a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011f4e:	f000 fa43 	bl	80123d8 <__hi0bits>
 8011f52:	42b0      	cmp	r0, r6
 8011f54:	dbe7      	blt.n	8011f26 <__gethex+0x456>
 8011f56:	e7f0      	b.n	8011f3a <__gethex+0x46a>
 8011f58:	08014370 	.word	0x08014370

08011f5c <L_shift>:
 8011f5c:	f1c2 0208 	rsb	r2, r2, #8
 8011f60:	0092      	lsls	r2, r2, #2
 8011f62:	b570      	push	{r4, r5, r6, lr}
 8011f64:	f1c2 0620 	rsb	r6, r2, #32
 8011f68:	6843      	ldr	r3, [r0, #4]
 8011f6a:	6804      	ldr	r4, [r0, #0]
 8011f6c:	fa03 f506 	lsl.w	r5, r3, r6
 8011f70:	432c      	orrs	r4, r5
 8011f72:	40d3      	lsrs	r3, r2
 8011f74:	6004      	str	r4, [r0, #0]
 8011f76:	f840 3f04 	str.w	r3, [r0, #4]!
 8011f7a:	4288      	cmp	r0, r1
 8011f7c:	d3f4      	bcc.n	8011f68 <L_shift+0xc>
 8011f7e:	bd70      	pop	{r4, r5, r6, pc}

08011f80 <__match>:
 8011f80:	b530      	push	{r4, r5, lr}
 8011f82:	6803      	ldr	r3, [r0, #0]
 8011f84:	3301      	adds	r3, #1
 8011f86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011f8a:	b914      	cbnz	r4, 8011f92 <__match+0x12>
 8011f8c:	6003      	str	r3, [r0, #0]
 8011f8e:	2001      	movs	r0, #1
 8011f90:	bd30      	pop	{r4, r5, pc}
 8011f92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f96:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011f9a:	2d19      	cmp	r5, #25
 8011f9c:	bf98      	it	ls
 8011f9e:	3220      	addls	r2, #32
 8011fa0:	42a2      	cmp	r2, r4
 8011fa2:	d0f0      	beq.n	8011f86 <__match+0x6>
 8011fa4:	2000      	movs	r0, #0
 8011fa6:	e7f3      	b.n	8011f90 <__match+0x10>

08011fa8 <__hexnan>:
 8011fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fac:	680b      	ldr	r3, [r1, #0]
 8011fae:	115e      	asrs	r6, r3, #5
 8011fb0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011fb4:	f013 031f 	ands.w	r3, r3, #31
 8011fb8:	b087      	sub	sp, #28
 8011fba:	bf18      	it	ne
 8011fbc:	3604      	addne	r6, #4
 8011fbe:	2500      	movs	r5, #0
 8011fc0:	1f37      	subs	r7, r6, #4
 8011fc2:	4690      	mov	r8, r2
 8011fc4:	6802      	ldr	r2, [r0, #0]
 8011fc6:	9301      	str	r3, [sp, #4]
 8011fc8:	4682      	mov	sl, r0
 8011fca:	f846 5c04 	str.w	r5, [r6, #-4]
 8011fce:	46b9      	mov	r9, r7
 8011fd0:	463c      	mov	r4, r7
 8011fd2:	9502      	str	r5, [sp, #8]
 8011fd4:	46ab      	mov	fp, r5
 8011fd6:	7851      	ldrb	r1, [r2, #1]
 8011fd8:	1c53      	adds	r3, r2, #1
 8011fda:	9303      	str	r3, [sp, #12]
 8011fdc:	b341      	cbz	r1, 8012030 <__hexnan+0x88>
 8011fde:	4608      	mov	r0, r1
 8011fe0:	9205      	str	r2, [sp, #20]
 8011fe2:	9104      	str	r1, [sp, #16]
 8011fe4:	f7ff fd5f 	bl	8011aa6 <__hexdig_fun>
 8011fe8:	2800      	cmp	r0, #0
 8011fea:	d14f      	bne.n	801208c <__hexnan+0xe4>
 8011fec:	9904      	ldr	r1, [sp, #16]
 8011fee:	9a05      	ldr	r2, [sp, #20]
 8011ff0:	2920      	cmp	r1, #32
 8011ff2:	d818      	bhi.n	8012026 <__hexnan+0x7e>
 8011ff4:	9b02      	ldr	r3, [sp, #8]
 8011ff6:	459b      	cmp	fp, r3
 8011ff8:	dd13      	ble.n	8012022 <__hexnan+0x7a>
 8011ffa:	454c      	cmp	r4, r9
 8011ffc:	d206      	bcs.n	801200c <__hexnan+0x64>
 8011ffe:	2d07      	cmp	r5, #7
 8012000:	dc04      	bgt.n	801200c <__hexnan+0x64>
 8012002:	462a      	mov	r2, r5
 8012004:	4649      	mov	r1, r9
 8012006:	4620      	mov	r0, r4
 8012008:	f7ff ffa8 	bl	8011f5c <L_shift>
 801200c:	4544      	cmp	r4, r8
 801200e:	d950      	bls.n	80120b2 <__hexnan+0x10a>
 8012010:	2300      	movs	r3, #0
 8012012:	f1a4 0904 	sub.w	r9, r4, #4
 8012016:	f844 3c04 	str.w	r3, [r4, #-4]
 801201a:	f8cd b008 	str.w	fp, [sp, #8]
 801201e:	464c      	mov	r4, r9
 8012020:	461d      	mov	r5, r3
 8012022:	9a03      	ldr	r2, [sp, #12]
 8012024:	e7d7      	b.n	8011fd6 <__hexnan+0x2e>
 8012026:	2929      	cmp	r1, #41	; 0x29
 8012028:	d156      	bne.n	80120d8 <__hexnan+0x130>
 801202a:	3202      	adds	r2, #2
 801202c:	f8ca 2000 	str.w	r2, [sl]
 8012030:	f1bb 0f00 	cmp.w	fp, #0
 8012034:	d050      	beq.n	80120d8 <__hexnan+0x130>
 8012036:	454c      	cmp	r4, r9
 8012038:	d206      	bcs.n	8012048 <__hexnan+0xa0>
 801203a:	2d07      	cmp	r5, #7
 801203c:	dc04      	bgt.n	8012048 <__hexnan+0xa0>
 801203e:	462a      	mov	r2, r5
 8012040:	4649      	mov	r1, r9
 8012042:	4620      	mov	r0, r4
 8012044:	f7ff ff8a 	bl	8011f5c <L_shift>
 8012048:	4544      	cmp	r4, r8
 801204a:	d934      	bls.n	80120b6 <__hexnan+0x10e>
 801204c:	f1a8 0204 	sub.w	r2, r8, #4
 8012050:	4623      	mov	r3, r4
 8012052:	f853 1b04 	ldr.w	r1, [r3], #4
 8012056:	f842 1f04 	str.w	r1, [r2, #4]!
 801205a:	429f      	cmp	r7, r3
 801205c:	d2f9      	bcs.n	8012052 <__hexnan+0xaa>
 801205e:	1b3b      	subs	r3, r7, r4
 8012060:	f023 0303 	bic.w	r3, r3, #3
 8012064:	3304      	adds	r3, #4
 8012066:	3401      	adds	r4, #1
 8012068:	3e03      	subs	r6, #3
 801206a:	42b4      	cmp	r4, r6
 801206c:	bf88      	it	hi
 801206e:	2304      	movhi	r3, #4
 8012070:	4443      	add	r3, r8
 8012072:	2200      	movs	r2, #0
 8012074:	f843 2b04 	str.w	r2, [r3], #4
 8012078:	429f      	cmp	r7, r3
 801207a:	d2fb      	bcs.n	8012074 <__hexnan+0xcc>
 801207c:	683b      	ldr	r3, [r7, #0]
 801207e:	b91b      	cbnz	r3, 8012088 <__hexnan+0xe0>
 8012080:	4547      	cmp	r7, r8
 8012082:	d127      	bne.n	80120d4 <__hexnan+0x12c>
 8012084:	2301      	movs	r3, #1
 8012086:	603b      	str	r3, [r7, #0]
 8012088:	2005      	movs	r0, #5
 801208a:	e026      	b.n	80120da <__hexnan+0x132>
 801208c:	3501      	adds	r5, #1
 801208e:	2d08      	cmp	r5, #8
 8012090:	f10b 0b01 	add.w	fp, fp, #1
 8012094:	dd06      	ble.n	80120a4 <__hexnan+0xfc>
 8012096:	4544      	cmp	r4, r8
 8012098:	d9c3      	bls.n	8012022 <__hexnan+0x7a>
 801209a:	2300      	movs	r3, #0
 801209c:	f844 3c04 	str.w	r3, [r4, #-4]
 80120a0:	2501      	movs	r5, #1
 80120a2:	3c04      	subs	r4, #4
 80120a4:	6822      	ldr	r2, [r4, #0]
 80120a6:	f000 000f 	and.w	r0, r0, #15
 80120aa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80120ae:	6022      	str	r2, [r4, #0]
 80120b0:	e7b7      	b.n	8012022 <__hexnan+0x7a>
 80120b2:	2508      	movs	r5, #8
 80120b4:	e7b5      	b.n	8012022 <__hexnan+0x7a>
 80120b6:	9b01      	ldr	r3, [sp, #4]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d0df      	beq.n	801207c <__hexnan+0xd4>
 80120bc:	f04f 32ff 	mov.w	r2, #4294967295
 80120c0:	f1c3 0320 	rsb	r3, r3, #32
 80120c4:	fa22 f303 	lsr.w	r3, r2, r3
 80120c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80120cc:	401a      	ands	r2, r3
 80120ce:	f846 2c04 	str.w	r2, [r6, #-4]
 80120d2:	e7d3      	b.n	801207c <__hexnan+0xd4>
 80120d4:	3f04      	subs	r7, #4
 80120d6:	e7d1      	b.n	801207c <__hexnan+0xd4>
 80120d8:	2004      	movs	r0, #4
 80120da:	b007      	add	sp, #28
 80120dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080120e0 <_localeconv_r>:
 80120e0:	4800      	ldr	r0, [pc, #0]	; (80120e4 <_localeconv_r+0x4>)
 80120e2:	4770      	bx	lr
 80120e4:	20000204 	.word	0x20000204

080120e8 <__retarget_lock_init_recursive>:
 80120e8:	4770      	bx	lr

080120ea <__retarget_lock_acquire_recursive>:
 80120ea:	4770      	bx	lr

080120ec <__retarget_lock_release_recursive>:
 80120ec:	4770      	bx	lr

080120ee <__swhatbuf_r>:
 80120ee:	b570      	push	{r4, r5, r6, lr}
 80120f0:	460e      	mov	r6, r1
 80120f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120f6:	2900      	cmp	r1, #0
 80120f8:	b096      	sub	sp, #88	; 0x58
 80120fa:	4614      	mov	r4, r2
 80120fc:	461d      	mov	r5, r3
 80120fe:	da08      	bge.n	8012112 <__swhatbuf_r+0x24>
 8012100:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012104:	2200      	movs	r2, #0
 8012106:	602a      	str	r2, [r5, #0]
 8012108:	061a      	lsls	r2, r3, #24
 801210a:	d410      	bmi.n	801212e <__swhatbuf_r+0x40>
 801210c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012110:	e00e      	b.n	8012130 <__swhatbuf_r+0x42>
 8012112:	466a      	mov	r2, sp
 8012114:	f001 f8a6 	bl	8013264 <_fstat_r>
 8012118:	2800      	cmp	r0, #0
 801211a:	dbf1      	blt.n	8012100 <__swhatbuf_r+0x12>
 801211c:	9a01      	ldr	r2, [sp, #4]
 801211e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012122:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012126:	425a      	negs	r2, r3
 8012128:	415a      	adcs	r2, r3
 801212a:	602a      	str	r2, [r5, #0]
 801212c:	e7ee      	b.n	801210c <__swhatbuf_r+0x1e>
 801212e:	2340      	movs	r3, #64	; 0x40
 8012130:	2000      	movs	r0, #0
 8012132:	6023      	str	r3, [r4, #0]
 8012134:	b016      	add	sp, #88	; 0x58
 8012136:	bd70      	pop	{r4, r5, r6, pc}

08012138 <__smakebuf_r>:
 8012138:	898b      	ldrh	r3, [r1, #12]
 801213a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801213c:	079d      	lsls	r5, r3, #30
 801213e:	4606      	mov	r6, r0
 8012140:	460c      	mov	r4, r1
 8012142:	d507      	bpl.n	8012154 <__smakebuf_r+0x1c>
 8012144:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012148:	6023      	str	r3, [r4, #0]
 801214a:	6123      	str	r3, [r4, #16]
 801214c:	2301      	movs	r3, #1
 801214e:	6163      	str	r3, [r4, #20]
 8012150:	b002      	add	sp, #8
 8012152:	bd70      	pop	{r4, r5, r6, pc}
 8012154:	ab01      	add	r3, sp, #4
 8012156:	466a      	mov	r2, sp
 8012158:	f7ff ffc9 	bl	80120ee <__swhatbuf_r>
 801215c:	9900      	ldr	r1, [sp, #0]
 801215e:	4605      	mov	r5, r0
 8012160:	4630      	mov	r0, r6
 8012162:	f7fc fcdf 	bl	800eb24 <_malloc_r>
 8012166:	b948      	cbnz	r0, 801217c <__smakebuf_r+0x44>
 8012168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801216c:	059a      	lsls	r2, r3, #22
 801216e:	d4ef      	bmi.n	8012150 <__smakebuf_r+0x18>
 8012170:	f023 0303 	bic.w	r3, r3, #3
 8012174:	f043 0302 	orr.w	r3, r3, #2
 8012178:	81a3      	strh	r3, [r4, #12]
 801217a:	e7e3      	b.n	8012144 <__smakebuf_r+0xc>
 801217c:	4b0d      	ldr	r3, [pc, #52]	; (80121b4 <__smakebuf_r+0x7c>)
 801217e:	62b3      	str	r3, [r6, #40]	; 0x28
 8012180:	89a3      	ldrh	r3, [r4, #12]
 8012182:	6020      	str	r0, [r4, #0]
 8012184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012188:	81a3      	strh	r3, [r4, #12]
 801218a:	9b00      	ldr	r3, [sp, #0]
 801218c:	6163      	str	r3, [r4, #20]
 801218e:	9b01      	ldr	r3, [sp, #4]
 8012190:	6120      	str	r0, [r4, #16]
 8012192:	b15b      	cbz	r3, 80121ac <__smakebuf_r+0x74>
 8012194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012198:	4630      	mov	r0, r6
 801219a:	f001 f875 	bl	8013288 <_isatty_r>
 801219e:	b128      	cbz	r0, 80121ac <__smakebuf_r+0x74>
 80121a0:	89a3      	ldrh	r3, [r4, #12]
 80121a2:	f023 0303 	bic.w	r3, r3, #3
 80121a6:	f043 0301 	orr.w	r3, r3, #1
 80121aa:	81a3      	strh	r3, [r4, #12]
 80121ac:	89a0      	ldrh	r0, [r4, #12]
 80121ae:	4305      	orrs	r5, r0
 80121b0:	81a5      	strh	r5, [r4, #12]
 80121b2:	e7cd      	b.n	8012150 <__smakebuf_r+0x18>
 80121b4:	08011861 	.word	0x08011861

080121b8 <__ascii_mbtowc>:
 80121b8:	b082      	sub	sp, #8
 80121ba:	b901      	cbnz	r1, 80121be <__ascii_mbtowc+0x6>
 80121bc:	a901      	add	r1, sp, #4
 80121be:	b142      	cbz	r2, 80121d2 <__ascii_mbtowc+0x1a>
 80121c0:	b14b      	cbz	r3, 80121d6 <__ascii_mbtowc+0x1e>
 80121c2:	7813      	ldrb	r3, [r2, #0]
 80121c4:	600b      	str	r3, [r1, #0]
 80121c6:	7812      	ldrb	r2, [r2, #0]
 80121c8:	1e10      	subs	r0, r2, #0
 80121ca:	bf18      	it	ne
 80121cc:	2001      	movne	r0, #1
 80121ce:	b002      	add	sp, #8
 80121d0:	4770      	bx	lr
 80121d2:	4610      	mov	r0, r2
 80121d4:	e7fb      	b.n	80121ce <__ascii_mbtowc+0x16>
 80121d6:	f06f 0001 	mvn.w	r0, #1
 80121da:	e7f8      	b.n	80121ce <__ascii_mbtowc+0x16>

080121dc <__malloc_lock>:
 80121dc:	4801      	ldr	r0, [pc, #4]	; (80121e4 <__malloc_lock+0x8>)
 80121de:	f7ff bf84 	b.w	80120ea <__retarget_lock_acquire_recursive>
 80121e2:	bf00      	nop
 80121e4:	20003958 	.word	0x20003958

080121e8 <__malloc_unlock>:
 80121e8:	4801      	ldr	r0, [pc, #4]	; (80121f0 <__malloc_unlock+0x8>)
 80121ea:	f7ff bf7f 	b.w	80120ec <__retarget_lock_release_recursive>
 80121ee:	bf00      	nop
 80121f0:	20003958 	.word	0x20003958

080121f4 <_Balloc>:
 80121f4:	b570      	push	{r4, r5, r6, lr}
 80121f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80121f8:	4604      	mov	r4, r0
 80121fa:	460d      	mov	r5, r1
 80121fc:	b976      	cbnz	r6, 801221c <_Balloc+0x28>
 80121fe:	2010      	movs	r0, #16
 8012200:	f7fc fbfe 	bl	800ea00 <malloc>
 8012204:	4602      	mov	r2, r0
 8012206:	6260      	str	r0, [r4, #36]	; 0x24
 8012208:	b920      	cbnz	r0, 8012214 <_Balloc+0x20>
 801220a:	4b18      	ldr	r3, [pc, #96]	; (801226c <_Balloc+0x78>)
 801220c:	4818      	ldr	r0, [pc, #96]	; (8012270 <_Balloc+0x7c>)
 801220e:	2166      	movs	r1, #102	; 0x66
 8012210:	f000 ffe8 	bl	80131e4 <__assert_func>
 8012214:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012218:	6006      	str	r6, [r0, #0]
 801221a:	60c6      	str	r6, [r0, #12]
 801221c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801221e:	68f3      	ldr	r3, [r6, #12]
 8012220:	b183      	cbz	r3, 8012244 <_Balloc+0x50>
 8012222:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012224:	68db      	ldr	r3, [r3, #12]
 8012226:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801222a:	b9b8      	cbnz	r0, 801225c <_Balloc+0x68>
 801222c:	2101      	movs	r1, #1
 801222e:	fa01 f605 	lsl.w	r6, r1, r5
 8012232:	1d72      	adds	r2, r6, #5
 8012234:	0092      	lsls	r2, r2, #2
 8012236:	4620      	mov	r0, r4
 8012238:	f000 fc9d 	bl	8012b76 <_calloc_r>
 801223c:	b160      	cbz	r0, 8012258 <_Balloc+0x64>
 801223e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012242:	e00e      	b.n	8012262 <_Balloc+0x6e>
 8012244:	2221      	movs	r2, #33	; 0x21
 8012246:	2104      	movs	r1, #4
 8012248:	4620      	mov	r0, r4
 801224a:	f000 fc94 	bl	8012b76 <_calloc_r>
 801224e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012250:	60f0      	str	r0, [r6, #12]
 8012252:	68db      	ldr	r3, [r3, #12]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d1e4      	bne.n	8012222 <_Balloc+0x2e>
 8012258:	2000      	movs	r0, #0
 801225a:	bd70      	pop	{r4, r5, r6, pc}
 801225c:	6802      	ldr	r2, [r0, #0]
 801225e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012262:	2300      	movs	r3, #0
 8012264:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012268:	e7f7      	b.n	801225a <_Balloc+0x66>
 801226a:	bf00      	nop
 801226c:	080142fe 	.word	0x080142fe
 8012270:	08014460 	.word	0x08014460

08012274 <_Bfree>:
 8012274:	b570      	push	{r4, r5, r6, lr}
 8012276:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012278:	4605      	mov	r5, r0
 801227a:	460c      	mov	r4, r1
 801227c:	b976      	cbnz	r6, 801229c <_Bfree+0x28>
 801227e:	2010      	movs	r0, #16
 8012280:	f7fc fbbe 	bl	800ea00 <malloc>
 8012284:	4602      	mov	r2, r0
 8012286:	6268      	str	r0, [r5, #36]	; 0x24
 8012288:	b920      	cbnz	r0, 8012294 <_Bfree+0x20>
 801228a:	4b09      	ldr	r3, [pc, #36]	; (80122b0 <_Bfree+0x3c>)
 801228c:	4809      	ldr	r0, [pc, #36]	; (80122b4 <_Bfree+0x40>)
 801228e:	218a      	movs	r1, #138	; 0x8a
 8012290:	f000 ffa8 	bl	80131e4 <__assert_func>
 8012294:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012298:	6006      	str	r6, [r0, #0]
 801229a:	60c6      	str	r6, [r0, #12]
 801229c:	b13c      	cbz	r4, 80122ae <_Bfree+0x3a>
 801229e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80122a0:	6862      	ldr	r2, [r4, #4]
 80122a2:	68db      	ldr	r3, [r3, #12]
 80122a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80122a8:	6021      	str	r1, [r4, #0]
 80122aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80122ae:	bd70      	pop	{r4, r5, r6, pc}
 80122b0:	080142fe 	.word	0x080142fe
 80122b4:	08014460 	.word	0x08014460

080122b8 <__multadd>:
 80122b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122bc:	690d      	ldr	r5, [r1, #16]
 80122be:	4607      	mov	r7, r0
 80122c0:	460c      	mov	r4, r1
 80122c2:	461e      	mov	r6, r3
 80122c4:	f101 0c14 	add.w	ip, r1, #20
 80122c8:	2000      	movs	r0, #0
 80122ca:	f8dc 3000 	ldr.w	r3, [ip]
 80122ce:	b299      	uxth	r1, r3
 80122d0:	fb02 6101 	mla	r1, r2, r1, r6
 80122d4:	0c1e      	lsrs	r6, r3, #16
 80122d6:	0c0b      	lsrs	r3, r1, #16
 80122d8:	fb02 3306 	mla	r3, r2, r6, r3
 80122dc:	b289      	uxth	r1, r1
 80122de:	3001      	adds	r0, #1
 80122e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80122e4:	4285      	cmp	r5, r0
 80122e6:	f84c 1b04 	str.w	r1, [ip], #4
 80122ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80122ee:	dcec      	bgt.n	80122ca <__multadd+0x12>
 80122f0:	b30e      	cbz	r6, 8012336 <__multadd+0x7e>
 80122f2:	68a3      	ldr	r3, [r4, #8]
 80122f4:	42ab      	cmp	r3, r5
 80122f6:	dc19      	bgt.n	801232c <__multadd+0x74>
 80122f8:	6861      	ldr	r1, [r4, #4]
 80122fa:	4638      	mov	r0, r7
 80122fc:	3101      	adds	r1, #1
 80122fe:	f7ff ff79 	bl	80121f4 <_Balloc>
 8012302:	4680      	mov	r8, r0
 8012304:	b928      	cbnz	r0, 8012312 <__multadd+0x5a>
 8012306:	4602      	mov	r2, r0
 8012308:	4b0c      	ldr	r3, [pc, #48]	; (801233c <__multadd+0x84>)
 801230a:	480d      	ldr	r0, [pc, #52]	; (8012340 <__multadd+0x88>)
 801230c:	21b5      	movs	r1, #181	; 0xb5
 801230e:	f000 ff69 	bl	80131e4 <__assert_func>
 8012312:	6922      	ldr	r2, [r4, #16]
 8012314:	3202      	adds	r2, #2
 8012316:	f104 010c 	add.w	r1, r4, #12
 801231a:	0092      	lsls	r2, r2, #2
 801231c:	300c      	adds	r0, #12
 801231e:	f7fc fb7f 	bl	800ea20 <memcpy>
 8012322:	4621      	mov	r1, r4
 8012324:	4638      	mov	r0, r7
 8012326:	f7ff ffa5 	bl	8012274 <_Bfree>
 801232a:	4644      	mov	r4, r8
 801232c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012330:	3501      	adds	r5, #1
 8012332:	615e      	str	r6, [r3, #20]
 8012334:	6125      	str	r5, [r4, #16]
 8012336:	4620      	mov	r0, r4
 8012338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801233c:	08014370 	.word	0x08014370
 8012340:	08014460 	.word	0x08014460

08012344 <__s2b>:
 8012344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012348:	460c      	mov	r4, r1
 801234a:	4615      	mov	r5, r2
 801234c:	461f      	mov	r7, r3
 801234e:	2209      	movs	r2, #9
 8012350:	3308      	adds	r3, #8
 8012352:	4606      	mov	r6, r0
 8012354:	fb93 f3f2 	sdiv	r3, r3, r2
 8012358:	2100      	movs	r1, #0
 801235a:	2201      	movs	r2, #1
 801235c:	429a      	cmp	r2, r3
 801235e:	db09      	blt.n	8012374 <__s2b+0x30>
 8012360:	4630      	mov	r0, r6
 8012362:	f7ff ff47 	bl	80121f4 <_Balloc>
 8012366:	b940      	cbnz	r0, 801237a <__s2b+0x36>
 8012368:	4602      	mov	r2, r0
 801236a:	4b19      	ldr	r3, [pc, #100]	; (80123d0 <__s2b+0x8c>)
 801236c:	4819      	ldr	r0, [pc, #100]	; (80123d4 <__s2b+0x90>)
 801236e:	21ce      	movs	r1, #206	; 0xce
 8012370:	f000 ff38 	bl	80131e4 <__assert_func>
 8012374:	0052      	lsls	r2, r2, #1
 8012376:	3101      	adds	r1, #1
 8012378:	e7f0      	b.n	801235c <__s2b+0x18>
 801237a:	9b08      	ldr	r3, [sp, #32]
 801237c:	6143      	str	r3, [r0, #20]
 801237e:	2d09      	cmp	r5, #9
 8012380:	f04f 0301 	mov.w	r3, #1
 8012384:	6103      	str	r3, [r0, #16]
 8012386:	dd16      	ble.n	80123b6 <__s2b+0x72>
 8012388:	f104 0909 	add.w	r9, r4, #9
 801238c:	46c8      	mov	r8, r9
 801238e:	442c      	add	r4, r5
 8012390:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012394:	4601      	mov	r1, r0
 8012396:	3b30      	subs	r3, #48	; 0x30
 8012398:	220a      	movs	r2, #10
 801239a:	4630      	mov	r0, r6
 801239c:	f7ff ff8c 	bl	80122b8 <__multadd>
 80123a0:	45a0      	cmp	r8, r4
 80123a2:	d1f5      	bne.n	8012390 <__s2b+0x4c>
 80123a4:	f1a5 0408 	sub.w	r4, r5, #8
 80123a8:	444c      	add	r4, r9
 80123aa:	1b2d      	subs	r5, r5, r4
 80123ac:	1963      	adds	r3, r4, r5
 80123ae:	42bb      	cmp	r3, r7
 80123b0:	db04      	blt.n	80123bc <__s2b+0x78>
 80123b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123b6:	340a      	adds	r4, #10
 80123b8:	2509      	movs	r5, #9
 80123ba:	e7f6      	b.n	80123aa <__s2b+0x66>
 80123bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80123c0:	4601      	mov	r1, r0
 80123c2:	3b30      	subs	r3, #48	; 0x30
 80123c4:	220a      	movs	r2, #10
 80123c6:	4630      	mov	r0, r6
 80123c8:	f7ff ff76 	bl	80122b8 <__multadd>
 80123cc:	e7ee      	b.n	80123ac <__s2b+0x68>
 80123ce:	bf00      	nop
 80123d0:	08014370 	.word	0x08014370
 80123d4:	08014460 	.word	0x08014460

080123d8 <__hi0bits>:
 80123d8:	0c03      	lsrs	r3, r0, #16
 80123da:	041b      	lsls	r3, r3, #16
 80123dc:	b9d3      	cbnz	r3, 8012414 <__hi0bits+0x3c>
 80123de:	0400      	lsls	r0, r0, #16
 80123e0:	2310      	movs	r3, #16
 80123e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80123e6:	bf04      	itt	eq
 80123e8:	0200      	lsleq	r0, r0, #8
 80123ea:	3308      	addeq	r3, #8
 80123ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80123f0:	bf04      	itt	eq
 80123f2:	0100      	lsleq	r0, r0, #4
 80123f4:	3304      	addeq	r3, #4
 80123f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80123fa:	bf04      	itt	eq
 80123fc:	0080      	lsleq	r0, r0, #2
 80123fe:	3302      	addeq	r3, #2
 8012400:	2800      	cmp	r0, #0
 8012402:	db05      	blt.n	8012410 <__hi0bits+0x38>
 8012404:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012408:	f103 0301 	add.w	r3, r3, #1
 801240c:	bf08      	it	eq
 801240e:	2320      	moveq	r3, #32
 8012410:	4618      	mov	r0, r3
 8012412:	4770      	bx	lr
 8012414:	2300      	movs	r3, #0
 8012416:	e7e4      	b.n	80123e2 <__hi0bits+0xa>

08012418 <__lo0bits>:
 8012418:	6803      	ldr	r3, [r0, #0]
 801241a:	f013 0207 	ands.w	r2, r3, #7
 801241e:	4601      	mov	r1, r0
 8012420:	d00b      	beq.n	801243a <__lo0bits+0x22>
 8012422:	07da      	lsls	r2, r3, #31
 8012424:	d423      	bmi.n	801246e <__lo0bits+0x56>
 8012426:	0798      	lsls	r0, r3, #30
 8012428:	bf49      	itett	mi
 801242a:	085b      	lsrmi	r3, r3, #1
 801242c:	089b      	lsrpl	r3, r3, #2
 801242e:	2001      	movmi	r0, #1
 8012430:	600b      	strmi	r3, [r1, #0]
 8012432:	bf5c      	itt	pl
 8012434:	600b      	strpl	r3, [r1, #0]
 8012436:	2002      	movpl	r0, #2
 8012438:	4770      	bx	lr
 801243a:	b298      	uxth	r0, r3
 801243c:	b9a8      	cbnz	r0, 801246a <__lo0bits+0x52>
 801243e:	0c1b      	lsrs	r3, r3, #16
 8012440:	2010      	movs	r0, #16
 8012442:	b2da      	uxtb	r2, r3
 8012444:	b90a      	cbnz	r2, 801244a <__lo0bits+0x32>
 8012446:	3008      	adds	r0, #8
 8012448:	0a1b      	lsrs	r3, r3, #8
 801244a:	071a      	lsls	r2, r3, #28
 801244c:	bf04      	itt	eq
 801244e:	091b      	lsreq	r3, r3, #4
 8012450:	3004      	addeq	r0, #4
 8012452:	079a      	lsls	r2, r3, #30
 8012454:	bf04      	itt	eq
 8012456:	089b      	lsreq	r3, r3, #2
 8012458:	3002      	addeq	r0, #2
 801245a:	07da      	lsls	r2, r3, #31
 801245c:	d403      	bmi.n	8012466 <__lo0bits+0x4e>
 801245e:	085b      	lsrs	r3, r3, #1
 8012460:	f100 0001 	add.w	r0, r0, #1
 8012464:	d005      	beq.n	8012472 <__lo0bits+0x5a>
 8012466:	600b      	str	r3, [r1, #0]
 8012468:	4770      	bx	lr
 801246a:	4610      	mov	r0, r2
 801246c:	e7e9      	b.n	8012442 <__lo0bits+0x2a>
 801246e:	2000      	movs	r0, #0
 8012470:	4770      	bx	lr
 8012472:	2020      	movs	r0, #32
 8012474:	4770      	bx	lr
	...

08012478 <__i2b>:
 8012478:	b510      	push	{r4, lr}
 801247a:	460c      	mov	r4, r1
 801247c:	2101      	movs	r1, #1
 801247e:	f7ff feb9 	bl	80121f4 <_Balloc>
 8012482:	4602      	mov	r2, r0
 8012484:	b928      	cbnz	r0, 8012492 <__i2b+0x1a>
 8012486:	4b05      	ldr	r3, [pc, #20]	; (801249c <__i2b+0x24>)
 8012488:	4805      	ldr	r0, [pc, #20]	; (80124a0 <__i2b+0x28>)
 801248a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801248e:	f000 fea9 	bl	80131e4 <__assert_func>
 8012492:	2301      	movs	r3, #1
 8012494:	6144      	str	r4, [r0, #20]
 8012496:	6103      	str	r3, [r0, #16]
 8012498:	bd10      	pop	{r4, pc}
 801249a:	bf00      	nop
 801249c:	08014370 	.word	0x08014370
 80124a0:	08014460 	.word	0x08014460

080124a4 <__multiply>:
 80124a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124a8:	4691      	mov	r9, r2
 80124aa:	690a      	ldr	r2, [r1, #16]
 80124ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80124b0:	429a      	cmp	r2, r3
 80124b2:	bfb8      	it	lt
 80124b4:	460b      	movlt	r3, r1
 80124b6:	460c      	mov	r4, r1
 80124b8:	bfbc      	itt	lt
 80124ba:	464c      	movlt	r4, r9
 80124bc:	4699      	movlt	r9, r3
 80124be:	6927      	ldr	r7, [r4, #16]
 80124c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80124c4:	68a3      	ldr	r3, [r4, #8]
 80124c6:	6861      	ldr	r1, [r4, #4]
 80124c8:	eb07 060a 	add.w	r6, r7, sl
 80124cc:	42b3      	cmp	r3, r6
 80124ce:	b085      	sub	sp, #20
 80124d0:	bfb8      	it	lt
 80124d2:	3101      	addlt	r1, #1
 80124d4:	f7ff fe8e 	bl	80121f4 <_Balloc>
 80124d8:	b930      	cbnz	r0, 80124e8 <__multiply+0x44>
 80124da:	4602      	mov	r2, r0
 80124dc:	4b44      	ldr	r3, [pc, #272]	; (80125f0 <__multiply+0x14c>)
 80124de:	4845      	ldr	r0, [pc, #276]	; (80125f4 <__multiply+0x150>)
 80124e0:	f240 115d 	movw	r1, #349	; 0x15d
 80124e4:	f000 fe7e 	bl	80131e4 <__assert_func>
 80124e8:	f100 0514 	add.w	r5, r0, #20
 80124ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80124f0:	462b      	mov	r3, r5
 80124f2:	2200      	movs	r2, #0
 80124f4:	4543      	cmp	r3, r8
 80124f6:	d321      	bcc.n	801253c <__multiply+0x98>
 80124f8:	f104 0314 	add.w	r3, r4, #20
 80124fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012500:	f109 0314 	add.w	r3, r9, #20
 8012504:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012508:	9202      	str	r2, [sp, #8]
 801250a:	1b3a      	subs	r2, r7, r4
 801250c:	3a15      	subs	r2, #21
 801250e:	f022 0203 	bic.w	r2, r2, #3
 8012512:	3204      	adds	r2, #4
 8012514:	f104 0115 	add.w	r1, r4, #21
 8012518:	428f      	cmp	r7, r1
 801251a:	bf38      	it	cc
 801251c:	2204      	movcc	r2, #4
 801251e:	9201      	str	r2, [sp, #4]
 8012520:	9a02      	ldr	r2, [sp, #8]
 8012522:	9303      	str	r3, [sp, #12]
 8012524:	429a      	cmp	r2, r3
 8012526:	d80c      	bhi.n	8012542 <__multiply+0x9e>
 8012528:	2e00      	cmp	r6, #0
 801252a:	dd03      	ble.n	8012534 <__multiply+0x90>
 801252c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012530:	2b00      	cmp	r3, #0
 8012532:	d05a      	beq.n	80125ea <__multiply+0x146>
 8012534:	6106      	str	r6, [r0, #16]
 8012536:	b005      	add	sp, #20
 8012538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801253c:	f843 2b04 	str.w	r2, [r3], #4
 8012540:	e7d8      	b.n	80124f4 <__multiply+0x50>
 8012542:	f8b3 a000 	ldrh.w	sl, [r3]
 8012546:	f1ba 0f00 	cmp.w	sl, #0
 801254a:	d024      	beq.n	8012596 <__multiply+0xf2>
 801254c:	f104 0e14 	add.w	lr, r4, #20
 8012550:	46a9      	mov	r9, r5
 8012552:	f04f 0c00 	mov.w	ip, #0
 8012556:	f85e 2b04 	ldr.w	r2, [lr], #4
 801255a:	f8d9 1000 	ldr.w	r1, [r9]
 801255e:	fa1f fb82 	uxth.w	fp, r2
 8012562:	b289      	uxth	r1, r1
 8012564:	fb0a 110b 	mla	r1, sl, fp, r1
 8012568:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801256c:	f8d9 2000 	ldr.w	r2, [r9]
 8012570:	4461      	add	r1, ip
 8012572:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012576:	fb0a c20b 	mla	r2, sl, fp, ip
 801257a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801257e:	b289      	uxth	r1, r1
 8012580:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012584:	4577      	cmp	r7, lr
 8012586:	f849 1b04 	str.w	r1, [r9], #4
 801258a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801258e:	d8e2      	bhi.n	8012556 <__multiply+0xb2>
 8012590:	9a01      	ldr	r2, [sp, #4]
 8012592:	f845 c002 	str.w	ip, [r5, r2]
 8012596:	9a03      	ldr	r2, [sp, #12]
 8012598:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801259c:	3304      	adds	r3, #4
 801259e:	f1b9 0f00 	cmp.w	r9, #0
 80125a2:	d020      	beq.n	80125e6 <__multiply+0x142>
 80125a4:	6829      	ldr	r1, [r5, #0]
 80125a6:	f104 0c14 	add.w	ip, r4, #20
 80125aa:	46ae      	mov	lr, r5
 80125ac:	f04f 0a00 	mov.w	sl, #0
 80125b0:	f8bc b000 	ldrh.w	fp, [ip]
 80125b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80125b8:	fb09 220b 	mla	r2, r9, fp, r2
 80125bc:	4492      	add	sl, r2
 80125be:	b289      	uxth	r1, r1
 80125c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80125c4:	f84e 1b04 	str.w	r1, [lr], #4
 80125c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80125cc:	f8be 1000 	ldrh.w	r1, [lr]
 80125d0:	0c12      	lsrs	r2, r2, #16
 80125d2:	fb09 1102 	mla	r1, r9, r2, r1
 80125d6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80125da:	4567      	cmp	r7, ip
 80125dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80125e0:	d8e6      	bhi.n	80125b0 <__multiply+0x10c>
 80125e2:	9a01      	ldr	r2, [sp, #4]
 80125e4:	50a9      	str	r1, [r5, r2]
 80125e6:	3504      	adds	r5, #4
 80125e8:	e79a      	b.n	8012520 <__multiply+0x7c>
 80125ea:	3e01      	subs	r6, #1
 80125ec:	e79c      	b.n	8012528 <__multiply+0x84>
 80125ee:	bf00      	nop
 80125f0:	08014370 	.word	0x08014370
 80125f4:	08014460 	.word	0x08014460

080125f8 <__pow5mult>:
 80125f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80125fc:	4615      	mov	r5, r2
 80125fe:	f012 0203 	ands.w	r2, r2, #3
 8012602:	4606      	mov	r6, r0
 8012604:	460f      	mov	r7, r1
 8012606:	d007      	beq.n	8012618 <__pow5mult+0x20>
 8012608:	4c25      	ldr	r4, [pc, #148]	; (80126a0 <__pow5mult+0xa8>)
 801260a:	3a01      	subs	r2, #1
 801260c:	2300      	movs	r3, #0
 801260e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012612:	f7ff fe51 	bl	80122b8 <__multadd>
 8012616:	4607      	mov	r7, r0
 8012618:	10ad      	asrs	r5, r5, #2
 801261a:	d03d      	beq.n	8012698 <__pow5mult+0xa0>
 801261c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801261e:	b97c      	cbnz	r4, 8012640 <__pow5mult+0x48>
 8012620:	2010      	movs	r0, #16
 8012622:	f7fc f9ed 	bl	800ea00 <malloc>
 8012626:	4602      	mov	r2, r0
 8012628:	6270      	str	r0, [r6, #36]	; 0x24
 801262a:	b928      	cbnz	r0, 8012638 <__pow5mult+0x40>
 801262c:	4b1d      	ldr	r3, [pc, #116]	; (80126a4 <__pow5mult+0xac>)
 801262e:	481e      	ldr	r0, [pc, #120]	; (80126a8 <__pow5mult+0xb0>)
 8012630:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012634:	f000 fdd6 	bl	80131e4 <__assert_func>
 8012638:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801263c:	6004      	str	r4, [r0, #0]
 801263e:	60c4      	str	r4, [r0, #12]
 8012640:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012644:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012648:	b94c      	cbnz	r4, 801265e <__pow5mult+0x66>
 801264a:	f240 2171 	movw	r1, #625	; 0x271
 801264e:	4630      	mov	r0, r6
 8012650:	f7ff ff12 	bl	8012478 <__i2b>
 8012654:	2300      	movs	r3, #0
 8012656:	f8c8 0008 	str.w	r0, [r8, #8]
 801265a:	4604      	mov	r4, r0
 801265c:	6003      	str	r3, [r0, #0]
 801265e:	f04f 0900 	mov.w	r9, #0
 8012662:	07eb      	lsls	r3, r5, #31
 8012664:	d50a      	bpl.n	801267c <__pow5mult+0x84>
 8012666:	4639      	mov	r1, r7
 8012668:	4622      	mov	r2, r4
 801266a:	4630      	mov	r0, r6
 801266c:	f7ff ff1a 	bl	80124a4 <__multiply>
 8012670:	4639      	mov	r1, r7
 8012672:	4680      	mov	r8, r0
 8012674:	4630      	mov	r0, r6
 8012676:	f7ff fdfd 	bl	8012274 <_Bfree>
 801267a:	4647      	mov	r7, r8
 801267c:	106d      	asrs	r5, r5, #1
 801267e:	d00b      	beq.n	8012698 <__pow5mult+0xa0>
 8012680:	6820      	ldr	r0, [r4, #0]
 8012682:	b938      	cbnz	r0, 8012694 <__pow5mult+0x9c>
 8012684:	4622      	mov	r2, r4
 8012686:	4621      	mov	r1, r4
 8012688:	4630      	mov	r0, r6
 801268a:	f7ff ff0b 	bl	80124a4 <__multiply>
 801268e:	6020      	str	r0, [r4, #0]
 8012690:	f8c0 9000 	str.w	r9, [r0]
 8012694:	4604      	mov	r4, r0
 8012696:	e7e4      	b.n	8012662 <__pow5mult+0x6a>
 8012698:	4638      	mov	r0, r7
 801269a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801269e:	bf00      	nop
 80126a0:	080145b0 	.word	0x080145b0
 80126a4:	080142fe 	.word	0x080142fe
 80126a8:	08014460 	.word	0x08014460

080126ac <__lshift>:
 80126ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126b0:	460c      	mov	r4, r1
 80126b2:	6849      	ldr	r1, [r1, #4]
 80126b4:	6923      	ldr	r3, [r4, #16]
 80126b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80126ba:	68a3      	ldr	r3, [r4, #8]
 80126bc:	4607      	mov	r7, r0
 80126be:	4691      	mov	r9, r2
 80126c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80126c4:	f108 0601 	add.w	r6, r8, #1
 80126c8:	42b3      	cmp	r3, r6
 80126ca:	db0b      	blt.n	80126e4 <__lshift+0x38>
 80126cc:	4638      	mov	r0, r7
 80126ce:	f7ff fd91 	bl	80121f4 <_Balloc>
 80126d2:	4605      	mov	r5, r0
 80126d4:	b948      	cbnz	r0, 80126ea <__lshift+0x3e>
 80126d6:	4602      	mov	r2, r0
 80126d8:	4b2a      	ldr	r3, [pc, #168]	; (8012784 <__lshift+0xd8>)
 80126da:	482b      	ldr	r0, [pc, #172]	; (8012788 <__lshift+0xdc>)
 80126dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80126e0:	f000 fd80 	bl	80131e4 <__assert_func>
 80126e4:	3101      	adds	r1, #1
 80126e6:	005b      	lsls	r3, r3, #1
 80126e8:	e7ee      	b.n	80126c8 <__lshift+0x1c>
 80126ea:	2300      	movs	r3, #0
 80126ec:	f100 0114 	add.w	r1, r0, #20
 80126f0:	f100 0210 	add.w	r2, r0, #16
 80126f4:	4618      	mov	r0, r3
 80126f6:	4553      	cmp	r3, sl
 80126f8:	db37      	blt.n	801276a <__lshift+0xbe>
 80126fa:	6920      	ldr	r0, [r4, #16]
 80126fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012700:	f104 0314 	add.w	r3, r4, #20
 8012704:	f019 091f 	ands.w	r9, r9, #31
 8012708:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801270c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012710:	d02f      	beq.n	8012772 <__lshift+0xc6>
 8012712:	f1c9 0e20 	rsb	lr, r9, #32
 8012716:	468a      	mov	sl, r1
 8012718:	f04f 0c00 	mov.w	ip, #0
 801271c:	681a      	ldr	r2, [r3, #0]
 801271e:	fa02 f209 	lsl.w	r2, r2, r9
 8012722:	ea42 020c 	orr.w	r2, r2, ip
 8012726:	f84a 2b04 	str.w	r2, [sl], #4
 801272a:	f853 2b04 	ldr.w	r2, [r3], #4
 801272e:	4298      	cmp	r0, r3
 8012730:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012734:	d8f2      	bhi.n	801271c <__lshift+0x70>
 8012736:	1b03      	subs	r3, r0, r4
 8012738:	3b15      	subs	r3, #21
 801273a:	f023 0303 	bic.w	r3, r3, #3
 801273e:	3304      	adds	r3, #4
 8012740:	f104 0215 	add.w	r2, r4, #21
 8012744:	4290      	cmp	r0, r2
 8012746:	bf38      	it	cc
 8012748:	2304      	movcc	r3, #4
 801274a:	f841 c003 	str.w	ip, [r1, r3]
 801274e:	f1bc 0f00 	cmp.w	ip, #0
 8012752:	d001      	beq.n	8012758 <__lshift+0xac>
 8012754:	f108 0602 	add.w	r6, r8, #2
 8012758:	3e01      	subs	r6, #1
 801275a:	4638      	mov	r0, r7
 801275c:	612e      	str	r6, [r5, #16]
 801275e:	4621      	mov	r1, r4
 8012760:	f7ff fd88 	bl	8012274 <_Bfree>
 8012764:	4628      	mov	r0, r5
 8012766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801276a:	f842 0f04 	str.w	r0, [r2, #4]!
 801276e:	3301      	adds	r3, #1
 8012770:	e7c1      	b.n	80126f6 <__lshift+0x4a>
 8012772:	3904      	subs	r1, #4
 8012774:	f853 2b04 	ldr.w	r2, [r3], #4
 8012778:	f841 2f04 	str.w	r2, [r1, #4]!
 801277c:	4298      	cmp	r0, r3
 801277e:	d8f9      	bhi.n	8012774 <__lshift+0xc8>
 8012780:	e7ea      	b.n	8012758 <__lshift+0xac>
 8012782:	bf00      	nop
 8012784:	08014370 	.word	0x08014370
 8012788:	08014460 	.word	0x08014460

0801278c <__mcmp>:
 801278c:	b530      	push	{r4, r5, lr}
 801278e:	6902      	ldr	r2, [r0, #16]
 8012790:	690c      	ldr	r4, [r1, #16]
 8012792:	1b12      	subs	r2, r2, r4
 8012794:	d10e      	bne.n	80127b4 <__mcmp+0x28>
 8012796:	f100 0314 	add.w	r3, r0, #20
 801279a:	3114      	adds	r1, #20
 801279c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80127a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80127a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80127a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80127ac:	42a5      	cmp	r5, r4
 80127ae:	d003      	beq.n	80127b8 <__mcmp+0x2c>
 80127b0:	d305      	bcc.n	80127be <__mcmp+0x32>
 80127b2:	2201      	movs	r2, #1
 80127b4:	4610      	mov	r0, r2
 80127b6:	bd30      	pop	{r4, r5, pc}
 80127b8:	4283      	cmp	r3, r0
 80127ba:	d3f3      	bcc.n	80127a4 <__mcmp+0x18>
 80127bc:	e7fa      	b.n	80127b4 <__mcmp+0x28>
 80127be:	f04f 32ff 	mov.w	r2, #4294967295
 80127c2:	e7f7      	b.n	80127b4 <__mcmp+0x28>

080127c4 <__mdiff>:
 80127c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127c8:	460c      	mov	r4, r1
 80127ca:	4606      	mov	r6, r0
 80127cc:	4611      	mov	r1, r2
 80127ce:	4620      	mov	r0, r4
 80127d0:	4690      	mov	r8, r2
 80127d2:	f7ff ffdb 	bl	801278c <__mcmp>
 80127d6:	1e05      	subs	r5, r0, #0
 80127d8:	d110      	bne.n	80127fc <__mdiff+0x38>
 80127da:	4629      	mov	r1, r5
 80127dc:	4630      	mov	r0, r6
 80127de:	f7ff fd09 	bl	80121f4 <_Balloc>
 80127e2:	b930      	cbnz	r0, 80127f2 <__mdiff+0x2e>
 80127e4:	4b3a      	ldr	r3, [pc, #232]	; (80128d0 <__mdiff+0x10c>)
 80127e6:	4602      	mov	r2, r0
 80127e8:	f240 2132 	movw	r1, #562	; 0x232
 80127ec:	4839      	ldr	r0, [pc, #228]	; (80128d4 <__mdiff+0x110>)
 80127ee:	f000 fcf9 	bl	80131e4 <__assert_func>
 80127f2:	2301      	movs	r3, #1
 80127f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80127f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127fc:	bfa4      	itt	ge
 80127fe:	4643      	movge	r3, r8
 8012800:	46a0      	movge	r8, r4
 8012802:	4630      	mov	r0, r6
 8012804:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012808:	bfa6      	itte	ge
 801280a:	461c      	movge	r4, r3
 801280c:	2500      	movge	r5, #0
 801280e:	2501      	movlt	r5, #1
 8012810:	f7ff fcf0 	bl	80121f4 <_Balloc>
 8012814:	b920      	cbnz	r0, 8012820 <__mdiff+0x5c>
 8012816:	4b2e      	ldr	r3, [pc, #184]	; (80128d0 <__mdiff+0x10c>)
 8012818:	4602      	mov	r2, r0
 801281a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801281e:	e7e5      	b.n	80127ec <__mdiff+0x28>
 8012820:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012824:	6926      	ldr	r6, [r4, #16]
 8012826:	60c5      	str	r5, [r0, #12]
 8012828:	f104 0914 	add.w	r9, r4, #20
 801282c:	f108 0514 	add.w	r5, r8, #20
 8012830:	f100 0e14 	add.w	lr, r0, #20
 8012834:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012838:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801283c:	f108 0210 	add.w	r2, r8, #16
 8012840:	46f2      	mov	sl, lr
 8012842:	2100      	movs	r1, #0
 8012844:	f859 3b04 	ldr.w	r3, [r9], #4
 8012848:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801284c:	fa1f f883 	uxth.w	r8, r3
 8012850:	fa11 f18b 	uxtah	r1, r1, fp
 8012854:	0c1b      	lsrs	r3, r3, #16
 8012856:	eba1 0808 	sub.w	r8, r1, r8
 801285a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801285e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012862:	fa1f f888 	uxth.w	r8, r8
 8012866:	1419      	asrs	r1, r3, #16
 8012868:	454e      	cmp	r6, r9
 801286a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801286e:	f84a 3b04 	str.w	r3, [sl], #4
 8012872:	d8e7      	bhi.n	8012844 <__mdiff+0x80>
 8012874:	1b33      	subs	r3, r6, r4
 8012876:	3b15      	subs	r3, #21
 8012878:	f023 0303 	bic.w	r3, r3, #3
 801287c:	3304      	adds	r3, #4
 801287e:	3415      	adds	r4, #21
 8012880:	42a6      	cmp	r6, r4
 8012882:	bf38      	it	cc
 8012884:	2304      	movcc	r3, #4
 8012886:	441d      	add	r5, r3
 8012888:	4473      	add	r3, lr
 801288a:	469e      	mov	lr, r3
 801288c:	462e      	mov	r6, r5
 801288e:	4566      	cmp	r6, ip
 8012890:	d30e      	bcc.n	80128b0 <__mdiff+0xec>
 8012892:	f10c 0203 	add.w	r2, ip, #3
 8012896:	1b52      	subs	r2, r2, r5
 8012898:	f022 0203 	bic.w	r2, r2, #3
 801289c:	3d03      	subs	r5, #3
 801289e:	45ac      	cmp	ip, r5
 80128a0:	bf38      	it	cc
 80128a2:	2200      	movcc	r2, #0
 80128a4:	441a      	add	r2, r3
 80128a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80128aa:	b17b      	cbz	r3, 80128cc <__mdiff+0x108>
 80128ac:	6107      	str	r7, [r0, #16]
 80128ae:	e7a3      	b.n	80127f8 <__mdiff+0x34>
 80128b0:	f856 8b04 	ldr.w	r8, [r6], #4
 80128b4:	fa11 f288 	uxtah	r2, r1, r8
 80128b8:	1414      	asrs	r4, r2, #16
 80128ba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80128be:	b292      	uxth	r2, r2
 80128c0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80128c4:	f84e 2b04 	str.w	r2, [lr], #4
 80128c8:	1421      	asrs	r1, r4, #16
 80128ca:	e7e0      	b.n	801288e <__mdiff+0xca>
 80128cc:	3f01      	subs	r7, #1
 80128ce:	e7ea      	b.n	80128a6 <__mdiff+0xe2>
 80128d0:	08014370 	.word	0x08014370
 80128d4:	08014460 	.word	0x08014460

080128d8 <__ulp>:
 80128d8:	b082      	sub	sp, #8
 80128da:	ed8d 0b00 	vstr	d0, [sp]
 80128de:	9b01      	ldr	r3, [sp, #4]
 80128e0:	4912      	ldr	r1, [pc, #72]	; (801292c <__ulp+0x54>)
 80128e2:	4019      	ands	r1, r3
 80128e4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80128e8:	2900      	cmp	r1, #0
 80128ea:	dd05      	ble.n	80128f8 <__ulp+0x20>
 80128ec:	2200      	movs	r2, #0
 80128ee:	460b      	mov	r3, r1
 80128f0:	ec43 2b10 	vmov	d0, r2, r3
 80128f4:	b002      	add	sp, #8
 80128f6:	4770      	bx	lr
 80128f8:	4249      	negs	r1, r1
 80128fa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80128fe:	ea4f 5021 	mov.w	r0, r1, asr #20
 8012902:	f04f 0200 	mov.w	r2, #0
 8012906:	f04f 0300 	mov.w	r3, #0
 801290a:	da04      	bge.n	8012916 <__ulp+0x3e>
 801290c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012910:	fa41 f300 	asr.w	r3, r1, r0
 8012914:	e7ec      	b.n	80128f0 <__ulp+0x18>
 8012916:	f1a0 0114 	sub.w	r1, r0, #20
 801291a:	291e      	cmp	r1, #30
 801291c:	bfda      	itte	le
 801291e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012922:	fa20 f101 	lsrle.w	r1, r0, r1
 8012926:	2101      	movgt	r1, #1
 8012928:	460a      	mov	r2, r1
 801292a:	e7e1      	b.n	80128f0 <__ulp+0x18>
 801292c:	7ff00000 	.word	0x7ff00000

08012930 <__b2d>:
 8012930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012932:	6905      	ldr	r5, [r0, #16]
 8012934:	f100 0714 	add.w	r7, r0, #20
 8012938:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801293c:	1f2e      	subs	r6, r5, #4
 801293e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012942:	4620      	mov	r0, r4
 8012944:	f7ff fd48 	bl	80123d8 <__hi0bits>
 8012948:	f1c0 0320 	rsb	r3, r0, #32
 801294c:	280a      	cmp	r0, #10
 801294e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80129cc <__b2d+0x9c>
 8012952:	600b      	str	r3, [r1, #0]
 8012954:	dc14      	bgt.n	8012980 <__b2d+0x50>
 8012956:	f1c0 0e0b 	rsb	lr, r0, #11
 801295a:	fa24 f10e 	lsr.w	r1, r4, lr
 801295e:	42b7      	cmp	r7, r6
 8012960:	ea41 030c 	orr.w	r3, r1, ip
 8012964:	bf34      	ite	cc
 8012966:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801296a:	2100      	movcs	r1, #0
 801296c:	3015      	adds	r0, #21
 801296e:	fa04 f000 	lsl.w	r0, r4, r0
 8012972:	fa21 f10e 	lsr.w	r1, r1, lr
 8012976:	ea40 0201 	orr.w	r2, r0, r1
 801297a:	ec43 2b10 	vmov	d0, r2, r3
 801297e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012980:	42b7      	cmp	r7, r6
 8012982:	bf3a      	itte	cc
 8012984:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012988:	f1a5 0608 	subcc.w	r6, r5, #8
 801298c:	2100      	movcs	r1, #0
 801298e:	380b      	subs	r0, #11
 8012990:	d017      	beq.n	80129c2 <__b2d+0x92>
 8012992:	f1c0 0c20 	rsb	ip, r0, #32
 8012996:	fa04 f500 	lsl.w	r5, r4, r0
 801299a:	42be      	cmp	r6, r7
 801299c:	fa21 f40c 	lsr.w	r4, r1, ip
 80129a0:	ea45 0504 	orr.w	r5, r5, r4
 80129a4:	bf8c      	ite	hi
 80129a6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80129aa:	2400      	movls	r4, #0
 80129ac:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80129b0:	fa01 f000 	lsl.w	r0, r1, r0
 80129b4:	fa24 f40c 	lsr.w	r4, r4, ip
 80129b8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80129bc:	ea40 0204 	orr.w	r2, r0, r4
 80129c0:	e7db      	b.n	801297a <__b2d+0x4a>
 80129c2:	ea44 030c 	orr.w	r3, r4, ip
 80129c6:	460a      	mov	r2, r1
 80129c8:	e7d7      	b.n	801297a <__b2d+0x4a>
 80129ca:	bf00      	nop
 80129cc:	3ff00000 	.word	0x3ff00000

080129d0 <__d2b>:
 80129d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80129d4:	4689      	mov	r9, r1
 80129d6:	2101      	movs	r1, #1
 80129d8:	ec57 6b10 	vmov	r6, r7, d0
 80129dc:	4690      	mov	r8, r2
 80129de:	f7ff fc09 	bl	80121f4 <_Balloc>
 80129e2:	4604      	mov	r4, r0
 80129e4:	b930      	cbnz	r0, 80129f4 <__d2b+0x24>
 80129e6:	4602      	mov	r2, r0
 80129e8:	4b25      	ldr	r3, [pc, #148]	; (8012a80 <__d2b+0xb0>)
 80129ea:	4826      	ldr	r0, [pc, #152]	; (8012a84 <__d2b+0xb4>)
 80129ec:	f240 310a 	movw	r1, #778	; 0x30a
 80129f0:	f000 fbf8 	bl	80131e4 <__assert_func>
 80129f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80129f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80129fc:	bb35      	cbnz	r5, 8012a4c <__d2b+0x7c>
 80129fe:	2e00      	cmp	r6, #0
 8012a00:	9301      	str	r3, [sp, #4]
 8012a02:	d028      	beq.n	8012a56 <__d2b+0x86>
 8012a04:	4668      	mov	r0, sp
 8012a06:	9600      	str	r6, [sp, #0]
 8012a08:	f7ff fd06 	bl	8012418 <__lo0bits>
 8012a0c:	9900      	ldr	r1, [sp, #0]
 8012a0e:	b300      	cbz	r0, 8012a52 <__d2b+0x82>
 8012a10:	9a01      	ldr	r2, [sp, #4]
 8012a12:	f1c0 0320 	rsb	r3, r0, #32
 8012a16:	fa02 f303 	lsl.w	r3, r2, r3
 8012a1a:	430b      	orrs	r3, r1
 8012a1c:	40c2      	lsrs	r2, r0
 8012a1e:	6163      	str	r3, [r4, #20]
 8012a20:	9201      	str	r2, [sp, #4]
 8012a22:	9b01      	ldr	r3, [sp, #4]
 8012a24:	61a3      	str	r3, [r4, #24]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	bf14      	ite	ne
 8012a2a:	2202      	movne	r2, #2
 8012a2c:	2201      	moveq	r2, #1
 8012a2e:	6122      	str	r2, [r4, #16]
 8012a30:	b1d5      	cbz	r5, 8012a68 <__d2b+0x98>
 8012a32:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012a36:	4405      	add	r5, r0
 8012a38:	f8c9 5000 	str.w	r5, [r9]
 8012a3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012a40:	f8c8 0000 	str.w	r0, [r8]
 8012a44:	4620      	mov	r0, r4
 8012a46:	b003      	add	sp, #12
 8012a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012a50:	e7d5      	b.n	80129fe <__d2b+0x2e>
 8012a52:	6161      	str	r1, [r4, #20]
 8012a54:	e7e5      	b.n	8012a22 <__d2b+0x52>
 8012a56:	a801      	add	r0, sp, #4
 8012a58:	f7ff fcde 	bl	8012418 <__lo0bits>
 8012a5c:	9b01      	ldr	r3, [sp, #4]
 8012a5e:	6163      	str	r3, [r4, #20]
 8012a60:	2201      	movs	r2, #1
 8012a62:	6122      	str	r2, [r4, #16]
 8012a64:	3020      	adds	r0, #32
 8012a66:	e7e3      	b.n	8012a30 <__d2b+0x60>
 8012a68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012a6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012a70:	f8c9 0000 	str.w	r0, [r9]
 8012a74:	6918      	ldr	r0, [r3, #16]
 8012a76:	f7ff fcaf 	bl	80123d8 <__hi0bits>
 8012a7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012a7e:	e7df      	b.n	8012a40 <__d2b+0x70>
 8012a80:	08014370 	.word	0x08014370
 8012a84:	08014460 	.word	0x08014460

08012a88 <__ratio>:
 8012a88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a8c:	4688      	mov	r8, r1
 8012a8e:	4669      	mov	r1, sp
 8012a90:	4681      	mov	r9, r0
 8012a92:	f7ff ff4d 	bl	8012930 <__b2d>
 8012a96:	a901      	add	r1, sp, #4
 8012a98:	4640      	mov	r0, r8
 8012a9a:	ec55 4b10 	vmov	r4, r5, d0
 8012a9e:	f7ff ff47 	bl	8012930 <__b2d>
 8012aa2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012aa6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012aaa:	eba3 0c02 	sub.w	ip, r3, r2
 8012aae:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012ab2:	1a9b      	subs	r3, r3, r2
 8012ab4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012ab8:	ec51 0b10 	vmov	r0, r1, d0
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	bfd6      	itet	le
 8012ac0:	460a      	movle	r2, r1
 8012ac2:	462a      	movgt	r2, r5
 8012ac4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012ac8:	468b      	mov	fp, r1
 8012aca:	462f      	mov	r7, r5
 8012acc:	bfd4      	ite	le
 8012ace:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012ad2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012ad6:	4620      	mov	r0, r4
 8012ad8:	ee10 2a10 	vmov	r2, s0
 8012adc:	465b      	mov	r3, fp
 8012ade:	4639      	mov	r1, r7
 8012ae0:	f7ed febc 	bl	800085c <__aeabi_ddiv>
 8012ae4:	ec41 0b10 	vmov	d0, r0, r1
 8012ae8:	b003      	add	sp, #12
 8012aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012aee <__copybits>:
 8012aee:	3901      	subs	r1, #1
 8012af0:	b570      	push	{r4, r5, r6, lr}
 8012af2:	1149      	asrs	r1, r1, #5
 8012af4:	6914      	ldr	r4, [r2, #16]
 8012af6:	3101      	adds	r1, #1
 8012af8:	f102 0314 	add.w	r3, r2, #20
 8012afc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012b00:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012b04:	1f05      	subs	r5, r0, #4
 8012b06:	42a3      	cmp	r3, r4
 8012b08:	d30c      	bcc.n	8012b24 <__copybits+0x36>
 8012b0a:	1aa3      	subs	r3, r4, r2
 8012b0c:	3b11      	subs	r3, #17
 8012b0e:	f023 0303 	bic.w	r3, r3, #3
 8012b12:	3211      	adds	r2, #17
 8012b14:	42a2      	cmp	r2, r4
 8012b16:	bf88      	it	hi
 8012b18:	2300      	movhi	r3, #0
 8012b1a:	4418      	add	r0, r3
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	4288      	cmp	r0, r1
 8012b20:	d305      	bcc.n	8012b2e <__copybits+0x40>
 8012b22:	bd70      	pop	{r4, r5, r6, pc}
 8012b24:	f853 6b04 	ldr.w	r6, [r3], #4
 8012b28:	f845 6f04 	str.w	r6, [r5, #4]!
 8012b2c:	e7eb      	b.n	8012b06 <__copybits+0x18>
 8012b2e:	f840 3b04 	str.w	r3, [r0], #4
 8012b32:	e7f4      	b.n	8012b1e <__copybits+0x30>

08012b34 <__any_on>:
 8012b34:	f100 0214 	add.w	r2, r0, #20
 8012b38:	6900      	ldr	r0, [r0, #16]
 8012b3a:	114b      	asrs	r3, r1, #5
 8012b3c:	4298      	cmp	r0, r3
 8012b3e:	b510      	push	{r4, lr}
 8012b40:	db11      	blt.n	8012b66 <__any_on+0x32>
 8012b42:	dd0a      	ble.n	8012b5a <__any_on+0x26>
 8012b44:	f011 011f 	ands.w	r1, r1, #31
 8012b48:	d007      	beq.n	8012b5a <__any_on+0x26>
 8012b4a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012b4e:	fa24 f001 	lsr.w	r0, r4, r1
 8012b52:	fa00 f101 	lsl.w	r1, r0, r1
 8012b56:	428c      	cmp	r4, r1
 8012b58:	d10b      	bne.n	8012b72 <__any_on+0x3e>
 8012b5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012b5e:	4293      	cmp	r3, r2
 8012b60:	d803      	bhi.n	8012b6a <__any_on+0x36>
 8012b62:	2000      	movs	r0, #0
 8012b64:	bd10      	pop	{r4, pc}
 8012b66:	4603      	mov	r3, r0
 8012b68:	e7f7      	b.n	8012b5a <__any_on+0x26>
 8012b6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012b6e:	2900      	cmp	r1, #0
 8012b70:	d0f5      	beq.n	8012b5e <__any_on+0x2a>
 8012b72:	2001      	movs	r0, #1
 8012b74:	e7f6      	b.n	8012b64 <__any_on+0x30>

08012b76 <_calloc_r>:
 8012b76:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012b78:	fba1 2402 	umull	r2, r4, r1, r2
 8012b7c:	b94c      	cbnz	r4, 8012b92 <_calloc_r+0x1c>
 8012b7e:	4611      	mov	r1, r2
 8012b80:	9201      	str	r2, [sp, #4]
 8012b82:	f7fb ffcf 	bl	800eb24 <_malloc_r>
 8012b86:	9a01      	ldr	r2, [sp, #4]
 8012b88:	4605      	mov	r5, r0
 8012b8a:	b930      	cbnz	r0, 8012b9a <_calloc_r+0x24>
 8012b8c:	4628      	mov	r0, r5
 8012b8e:	b003      	add	sp, #12
 8012b90:	bd30      	pop	{r4, r5, pc}
 8012b92:	220c      	movs	r2, #12
 8012b94:	6002      	str	r2, [r0, #0]
 8012b96:	2500      	movs	r5, #0
 8012b98:	e7f8      	b.n	8012b8c <_calloc_r+0x16>
 8012b9a:	4621      	mov	r1, r4
 8012b9c:	f7fb ff4e 	bl	800ea3c <memset>
 8012ba0:	e7f4      	b.n	8012b8c <_calloc_r+0x16>

08012ba2 <__ssputs_r>:
 8012ba2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ba6:	688e      	ldr	r6, [r1, #8]
 8012ba8:	429e      	cmp	r6, r3
 8012baa:	4682      	mov	sl, r0
 8012bac:	460c      	mov	r4, r1
 8012bae:	4690      	mov	r8, r2
 8012bb0:	461f      	mov	r7, r3
 8012bb2:	d838      	bhi.n	8012c26 <__ssputs_r+0x84>
 8012bb4:	898a      	ldrh	r2, [r1, #12]
 8012bb6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012bba:	d032      	beq.n	8012c22 <__ssputs_r+0x80>
 8012bbc:	6825      	ldr	r5, [r4, #0]
 8012bbe:	6909      	ldr	r1, [r1, #16]
 8012bc0:	eba5 0901 	sub.w	r9, r5, r1
 8012bc4:	6965      	ldr	r5, [r4, #20]
 8012bc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012bca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012bce:	3301      	adds	r3, #1
 8012bd0:	444b      	add	r3, r9
 8012bd2:	106d      	asrs	r5, r5, #1
 8012bd4:	429d      	cmp	r5, r3
 8012bd6:	bf38      	it	cc
 8012bd8:	461d      	movcc	r5, r3
 8012bda:	0553      	lsls	r3, r2, #21
 8012bdc:	d531      	bpl.n	8012c42 <__ssputs_r+0xa0>
 8012bde:	4629      	mov	r1, r5
 8012be0:	f7fb ffa0 	bl	800eb24 <_malloc_r>
 8012be4:	4606      	mov	r6, r0
 8012be6:	b950      	cbnz	r0, 8012bfe <__ssputs_r+0x5c>
 8012be8:	230c      	movs	r3, #12
 8012bea:	f8ca 3000 	str.w	r3, [sl]
 8012bee:	89a3      	ldrh	r3, [r4, #12]
 8012bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012bf4:	81a3      	strh	r3, [r4, #12]
 8012bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8012bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bfe:	6921      	ldr	r1, [r4, #16]
 8012c00:	464a      	mov	r2, r9
 8012c02:	f7fb ff0d 	bl	800ea20 <memcpy>
 8012c06:	89a3      	ldrh	r3, [r4, #12]
 8012c08:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c10:	81a3      	strh	r3, [r4, #12]
 8012c12:	6126      	str	r6, [r4, #16]
 8012c14:	6165      	str	r5, [r4, #20]
 8012c16:	444e      	add	r6, r9
 8012c18:	eba5 0509 	sub.w	r5, r5, r9
 8012c1c:	6026      	str	r6, [r4, #0]
 8012c1e:	60a5      	str	r5, [r4, #8]
 8012c20:	463e      	mov	r6, r7
 8012c22:	42be      	cmp	r6, r7
 8012c24:	d900      	bls.n	8012c28 <__ssputs_r+0x86>
 8012c26:	463e      	mov	r6, r7
 8012c28:	6820      	ldr	r0, [r4, #0]
 8012c2a:	4632      	mov	r2, r6
 8012c2c:	4641      	mov	r1, r8
 8012c2e:	f000 fb4d 	bl	80132cc <memmove>
 8012c32:	68a3      	ldr	r3, [r4, #8]
 8012c34:	1b9b      	subs	r3, r3, r6
 8012c36:	60a3      	str	r3, [r4, #8]
 8012c38:	6823      	ldr	r3, [r4, #0]
 8012c3a:	4433      	add	r3, r6
 8012c3c:	6023      	str	r3, [r4, #0]
 8012c3e:	2000      	movs	r0, #0
 8012c40:	e7db      	b.n	8012bfa <__ssputs_r+0x58>
 8012c42:	462a      	mov	r2, r5
 8012c44:	f000 fb5c 	bl	8013300 <_realloc_r>
 8012c48:	4606      	mov	r6, r0
 8012c4a:	2800      	cmp	r0, #0
 8012c4c:	d1e1      	bne.n	8012c12 <__ssputs_r+0x70>
 8012c4e:	6921      	ldr	r1, [r4, #16]
 8012c50:	4650      	mov	r0, sl
 8012c52:	f7fb fefb 	bl	800ea4c <_free_r>
 8012c56:	e7c7      	b.n	8012be8 <__ssputs_r+0x46>

08012c58 <_svfiprintf_r>:
 8012c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c5c:	4698      	mov	r8, r3
 8012c5e:	898b      	ldrh	r3, [r1, #12]
 8012c60:	061b      	lsls	r3, r3, #24
 8012c62:	b09d      	sub	sp, #116	; 0x74
 8012c64:	4607      	mov	r7, r0
 8012c66:	460d      	mov	r5, r1
 8012c68:	4614      	mov	r4, r2
 8012c6a:	d50e      	bpl.n	8012c8a <_svfiprintf_r+0x32>
 8012c6c:	690b      	ldr	r3, [r1, #16]
 8012c6e:	b963      	cbnz	r3, 8012c8a <_svfiprintf_r+0x32>
 8012c70:	2140      	movs	r1, #64	; 0x40
 8012c72:	f7fb ff57 	bl	800eb24 <_malloc_r>
 8012c76:	6028      	str	r0, [r5, #0]
 8012c78:	6128      	str	r0, [r5, #16]
 8012c7a:	b920      	cbnz	r0, 8012c86 <_svfiprintf_r+0x2e>
 8012c7c:	230c      	movs	r3, #12
 8012c7e:	603b      	str	r3, [r7, #0]
 8012c80:	f04f 30ff 	mov.w	r0, #4294967295
 8012c84:	e0d1      	b.n	8012e2a <_svfiprintf_r+0x1d2>
 8012c86:	2340      	movs	r3, #64	; 0x40
 8012c88:	616b      	str	r3, [r5, #20]
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8012c8e:	2320      	movs	r3, #32
 8012c90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012c94:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c98:	2330      	movs	r3, #48	; 0x30
 8012c9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012e44 <_svfiprintf_r+0x1ec>
 8012c9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012ca2:	f04f 0901 	mov.w	r9, #1
 8012ca6:	4623      	mov	r3, r4
 8012ca8:	469a      	mov	sl, r3
 8012caa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012cae:	b10a      	cbz	r2, 8012cb4 <_svfiprintf_r+0x5c>
 8012cb0:	2a25      	cmp	r2, #37	; 0x25
 8012cb2:	d1f9      	bne.n	8012ca8 <_svfiprintf_r+0x50>
 8012cb4:	ebba 0b04 	subs.w	fp, sl, r4
 8012cb8:	d00b      	beq.n	8012cd2 <_svfiprintf_r+0x7a>
 8012cba:	465b      	mov	r3, fp
 8012cbc:	4622      	mov	r2, r4
 8012cbe:	4629      	mov	r1, r5
 8012cc0:	4638      	mov	r0, r7
 8012cc2:	f7ff ff6e 	bl	8012ba2 <__ssputs_r>
 8012cc6:	3001      	adds	r0, #1
 8012cc8:	f000 80aa 	beq.w	8012e20 <_svfiprintf_r+0x1c8>
 8012ccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012cce:	445a      	add	r2, fp
 8012cd0:	9209      	str	r2, [sp, #36]	; 0x24
 8012cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	f000 80a2 	beq.w	8012e20 <_svfiprintf_r+0x1c8>
 8012cdc:	2300      	movs	r3, #0
 8012cde:	f04f 32ff 	mov.w	r2, #4294967295
 8012ce2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012ce6:	f10a 0a01 	add.w	sl, sl, #1
 8012cea:	9304      	str	r3, [sp, #16]
 8012cec:	9307      	str	r3, [sp, #28]
 8012cee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012cf2:	931a      	str	r3, [sp, #104]	; 0x68
 8012cf4:	4654      	mov	r4, sl
 8012cf6:	2205      	movs	r2, #5
 8012cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cfc:	4851      	ldr	r0, [pc, #324]	; (8012e44 <_svfiprintf_r+0x1ec>)
 8012cfe:	f7ed fa77 	bl	80001f0 <memchr>
 8012d02:	9a04      	ldr	r2, [sp, #16]
 8012d04:	b9d8      	cbnz	r0, 8012d3e <_svfiprintf_r+0xe6>
 8012d06:	06d0      	lsls	r0, r2, #27
 8012d08:	bf44      	itt	mi
 8012d0a:	2320      	movmi	r3, #32
 8012d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d10:	0711      	lsls	r1, r2, #28
 8012d12:	bf44      	itt	mi
 8012d14:	232b      	movmi	r3, #43	; 0x2b
 8012d16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8012d1e:	2b2a      	cmp	r3, #42	; 0x2a
 8012d20:	d015      	beq.n	8012d4e <_svfiprintf_r+0xf6>
 8012d22:	9a07      	ldr	r2, [sp, #28]
 8012d24:	4654      	mov	r4, sl
 8012d26:	2000      	movs	r0, #0
 8012d28:	f04f 0c0a 	mov.w	ip, #10
 8012d2c:	4621      	mov	r1, r4
 8012d2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d32:	3b30      	subs	r3, #48	; 0x30
 8012d34:	2b09      	cmp	r3, #9
 8012d36:	d94e      	bls.n	8012dd6 <_svfiprintf_r+0x17e>
 8012d38:	b1b0      	cbz	r0, 8012d68 <_svfiprintf_r+0x110>
 8012d3a:	9207      	str	r2, [sp, #28]
 8012d3c:	e014      	b.n	8012d68 <_svfiprintf_r+0x110>
 8012d3e:	eba0 0308 	sub.w	r3, r0, r8
 8012d42:	fa09 f303 	lsl.w	r3, r9, r3
 8012d46:	4313      	orrs	r3, r2
 8012d48:	9304      	str	r3, [sp, #16]
 8012d4a:	46a2      	mov	sl, r4
 8012d4c:	e7d2      	b.n	8012cf4 <_svfiprintf_r+0x9c>
 8012d4e:	9b03      	ldr	r3, [sp, #12]
 8012d50:	1d19      	adds	r1, r3, #4
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	9103      	str	r1, [sp, #12]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	bfbb      	ittet	lt
 8012d5a:	425b      	neglt	r3, r3
 8012d5c:	f042 0202 	orrlt.w	r2, r2, #2
 8012d60:	9307      	strge	r3, [sp, #28]
 8012d62:	9307      	strlt	r3, [sp, #28]
 8012d64:	bfb8      	it	lt
 8012d66:	9204      	strlt	r2, [sp, #16]
 8012d68:	7823      	ldrb	r3, [r4, #0]
 8012d6a:	2b2e      	cmp	r3, #46	; 0x2e
 8012d6c:	d10c      	bne.n	8012d88 <_svfiprintf_r+0x130>
 8012d6e:	7863      	ldrb	r3, [r4, #1]
 8012d70:	2b2a      	cmp	r3, #42	; 0x2a
 8012d72:	d135      	bne.n	8012de0 <_svfiprintf_r+0x188>
 8012d74:	9b03      	ldr	r3, [sp, #12]
 8012d76:	1d1a      	adds	r2, r3, #4
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	9203      	str	r2, [sp, #12]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	bfb8      	it	lt
 8012d80:	f04f 33ff 	movlt.w	r3, #4294967295
 8012d84:	3402      	adds	r4, #2
 8012d86:	9305      	str	r3, [sp, #20]
 8012d88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012e54 <_svfiprintf_r+0x1fc>
 8012d8c:	7821      	ldrb	r1, [r4, #0]
 8012d8e:	2203      	movs	r2, #3
 8012d90:	4650      	mov	r0, sl
 8012d92:	f7ed fa2d 	bl	80001f0 <memchr>
 8012d96:	b140      	cbz	r0, 8012daa <_svfiprintf_r+0x152>
 8012d98:	2340      	movs	r3, #64	; 0x40
 8012d9a:	eba0 000a 	sub.w	r0, r0, sl
 8012d9e:	fa03 f000 	lsl.w	r0, r3, r0
 8012da2:	9b04      	ldr	r3, [sp, #16]
 8012da4:	4303      	orrs	r3, r0
 8012da6:	3401      	adds	r4, #1
 8012da8:	9304      	str	r3, [sp, #16]
 8012daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012dae:	4826      	ldr	r0, [pc, #152]	; (8012e48 <_svfiprintf_r+0x1f0>)
 8012db0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012db4:	2206      	movs	r2, #6
 8012db6:	f7ed fa1b 	bl	80001f0 <memchr>
 8012dba:	2800      	cmp	r0, #0
 8012dbc:	d038      	beq.n	8012e30 <_svfiprintf_r+0x1d8>
 8012dbe:	4b23      	ldr	r3, [pc, #140]	; (8012e4c <_svfiprintf_r+0x1f4>)
 8012dc0:	bb1b      	cbnz	r3, 8012e0a <_svfiprintf_r+0x1b2>
 8012dc2:	9b03      	ldr	r3, [sp, #12]
 8012dc4:	3307      	adds	r3, #7
 8012dc6:	f023 0307 	bic.w	r3, r3, #7
 8012dca:	3308      	adds	r3, #8
 8012dcc:	9303      	str	r3, [sp, #12]
 8012dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012dd0:	4433      	add	r3, r6
 8012dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8012dd4:	e767      	b.n	8012ca6 <_svfiprintf_r+0x4e>
 8012dd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8012dda:	460c      	mov	r4, r1
 8012ddc:	2001      	movs	r0, #1
 8012dde:	e7a5      	b.n	8012d2c <_svfiprintf_r+0xd4>
 8012de0:	2300      	movs	r3, #0
 8012de2:	3401      	adds	r4, #1
 8012de4:	9305      	str	r3, [sp, #20]
 8012de6:	4619      	mov	r1, r3
 8012de8:	f04f 0c0a 	mov.w	ip, #10
 8012dec:	4620      	mov	r0, r4
 8012dee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012df2:	3a30      	subs	r2, #48	; 0x30
 8012df4:	2a09      	cmp	r2, #9
 8012df6:	d903      	bls.n	8012e00 <_svfiprintf_r+0x1a8>
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d0c5      	beq.n	8012d88 <_svfiprintf_r+0x130>
 8012dfc:	9105      	str	r1, [sp, #20]
 8012dfe:	e7c3      	b.n	8012d88 <_svfiprintf_r+0x130>
 8012e00:	fb0c 2101 	mla	r1, ip, r1, r2
 8012e04:	4604      	mov	r4, r0
 8012e06:	2301      	movs	r3, #1
 8012e08:	e7f0      	b.n	8012dec <_svfiprintf_r+0x194>
 8012e0a:	ab03      	add	r3, sp, #12
 8012e0c:	9300      	str	r3, [sp, #0]
 8012e0e:	462a      	mov	r2, r5
 8012e10:	4b0f      	ldr	r3, [pc, #60]	; (8012e50 <_svfiprintf_r+0x1f8>)
 8012e12:	a904      	add	r1, sp, #16
 8012e14:	4638      	mov	r0, r7
 8012e16:	f7fb ff99 	bl	800ed4c <_printf_float>
 8012e1a:	1c42      	adds	r2, r0, #1
 8012e1c:	4606      	mov	r6, r0
 8012e1e:	d1d6      	bne.n	8012dce <_svfiprintf_r+0x176>
 8012e20:	89ab      	ldrh	r3, [r5, #12]
 8012e22:	065b      	lsls	r3, r3, #25
 8012e24:	f53f af2c 	bmi.w	8012c80 <_svfiprintf_r+0x28>
 8012e28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012e2a:	b01d      	add	sp, #116	; 0x74
 8012e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e30:	ab03      	add	r3, sp, #12
 8012e32:	9300      	str	r3, [sp, #0]
 8012e34:	462a      	mov	r2, r5
 8012e36:	4b06      	ldr	r3, [pc, #24]	; (8012e50 <_svfiprintf_r+0x1f8>)
 8012e38:	a904      	add	r1, sp, #16
 8012e3a:	4638      	mov	r0, r7
 8012e3c:	f7fc fa2a 	bl	800f294 <_printf_i>
 8012e40:	e7eb      	b.n	8012e1a <_svfiprintf_r+0x1c2>
 8012e42:	bf00      	nop
 8012e44:	080145bc 	.word	0x080145bc
 8012e48:	080145c6 	.word	0x080145c6
 8012e4c:	0800ed4d 	.word	0x0800ed4d
 8012e50:	08012ba3 	.word	0x08012ba3
 8012e54:	080145c2 	.word	0x080145c2

08012e58 <__sfputc_r>:
 8012e58:	6893      	ldr	r3, [r2, #8]
 8012e5a:	3b01      	subs	r3, #1
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	b410      	push	{r4}
 8012e60:	6093      	str	r3, [r2, #8]
 8012e62:	da08      	bge.n	8012e76 <__sfputc_r+0x1e>
 8012e64:	6994      	ldr	r4, [r2, #24]
 8012e66:	42a3      	cmp	r3, r4
 8012e68:	db01      	blt.n	8012e6e <__sfputc_r+0x16>
 8012e6a:	290a      	cmp	r1, #10
 8012e6c:	d103      	bne.n	8012e76 <__sfputc_r+0x1e>
 8012e6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e72:	f7fd bcd5 	b.w	8010820 <__swbuf_r>
 8012e76:	6813      	ldr	r3, [r2, #0]
 8012e78:	1c58      	adds	r0, r3, #1
 8012e7a:	6010      	str	r0, [r2, #0]
 8012e7c:	7019      	strb	r1, [r3, #0]
 8012e7e:	4608      	mov	r0, r1
 8012e80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e84:	4770      	bx	lr

08012e86 <__sfputs_r>:
 8012e86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e88:	4606      	mov	r6, r0
 8012e8a:	460f      	mov	r7, r1
 8012e8c:	4614      	mov	r4, r2
 8012e8e:	18d5      	adds	r5, r2, r3
 8012e90:	42ac      	cmp	r4, r5
 8012e92:	d101      	bne.n	8012e98 <__sfputs_r+0x12>
 8012e94:	2000      	movs	r0, #0
 8012e96:	e007      	b.n	8012ea8 <__sfputs_r+0x22>
 8012e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e9c:	463a      	mov	r2, r7
 8012e9e:	4630      	mov	r0, r6
 8012ea0:	f7ff ffda 	bl	8012e58 <__sfputc_r>
 8012ea4:	1c43      	adds	r3, r0, #1
 8012ea6:	d1f3      	bne.n	8012e90 <__sfputs_r+0xa>
 8012ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012eac <_vfiprintf_r>:
 8012eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eb0:	460d      	mov	r5, r1
 8012eb2:	b09d      	sub	sp, #116	; 0x74
 8012eb4:	4614      	mov	r4, r2
 8012eb6:	4698      	mov	r8, r3
 8012eb8:	4606      	mov	r6, r0
 8012eba:	b118      	cbz	r0, 8012ec4 <_vfiprintf_r+0x18>
 8012ebc:	6983      	ldr	r3, [r0, #24]
 8012ebe:	b90b      	cbnz	r3, 8012ec4 <_vfiprintf_r+0x18>
 8012ec0:	f7fe fd02 	bl	80118c8 <__sinit>
 8012ec4:	4b89      	ldr	r3, [pc, #548]	; (80130ec <_vfiprintf_r+0x240>)
 8012ec6:	429d      	cmp	r5, r3
 8012ec8:	d11b      	bne.n	8012f02 <_vfiprintf_r+0x56>
 8012eca:	6875      	ldr	r5, [r6, #4]
 8012ecc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012ece:	07d9      	lsls	r1, r3, #31
 8012ed0:	d405      	bmi.n	8012ede <_vfiprintf_r+0x32>
 8012ed2:	89ab      	ldrh	r3, [r5, #12]
 8012ed4:	059a      	lsls	r2, r3, #22
 8012ed6:	d402      	bmi.n	8012ede <_vfiprintf_r+0x32>
 8012ed8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012eda:	f7ff f906 	bl	80120ea <__retarget_lock_acquire_recursive>
 8012ede:	89ab      	ldrh	r3, [r5, #12]
 8012ee0:	071b      	lsls	r3, r3, #28
 8012ee2:	d501      	bpl.n	8012ee8 <_vfiprintf_r+0x3c>
 8012ee4:	692b      	ldr	r3, [r5, #16]
 8012ee6:	b9eb      	cbnz	r3, 8012f24 <_vfiprintf_r+0x78>
 8012ee8:	4629      	mov	r1, r5
 8012eea:	4630      	mov	r0, r6
 8012eec:	f7fd fcea 	bl	80108c4 <__swsetup_r>
 8012ef0:	b1c0      	cbz	r0, 8012f24 <_vfiprintf_r+0x78>
 8012ef2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012ef4:	07dc      	lsls	r4, r3, #31
 8012ef6:	d50e      	bpl.n	8012f16 <_vfiprintf_r+0x6a>
 8012ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8012efc:	b01d      	add	sp, #116	; 0x74
 8012efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f02:	4b7b      	ldr	r3, [pc, #492]	; (80130f0 <_vfiprintf_r+0x244>)
 8012f04:	429d      	cmp	r5, r3
 8012f06:	d101      	bne.n	8012f0c <_vfiprintf_r+0x60>
 8012f08:	68b5      	ldr	r5, [r6, #8]
 8012f0a:	e7df      	b.n	8012ecc <_vfiprintf_r+0x20>
 8012f0c:	4b79      	ldr	r3, [pc, #484]	; (80130f4 <_vfiprintf_r+0x248>)
 8012f0e:	429d      	cmp	r5, r3
 8012f10:	bf08      	it	eq
 8012f12:	68f5      	ldreq	r5, [r6, #12]
 8012f14:	e7da      	b.n	8012ecc <_vfiprintf_r+0x20>
 8012f16:	89ab      	ldrh	r3, [r5, #12]
 8012f18:	0598      	lsls	r0, r3, #22
 8012f1a:	d4ed      	bmi.n	8012ef8 <_vfiprintf_r+0x4c>
 8012f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012f1e:	f7ff f8e5 	bl	80120ec <__retarget_lock_release_recursive>
 8012f22:	e7e9      	b.n	8012ef8 <_vfiprintf_r+0x4c>
 8012f24:	2300      	movs	r3, #0
 8012f26:	9309      	str	r3, [sp, #36]	; 0x24
 8012f28:	2320      	movs	r3, #32
 8012f2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012f2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012f32:	2330      	movs	r3, #48	; 0x30
 8012f34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80130f8 <_vfiprintf_r+0x24c>
 8012f38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012f3c:	f04f 0901 	mov.w	r9, #1
 8012f40:	4623      	mov	r3, r4
 8012f42:	469a      	mov	sl, r3
 8012f44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012f48:	b10a      	cbz	r2, 8012f4e <_vfiprintf_r+0xa2>
 8012f4a:	2a25      	cmp	r2, #37	; 0x25
 8012f4c:	d1f9      	bne.n	8012f42 <_vfiprintf_r+0x96>
 8012f4e:	ebba 0b04 	subs.w	fp, sl, r4
 8012f52:	d00b      	beq.n	8012f6c <_vfiprintf_r+0xc0>
 8012f54:	465b      	mov	r3, fp
 8012f56:	4622      	mov	r2, r4
 8012f58:	4629      	mov	r1, r5
 8012f5a:	4630      	mov	r0, r6
 8012f5c:	f7ff ff93 	bl	8012e86 <__sfputs_r>
 8012f60:	3001      	adds	r0, #1
 8012f62:	f000 80aa 	beq.w	80130ba <_vfiprintf_r+0x20e>
 8012f66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f68:	445a      	add	r2, fp
 8012f6a:	9209      	str	r2, [sp, #36]	; 0x24
 8012f6c:	f89a 3000 	ldrb.w	r3, [sl]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	f000 80a2 	beq.w	80130ba <_vfiprintf_r+0x20e>
 8012f76:	2300      	movs	r3, #0
 8012f78:	f04f 32ff 	mov.w	r2, #4294967295
 8012f7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012f80:	f10a 0a01 	add.w	sl, sl, #1
 8012f84:	9304      	str	r3, [sp, #16]
 8012f86:	9307      	str	r3, [sp, #28]
 8012f88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012f8c:	931a      	str	r3, [sp, #104]	; 0x68
 8012f8e:	4654      	mov	r4, sl
 8012f90:	2205      	movs	r2, #5
 8012f92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f96:	4858      	ldr	r0, [pc, #352]	; (80130f8 <_vfiprintf_r+0x24c>)
 8012f98:	f7ed f92a 	bl	80001f0 <memchr>
 8012f9c:	9a04      	ldr	r2, [sp, #16]
 8012f9e:	b9d8      	cbnz	r0, 8012fd8 <_vfiprintf_r+0x12c>
 8012fa0:	06d1      	lsls	r1, r2, #27
 8012fa2:	bf44      	itt	mi
 8012fa4:	2320      	movmi	r3, #32
 8012fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012faa:	0713      	lsls	r3, r2, #28
 8012fac:	bf44      	itt	mi
 8012fae:	232b      	movmi	r3, #43	; 0x2b
 8012fb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8012fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8012fba:	d015      	beq.n	8012fe8 <_vfiprintf_r+0x13c>
 8012fbc:	9a07      	ldr	r2, [sp, #28]
 8012fbe:	4654      	mov	r4, sl
 8012fc0:	2000      	movs	r0, #0
 8012fc2:	f04f 0c0a 	mov.w	ip, #10
 8012fc6:	4621      	mov	r1, r4
 8012fc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012fcc:	3b30      	subs	r3, #48	; 0x30
 8012fce:	2b09      	cmp	r3, #9
 8012fd0:	d94e      	bls.n	8013070 <_vfiprintf_r+0x1c4>
 8012fd2:	b1b0      	cbz	r0, 8013002 <_vfiprintf_r+0x156>
 8012fd4:	9207      	str	r2, [sp, #28]
 8012fd6:	e014      	b.n	8013002 <_vfiprintf_r+0x156>
 8012fd8:	eba0 0308 	sub.w	r3, r0, r8
 8012fdc:	fa09 f303 	lsl.w	r3, r9, r3
 8012fe0:	4313      	orrs	r3, r2
 8012fe2:	9304      	str	r3, [sp, #16]
 8012fe4:	46a2      	mov	sl, r4
 8012fe6:	e7d2      	b.n	8012f8e <_vfiprintf_r+0xe2>
 8012fe8:	9b03      	ldr	r3, [sp, #12]
 8012fea:	1d19      	adds	r1, r3, #4
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	9103      	str	r1, [sp, #12]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	bfbb      	ittet	lt
 8012ff4:	425b      	neglt	r3, r3
 8012ff6:	f042 0202 	orrlt.w	r2, r2, #2
 8012ffa:	9307      	strge	r3, [sp, #28]
 8012ffc:	9307      	strlt	r3, [sp, #28]
 8012ffe:	bfb8      	it	lt
 8013000:	9204      	strlt	r2, [sp, #16]
 8013002:	7823      	ldrb	r3, [r4, #0]
 8013004:	2b2e      	cmp	r3, #46	; 0x2e
 8013006:	d10c      	bne.n	8013022 <_vfiprintf_r+0x176>
 8013008:	7863      	ldrb	r3, [r4, #1]
 801300a:	2b2a      	cmp	r3, #42	; 0x2a
 801300c:	d135      	bne.n	801307a <_vfiprintf_r+0x1ce>
 801300e:	9b03      	ldr	r3, [sp, #12]
 8013010:	1d1a      	adds	r2, r3, #4
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	9203      	str	r2, [sp, #12]
 8013016:	2b00      	cmp	r3, #0
 8013018:	bfb8      	it	lt
 801301a:	f04f 33ff 	movlt.w	r3, #4294967295
 801301e:	3402      	adds	r4, #2
 8013020:	9305      	str	r3, [sp, #20]
 8013022:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013108 <_vfiprintf_r+0x25c>
 8013026:	7821      	ldrb	r1, [r4, #0]
 8013028:	2203      	movs	r2, #3
 801302a:	4650      	mov	r0, sl
 801302c:	f7ed f8e0 	bl	80001f0 <memchr>
 8013030:	b140      	cbz	r0, 8013044 <_vfiprintf_r+0x198>
 8013032:	2340      	movs	r3, #64	; 0x40
 8013034:	eba0 000a 	sub.w	r0, r0, sl
 8013038:	fa03 f000 	lsl.w	r0, r3, r0
 801303c:	9b04      	ldr	r3, [sp, #16]
 801303e:	4303      	orrs	r3, r0
 8013040:	3401      	adds	r4, #1
 8013042:	9304      	str	r3, [sp, #16]
 8013044:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013048:	482c      	ldr	r0, [pc, #176]	; (80130fc <_vfiprintf_r+0x250>)
 801304a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801304e:	2206      	movs	r2, #6
 8013050:	f7ed f8ce 	bl	80001f0 <memchr>
 8013054:	2800      	cmp	r0, #0
 8013056:	d03f      	beq.n	80130d8 <_vfiprintf_r+0x22c>
 8013058:	4b29      	ldr	r3, [pc, #164]	; (8013100 <_vfiprintf_r+0x254>)
 801305a:	bb1b      	cbnz	r3, 80130a4 <_vfiprintf_r+0x1f8>
 801305c:	9b03      	ldr	r3, [sp, #12]
 801305e:	3307      	adds	r3, #7
 8013060:	f023 0307 	bic.w	r3, r3, #7
 8013064:	3308      	adds	r3, #8
 8013066:	9303      	str	r3, [sp, #12]
 8013068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801306a:	443b      	add	r3, r7
 801306c:	9309      	str	r3, [sp, #36]	; 0x24
 801306e:	e767      	b.n	8012f40 <_vfiprintf_r+0x94>
 8013070:	fb0c 3202 	mla	r2, ip, r2, r3
 8013074:	460c      	mov	r4, r1
 8013076:	2001      	movs	r0, #1
 8013078:	e7a5      	b.n	8012fc6 <_vfiprintf_r+0x11a>
 801307a:	2300      	movs	r3, #0
 801307c:	3401      	adds	r4, #1
 801307e:	9305      	str	r3, [sp, #20]
 8013080:	4619      	mov	r1, r3
 8013082:	f04f 0c0a 	mov.w	ip, #10
 8013086:	4620      	mov	r0, r4
 8013088:	f810 2b01 	ldrb.w	r2, [r0], #1
 801308c:	3a30      	subs	r2, #48	; 0x30
 801308e:	2a09      	cmp	r2, #9
 8013090:	d903      	bls.n	801309a <_vfiprintf_r+0x1ee>
 8013092:	2b00      	cmp	r3, #0
 8013094:	d0c5      	beq.n	8013022 <_vfiprintf_r+0x176>
 8013096:	9105      	str	r1, [sp, #20]
 8013098:	e7c3      	b.n	8013022 <_vfiprintf_r+0x176>
 801309a:	fb0c 2101 	mla	r1, ip, r1, r2
 801309e:	4604      	mov	r4, r0
 80130a0:	2301      	movs	r3, #1
 80130a2:	e7f0      	b.n	8013086 <_vfiprintf_r+0x1da>
 80130a4:	ab03      	add	r3, sp, #12
 80130a6:	9300      	str	r3, [sp, #0]
 80130a8:	462a      	mov	r2, r5
 80130aa:	4b16      	ldr	r3, [pc, #88]	; (8013104 <_vfiprintf_r+0x258>)
 80130ac:	a904      	add	r1, sp, #16
 80130ae:	4630      	mov	r0, r6
 80130b0:	f7fb fe4c 	bl	800ed4c <_printf_float>
 80130b4:	4607      	mov	r7, r0
 80130b6:	1c78      	adds	r0, r7, #1
 80130b8:	d1d6      	bne.n	8013068 <_vfiprintf_r+0x1bc>
 80130ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80130bc:	07d9      	lsls	r1, r3, #31
 80130be:	d405      	bmi.n	80130cc <_vfiprintf_r+0x220>
 80130c0:	89ab      	ldrh	r3, [r5, #12]
 80130c2:	059a      	lsls	r2, r3, #22
 80130c4:	d402      	bmi.n	80130cc <_vfiprintf_r+0x220>
 80130c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80130c8:	f7ff f810 	bl	80120ec <__retarget_lock_release_recursive>
 80130cc:	89ab      	ldrh	r3, [r5, #12]
 80130ce:	065b      	lsls	r3, r3, #25
 80130d0:	f53f af12 	bmi.w	8012ef8 <_vfiprintf_r+0x4c>
 80130d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80130d6:	e711      	b.n	8012efc <_vfiprintf_r+0x50>
 80130d8:	ab03      	add	r3, sp, #12
 80130da:	9300      	str	r3, [sp, #0]
 80130dc:	462a      	mov	r2, r5
 80130de:	4b09      	ldr	r3, [pc, #36]	; (8013104 <_vfiprintf_r+0x258>)
 80130e0:	a904      	add	r1, sp, #16
 80130e2:	4630      	mov	r0, r6
 80130e4:	f7fc f8d6 	bl	800f294 <_printf_i>
 80130e8:	e7e4      	b.n	80130b4 <_vfiprintf_r+0x208>
 80130ea:	bf00      	nop
 80130ec:	080143a4 	.word	0x080143a4
 80130f0:	080143c4 	.word	0x080143c4
 80130f4:	08014384 	.word	0x08014384
 80130f8:	080145bc 	.word	0x080145bc
 80130fc:	080145c6 	.word	0x080145c6
 8013100:	0800ed4d 	.word	0x0800ed4d
 8013104:	08012e87 	.word	0x08012e87
 8013108:	080145c2 	.word	0x080145c2
 801310c:	00000000 	.word	0x00000000

08013110 <nan>:
 8013110:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013118 <nan+0x8>
 8013114:	4770      	bx	lr
 8013116:	bf00      	nop
 8013118:	00000000 	.word	0x00000000
 801311c:	7ff80000 	.word	0x7ff80000

08013120 <__sread>:
 8013120:	b510      	push	{r4, lr}
 8013122:	460c      	mov	r4, r1
 8013124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013128:	f000 f91a 	bl	8013360 <_read_r>
 801312c:	2800      	cmp	r0, #0
 801312e:	bfab      	itete	ge
 8013130:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013132:	89a3      	ldrhlt	r3, [r4, #12]
 8013134:	181b      	addge	r3, r3, r0
 8013136:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801313a:	bfac      	ite	ge
 801313c:	6563      	strge	r3, [r4, #84]	; 0x54
 801313e:	81a3      	strhlt	r3, [r4, #12]
 8013140:	bd10      	pop	{r4, pc}

08013142 <__swrite>:
 8013142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013146:	461f      	mov	r7, r3
 8013148:	898b      	ldrh	r3, [r1, #12]
 801314a:	05db      	lsls	r3, r3, #23
 801314c:	4605      	mov	r5, r0
 801314e:	460c      	mov	r4, r1
 8013150:	4616      	mov	r6, r2
 8013152:	d505      	bpl.n	8013160 <__swrite+0x1e>
 8013154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013158:	2302      	movs	r3, #2
 801315a:	2200      	movs	r2, #0
 801315c:	f000 f8a4 	bl	80132a8 <_lseek_r>
 8013160:	89a3      	ldrh	r3, [r4, #12]
 8013162:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013166:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801316a:	81a3      	strh	r3, [r4, #12]
 801316c:	4632      	mov	r2, r6
 801316e:	463b      	mov	r3, r7
 8013170:	4628      	mov	r0, r5
 8013172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013176:	f000 b823 	b.w	80131c0 <_write_r>

0801317a <__sseek>:
 801317a:	b510      	push	{r4, lr}
 801317c:	460c      	mov	r4, r1
 801317e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013182:	f000 f891 	bl	80132a8 <_lseek_r>
 8013186:	1c43      	adds	r3, r0, #1
 8013188:	89a3      	ldrh	r3, [r4, #12]
 801318a:	bf15      	itete	ne
 801318c:	6560      	strne	r0, [r4, #84]	; 0x54
 801318e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013192:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013196:	81a3      	strheq	r3, [r4, #12]
 8013198:	bf18      	it	ne
 801319a:	81a3      	strhne	r3, [r4, #12]
 801319c:	bd10      	pop	{r4, pc}

0801319e <__sclose>:
 801319e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131a2:	f000 b83d 	b.w	8013220 <_close_r>

080131a6 <__ascii_wctomb>:
 80131a6:	b149      	cbz	r1, 80131bc <__ascii_wctomb+0x16>
 80131a8:	2aff      	cmp	r2, #255	; 0xff
 80131aa:	bf85      	ittet	hi
 80131ac:	238a      	movhi	r3, #138	; 0x8a
 80131ae:	6003      	strhi	r3, [r0, #0]
 80131b0:	700a      	strbls	r2, [r1, #0]
 80131b2:	f04f 30ff 	movhi.w	r0, #4294967295
 80131b6:	bf98      	it	ls
 80131b8:	2001      	movls	r0, #1
 80131ba:	4770      	bx	lr
 80131bc:	4608      	mov	r0, r1
 80131be:	4770      	bx	lr

080131c0 <_write_r>:
 80131c0:	b538      	push	{r3, r4, r5, lr}
 80131c2:	4d07      	ldr	r5, [pc, #28]	; (80131e0 <_write_r+0x20>)
 80131c4:	4604      	mov	r4, r0
 80131c6:	4608      	mov	r0, r1
 80131c8:	4611      	mov	r1, r2
 80131ca:	2200      	movs	r2, #0
 80131cc:	602a      	str	r2, [r5, #0]
 80131ce:	461a      	mov	r2, r3
 80131d0:	f7ee fc7e 	bl	8001ad0 <_write>
 80131d4:	1c43      	adds	r3, r0, #1
 80131d6:	d102      	bne.n	80131de <_write_r+0x1e>
 80131d8:	682b      	ldr	r3, [r5, #0]
 80131da:	b103      	cbz	r3, 80131de <_write_r+0x1e>
 80131dc:	6023      	str	r3, [r4, #0]
 80131de:	bd38      	pop	{r3, r4, r5, pc}
 80131e0:	2000395c 	.word	0x2000395c

080131e4 <__assert_func>:
 80131e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80131e6:	4614      	mov	r4, r2
 80131e8:	461a      	mov	r2, r3
 80131ea:	4b09      	ldr	r3, [pc, #36]	; (8013210 <__assert_func+0x2c>)
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	4605      	mov	r5, r0
 80131f0:	68d8      	ldr	r0, [r3, #12]
 80131f2:	b14c      	cbz	r4, 8013208 <__assert_func+0x24>
 80131f4:	4b07      	ldr	r3, [pc, #28]	; (8013214 <__assert_func+0x30>)
 80131f6:	9100      	str	r1, [sp, #0]
 80131f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80131fc:	4906      	ldr	r1, [pc, #24]	; (8013218 <__assert_func+0x34>)
 80131fe:	462b      	mov	r3, r5
 8013200:	f000 f81e 	bl	8013240 <fiprintf>
 8013204:	f000 f8be 	bl	8013384 <abort>
 8013208:	4b04      	ldr	r3, [pc, #16]	; (801321c <__assert_func+0x38>)
 801320a:	461c      	mov	r4, r3
 801320c:	e7f3      	b.n	80131f6 <__assert_func+0x12>
 801320e:	bf00      	nop
 8013210:	200000ac 	.word	0x200000ac
 8013214:	080145cd 	.word	0x080145cd
 8013218:	080145da 	.word	0x080145da
 801321c:	08014608 	.word	0x08014608

08013220 <_close_r>:
 8013220:	b538      	push	{r3, r4, r5, lr}
 8013222:	4d06      	ldr	r5, [pc, #24]	; (801323c <_close_r+0x1c>)
 8013224:	2300      	movs	r3, #0
 8013226:	4604      	mov	r4, r0
 8013228:	4608      	mov	r0, r1
 801322a:	602b      	str	r3, [r5, #0]
 801322c:	f7f0 fa7f 	bl	800372e <_close>
 8013230:	1c43      	adds	r3, r0, #1
 8013232:	d102      	bne.n	801323a <_close_r+0x1a>
 8013234:	682b      	ldr	r3, [r5, #0]
 8013236:	b103      	cbz	r3, 801323a <_close_r+0x1a>
 8013238:	6023      	str	r3, [r4, #0]
 801323a:	bd38      	pop	{r3, r4, r5, pc}
 801323c:	2000395c 	.word	0x2000395c

08013240 <fiprintf>:
 8013240:	b40e      	push	{r1, r2, r3}
 8013242:	b503      	push	{r0, r1, lr}
 8013244:	4601      	mov	r1, r0
 8013246:	ab03      	add	r3, sp, #12
 8013248:	4805      	ldr	r0, [pc, #20]	; (8013260 <fiprintf+0x20>)
 801324a:	f853 2b04 	ldr.w	r2, [r3], #4
 801324e:	6800      	ldr	r0, [r0, #0]
 8013250:	9301      	str	r3, [sp, #4]
 8013252:	f7ff fe2b 	bl	8012eac <_vfiprintf_r>
 8013256:	b002      	add	sp, #8
 8013258:	f85d eb04 	ldr.w	lr, [sp], #4
 801325c:	b003      	add	sp, #12
 801325e:	4770      	bx	lr
 8013260:	200000ac 	.word	0x200000ac

08013264 <_fstat_r>:
 8013264:	b538      	push	{r3, r4, r5, lr}
 8013266:	4d07      	ldr	r5, [pc, #28]	; (8013284 <_fstat_r+0x20>)
 8013268:	2300      	movs	r3, #0
 801326a:	4604      	mov	r4, r0
 801326c:	4608      	mov	r0, r1
 801326e:	4611      	mov	r1, r2
 8013270:	602b      	str	r3, [r5, #0]
 8013272:	f7f0 fa68 	bl	8003746 <_fstat>
 8013276:	1c43      	adds	r3, r0, #1
 8013278:	d102      	bne.n	8013280 <_fstat_r+0x1c>
 801327a:	682b      	ldr	r3, [r5, #0]
 801327c:	b103      	cbz	r3, 8013280 <_fstat_r+0x1c>
 801327e:	6023      	str	r3, [r4, #0]
 8013280:	bd38      	pop	{r3, r4, r5, pc}
 8013282:	bf00      	nop
 8013284:	2000395c 	.word	0x2000395c

08013288 <_isatty_r>:
 8013288:	b538      	push	{r3, r4, r5, lr}
 801328a:	4d06      	ldr	r5, [pc, #24]	; (80132a4 <_isatty_r+0x1c>)
 801328c:	2300      	movs	r3, #0
 801328e:	4604      	mov	r4, r0
 8013290:	4608      	mov	r0, r1
 8013292:	602b      	str	r3, [r5, #0]
 8013294:	f7f0 fa67 	bl	8003766 <_isatty>
 8013298:	1c43      	adds	r3, r0, #1
 801329a:	d102      	bne.n	80132a2 <_isatty_r+0x1a>
 801329c:	682b      	ldr	r3, [r5, #0]
 801329e:	b103      	cbz	r3, 80132a2 <_isatty_r+0x1a>
 80132a0:	6023      	str	r3, [r4, #0]
 80132a2:	bd38      	pop	{r3, r4, r5, pc}
 80132a4:	2000395c 	.word	0x2000395c

080132a8 <_lseek_r>:
 80132a8:	b538      	push	{r3, r4, r5, lr}
 80132aa:	4d07      	ldr	r5, [pc, #28]	; (80132c8 <_lseek_r+0x20>)
 80132ac:	4604      	mov	r4, r0
 80132ae:	4608      	mov	r0, r1
 80132b0:	4611      	mov	r1, r2
 80132b2:	2200      	movs	r2, #0
 80132b4:	602a      	str	r2, [r5, #0]
 80132b6:	461a      	mov	r2, r3
 80132b8:	f7f0 fa60 	bl	800377c <_lseek>
 80132bc:	1c43      	adds	r3, r0, #1
 80132be:	d102      	bne.n	80132c6 <_lseek_r+0x1e>
 80132c0:	682b      	ldr	r3, [r5, #0]
 80132c2:	b103      	cbz	r3, 80132c6 <_lseek_r+0x1e>
 80132c4:	6023      	str	r3, [r4, #0]
 80132c6:	bd38      	pop	{r3, r4, r5, pc}
 80132c8:	2000395c 	.word	0x2000395c

080132cc <memmove>:
 80132cc:	4288      	cmp	r0, r1
 80132ce:	b510      	push	{r4, lr}
 80132d0:	eb01 0402 	add.w	r4, r1, r2
 80132d4:	d902      	bls.n	80132dc <memmove+0x10>
 80132d6:	4284      	cmp	r4, r0
 80132d8:	4623      	mov	r3, r4
 80132da:	d807      	bhi.n	80132ec <memmove+0x20>
 80132dc:	1e43      	subs	r3, r0, #1
 80132de:	42a1      	cmp	r1, r4
 80132e0:	d008      	beq.n	80132f4 <memmove+0x28>
 80132e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80132e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80132ea:	e7f8      	b.n	80132de <memmove+0x12>
 80132ec:	4402      	add	r2, r0
 80132ee:	4601      	mov	r1, r0
 80132f0:	428a      	cmp	r2, r1
 80132f2:	d100      	bne.n	80132f6 <memmove+0x2a>
 80132f4:	bd10      	pop	{r4, pc}
 80132f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80132fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80132fe:	e7f7      	b.n	80132f0 <memmove+0x24>

08013300 <_realloc_r>:
 8013300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013304:	4680      	mov	r8, r0
 8013306:	4614      	mov	r4, r2
 8013308:	460e      	mov	r6, r1
 801330a:	b921      	cbnz	r1, 8013316 <_realloc_r+0x16>
 801330c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013310:	4611      	mov	r1, r2
 8013312:	f7fb bc07 	b.w	800eb24 <_malloc_r>
 8013316:	b92a      	cbnz	r2, 8013324 <_realloc_r+0x24>
 8013318:	f7fb fb98 	bl	800ea4c <_free_r>
 801331c:	4625      	mov	r5, r4
 801331e:	4628      	mov	r0, r5
 8013320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013324:	f000 f835 	bl	8013392 <_malloc_usable_size_r>
 8013328:	4284      	cmp	r4, r0
 801332a:	4607      	mov	r7, r0
 801332c:	d802      	bhi.n	8013334 <_realloc_r+0x34>
 801332e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013332:	d812      	bhi.n	801335a <_realloc_r+0x5a>
 8013334:	4621      	mov	r1, r4
 8013336:	4640      	mov	r0, r8
 8013338:	f7fb fbf4 	bl	800eb24 <_malloc_r>
 801333c:	4605      	mov	r5, r0
 801333e:	2800      	cmp	r0, #0
 8013340:	d0ed      	beq.n	801331e <_realloc_r+0x1e>
 8013342:	42bc      	cmp	r4, r7
 8013344:	4622      	mov	r2, r4
 8013346:	4631      	mov	r1, r6
 8013348:	bf28      	it	cs
 801334a:	463a      	movcs	r2, r7
 801334c:	f7fb fb68 	bl	800ea20 <memcpy>
 8013350:	4631      	mov	r1, r6
 8013352:	4640      	mov	r0, r8
 8013354:	f7fb fb7a 	bl	800ea4c <_free_r>
 8013358:	e7e1      	b.n	801331e <_realloc_r+0x1e>
 801335a:	4635      	mov	r5, r6
 801335c:	e7df      	b.n	801331e <_realloc_r+0x1e>
	...

08013360 <_read_r>:
 8013360:	b538      	push	{r3, r4, r5, lr}
 8013362:	4d07      	ldr	r5, [pc, #28]	; (8013380 <_read_r+0x20>)
 8013364:	4604      	mov	r4, r0
 8013366:	4608      	mov	r0, r1
 8013368:	4611      	mov	r1, r2
 801336a:	2200      	movs	r2, #0
 801336c:	602a      	str	r2, [r5, #0]
 801336e:	461a      	mov	r2, r3
 8013370:	f7f0 f9c0 	bl	80036f4 <_read>
 8013374:	1c43      	adds	r3, r0, #1
 8013376:	d102      	bne.n	801337e <_read_r+0x1e>
 8013378:	682b      	ldr	r3, [r5, #0]
 801337a:	b103      	cbz	r3, 801337e <_read_r+0x1e>
 801337c:	6023      	str	r3, [r4, #0]
 801337e:	bd38      	pop	{r3, r4, r5, pc}
 8013380:	2000395c 	.word	0x2000395c

08013384 <abort>:
 8013384:	b508      	push	{r3, lr}
 8013386:	2006      	movs	r0, #6
 8013388:	f000 f834 	bl	80133f4 <raise>
 801338c:	2001      	movs	r0, #1
 801338e:	f7f0 f9a7 	bl	80036e0 <_exit>

08013392 <_malloc_usable_size_r>:
 8013392:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013396:	1f18      	subs	r0, r3, #4
 8013398:	2b00      	cmp	r3, #0
 801339a:	bfbc      	itt	lt
 801339c:	580b      	ldrlt	r3, [r1, r0]
 801339e:	18c0      	addlt	r0, r0, r3
 80133a0:	4770      	bx	lr

080133a2 <_raise_r>:
 80133a2:	291f      	cmp	r1, #31
 80133a4:	b538      	push	{r3, r4, r5, lr}
 80133a6:	4604      	mov	r4, r0
 80133a8:	460d      	mov	r5, r1
 80133aa:	d904      	bls.n	80133b6 <_raise_r+0x14>
 80133ac:	2316      	movs	r3, #22
 80133ae:	6003      	str	r3, [r0, #0]
 80133b0:	f04f 30ff 	mov.w	r0, #4294967295
 80133b4:	bd38      	pop	{r3, r4, r5, pc}
 80133b6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80133b8:	b112      	cbz	r2, 80133c0 <_raise_r+0x1e>
 80133ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80133be:	b94b      	cbnz	r3, 80133d4 <_raise_r+0x32>
 80133c0:	4620      	mov	r0, r4
 80133c2:	f000 f831 	bl	8013428 <_getpid_r>
 80133c6:	462a      	mov	r2, r5
 80133c8:	4601      	mov	r1, r0
 80133ca:	4620      	mov	r0, r4
 80133cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80133d0:	f000 b818 	b.w	8013404 <_kill_r>
 80133d4:	2b01      	cmp	r3, #1
 80133d6:	d00a      	beq.n	80133ee <_raise_r+0x4c>
 80133d8:	1c59      	adds	r1, r3, #1
 80133da:	d103      	bne.n	80133e4 <_raise_r+0x42>
 80133dc:	2316      	movs	r3, #22
 80133de:	6003      	str	r3, [r0, #0]
 80133e0:	2001      	movs	r0, #1
 80133e2:	e7e7      	b.n	80133b4 <_raise_r+0x12>
 80133e4:	2400      	movs	r4, #0
 80133e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80133ea:	4628      	mov	r0, r5
 80133ec:	4798      	blx	r3
 80133ee:	2000      	movs	r0, #0
 80133f0:	e7e0      	b.n	80133b4 <_raise_r+0x12>
	...

080133f4 <raise>:
 80133f4:	4b02      	ldr	r3, [pc, #8]	; (8013400 <raise+0xc>)
 80133f6:	4601      	mov	r1, r0
 80133f8:	6818      	ldr	r0, [r3, #0]
 80133fa:	f7ff bfd2 	b.w	80133a2 <_raise_r>
 80133fe:	bf00      	nop
 8013400:	200000ac 	.word	0x200000ac

08013404 <_kill_r>:
 8013404:	b538      	push	{r3, r4, r5, lr}
 8013406:	4d07      	ldr	r5, [pc, #28]	; (8013424 <_kill_r+0x20>)
 8013408:	2300      	movs	r3, #0
 801340a:	4604      	mov	r4, r0
 801340c:	4608      	mov	r0, r1
 801340e:	4611      	mov	r1, r2
 8013410:	602b      	str	r3, [r5, #0]
 8013412:	f7f0 f955 	bl	80036c0 <_kill>
 8013416:	1c43      	adds	r3, r0, #1
 8013418:	d102      	bne.n	8013420 <_kill_r+0x1c>
 801341a:	682b      	ldr	r3, [r5, #0]
 801341c:	b103      	cbz	r3, 8013420 <_kill_r+0x1c>
 801341e:	6023      	str	r3, [r4, #0]
 8013420:	bd38      	pop	{r3, r4, r5, pc}
 8013422:	bf00      	nop
 8013424:	2000395c 	.word	0x2000395c

08013428 <_getpid_r>:
 8013428:	f7f0 b942 	b.w	80036b0 <_getpid>

0801342c <_init>:
 801342c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801342e:	bf00      	nop
 8013430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013432:	bc08      	pop	{r3}
 8013434:	469e      	mov	lr, r3
 8013436:	4770      	bx	lr

08013438 <_fini>:
 8013438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801343a:	bf00      	nop
 801343c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801343e:	bc08      	pop	{r3}
 8013440:	469e      	mov	lr, r3
 8013442:	4770      	bx	lr
