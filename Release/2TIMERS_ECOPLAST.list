
2TIMERS_ECOPLAST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f034  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df0  0800f1d4  0800f1d4  0001f1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ffc4  0800ffc4  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  0800ffc4  0800ffc4  0001ffc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ffcc  0800ffcc  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ffcc  0800ffcc  0001ffcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ffd0  0800ffd0  0001ffd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800ffd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000036f8  20000110  080100e4  00020110  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003808  080100e4  00023808  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d0fd  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b3f  00000000  00000000  0003d23d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001950  00000000  00000000  00041d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017d0  00000000  00000000  000436cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c469  00000000  00000000  00044e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021b57  00000000  00000000  00061305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d82b  00000000  00000000  00082e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00120687  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007268  00000000  00000000  001206d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000110 	.word	0x20000110
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f1bc 	.word	0x0800f1bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000114 	.word	0x20000114
 80001dc:	0800f1bc 	.word	0x0800f1bc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800059e:	4804      	ldr	r0, [pc, #16]	; (80005b0 <SELECT+0x1c>)
 80005a0:	f002 fffc 	bl	800359c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005a4:	2001      	movs	r0, #1
 80005a6:	f002 fd3f 	bl	8003028 <HAL_Delay>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020400 	.word	0x40020400

080005b4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005be:	4804      	ldr	r0, [pc, #16]	; (80005d0 <DESELECT+0x1c>)
 80005c0:	f002 ffec 	bl	800359c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005c4:	2001      	movs	r0, #1
 80005c6:	f002 fd2f 	bl	8003028 <HAL_Delay>
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40020400 	.word	0x40020400

080005d4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005de:	bf00      	nop
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <SPI_TxByte+0x30>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	689b      	ldr	r3, [r3, #8]
 80005e6:	f003 0302 	and.w	r3, r3, #2
 80005ea:	2b02      	cmp	r3, #2
 80005ec:	d1f8      	bne.n	80005e0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80005ee:	1df9      	adds	r1, r7, #7
 80005f0:	2364      	movs	r3, #100	; 0x64
 80005f2:	2201      	movs	r2, #1
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <SPI_TxByte+0x30>)
 80005f6:	f004 f8b8 	bl	800476a <HAL_SPI_Transmit>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200033e4 	.word	0x200033e4

08000608 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000614:	bf00      	nop
 8000616:	4b08      	ldr	r3, [pc, #32]	; (8000638 <SPI_TxBuffer+0x30>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	689b      	ldr	r3, [r3, #8]
 800061c:	f003 0302 	and.w	r3, r3, #2
 8000620:	2b02      	cmp	r3, #2
 8000622:	d1f8      	bne.n	8000616 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000624:	887a      	ldrh	r2, [r7, #2]
 8000626:	2364      	movs	r3, #100	; 0x64
 8000628:	6879      	ldr	r1, [r7, #4]
 800062a:	4803      	ldr	r0, [pc, #12]	; (8000638 <SPI_TxBuffer+0x30>)
 800062c:	f004 f89d 	bl	800476a <HAL_SPI_Transmit>
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200033e4 	.word	0x200033e4

0800063c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000642:	23ff      	movs	r3, #255	; 0xff
 8000644:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000646:	bf00      	nop
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <SPI_RxByte+0x34>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	f003 0302 	and.w	r3, r3, #2
 8000652:	2b02      	cmp	r3, #2
 8000654:	d1f8      	bne.n	8000648 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000656:	1dba      	adds	r2, r7, #6
 8000658:	1df9      	adds	r1, r7, #7
 800065a:	2364      	movs	r3, #100	; 0x64
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2301      	movs	r3, #1
 8000660:	4803      	ldr	r0, [pc, #12]	; (8000670 <SPI_RxByte+0x34>)
 8000662:	f004 facf 	bl	8004c04 <HAL_SPI_TransmitReceive>

	return data;
 8000666:	79bb      	ldrb	r3, [r7, #6]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200033e4 	.word	0x200033e4

08000674 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800067c:	f7ff ffde 	bl	800063c <SPI_RxByte>
 8000680:	4603      	mov	r3, r0
 8000682:	461a      	mov	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	701a      	strb	r2, [r3, #0]
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000696:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <SD_ReadyWait+0x30>)
 8000698:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800069c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800069e:	f7ff ffcd 	bl	800063c <SPI_RxByte>
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2bff      	cmp	r3, #255	; 0xff
 80006aa:	d003      	beq.n	80006b4 <SD_ReadyWait+0x24>
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <SD_ReadyWait+0x30>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1f4      	bne.n	800069e <SD_ReadyWait+0xe>

	return res;
 80006b4:	79fb      	ldrb	r3, [r7, #7]
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	2000012e 	.word	0x2000012e

080006c4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80006ca:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80006ce:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80006d0:	f7ff ff70 	bl	80005b4 <DESELECT>
	for(int i = 0; i < 10; i++)
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	e005      	b.n	80006e6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80006da:	20ff      	movs	r0, #255	; 0xff
 80006dc:	f7ff ff7a 	bl	80005d4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	3301      	adds	r3, #1
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	ddf6      	ble.n	80006da <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80006ec:	f7ff ff52 	bl	8000594 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80006f0:	2340      	movs	r3, #64	; 0x40
 80006f2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000704:	2395      	movs	r3, #149	; 0x95
 8000706:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000708:	463b      	mov	r3, r7
 800070a:	2106      	movs	r1, #6
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff7b 	bl	8000608 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000712:	e002      	b.n	800071a <SD_PowerOn+0x56>
	{
		cnt--;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	3b01      	subs	r3, #1
 8000718:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800071a:	f7ff ff8f 	bl	800063c <SPI_RxByte>
 800071e:	4603      	mov	r3, r0
 8000720:	2b01      	cmp	r3, #1
 8000722:	d002      	beq.n	800072a <SD_PowerOn+0x66>
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d1f4      	bne.n	8000714 <SD_PowerOn+0x50>
	}

	DESELECT();
 800072a:	f7ff ff43 	bl	80005b4 <DESELECT>
	SPI_TxByte(0XFF);
 800072e:	20ff      	movs	r0, #255	; 0xff
 8000730:	f7ff ff50 	bl	80005d4 <SPI_TxByte>

	PowerFlag = 1;
 8000734:	4b03      	ldr	r3, [pc, #12]	; (8000744 <SD_PowerOn+0x80>)
 8000736:	2201      	movs	r2, #1
 8000738:	701a      	strb	r2, [r3, #0]
}
 800073a:	bf00      	nop
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000131 	.word	0x20000131

08000748 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800074c:	4b03      	ldr	r3, [pc, #12]	; (800075c <SD_PowerOff+0x14>)
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	20000131 	.word	0x20000131

08000760 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000764:	4b03      	ldr	r3, [pc, #12]	; (8000774 <SD_CheckPower+0x14>)
 8000766:	781b      	ldrb	r3, [r3, #0]
}
 8000768:	4618      	mov	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	20000131 	.word	0x20000131

08000778 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000782:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <SD_RxDataBlock+0x58>)
 8000784:	22c8      	movs	r2, #200	; 0xc8
 8000786:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000788:	f7ff ff58 	bl	800063c <SPI_RxByte>
 800078c:	4603      	mov	r3, r0
 800078e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	2bff      	cmp	r3, #255	; 0xff
 8000794:	d103      	bne.n	800079e <SD_RxDataBlock+0x26>
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <SD_RxDataBlock+0x58>)
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d1f4      	bne.n	8000788 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800079e:	7bfb      	ldrb	r3, [r7, #15]
 80007a0:	2bfe      	cmp	r3, #254	; 0xfe
 80007a2:	d001      	beq.n	80007a8 <SD_RxDataBlock+0x30>
 80007a4:	2300      	movs	r3, #0
 80007a6:	e00f      	b.n	80007c8 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff ff60 	bl	8000674 <SPI_RxBytePtr>
	} while(len--);
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	1e5a      	subs	r2, r3, #1
 80007b8:	603a      	str	r2, [r7, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d1f4      	bne.n	80007a8 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80007be:	f7ff ff3d 	bl	800063c <SPI_RxByte>
	SPI_RxByte();
 80007c2:	f7ff ff3b 	bl	800063c <SPI_RxByte>

	return TRUE;
 80007c6:	2301      	movs	r3, #1
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2000012c 	.word	0x2000012c

080007d4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80007e4:	f7ff ff54 	bl	8000690 <SD_ReadyWait>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2bff      	cmp	r3, #255	; 0xff
 80007ec:	d001      	beq.n	80007f2 <SD_TxDataBlock+0x1e>
 80007ee:	2300      	movs	r3, #0
 80007f0:	e02f      	b.n	8000852 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80007f2:	78fb      	ldrb	r3, [r7, #3]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff feed 	bl	80005d4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80007fa:	78fb      	ldrb	r3, [r7, #3]
 80007fc:	2bfd      	cmp	r3, #253	; 0xfd
 80007fe:	d020      	beq.n	8000842 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000800:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff feff 	bl	8000608 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800080a:	f7ff ff17 	bl	800063c <SPI_RxByte>
		SPI_RxByte();
 800080e:	f7ff ff15 	bl	800063c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000812:	e00b      	b.n	800082c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000814:	f7ff ff12 	bl	800063c <SPI_RxByte>
 8000818:	4603      	mov	r3, r0
 800081a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	f003 031f 	and.w	r3, r3, #31
 8000822:	2b05      	cmp	r3, #5
 8000824:	d006      	beq.n	8000834 <SD_TxDataBlock+0x60>
			i++;
 8000826:	7bbb      	ldrb	r3, [r7, #14]
 8000828:	3301      	adds	r3, #1
 800082a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800082c:	7bbb      	ldrb	r3, [r7, #14]
 800082e:	2b40      	cmp	r3, #64	; 0x40
 8000830:	d9f0      	bls.n	8000814 <SD_TxDataBlock+0x40>
 8000832:	e000      	b.n	8000836 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000834:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000836:	bf00      	nop
 8000838:	f7ff ff00 	bl	800063c <SPI_RxByte>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d0fa      	beq.n	8000838 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	f003 031f 	and.w	r3, r3, #31
 8000848:	2b05      	cmp	r3, #5
 800084a:	d101      	bne.n	8000850 <SD_TxDataBlock+0x7c>
 800084c:	2301      	movs	r3, #1
 800084e:	e000      	b.n	8000852 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b084      	sub	sp, #16
 800085e:	af00      	add	r7, sp, #0
 8000860:	4603      	mov	r3, r0
 8000862:	6039      	str	r1, [r7, #0]
 8000864:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000866:	f7ff ff13 	bl	8000690 <SD_ReadyWait>
 800086a:	4603      	mov	r3, r0
 800086c:	2bff      	cmp	r3, #255	; 0xff
 800086e:	d001      	beq.n	8000874 <SD_SendCmd+0x1a>
 8000870:	23ff      	movs	r3, #255	; 0xff
 8000872:	e042      	b.n	80008fa <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff feac 	bl	80005d4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	0e1b      	lsrs	r3, r3, #24
 8000880:	b2db      	uxtb	r3, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fea6 	bl	80005d4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	0c1b      	lsrs	r3, r3, #16
 800088c:	b2db      	uxtb	r3, r3
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fea0 	bl	80005d4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	0a1b      	lsrs	r3, r3, #8
 8000898:	b2db      	uxtb	r3, r3
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fe9a 	bl	80005d4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fe95 	bl	80005d4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2b40      	cmp	r3, #64	; 0x40
 80008ae:	d102      	bne.n	80008b6 <SD_SendCmd+0x5c>
 80008b0:	2395      	movs	r3, #149	; 0x95
 80008b2:	73fb      	strb	r3, [r7, #15]
 80008b4:	e007      	b.n	80008c6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	2b48      	cmp	r3, #72	; 0x48
 80008ba:	d102      	bne.n	80008c2 <SD_SendCmd+0x68>
 80008bc:	2387      	movs	r3, #135	; 0x87
 80008be:	73fb      	strb	r3, [r7, #15]
 80008c0:	e001      	b.n	80008c6 <SD_SendCmd+0x6c>
	else crc = 1;
 80008c2:	2301      	movs	r3, #1
 80008c4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fe83 	bl	80005d4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	2b4c      	cmp	r3, #76	; 0x4c
 80008d2:	d101      	bne.n	80008d8 <SD_SendCmd+0x7e>
 80008d4:	f7ff feb2 	bl	800063c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80008d8:	230a      	movs	r3, #10
 80008da:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80008dc:	f7ff feae 	bl	800063c <SPI_RxByte>
 80008e0:	4603      	mov	r3, r0
 80008e2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80008e4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	da05      	bge.n	80008f8 <SD_SendCmd+0x9e>
 80008ec:	7bbb      	ldrb	r3, [r7, #14]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	73bb      	strb	r3, [r7, #14]
 80008f2:	7bbb      	ldrb	r3, [r7, #14]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d1f1      	bne.n	80008dc <SD_SendCmd+0x82>

	return res;
 80008f8:	7b7b      	ldrb	r3, [r7, #13]
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SD_disk_initialize+0x14>
 8000914:	2301      	movs	r3, #1
 8000916:	e0d1      	b.n	8000abc <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000918:	4b6a      	ldr	r3, [pc, #424]	; (8000ac4 <SD_disk_initialize+0x1c0>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	b2db      	uxtb	r3, r3
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	2b00      	cmp	r3, #0
 8000924:	d003      	beq.n	800092e <SD_disk_initialize+0x2a>
 8000926:	4b67      	ldr	r3, [pc, #412]	; (8000ac4 <SD_disk_initialize+0x1c0>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	e0c6      	b.n	8000abc <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800092e:	f7ff fec9 	bl	80006c4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000932:	f7ff fe2f 	bl	8000594 <SELECT>

	/* check disk type */
	type = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800093a:	2100      	movs	r1, #0
 800093c:	2040      	movs	r0, #64	; 0x40
 800093e:	f7ff ff8c 	bl	800085a <SD_SendCmd>
 8000942:	4603      	mov	r3, r0
 8000944:	2b01      	cmp	r3, #1
 8000946:	f040 80a1 	bne.w	8000a8c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800094a:	4b5f      	ldr	r3, [pc, #380]	; (8000ac8 <SD_disk_initialize+0x1c4>)
 800094c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000950:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000952:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000956:	2048      	movs	r0, #72	; 0x48
 8000958:	f7ff ff7f 	bl	800085a <SD_SendCmd>
 800095c:	4603      	mov	r3, r0
 800095e:	2b01      	cmp	r3, #1
 8000960:	d155      	bne.n	8000a0e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000962:	2300      	movs	r3, #0
 8000964:	73fb      	strb	r3, [r7, #15]
 8000966:	e00c      	b.n	8000982 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000968:	7bfc      	ldrb	r4, [r7, #15]
 800096a:	f7ff fe67 	bl	800063c <SPI_RxByte>
 800096e:	4603      	mov	r3, r0
 8000970:	461a      	mov	r2, r3
 8000972:	f104 0310 	add.w	r3, r4, #16
 8000976:	443b      	add	r3, r7
 8000978:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800097c:	7bfb      	ldrb	r3, [r7, #15]
 800097e:	3301      	adds	r3, #1
 8000980:	73fb      	strb	r3, [r7, #15]
 8000982:	7bfb      	ldrb	r3, [r7, #15]
 8000984:	2b03      	cmp	r3, #3
 8000986:	d9ef      	bls.n	8000968 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000988:	7abb      	ldrb	r3, [r7, #10]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d17e      	bne.n	8000a8c <SD_disk_initialize+0x188>
 800098e:	7afb      	ldrb	r3, [r7, #11]
 8000990:	2baa      	cmp	r3, #170	; 0xaa
 8000992:	d17b      	bne.n	8000a8c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000994:	2100      	movs	r1, #0
 8000996:	2077      	movs	r0, #119	; 0x77
 8000998:	f7ff ff5f 	bl	800085a <SD_SendCmd>
 800099c:	4603      	mov	r3, r0
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d807      	bhi.n	80009b2 <SD_disk_initialize+0xae>
 80009a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80009a6:	2069      	movs	r0, #105	; 0x69
 80009a8:	f7ff ff57 	bl	800085a <SD_SendCmd>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d004      	beq.n	80009bc <SD_disk_initialize+0xb8>
				} while (Timer1);
 80009b2:	4b45      	ldr	r3, [pc, #276]	; (8000ac8 <SD_disk_initialize+0x1c4>)
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d1ec      	bne.n	8000994 <SD_disk_initialize+0x90>
 80009ba:	e000      	b.n	80009be <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009bc:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80009be:	4b42      	ldr	r3, [pc, #264]	; (8000ac8 <SD_disk_initialize+0x1c4>)
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d062      	beq.n	8000a8c <SD_disk_initialize+0x188>
 80009c6:	2100      	movs	r1, #0
 80009c8:	207a      	movs	r0, #122	; 0x7a
 80009ca:	f7ff ff46 	bl	800085a <SD_SendCmd>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d15b      	bne.n	8000a8c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80009d4:	2300      	movs	r3, #0
 80009d6:	73fb      	strb	r3, [r7, #15]
 80009d8:	e00c      	b.n	80009f4 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80009da:	7bfc      	ldrb	r4, [r7, #15]
 80009dc:	f7ff fe2e 	bl	800063c <SPI_RxByte>
 80009e0:	4603      	mov	r3, r0
 80009e2:	461a      	mov	r2, r3
 80009e4:	f104 0310 	add.w	r3, r4, #16
 80009e8:	443b      	add	r3, r7
 80009ea:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	3301      	adds	r3, #1
 80009f2:	73fb      	strb	r3, [r7, #15]
 80009f4:	7bfb      	ldrb	r3, [r7, #15]
 80009f6:	2b03      	cmp	r3, #3
 80009f8:	d9ef      	bls.n	80009da <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80009fa:	7a3b      	ldrb	r3, [r7, #8]
 80009fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SD_disk_initialize+0x104>
 8000a04:	230c      	movs	r3, #12
 8000a06:	e000      	b.n	8000a0a <SD_disk_initialize+0x106>
 8000a08:	2304      	movs	r3, #4
 8000a0a:	73bb      	strb	r3, [r7, #14]
 8000a0c:	e03e      	b.n	8000a8c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000a0e:	2100      	movs	r1, #0
 8000a10:	2077      	movs	r0, #119	; 0x77
 8000a12:	f7ff ff22 	bl	800085a <SD_SendCmd>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d808      	bhi.n	8000a2e <SD_disk_initialize+0x12a>
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2069      	movs	r0, #105	; 0x69
 8000a20:	f7ff ff1b 	bl	800085a <SD_SendCmd>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d801      	bhi.n	8000a2e <SD_disk_initialize+0x12a>
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	e000      	b.n	8000a30 <SD_disk_initialize+0x12c>
 8000a2e:	2301      	movs	r3, #1
 8000a30:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000a32:	7bbb      	ldrb	r3, [r7, #14]
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	d10e      	bne.n	8000a56 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2077      	movs	r0, #119	; 0x77
 8000a3c:	f7ff ff0d 	bl	800085a <SD_SendCmd>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d80e      	bhi.n	8000a64 <SD_disk_initialize+0x160>
 8000a46:	2100      	movs	r1, #0
 8000a48:	2069      	movs	r0, #105	; 0x69
 8000a4a:	f7ff ff06 	bl	800085a <SD_SendCmd>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d107      	bne.n	8000a64 <SD_disk_initialize+0x160>
 8000a54:	e00c      	b.n	8000a70 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a56:	2100      	movs	r1, #0
 8000a58:	2041      	movs	r0, #65	; 0x41
 8000a5a:	f7ff fefe 	bl	800085a <SD_SendCmd>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d004      	beq.n	8000a6e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000a64:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <SD_disk_initialize+0x1c4>)
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d1e2      	bne.n	8000a32 <SD_disk_initialize+0x12e>
 8000a6c:	e000      	b.n	8000a70 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a6e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a70:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <SD_disk_initialize+0x1c4>)
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d007      	beq.n	8000a88 <SD_disk_initialize+0x184>
 8000a78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7c:	2050      	movs	r0, #80	; 0x50
 8000a7e:	f7ff feec 	bl	800085a <SD_SendCmd>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <SD_disk_initialize+0x188>
 8000a88:	2300      	movs	r3, #0
 8000a8a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000a8c:	4a0f      	ldr	r2, [pc, #60]	; (8000acc <SD_disk_initialize+0x1c8>)
 8000a8e:	7bbb      	ldrb	r3, [r7, #14]
 8000a90:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000a92:	f7ff fd8f 	bl	80005b4 <DESELECT>
	SPI_RxByte();
 8000a96:	f7ff fdd1 	bl	800063c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000a9a:	7bbb      	ldrb	r3, [r7, #14]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d008      	beq.n	8000ab2 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <SD_disk_initialize+0x1c0>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	f023 0301 	bic.w	r3, r3, #1
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <SD_disk_initialize+0x1c0>)
 8000aae:	701a      	strb	r2, [r3, #0]
 8000ab0:	e001      	b.n	8000ab6 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000ab2:	f7ff fe49 	bl	8000748 <SD_PowerOff>
	}

	return Stat;
 8000ab6:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <SD_disk_initialize+0x1c0>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	b2db      	uxtb	r3, r3
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd90      	pop	{r4, r7, pc}
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	2000012c 	.word	0x2000012c
 8000acc:	20000130 	.word	0x20000130

08000ad0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SD_disk_status+0x14>
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e002      	b.n	8000aea <SD_disk_status+0x1a>
	return Stat;
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <SD_disk_status+0x28>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b2db      	uxtb	r3, r3
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000000 	.word	0x20000000

08000afc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	4603      	mov	r3, r0
 8000b0a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d102      	bne.n	8000b18 <SD_disk_read+0x1c>
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d101      	bne.n	8000b1c <SD_disk_read+0x20>
 8000b18:	2304      	movs	r3, #4
 8000b1a:	e051      	b.n	8000bc0 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b1c:	4b2a      	ldr	r3, [pc, #168]	; (8000bc8 <SD_disk_read+0xcc>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SD_disk_read+0x32>
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	e048      	b.n	8000bc0 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b2e:	4b27      	ldr	r3, [pc, #156]	; (8000bcc <SD_disk_read+0xd0>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d102      	bne.n	8000b40 <SD_disk_read+0x44>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	025b      	lsls	r3, r3, #9
 8000b3e:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b40:	f7ff fd28 	bl	8000594 <SELECT>

	if (count == 1)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d111      	bne.n	8000b6e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	2051      	movs	r0, #81	; 0x51
 8000b4e:	f7ff fe84 	bl	800085a <SD_SendCmd>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d129      	bne.n	8000bac <SD_disk_read+0xb0>
 8000b58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b5c:	68b8      	ldr	r0, [r7, #8]
 8000b5e:	f7ff fe0b 	bl	8000778 <SD_RxDataBlock>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d021      	beq.n	8000bac <SD_disk_read+0xb0>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	e01e      	b.n	8000bac <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	2052      	movs	r0, #82	; 0x52
 8000b72:	f7ff fe72 	bl	800085a <SD_SendCmd>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d117      	bne.n	8000bac <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b80:	68b8      	ldr	r0, [r7, #8]
 8000b82:	f7ff fdf9 	bl	8000778 <SD_RxDataBlock>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d00a      	beq.n	8000ba2 <SD_disk_read+0xa6>
				buff += 512;
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b92:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d1ed      	bne.n	8000b7c <SD_disk_read+0x80>
 8000ba0:	e000      	b.n	8000ba4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ba2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	204c      	movs	r0, #76	; 0x4c
 8000ba8:	f7ff fe57 	bl	800085a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000bac:	f7ff fd02 	bl	80005b4 <DESELECT>
	SPI_RxByte();
 8000bb0:	f7ff fd44 	bl	800063c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	bf14      	ite	ne
 8000bba:	2301      	movne	r3, #1
 8000bbc:	2300      	moveq	r3, #0
 8000bbe:	b2db      	uxtb	r3, r3
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	20000130 	.word	0x20000130

08000bd0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	4603      	mov	r3, r0
 8000bde:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d102      	bne.n	8000bec <SD_disk_write+0x1c>
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d101      	bne.n	8000bf0 <SD_disk_write+0x20>
 8000bec:	2304      	movs	r3, #4
 8000bee:	e06b      	b.n	8000cc8 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000bf0:	4b37      	ldr	r3, [pc, #220]	; (8000cd0 <SD_disk_write+0x100>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SD_disk_write+0x32>
 8000bfe:	2303      	movs	r3, #3
 8000c00:	e062      	b.n	8000cc8 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000c02:	4b33      	ldr	r3, [pc, #204]	; (8000cd0 <SD_disk_write+0x100>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	f003 0304 	and.w	r3, r3, #4
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SD_disk_write+0x44>
 8000c10:	2302      	movs	r3, #2
 8000c12:	e059      	b.n	8000cc8 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000c14:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <SD_disk_write+0x104>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d102      	bne.n	8000c26 <SD_disk_write+0x56>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	025b      	lsls	r3, r3, #9
 8000c24:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c26:	f7ff fcb5 	bl	8000594 <SELECT>

	if (count == 1)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d110      	bne.n	8000c52 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c30:	6879      	ldr	r1, [r7, #4]
 8000c32:	2058      	movs	r0, #88	; 0x58
 8000c34:	f7ff fe11 	bl	800085a <SD_SendCmd>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d13a      	bne.n	8000cb4 <SD_disk_write+0xe4>
 8000c3e:	21fe      	movs	r1, #254	; 0xfe
 8000c40:	68b8      	ldr	r0, [r7, #8]
 8000c42:	f7ff fdc7 	bl	80007d4 <SD_TxDataBlock>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d033      	beq.n	8000cb4 <SD_disk_write+0xe4>
			count = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	e030      	b.n	8000cb4 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000c52:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <SD_disk_write+0x104>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d007      	beq.n	8000c6e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000c5e:	2100      	movs	r1, #0
 8000c60:	2077      	movs	r0, #119	; 0x77
 8000c62:	f7ff fdfa 	bl	800085a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c66:	6839      	ldr	r1, [r7, #0]
 8000c68:	2057      	movs	r0, #87	; 0x57
 8000c6a:	f7ff fdf6 	bl	800085a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	2059      	movs	r0, #89	; 0x59
 8000c72:	f7ff fdf2 	bl	800085a <SD_SendCmd>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d11b      	bne.n	8000cb4 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c7c:	21fc      	movs	r1, #252	; 0xfc
 8000c7e:	68b8      	ldr	r0, [r7, #8]
 8000c80:	f7ff fda8 	bl	80007d4 <SD_TxDataBlock>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d00a      	beq.n	8000ca0 <SD_disk_write+0xd0>
				buff += 512;
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c90:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	3b01      	subs	r3, #1
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d1ee      	bne.n	8000c7c <SD_disk_write+0xac>
 8000c9e:	e000      	b.n	8000ca2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000ca0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000ca2:	21fd      	movs	r1, #253	; 0xfd
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f7ff fd95 	bl	80007d4 <SD_TxDataBlock>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d101      	bne.n	8000cb4 <SD_disk_write+0xe4>
			{
				count = 1;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000cb4:	f7ff fc7e 	bl	80005b4 <DESELECT>
	SPI_RxByte();
 8000cb8:	f7ff fcc0 	bl	800063c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	bf14      	ite	ne
 8000cc2:	2301      	movne	r3, #1
 8000cc4:	2300      	moveq	r3, #0
 8000cc6:	b2db      	uxtb	r3, r3
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	20000130 	.word	0x20000130

08000cd8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b08b      	sub	sp, #44	; 0x2c
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	603a      	str	r2, [r7, #0]
 8000ce2:	71fb      	strb	r3, [r7, #7]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SD_disk_ioctl+0x1e>
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	e115      	b.n	8000f22 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000cfc:	79bb      	ldrb	r3, [r7, #6]
 8000cfe:	2b05      	cmp	r3, #5
 8000d00:	d124      	bne.n	8000d4c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000d02:	6a3b      	ldr	r3, [r7, #32]
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d012      	beq.n	8000d30 <SD_disk_ioctl+0x58>
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	dc1a      	bgt.n	8000d44 <SD_disk_ioctl+0x6c>
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d002      	beq.n	8000d18 <SD_disk_ioctl+0x40>
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d006      	beq.n	8000d24 <SD_disk_ioctl+0x4c>
 8000d16:	e015      	b.n	8000d44 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000d18:	f7ff fd16 	bl	8000748 <SD_PowerOff>
			res = RES_OK;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d22:	e0fc      	b.n	8000f1e <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000d24:	f7ff fcce 	bl	80006c4 <SD_PowerOn>
			res = RES_OK;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d2e:	e0f6      	b.n	8000f1e <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000d30:	6a3b      	ldr	r3, [r7, #32]
 8000d32:	1c5c      	adds	r4, r3, #1
 8000d34:	f7ff fd14 	bl	8000760 <SD_CheckPower>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d42:	e0ec      	b.n	8000f1e <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000d44:	2304      	movs	r3, #4
 8000d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d4a:	e0e8      	b.n	8000f1e <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d4c:	4b77      	ldr	r3, [pc, #476]	; (8000f2c <SD_disk_ioctl+0x254>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <SD_disk_ioctl+0x86>
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e0e1      	b.n	8000f22 <SD_disk_ioctl+0x24a>

		SELECT();
 8000d5e:	f7ff fc19 	bl	8000594 <SELECT>

		switch (ctrl)
 8000d62:	79bb      	ldrb	r3, [r7, #6]
 8000d64:	2b0d      	cmp	r3, #13
 8000d66:	f200 80cb 	bhi.w	8000f00 <SD_disk_ioctl+0x228>
 8000d6a:	a201      	add	r2, pc, #4	; (adr r2, 8000d70 <SD_disk_ioctl+0x98>)
 8000d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d70:	08000e6b 	.word	0x08000e6b
 8000d74:	08000da9 	.word	0x08000da9
 8000d78:	08000e5b 	.word	0x08000e5b
 8000d7c:	08000f01 	.word	0x08000f01
 8000d80:	08000f01 	.word	0x08000f01
 8000d84:	08000f01 	.word	0x08000f01
 8000d88:	08000f01 	.word	0x08000f01
 8000d8c:	08000f01 	.word	0x08000f01
 8000d90:	08000f01 	.word	0x08000f01
 8000d94:	08000f01 	.word	0x08000f01
 8000d98:	08000f01 	.word	0x08000f01
 8000d9c:	08000e7d 	.word	0x08000e7d
 8000da0:	08000ea1 	.word	0x08000ea1
 8000da4:	08000ec5 	.word	0x08000ec5
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000da8:	2100      	movs	r1, #0
 8000daa:	2049      	movs	r0, #73	; 0x49
 8000dac:	f7ff fd55 	bl	800085a <SD_SendCmd>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 80a8 	bne.w	8000f08 <SD_disk_ioctl+0x230>
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	2110      	movs	r1, #16
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fcda 	bl	8000778 <SD_RxDataBlock>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f000 809e 	beq.w	8000f08 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000dcc:	7b3b      	ldrb	r3, [r7, #12]
 8000dce:	099b      	lsrs	r3, r3, #6
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d10e      	bne.n	8000df4 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000dd6:	7d7b      	ldrb	r3, [r7, #21]
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	7d3b      	ldrb	r3, [r7, #20]
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	021b      	lsls	r3, r3, #8
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	4413      	add	r3, r2
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	3301      	adds	r3, #1
 8000de8:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000dea:	8bfb      	ldrh	r3, [r7, #30]
 8000dec:	029a      	lsls	r2, r3, #10
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	e02e      	b.n	8000e52 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000df4:	7c7b      	ldrb	r3, [r7, #17]
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	7dbb      	ldrb	r3, [r7, #22]
 8000dfe:	09db      	lsrs	r3, r3, #7
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	4413      	add	r3, r2
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	7d7b      	ldrb	r3, [r7, #21]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	f003 0306 	and.w	r3, r3, #6
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	4413      	add	r3, r2
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	3302      	adds	r3, #2
 8000e18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e1c:	7d3b      	ldrb	r3, [r7, #20]
 8000e1e:	099b      	lsrs	r3, r3, #6
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	7cfb      	ldrb	r3, [r7, #19]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	4413      	add	r3, r2
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	7cbb      	ldrb	r3, [r7, #18]
 8000e32:	029b      	lsls	r3, r3, #10
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	4413      	add	r3, r2
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	3301      	adds	r3, #1
 8000e42:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e44:	8bfa      	ldrh	r2, [r7, #30]
 8000e46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e4a:	3b09      	subs	r3, #9
 8000e4c:	409a      	lsls	r2, r3
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000e58:	e056      	b.n	8000f08 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e60:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e62:	2300      	movs	r3, #0
 8000e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e68:	e055      	b.n	8000f16 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e6a:	f7ff fc11 	bl	8000690 <SD_ReadyWait>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2bff      	cmp	r3, #255	; 0xff
 8000e72:	d14b      	bne.n	8000f0c <SD_disk_ioctl+0x234>
 8000e74:	2300      	movs	r3, #0
 8000e76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e7a:	e047      	b.n	8000f0c <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2049      	movs	r0, #73	; 0x49
 8000e80:	f7ff fceb 	bl	800085a <SD_SendCmd>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d142      	bne.n	8000f10 <SD_disk_ioctl+0x238>
 8000e8a:	2110      	movs	r1, #16
 8000e8c:	6a38      	ldr	r0, [r7, #32]
 8000e8e:	f7ff fc73 	bl	8000778 <SD_RxDataBlock>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d03b      	beq.n	8000f10 <SD_disk_ioctl+0x238>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e9e:	e037      	b.n	8000f10 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	204a      	movs	r0, #74	; 0x4a
 8000ea4:	f7ff fcd9 	bl	800085a <SD_SendCmd>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d132      	bne.n	8000f14 <SD_disk_ioctl+0x23c>
 8000eae:	2110      	movs	r1, #16
 8000eb0:	6a38      	ldr	r0, [r7, #32]
 8000eb2:	f7ff fc61 	bl	8000778 <SD_RxDataBlock>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d02b      	beq.n	8000f14 <SD_disk_ioctl+0x23c>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000ec2:	e027      	b.n	8000f14 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	207a      	movs	r0, #122	; 0x7a
 8000ec8:	f7ff fcc7 	bl	800085a <SD_SendCmd>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d116      	bne.n	8000f00 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ed8:	e00b      	b.n	8000ef2 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000eda:	6a3c      	ldr	r4, [r7, #32]
 8000edc:	1c63      	adds	r3, r4, #1
 8000ede:	623b      	str	r3, [r7, #32]
 8000ee0:	f7ff fbac 	bl	800063c <SPI_RxByte>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000ee8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000eec:	3301      	adds	r3, #1
 8000eee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ef2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d9ef      	bls.n	8000eda <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000f00:	2304      	movs	r3, #4
 8000f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f06:	e006      	b.n	8000f16 <SD_disk_ioctl+0x23e>
			break;
 8000f08:	bf00      	nop
 8000f0a:	e004      	b.n	8000f16 <SD_disk_ioctl+0x23e>
			break;
 8000f0c:	bf00      	nop
 8000f0e:	e002      	b.n	8000f16 <SD_disk_ioctl+0x23e>
			break;
 8000f10:	bf00      	nop
 8000f12:	e000      	b.n	8000f16 <SD_disk_ioctl+0x23e>
			break;
 8000f14:	bf00      	nop
		}

		DESELECT();
 8000f16:	f7ff fb4d 	bl	80005b4 <DESELECT>
		SPI_RxByte();
 8000f1a:	f7ff fb8f 	bl	800063c <SPI_RxByte>
	}

	return res;
 8000f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	372c      	adds	r7, #44	; 0x2c
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd90      	pop	{r4, r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000000 	.word	0x20000000

08000f30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	4b40      	ldr	r3, [pc, #256]	; (800104c <MX_GPIO_Init+0x11c>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a3f      	ldr	r2, [pc, #252]	; (800104c <MX_GPIO_Init+0x11c>)
 8000f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b3d      	ldr	r3, [pc, #244]	; (800104c <MX_GPIO_Init+0x11c>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b39      	ldr	r3, [pc, #228]	; (800104c <MX_GPIO_Init+0x11c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a38      	ldr	r2, [pc, #224]	; (800104c <MX_GPIO_Init+0x11c>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b36      	ldr	r3, [pc, #216]	; (800104c <MX_GPIO_Init+0x11c>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	4b32      	ldr	r3, [pc, #200]	; (800104c <MX_GPIO_Init+0x11c>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a31      	ldr	r2, [pc, #196]	; (800104c <MX_GPIO_Init+0x11c>)
 8000f88:	f043 0302 	orr.w	r3, r3, #2
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b2f      	ldr	r3, [pc, #188]	; (800104c <MX_GPIO_Init+0x11c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	4b2b      	ldr	r3, [pc, #172]	; (800104c <MX_GPIO_Init+0x11c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a2a      	ldr	r2, [pc, #168]	; (800104c <MX_GPIO_Init+0x11c>)
 8000fa4:	f043 0308 	orr.w	r3, r3, #8
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b28      	ldr	r3, [pc, #160]	; (800104c <MX_GPIO_Init+0x11c>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0308 	and.w	r3, r3, #8
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_ETHERNET_CS_GPIO_Port, SPI1_ETHERNET_CS_Pin, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2110      	movs	r1, #16
 8000fba:	4825      	ldr	r0, [pc, #148]	; (8001050 <MX_GPIO_Init+0x120>)
 8000fbc:	f002 faee 	bl	800359c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc6:	4823      	ldr	r0, [pc, #140]	; (8001054 <MX_GPIO_Init+0x124>)
 8000fc8:	f002 fae8 	bl	800359c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETHERNET_RST_GPIO_Port, ETHERNET_RST_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2104      	movs	r1, #4
 8000fd0:	4821      	ldr	r0, [pc, #132]	; (8001058 <MX_GPIO_Init+0x128>)
 8000fd2:	f002 fae3 	bl	800359c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_ETHERNET_CS_Pin;
 8000fd6:	2310      	movs	r3, #16
 8000fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_ETHERNET_CS_GPIO_Port, &GPIO_InitStruct);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	4818      	ldr	r0, [pc, #96]	; (8001050 <MX_GPIO_Init+0x120>)
 8000fee:	f002 f951 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOLD_BACKWARD_INPUT_Pin|INJECTION_FORWARD_INPUT_Pin|RAW_MATERIAL_INPUT_Pin|INJECTION_BACKWARD_INPUT_Pin
 8000ff2:	23ff      	movs	r3, #255	; 0xff
 8000ff4:	617b      	str	r3, [r7, #20]
                          |MOLD_FORWARD_INPUT_Pin|REVIZED_1_INPUT_Pin|REVIZED_2_INPUT_Pin|REVIZED_3_INPUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	4813      	ldr	r0, [pc, #76]	; (8001054 <MX_GPIO_Init+0x124>)
 8001006:	f002 f945 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800100a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	2301      	movs	r3, #1
 8001012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001014:	2301      	movs	r3, #1
 8001016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4619      	mov	r1, r3
 8001022:	480c      	ldr	r0, [pc, #48]	; (8001054 <MX_GPIO_Init+0x124>)
 8001024:	f002 f936 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ETHERNET_RST_Pin;
 8001028:	2304      	movs	r3, #4
 800102a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102c:	2301      	movs	r3, #1
 800102e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001030:	2301      	movs	r3, #1
 8001032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ETHERNET_RST_GPIO_Port, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	4806      	ldr	r0, [pc, #24]	; (8001058 <MX_GPIO_Init+0x128>)
 8001040:	f002 f928 	bl	8003294 <HAL_GPIO_Init>

}
 8001044:	bf00      	nop
 8001046:	3728      	adds	r7, #40	; 0x28
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40023800 	.word	0x40023800
 8001050:	40020000 	.word	0x40020000
 8001054:	40020400 	.word	0x40020400
 8001058:	40020c00 	.word	0x40020c00

0800105c <_write>:
/* W5500 Defines End*/

/* Printf Defines */
#if defined(__GNUC__)
int _write(int fd, char * ptr, int len)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	b29a      	uxth	r2, r3
 800106c:	f04f 33ff 	mov.w	r3, #4294967295
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	4804      	ldr	r0, [pc, #16]	; (8001084 <_write+0x28>)
 8001074:	f004 fd2b 	bl	8005ace <HAL_UART_Transmit>
  return len;
 8001078:	687b      	ldr	r3, [r7, #4]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200034d0 	.word	0x200034d0

08001088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800108c:	f001 ff5a 	bl	8002f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001090:	f000 f84c 	bl	800112c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001094:	f7ff ff4c 	bl	8000f30 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001098:	f001 fdd6 	bl	8002c48 <MX_TIM3_Init>
  MX_RTC_Init();
 800109c:	f001 fb4c 	bl	8002738 <MX_RTC_Init>
  MX_SPI1_Init();
 80010a0:	f001 fbd0 	bl	8002844 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80010a4:	f001 feb2 	bl	8002e0c <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80010a8:	f001 fc02 	bl	80028b0 <MX_SPI2_Init>
  MX_FATFS_Init();
 80010ac:	f005 f884 	bl	80061b8 <MX_FATFS_Init>
  MX_TIM4_Init();
 80010b0:	f001 fe18 	bl	8002ce4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  sdStatus = SDInit();
 80010b4:	f001 f88a 	bl	80021cc <SDInit>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b10      	ldr	r3, [pc, #64]	; (8001100 <main+0x78>)
 80010be:	701a      	strb	r2, [r3, #0]
  if (sdStatus == SD_CARD_READY) {
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <main+0x78>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	b25b      	sxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d102      	bne.n	80010d0 <main+0x48>
	  msgLogger("SD_CARD Init is done.");
 80010ca:	480e      	ldr	r0, [pc, #56]	; (8001104 <main+0x7c>)
 80010cc:	f001 fa78 	bl	80025c0 <msgLogger>
  }
  reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 80010d0:	490d      	ldr	r1, [pc, #52]	; (8001108 <main+0x80>)
 80010d2:	480e      	ldr	r0, [pc, #56]	; (800110c <main+0x84>)
 80010d4:	f00a face 	bl	800b674 <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(spi_rb, spi_wb);
 80010d8:	490d      	ldr	r1, [pc, #52]	; (8001110 <main+0x88>)
 80010da:	480e      	ldr	r0, [pc, #56]	; (8001114 <main+0x8c>)
 80010dc:	f00a faf0 	bl	800b6c0 <reg_wizchip_spi_cbfunc>

  prevInputs = GPIOB->IDR;
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <main+0x90>)
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4b0d      	ldr	r3, [pc, #52]	; (800111c <main+0x94>)
 80010e8:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim4);
 80010ea:	480d      	ldr	r0, [pc, #52]	; (8001120 <main+0x98>)
 80010ec:	f004 f8ac 	bl	8005248 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80010f0:	480c      	ldr	r0, [pc, #48]	; (8001124 <main+0x9c>)
 80010f2:	f004 f8a9 	bl	8005248 <HAL_TIM_Base_Start_IT>

  msgLogger("Setup is DONE.");
 80010f6:	480c      	ldr	r0, [pc, #48]	; (8001128 <main+0xa0>)
 80010f8:	f001 fa62 	bl	80025c0 <msgLogger>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <main+0x74>
 80010fe:	bf00      	nop
 8001100:	20000140 	.word	0x20000140
 8001104:	0800f1f0 	.word	0x0800f1f0
 8001108:	080026cd 	.word	0x080026cd
 800110c:	080026b5 	.word	0x080026b5
 8001110:	08002709 	.word	0x08002709
 8001114:	080026e5 	.word	0x080026e5
 8001118:	40020400 	.word	0x40020400
 800111c:	20002b01 	.word	0x20002b01
 8001120:	20003488 	.word	0x20003488
 8001124:	20003440 	.word	0x20003440
 8001128:	0800f208 	.word	0x0800f208

0800112c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b094      	sub	sp, #80	; 0x50
 8001130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001132:	f107 0320 	add.w	r3, r7, #32
 8001136:	2230      	movs	r2, #48	; 0x30
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f00c fe48 	bl	800ddd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <SystemClock_Config+0xb8>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	4a22      	ldr	r2, [pc, #136]	; (80011e4 <SystemClock_Config+0xb8>)
 800115a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115e:	6413      	str	r3, [r2, #64]	; 0x40
 8001160:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <SystemClock_Config+0xb8>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800116c:	2300      	movs	r3, #0
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <SystemClock_Config+0xbc>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001178:	4a1b      	ldr	r2, [pc, #108]	; (80011e8 <SystemClock_Config+0xbc>)
 800117a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <SystemClock_Config+0xbc>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800118c:	2309      	movs	r3, #9
 800118e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001190:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001196:	2301      	movs	r3, #1
 8001198:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800119a:	2300      	movs	r3, #0
 800119c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119e:	f107 0320 	add.w	r3, r7, #32
 80011a2:	4618      	mov	r0, r3
 80011a4:	f002 fa14 	bl	80035d0 <HAL_RCC_OscConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80011ae:	f001 fabd 	bl	800272c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b2:	230f      	movs	r3, #15
 80011b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80011b6:	2301      	movs	r3, #1
 80011b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f002 fc77 	bl	8003ac0 <HAL_RCC_ClockConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80011d8:	f001 faa8 	bl	800272c <Error_Handler>
  }
}
 80011dc:	bf00      	nop
 80011de:	3750      	adds	r7, #80	; 0x50
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40007000 	.word	0x40007000

080011ec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011f0:	b08b      	sub	sp, #44	; 0x2c
 80011f2:	af06      	add	r7, sp, #24
 80011f4:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a9b      	ldr	r2, [pc, #620]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d147      	bne.n	8001290 <HAL_TIM_PeriodElapsedCallback+0xa4>
		if (currentTimer3Status == 0) {
 8001200:	4b9a      	ldr	r3, [pc, #616]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d11b      	bne.n	8001242 <HAL_TIM_PeriodElapsedCallback+0x56>
			product = (struct productVal*)malloc(sizeof(struct productVal));
 800120a:	f240 1069 	movw	r0, #361	; 0x169
 800120e:	f00c fdc1 	bl	800dd94 <malloc>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	4b96      	ldr	r3, [pc, #600]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001218:	601a      	str	r2, [r3, #0]
			if (product != NULL) {
 800121a:	4b95      	ldr	r3, [pc, #596]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00b      	beq.n	800123a <HAL_TIM_PeriodElapsedCallback+0x4e>
				fillProduct(product);
 8001222:	4b93      	ldr	r3, [pc, #588]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f000 fb98 	bl	800195c <fillProduct>
				currentTimer3Status = 1;
 800122c:	4b8f      	ldr	r3, [pc, #572]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x280>)
 800122e:	2201      	movs	r2, #1
 8001230:	701a      	strb	r2, [r3, #0]
				msgLogger("Timer3 status is changed. 0 --> 1");
 8001232:	4890      	ldr	r0, [pc, #576]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001234:	f001 f9c4 	bl	80025c0 <msgLogger>
 8001238:	e02a      	b.n	8001290 <HAL_TIM_PeriodElapsedCallback+0xa4>
			}
			else
				currentTimer3Status = 0;
 800123a:	4b8c      	ldr	r3, [pc, #560]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x280>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
 8001240:	e026      	b.n	8001290 <HAL_TIM_PeriodElapsedCallback+0xa4>
		}
		else if (currentTimer3Status == 1) {
 8001242:	4b8a      	ldr	r3, [pc, #552]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b01      	cmp	r3, #1
 800124a:	d10e      	bne.n	800126a <HAL_TIM_PeriodElapsedCallback+0x7e>
			checkInputs();
 800124c:	f000 f94e 	bl	80014ec <checkInputs>
			int productStatus = checkProduct();
 8001250:	f000 f96e 	bl	8001530 <checkProduct>
 8001254:	60f8      	str	r0, [r7, #12]
			if (productStatus) {
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d019      	beq.n	8001290 <HAL_TIM_PeriodElapsedCallback+0xa4>
				currentTimer3Status = 2;
 800125c:	4b83      	ldr	r3, [pc, #524]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x280>)
 800125e:	2202      	movs	r2, #2
 8001260:	701a      	strb	r2, [r3, #0]
				msgLogger("Timer3 status is changed. 1 --> 2");
 8001262:	4885      	ldr	r0, [pc, #532]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001264:	f001 f9ac 	bl	80025c0 <msgLogger>
 8001268:	e012      	b.n	8001290 <HAL_TIM_PeriodElapsedCallback+0xa4>
			}
		}
		else if (currentTimer3Status == 2) {
 800126a:	4b80      	ldr	r3, [pc, #512]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x280>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d10d      	bne.n	8001290 <HAL_TIM_PeriodElapsedCallback+0xa4>
			free(product);
 8001274:	4b7e      	ldr	r3, [pc, #504]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f00c fd93 	bl	800dda4 <free>
			IsProductDone = true;
 800127e:	4b7f      	ldr	r3, [pc, #508]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001280:	2201      	movs	r2, #1
 8001282:	701a      	strb	r2, [r3, #0]
			currentTimer3Status = 0;
 8001284:	4b79      	ldr	r3, [pc, #484]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
			msgLogger("Timer3 status is changed. 2 --> 0");
 800128a:	487d      	ldr	r0, [pc, #500]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800128c:	f001 f998 	bl	80025c0 <msgLogger>
		}
	}
	if (htim->Instance == TIM4) {
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a7b      	ldr	r2, [pc, #492]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001296:	4293      	cmp	r3, r2
 8001298:	f040 80e1 	bne.w	800145e <HAL_TIM_PeriodElapsedCallback+0x272>
		timer4Counter++;
 800129c:	4b7a      	ldr	r3, [pc, #488]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	f112 0801 	adds.w	r8, r2, #1
 80012a6:	f143 0900 	adc.w	r9, r3, #0
 80012aa:	4b77      	ldr	r3, [pc, #476]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80012ac:	e9c3 8900 	strd	r8, r9, [r3]
		if (currentTimer4Status == 0) {
 80012b0:	4b76      	ldr	r3, [pc, #472]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10b      	bne.n	80012d2 <HAL_TIM_PeriodElapsedCallback+0xe6>
			ETH_PWR_RESET;
 80012ba:	2200      	movs	r2, #0
 80012bc:	2104      	movs	r1, #4
 80012be:	4874      	ldr	r0, [pc, #464]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80012c0:	f002 f96c 	bl	800359c <HAL_GPIO_WritePin>
			currentTimer4Status = 1;
 80012c4:	4b71      	ldr	r3, [pc, #452]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
			msgLogger("Timer4 status is changed. 0 --> 1");
 80012ca:	4872      	ldr	r0, [pc, #456]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80012cc:	f001 f978 	bl	80025c0 <msgLogger>
				currentTimer4Status = 4;
				msgLogger("Timer4 status is changed. 5 --> 4");
			}
		}
	}
}
 80012d0:	e0c5      	b.n	800145e <HAL_TIM_PeriodElapsedCallback+0x272>
		else if (currentTimer4Status == 1) {
 80012d2:	4b6e      	ldr	r3, [pc, #440]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d10b      	bne.n	80012f4 <HAL_TIM_PeriodElapsedCallback+0x108>
			ETH_PWR_SET;
 80012dc:	2201      	movs	r2, #1
 80012de:	2104      	movs	r1, #4
 80012e0:	486b      	ldr	r0, [pc, #428]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80012e2:	f002 f95b 	bl	800359c <HAL_GPIO_WritePin>
			currentTimer4Status = 2;
 80012e6:	4b69      	ldr	r3, [pc, #420]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80012e8:	2202      	movs	r2, #2
 80012ea:	701a      	strb	r2, [r3, #0]
			msgLogger("Timer4 status is changed. 1 --> 2");
 80012ec:	486a      	ldr	r0, [pc, #424]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80012ee:	f001 f967 	bl	80025c0 <msgLogger>
}
 80012f2:	e0b4      	b.n	800145e <HAL_TIM_PeriodElapsedCallback+0x272>
		else if (currentTimer4Status == 2) {
 80012f4:	4b65      	ldr	r3, [pc, #404]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d12c      	bne.n	8001358 <HAL_TIM_PeriodElapsedCallback+0x16c>
			if (w5500Init(w5500opt) == 0) {
 80012fe:	4e67      	ldr	r6, [pc, #412]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001300:	466d      	mov	r5, sp
 8001302:	f106 0410 	add.w	r4, r6, #16
 8001306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800130a:	6823      	ldr	r3, [r4, #0]
 800130c:	602b      	str	r3, [r5, #0]
 800130e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001312:	f001 f819 	bl	8002348 <w5500Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d116      	bne.n	800134a <HAL_TIM_PeriodElapsedCallback+0x15e>
				msgLogger("W5500 init OK.");
 800131c:	4860      	ldr	r0, [pc, #384]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800131e:	f001 f94f 	bl	80025c0 <msgLogger>
				if (rtcStatus == SET_RTC_NOK) {
 8001322:	4b60      	ldr	r3, [pc, #384]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001324:	f993 3000 	ldrsb.w	r3, [r3]
 8001328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800132c:	d106      	bne.n	800133c <HAL_TIM_PeriodElapsedCallback+0x150>
					currentTimer4Status = 3;
 800132e:	4b57      	ldr	r3, [pc, #348]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001330:	2203      	movs	r2, #3
 8001332:	701a      	strb	r2, [r3, #0]
					msgLogger("Timer4 status is changed. 2 --> 3");
 8001334:	485c      	ldr	r0, [pc, #368]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001336:	f001 f943 	bl	80025c0 <msgLogger>
}
 800133a:	e090      	b.n	800145e <HAL_TIM_PeriodElapsedCallback+0x272>
					currentTimer4Status = 4;
 800133c:	4b53      	ldr	r3, [pc, #332]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800133e:	2204      	movs	r2, #4
 8001340:	701a      	strb	r2, [r3, #0]
					msgLogger("Timer4 status is changed. 2 --> 4");
 8001342:	485a      	ldr	r0, [pc, #360]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001344:	f001 f93c 	bl	80025c0 <msgLogger>
}
 8001348:	e089      	b.n	800145e <HAL_TIM_PeriodElapsedCallback+0x272>
				currentTimer4Status = 0;
 800134a:	4b50      	ldr	r3, [pc, #320]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
				msgLogger("W5500 Init Error. Timer4 status is changed. 2 --> 0");
 8001350:	4857      	ldr	r0, [pc, #348]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001352:	f001 f935 	bl	80025c0 <msgLogger>
}
 8001356:	e082      	b.n	800145e <HAL_TIM_PeriodElapsedCallback+0x272>
		else if (currentTimer4Status == 3) {
 8001358:	4b4c      	ldr	r3, [pc, #304]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b03      	cmp	r3, #3
 8001360:	d142      	bne.n	80013e8 <HAL_TIM_PeriodElapsedCallback+0x1fc>
			if (timer4Counter % 2 == 0) {    //to make 2 seconds delay
 8001362:	4b49      	ldr	r3, [pc, #292]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001368:	f002 0401 	and.w	r4, r2, #1
 800136c:	2500      	movs	r5, #0
 800136e:	ea54 0305 	orrs.w	r3, r4, r5
 8001372:	d174      	bne.n	800145e <HAL_TIM_PeriodElapsedCallback+0x272>
				SNTP_init(ntpSocket, ntp_server, timeZone, ethBuf);
 8001374:	4b4f      	ldr	r3, [pc, #316]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001376:	7818      	ldrb	r0, [r3, #0]
 8001378:	4b4f      	ldr	r3, [pc, #316]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800137a:	781a      	ldrb	r2, [r3, #0]
 800137c:	4b4f      	ldr	r3, [pc, #316]	; (80014bc <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800137e:	4950      	ldr	r1, [pc, #320]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001380:	f00c f980 	bl	800d684 <SNTP_init>
				if (SET_RTC_OK == setRTCTime()) {
 8001384:	f000 fc90 	bl	8001ca8 <setRTCTime>
 8001388:	4603      	mov	r3, r0
 800138a:	2b01      	cmp	r3, #1
 800138c:	d113      	bne.n	80013b6 <HAL_TIM_PeriodElapsedCallback+0x1ca>
					rtcStatus = SET_RTC_OK;
 800138e:	4b45      	ldr	r3, [pc, #276]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001390:	2201      	movs	r2, #1
 8001392:	701a      	strb	r2, [r3, #0]
					printf("Time is succesfully set to = %s\r\n", getRTCTime());
 8001394:	f000 fd90 	bl	8001eb8 <getRTCTime>
 8001398:	4603      	mov	r3, r0
 800139a:	4619      	mov	r1, r3
 800139c:	4849      	ldr	r0, [pc, #292]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800139e:	f00c fdff 	bl	800dfa0 <iprintf>
					currentTimer4Status = 4;
 80013a2:	4b3a      	ldr	r3, [pc, #232]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80013a4:	2204      	movs	r2, #4
 80013a6:	701a      	strb	r2, [r3, #0]
					msgLogger("Timer4 status is changed. 3 --> 4");
 80013a8:	4847      	ldr	r0, [pc, #284]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80013aa:	f001 f909 	bl	80025c0 <msgLogger>
					counter = 0;
 80013ae:	4b47      	ldr	r3, [pc, #284]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
}
 80013b4:	e053      	b.n	800145e <HAL_TIM_PeriodElapsedCallback+0x272>
					msgLogger("setRTCTime Error");
 80013b6:	4846      	ldr	r0, [pc, #280]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80013b8:	f001 f902 	bl	80025c0 <msgLogger>
					counter++;
 80013bc:	4b43      	ldr	r3, [pc, #268]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	4a42      	ldr	r2, [pc, #264]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80013c4:	6013      	str	r3, [r2, #0]
					if (counter > 10) {
 80013c6:	4b41      	ldr	r3, [pc, #260]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b0a      	cmp	r3, #10
 80013cc:	dd47      	ble.n	800145e <HAL_TIM_PeriodElapsedCallback+0x272>
						msgLogger("setRTCTime Error happaned too many times.");
 80013ce:	4841      	ldr	r0, [pc, #260]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80013d0:	f001 f8f6 	bl	80025c0 <msgLogger>
						counter = 0;
 80013d4:	4b3d      	ldr	r3, [pc, #244]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
						currentTimer4Status = 0;
 80013da:	4b2c      	ldr	r3, [pc, #176]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
						msgLogger("Timer4 status is changed. 3 --> 0");
 80013e0:	483d      	ldr	r0, [pc, #244]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80013e2:	f001 f8ed 	bl	80025c0 <msgLogger>
}
 80013e6:	e03a      	b.n	800145e <HAL_TIM_PeriodElapsedCallback+0x272>
		else if (currentTimer4Status == 4) {
 80013e8:	4b28      	ldr	r3, [pc, #160]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	d10b      	bne.n	800140a <HAL_TIM_PeriodElapsedCallback+0x21e>
			if (IsProductDone) {
 80013f2:	4b22      	ldr	r3, [pc, #136]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x290>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d030      	beq.n	800145e <HAL_TIM_PeriodElapsedCallback+0x272>
				currentTimer4Status = 5;
 80013fc:	4b23      	ldr	r3, [pc, #140]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80013fe:	2205      	movs	r2, #5
 8001400:	701a      	strb	r2, [r3, #0]
				msgLogger("Timer4 status is changed. 4 --> 5");
 8001402:	4836      	ldr	r0, [pc, #216]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001404:	f001 f8dc 	bl	80025c0 <msgLogger>
}
 8001408:	e029      	b.n	800145e <HAL_TIM_PeriodElapsedCallback+0x272>
		else if (currentTimer4Status == 5) {
 800140a:	4b20      	ldr	r3, [pc, #128]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b05      	cmp	r3, #5
 8001412:	d124      	bne.n	800145e <HAL_TIM_PeriodElapsedCallback+0x272>
			if (sdStatus == SD_CARD_READY) {
 8001414:	4b32      	ldr	r3, [pc, #200]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b25b      	sxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d111      	bne.n	8001442 <HAL_TIM_PeriodElapsedCallback+0x256>
				if (checkSDStore()) {
 800141e:	f000 ff19 	bl	8002254 <checkSDStore>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d006      	beq.n	8001436 <HAL_TIM_PeriodElapsedCallback+0x24a>
					currentTimer4Status = 4;
 8001428:	4b18      	ldr	r3, [pc, #96]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800142a:	2204      	movs	r2, #4
 800142c:	701a      	strb	r2, [r3, #0]
					msgLogger("Timer4 status is changed. 5 --> 4");
 800142e:	482d      	ldr	r0, [pc, #180]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001430:	f001 f8c6 	bl	80025c0 <msgLogger>
 8001434:	e005      	b.n	8001442 <HAL_TIM_PeriodElapsedCallback+0x256>
					currentTimer4Status = 0;
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
					msgLogger("Timer4 status is changed. 5 --> 0");
 800143c:	482a      	ldr	r0, [pc, #168]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800143e:	f001 f8bf 	bl	80025c0 <msgLogger>
			if (!IsProductDone) {
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	f083 0301 	eor.w	r3, r3, #1
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d005      	beq.n	800145e <HAL_TIM_PeriodElapsedCallback+0x272>
				currentTimer4Status = 4;
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001454:	2204      	movs	r2, #4
 8001456:	701a      	strb	r2, [r3, #0]
				msgLogger("Timer4 status is changed. 5 --> 4");
 8001458:	4822      	ldr	r0, [pc, #136]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800145a:	f001 f8b1 	bl	80025c0 <msgLogger>
}
 800145e:	bf00      	nop
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001468:	40000400 	.word	0x40000400
 800146c:	20002b03 	.word	0x20002b03
 8001470:	20000134 	.word	0x20000134
 8001474:	0800f218 	.word	0x0800f218
 8001478:	0800f23c 	.word	0x0800f23c
 800147c:	20000050 	.word	0x20000050
 8001480:	0800f260 	.word	0x0800f260
 8001484:	40000800 	.word	0x40000800
 8001488:	20000138 	.word	0x20000138
 800148c:	20002b04 	.word	0x20002b04
 8001490:	40020c00 	.word	0x40020c00
 8001494:	0800f284 	.word	0x0800f284
 8001498:	0800f2a8 	.word	0x0800f2a8
 800149c:	20000004 	.word	0x20000004
 80014a0:	0800f2cc 	.word	0x0800f2cc
 80014a4:	20000001 	.word	0x20000001
 80014a8:	0800f2dc 	.word	0x0800f2dc
 80014ac:	0800f300 	.word	0x0800f300
 80014b0:	0800f324 	.word	0x0800f324
 80014b4:	20002b05 	.word	0x20002b05
 80014b8:	20000058 	.word	0x20000058
 80014bc:	20002b08 	.word	0x20002b08
 80014c0:	20000054 	.word	0x20000054
 80014c4:	0800f358 	.word	0x0800f358
 80014c8:	0800f37c 	.word	0x0800f37c
 80014cc:	20003308 	.word	0x20003308
 80014d0:	0800f3a0 	.word	0x0800f3a0
 80014d4:	0800f3b4 	.word	0x0800f3b4
 80014d8:	0800f3e0 	.word	0x0800f3e0
 80014dc:	0800f404 	.word	0x0800f404
 80014e0:	20000140 	.word	0x20000140
 80014e4:	0800f428 	.word	0x0800f428
 80014e8:	0800f44c 	.word	0x0800f44c

080014ec <checkInputs>:

void checkInputs(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	currentInputs = GPIOB->IDR;
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <checkInputs+0x38>)
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <checkInputs+0x3c>)
 80014f8:	701a      	strb	r2, [r3, #0]
	if (prevInputs != currentInputs) {
 80014fa:	4b0c      	ldr	r3, [pc, #48]	; (800152c <checkInputs+0x40>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	4b09      	ldr	r3, [pc, #36]	; (8001528 <checkInputs+0x3c>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	429a      	cmp	r2, r3
 8001508:	d00a      	beq.n	8001520 <checkInputs+0x34>
		inputStatusLogger(currentInputs);
 800150a:	4b07      	ldr	r3, [pc, #28]	; (8001528 <checkInputs+0x3c>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	4618      	mov	r0, r3
 8001512:	f001 f86d 	bl	80025f0 <inputStatusLogger>
		prevInputs = currentInputs;
 8001516:	4b04      	ldr	r3, [pc, #16]	; (8001528 <checkInputs+0x3c>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <checkInputs+0x40>)
 800151e:	701a      	strb	r2, [r3, #0]
	}
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40020400 	.word	0x40020400
 8001528:	20002b00 	.word	0x20002b00
 800152c:	20002b01 	.word	0x20002b01

08001530 <checkProduct>:

int checkProduct(void)
{
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
	switch(currentProductStatus) {
 8001536:	4bb3      	ldr	r3, [pc, #716]	; (8001804 <checkProduct+0x2d4>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b07      	cmp	r3, #7
 800153e:	f200 81fc 	bhi.w	800193a <checkProduct+0x40a>
 8001542:	a201      	add	r2, pc, #4	; (adr r2, 8001548 <checkProduct+0x18>)
 8001544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001548:	08001569 	.word	0x08001569
 800154c:	0800159d 	.word	0x0800159d
 8001550:	0800160b 	.word	0x0800160b
 8001554:	0800167b 	.word	0x0800167b
 8001558:	080016eb 	.word	0x080016eb
 800155c:	08001761 	.word	0x08001761
 8001560:	080017d1 	.word	0x080017d1
 8001564:	08001875 	.word	0x08001875
	case 0:
		if (((currentInputs & bit(MOULD_BACKWARD)) == bit(MOULD_BACKWARD)) == true) {
 8001568:	4ba7      	ldr	r3, [pc, #668]	; (8001808 <checkProduct+0x2d8>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b01      	cmp	r3, #1
 8001574:	f040 81d2 	bne.w	800191c <checkProduct+0x3ec>
			strcpy(product->mouldBackward.inputHighDate, getRTCTime());
 8001578:	4ba4      	ldr	r3, [pc, #656]	; (800180c <checkProduct+0x2dc>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f103 0429 	add.w	r4, r3, #41	; 0x29
 8001580:	f000 fc9a 	bl	8001eb8 <getRTCTime>
 8001584:	4603      	mov	r3, r0
 8001586:	4619      	mov	r1, r3
 8001588:	4620      	mov	r0, r4
 800158a:	f00c fdc7 	bl	800e11c <strcpy>
			currentProductStatus = 1;
 800158e:	4b9d      	ldr	r3, [pc, #628]	; (8001804 <checkProduct+0x2d4>)
 8001590:	2201      	movs	r2, #1
 8001592:	701a      	strb	r2, [r3, #0]
			msgLogger("Current product status is changed. 0 --> 1");
 8001594:	489e      	ldr	r0, [pc, #632]	; (8001810 <checkProduct+0x2e0>)
 8001596:	f001 f813 	bl	80025c0 <msgLogger>
		}
		break;
 800159a:	e1bf      	b.n	800191c <checkProduct+0x3ec>
	case 1:
		if (((currentInputs & bit(MOULD_BACKWARD)) == bit(MOULD_BACKWARD)) == false) {
 800159c:	4b9a      	ldr	r3, [pc, #616]	; (8001808 <checkProduct+0x2d8>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d010      	beq.n	80015cc <checkProduct+0x9c>
			strcpy(product->mouldBackward.inputLowDate, getRTCTime());
 80015aa:	4b98      	ldr	r3, [pc, #608]	; (800180c <checkProduct+0x2dc>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	1c5c      	adds	r4, r3, #1
 80015b0:	f000 fc82 	bl	8001eb8 <getRTCTime>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4619      	mov	r1, r3
 80015b8:	4620      	mov	r0, r4
 80015ba:	f00c fdaf 	bl	800e11c <strcpy>
			currentProductStatus = 2;
 80015be:	4b91      	ldr	r3, [pc, #580]	; (8001804 <checkProduct+0x2d4>)
 80015c0:	2202      	movs	r2, #2
 80015c2:	701a      	strb	r2, [r3, #0]
			msgLogger("Current product status is changed. 1 --> 2");
 80015c4:	4893      	ldr	r0, [pc, #588]	; (8001814 <checkProduct+0x2e4>)
 80015c6:	f000 fffb 	bl	80025c0 <msgLogger>
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
				product->pInfo = PRODUCT_ERROR;
				return 1;
			}
		}
		break;
 80015ca:	e1a9      	b.n	8001920 <checkProduct+0x3f0>
			if (((currentInputs & bit(MOULD_FORWARD)) == bit(MOULD_FORWARD)) == true) {
 80015cc:	4b8e      	ldr	r3, [pc, #568]	; (8001808 <checkProduct+0x2d8>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	f003 0310 	and.w	r3, r3, #16
 80015d6:	2b10      	cmp	r3, #16
 80015d8:	f040 81a2 	bne.w	8001920 <checkProduct+0x3f0>
				strcpy(product->productEndDate, getDataTime());
 80015dc:	4b8b      	ldr	r3, [pc, #556]	; (800180c <checkProduct+0x2dc>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f203 1441 	addw	r4, r3, #321	; 0x141
 80015e4:	f000 fd26 	bl	8002034 <getDataTime>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4619      	mov	r1, r3
 80015ec:	4620      	mov	r0, r4
 80015ee:	f00c fd95 	bl	800e11c <strcpy>
				currentProductStatus = 0;
 80015f2:	4b84      	ldr	r3, [pc, #528]	; (8001804 <checkProduct+0x2d4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
 80015f8:	4887      	ldr	r0, [pc, #540]	; (8001818 <checkProduct+0x2e8>)
 80015fa:	f000 ffe1 	bl	80025c0 <msgLogger>
				product->pInfo = PRODUCT_ERROR;
 80015fe:	4b83      	ldr	r3, [pc, #524]	; (800180c <checkProduct+0x2dc>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
				return 1;
 8001606:	2301      	movs	r3, #1
 8001608:	e198      	b.n	800193c <checkProduct+0x40c>
	case 2:
		if (((currentInputs & bit(INJECTION_FORWARD)) == bit(INJECTION_FORWARD)) == true) {
 800160a:	4b7f      	ldr	r3, [pc, #508]	; (8001808 <checkProduct+0x2d8>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b02      	cmp	r3, #2
 8001616:	d111      	bne.n	800163c <checkProduct+0x10c>
			strcpy(product->injectionForward.inputHighDate, getRTCTime());
 8001618:	4b7c      	ldr	r3, [pc, #496]	; (800180c <checkProduct+0x2dc>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f103 0479 	add.w	r4, r3, #121	; 0x79
 8001620:	f000 fc4a 	bl	8001eb8 <getRTCTime>
 8001624:	4603      	mov	r3, r0
 8001626:	4619      	mov	r1, r3
 8001628:	4620      	mov	r0, r4
 800162a:	f00c fd77 	bl	800e11c <strcpy>
			currentProductStatus = 3;
 800162e:	4b75      	ldr	r3, [pc, #468]	; (8001804 <checkProduct+0x2d4>)
 8001630:	2203      	movs	r2, #3
 8001632:	701a      	strb	r2, [r3, #0]
			msgLogger("Current product status is changed. 2 --> 3");
 8001634:	4879      	ldr	r0, [pc, #484]	; (800181c <checkProduct+0x2ec>)
 8001636:	f000 ffc3 	bl	80025c0 <msgLogger>
				currentProductStatus = 0;
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
				return 2;
			}
		}
		break;
 800163a:	e173      	b.n	8001924 <checkProduct+0x3f4>
			if (((currentInputs & bit(MOULD_FORWARD)) == bit(MOULD_FORWARD)) == true) {
 800163c:	4b72      	ldr	r3, [pc, #456]	; (8001808 <checkProduct+0x2d8>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	f003 0310 	and.w	r3, r3, #16
 8001646:	2b10      	cmp	r3, #16
 8001648:	f040 816c 	bne.w	8001924 <checkProduct+0x3f4>
				strcpy(product->productEndDate, getDataTime());
 800164c:	4b6f      	ldr	r3, [pc, #444]	; (800180c <checkProduct+0x2dc>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f203 1441 	addw	r4, r3, #321	; 0x141
 8001654:	f000 fcee 	bl	8002034 <getDataTime>
 8001658:	4603      	mov	r3, r0
 800165a:	4619      	mov	r1, r3
 800165c:	4620      	mov	r0, r4
 800165e:	f00c fd5d 	bl	800e11c <strcpy>
				product->pInfo = PRODUCT_ERROR;
 8001662:	4b6a      	ldr	r3, [pc, #424]	; (800180c <checkProduct+0x2dc>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2200      	movs	r2, #0
 8001668:	701a      	strb	r2, [r3, #0]
				currentProductStatus = 0;
 800166a:	4b66      	ldr	r3, [pc, #408]	; (8001804 <checkProduct+0x2d4>)
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
 8001670:	4869      	ldr	r0, [pc, #420]	; (8001818 <checkProduct+0x2e8>)
 8001672:	f000 ffa5 	bl	80025c0 <msgLogger>
				return 2;
 8001676:	2302      	movs	r3, #2
 8001678:	e160      	b.n	800193c <checkProduct+0x40c>
	case 3:
		if (((currentInputs & bit(INJECTION_FORWARD)) == bit(INJECTION_FORWARD)) == false) {
 800167a:	4b63      	ldr	r3, [pc, #396]	; (8001808 <checkProduct+0x2d8>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b02      	cmp	r3, #2
 8001686:	d011      	beq.n	80016ac <checkProduct+0x17c>
			strcpy(product->injectionForward.inputLowDate, getRTCTime());
 8001688:	4b60      	ldr	r3, [pc, #384]	; (800180c <checkProduct+0x2dc>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f103 0451 	add.w	r4, r3, #81	; 0x51
 8001690:	f000 fc12 	bl	8001eb8 <getRTCTime>
 8001694:	4603      	mov	r3, r0
 8001696:	4619      	mov	r1, r3
 8001698:	4620      	mov	r0, r4
 800169a:	f00c fd3f 	bl	800e11c <strcpy>
			currentProductStatus = 4;
 800169e:	4b59      	ldr	r3, [pc, #356]	; (8001804 <checkProduct+0x2d4>)
 80016a0:	2204      	movs	r2, #4
 80016a2:	701a      	strb	r2, [r3, #0]
			msgLogger("Current product status is changed. 3 --> 4");
 80016a4:	485e      	ldr	r0, [pc, #376]	; (8001820 <checkProduct+0x2f0>)
 80016a6:	f000 ff8b 	bl	80025c0 <msgLogger>
				currentProductStatus = 0;
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
				return 3;
			}
		}
		break;
 80016aa:	e13d      	b.n	8001928 <checkProduct+0x3f8>
			if (((currentInputs & bit(MOULD_FORWARD)) == bit(MOULD_FORWARD)) == true) {
 80016ac:	4b56      	ldr	r3, [pc, #344]	; (8001808 <checkProduct+0x2d8>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	f003 0310 	and.w	r3, r3, #16
 80016b6:	2b10      	cmp	r3, #16
 80016b8:	f040 8136 	bne.w	8001928 <checkProduct+0x3f8>
				strcpy(product->productEndDate, getDataTime());
 80016bc:	4b53      	ldr	r3, [pc, #332]	; (800180c <checkProduct+0x2dc>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f203 1441 	addw	r4, r3, #321	; 0x141
 80016c4:	f000 fcb6 	bl	8002034 <getDataTime>
 80016c8:	4603      	mov	r3, r0
 80016ca:	4619      	mov	r1, r3
 80016cc:	4620      	mov	r0, r4
 80016ce:	f00c fd25 	bl	800e11c <strcpy>
				product->pInfo = PRODUCT_ERROR;
 80016d2:	4b4e      	ldr	r3, [pc, #312]	; (800180c <checkProduct+0x2dc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
				currentProductStatus = 0;
 80016da:	4b4a      	ldr	r3, [pc, #296]	; (8001804 <checkProduct+0x2d4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
 80016e0:	484d      	ldr	r0, [pc, #308]	; (8001818 <checkProduct+0x2e8>)
 80016e2:	f000 ff6d 	bl	80025c0 <msgLogger>
				return 3;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e128      	b.n	800193c <checkProduct+0x40c>
	case 4:
		if (((currentInputs & bit(RAW_MATERIAL_PACKING)) == bit(RAW_MATERIAL_PACKING)) == true) {
 80016ea:	4b47      	ldr	r3, [pc, #284]	; (8001808 <checkProduct+0x2d8>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b04      	cmp	r3, #4
 80016f6:	d114      	bne.n	8001722 <checkProduct+0x1f2>
			strcpy(product->rawMaterialPacking.inputHighDate, getRTCTime());
 80016f8:	4b44      	ldr	r3, [pc, #272]	; (800180c <checkProduct+0x2dc>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f103 04c9 	add.w	r4, r3, #201	; 0xc9
 8001700:	f000 fbda 	bl	8001eb8 <getRTCTime>
 8001704:	4603      	mov	r3, r0
 8001706:	4619      	mov	r1, r3
 8001708:	4620      	mov	r0, r4
 800170a:	f00c fd07 	bl	800e11c <strcpy>
			currentProductStatus = 5;
 800170e:	4b3d      	ldr	r3, [pc, #244]	; (8001804 <checkProduct+0x2d4>)
 8001710:	2205      	movs	r2, #5
 8001712:	701a      	strb	r2, [r3, #0]
			msgLogger("Current product status is changed. 4 --> 5");
 8001714:	4843      	ldr	r0, [pc, #268]	; (8001824 <checkProduct+0x2f4>)
 8001716:	f000 ff53 	bl	80025c0 <msgLogger>
			IsProductDone = false;
 800171a:	4b43      	ldr	r3, [pc, #268]	; (8001828 <checkProduct+0x2f8>)
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
				currentProductStatus = 0;
				msgLogger("Current state is 0. Unexpected behavior happaned.");
				return 4;
			}
		}
		break;
 8001720:	e104      	b.n	800192c <checkProduct+0x3fc>
			if (((currentInputs & bit(MOULD_FORWARD)) == bit(MOULD_FORWARD)) == true) {
 8001722:	4b39      	ldr	r3, [pc, #228]	; (8001808 <checkProduct+0x2d8>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	f003 0310 	and.w	r3, r3, #16
 800172c:	2b10      	cmp	r3, #16
 800172e:	f040 80fd 	bne.w	800192c <checkProduct+0x3fc>
				strcpy(product->productEndDate, getDataTime());
 8001732:	4b36      	ldr	r3, [pc, #216]	; (800180c <checkProduct+0x2dc>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f203 1441 	addw	r4, r3, #321	; 0x141
 800173a:	f000 fc7b 	bl	8002034 <getDataTime>
 800173e:	4603      	mov	r3, r0
 8001740:	4619      	mov	r1, r3
 8001742:	4620      	mov	r0, r4
 8001744:	f00c fcea 	bl	800e11c <strcpy>
				product->pInfo = PRODUCT_ERROR;
 8001748:	4b30      	ldr	r3, [pc, #192]	; (800180c <checkProduct+0x2dc>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
				currentProductStatus = 0;
 8001750:	4b2c      	ldr	r3, [pc, #176]	; (8001804 <checkProduct+0x2d4>)
 8001752:	2200      	movs	r2, #0
 8001754:	701a      	strb	r2, [r3, #0]
				msgLogger("Current state is 0. Unexpected behavior happaned.");
 8001756:	4835      	ldr	r0, [pc, #212]	; (800182c <checkProduct+0x2fc>)
 8001758:	f000 ff32 	bl	80025c0 <msgLogger>
				return 4;
 800175c:	2304      	movs	r3, #4
 800175e:	e0ed      	b.n	800193c <checkProduct+0x40c>
	case 5:
		if (((currentInputs & bit(RAW_MATERIAL_PACKING)) == bit(RAW_MATERIAL_PACKING)) == false) {
 8001760:	4b29      	ldr	r3, [pc, #164]	; (8001808 <checkProduct+0x2d8>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	2b04      	cmp	r3, #4
 800176c:	d011      	beq.n	8001792 <checkProduct+0x262>
			strcpy(product->rawMaterialPacking.inputLowDate, getRTCTime());
 800176e:	4b27      	ldr	r3, [pc, #156]	; (800180c <checkProduct+0x2dc>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f103 04a1 	add.w	r4, r3, #161	; 0xa1
 8001776:	f000 fb9f 	bl	8001eb8 <getRTCTime>
 800177a:	4603      	mov	r3, r0
 800177c:	4619      	mov	r1, r3
 800177e:	4620      	mov	r0, r4
 8001780:	f00c fccc 	bl	800e11c <strcpy>
			currentProductStatus = 6;
 8001784:	4b1f      	ldr	r3, [pc, #124]	; (8001804 <checkProduct+0x2d4>)
 8001786:	2206      	movs	r2, #6
 8001788:	701a      	strb	r2, [r3, #0]
			msgLogger("Current product status is changed. 5 --> 6");
 800178a:	4829      	ldr	r0, [pc, #164]	; (8001830 <checkProduct+0x300>)
 800178c:	f000 ff18 	bl	80025c0 <msgLogger>
				currentProductStatus = 0;
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
				return 5;
			}
		}
		break;
 8001790:	e0ce      	b.n	8001930 <checkProduct+0x400>
			if (((currentInputs & bit(MOULD_FORWARD)) == bit(MOULD_FORWARD)) == true) {
 8001792:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <checkProduct+0x2d8>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	f003 0310 	and.w	r3, r3, #16
 800179c:	2b10      	cmp	r3, #16
 800179e:	f040 80c7 	bne.w	8001930 <checkProduct+0x400>
				strcpy(product->productEndDate, getDataTime());
 80017a2:	4b1a      	ldr	r3, [pc, #104]	; (800180c <checkProduct+0x2dc>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f203 1441 	addw	r4, r3, #321	; 0x141
 80017aa:	f000 fc43 	bl	8002034 <getDataTime>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4619      	mov	r1, r3
 80017b2:	4620      	mov	r0, r4
 80017b4:	f00c fcb2 	bl	800e11c <strcpy>
				product->pInfo = PRODUCT_ERROR;
 80017b8:	4b14      	ldr	r3, [pc, #80]	; (800180c <checkProduct+0x2dc>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
				currentProductStatus = 0;
 80017c0:	4b10      	ldr	r3, [pc, #64]	; (8001804 <checkProduct+0x2d4>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
 80017c6:	4814      	ldr	r0, [pc, #80]	; (8001818 <checkProduct+0x2e8>)
 80017c8:	f000 fefa 	bl	80025c0 <msgLogger>
				return 5;
 80017cc:	2305      	movs	r3, #5
 80017ce:	e0b5      	b.n	800193c <checkProduct+0x40c>
	case 6:
		if (((currentInputs & bit(MOULD_FORWARD)) == bit(MOULD_FORWARD)) == true) {
 80017d0:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <checkProduct+0x2d8>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	2b10      	cmp	r3, #16
 80017dc:	d12c      	bne.n	8001838 <checkProduct+0x308>
			strcpy(product->mouldForward.inputHighDate, getRTCTime());
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <checkProduct+0x2dc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f203 1419 	addw	r4, r3, #281	; 0x119
 80017e6:	f000 fb67 	bl	8001eb8 <getRTCTime>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4619      	mov	r1, r3
 80017ee:	4620      	mov	r0, r4
 80017f0:	f00c fc94 	bl	800e11c <strcpy>
			currentProductStatus = 7;
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <checkProduct+0x2d4>)
 80017f6:	2207      	movs	r2, #7
 80017f8:	701a      	strb	r2, [r3, #0]
			msgLogger("Current product status is changed. 6 --> 7");
 80017fa:	480e      	ldr	r0, [pc, #56]	; (8001834 <checkProduct+0x304>)
 80017fc:	f000 fee0 	bl	80025c0 <msgLogger>
				currentProductStatus = 0;
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
				return 6;
			}
		}
		break;
 8001800:	e098      	b.n	8001934 <checkProduct+0x404>
 8001802:	bf00      	nop
 8001804:	20002b02 	.word	0x20002b02
 8001808:	20002b00 	.word	0x20002b00
 800180c:	20000134 	.word	0x20000134
 8001810:	0800f470 	.word	0x0800f470
 8001814:	0800f49c 	.word	0x0800f49c
 8001818:	0800f4c8 	.word	0x0800f4c8
 800181c:	0800f504 	.word	0x0800f504
 8001820:	0800f530 	.word	0x0800f530
 8001824:	0800f55c 	.word	0x0800f55c
 8001828:	20000050 	.word	0x20000050
 800182c:	0800f588 	.word	0x0800f588
 8001830:	0800f5bc 	.word	0x0800f5bc
 8001834:	0800f5e8 	.word	0x0800f5e8
			if (((currentInputs & bit(MOULD_BACKWARD)) == bit(MOULD_BACKWARD)) == true) {
 8001838:	4b42      	ldr	r3, [pc, #264]	; (8001944 <checkProduct+0x414>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b01      	cmp	r3, #1
 8001844:	d176      	bne.n	8001934 <checkProduct+0x404>
				strcpy(product->productEndDate, getDataTime());
 8001846:	4b40      	ldr	r3, [pc, #256]	; (8001948 <checkProduct+0x418>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f203 1441 	addw	r4, r3, #321	; 0x141
 800184e:	f000 fbf1 	bl	8002034 <getDataTime>
 8001852:	4603      	mov	r3, r0
 8001854:	4619      	mov	r1, r3
 8001856:	4620      	mov	r0, r4
 8001858:	f00c fc60 	bl	800e11c <strcpy>
				product->pInfo = PRODUCT_ERROR;
 800185c:	4b3a      	ldr	r3, [pc, #232]	; (8001948 <checkProduct+0x418>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
				currentProductStatus = 0;
 8001864:	4b39      	ldr	r3, [pc, #228]	; (800194c <checkProduct+0x41c>)
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
 800186a:	4839      	ldr	r0, [pc, #228]	; (8001950 <checkProduct+0x420>)
 800186c:	f000 fea8 	bl	80025c0 <msgLogger>
				return 6;
 8001870:	2306      	movs	r3, #6
 8001872:	e063      	b.n	800193c <checkProduct+0x40c>
	case 7:
		if (((currentInputs & bit(MOULD_FORWARD)) == bit(MOULD_FORWARD)) == false) {
 8001874:	4b33      	ldr	r3, [pc, #204]	; (8001944 <checkProduct+0x414>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	b2db      	uxtb	r3, r3
 800187a:	f003 0310 	and.w	r3, r3, #16
 800187e:	2b10      	cmp	r3, #16
 8001880:	d02e      	beq.n	80018e0 <checkProduct+0x3b0>
			strcpy(product->mouldForward.inputLowDate, getRTCTime());
 8001882:	4b31      	ldr	r3, [pc, #196]	; (8001948 <checkProduct+0x418>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f103 04f1 	add.w	r4, r3, #241	; 0xf1
 800188a:	f000 fb15 	bl	8001eb8 <getRTCTime>
 800188e:	4603      	mov	r3, r0
 8001890:	4619      	mov	r1, r3
 8001892:	4620      	mov	r0, r4
 8001894:	f00c fc42 	bl	800e11c <strcpy>
			strcpy(product->productEndDate, getDataTime());
 8001898:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <checkProduct+0x418>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f203 1441 	addw	r4, r3, #321	; 0x141
 80018a0:	f000 fbc8 	bl	8002034 <getDataTime>
 80018a4:	4603      	mov	r3, r0
 80018a6:	4619      	mov	r1, r3
 80018a8:	4620      	mov	r0, r4
 80018aa:	f00c fc37 	bl	800e11c <strcpy>
			product->pInfo = PRODUCT_PRODUCED;
 80018ae:	4b26      	ldr	r3, [pc, #152]	; (8001948 <checkProduct+0x418>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2201      	movs	r2, #1
 80018b4:	701a      	strb	r2, [r3, #0]
			currentProductStatus = 0;
 80018b6:	4b25      	ldr	r3, [pc, #148]	; (800194c <checkProduct+0x41c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]
			msgLogger("Product produced succesfully.");
 80018bc:	4825      	ldr	r0, [pc, #148]	; (8001954 <checkProduct+0x424>)
 80018be:	f000 fe7f 	bl	80025c0 <msgLogger>
			int sdResult = writeSDProductInfo(product);
 80018c2:	4b21      	ldr	r3, [pc, #132]	; (8001948 <checkProduct+0x418>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 f898 	bl	80019fc <writeSDProductInfo>
 80018cc:	4603      	mov	r3, r0
 80018ce:	607b      	str	r3, [r7, #4]
			if (sdResult)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d002      	beq.n	80018dc <checkProduct+0x3ac>
				msgLogger("Data is created on SD CARD.");
 80018d6:	4820      	ldr	r0, [pc, #128]	; (8001958 <checkProduct+0x428>)
 80018d8:	f000 fe72 	bl	80025c0 <msgLogger>
			return 8;
 80018dc:	2308      	movs	r3, #8
 80018de:	e02d      	b.n	800193c <checkProduct+0x40c>
		}
		else {
			if (((currentInputs & bit(MOULD_BACKWARD)) == bit(MOULD_BACKWARD)) == true) {
 80018e0:	4b18      	ldr	r3, [pc, #96]	; (8001944 <checkProduct+0x414>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d124      	bne.n	8001938 <checkProduct+0x408>
				strcpy(product->productEndDate, getDataTime());
 80018ee:	4b16      	ldr	r3, [pc, #88]	; (8001948 <checkProduct+0x418>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f203 1441 	addw	r4, r3, #321	; 0x141
 80018f6:	f000 fb9d 	bl	8002034 <getDataTime>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4619      	mov	r1, r3
 80018fe:	4620      	mov	r0, r4
 8001900:	f00c fc0c 	bl	800e11c <strcpy>
				product->pInfo = PRODUCT_ERROR;
 8001904:	4b10      	ldr	r3, [pc, #64]	; (8001948 <checkProduct+0x418>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
				currentProductStatus = 0;
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <checkProduct+0x41c>)
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
 8001912:	480f      	ldr	r0, [pc, #60]	; (8001950 <checkProduct+0x420>)
 8001914:	f000 fe54 	bl	80025c0 <msgLogger>
				return 7;
 8001918:	2307      	movs	r3, #7
 800191a:	e00f      	b.n	800193c <checkProduct+0x40c>
		break;
 800191c:	bf00      	nop
 800191e:	e00c      	b.n	800193a <checkProduct+0x40a>
		break;
 8001920:	bf00      	nop
 8001922:	e00a      	b.n	800193a <checkProduct+0x40a>
		break;
 8001924:	bf00      	nop
 8001926:	e008      	b.n	800193a <checkProduct+0x40a>
		break;
 8001928:	bf00      	nop
 800192a:	e006      	b.n	800193a <checkProduct+0x40a>
		break;
 800192c:	bf00      	nop
 800192e:	e004      	b.n	800193a <checkProduct+0x40a>
		break;
 8001930:	bf00      	nop
 8001932:	e002      	b.n	800193a <checkProduct+0x40a>
		break;
 8001934:	bf00      	nop
 8001936:	e000      	b.n	800193a <checkProduct+0x40a>
			}
		}
		break;
 8001938:	bf00      	nop
	}
	return 0;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	bd90      	pop	{r4, r7, pc}
 8001944:	20002b00 	.word	0x20002b00
 8001948:	20000134 	.word	0x20000134
 800194c:	20002b02 	.word	0x20002b02
 8001950:	0800f4c8 	.word	0x0800f4c8
 8001954:	0800f614 	.word	0x0800f614
 8001958:	0800f634 	.word	0x0800f634

0800195c <fillProduct>:

void fillProduct(struct productVal *product)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	product->pInfo = PRODUCT_ERROR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
	strcpy(product->injectionForward.inputHighDate, "null");
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3379      	adds	r3, #121	; 0x79
 800196e:	4a22      	ldr	r2, [pc, #136]	; (80019f8 <fillProduct+0x9c>)
 8001970:	6810      	ldr	r0, [r2, #0]
 8001972:	6018      	str	r0, [r3, #0]
 8001974:	7912      	ldrb	r2, [r2, #4]
 8001976:	711a      	strb	r2, [r3, #4]
	strcpy(product->injectionForward.inputLowDate, "null");
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3351      	adds	r3, #81	; 0x51
 800197c:	4a1e      	ldr	r2, [pc, #120]	; (80019f8 <fillProduct+0x9c>)
 800197e:	6810      	ldr	r0, [r2, #0]
 8001980:	6018      	str	r0, [r3, #0]
 8001982:	7912      	ldrb	r2, [r2, #4]
 8001984:	711a      	strb	r2, [r3, #4]
	strcpy(product->mouldBackward.inputHighDate, "null");
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3329      	adds	r3, #41	; 0x29
 800198a:	4a1b      	ldr	r2, [pc, #108]	; (80019f8 <fillProduct+0x9c>)
 800198c:	6810      	ldr	r0, [r2, #0]
 800198e:	6018      	str	r0, [r3, #0]
 8001990:	7912      	ldrb	r2, [r2, #4]
 8001992:	711a      	strb	r2, [r3, #4]
	strcpy(product->mouldBackward.inputLowDate, "null");
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3301      	adds	r3, #1
 8001998:	4a17      	ldr	r2, [pc, #92]	; (80019f8 <fillProduct+0x9c>)
 800199a:	6810      	ldr	r0, [r2, #0]
 800199c:	6018      	str	r0, [r3, #0]
 800199e:	7912      	ldrb	r2, [r2, #4]
 80019a0:	711a      	strb	r2, [r3, #4]
	strcpy(product->mouldForward.inputHighDate, "null");
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f203 1319 	addw	r3, r3, #281	; 0x119
 80019a8:	4a13      	ldr	r2, [pc, #76]	; (80019f8 <fillProduct+0x9c>)
 80019aa:	6810      	ldr	r0, [r2, #0]
 80019ac:	6018      	str	r0, [r3, #0]
 80019ae:	7912      	ldrb	r2, [r2, #4]
 80019b0:	711a      	strb	r2, [r3, #4]
	strcpy(product->mouldForward.inputLowDate, "null");
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	33f1      	adds	r3, #241	; 0xf1
 80019b6:	4a10      	ldr	r2, [pc, #64]	; (80019f8 <fillProduct+0x9c>)
 80019b8:	6810      	ldr	r0, [r2, #0]
 80019ba:	6018      	str	r0, [r3, #0]
 80019bc:	7912      	ldrb	r2, [r2, #4]
 80019be:	711a      	strb	r2, [r3, #4]
	strcpy(product->rawMaterialPacking.inputHighDate, "null");
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	33c9      	adds	r3, #201	; 0xc9
 80019c4:	4a0c      	ldr	r2, [pc, #48]	; (80019f8 <fillProduct+0x9c>)
 80019c6:	6810      	ldr	r0, [r2, #0]
 80019c8:	6018      	str	r0, [r3, #0]
 80019ca:	7912      	ldrb	r2, [r2, #4]
 80019cc:	711a      	strb	r2, [r3, #4]
	strcpy(product->rawMaterialPacking.inputLowDate, "null");
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	33a1      	adds	r3, #161	; 0xa1
 80019d2:	4a09      	ldr	r2, [pc, #36]	; (80019f8 <fillProduct+0x9c>)
 80019d4:	6810      	ldr	r0, [r2, #0]
 80019d6:	6018      	str	r0, [r3, #0]
 80019d8:	7912      	ldrb	r2, [r2, #4]
 80019da:	711a      	strb	r2, [r3, #4]
	strcpy(product->productEndDate, "null");
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f203 1341 	addw	r3, r3, #321	; 0x141
 80019e2:	4a05      	ldr	r2, [pc, #20]	; (80019f8 <fillProduct+0x9c>)
 80019e4:	6810      	ldr	r0, [r2, #0]
 80019e6:	6018      	str	r0, [r3, #0]
 80019e8:	7912      	ldrb	r2, [r2, #4]
 80019ea:	711a      	strb	r2, [r3, #4]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	0800f650 	.word	0x0800f650

080019fc <writeSDProductInfo>:

bool writeSDProductInfo(struct productVal *product)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b09a      	sub	sp, #104	; 0x68
 8001a00:	af04      	add	r7, sp, #16
 8001a02:	6078      	str	r0, [r7, #4]
	char *result = (char*)malloc(4 * (sizeof(int)));
 8001a04:	2010      	movs	r0, #16
 8001a06:	f00c f9c5 	bl	800dd94 <malloc>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	657b      	str	r3, [r7, #84]	; 0x54
	if (result == NULL) {
 8001a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d104      	bne.n	8001a1e <writeSDProductInfo+0x22>
		printf("[writeSDProductInfo()] Memory Allocation Error!!!");
 8001a14:	4896      	ldr	r0, [pc, #600]	; (8001c70 <writeSDProductInfo+0x274>)
 8001a16:	f00c fac3 	bl	800dfa0 <iprintf>
		return false;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e124      	b.n	8001c68 <writeSDProductInfo+0x26c>
	}
	char *mback  = (char*)malloc(150 * (sizeof(char)));
 8001a1e:	2096      	movs	r0, #150	; 0x96
 8001a20:	f00c f9b8 	bl	800dd94 <malloc>
 8001a24:	4603      	mov	r3, r0
 8001a26:	653b      	str	r3, [r7, #80]	; 0x50
	if (mback == NULL) {
 8001a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d107      	bne.n	8001a3e <writeSDProductInfo+0x42>
		printf("[writeSDProductInfo()] Memory Allocation Error!!!");
 8001a2e:	4890      	ldr	r0, [pc, #576]	; (8001c70 <writeSDProductInfo+0x274>)
 8001a30:	f00c fab6 	bl	800dfa0 <iprintf>
		free(result);
 8001a34:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001a36:	f00c f9b5 	bl	800dda4 <free>
		return false;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e114      	b.n	8001c68 <writeSDProductInfo+0x26c>
	}
	char *mforw  = (char*)malloc(150 * (sizeof(char)));
 8001a3e:	2096      	movs	r0, #150	; 0x96
 8001a40:	f00c f9a8 	bl	800dd94 <malloc>
 8001a44:	4603      	mov	r3, r0
 8001a46:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (mforw == NULL) {
 8001a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10a      	bne.n	8001a64 <writeSDProductInfo+0x68>
		printf("[writeSDProductInfo()] Memory Allocation Error!!!");
 8001a4e:	4888      	ldr	r0, [pc, #544]	; (8001c70 <writeSDProductInfo+0x274>)
 8001a50:	f00c faa6 	bl	800dfa0 <iprintf>
		free(result); free(mback);
 8001a54:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001a56:	f00c f9a5 	bl	800dda4 <free>
 8001a5a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001a5c:	f00c f9a2 	bl	800dda4 <free>
		return false;
 8001a60:	2300      	movs	r3, #0
 8001a62:	e101      	b.n	8001c68 <writeSDProductInfo+0x26c>
	}
	char *iforw  = (char*)malloc(150 * (sizeof(char)));
 8001a64:	2096      	movs	r0, #150	; 0x96
 8001a66:	f00c f995 	bl	800dd94 <malloc>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (iforw == NULL) {
 8001a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10d      	bne.n	8001a90 <writeSDProductInfo+0x94>
		printf("[writeSDProductInfo()] Memory Allocation Error!!!");
 8001a74:	487e      	ldr	r0, [pc, #504]	; (8001c70 <writeSDProductInfo+0x274>)
 8001a76:	f00c fa93 	bl	800dfa0 <iprintf>
		free(result); free(mback); free(mforw);
 8001a7a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001a7c:	f00c f992 	bl	800dda4 <free>
 8001a80:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001a82:	f00c f98f 	bl	800dda4 <free>
 8001a86:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001a88:	f00c f98c 	bl	800dda4 <free>
		return false;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	e0eb      	b.n	8001c68 <writeSDProductInfo+0x26c>
	}
	char *rmet   = (char*)malloc(150 * (sizeof(char)));
 8001a90:	2096      	movs	r0, #150	; 0x96
 8001a92:	f00c f97f 	bl	800dd94 <malloc>
 8001a96:	4603      	mov	r3, r0
 8001a98:	647b      	str	r3, [r7, #68]	; 0x44
	if (rmet == NULL) {
 8001a9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d110      	bne.n	8001ac2 <writeSDProductInfo+0xc6>
		printf("[writeSDProductInfo()] Memory Allocation Error!!!");
 8001aa0:	4873      	ldr	r0, [pc, #460]	; (8001c70 <writeSDProductInfo+0x274>)
 8001aa2:	f00c fa7d 	bl	800dfa0 <iprintf>
		free(result); free(mback); free(mforw); free(iforw);
 8001aa6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001aa8:	f00c f97c 	bl	800dda4 <free>
 8001aac:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001aae:	f00c f979 	bl	800dda4 <free>
 8001ab2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001ab4:	f00c f976 	bl	800dda4 <free>
 8001ab8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001aba:	f00c f973 	bl	800dda4 <free>
		return false;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e0d2      	b.n	8001c68 <writeSDProductInfo+0x26c>
	}

	if (sdStatus == SD_CARD_READY) {
 8001ac2:	4b6c      	ldr	r3, [pc, #432]	; (8001c74 <writeSDProductInfo+0x278>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	b25b      	sxtb	r3, r3
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f040 80bd 	bne.w	8001c48 <writeSDProductInfo+0x24c>
		sdStatus = SD_CARD_BUSY;
 8001ace:	4b69      	ldr	r3, [pc, #420]	; (8001c74 <writeSDProductInfo+0x278>)
 8001ad0:	22ff      	movs	r2, #255	; 0xff
 8001ad2:	701a      	strb	r2, [r3, #0]
		char fileName[50];
		if (strlen(product->productEndDate) > 5) {
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f203 1341 	addw	r3, r3, #321	; 0x141
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fb80 	bl	80001e0 <strlen>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b05      	cmp	r3, #5
 8001ae4:	d909      	bls.n	8001afa <writeSDProductInfo+0xfe>
			sprintf(fileName, "Data/%s.log", product->productEndDate);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f203 1241 	addw	r2, r3, #321	; 0x141
 8001aec:	f107 030c 	add.w	r3, r7, #12
 8001af0:	4961      	ldr	r1, [pc, #388]	; (8001c78 <writeSDProductInfo+0x27c>)
 8001af2:	4618      	mov	r0, r3
 8001af4:	f00c faf2 	bl	800e0dc <siprintf>
 8001af8:	e008      	b.n	8001b0c <writeSDProductInfo+0x110>
		} else {
			sprintf(fileName, "Data/%s_Err.log", getLogTime());
 8001afa:	f000 fa51 	bl	8001fa0 <getLogTime>
 8001afe:	4602      	mov	r2, r0
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	495d      	ldr	r1, [pc, #372]	; (8001c7c <writeSDProductInfo+0x280>)
 8001b06:	4618      	mov	r0, r3
 8001b08:	f00c fae8 	bl	800e0dc <siprintf>
		}
		fresult = f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_WRITE);
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	2212      	movs	r2, #18
 8001b12:	4619      	mov	r1, r3
 8001b14:	485a      	ldr	r0, [pc, #360]	; (8001c80 <writeSDProductInfo+0x284>)
 8001b16:	f007 f8b3 	bl	8008c80 <f_open>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b59      	ldr	r3, [pc, #356]	; (8001c84 <writeSDProductInfo+0x288>)
 8001b20:	701a      	strb	r2, [r3, #0]
		if (fresult == FR_OK) {
 8001b22:	4b58      	ldr	r3, [pc, #352]	; (8001c84 <writeSDProductInfo+0x288>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d177      	bne.n	8001c1a <writeSDProductInfo+0x21e>
			sprintf(result, "\"result\": %d", product->pInfo);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4955      	ldr	r1, [pc, #340]	; (8001c88 <writeSDProductInfo+0x28c>)
 8001b32:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001b34:	f00c fad2 	bl	800e0dc <siprintf>
			sprintf(mback, ", \"mback\": { \"inputHighDate\": \"%s\", \"inputLowDate\": \"%s\" }", product->mouldBackward.inputHighDate, product->mouldBackward.inputLowDate);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3301      	adds	r3, #1
 8001b42:	4952      	ldr	r1, [pc, #328]	; (8001c8c <writeSDProductInfo+0x290>)
 8001b44:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001b46:	f00c fac9 	bl	800e0dc <siprintf>
			sprintf(mforw, ", \"mforw\": { \"inputHighDate\": \"%s\", \"inputLowDate\": \"%s\" }", product->mouldForward.inputHighDate, product->mouldForward.inputLowDate);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f203 1219 	addw	r2, r3, #281	; 0x119
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	33f1      	adds	r3, #241	; 0xf1
 8001b54:	494e      	ldr	r1, [pc, #312]	; (8001c90 <writeSDProductInfo+0x294>)
 8001b56:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001b58:	f00c fac0 	bl	800e0dc <siprintf>
			sprintf(iforw, ", \"iforw\": { \"inputHighDate\": \"%s\", \"inputLowDate\": \"%s\" }", product->injectionForward.inputHighDate, product->injectionForward.inputLowDate);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f103 0279 	add.w	r2, r3, #121	; 0x79
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3351      	adds	r3, #81	; 0x51
 8001b66:	494b      	ldr	r1, [pc, #300]	; (8001c94 <writeSDProductInfo+0x298>)
 8001b68:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001b6a:	f00c fab7 	bl	800e0dc <siprintf>
			sprintf(rmet, ", \"rmet\": { \"inputHighDate\": \"%s\", \"inputLowDate\": \"%s\" }", product->rawMaterialPacking.inputHighDate, product->rawMaterialPacking.inputLowDate);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f103 02c9 	add.w	r2, r3, #201	; 0xc9
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	33a1      	adds	r3, #161	; 0xa1
 8001b78:	4947      	ldr	r1, [pc, #284]	; (8001c98 <writeSDProductInfo+0x29c>)
 8001b7a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001b7c:	f00c faae 	bl	800e0dc <siprintf>
			char* data = (char*)malloc(150 * 5 * (sizeof(char)));
 8001b80:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001b84:	f00c f906 	bl	800dd94 <malloc>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	643b      	str	r3, [r7, #64]	; 0x40
			if (data != NULL) {
 8001b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d029      	beq.n	8001be6 <writeSDProductInfo+0x1ea>
				sprintf(data, "{%s%s%s%s%s}", result, mback, mforw, iforw, rmet);
 8001b92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b94:	9302      	str	r3, [sp, #8]
 8001b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b98:	9301      	str	r3, [sp, #4]
 8001b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ba0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ba2:	493e      	ldr	r1, [pc, #248]	; (8001c9c <writeSDProductInfo+0x2a0>)
 8001ba4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001ba6:	f00c fa99 	bl	800e0dc <siprintf>
				f_puts(data, &fil);
 8001baa:	4935      	ldr	r1, [pc, #212]	; (8001c80 <writeSDProductInfo+0x284>)
 8001bac:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001bae:	f008 f935 	bl	8009e1c <f_puts>
				free(result); free(mback); free(mforw); free(iforw); free(rmet);
 8001bb2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001bb4:	f00c f8f6 	bl	800dda4 <free>
 8001bb8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001bba:	f00c f8f3 	bl	800dda4 <free>
 8001bbe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001bc0:	f00c f8f0 	bl	800dda4 <free>
 8001bc4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001bc6:	f00c f8ed 	bl	800dda4 <free>
 8001bca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001bcc:	f00c f8ea 	bl	800dda4 <free>
				free(data);
 8001bd0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001bd2:	f00c f8e7 	bl	800dda4 <free>
				f_close(&fil);
 8001bd6:	482a      	ldr	r0, [pc, #168]	; (8001c80 <writeSDProductInfo+0x284>)
 8001bd8:	f007 fd8f 	bl	80096fa <f_close>
				sdStatus = SD_CARD_READY;
 8001bdc:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <writeSDProductInfo+0x278>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
				return true;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e040      	b.n	8001c68 <writeSDProductInfo+0x26c>
			}
			else {
				free(result); free(mback); free(mforw); free(iforw); free(rmet);
 8001be6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001be8:	f00c f8dc 	bl	800dda4 <free>
 8001bec:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001bee:	f00c f8d9 	bl	800dda4 <free>
 8001bf2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001bf4:	f00c f8d6 	bl	800dda4 <free>
 8001bf8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001bfa:	f00c f8d3 	bl	800dda4 <free>
 8001bfe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001c00:	f00c f8d0 	bl	800dda4 <free>
				printf("[writeSDProductInfo()] Memory Allocation Error. \r\n");
 8001c04:	4826      	ldr	r0, [pc, #152]	; (8001ca0 <writeSDProductInfo+0x2a4>)
 8001c06:	f00c fa51 	bl	800e0ac <puts>
				f_close(&fil);
 8001c0a:	481d      	ldr	r0, [pc, #116]	; (8001c80 <writeSDProductInfo+0x284>)
 8001c0c:	f007 fd75 	bl	80096fa <f_close>
				sdStatus = SD_CARD_READY;
 8001c10:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <writeSDProductInfo+0x278>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
				return false;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e026      	b.n	8001c68 <writeSDProductInfo+0x26c>
			}
		}
		else {
			free(result); free(mback); free(mforw); free(iforw); free(rmet);
 8001c1a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001c1c:	f00c f8c2 	bl	800dda4 <free>
 8001c20:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001c22:	f00c f8bf 	bl	800dda4 <free>
 8001c26:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001c28:	f00c f8bc 	bl	800dda4 <free>
 8001c2c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001c2e:	f00c f8b9 	bl	800dda4 <free>
 8001c32:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001c34:	f00c f8b6 	bl	800dda4 <free>
			printf("[writeSDProductInfo()] Error happaned while opening file.\r\n");
 8001c38:	481a      	ldr	r0, [pc, #104]	; (8001ca4 <writeSDProductInfo+0x2a8>)
 8001c3a:	f00c fa37 	bl	800e0ac <puts>
			sdStatus = SD_CARD_READY;
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <writeSDProductInfo+0x278>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
			return false;
 8001c44:	2300      	movs	r3, #0
 8001c46:	e00f      	b.n	8001c68 <writeSDProductInfo+0x26c>
		}
	}
	else {
		free(result); free(mback); free(mforw); free(iforw); free(rmet);
 8001c48:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001c4a:	f00c f8ab 	bl	800dda4 <free>
 8001c4e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001c50:	f00c f8a8 	bl	800dda4 <free>
 8001c54:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001c56:	f00c f8a5 	bl	800dda4 <free>
 8001c5a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001c5c:	f00c f8a2 	bl	800dda4 <free>
 8001c60:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001c62:	f00c f89f 	bl	800dda4 <free>
		return false;
 8001c66:	2300      	movs	r3, #0
	}

	return false;
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3758      	adds	r7, #88	; 0x58
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	0800f658 	.word	0x0800f658
 8001c74:	20000140 	.word	0x20000140
 8001c78:	0800f68c 	.word	0x0800f68c
 8001c7c:	0800f698 	.word	0x0800f698
 8001c80:	2000117c 	.word	0x2000117c
 8001c84:	200021ac 	.word	0x200021ac
 8001c88:	0800f6a8 	.word	0x0800f6a8
 8001c8c:	0800f6b8 	.word	0x0800f6b8
 8001c90:	0800f6f4 	.word	0x0800f6f4
 8001c94:	0800f730 	.word	0x0800f730
 8001c98:	0800f76c 	.word	0x0800f76c
 8001c9c:	0800f7a8 	.word	0x0800f7a8
 8001ca0:	0800f7b8 	.word	0x0800f7b8
 8001ca4:	0800f7ec 	.word	0x0800f7ec

08001ca8 <setRTCTime>:

RTC_StatusTypeDef setRTCTime()  //timeBuf is gonna have ["day" = 0, "month" = 1, "year" = 2, "hour" = 3, "min" = 4, "second" = 5]
{
 8001ca8:	b590      	push	{r4, r7, lr}
 8001caa:	b08b      	sub	sp, #44	; 0x2c
 8001cac:	af00      	add	r7, sp, #0
	uint8_t status;
	datetime ntpTime;
	status = SNTP_run(&ntpTime);
 8001cae:	f107 031c 	add.w	r3, r7, #28
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f00b fd62 	bl	800d77c <SNTP_run>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	// check rtc.c if there is added new sDate and sTime
	if (status) {
 8001cbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 80eb 	beq.w	8001e9e <setRTCTime+0x1f6>
		RTC_TimeTypeDef sTime = {0};
 8001cc8:	f107 0308 	add.w	r3, r7, #8
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
		RTC_DateTypeDef sDate = {0};
 8001cd8:	2300      	movs	r3, #0
 8001cda:	607b      	str	r3, [r7, #4]

		sTime.Hours = DEC2BCD(ntpTime.hh);
 8001cdc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ce0:	4a72      	ldr	r2, [pc, #456]	; (8001eac <setRTCTime+0x204>)
 8001ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce6:	08db      	lsrs	r3, r3, #3
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	011b      	lsls	r3, r3, #4
 8001cec:	b2d8      	uxtb	r0, r3
 8001cee:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001cf2:	4b6e      	ldr	r3, [pc, #440]	; (8001eac <setRTCTime+0x204>)
 8001cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8001cf8:	08d9      	lsrs	r1, r3, #3
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	440b      	add	r3, r1
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	4403      	add	r3, r0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	723b      	strb	r3, [r7, #8]
		sTime.Minutes = DEC2BCD(ntpTime.mm);
 8001d0c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d10:	4a66      	ldr	r2, [pc, #408]	; (8001eac <setRTCTime+0x204>)
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	08db      	lsrs	r3, r3, #3
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	011b      	lsls	r3, r3, #4
 8001d1c:	b2d8      	uxtb	r0, r3
 8001d1e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001d22:	4b62      	ldr	r3, [pc, #392]	; (8001eac <setRTCTime+0x204>)
 8001d24:	fba3 1302 	umull	r1, r3, r3, r2
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	440b      	add	r3, r1
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	4403      	add	r3, r0
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	727b      	strb	r3, [r7, #9]
		sTime.Seconds = DEC2BCD(ntpTime.ss);
 8001d3c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001d40:	4a5a      	ldr	r2, [pc, #360]	; (8001eac <setRTCTime+0x204>)
 8001d42:	fba2 2303 	umull	r2, r3, r2, r3
 8001d46:	08db      	lsrs	r3, r3, #3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	b2d8      	uxtb	r0, r3
 8001d4e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001d52:	4b56      	ldr	r3, [pc, #344]	; (8001eac <setRTCTime+0x204>)
 8001d54:	fba3 1302 	umull	r1, r3, r3, r2
 8001d58:	08d9      	lsrs	r1, r3, #3
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	4403      	add	r3, r0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	72bb      	strb	r3, [r7, #10]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61bb      	str	r3, [r7, #24]
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d74:	f107 0308 	add.w	r3, r7, #8
 8001d78:	2201      	movs	r2, #1
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	484c      	ldr	r0, [pc, #304]	; (8001eb0 <setRTCTime+0x208>)
 8001d7e:	f002 f9e3 	bl	8004148 <HAL_RTC_SetTime>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <setRTCTime+0xe4>
		{
			Error_Handler();
 8001d88:	f000 fcd0 	bl	800272c <Error_Handler>
		}
		sDate.Date = DEC2BCD(ntpTime.dd);
 8001d8c:	7ffb      	ldrb	r3, [r7, #31]
 8001d8e:	4a47      	ldr	r2, [pc, #284]	; (8001eac <setRTCTime+0x204>)
 8001d90:	fba2 2303 	umull	r2, r3, r2, r3
 8001d94:	08db      	lsrs	r3, r3, #3
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	011b      	lsls	r3, r3, #4
 8001d9a:	b2d8      	uxtb	r0, r3
 8001d9c:	7ffa      	ldrb	r2, [r7, #31]
 8001d9e:	4b43      	ldr	r3, [pc, #268]	; (8001eac <setRTCTime+0x204>)
 8001da0:	fba3 1302 	umull	r1, r3, r3, r2
 8001da4:	08d9      	lsrs	r1, r3, #3
 8001da6:	460b      	mov	r3, r1
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	440b      	add	r3, r1
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	4403      	add	r3, r0
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	71bb      	strb	r3, [r7, #6]
		sDate.Month = DEC2BCD(ntpTime.mo);
 8001db8:	7fbb      	ldrb	r3, [r7, #30]
 8001dba:	4a3c      	ldr	r2, [pc, #240]	; (8001eac <setRTCTime+0x204>)
 8001dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc0:	08db      	lsrs	r3, r3, #3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	b2d8      	uxtb	r0, r3
 8001dc8:	7fba      	ldrb	r2, [r7, #30]
 8001dca:	4b38      	ldr	r3, [pc, #224]	; (8001eac <setRTCTime+0x204>)
 8001dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8001dd0:	08d9      	lsrs	r1, r3, #3
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	4403      	add	r3, r0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	717b      	strb	r3, [r7, #5]
		sDate.Year = DEC2BCD(ntpTime.yy%100);
 8001de4:	8bbb      	ldrh	r3, [r7, #28]
 8001de6:	4a33      	ldr	r2, [pc, #204]	; (8001eb4 <setRTCTime+0x20c>)
 8001de8:	fba2 1203 	umull	r1, r2, r2, r3
 8001dec:	0952      	lsrs	r2, r2, #5
 8001dee:	2164      	movs	r1, #100	; 0x64
 8001df0:	fb01 f202 	mul.w	r2, r1, r2
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	4a2c      	ldr	r2, [pc, #176]	; (8001eac <setRTCTime+0x204>)
 8001dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfe:	08db      	lsrs	r3, r3, #3
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	b2d8      	uxtb	r0, r3
 8001e08:	8bbb      	ldrh	r3, [r7, #28]
 8001e0a:	4a2a      	ldr	r2, [pc, #168]	; (8001eb4 <setRTCTime+0x20c>)
 8001e0c:	fba2 1203 	umull	r1, r2, r2, r3
 8001e10:	0952      	lsrs	r2, r2, #5
 8001e12:	2164      	movs	r1, #100	; 0x64
 8001e14:	fb01 f202 	mul.w	r2, r1, r2
 8001e18:	1a9b      	subs	r3, r3, r2
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	4b23      	ldr	r3, [pc, #140]	; (8001eac <setRTCTime+0x204>)
 8001e1e:	fba3 1302 	umull	r1, r3, r3, r2
 8001e22:	08d9      	lsrs	r1, r3, #3
 8001e24:	460b      	mov	r3, r1
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	440b      	add	r3, r1
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	4403      	add	r3, r0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	71fb      	strb	r3, [r7, #7]
		sDate.WeekDay = DEC2BCD(dayOfWeek(ntpTime.dd, ntpTime.mo, ntpTime.yy));  // d, m, y
 8001e38:	7ffb      	ldrb	r3, [r7, #31]
 8001e3a:	7fb9      	ldrb	r1, [r7, #30]
 8001e3c:	8bba      	ldrh	r2, [r7, #28]
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f000 f96b 	bl	800211c <dayOfWeek>
 8001e46:	4603      	mov	r3, r0
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4b18      	ldr	r3, [pc, #96]	; (8001eac <setRTCTime+0x204>)
 8001e4c:	fba3 2302 	umull	r2, r3, r3, r2
 8001e50:	08db      	lsrs	r3, r3, #3
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	011b      	lsls	r3, r3, #4
 8001e56:	b2dc      	uxtb	r4, r3
 8001e58:	7ffb      	ldrb	r3, [r7, #31]
 8001e5a:	7fb9      	ldrb	r1, [r7, #30]
 8001e5c:	8bba      	ldrh	r2, [r7, #28]
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f000 f95b 	bl	800211c <dayOfWeek>
 8001e66:	4603      	mov	r3, r0
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <setRTCTime+0x204>)
 8001e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8001e70:	08d9      	lsrs	r1, r3, #3
 8001e72:	460b      	mov	r3, r1
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	440b      	add	r3, r1
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	4423      	add	r3, r4
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	713b      	strb	r3, [r7, #4]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	2201      	movs	r2, #1
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4809      	ldr	r0, [pc, #36]	; (8001eb0 <setRTCTime+0x208>)
 8001e8c:	f002 fa54 	bl	8004338 <HAL_RTC_SetDate>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <setRTCTime+0x1f2>
		{
			Error_Handler();
 8001e96:	f000 fc49 	bl	800272c <Error_Handler>
		}
		return SET_RTC_OK;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e001      	b.n	8001ea2 <setRTCTime+0x1fa>
	}
	else return SET_RTC_NOK;
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	372c      	adds	r7, #44	; 0x2c
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd90      	pop	{r4, r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	cccccccd 	.word	0xcccccccd
 8001eb0:	2000336c 	.word	0x2000336c
 8001eb4:	51eb851f 	.word	0x51eb851f

08001eb8 <getRTCTime>:

char* getRTCTime(void)
{
 8001eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eba:	b08b      	sub	sp, #44	; 0x2c
 8001ebc:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef gTime;
	RTC_DateTypeDef gDate;

	static char getTimeBuf[30] = {'\0'};

	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4833      	ldr	r0, [pc, #204]	; (8001f94 <getRTCTime+0xdc>)
 8001ec6:	f002 f9d9 	bl	800427c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BCD);
 8001eca:	463b      	mov	r3, r7
 8001ecc:	2201      	movs	r2, #1
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4830      	ldr	r0, [pc, #192]	; (8001f94 <getRTCTime+0xdc>)
 8001ed2:	f002 fab5 	bl	8004440 <HAL_RTC_GetDate>

	sprintf(getTimeBuf, "%02d/%02d/%04d,%02d:%02d:%02d", BCD2DEC(gDate.Date), BCD2DEC(gDate.Month), BCD2DEC(gDate.Year) + YEAR, BCD2DEC(gTime.Hours), BCD2DEC(gTime.Minutes), BCD2DEC(gTime.Seconds));
 8001ed6:	78bb      	ldrb	r3, [r7, #2]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	461a      	mov	r2, r3
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	78bb      	ldrb	r3, [r7, #2]
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	18d4      	adds	r4, r2, r3
 8001ef0:	787b      	ldrb	r3, [r7, #1]
 8001ef2:	091b      	lsrs	r3, r3, #4
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	461a      	mov	r2, r3
 8001f02:	787b      	ldrb	r3, [r7, #1]
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	18d5      	adds	r5, r2, r3
 8001f0a:	78fb      	ldrb	r3, [r7, #3]
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	461a      	mov	r2, r3
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	4413      	add	r3, r2
 8001f24:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8001f28:	793b      	ldrb	r3, [r7, #4]
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	4619      	mov	r1, r3
 8001f30:	460b      	mov	r3, r1
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4619      	mov	r1, r3
 8001f3a:	793b      	ldrb	r3, [r7, #4]
 8001f3c:	f003 030f 	and.w	r3, r3, #15
 8001f40:	4419      	add	r1, r3
 8001f42:	797b      	ldrb	r3, [r7, #5]
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	4618      	mov	r0, r3
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4403      	add	r3, r0
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	4618      	mov	r0, r3
 8001f54:	797b      	ldrb	r3, [r7, #5]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	4418      	add	r0, r3
 8001f5c:	79bb      	ldrb	r3, [r7, #6]
 8001f5e:	091b      	lsrs	r3, r3, #4
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	461e      	mov	r6, r3
 8001f64:	4633      	mov	r3, r6
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4433      	add	r3, r6
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	461e      	mov	r6, r3
 8001f6e:	79bb      	ldrb	r3, [r7, #6]
 8001f70:	f003 030f 	and.w	r3, r3, #15
 8001f74:	4433      	add	r3, r6
 8001f76:	9303      	str	r3, [sp, #12]
 8001f78:	9002      	str	r0, [sp, #8]
 8001f7a:	9101      	str	r1, [sp, #4]
 8001f7c:	9200      	str	r2, [sp, #0]
 8001f7e:	462b      	mov	r3, r5
 8001f80:	4622      	mov	r2, r4
 8001f82:	4905      	ldr	r1, [pc, #20]	; (8001f98 <getRTCTime+0xe0>)
 8001f84:	4805      	ldr	r0, [pc, #20]	; (8001f9c <getRTCTime+0xe4>)
 8001f86:	f00c f8a9 	bl	800e0dc <siprintf>
						//format can be changed by what developers want.
	return getTimeBuf;
 8001f8a:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <getRTCTime+0xe4>)
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	371c      	adds	r7, #28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f94:	2000336c 	.word	0x2000336c
 8001f98:	0800f828 	.word	0x0800f828
 8001f9c:	2000330c 	.word	0x2000330c

08001fa0 <getLogTime>:

char* getLogTime(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b088      	sub	sp, #32
 8001fa4:	af02      	add	r7, sp, #8
	RTC_TimeTypeDef gTime;
	RTC_DateTypeDef gDate;

	static char getTimeBuf[30] = {'\0'};

	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 8001fa6:	1d3b      	adds	r3, r7, #4
 8001fa8:	2201      	movs	r2, #1
 8001faa:	4619      	mov	r1, r3
 8001fac:	481e      	ldr	r0, [pc, #120]	; (8002028 <getLogTime+0x88>)
 8001fae:	f002 f965 	bl	800427c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BCD);
 8001fb2:	463b      	mov	r3, r7
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	481b      	ldr	r0, [pc, #108]	; (8002028 <getLogTime+0x88>)
 8001fba:	f002 fa41 	bl	8004440 <HAL_RTC_GetDate>

	sprintf(getTimeBuf,"%02d_%02d_%04d", BCD2DEC(gDate.Date), BCD2DEC(gDate.Month), BCD2DEC(gDate.Year) + YEAR);
 8001fbe:	78bb      	ldrb	r3, [r7, #2]
 8001fc0:	091b      	lsrs	r3, r3, #4
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	461a      	mov	r2, r3
 8001fd0:	78bb      	ldrb	r3, [r7, #2]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	441a      	add	r2, r3
 8001fd8:	787b      	ldrb	r3, [r7, #1]
 8001fda:	091b      	lsrs	r3, r3, #4
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	4619      	mov	r1, r3
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4619      	mov	r1, r3
 8001fea:	787b      	ldrb	r3, [r7, #1]
 8001fec:	f003 030f 	and.w	r3, r3, #15
 8001ff0:	4419      	add	r1, r3
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	091b      	lsrs	r3, r3, #4
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4403      	add	r3, r0
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	4618      	mov	r0, r3
 8002004:	78fb      	ldrb	r3, [r7, #3]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	4403      	add	r3, r0
 800200c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	460b      	mov	r3, r1
 8002014:	4905      	ldr	r1, [pc, #20]	; (800202c <getLogTime+0x8c>)
 8002016:	4806      	ldr	r0, [pc, #24]	; (8002030 <getLogTime+0x90>)
 8002018:	f00c f860 	bl	800e0dc <siprintf>
						//format can be changed by what developers want.
	return getTimeBuf;
 800201c:	4b04      	ldr	r3, [pc, #16]	; (8002030 <getLogTime+0x90>)
}
 800201e:	4618      	mov	r0, r3
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	2000336c 	.word	0x2000336c
 800202c:	0800f848 	.word	0x0800f848
 8002030:	2000332c 	.word	0x2000332c

08002034 <getDataTime>:

char* getDataTime(void)
{
 8002034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002036:	b08b      	sub	sp, #44	; 0x2c
 8002038:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef gTime;
	RTC_DateTypeDef gDate;

	static char getTimeBuf[30] = {'\0'};

	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 800203a:	1d3b      	adds	r3, r7, #4
 800203c:	2201      	movs	r2, #1
 800203e:	4619      	mov	r1, r3
 8002040:	4833      	ldr	r0, [pc, #204]	; (8002110 <getDataTime+0xdc>)
 8002042:	f002 f91b 	bl	800427c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BCD);
 8002046:	463b      	mov	r3, r7
 8002048:	2201      	movs	r2, #1
 800204a:	4619      	mov	r1, r3
 800204c:	4830      	ldr	r0, [pc, #192]	; (8002110 <getDataTime+0xdc>)
 800204e:	f002 f9f7 	bl	8004440 <HAL_RTC_GetDate>

	sprintf(getTimeBuf, "%02d_%02d_%04dT%02d_%02d_%02d", BCD2DEC(gDate.Date), BCD2DEC(gDate.Month), BCD2DEC(gDate.Year) + YEAR, BCD2DEC(gTime.Hours), BCD2DEC(gTime.Minutes), BCD2DEC(gTime.Seconds));
 8002052:	78bb      	ldrb	r3, [r7, #2]
 8002054:	091b      	lsrs	r3, r3, #4
 8002056:	b2db      	uxtb	r3, r3
 8002058:	461a      	mov	r2, r3
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	461a      	mov	r2, r3
 8002064:	78bb      	ldrb	r3, [r7, #2]
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	18d4      	adds	r4, r2, r3
 800206c:	787b      	ldrb	r3, [r7, #1]
 800206e:	091b      	lsrs	r3, r3, #4
 8002070:	b2db      	uxtb	r3, r3
 8002072:	461a      	mov	r2, r3
 8002074:	4613      	mov	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	461a      	mov	r2, r3
 800207e:	787b      	ldrb	r3, [r7, #1]
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	18d5      	adds	r5, r2, r3
 8002086:	78fb      	ldrb	r3, [r7, #3]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	b2db      	uxtb	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	461a      	mov	r2, r3
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	4413      	add	r3, r2
 80020a0:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80020a4:	793b      	ldrb	r3, [r7, #4]
 80020a6:	091b      	lsrs	r3, r3, #4
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	4619      	mov	r1, r3
 80020ac:	460b      	mov	r3, r1
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	4619      	mov	r1, r3
 80020b6:	793b      	ldrb	r3, [r7, #4]
 80020b8:	f003 030f 	and.w	r3, r3, #15
 80020bc:	4419      	add	r1, r3
 80020be:	797b      	ldrb	r3, [r7, #5]
 80020c0:	091b      	lsrs	r3, r3, #4
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	4618      	mov	r0, r3
 80020c6:	4603      	mov	r3, r0
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4403      	add	r3, r0
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	4618      	mov	r0, r3
 80020d0:	797b      	ldrb	r3, [r7, #5]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	4418      	add	r0, r3
 80020d8:	79bb      	ldrb	r3, [r7, #6]
 80020da:	091b      	lsrs	r3, r3, #4
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	461e      	mov	r6, r3
 80020e0:	4633      	mov	r3, r6
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4433      	add	r3, r6
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	461e      	mov	r6, r3
 80020ea:	79bb      	ldrb	r3, [r7, #6]
 80020ec:	f003 030f 	and.w	r3, r3, #15
 80020f0:	4433      	add	r3, r6
 80020f2:	9303      	str	r3, [sp, #12]
 80020f4:	9002      	str	r0, [sp, #8]
 80020f6:	9101      	str	r1, [sp, #4]
 80020f8:	9200      	str	r2, [sp, #0]
 80020fa:	462b      	mov	r3, r5
 80020fc:	4622      	mov	r2, r4
 80020fe:	4905      	ldr	r1, [pc, #20]	; (8002114 <getDataTime+0xe0>)
 8002100:	4805      	ldr	r0, [pc, #20]	; (8002118 <getDataTime+0xe4>)
 8002102:	f00b ffeb 	bl	800e0dc <siprintf>
						//format can be changed by what developers want.
	return getTimeBuf;
 8002106:	4b04      	ldr	r3, [pc, #16]	; (8002118 <getDataTime+0xe4>)
}
 8002108:	4618      	mov	r0, r3
 800210a:	371c      	adds	r7, #28
 800210c:	46bd      	mov	sp, r7
 800210e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002110:	2000336c 	.word	0x2000336c
 8002114:	0800f858 	.word	0x0800f858
 8002118:	2000334c 	.word	0x2000334c

0800211c <dayOfWeek>:

uint8_t dayOfWeek(uint8_t d, uint8_t m, uint8_t y)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	71fb      	strb	r3, [r7, #7]
 8002126:	460b      	mov	r3, r1
 8002128:	71bb      	strb	r3, [r7, #6]
 800212a:	4613      	mov	r3, r2
 800212c:	717b      	strb	r3, [r7, #5]
	//this is zero-based algorithm. So sunday is 0 monday is 1 etc.
	uint8_t weekDay = (d += m < 3 ? y-- : y - 2, 23*m/9 + d + 4 + y/4- y/100 + y/400)%7;
 800212e:	79bb      	ldrb	r3, [r7, #6]
 8002130:	2b02      	cmp	r3, #2
 8002132:	d803      	bhi.n	800213c <dayOfWeek+0x20>
 8002134:	797b      	ldrb	r3, [r7, #5]
 8002136:	1e5a      	subs	r2, r3, #1
 8002138:	717a      	strb	r2, [r7, #5]
 800213a:	e001      	b.n	8002140 <dayOfWeek+0x24>
 800213c:	797b      	ldrb	r3, [r7, #5]
 800213e:	3b02      	subs	r3, #2
 8002140:	b2da      	uxtb	r2, r3
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	4413      	add	r3, r2
 8002146:	71fb      	strb	r3, [r7, #7]
 8002148:	79ba      	ldrb	r2, [r7, #6]
 800214a:	4613      	mov	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4413      	add	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	1a9b      	subs	r3, r3, r2
 8002154:	4a1a      	ldr	r2, [pc, #104]	; (80021c0 <dayOfWeek+0xa4>)
 8002156:	fb82 1203 	smull	r1, r2, r2, r3
 800215a:	1052      	asrs	r2, r2, #1
 800215c:	17db      	asrs	r3, r3, #31
 800215e:	1ad2      	subs	r2, r2, r3
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	4413      	add	r3, r2
 8002164:	3304      	adds	r3, #4
 8002166:	797a      	ldrb	r2, [r7, #5]
 8002168:	0892      	lsrs	r2, r2, #2
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	4413      	add	r3, r2
 800216e:	797a      	ldrb	r2, [r7, #5]
 8002170:	4914      	ldr	r1, [pc, #80]	; (80021c4 <dayOfWeek+0xa8>)
 8002172:	fba1 1202 	umull	r1, r2, r1, r2
 8002176:	0952      	lsrs	r2, r2, #5
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	1a9a      	subs	r2, r3, r2
 800217c:	797b      	ldrb	r3, [r7, #5]
 800217e:	4911      	ldr	r1, [pc, #68]	; (80021c4 <dayOfWeek+0xa8>)
 8002180:	fb81 0103 	smull	r0, r1, r1, r3
 8002184:	11c9      	asrs	r1, r1, #7
 8002186:	17db      	asrs	r3, r3, #31
 8002188:	1acb      	subs	r3, r1, r3
 800218a:	441a      	add	r2, r3
 800218c:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <dayOfWeek+0xac>)
 800218e:	fb83 1302 	smull	r1, r3, r3, r2
 8002192:	4413      	add	r3, r2
 8002194:	1099      	asrs	r1, r3, #2
 8002196:	17d3      	asrs	r3, r2, #31
 8002198:	1ac9      	subs	r1, r1, r3
 800219a:	460b      	mov	r3, r1
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	1a5b      	subs	r3, r3, r1
 80021a0:	1ad1      	subs	r1, r2, r3
 80021a2:	460b      	mov	r3, r1
 80021a4:	73fb      	strb	r3, [r7, #15]
	if (weekDay == 0) return 7;
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <dayOfWeek+0x94>
 80021ac:	2307      	movs	r3, #7
 80021ae:	e000      	b.n	80021b2 <dayOfWeek+0x96>
	else return weekDay;
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	38e38e39 	.word	0x38e38e39
 80021c4:	51eb851f 	.word	0x51eb851f
 80021c8:	92492493 	.word	0x92492493

080021cc <SDInit>:
	}
	return "NOTHING";
}

SD_CARD_StatusTypeDef SDInit(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "", 0);
 80021d0:	2200      	movs	r2, #0
 80021d2:	491b      	ldr	r1, [pc, #108]	; (8002240 <SDInit+0x74>)
 80021d4:	481b      	ldr	r0, [pc, #108]	; (8002244 <SDInit+0x78>)
 80021d6:	f006 fd0d 	bl	8008bf4 <f_mount>
 80021da:	4603      	mov	r3, r0
 80021dc:	461a      	mov	r2, r3
 80021de:	4b1a      	ldr	r3, [pc, #104]	; (8002248 <SDInit+0x7c>)
 80021e0:	701a      	strb	r2, [r3, #0]
	if (FR_OK != fresult) {
 80021e2:	4b19      	ldr	r3, [pc, #100]	; (8002248 <SDInit+0x7c>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d002      	beq.n	80021f0 <SDInit+0x24>
		return SD_CARD_ERROR;
 80021ea:	f06f 0301 	mvn.w	r3, #1
 80021ee:	e024      	b.n	800223a <SDInit+0x6e>
	}
	fresult = f_mkdir("Data");
 80021f0:	4816      	ldr	r0, [pc, #88]	; (800224c <SDInit+0x80>)
 80021f2:	f007 fc52 	bl	8009a9a <f_mkdir>
 80021f6:	4603      	mov	r3, r0
 80021f8:	461a      	mov	r2, r3
 80021fa:	4b13      	ldr	r3, [pc, #76]	; (8002248 <SDInit+0x7c>)
 80021fc:	701a      	strb	r2, [r3, #0]
	if (FR_OK != fresult && FR_EXIST != fresult) {
 80021fe:	4b12      	ldr	r3, [pc, #72]	; (8002248 <SDInit+0x7c>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d006      	beq.n	8002214 <SDInit+0x48>
 8002206:	4b10      	ldr	r3, [pc, #64]	; (8002248 <SDInit+0x7c>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b08      	cmp	r3, #8
 800220c:	d002      	beq.n	8002214 <SDInit+0x48>
		return SD_CARD_ERROR;
 800220e:	f06f 0301 	mvn.w	r3, #1
 8002212:	e012      	b.n	800223a <SDInit+0x6e>
	}
	fresult = f_mkdir("Log");
 8002214:	480e      	ldr	r0, [pc, #56]	; (8002250 <SDInit+0x84>)
 8002216:	f007 fc40 	bl	8009a9a <f_mkdir>
 800221a:	4603      	mov	r3, r0
 800221c:	461a      	mov	r2, r3
 800221e:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <SDInit+0x7c>)
 8002220:	701a      	strb	r2, [r3, #0]
	if (FR_OK != fresult && FR_EXIST != fresult) {
 8002222:	4b09      	ldr	r3, [pc, #36]	; (8002248 <SDInit+0x7c>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d006      	beq.n	8002238 <SDInit+0x6c>
 800222a:	4b07      	ldr	r3, [pc, #28]	; (8002248 <SDInit+0x7c>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b08      	cmp	r3, #8
 8002230:	d002      	beq.n	8002238 <SDInit+0x6c>
		return SD_CARD_ERROR;
 8002232:	f06f 0301 	mvn.w	r3, #1
 8002236:	e000      	b.n	800223a <SDInit+0x6e>
	}

	return SD_CARD_READY;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	0800f8b0 	.word	0x0800f8b0
 8002244:	20000144 	.word	0x20000144
 8002248:	200021ac 	.word	0x200021ac
 800224c:	0800f8b4 	.word	0x0800f8b4
 8002250:	0800f8bc 	.word	0x0800f8bc

08002254 <checkSDStore>:

bool checkSDStore(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	f5ad 7d44 	sub.w	sp, sp, #784	; 0x310
 800225a:	af00      	add	r7, sp, #0
	sdStatus = SD_CARD_BUSY;
 800225c:	4b2f      	ldr	r3, [pc, #188]	; (800231c <checkSDStore+0xc8>)
 800225e:	22ff      	movs	r2, #255	; 0xff
 8002260:	701a      	strb	r2, [r3, #0]
	fresult = f_findfirst(&dir, &fno, "Data", "????*.log");
 8002262:	4b2f      	ldr	r3, [pc, #188]	; (8002320 <checkSDStore+0xcc>)
 8002264:	4a2f      	ldr	r2, [pc, #188]	; (8002324 <checkSDStore+0xd0>)
 8002266:	4930      	ldr	r1, [pc, #192]	; (8002328 <checkSDStore+0xd4>)
 8002268:	4830      	ldr	r0, [pc, #192]	; (800232c <checkSDStore+0xd8>)
 800226a:	f007 fb48 	bl	80098fe <f_findfirst>
 800226e:	4603      	mov	r3, r0
 8002270:	461a      	mov	r2, r3
 8002272:	4b2f      	ldr	r3, [pc, #188]	; (8002330 <checkSDStore+0xdc>)
 8002274:	701a      	strb	r2, [r3, #0]
	if (strlen(fno.fname) > 1 && fresult == FR_OK) {
 8002276:	482f      	ldr	r0, [pc, #188]	; (8002334 <checkSDStore+0xe0>)
 8002278:	f7fd ffb2 	bl	80001e0 <strlen>
 800227c:	4603      	mov	r3, r0
 800227e:	2b01      	cmp	r3, #1
 8002280:	d943      	bls.n	800230a <checkSDStore+0xb6>
 8002282:	4b2b      	ldr	r3, [pc, #172]	; (8002330 <checkSDStore+0xdc>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d13f      	bne.n	800230a <checkSDStore+0xb6>
		char fileName[sizeof(fno.fname) + 20];
		sprintf(fileName, "Data/%s", fno.fname);
 800228a:	1d3b      	adds	r3, r7, #4
 800228c:	4a29      	ldr	r2, [pc, #164]	; (8002334 <checkSDStore+0xe0>)
 800228e:	492a      	ldr	r1, [pc, #168]	; (8002338 <checkSDStore+0xe4>)
 8002290:	4618      	mov	r0, r3
 8002292:	f00b ff23 	bl	800e0dc <siprintf>
		fresult = f_open(&fil, fileName, FA_READ);
 8002296:	1d3b      	adds	r3, r7, #4
 8002298:	2201      	movs	r2, #1
 800229a:	4619      	mov	r1, r3
 800229c:	4827      	ldr	r0, [pc, #156]	; (800233c <checkSDStore+0xe8>)
 800229e:	f006 fcef 	bl	8008c80 <f_open>
 80022a2:	4603      	mov	r3, r0
 80022a4:	461a      	mov	r2, r3
 80022a6:	4b22      	ldr	r3, [pc, #136]	; (8002330 <checkSDStore+0xdc>)
 80022a8:	701a      	strb	r2, [r3, #0]
		char buf[SD_READ_BUF_SIZE];
		f_gets(buf, sizeof(buf), &fil);
 80022aa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022ae:	4a23      	ldr	r2, [pc, #140]	; (800233c <checkSDStore+0xe8>)
 80022b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80022b4:	4618      	mov	r0, r3
 80022b6:	f007 fcfd 	bl	8009cb4 <f_gets>
		int result = MQTT_run(buf);
 80022ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 f866 	bl	8002390 <MQTT_run>
 80022c4:	f8c7 030c 	str.w	r0, [r7, #780]	; 0x30c
		if (result < 0) {
 80022c8:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	da0e      	bge.n	80022ee <checkSDStore+0x9a>
			msgLogger("Error Happaned While Sending Data to MQTT Server.");
 80022d0:	481b      	ldr	r0, [pc, #108]	; (8002340 <checkSDStore+0xec>)
 80022d2:	f000 f975 	bl	80025c0 <msgLogger>
			sdStatus = SD_CARD_READY;
 80022d6:	4b11      	ldr	r3, [pc, #68]	; (800231c <checkSDStore+0xc8>)
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
			fresult = f_close(&fil);
 80022dc:	4817      	ldr	r0, [pc, #92]	; (800233c <checkSDStore+0xe8>)
 80022de:	f007 fa0c 	bl	80096fa <f_close>
 80022e2:	4603      	mov	r3, r0
 80022e4:	461a      	mov	r2, r3
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <checkSDStore+0xdc>)
 80022e8:	701a      	strb	r2, [r3, #0]
			return false;
 80022ea:	2300      	movs	r3, #0
 80022ec:	e011      	b.n	8002312 <checkSDStore+0xbe>
		}
		else {
			msgLogger("Data has been sent succesfully.");
 80022ee:	4815      	ldr	r0, [pc, #84]	; (8002344 <checkSDStore+0xf0>)
 80022f0:	f000 f966 	bl	80025c0 <msgLogger>
			fresult = f_close(&fil);
 80022f4:	4811      	ldr	r0, [pc, #68]	; (800233c <checkSDStore+0xe8>)
 80022f6:	f007 fa00 	bl	80096fa <f_close>
 80022fa:	4603      	mov	r3, r0
 80022fc:	461a      	mov	r2, r3
 80022fe:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <checkSDStore+0xdc>)
 8002300:	701a      	strb	r2, [r3, #0]
			f_unlink(fileName);
 8002302:	1d3b      	adds	r3, r7, #4
 8002304:	4618      	mov	r0, r3
 8002306:	f007 fb18 	bl	800993a <f_unlink>
		}
	}
	sdStatus = SD_CARD_READY;
 800230a:	4b04      	ldr	r3, [pc, #16]	; (800231c <checkSDStore+0xc8>)
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]
	return true;
 8002310:	2301      	movs	r3, #1
}
 8002312:	4618      	mov	r0, r3
 8002314:	f507 7744 	add.w	r7, r7, #784	; 0x310
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20000140 	.word	0x20000140
 8002320:	0800f8c0 	.word	0x0800f8c0
 8002324:	0800f8b4 	.word	0x0800f8b4
 8002328:	200021e8 	.word	0x200021e8
 800232c:	200021b0 	.word	0x200021b0
 8002330:	200021ac 	.word	0x200021ac
 8002334:	200021fe 	.word	0x200021fe
 8002338:	0800f8cc 	.word	0x0800f8cc
 800233c:	2000117c 	.word	0x2000117c
 8002340:	0800f8d4 	.word	0x0800f8d4
 8002344:	0800f908 	.word	0x0800f908

08002348 <w5500Init>:

int8_t w5500Init(struct w5500_setup w5500Opt)
{
 8002348:	b084      	sub	sp, #16
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	f107 0c10 	add.w	ip, r7, #16
 8002354:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int8_t result;
	result = wizchip_init(w5500Opt.bufSize, w5500Opt.bufSize);
 8002358:	f107 0110 	add.w	r1, r7, #16
 800235c:	f107 0010 	add.w	r0, r7, #16
 8002360:	f009 fa26 	bl	800b7b0 <wizchip_init>
 8002364:	4603      	mov	r3, r0
 8002366:	71fb      	strb	r3, [r7, #7]
	wizchip_setnetinfo(&w5500Opt.netInfo);
 8002368:	f107 0318 	add.w	r3, r7, #24
 800236c:	4618      	mov	r0, r3
 800236e:	f009 faab 	bl	800b8c8 <wizchip_setnetinfo>
	wizchip_settimeout(&w5500Opt.netTimeInfo);
 8002372:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002376:	4618      	mov	r0, r3
 8002378:	f009 fae6 	bl	800b948 <wizchip_settimeout>
	return result;
 800237c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800238a:	b004      	add	sp, #16
 800238c:	4770      	bx	lr
	...

08002390 <MQTT_run>:

int MQTT_run(char* sdBuf)
{
 8002390:	b5b0      	push	{r4, r5, r7, lr}
 8002392:	f5ad 6da0 	sub.w	sp, sp, #1280	; 0x500
 8002396:	af04      	add	r7, sp, #16
 8002398:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800239c:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 80023a0:	6018      	str	r0, [r3, #0]
	int rc = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
	char pubbuf[SD_READ_BUF_SIZE];
	Network n;
	MQTTClient c;
	MQTTMessage m;

	NewNetwork(&n, 0);
 80023a8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80023ac:	2100      	movs	r1, #0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f00a f832 	bl	800c418 <NewNetwork>
	int i =	ConnectNetwork(&n, (uint8_t*)hostIp, 1883);
 80023b4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80023b8:	f240 725b 	movw	r2, #1883	; 0x75b
 80023bc:	4979      	ldr	r1, [pc, #484]	; (80025a4 <MQTT_run+0x214>)
 80023be:	4618      	mov	r0, r3
 80023c0:	f00a f8a7 	bl	800c512 <ConnectNetwork>
 80023c4:	f8c7 04e4 	str.w	r0, [r7, #1252]	; 0x4e4
	if (i == 0) return -1;
 80023c8:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d102      	bne.n	80023d6 <MQTT_run+0x46>
 80023d0:	f04f 33ff 	mov.w	r3, #4294967295
 80023d4:	e0e0      	b.n	8002598 <MQTT_run+0x208>
	MQTTClientInit(&c, &n, 1000, buf, sizeof(buf), tempBuffer, sizeof(tempBuffer));
 80023d6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80023da:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 80023de:	f107 0090 	add.w	r0, r7, #144	; 0x90
 80023e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023e6:	9202      	str	r2, [sp, #8]
 80023e8:	4a6f      	ldr	r2, [pc, #444]	; (80025a8 <MQTT_run+0x218>)
 80023ea:	9201      	str	r2, [sp, #4]
 80023ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80023f0:	9200      	str	r2, [sp, #0]
 80023f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023f6:	f009 fb3c 	bl	800ba72 <MQTTClientInit>

	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 80023fa:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80023fe:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8002402:	4a6a      	ldr	r2, [pc, #424]	; (80025ac <MQTT_run+0x21c>)
 8002404:	4618      	mov	r0, r3
 8002406:	4611      	mov	r1, r2
 8002408:	2358      	movs	r3, #88	; 0x58
 800240a:	461a      	mov	r2, r3
 800240c:	f00b fcd2 	bl	800ddb4 <memcpy>
	data.willFlag = 0;
 8002410:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8002414:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8002418:	2200      	movs	r2, #0
 800241a:	76da      	strb	r2, [r3, #27]
	data.MQTTVersion = 3;
 800241c:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8002420:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8002424:	2203      	movs	r2, #3
 8002426:	721a      	strb	r2, [r3, #8]
	data.clientID.cstring = mqttopt.clientid;
 8002428:	4b61      	ldr	r3, [pc, #388]	; (80025b0 <MQTT_run+0x220>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8002430:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8002434:	60da      	str	r2, [r3, #12]
	data.username.cstring = mqttopt.username;
 8002436:	4b5e      	ldr	r3, [pc, #376]	; (80025b0 <MQTT_run+0x220>)
 8002438:	691a      	ldr	r2, [r3, #16]
 800243a:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800243e:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8002442:	641a      	str	r2, [r3, #64]	; 0x40
	data.password.cstring = mqttopt.password;
 8002444:	4b5a      	ldr	r3, [pc, #360]	; (80025b0 <MQTT_run+0x220>)
 8002446:	695a      	ldr	r2, [r3, #20]
 8002448:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800244c:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8002450:	64da      	str	r2, [r3, #76]	; 0x4c

	data.keepAliveInterval = 60;
 8002452:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8002456:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800245a:	223c      	movs	r2, #60	; 0x3c
 800245c:	831a      	strh	r2, [r3, #24]
	data.cleansession = 1;
 800245e:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8002462:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8002466:	2201      	movs	r2, #1
 8002468:	769a      	strb	r2, [r3, #26]

	rc = MQTTConnect(&c, &data);
 800246a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800246e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f009 fe25 	bl	800c0c4 <MQTTConnect>
 800247a:	f8c7 04ec 	str.w	r0, [r7, #1260]	; 0x4ec
	if (rc < 0) {
 800247e:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8002482:	2b00      	cmp	r3, #0
 8002484:	da02      	bge.n	800248c <MQTT_run+0xfc>
		return rc;
 8002486:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 800248a:	e085      	b.n	8002598 <MQTT_run+0x208>
	}
	printf("Connected to server : {%d, %d, %d, %d}\r\n", hostIp[0], hostIp[1], hostIp[2], hostIp[3]);
 800248c:	4b45      	ldr	r3, [pc, #276]	; (80025a4 <MQTT_run+0x214>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	4619      	mov	r1, r3
 8002492:	4b44      	ldr	r3, [pc, #272]	; (80025a4 <MQTT_run+0x214>)
 8002494:	785b      	ldrb	r3, [r3, #1]
 8002496:	461a      	mov	r2, r3
 8002498:	4b42      	ldr	r3, [pc, #264]	; (80025a4 <MQTT_run+0x214>)
 800249a:	789b      	ldrb	r3, [r3, #2]
 800249c:	4618      	mov	r0, r3
 800249e:	4b41      	ldr	r3, [pc, #260]	; (80025a4 <MQTT_run+0x214>)
 80024a0:	78db      	ldrb	r3, [r3, #3]
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	4603      	mov	r3, r0
 80024a6:	4843      	ldr	r0, [pc, #268]	; (80025b4 <MQTT_run+0x224>)
 80024a8:	f00b fd7a 	bl	800dfa0 <iprintf>
	mqttopt.showtopics = 1;
 80024ac:	4b40      	ldr	r3, [pc, #256]	; (80025b0 <MQTT_run+0x220>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	621a      	str	r2, [r3, #32]

	m.qos = QOS0;
 80024b2:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80024b6:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]
	m.retained = 1;
 80024be:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80024c2:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 80024c6:	2201      	movs	r2, #1
 80024c8:	705a      	strb	r2, [r3, #1]
	m.dup = 0;
 80024ca:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80024ce:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 80024d2:	2200      	movs	r2, #0
 80024d4:	709a      	strb	r2, [r3, #2]

	MQTTYield(&c, data.keepAliveInterval);
 80024d6:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80024da:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 80024de:	8b1b      	ldrh	r3, [r3, #24]
 80024e0:	461a      	mov	r2, r3
 80024e2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f009 fda7 	bl	800c03c <MQTTYield>
	sprintf(pubbuf, sdBuf);
 80024ee:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80024f2:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 80024f6:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 80024fa:	6819      	ldr	r1, [r3, #0]
 80024fc:	4610      	mov	r0, r2
 80024fe:	f00b fded 	bl	800e0dc <siprintf>
	m.payload = pubbuf;
 8002502:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8002506:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800250a:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 800250e:	609a      	str	r2, [r3, #8]
	m.payloadlen = strlen(pubbuf);
 8002510:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002514:	4618      	mov	r0, r3
 8002516:	f7fd fe63 	bl	80001e0 <strlen>
 800251a:	4602      	mov	r2, r0
 800251c:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8002520:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8002524:	60da      	str	r2, [r3, #12]
	uint8_t mqttTOPIC[30] = "/product_003";
 8002526:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800252a:	f5a3 659d 	sub.w	r5, r3, #1256	; 0x4e8
 800252e:	4b22      	ldr	r3, [pc, #136]	; (80025b8 <MQTT_run+0x228>)
 8002530:	462c      	mov	r4, r5
 8002532:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002534:	c407      	stmia	r4!, {r0, r1, r2}
 8002536:	7023      	strb	r3, [r4, #0]
 8002538:	f105 030d 	add.w	r3, r5, #13
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	741a      	strb	r2, [r3, #16]
	rc = -1;
 8002548:	f04f 33ff 	mov.w	r3, #4294967295
 800254c:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
	uint8_t retry = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	f887 34eb 	strb.w	r3, [r7, #1259]	; 0x4eb
	while (rc != 0) {
 8002556:	e016      	b.n	8002586 <MQTT_run+0x1f6>
		retry++;
 8002558:	f897 34eb 	ldrb.w	r3, [r7, #1259]	; 0x4eb
 800255c:	3301      	adds	r3, #1
 800255e:	f887 34eb 	strb.w	r3, [r7, #1259]	; 0x4eb
		rc = MQTTPublish(&c, (const char*)mqttTOPIC, &m);
 8002562:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002566:	f107 0108 	add.w	r1, r7, #8
 800256a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800256e:	4618      	mov	r0, r3
 8002570:	f009 fe2e 	bl	800c1d0 <MQTTPublish>
 8002574:	f8c7 04ec 	str.w	r0, [r7, #1260]	; 0x4ec
		if (retry > 4) return rc;
 8002578:	f897 34eb 	ldrb.w	r3, [r7, #1259]	; 0x4eb
 800257c:	2b04      	cmp	r3, #4
 800257e:	d902      	bls.n	8002586 <MQTT_run+0x1f6>
 8002580:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8002584:	e008      	b.n	8002598 <MQTT_run+0x208>
	while (rc != 0) {
 8002586:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1e4      	bne.n	8002558 <MQTT_run+0x1c8>
	}
	printf("Message is sent to MQTT Server.\r\n");
 800258e:	480b      	ldr	r0, [pc, #44]	; (80025bc <MQTT_run+0x22c>)
 8002590:	f00b fd8c 	bl	800e0ac <puts>
	return rc;
 8002594:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
}
 8002598:	4618      	mov	r0, r3
 800259a:	f507 679e 	add.w	r7, r7, #1264	; 0x4f0
 800259e:	46bd      	mov	sp, r7
 80025a0:	bdb0      	pop	{r4, r5, r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000028 	.word	0x20000028
 80025a8:	20002300 	.word	0x20002300
 80025ac:	0800f978 	.word	0x0800f978
 80025b0:	2000002c 	.word	0x2000002c
 80025b4:	0800f928 	.word	0x0800f928
 80025b8:	0800f9d0 	.word	0x0800f9d0
 80025bc:	0800f954 	.word	0x0800f954

080025c0 <msgLogger>:

void msgLogger (char* msg)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
#if MSG_LOGGER & UART_LOGGER
	uint32_t len = strlen(msg);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7fd fe09 	bl	80001e0 <strlen>
 80025ce:	60f8      	str	r0, [r7, #12]
	printf("[%s] ==> %s\n", getRTCTime(), msg);
 80025d0:	f7ff fc72 	bl	8001eb8 <getRTCTime>
 80025d4:	4603      	mov	r3, r0
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	4619      	mov	r1, r3
 80025da:	4804      	ldr	r0, [pc, #16]	; (80025ec <msgLogger+0x2c>)
 80025dc:	f00b fce0 	bl	800dfa0 <iprintf>
	if (len > 2000) return;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
			free(ptrBuf);
		}
		sdStatus = SD_CARD_READY;
	#endif
#endif
}
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	0800f9f0 	.word	0x0800f9f0

080025f0 <inputStatusLogger>:

void inputStatusLogger(uint8_t input)
{
 80025f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025f2:	b08f      	sub	sp, #60	; 0x3c
 80025f4:	af06      	add	r7, sp, #24
 80025f6:	4603      	mov	r3, r0
 80025f8:	71fb      	strb	r3, [r7, #7]
	#if MSG_LOGGER & UART_LOGGER
		char buf[sizeof("Current Inputs ==> ") + sizeof(int)];
		sprintf(buf, "Current Inputs ==> "BYTE_TO_BINARY_PATTERN, BYTE_TO_BINARY(input));
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	da02      	bge.n	8002608 <inputStatusLogger+0x18>
 8002602:	f04f 0c31 	mov.w	ip, #49	; 0x31
 8002606:	e001      	b.n	800260c <inputStatusLogger+0x1c>
 8002608:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <inputStatusLogger+0x2c>
 8002616:	f04f 0e31 	mov.w	lr, #49	; 0x31
 800261a:	e001      	b.n	8002620 <inputStatusLogger+0x30>
 800261c:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	f003 0320 	and.w	r3, r3, #32
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <inputStatusLogger+0x3e>
 800262a:	2331      	movs	r3, #49	; 0x31
 800262c:	e000      	b.n	8002630 <inputStatusLogger+0x40>
 800262e:	2330      	movs	r3, #48	; 0x30
 8002630:	79fa      	ldrb	r2, [r7, #7]
 8002632:	f002 0210 	and.w	r2, r2, #16
 8002636:	2a00      	cmp	r2, #0
 8002638:	d001      	beq.n	800263e <inputStatusLogger+0x4e>
 800263a:	2231      	movs	r2, #49	; 0x31
 800263c:	e000      	b.n	8002640 <inputStatusLogger+0x50>
 800263e:	2230      	movs	r2, #48	; 0x30
 8002640:	79f9      	ldrb	r1, [r7, #7]
 8002642:	f001 0108 	and.w	r1, r1, #8
 8002646:	2900      	cmp	r1, #0
 8002648:	d001      	beq.n	800264e <inputStatusLogger+0x5e>
 800264a:	2131      	movs	r1, #49	; 0x31
 800264c:	e000      	b.n	8002650 <inputStatusLogger+0x60>
 800264e:	2130      	movs	r1, #48	; 0x30
 8002650:	79f8      	ldrb	r0, [r7, #7]
 8002652:	f000 0004 	and.w	r0, r0, #4
 8002656:	2800      	cmp	r0, #0
 8002658:	d001      	beq.n	800265e <inputStatusLogger+0x6e>
 800265a:	2031      	movs	r0, #49	; 0x31
 800265c:	e000      	b.n	8002660 <inputStatusLogger+0x70>
 800265e:	2030      	movs	r0, #48	; 0x30
 8002660:	79fc      	ldrb	r4, [r7, #7]
 8002662:	f004 0402 	and.w	r4, r4, #2
 8002666:	2c00      	cmp	r4, #0
 8002668:	d001      	beq.n	800266e <inputStatusLogger+0x7e>
 800266a:	2431      	movs	r4, #49	; 0x31
 800266c:	e000      	b.n	8002670 <inputStatusLogger+0x80>
 800266e:	2430      	movs	r4, #48	; 0x30
 8002670:	79fd      	ldrb	r5, [r7, #7]
 8002672:	f005 0501 	and.w	r5, r5, #1
 8002676:	2d00      	cmp	r5, #0
 8002678:	d001      	beq.n	800267e <inputStatusLogger+0x8e>
 800267a:	2531      	movs	r5, #49	; 0x31
 800267c:	e000      	b.n	8002680 <inputStatusLogger+0x90>
 800267e:	2530      	movs	r5, #48	; 0x30
 8002680:	f107 0608 	add.w	r6, r7, #8
 8002684:	9505      	str	r5, [sp, #20]
 8002686:	9404      	str	r4, [sp, #16]
 8002688:	9003      	str	r0, [sp, #12]
 800268a:	9102      	str	r1, [sp, #8]
 800268c:	9201      	str	r2, [sp, #4]
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	4673      	mov	r3, lr
 8002692:	4662      	mov	r2, ip
 8002694:	4906      	ldr	r1, [pc, #24]	; (80026b0 <inputStatusLogger+0xc0>)
 8002696:	4630      	mov	r0, r6
 8002698:	f00b fd20 	bl	800e0dc <siprintf>
		msgLogger(buf);
 800269c:	f107 0308 	add.w	r3, r7, #8
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff ff8d 	bl	80025c0 <msgLogger>
	#endif
}
 80026a6:	bf00      	nop
 80026a8:	3724      	adds	r7, #36	; 0x24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026ae:	bf00      	nop
 80026b0:	0800fa00 	.word	0x0800fa00

080026b4 <cs_sel>:

void cs_sel() {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 80026b8:	2200      	movs	r2, #0
 80026ba:	2110      	movs	r1, #16
 80026bc:	4802      	ldr	r0, [pc, #8]	; (80026c8 <cs_sel+0x14>)
 80026be:	f000 ff6d 	bl	800359c <HAL_GPIO_WritePin>
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40020000 	.word	0x40020000

080026cc <cs_desel>:

void cs_desel() {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 80026d0:	2201      	movs	r2, #1
 80026d2:	2110      	movs	r1, #16
 80026d4:	4802      	ldr	r0, [pc, #8]	; (80026e0 <cs_desel+0x14>)
 80026d6:	f000 ff61 	bl	800359c <HAL_GPIO_WritePin>
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40020000 	.word	0x40020000

080026e4 <spi_rb>:

uint8_t spi_rb(void) {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFF);
 80026ea:	1df9      	adds	r1, r7, #7
 80026ec:	f04f 33ff 	mov.w	r3, #4294967295
 80026f0:	2201      	movs	r2, #1
 80026f2:	4804      	ldr	r0, [pc, #16]	; (8002704 <spi_rb+0x20>)
 80026f4:	f002 f975 	bl	80049e2 <HAL_SPI_Receive>
	return rbuf;
 80026f8:	79fb      	ldrb	r3, [r7, #7]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	2000338c 	.word	0x2000338c

08002708 <spi_wb>:

void spi_wb(uint8_t b) {
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &b, 1, 0xFFFFFFFF);
 8002712:	1df9      	adds	r1, r7, #7
 8002714:	f04f 33ff 	mov.w	r3, #4294967295
 8002718:	2201      	movs	r2, #1
 800271a:	4803      	ldr	r0, [pc, #12]	; (8002728 <spi_wb+0x20>)
 800271c:	f002 f825 	bl	800476a <HAL_SPI_Transmit>
}
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	2000338c 	.word	0x2000338c

0800272c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002730:	b672      	cpsid	i
}
 8002732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002734:	e7fe      	b.n	8002734 <Error_Handler+0x8>
	...

08002738 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800273e:	1d3b      	adds	r3, r7, #4
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800274c:	2300      	movs	r3, #0
 800274e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002750:	4b24      	ldr	r3, [pc, #144]	; (80027e4 <MX_RTC_Init+0xac>)
 8002752:	4a25      	ldr	r2, [pc, #148]	; (80027e8 <MX_RTC_Init+0xb0>)
 8002754:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002756:	4b23      	ldr	r3, [pc, #140]	; (80027e4 <MX_RTC_Init+0xac>)
 8002758:	2200      	movs	r2, #0
 800275a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 99;
 800275c:	4b21      	ldr	r3, [pc, #132]	; (80027e4 <MX_RTC_Init+0xac>)
 800275e:	2263      	movs	r2, #99	; 0x63
 8002760:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 299;
 8002762:	4b20      	ldr	r3, [pc, #128]	; (80027e4 <MX_RTC_Init+0xac>)
 8002764:	f240 122b 	movw	r2, #299	; 0x12b
 8002768:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800276a:	4b1e      	ldr	r3, [pc, #120]	; (80027e4 <MX_RTC_Init+0xac>)
 800276c:	2200      	movs	r2, #0
 800276e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002770:	4b1c      	ldr	r3, [pc, #112]	; (80027e4 <MX_RTC_Init+0xac>)
 8002772:	2200      	movs	r2, #0
 8002774:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002776:	4b1b      	ldr	r3, [pc, #108]	; (80027e4 <MX_RTC_Init+0xac>)
 8002778:	2200      	movs	r2, #0
 800277a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800277c:	4819      	ldr	r0, [pc, #100]	; (80027e4 <MX_RTC_Init+0xac>)
 800277e:	f001 fc6d 	bl	800405c <HAL_RTC_Init>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8002788:	f7ff ffd0 	bl	800272c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800278c:	2300      	movs	r3, #0
 800278e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002790:	2300      	movs	r3, #0
 8002792:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002794:	2300      	movs	r3, #0
 8002796:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002798:	2300      	movs	r3, #0
 800279a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80027a0:	1d3b      	adds	r3, r7, #4
 80027a2:	2201      	movs	r2, #1
 80027a4:	4619      	mov	r1, r3
 80027a6:	480f      	ldr	r0, [pc, #60]	; (80027e4 <MX_RTC_Init+0xac>)
 80027a8:	f001 fcce 	bl	8004148 <HAL_RTC_SetTime>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 80027b2:	f7ff ffbb 	bl	800272c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80027b6:	2301      	movs	r3, #1
 80027b8:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80027ba:	2301      	movs	r3, #1
 80027bc:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80027be:	2301      	movs	r3, #1
 80027c0:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80027c6:	463b      	mov	r3, r7
 80027c8:	2201      	movs	r2, #1
 80027ca:	4619      	mov	r1, r3
 80027cc:	4805      	ldr	r0, [pc, #20]	; (80027e4 <MX_RTC_Init+0xac>)
 80027ce:	f001 fdb3 	bl	8004338 <HAL_RTC_SetDate>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 80027d8:	f7ff ffa8 	bl	800272c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80027dc:	bf00      	nop
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	2000336c 	.word	0x2000336c
 80027e8:	40002800 	.word	0x40002800

080027ec <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027f4:	f107 030c 	add.w	r3, r7, #12
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	60da      	str	r2, [r3, #12]
 8002802:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a0c      	ldr	r2, [pc, #48]	; (800283c <HAL_RTC_MspInit+0x50>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d111      	bne.n	8002832 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800280e:	2302      	movs	r3, #2
 8002810:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002816:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002818:	f107 030c 	add.w	r3, r7, #12
 800281c:	4618      	mov	r0, r3
 800281e:	f001 fb2f 	bl	8003e80 <HAL_RCCEx_PeriphCLKConfig>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002828:	f7ff ff80 	bl	800272c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800282c:	4b04      	ldr	r3, [pc, #16]	; (8002840 <HAL_RTC_MspInit+0x54>)
 800282e:	2201      	movs	r2, #1
 8002830:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002832:	bf00      	nop
 8002834:	3720      	adds	r7, #32
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40002800 	.word	0x40002800
 8002840:	42470e3c 	.word	0x42470e3c

08002844 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002848:	4b17      	ldr	r3, [pc, #92]	; (80028a8 <MX_SPI1_Init+0x64>)
 800284a:	4a18      	ldr	r2, [pc, #96]	; (80028ac <MX_SPI1_Init+0x68>)
 800284c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800284e:	4b16      	ldr	r3, [pc, #88]	; (80028a8 <MX_SPI1_Init+0x64>)
 8002850:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002854:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002856:	4b14      	ldr	r3, [pc, #80]	; (80028a8 <MX_SPI1_Init+0x64>)
 8002858:	2200      	movs	r2, #0
 800285a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800285c:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <MX_SPI1_Init+0x64>)
 800285e:	2200      	movs	r2, #0
 8002860:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002862:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <MX_SPI1_Init+0x64>)
 8002864:	2200      	movs	r2, #0
 8002866:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002868:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <MX_SPI1_Init+0x64>)
 800286a:	2200      	movs	r2, #0
 800286c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800286e:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <MX_SPI1_Init+0x64>)
 8002870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002874:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002876:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <MX_SPI1_Init+0x64>)
 8002878:	2200      	movs	r2, #0
 800287a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800287c:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <MX_SPI1_Init+0x64>)
 800287e:	2200      	movs	r2, #0
 8002880:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <MX_SPI1_Init+0x64>)
 8002884:	2200      	movs	r2, #0
 8002886:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002888:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <MX_SPI1_Init+0x64>)
 800288a:	2200      	movs	r2, #0
 800288c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800288e:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <MX_SPI1_Init+0x64>)
 8002890:	220a      	movs	r2, #10
 8002892:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002894:	4804      	ldr	r0, [pc, #16]	; (80028a8 <MX_SPI1_Init+0x64>)
 8002896:	f001 fedf 	bl	8004658 <HAL_SPI_Init>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80028a0:	f7ff ff44 	bl	800272c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028a4:	bf00      	nop
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	2000338c 	.word	0x2000338c
 80028ac:	40013000 	.word	0x40013000

080028b0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80028b4:	4b17      	ldr	r3, [pc, #92]	; (8002914 <MX_SPI2_Init+0x64>)
 80028b6:	4a18      	ldr	r2, [pc, #96]	; (8002918 <MX_SPI2_Init+0x68>)
 80028b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80028ba:	4b16      	ldr	r3, [pc, #88]	; (8002914 <MX_SPI2_Init+0x64>)
 80028bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80028c2:	4b14      	ldr	r3, [pc, #80]	; (8002914 <MX_SPI2_Init+0x64>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80028c8:	4b12      	ldr	r3, [pc, #72]	; (8002914 <MX_SPI2_Init+0x64>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028ce:	4b11      	ldr	r3, [pc, #68]	; (8002914 <MX_SPI2_Init+0x64>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028d4:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <MX_SPI2_Init+0x64>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80028da:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <MX_SPI2_Init+0x64>)
 80028dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028e2:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <MX_SPI2_Init+0x64>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028e8:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <MX_SPI2_Init+0x64>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80028ee:	4b09      	ldr	r3, [pc, #36]	; (8002914 <MX_SPI2_Init+0x64>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028f4:	4b07      	ldr	r3, [pc, #28]	; (8002914 <MX_SPI2_Init+0x64>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80028fa:	4b06      	ldr	r3, [pc, #24]	; (8002914 <MX_SPI2_Init+0x64>)
 80028fc:	220a      	movs	r2, #10
 80028fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002900:	4804      	ldr	r0, [pc, #16]	; (8002914 <MX_SPI2_Init+0x64>)
 8002902:	f001 fea9 	bl	8004658 <HAL_SPI_Init>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800290c:	f7ff ff0e 	bl	800272c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002910:	bf00      	nop
 8002912:	bd80      	pop	{r7, pc}
 8002914:	200033e4 	.word	0x200033e4
 8002918:	40003800 	.word	0x40003800

0800291c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08c      	sub	sp, #48	; 0x30
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	f107 031c 	add.w	r3, r7, #28
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a32      	ldr	r2, [pc, #200]	; (8002a04 <HAL_SPI_MspInit+0xe8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d12c      	bne.n	8002998 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	61bb      	str	r3, [r7, #24]
 8002942:	4b31      	ldr	r3, [pc, #196]	; (8002a08 <HAL_SPI_MspInit+0xec>)
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	4a30      	ldr	r2, [pc, #192]	; (8002a08 <HAL_SPI_MspInit+0xec>)
 8002948:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800294c:	6453      	str	r3, [r2, #68]	; 0x44
 800294e:	4b2e      	ldr	r3, [pc, #184]	; (8002a08 <HAL_SPI_MspInit+0xec>)
 8002950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002952:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002956:	61bb      	str	r3, [r7, #24]
 8002958:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	4b2a      	ldr	r3, [pc, #168]	; (8002a08 <HAL_SPI_MspInit+0xec>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	4a29      	ldr	r2, [pc, #164]	; (8002a08 <HAL_SPI_MspInit+0xec>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	6313      	str	r3, [r2, #48]	; 0x30
 800296a:	4b27      	ldr	r3, [pc, #156]	; (8002a08 <HAL_SPI_MspInit+0xec>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002976:	23e0      	movs	r3, #224	; 0xe0
 8002978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002982:	2303      	movs	r3, #3
 8002984:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002986:	2305      	movs	r3, #5
 8002988:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298a:	f107 031c 	add.w	r3, r7, #28
 800298e:	4619      	mov	r1, r3
 8002990:	481e      	ldr	r0, [pc, #120]	; (8002a0c <HAL_SPI_MspInit+0xf0>)
 8002992:	f000 fc7f 	bl	8003294 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002996:	e031      	b.n	80029fc <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1c      	ldr	r2, [pc, #112]	; (8002a10 <HAL_SPI_MspInit+0xf4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d12c      	bne.n	80029fc <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	4b18      	ldr	r3, [pc, #96]	; (8002a08 <HAL_SPI_MspInit+0xec>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	4a17      	ldr	r2, [pc, #92]	; (8002a08 <HAL_SPI_MspInit+0xec>)
 80029ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b0:	6413      	str	r3, [r2, #64]	; 0x40
 80029b2:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <HAL_SPI_MspInit+0xec>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ba:	613b      	str	r3, [r7, #16]
 80029bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <HAL_SPI_MspInit+0xec>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	4a10      	ldr	r2, [pc, #64]	; (8002a08 <HAL_SPI_MspInit+0xec>)
 80029c8:	f043 0302 	orr.w	r3, r3, #2
 80029cc:	6313      	str	r3, [r2, #48]	; 0x30
 80029ce:	4b0e      	ldr	r3, [pc, #56]	; (8002a08 <HAL_SPI_MspInit+0xec>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 80029da:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80029de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e0:	2302      	movs	r3, #2
 80029e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e8:	2303      	movs	r3, #3
 80029ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029ec:	2305      	movs	r3, #5
 80029ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f0:	f107 031c 	add.w	r3, r7, #28
 80029f4:	4619      	mov	r1, r3
 80029f6:	4807      	ldr	r0, [pc, #28]	; (8002a14 <HAL_SPI_MspInit+0xf8>)
 80029f8:	f000 fc4c 	bl	8003294 <HAL_GPIO_Init>
}
 80029fc:	bf00      	nop
 80029fe:	3730      	adds	r7, #48	; 0x30
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40013000 	.word	0x40013000
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40020000 	.word	0x40020000
 8002a10:	40003800 	.word	0x40003800
 8002a14:	40020400 	.word	0x40020400

08002a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	607b      	str	r3, [r7, #4]
 8002a22:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <HAL_MspInit+0x4c>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	4a0f      	ldr	r2, [pc, #60]	; (8002a64 <HAL_MspInit+0x4c>)
 8002a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <HAL_MspInit+0x4c>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a36:	607b      	str	r3, [r7, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	603b      	str	r3, [r7, #0]
 8002a3e:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <HAL_MspInit+0x4c>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	4a08      	ldr	r2, [pc, #32]	; (8002a64 <HAL_MspInit+0x4c>)
 8002a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a48:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4a:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <HAL_MspInit+0x4c>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40023800 	.word	0x40023800

08002a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a6c:	e7fe      	b.n	8002a6c <NMI_Handler+0x4>

08002a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a72:	e7fe      	b.n	8002a72 <HardFault_Handler+0x4>

08002a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a78:	e7fe      	b.n	8002a78 <MemManage_Handler+0x4>

08002a7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a7e:	e7fe      	b.n	8002a7e <BusFault_Handler+0x4>

08002a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a84:	e7fe      	b.n	8002a84 <UsageFault_Handler+0x4>

08002a86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a86:	b480      	push	{r7}
 8002a88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (Timer1 > 0) Timer1--;
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <SysTick_Handler+0x34>)
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <SysTick_Handler+0x18>
 8002abc:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <SysTick_Handler+0x34>)
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	4b07      	ldr	r3, [pc, #28]	; (8002ae4 <SysTick_Handler+0x34>)
 8002ac6:	801a      	strh	r2, [r3, #0]
	if (Timer2 > 0) Timer2--;
 8002ac8:	4b07      	ldr	r3, [pc, #28]	; (8002ae8 <SysTick_Handler+0x38>)
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <SysTick_Handler+0x2c>
 8002ad0:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <SysTick_Handler+0x38>)
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	4b03      	ldr	r3, [pc, #12]	; (8002ae8 <SysTick_Handler+0x38>)
 8002ada:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002adc:	f000 fa84 	bl	8002fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ae0:	bf00      	nop
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	2000012c 	.word	0x2000012c
 8002ae8:	2000012e 	.word	0x2000012e

08002aec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002af0:	4802      	ldr	r0, [pc, #8]	; (8002afc <TIM3_IRQHandler+0x10>)
 8002af2:	f002 fc0b 	bl	800530c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20003440 	.word	0x20003440

08002b00 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b04:	4802      	ldr	r0, [pc, #8]	; (8002b10 <TIM4_IRQHandler+0x10>)
 8002b06:	f002 fc01 	bl	800530c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20003488 	.word	0x20003488

08002b14 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	e00a      	b.n	8002b3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b26:	f3af 8000 	nop.w
 8002b2a:	4601      	mov	r1, r0
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	60ba      	str	r2, [r7, #8]
 8002b32:	b2ca      	uxtb	r2, r1
 8002b34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	617b      	str	r3, [r7, #20]
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	dbf0      	blt.n	8002b26 <_read+0x12>
	}

return len;
 8002b44:	687b      	ldr	r3, [r7, #4]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <_close>:
	}
	return len;
}

int _close(int file)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
	return -1;
 8002b56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b76:	605a      	str	r2, [r3, #4]
	return 0;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <_isatty>:

int _isatty(int file)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
	return 1;
 8002b8e:	2301      	movs	r3, #1
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
	return 0;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
	...

08002bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bc0:	4a14      	ldr	r2, [pc, #80]	; (8002c14 <_sbrk+0x5c>)
 8002bc2:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <_sbrk+0x60>)
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bcc:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <_sbrk+0x64>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d102      	bne.n	8002bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bd4:	4b11      	ldr	r3, [pc, #68]	; (8002c1c <_sbrk+0x64>)
 8002bd6:	4a12      	ldr	r2, [pc, #72]	; (8002c20 <_sbrk+0x68>)
 8002bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bda:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <_sbrk+0x64>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4413      	add	r3, r2
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d207      	bcs.n	8002bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002be8:	f00b f8aa 	bl	800dd40 <__errno>
 8002bec:	4603      	mov	r3, r0
 8002bee:	220c      	movs	r2, #12
 8002bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf6:	e009      	b.n	8002c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bf8:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <_sbrk+0x64>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bfe:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <_sbrk+0x64>)
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4413      	add	r3, r2
 8002c06:	4a05      	ldr	r2, [pc, #20]	; (8002c1c <_sbrk+0x64>)
 8002c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	20010000 	.word	0x20010000
 8002c18:	00000400 	.word	0x00000400
 8002c1c:	2000343c 	.word	0x2000343c
 8002c20:	20003808 	.word	0x20003808

08002c24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <SystemInit+0x20>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2e:	4a05      	ldr	r2, [pc, #20]	; (8002c44 <SystemInit+0x20>)
 8002c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c4e:	f107 0308 	add.w	r3, r7, #8
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	609a      	str	r2, [r3, #8]
 8002c5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c5c:	463b      	mov	r3, r7
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c64:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <MX_TIM3_Init+0x94>)
 8002c66:	4a1e      	ldr	r2, [pc, #120]	; (8002ce0 <MX_TIM3_Init+0x98>)
 8002c68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5-1;
 8002c6a:	4b1c      	ldr	r3, [pc, #112]	; (8002cdc <MX_TIM3_Init+0x94>)
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c70:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <MX_TIM3_Init+0x94>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 25000-1;
 8002c76:	4b19      	ldr	r3, [pc, #100]	; (8002cdc <MX_TIM3_Init+0x94>)
 8002c78:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8002c7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c7e:	4b17      	ldr	r3, [pc, #92]	; (8002cdc <MX_TIM3_Init+0x94>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c84:	4b15      	ldr	r3, [pc, #84]	; (8002cdc <MX_TIM3_Init+0x94>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c8a:	4814      	ldr	r0, [pc, #80]	; (8002cdc <MX_TIM3_Init+0x94>)
 8002c8c:	f002 fa8c 	bl	80051a8 <HAL_TIM_Base_Init>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002c96:	f7ff fd49 	bl	800272c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ca0:	f107 0308 	add.w	r3, r7, #8
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	480d      	ldr	r0, [pc, #52]	; (8002cdc <MX_TIM3_Init+0x94>)
 8002ca8:	f002 fc38 	bl	800551c <HAL_TIM_ConfigClockSource>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002cb2:	f7ff fd3b 	bl	800272c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002cbe:	463b      	mov	r3, r7
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4806      	ldr	r0, [pc, #24]	; (8002cdc <MX_TIM3_Init+0x94>)
 8002cc4:	f002 fe34 	bl	8005930 <HAL_TIMEx_MasterConfigSynchronization>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002cce:	f7ff fd2d 	bl	800272c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002cd2:	bf00      	nop
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20003440 	.word	0x20003440
 8002ce0:	40000400 	.word	0x40000400

08002ce4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cea:	f107 0308 	add.w	r3, r7, #8
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	605a      	str	r2, [r3, #4]
 8002cf4:	609a      	str	r2, [r3, #8]
 8002cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cf8:	463b      	mov	r3, r7
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002d00:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <MX_TIM4_Init+0x94>)
 8002d02:	4a1e      	ldr	r2, [pc, #120]	; (8002d7c <MX_TIM4_Init+0x98>)
 8002d04:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000-1;
 8002d06:	4b1c      	ldr	r3, [pc, #112]	; (8002d78 <MX_TIM4_Init+0x94>)
 8002d08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d0c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d0e:	4b1a      	ldr	r3, [pc, #104]	; (8002d78 <MX_TIM4_Init+0x94>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 25000-1;
 8002d14:	4b18      	ldr	r3, [pc, #96]	; (8002d78 <MX_TIM4_Init+0x94>)
 8002d16:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8002d1a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d1c:	4b16      	ldr	r3, [pc, #88]	; (8002d78 <MX_TIM4_Init+0x94>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d22:	4b15      	ldr	r3, [pc, #84]	; (8002d78 <MX_TIM4_Init+0x94>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002d28:	4813      	ldr	r0, [pc, #76]	; (8002d78 <MX_TIM4_Init+0x94>)
 8002d2a:	f002 fa3d 	bl	80051a8 <HAL_TIM_Base_Init>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002d34:	f7ff fcfa 	bl	800272c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002d3e:	f107 0308 	add.w	r3, r7, #8
 8002d42:	4619      	mov	r1, r3
 8002d44:	480c      	ldr	r0, [pc, #48]	; (8002d78 <MX_TIM4_Init+0x94>)
 8002d46:	f002 fbe9 	bl	800551c <HAL_TIM_ConfigClockSource>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002d50:	f7ff fcec 	bl	800272c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d54:	2300      	movs	r3, #0
 8002d56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d5c:	463b      	mov	r3, r7
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4805      	ldr	r0, [pc, #20]	; (8002d78 <MX_TIM4_Init+0x94>)
 8002d62:	f002 fde5 	bl	8005930 <HAL_TIMEx_MasterConfigSynchronization>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002d6c:	f7ff fcde 	bl	800272c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002d70:	bf00      	nop
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20003488 	.word	0x20003488
 8002d7c:	40000800 	.word	0x40000800

08002d80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a1c      	ldr	r2, [pc, #112]	; (8002e00 <HAL_TIM_Base_MspInit+0x80>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d116      	bne.n	8002dc0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	4b1b      	ldr	r3, [pc, #108]	; (8002e04 <HAL_TIM_Base_MspInit+0x84>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	4a1a      	ldr	r2, [pc, #104]	; (8002e04 <HAL_TIM_Base_MspInit+0x84>)
 8002d9c:	f043 0302 	orr.w	r3, r3, #2
 8002da0:	6413      	str	r3, [r2, #64]	; 0x40
 8002da2:	4b18      	ldr	r3, [pc, #96]	; (8002e04 <HAL_TIM_Base_MspInit+0x84>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002dae:	2200      	movs	r2, #0
 8002db0:	2101      	movs	r1, #1
 8002db2:	201d      	movs	r0, #29
 8002db4:	f000 fa37 	bl	8003226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002db8:	201d      	movs	r0, #29
 8002dba:	f000 fa50 	bl	800325e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002dbe:	e01a      	b.n	8002df6 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a10      	ldr	r2, [pc, #64]	; (8002e08 <HAL_TIM_Base_MspInit+0x88>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d115      	bne.n	8002df6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	4b0d      	ldr	r3, [pc, #52]	; (8002e04 <HAL_TIM_Base_MspInit+0x84>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	4a0c      	ldr	r2, [pc, #48]	; (8002e04 <HAL_TIM_Base_MspInit+0x84>)
 8002dd4:	f043 0304 	orr.w	r3, r3, #4
 8002dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dda:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <HAL_TIM_Base_MspInit+0x84>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	60bb      	str	r3, [r7, #8]
 8002de4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002de6:	2200      	movs	r2, #0
 8002de8:	2101      	movs	r1, #1
 8002dea:	201e      	movs	r0, #30
 8002dec:	f000 fa1b 	bl	8003226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002df0:	201e      	movs	r0, #30
 8002df2:	f000 fa34 	bl	800325e <HAL_NVIC_EnableIRQ>
}
 8002df6:	bf00      	nop
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40000400 	.word	0x40000400
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40000800 	.word	0x40000800

08002e0c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e10:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <MX_USART1_UART_Init+0x4c>)
 8002e12:	4a12      	ldr	r2, [pc, #72]	; (8002e5c <MX_USART1_UART_Init+0x50>)
 8002e14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <MX_USART1_UART_Init+0x4c>)
 8002e18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e1e:	4b0e      	ldr	r3, [pc, #56]	; (8002e58 <MX_USART1_UART_Init+0x4c>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e24:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <MX_USART1_UART_Init+0x4c>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e2a:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <MX_USART1_UART_Init+0x4c>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e30:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <MX_USART1_UART_Init+0x4c>)
 8002e32:	220c      	movs	r2, #12
 8002e34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e36:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <MX_USART1_UART_Init+0x4c>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <MX_USART1_UART_Init+0x4c>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e42:	4805      	ldr	r0, [pc, #20]	; (8002e58 <MX_USART1_UART_Init+0x4c>)
 8002e44:	f002 fdf6 	bl	8005a34 <HAL_UART_Init>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002e4e:	f7ff fc6d 	bl	800272c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	200034d0 	.word	0x200034d0
 8002e5c:	40011000 	.word	0x40011000

08002e60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08a      	sub	sp, #40	; 0x28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e68:	f107 0314 	add.w	r3, r7, #20
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	60da      	str	r2, [r3, #12]
 8002e76:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a19      	ldr	r2, [pc, #100]	; (8002ee4 <HAL_UART_MspInit+0x84>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d12c      	bne.n	8002edc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	4b18      	ldr	r3, [pc, #96]	; (8002ee8 <HAL_UART_MspInit+0x88>)
 8002e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8a:	4a17      	ldr	r2, [pc, #92]	; (8002ee8 <HAL_UART_MspInit+0x88>)
 8002e8c:	f043 0310 	orr.w	r3, r3, #16
 8002e90:	6453      	str	r3, [r2, #68]	; 0x44
 8002e92:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <HAL_UART_MspInit+0x88>)
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	f003 0310 	and.w	r3, r3, #16
 8002e9a:	613b      	str	r3, [r7, #16]
 8002e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <HAL_UART_MspInit+0x88>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	4a10      	ldr	r2, [pc, #64]	; (8002ee8 <HAL_UART_MspInit+0x88>)
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	6313      	str	r3, [r2, #48]	; 0x30
 8002eae:	4b0e      	ldr	r3, [pc, #56]	; (8002ee8 <HAL_UART_MspInit+0x88>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002eba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ecc:	2307      	movs	r3, #7
 8002ece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed0:	f107 0314 	add.w	r3, r7, #20
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4805      	ldr	r0, [pc, #20]	; (8002eec <HAL_UART_MspInit+0x8c>)
 8002ed8:	f000 f9dc 	bl	8003294 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002edc:	bf00      	nop
 8002ede:	3728      	adds	r7, #40	; 0x28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40011000 	.word	0x40011000
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	40020000 	.word	0x40020000

08002ef0 <Reset_Handler>:
 8002ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f28 <LoopFillZerobss+0x12>
 8002ef4:	480d      	ldr	r0, [pc, #52]	; (8002f2c <LoopFillZerobss+0x16>)
 8002ef6:	490e      	ldr	r1, [pc, #56]	; (8002f30 <LoopFillZerobss+0x1a>)
 8002ef8:	4a0e      	ldr	r2, [pc, #56]	; (8002f34 <LoopFillZerobss+0x1e>)
 8002efa:	2300      	movs	r3, #0
 8002efc:	e002      	b.n	8002f04 <LoopCopyDataInit>

08002efe <CopyDataInit>:
 8002efe:	58d4      	ldr	r4, [r2, r3]
 8002f00:	50c4      	str	r4, [r0, r3]
 8002f02:	3304      	adds	r3, #4

08002f04 <LoopCopyDataInit>:
 8002f04:	18c4      	adds	r4, r0, r3
 8002f06:	428c      	cmp	r4, r1
 8002f08:	d3f9      	bcc.n	8002efe <CopyDataInit>
 8002f0a:	4a0b      	ldr	r2, [pc, #44]	; (8002f38 <LoopFillZerobss+0x22>)
 8002f0c:	4c0b      	ldr	r4, [pc, #44]	; (8002f3c <LoopFillZerobss+0x26>)
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e001      	b.n	8002f16 <LoopFillZerobss>

08002f12 <FillZerobss>:
 8002f12:	6013      	str	r3, [r2, #0]
 8002f14:	3204      	adds	r2, #4

08002f16 <LoopFillZerobss>:
 8002f16:	42a2      	cmp	r2, r4
 8002f18:	d3fb      	bcc.n	8002f12 <FillZerobss>
 8002f1a:	f7ff fe83 	bl	8002c24 <SystemInit>
 8002f1e:	f00a ff15 	bl	800dd4c <__libc_init_array>
 8002f22:	f7fe f8b1 	bl	8001088 <main>
 8002f26:	4770      	bx	lr
 8002f28:	20010000 	.word	0x20010000
 8002f2c:	20000000 	.word	0x20000000
 8002f30:	20000110 	.word	0x20000110
 8002f34:	0800ffd4 	.word	0x0800ffd4
 8002f38:	20000110 	.word	0x20000110
 8002f3c:	20003808 	.word	0x20003808

08002f40 <ADC_IRQHandler>:
 8002f40:	e7fe      	b.n	8002f40 <ADC_IRQHandler>
	...

08002f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f48:	4b0e      	ldr	r3, [pc, #56]	; (8002f84 <HAL_Init+0x40>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a0d      	ldr	r2, [pc, #52]	; (8002f84 <HAL_Init+0x40>)
 8002f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f54:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <HAL_Init+0x40>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a0a      	ldr	r2, [pc, #40]	; (8002f84 <HAL_Init+0x40>)
 8002f5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f60:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <HAL_Init+0x40>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a07      	ldr	r2, [pc, #28]	; (8002f84 <HAL_Init+0x40>)
 8002f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f6c:	2003      	movs	r0, #3
 8002f6e:	f000 f94f 	bl	8003210 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f72:	2000      	movs	r0, #0
 8002f74:	f000 f808 	bl	8002f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f78:	f7ff fd4e 	bl	8002a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40023c00 	.word	0x40023c00

08002f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f90:	4b12      	ldr	r3, [pc, #72]	; (8002fdc <HAL_InitTick+0x54>)
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <HAL_InitTick+0x58>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	4619      	mov	r1, r3
 8002f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 f967 	bl	800327a <HAL_SYSTICK_Config>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e00e      	b.n	8002fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b0f      	cmp	r3, #15
 8002fba:	d80a      	bhi.n	8002fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc4:	f000 f92f 	bl	8003226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fc8:	4a06      	ldr	r2, [pc, #24]	; (8002fe4 <HAL_InitTick+0x5c>)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	e000      	b.n	8002fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	2000005c 	.word	0x2000005c
 8002fe0:	20000064 	.word	0x20000064
 8002fe4:	20000060 	.word	0x20000060

08002fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fec:	4b06      	ldr	r3, [pc, #24]	; (8003008 <HAL_IncTick+0x20>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	4b06      	ldr	r3, [pc, #24]	; (800300c <HAL_IncTick+0x24>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	4a04      	ldr	r2, [pc, #16]	; (800300c <HAL_IncTick+0x24>)
 8002ffa:	6013      	str	r3, [r2, #0]
}
 8002ffc:	bf00      	nop
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	20000064 	.word	0x20000064
 800300c:	20003514 	.word	0x20003514

08003010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  return uwTick;
 8003014:	4b03      	ldr	r3, [pc, #12]	; (8003024 <HAL_GetTick+0x14>)
 8003016:	681b      	ldr	r3, [r3, #0]
}
 8003018:	4618      	mov	r0, r3
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	20003514 	.word	0x20003514

08003028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003030:	f7ff ffee 	bl	8003010 <HAL_GetTick>
 8003034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003040:	d005      	beq.n	800304e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003042:	4b0a      	ldr	r3, [pc, #40]	; (800306c <HAL_Delay+0x44>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4413      	add	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800304e:	bf00      	nop
 8003050:	f7ff ffde 	bl	8003010 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	429a      	cmp	r2, r3
 800305e:	d8f7      	bhi.n	8003050 <HAL_Delay+0x28>
  {
  }
}
 8003060:	bf00      	nop
 8003062:	bf00      	nop
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20000064 	.word	0x20000064

08003070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003080:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800308c:	4013      	ands	r3, r2
 800308e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800309c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030a2:	4a04      	ldr	r2, [pc, #16]	; (80030b4 <__NVIC_SetPriorityGrouping+0x44>)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	60d3      	str	r3, [r2, #12]
}
 80030a8:	bf00      	nop
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	e000ed00 	.word	0xe000ed00

080030b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030bc:	4b04      	ldr	r3, [pc, #16]	; (80030d0 <__NVIC_GetPriorityGrouping+0x18>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	0a1b      	lsrs	r3, r3, #8
 80030c2:	f003 0307 	and.w	r3, r3, #7
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	db0b      	blt.n	80030fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	f003 021f 	and.w	r2, r3, #31
 80030ec:	4907      	ldr	r1, [pc, #28]	; (800310c <__NVIC_EnableIRQ+0x38>)
 80030ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	2001      	movs	r0, #1
 80030f6:	fa00 f202 	lsl.w	r2, r0, r2
 80030fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	e000e100 	.word	0xe000e100

08003110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	6039      	str	r1, [r7, #0]
 800311a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800311c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003120:	2b00      	cmp	r3, #0
 8003122:	db0a      	blt.n	800313a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	b2da      	uxtb	r2, r3
 8003128:	490c      	ldr	r1, [pc, #48]	; (800315c <__NVIC_SetPriority+0x4c>)
 800312a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312e:	0112      	lsls	r2, r2, #4
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	440b      	add	r3, r1
 8003134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003138:	e00a      	b.n	8003150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	b2da      	uxtb	r2, r3
 800313e:	4908      	ldr	r1, [pc, #32]	; (8003160 <__NVIC_SetPriority+0x50>)
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	3b04      	subs	r3, #4
 8003148:	0112      	lsls	r2, r2, #4
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	440b      	add	r3, r1
 800314e:	761a      	strb	r2, [r3, #24]
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	e000e100 	.word	0xe000e100
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003164:	b480      	push	{r7}
 8003166:	b089      	sub	sp, #36	; 0x24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f1c3 0307 	rsb	r3, r3, #7
 800317e:	2b04      	cmp	r3, #4
 8003180:	bf28      	it	cs
 8003182:	2304      	movcs	r3, #4
 8003184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3304      	adds	r3, #4
 800318a:	2b06      	cmp	r3, #6
 800318c:	d902      	bls.n	8003194 <NVIC_EncodePriority+0x30>
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	3b03      	subs	r3, #3
 8003192:	e000      	b.n	8003196 <NVIC_EncodePriority+0x32>
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003198:	f04f 32ff 	mov.w	r2, #4294967295
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43da      	mvns	r2, r3
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	401a      	ands	r2, r3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031ac:	f04f 31ff 	mov.w	r1, #4294967295
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	fa01 f303 	lsl.w	r3, r1, r3
 80031b6:	43d9      	mvns	r1, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031bc:	4313      	orrs	r3, r2
         );
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3724      	adds	r7, #36	; 0x24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
	...

080031cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031dc:	d301      	bcc.n	80031e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031de:	2301      	movs	r3, #1
 80031e0:	e00f      	b.n	8003202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031e2:	4a0a      	ldr	r2, [pc, #40]	; (800320c <SysTick_Config+0x40>)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ea:	210f      	movs	r1, #15
 80031ec:	f04f 30ff 	mov.w	r0, #4294967295
 80031f0:	f7ff ff8e 	bl	8003110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031f4:	4b05      	ldr	r3, [pc, #20]	; (800320c <SysTick_Config+0x40>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031fa:	4b04      	ldr	r3, [pc, #16]	; (800320c <SysTick_Config+0x40>)
 80031fc:	2207      	movs	r2, #7
 80031fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	e000e010 	.word	0xe000e010

08003210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff ff29 	bl	8003070 <__NVIC_SetPriorityGrouping>
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003226:	b580      	push	{r7, lr}
 8003228:	b086      	sub	sp, #24
 800322a:	af00      	add	r7, sp, #0
 800322c:	4603      	mov	r3, r0
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	607a      	str	r2, [r7, #4]
 8003232:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003238:	f7ff ff3e 	bl	80030b8 <__NVIC_GetPriorityGrouping>
 800323c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	6978      	ldr	r0, [r7, #20]
 8003244:	f7ff ff8e 	bl	8003164 <NVIC_EncodePriority>
 8003248:	4602      	mov	r2, r0
 800324a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800324e:	4611      	mov	r1, r2
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff ff5d 	bl	8003110 <__NVIC_SetPriority>
}
 8003256:	bf00      	nop
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	4603      	mov	r3, r0
 8003266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff ff31 	bl	80030d4 <__NVIC_EnableIRQ>
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff ffa2 	bl	80031cc <SysTick_Config>
 8003288:	4603      	mov	r3, r0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003294:	b480      	push	{r7}
 8003296:	b089      	sub	sp, #36	; 0x24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032aa:	2300      	movs	r3, #0
 80032ac:	61fb      	str	r3, [r7, #28]
 80032ae:	e159      	b.n	8003564 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032b0:	2201      	movs	r2, #1
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4013      	ands	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	f040 8148 	bne.w	800355e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d005      	beq.n	80032e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d130      	bne.n	8003348 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	2203      	movs	r2, #3
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43db      	mvns	r3, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4013      	ands	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4313      	orrs	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800331c:	2201      	movs	r2, #1
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	091b      	lsrs	r3, r3, #4
 8003332:	f003 0201 	and.w	r2, r3, #1
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4313      	orrs	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	2b03      	cmp	r3, #3
 8003352:	d017      	beq.n	8003384 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	2203      	movs	r2, #3
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	43db      	mvns	r3, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4013      	ands	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 0303 	and.w	r3, r3, #3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d123      	bne.n	80033d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	08da      	lsrs	r2, r3, #3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3208      	adds	r2, #8
 8003398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800339c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	220f      	movs	r2, #15
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4013      	ands	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	08da      	lsrs	r2, r3, #3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3208      	adds	r2, #8
 80033d2:	69b9      	ldr	r1, [r7, #24]
 80033d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	2203      	movs	r2, #3
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	43db      	mvns	r3, r3
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4013      	ands	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f003 0203 	and.w	r2, r3, #3
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4313      	orrs	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 80a2 	beq.w	800355e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800341a:	2300      	movs	r3, #0
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	4b57      	ldr	r3, [pc, #348]	; (800357c <HAL_GPIO_Init+0x2e8>)
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	4a56      	ldr	r2, [pc, #344]	; (800357c <HAL_GPIO_Init+0x2e8>)
 8003424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003428:	6453      	str	r3, [r2, #68]	; 0x44
 800342a:	4b54      	ldr	r3, [pc, #336]	; (800357c <HAL_GPIO_Init+0x2e8>)
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003436:	4a52      	ldr	r2, [pc, #328]	; (8003580 <HAL_GPIO_Init+0x2ec>)
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	089b      	lsrs	r3, r3, #2
 800343c:	3302      	adds	r3, #2
 800343e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	220f      	movs	r2, #15
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43db      	mvns	r3, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4013      	ands	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a49      	ldr	r2, [pc, #292]	; (8003584 <HAL_GPIO_Init+0x2f0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d019      	beq.n	8003496 <HAL_GPIO_Init+0x202>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a48      	ldr	r2, [pc, #288]	; (8003588 <HAL_GPIO_Init+0x2f4>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d013      	beq.n	8003492 <HAL_GPIO_Init+0x1fe>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a47      	ldr	r2, [pc, #284]	; (800358c <HAL_GPIO_Init+0x2f8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00d      	beq.n	800348e <HAL_GPIO_Init+0x1fa>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a46      	ldr	r2, [pc, #280]	; (8003590 <HAL_GPIO_Init+0x2fc>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d007      	beq.n	800348a <HAL_GPIO_Init+0x1f6>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a45      	ldr	r2, [pc, #276]	; (8003594 <HAL_GPIO_Init+0x300>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d101      	bne.n	8003486 <HAL_GPIO_Init+0x1f2>
 8003482:	2304      	movs	r3, #4
 8003484:	e008      	b.n	8003498 <HAL_GPIO_Init+0x204>
 8003486:	2307      	movs	r3, #7
 8003488:	e006      	b.n	8003498 <HAL_GPIO_Init+0x204>
 800348a:	2303      	movs	r3, #3
 800348c:	e004      	b.n	8003498 <HAL_GPIO_Init+0x204>
 800348e:	2302      	movs	r3, #2
 8003490:	e002      	b.n	8003498 <HAL_GPIO_Init+0x204>
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <HAL_GPIO_Init+0x204>
 8003496:	2300      	movs	r3, #0
 8003498:	69fa      	ldr	r2, [r7, #28]
 800349a:	f002 0203 	and.w	r2, r2, #3
 800349e:	0092      	lsls	r2, r2, #2
 80034a0:	4093      	lsls	r3, r2
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034a8:	4935      	ldr	r1, [pc, #212]	; (8003580 <HAL_GPIO_Init+0x2ec>)
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	089b      	lsrs	r3, r3, #2
 80034ae:	3302      	adds	r3, #2
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034b6:	4b38      	ldr	r3, [pc, #224]	; (8003598 <HAL_GPIO_Init+0x304>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	43db      	mvns	r3, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4013      	ands	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034da:	4a2f      	ldr	r2, [pc, #188]	; (8003598 <HAL_GPIO_Init+0x304>)
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034e0:	4b2d      	ldr	r3, [pc, #180]	; (8003598 <HAL_GPIO_Init+0x304>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	43db      	mvns	r3, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4013      	ands	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003504:	4a24      	ldr	r2, [pc, #144]	; (8003598 <HAL_GPIO_Init+0x304>)
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800350a:	4b23      	ldr	r3, [pc, #140]	; (8003598 <HAL_GPIO_Init+0x304>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	43db      	mvns	r3, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4013      	ands	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800352e:	4a1a      	ldr	r2, [pc, #104]	; (8003598 <HAL_GPIO_Init+0x304>)
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003534:	4b18      	ldr	r3, [pc, #96]	; (8003598 <HAL_GPIO_Init+0x304>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	43db      	mvns	r3, r3
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4013      	ands	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003558:	4a0f      	ldr	r2, [pc, #60]	; (8003598 <HAL_GPIO_Init+0x304>)
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	3301      	adds	r3, #1
 8003562:	61fb      	str	r3, [r7, #28]
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	2b0f      	cmp	r3, #15
 8003568:	f67f aea2 	bls.w	80032b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800356c:	bf00      	nop
 800356e:	bf00      	nop
 8003570:	3724      	adds	r7, #36	; 0x24
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40023800 	.word	0x40023800
 8003580:	40013800 	.word	0x40013800
 8003584:	40020000 	.word	0x40020000
 8003588:	40020400 	.word	0x40020400
 800358c:	40020800 	.word	0x40020800
 8003590:	40020c00 	.word	0x40020c00
 8003594:	40021000 	.word	0x40021000
 8003598:	40013c00 	.word	0x40013c00

0800359c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	807b      	strh	r3, [r7, #2]
 80035a8:	4613      	mov	r3, r2
 80035aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035ac:	787b      	ldrb	r3, [r7, #1]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035b2:	887a      	ldrh	r2, [r7, #2]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035b8:	e003      	b.n	80035c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035ba:	887b      	ldrh	r3, [r7, #2]
 80035bc:	041a      	lsls	r2, r3, #16
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	619a      	str	r2, [r3, #24]
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
	...

080035d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e267      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d075      	beq.n	80036da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035ee:	4b88      	ldr	r3, [pc, #544]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 030c 	and.w	r3, r3, #12
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d00c      	beq.n	8003614 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035fa:	4b85      	ldr	r3, [pc, #532]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003602:	2b08      	cmp	r3, #8
 8003604:	d112      	bne.n	800362c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003606:	4b82      	ldr	r3, [pc, #520]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800360e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003612:	d10b      	bne.n	800362c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003614:	4b7e      	ldr	r3, [pc, #504]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d05b      	beq.n	80036d8 <HAL_RCC_OscConfig+0x108>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d157      	bne.n	80036d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e242      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003634:	d106      	bne.n	8003644 <HAL_RCC_OscConfig+0x74>
 8003636:	4b76      	ldr	r3, [pc, #472]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a75      	ldr	r2, [pc, #468]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 800363c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	e01d      	b.n	8003680 <HAL_RCC_OscConfig+0xb0>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800364c:	d10c      	bne.n	8003668 <HAL_RCC_OscConfig+0x98>
 800364e:	4b70      	ldr	r3, [pc, #448]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a6f      	ldr	r2, [pc, #444]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	4b6d      	ldr	r3, [pc, #436]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a6c      	ldr	r2, [pc, #432]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	e00b      	b.n	8003680 <HAL_RCC_OscConfig+0xb0>
 8003668:	4b69      	ldr	r3, [pc, #420]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a68      	ldr	r2, [pc, #416]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 800366e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	4b66      	ldr	r3, [pc, #408]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a65      	ldr	r2, [pc, #404]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 800367a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800367e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d013      	beq.n	80036b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003688:	f7ff fcc2 	bl	8003010 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003690:	f7ff fcbe 	bl	8003010 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b64      	cmp	r3, #100	; 0x64
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e207      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a2:	4b5b      	ldr	r3, [pc, #364]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0f0      	beq.n	8003690 <HAL_RCC_OscConfig+0xc0>
 80036ae:	e014      	b.n	80036da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b0:	f7ff fcae 	bl	8003010 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036b8:	f7ff fcaa 	bl	8003010 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b64      	cmp	r3, #100	; 0x64
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e1f3      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ca:	4b51      	ldr	r3, [pc, #324]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f0      	bne.n	80036b8 <HAL_RCC_OscConfig+0xe8>
 80036d6:	e000      	b.n	80036da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d063      	beq.n	80037ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036e6:	4b4a      	ldr	r3, [pc, #296]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00b      	beq.n	800370a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036f2:	4b47      	ldr	r3, [pc, #284]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d11c      	bne.n	8003738 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036fe:	4b44      	ldr	r3, [pc, #272]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d116      	bne.n	8003738 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800370a:	4b41      	ldr	r3, [pc, #260]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d005      	beq.n	8003722 <HAL_RCC_OscConfig+0x152>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d001      	beq.n	8003722 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e1c7      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003722:	4b3b      	ldr	r3, [pc, #236]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	4937      	ldr	r1, [pc, #220]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003732:	4313      	orrs	r3, r2
 8003734:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003736:	e03a      	b.n	80037ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d020      	beq.n	8003782 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003740:	4b34      	ldr	r3, [pc, #208]	; (8003814 <HAL_RCC_OscConfig+0x244>)
 8003742:	2201      	movs	r2, #1
 8003744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003746:	f7ff fc63 	bl	8003010 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800374e:	f7ff fc5f 	bl	8003010 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e1a8      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003760:	4b2b      	ldr	r3, [pc, #172]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f0      	beq.n	800374e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800376c:	4b28      	ldr	r3, [pc, #160]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4925      	ldr	r1, [pc, #148]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 800377c:	4313      	orrs	r3, r2
 800377e:	600b      	str	r3, [r1, #0]
 8003780:	e015      	b.n	80037ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003782:	4b24      	ldr	r3, [pc, #144]	; (8003814 <HAL_RCC_OscConfig+0x244>)
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003788:	f7ff fc42 	bl	8003010 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003790:	f7ff fc3e 	bl	8003010 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e187      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a2:	4b1b      	ldr	r3, [pc, #108]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d036      	beq.n	8003828 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d016      	beq.n	80037f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037c2:	4b15      	ldr	r3, [pc, #84]	; (8003818 <HAL_RCC_OscConfig+0x248>)
 80037c4:	2201      	movs	r2, #1
 80037c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c8:	f7ff fc22 	bl	8003010 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037d0:	f7ff fc1e 	bl	8003010 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e167      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e2:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 80037e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f0      	beq.n	80037d0 <HAL_RCC_OscConfig+0x200>
 80037ee:	e01b      	b.n	8003828 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037f0:	4b09      	ldr	r3, [pc, #36]	; (8003818 <HAL_RCC_OscConfig+0x248>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f6:	f7ff fc0b 	bl	8003010 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037fc:	e00e      	b.n	800381c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037fe:	f7ff fc07 	bl	8003010 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d907      	bls.n	800381c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e150      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
 8003810:	40023800 	.word	0x40023800
 8003814:	42470000 	.word	0x42470000
 8003818:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800381c:	4b88      	ldr	r3, [pc, #544]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 800381e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1ea      	bne.n	80037fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 8097 	beq.w	8003964 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003836:	2300      	movs	r3, #0
 8003838:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800383a:	4b81      	ldr	r3, [pc, #516]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10f      	bne.n	8003866 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003846:	2300      	movs	r3, #0
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	4b7d      	ldr	r3, [pc, #500]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	4a7c      	ldr	r2, [pc, #496]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 8003850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003854:	6413      	str	r3, [r2, #64]	; 0x40
 8003856:	4b7a      	ldr	r3, [pc, #488]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385e:	60bb      	str	r3, [r7, #8]
 8003860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003862:	2301      	movs	r3, #1
 8003864:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003866:	4b77      	ldr	r3, [pc, #476]	; (8003a44 <HAL_RCC_OscConfig+0x474>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386e:	2b00      	cmp	r3, #0
 8003870:	d118      	bne.n	80038a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003872:	4b74      	ldr	r3, [pc, #464]	; (8003a44 <HAL_RCC_OscConfig+0x474>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a73      	ldr	r2, [pc, #460]	; (8003a44 <HAL_RCC_OscConfig+0x474>)
 8003878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800387c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800387e:	f7ff fbc7 	bl	8003010 <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003884:	e008      	b.n	8003898 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003886:	f7ff fbc3 	bl	8003010 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e10c      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003898:	4b6a      	ldr	r3, [pc, #424]	; (8003a44 <HAL_RCC_OscConfig+0x474>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0f0      	beq.n	8003886 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d106      	bne.n	80038ba <HAL_RCC_OscConfig+0x2ea>
 80038ac:	4b64      	ldr	r3, [pc, #400]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b0:	4a63      	ldr	r2, [pc, #396]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038b2:	f043 0301 	orr.w	r3, r3, #1
 80038b6:	6713      	str	r3, [r2, #112]	; 0x70
 80038b8:	e01c      	b.n	80038f4 <HAL_RCC_OscConfig+0x324>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b05      	cmp	r3, #5
 80038c0:	d10c      	bne.n	80038dc <HAL_RCC_OscConfig+0x30c>
 80038c2:	4b5f      	ldr	r3, [pc, #380]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c6:	4a5e      	ldr	r2, [pc, #376]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038c8:	f043 0304 	orr.w	r3, r3, #4
 80038cc:	6713      	str	r3, [r2, #112]	; 0x70
 80038ce:	4b5c      	ldr	r3, [pc, #368]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d2:	4a5b      	ldr	r2, [pc, #364]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	6713      	str	r3, [r2, #112]	; 0x70
 80038da:	e00b      	b.n	80038f4 <HAL_RCC_OscConfig+0x324>
 80038dc:	4b58      	ldr	r3, [pc, #352]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e0:	4a57      	ldr	r2, [pc, #348]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038e2:	f023 0301 	bic.w	r3, r3, #1
 80038e6:	6713      	str	r3, [r2, #112]	; 0x70
 80038e8:	4b55      	ldr	r3, [pc, #340]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ec:	4a54      	ldr	r2, [pc, #336]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038ee:	f023 0304 	bic.w	r3, r3, #4
 80038f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d015      	beq.n	8003928 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fc:	f7ff fb88 	bl	8003010 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003902:	e00a      	b.n	800391a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003904:	f7ff fb84 	bl	8003010 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003912:	4293      	cmp	r3, r2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e0cb      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800391a:	4b49      	ldr	r3, [pc, #292]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 800391c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0ee      	beq.n	8003904 <HAL_RCC_OscConfig+0x334>
 8003926:	e014      	b.n	8003952 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003928:	f7ff fb72 	bl	8003010 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800392e:	e00a      	b.n	8003946 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003930:	f7ff fb6e 	bl	8003010 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	; 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e0b5      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003946:	4b3e      	ldr	r3, [pc, #248]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 8003948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1ee      	bne.n	8003930 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003952:	7dfb      	ldrb	r3, [r7, #23]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d105      	bne.n	8003964 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003958:	4b39      	ldr	r3, [pc, #228]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	4a38      	ldr	r2, [pc, #224]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 800395e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003962:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80a1 	beq.w	8003ab0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800396e:	4b34      	ldr	r3, [pc, #208]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 030c 	and.w	r3, r3, #12
 8003976:	2b08      	cmp	r3, #8
 8003978:	d05c      	beq.n	8003a34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d141      	bne.n	8003a06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003982:	4b31      	ldr	r3, [pc, #196]	; (8003a48 <HAL_RCC_OscConfig+0x478>)
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003988:	f7ff fb42 	bl	8003010 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003990:	f7ff fb3e 	bl	8003010 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e087      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a2:	4b27      	ldr	r3, [pc, #156]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f0      	bne.n	8003990 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69da      	ldr	r2, [r3, #28]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	019b      	lsls	r3, r3, #6
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c4:	085b      	lsrs	r3, r3, #1
 80039c6:	3b01      	subs	r3, #1
 80039c8:	041b      	lsls	r3, r3, #16
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	061b      	lsls	r3, r3, #24
 80039d2:	491b      	ldr	r1, [pc, #108]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039d8:	4b1b      	ldr	r3, [pc, #108]	; (8003a48 <HAL_RCC_OscConfig+0x478>)
 80039da:	2201      	movs	r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039de:	f7ff fb17 	bl	8003010 <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e4:	e008      	b.n	80039f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e6:	f7ff fb13 	bl	8003010 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e05c      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039f8:	4b11      	ldr	r3, [pc, #68]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0f0      	beq.n	80039e6 <HAL_RCC_OscConfig+0x416>
 8003a04:	e054      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a06:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <HAL_RCC_OscConfig+0x478>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7ff fb00 	bl	8003010 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a14:	f7ff fafc 	bl	8003010 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e045      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a26:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f0      	bne.n	8003a14 <HAL_RCC_OscConfig+0x444>
 8003a32:	e03d      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d107      	bne.n	8003a4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e038      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
 8003a40:	40023800 	.word	0x40023800
 8003a44:	40007000 	.word	0x40007000
 8003a48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a4c:	4b1b      	ldr	r3, [pc, #108]	; (8003abc <HAL_RCC_OscConfig+0x4ec>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d028      	beq.n	8003aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d121      	bne.n	8003aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d11a      	bne.n	8003aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d111      	bne.n	8003aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a92:	085b      	lsrs	r3, r3, #1
 8003a94:	3b01      	subs	r3, #1
 8003a96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d107      	bne.n	8003aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d001      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e000      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40023800 	.word	0x40023800

08003ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0cc      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad4:	4b68      	ldr	r3, [pc, #416]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d90c      	bls.n	8003afc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae2:	4b65      	ldr	r3, [pc, #404]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aea:	4b63      	ldr	r3, [pc, #396]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d001      	beq.n	8003afc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e0b8      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d020      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b14:	4b59      	ldr	r3, [pc, #356]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	4a58      	ldr	r2, [pc, #352]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d005      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b2c:	4b53      	ldr	r3, [pc, #332]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	4a52      	ldr	r2, [pc, #328]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b38:	4b50      	ldr	r3, [pc, #320]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	494d      	ldr	r1, [pc, #308]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d044      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d107      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5e:	4b47      	ldr	r3, [pc, #284]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d119      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e07f      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d003      	beq.n	8003b7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b7a:	2b03      	cmp	r3, #3
 8003b7c:	d107      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b7e:	4b3f      	ldr	r3, [pc, #252]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d109      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e06f      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8e:	4b3b      	ldr	r3, [pc, #236]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e067      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b9e:	4b37      	ldr	r3, [pc, #220]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f023 0203 	bic.w	r2, r3, #3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	4934      	ldr	r1, [pc, #208]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bb0:	f7ff fa2e 	bl	8003010 <HAL_GetTick>
 8003bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb6:	e00a      	b.n	8003bce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb8:	f7ff fa2a 	bl	8003010 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e04f      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bce:	4b2b      	ldr	r3, [pc, #172]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 020c 	and.w	r2, r3, #12
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d1eb      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003be0:	4b25      	ldr	r3, [pc, #148]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d20c      	bcs.n	8003c08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bee:	4b22      	ldr	r3, [pc, #136]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf6:	4b20      	ldr	r3, [pc, #128]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d001      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e032      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d008      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c14:	4b19      	ldr	r3, [pc, #100]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	4916      	ldr	r1, [pc, #88]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d009      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c32:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	490e      	ldr	r1, [pc, #56]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c46:	f000 f821 	bl	8003c8c <HAL_RCC_GetSysClockFreq>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	091b      	lsrs	r3, r3, #4
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	490a      	ldr	r1, [pc, #40]	; (8003c80 <HAL_RCC_ClockConfig+0x1c0>)
 8003c58:	5ccb      	ldrb	r3, [r1, r3]
 8003c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c5e:	4a09      	ldr	r2, [pc, #36]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c62:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <HAL_RCC_ClockConfig+0x1c8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7ff f98e 	bl	8002f88 <HAL_InitTick>

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40023c00 	.word	0x40023c00
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	0800fad4 	.word	0x0800fad4
 8003c84:	2000005c 	.word	0x2000005c
 8003c88:	20000060 	.word	0x20000060

08003c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c90:	b090      	sub	sp, #64	; 0x40
 8003c92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	637b      	str	r3, [r7, #52]	; 0x34
 8003c98:	2300      	movs	r3, #0
 8003c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ca4:	4b59      	ldr	r3, [pc, #356]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 030c 	and.w	r3, r3, #12
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d00d      	beq.n	8003ccc <HAL_RCC_GetSysClockFreq+0x40>
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	f200 80a1 	bhi.w	8003df8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x34>
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d003      	beq.n	8003cc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003cbe:	e09b      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cc0:	4b53      	ldr	r3, [pc, #332]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x184>)
 8003cc2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003cc4:	e09b      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cc6:	4b53      	ldr	r3, [pc, #332]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cc8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003cca:	e098      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ccc:	4b4f      	ldr	r3, [pc, #316]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cd4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cd6:	4b4d      	ldr	r3, [pc, #308]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d028      	beq.n	8003d34 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ce2:	4b4a      	ldr	r3, [pc, #296]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	099b      	lsrs	r3, r3, #6
 8003ce8:	2200      	movs	r2, #0
 8003cea:	623b      	str	r3, [r7, #32]
 8003cec:	627a      	str	r2, [r7, #36]	; 0x24
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	4b47      	ldr	r3, [pc, #284]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cf8:	fb03 f201 	mul.w	r2, r3, r1
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	fb00 f303 	mul.w	r3, r0, r3
 8003d02:	4413      	add	r3, r2
 8003d04:	4a43      	ldr	r2, [pc, #268]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d06:	fba0 1202 	umull	r1, r2, r0, r2
 8003d0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d0c:	460a      	mov	r2, r1
 8003d0e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d12:	4413      	add	r3, r2
 8003d14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d18:	2200      	movs	r2, #0
 8003d1a:	61bb      	str	r3, [r7, #24]
 8003d1c:	61fa      	str	r2, [r7, #28]
 8003d1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003d26:	f7fc fab3 	bl	8000290 <__aeabi_uldivmod>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4613      	mov	r3, r2
 8003d30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d32:	e053      	b.n	8003ddc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d34:	4b35      	ldr	r3, [pc, #212]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	099b      	lsrs	r3, r3, #6
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	613b      	str	r3, [r7, #16]
 8003d3e:	617a      	str	r2, [r7, #20]
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d46:	f04f 0b00 	mov.w	fp, #0
 8003d4a:	4652      	mov	r2, sl
 8003d4c:	465b      	mov	r3, fp
 8003d4e:	f04f 0000 	mov.w	r0, #0
 8003d52:	f04f 0100 	mov.w	r1, #0
 8003d56:	0159      	lsls	r1, r3, #5
 8003d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d5c:	0150      	lsls	r0, r2, #5
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	ebb2 080a 	subs.w	r8, r2, sl
 8003d66:	eb63 090b 	sbc.w	r9, r3, fp
 8003d6a:	f04f 0200 	mov.w	r2, #0
 8003d6e:	f04f 0300 	mov.w	r3, #0
 8003d72:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d76:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d7a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d7e:	ebb2 0408 	subs.w	r4, r2, r8
 8003d82:	eb63 0509 	sbc.w	r5, r3, r9
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	00eb      	lsls	r3, r5, #3
 8003d90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d94:	00e2      	lsls	r2, r4, #3
 8003d96:	4614      	mov	r4, r2
 8003d98:	461d      	mov	r5, r3
 8003d9a:	eb14 030a 	adds.w	r3, r4, sl
 8003d9e:	603b      	str	r3, [r7, #0]
 8003da0:	eb45 030b 	adc.w	r3, r5, fp
 8003da4:	607b      	str	r3, [r7, #4]
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003db2:	4629      	mov	r1, r5
 8003db4:	028b      	lsls	r3, r1, #10
 8003db6:	4621      	mov	r1, r4
 8003db8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dbc:	4621      	mov	r1, r4
 8003dbe:	028a      	lsls	r2, r1, #10
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	60fa      	str	r2, [r7, #12]
 8003dcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dd0:	f7fc fa5e 	bl	8000290 <__aeabi_uldivmod>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4613      	mov	r3, r2
 8003dda:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ddc:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	0c1b      	lsrs	r3, r3, #16
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	3301      	adds	r3, #1
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003dec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003df6:	e002      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003df8:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x184>)
 8003dfa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3740      	adds	r7, #64	; 0x40
 8003e04:	46bd      	mov	sp, r7
 8003e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	00f42400 	.word	0x00f42400
 8003e14:	017d7840 	.word	0x017d7840

08003e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e1c:	4b03      	ldr	r3, [pc, #12]	; (8003e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	2000005c 	.word	0x2000005c

08003e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e34:	f7ff fff0 	bl	8003e18 <HAL_RCC_GetHCLKFreq>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	0a9b      	lsrs	r3, r3, #10
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	4903      	ldr	r1, [pc, #12]	; (8003e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e46:	5ccb      	ldrb	r3, [r1, r3]
 8003e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40023800 	.word	0x40023800
 8003e54:	0800fae4 	.word	0x0800fae4

08003e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e5c:	f7ff ffdc 	bl	8003e18 <HAL_RCC_GetHCLKFreq>
 8003e60:	4602      	mov	r2, r0
 8003e62:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	0b5b      	lsrs	r3, r3, #13
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	4903      	ldr	r1, [pc, #12]	; (8003e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e6e:	5ccb      	ldrb	r3, [r1, r3]
 8003e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	0800fae4 	.word	0x0800fae4

08003e80 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d105      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d035      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ea8:	4b67      	ldr	r3, [pc, #412]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003eae:	f7ff f8af 	bl	8003010 <HAL_GetTick>
 8003eb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003eb4:	e008      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003eb6:	f7ff f8ab 	bl	8003010 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e0ba      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ec8:	4b60      	ldr	r3, [pc, #384]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1f0      	bne.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	019a      	lsls	r2, r3, #6
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	071b      	lsls	r3, r3, #28
 8003ee0:	495a      	ldr	r1, [pc, #360]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ee8:	4b57      	ldr	r3, [pc, #348]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003eea:	2201      	movs	r2, #1
 8003eec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003eee:	f7ff f88f 	bl	8003010 <HAL_GetTick>
 8003ef2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ef6:	f7ff f88b 	bl	8003010 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e09a      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f08:	4b50      	ldr	r3, [pc, #320]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0f0      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 8083 	beq.w	8004028 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]
 8003f26:	4b49      	ldr	r3, [pc, #292]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	4a48      	ldr	r2, [pc, #288]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f30:	6413      	str	r3, [r2, #64]	; 0x40
 8003f32:	4b46      	ldr	r3, [pc, #280]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f3e:	4b44      	ldr	r3, [pc, #272]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a43      	ldr	r2, [pc, #268]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f48:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f4a:	f7ff f861 	bl	8003010 <HAL_GetTick>
 8003f4e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f50:	e008      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f52:	f7ff f85d 	bl	8003010 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e06c      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f64:	4b3a      	ldr	r3, [pc, #232]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0f0      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f70:	4b36      	ldr	r3, [pc, #216]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f78:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d02f      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d028      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f8e:	4b2f      	ldr	r3, [pc, #188]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f96:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f98:	4b2e      	ldr	r3, [pc, #184]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f9e:	4b2d      	ldr	r3, [pc, #180]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003fa4:	4a29      	ldr	r2, [pc, #164]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003faa:	4b28      	ldr	r3, [pc, #160]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d114      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003fb6:	f7ff f82b 	bl	8003010 <HAL_GetTick>
 8003fba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fbc:	e00a      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fbe:	f7ff f827 	bl	8003010 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e034      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd4:	4b1d      	ldr	r3, [pc, #116]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0ee      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fe8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fec:	d10d      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003fee:	4b17      	ldr	r3, [pc, #92]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004002:	4912      	ldr	r1, [pc, #72]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004004:	4313      	orrs	r3, r2
 8004006:	608b      	str	r3, [r1, #8]
 8004008:	e005      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800400a:	4b10      	ldr	r3, [pc, #64]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	4a0f      	ldr	r2, [pc, #60]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004010:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004014:	6093      	str	r3, [r2, #8]
 8004016:	4b0d      	ldr	r3, [pc, #52]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004018:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004022:	490a      	ldr	r1, [pc, #40]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004024:	4313      	orrs	r3, r2
 8004026:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0308 	and.w	r3, r3, #8
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	7c1a      	ldrb	r2, [r3, #16]
 8004038:	4b07      	ldr	r3, [pc, #28]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800403a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	42470068 	.word	0x42470068
 800404c:	40023800 	.word	0x40023800
 8004050:	40007000 	.word	0x40007000
 8004054:	42470e40 	.word	0x42470e40
 8004058:	424711e0 	.word	0x424711e0

0800405c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e066      	b.n	8004140 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	7f5b      	ldrb	r3, [r3, #29]
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d105      	bne.n	8004088 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7fe fbb2 	bl	80027ec <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2202      	movs	r2, #2
 800408c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	22ca      	movs	r2, #202	; 0xca
 8004094:	625a      	str	r2, [r3, #36]	; 0x24
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2253      	movs	r2, #83	; 0x53
 800409c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 fa45 	bl	800452e <RTC_EnterInitMode>
 80040a4:	4603      	mov	r3, r0
 80040a6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d12c      	bne.n	8004108 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6812      	ldr	r2, [r2, #0]
 80040b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80040bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040c0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6899      	ldr	r1, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	431a      	orrs	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	68d2      	ldr	r2, [r2, #12]
 80040e8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6919      	ldr	r1, [r3, #16]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	041a      	lsls	r2, r3, #16
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 fa4c 	bl	800459c <RTC_ExitInitMode>
 8004104:	4603      	mov	r3, r0
 8004106:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004108:	7bfb      	ldrb	r3, [r7, #15]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d113      	bne.n	8004136 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800411c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	699a      	ldr	r2, [r3, #24]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	430a      	orrs	r2, r1
 800412e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	22ff      	movs	r2, #255	; 0xff
 800413c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800413e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004148:	b590      	push	{r4, r7, lr}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	7f1b      	ldrb	r3, [r3, #28]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_RTC_SetTime+0x1c>
 8004160:	2302      	movs	r3, #2
 8004162:	e087      	b.n	8004274 <HAL_RTC_SetTime+0x12c>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2201      	movs	r2, #1
 8004168:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2202      	movs	r2, #2
 800416e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d126      	bne.n	80041c4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004180:	2b00      	cmp	r3, #0
 8004182:	d102      	bne.n	800418a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2200      	movs	r2, #0
 8004188:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fa29 	bl	80045e6 <RTC_ByteToBcd2>
 8004194:	4603      	mov	r3, r0
 8004196:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	785b      	ldrb	r3, [r3, #1]
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fa22 	bl	80045e6 <RTC_ByteToBcd2>
 80041a2:	4603      	mov	r3, r0
 80041a4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80041a6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	789b      	ldrb	r3, [r3, #2]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 fa1a 	bl	80045e6 <RTC_ByteToBcd2>
 80041b2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80041b4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	78db      	ldrb	r3, [r3, #3]
 80041bc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	e018      	b.n	80041f6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d102      	bne.n	80041d8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2200      	movs	r2, #0
 80041d6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	785b      	ldrb	r3, [r3, #1]
 80041e2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80041e4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80041ea:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	78db      	ldrb	r3, [r3, #3]
 80041f0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80041f2:	4313      	orrs	r3, r2
 80041f4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	22ca      	movs	r2, #202	; 0xca
 80041fc:	625a      	str	r2, [r3, #36]	; 0x24
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2253      	movs	r2, #83	; 0x53
 8004204:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 f991 	bl	800452e <RTC_EnterInitMode>
 800420c:	4603      	mov	r3, r0
 800420e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004210:	7cfb      	ldrb	r3, [r7, #19]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d120      	bne.n	8004258 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004220:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004224:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004234:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6899      	ldr	r1, [r3, #8]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	431a      	orrs	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 f9a4 	bl	800459c <RTC_ExitInitMode>
 8004254:	4603      	mov	r3, r0
 8004256:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004258:	7cfb      	ldrb	r3, [r7, #19]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d102      	bne.n	8004264 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2201      	movs	r2, #1
 8004262:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	22ff      	movs	r2, #255	; 0xff
 800426a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	771a      	strb	r2, [r3, #28]

  return status;
 8004272:	7cfb      	ldrb	r3, [r7, #19]
}
 8004274:	4618      	mov	r0, r3
 8004276:	371c      	adds	r7, #28
 8004278:	46bd      	mov	sp, r7
 800427a:	bd90      	pop	{r4, r7, pc}

0800427c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80042ae:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80042b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	0c1b      	lsrs	r3, r3, #16
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	0a1b      	lsrs	r3, r3, #8
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	0d9b      	lsrs	r3, r3, #22
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d11a      	bne.n	800432e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 f98f 	bl	8004620 <RTC_Bcd2ToByte>
 8004302:	4603      	mov	r3, r0
 8004304:	461a      	mov	r2, r3
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	785b      	ldrb	r3, [r3, #1]
 800430e:	4618      	mov	r0, r3
 8004310:	f000 f986 	bl	8004620 <RTC_Bcd2ToByte>
 8004314:	4603      	mov	r3, r0
 8004316:	461a      	mov	r2, r3
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	789b      	ldrb	r3, [r3, #2]
 8004320:	4618      	mov	r0, r3
 8004322:	f000 f97d 	bl	8004620 <RTC_Bcd2ToByte>
 8004326:	4603      	mov	r3, r0
 8004328:	461a      	mov	r2, r3
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3718      	adds	r7, #24
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004338:	b590      	push	{r4, r7, lr}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	7f1b      	ldrb	r3, [r3, #28]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_RTC_SetDate+0x1c>
 8004350:	2302      	movs	r3, #2
 8004352:	e071      	b.n	8004438 <HAL_RTC_SetDate+0x100>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2201      	movs	r2, #1
 8004358:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2202      	movs	r2, #2
 800435e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10e      	bne.n	8004384 <HAL_RTC_SetDate+0x4c>
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	785b      	ldrb	r3, [r3, #1]
 800436a:	f003 0310 	and.w	r3, r3, #16
 800436e:	2b00      	cmp	r3, #0
 8004370:	d008      	beq.n	8004384 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	785b      	ldrb	r3, [r3, #1]
 8004376:	f023 0310 	bic.w	r3, r3, #16
 800437a:	b2db      	uxtb	r3, r3
 800437c:	330a      	adds	r3, #10
 800437e:	b2da      	uxtb	r2, r3
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d11c      	bne.n	80043c4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	78db      	ldrb	r3, [r3, #3]
 800438e:	4618      	mov	r0, r3
 8004390:	f000 f929 	bl	80045e6 <RTC_ByteToBcd2>
 8004394:	4603      	mov	r3, r0
 8004396:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	785b      	ldrb	r3, [r3, #1]
 800439c:	4618      	mov	r0, r3
 800439e:	f000 f922 	bl	80045e6 <RTC_ByteToBcd2>
 80043a2:	4603      	mov	r3, r0
 80043a4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80043a6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	789b      	ldrb	r3, [r3, #2]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 f91a 	bl	80045e6 <RTC_ByteToBcd2>
 80043b2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80043b4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80043be:	4313      	orrs	r3, r2
 80043c0:	617b      	str	r3, [r7, #20]
 80043c2:	e00e      	b.n	80043e2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	78db      	ldrb	r3, [r3, #3]
 80043c8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	785b      	ldrb	r3, [r3, #1]
 80043ce:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80043d0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80043d6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80043de:	4313      	orrs	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	22ca      	movs	r2, #202	; 0xca
 80043e8:	625a      	str	r2, [r3, #36]	; 0x24
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2253      	movs	r2, #83	; 0x53
 80043f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 f89b 	bl	800452e <RTC_EnterInitMode>
 80043f8:	4603      	mov	r3, r0
 80043fa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80043fc:	7cfb      	ldrb	r3, [r7, #19]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10c      	bne.n	800441c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800440c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004410:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 f8c2 	bl	800459c <RTC_ExitInitMode>
 8004418:	4603      	mov	r3, r0
 800441a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800441c:	7cfb      	ldrb	r3, [r7, #19]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d102      	bne.n	8004428 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2201      	movs	r2, #1
 8004426:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	22ff      	movs	r2, #255	; 0xff
 800442e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	771a      	strb	r2, [r3, #28]

  return status;
 8004436:	7cfb      	ldrb	r3, [r7, #19]
}
 8004438:	4618      	mov	r0, r3
 800443a:	371c      	adds	r7, #28
 800443c:	46bd      	mov	sp, r7
 800443e:	bd90      	pop	{r4, r7, pc}

08004440 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800445a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800445e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	0c1b      	lsrs	r3, r3, #16
 8004464:	b2da      	uxtb	r2, r3
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	0a1b      	lsrs	r3, r3, #8
 800446e:	b2db      	uxtb	r3, r3
 8004470:	f003 031f 	and.w	r3, r3, #31
 8004474:	b2da      	uxtb	r2, r3
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004482:	b2da      	uxtb	r2, r3
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	0b5b      	lsrs	r3, r3, #13
 800448c:	b2db      	uxtb	r3, r3
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	b2da      	uxtb	r2, r3
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d11a      	bne.n	80044d4 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	78db      	ldrb	r3, [r3, #3]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 f8bc 	bl	8004620 <RTC_Bcd2ToByte>
 80044a8:	4603      	mov	r3, r0
 80044aa:	461a      	mov	r2, r3
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	785b      	ldrb	r3, [r3, #1]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 f8b3 	bl	8004620 <RTC_Bcd2ToByte>
 80044ba:	4603      	mov	r3, r0
 80044bc:	461a      	mov	r2, r3
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	789b      	ldrb	r3, [r3, #2]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 f8aa 	bl	8004620 <RTC_Bcd2ToByte>
 80044cc:	4603      	mov	r3, r0
 80044ce:	461a      	mov	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b084      	sub	sp, #16
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044f8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044fa:	f7fe fd89 	bl	8003010 <HAL_GetTick>
 80044fe:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004500:	e009      	b.n	8004516 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004502:	f7fe fd85 	bl	8003010 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004510:	d901      	bls.n	8004516 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e007      	b.n	8004526 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f003 0320 	and.w	r3, r3, #32
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0ee      	beq.n	8004502 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b084      	sub	sp, #16
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800453a:	2300      	movs	r3, #0
 800453c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004548:	2b00      	cmp	r3, #0
 800454a:	d122      	bne.n	8004592 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68da      	ldr	r2, [r3, #12]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800455a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800455c:	f7fe fd58 	bl	8003010 <HAL_GetTick>
 8004560:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004562:	e00c      	b.n	800457e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004564:	f7fe fd54 	bl	8003010 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004572:	d904      	bls.n	800457e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2204      	movs	r2, #4
 8004578:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004588:	2b00      	cmp	r3, #0
 800458a:	d102      	bne.n	8004592 <RTC_EnterInitMode+0x64>
 800458c:	7bfb      	ldrb	r3, [r7, #15]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d1e8      	bne.n	8004564 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004592:	7bfb      	ldrb	r3, [r7, #15]
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045a4:	2300      	movs	r3, #0
 80045a6:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68da      	ldr	r2, [r3, #12]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045b6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 0320 	and.w	r3, r3, #32
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10a      	bne.n	80045dc <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7ff ff89 	bl	80044de <HAL_RTC_WaitForSynchro>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d004      	beq.n	80045dc <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2204      	movs	r2, #4
 80045d6:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b085      	sub	sp, #20
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	4603      	mov	r3, r0
 80045ee:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80045f4:	e005      	b.n	8004602 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
 80045f8:	3301      	adds	r3, #1
 80045fa:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80045fc:	79fb      	ldrb	r3, [r7, #7]
 80045fe:	3b0a      	subs	r3, #10
 8004600:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004602:	79fb      	ldrb	r3, [r7, #7]
 8004604:	2b09      	cmp	r3, #9
 8004606:	d8f6      	bhi.n	80045f6 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004608:	7bfb      	ldrb	r3, [r7, #15]
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	b2da      	uxtb	r2, r3
 800460e:	79fb      	ldrb	r3, [r7, #7]
 8004610:	4313      	orrs	r3, r2
 8004612:	b2db      	uxtb	r3, r3
}
 8004614:	4618      	mov	r0, r3
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	4603      	mov	r3, r0
 8004628:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800462a:	2300      	movs	r3, #0
 800462c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	091b      	lsrs	r3, r3, #4
 8004632:	b2db      	uxtb	r3, r3
 8004634:	461a      	mov	r2, r3
 8004636:	0092      	lsls	r2, r2, #2
 8004638:	4413      	add	r3, r2
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800463e:	79fb      	ldrb	r3, [r7, #7]
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	b2da      	uxtb	r2, r3
 8004646:	7bfb      	ldrb	r3, [r7, #15]
 8004648:	4413      	add	r3, r2
 800464a:	b2db      	uxtb	r3, r3
}
 800464c:	4618      	mov	r0, r3
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e07b      	b.n	8004762 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	2b00      	cmp	r3, #0
 8004670:	d108      	bne.n	8004684 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800467a:	d009      	beq.n	8004690 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	61da      	str	r2, [r3, #28]
 8004682:	e005      	b.n	8004690 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d106      	bne.n	80046b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7fe f936 	bl	800291c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	431a      	orrs	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004700:	431a      	orrs	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004714:	ea42 0103 	orr.w	r1, r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	0c1b      	lsrs	r3, r3, #16
 800472e:	f003 0104 	and.w	r1, r3, #4
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	f003 0210 	and.w	r2, r3, #16
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69da      	ldr	r2, [r3, #28]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004750:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b088      	sub	sp, #32
 800476e:	af00      	add	r7, sp, #0
 8004770:	60f8      	str	r0, [r7, #12]
 8004772:	60b9      	str	r1, [r7, #8]
 8004774:	603b      	str	r3, [r7, #0]
 8004776:	4613      	mov	r3, r2
 8004778:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004784:	2b01      	cmp	r3, #1
 8004786:	d101      	bne.n	800478c <HAL_SPI_Transmit+0x22>
 8004788:	2302      	movs	r3, #2
 800478a:	e126      	b.n	80049da <HAL_SPI_Transmit+0x270>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004794:	f7fe fc3c 	bl	8003010 <HAL_GetTick>
 8004798:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800479a:	88fb      	ldrh	r3, [r7, #6]
 800479c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d002      	beq.n	80047b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
 80047ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047ae:	e10b      	b.n	80049c8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <HAL_SPI_Transmit+0x52>
 80047b6:	88fb      	ldrh	r3, [r7, #6]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d102      	bne.n	80047c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047c0:	e102      	b.n	80049c8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2203      	movs	r2, #3
 80047c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	88fa      	ldrh	r2, [r7, #6]
 80047da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	88fa      	ldrh	r2, [r7, #6]
 80047e0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004808:	d10f      	bne.n	800482a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004818:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004828:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004834:	2b40      	cmp	r3, #64	; 0x40
 8004836:	d007      	beq.n	8004848 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004846:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004850:	d14b      	bne.n	80048ea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d002      	beq.n	8004860 <HAL_SPI_Transmit+0xf6>
 800485a:	8afb      	ldrh	r3, [r7, #22]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d13e      	bne.n	80048de <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	881a      	ldrh	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	1c9a      	adds	r2, r3, #2
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004884:	e02b      	b.n	80048de <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b02      	cmp	r3, #2
 8004892:	d112      	bne.n	80048ba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	881a      	ldrh	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a4:	1c9a      	adds	r2, r3, #2
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	3b01      	subs	r3, #1
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80048b8:	e011      	b.n	80048de <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048ba:	f7fe fba9 	bl	8003010 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d803      	bhi.n	80048d2 <HAL_SPI_Transmit+0x168>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d0:	d102      	bne.n	80048d8 <HAL_SPI_Transmit+0x16e>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d102      	bne.n	80048de <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048dc:	e074      	b.n	80049c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1ce      	bne.n	8004886 <HAL_SPI_Transmit+0x11c>
 80048e8:	e04c      	b.n	8004984 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <HAL_SPI_Transmit+0x18e>
 80048f2:	8afb      	ldrh	r3, [r7, #22]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d140      	bne.n	800497a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	330c      	adds	r3, #12
 8004902:	7812      	ldrb	r2, [r2, #0]
 8004904:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004914:	b29b      	uxth	r3, r3
 8004916:	3b01      	subs	r3, #1
 8004918:	b29a      	uxth	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800491e:	e02c      	b.n	800497a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b02      	cmp	r3, #2
 800492c:	d113      	bne.n	8004956 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	330c      	adds	r3, #12
 8004938:	7812      	ldrb	r2, [r2, #0]
 800493a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004940:	1c5a      	adds	r2, r3, #1
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	86da      	strh	r2, [r3, #54]	; 0x36
 8004954:	e011      	b.n	800497a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004956:	f7fe fb5b 	bl	8003010 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d803      	bhi.n	800496e <HAL_SPI_Transmit+0x204>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496c:	d102      	bne.n	8004974 <HAL_SPI_Transmit+0x20a>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d102      	bne.n	800497a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004978:	e026      	b.n	80049c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800497e:	b29b      	uxth	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1cd      	bne.n	8004920 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	6839      	ldr	r1, [r7, #0]
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 fbcb 	bl	8005124 <SPI_EndRxTxTransaction>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2220      	movs	r2, #32
 8004998:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10a      	bne.n	80049b8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049a2:	2300      	movs	r3, #0
 80049a4:	613b      	str	r3, [r7, #16]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	613b      	str	r3, [r7, #16]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	613b      	str	r3, [r7, #16]
 80049b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	77fb      	strb	r3, [r7, #31]
 80049c4:	e000      	b.n	80049c8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80049c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3720      	adds	r7, #32
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b088      	sub	sp, #32
 80049e6:	af02      	add	r7, sp, #8
 80049e8:	60f8      	str	r0, [r7, #12]
 80049ea:	60b9      	str	r1, [r7, #8]
 80049ec:	603b      	str	r3, [r7, #0]
 80049ee:	4613      	mov	r3, r2
 80049f0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049f2:	2300      	movs	r3, #0
 80049f4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049fe:	d112      	bne.n	8004a26 <HAL_SPI_Receive+0x44>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10e      	bne.n	8004a26 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2204      	movs	r2, #4
 8004a0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a10:	88fa      	ldrh	r2, [r7, #6]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	4613      	mov	r3, r2
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	68b9      	ldr	r1, [r7, #8]
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 f8f1 	bl	8004c04 <HAL_SPI_TransmitReceive>
 8004a22:	4603      	mov	r3, r0
 8004a24:	e0ea      	b.n	8004bfc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <HAL_SPI_Receive+0x52>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e0e3      	b.n	8004bfc <HAL_SPI_Receive+0x21a>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a3c:	f7fe fae8 	bl	8003010 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d002      	beq.n	8004a54 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004a4e:	2302      	movs	r3, #2
 8004a50:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a52:	e0ca      	b.n	8004bea <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <HAL_SPI_Receive+0x7e>
 8004a5a:	88fb      	ldrh	r3, [r7, #6]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d102      	bne.n	8004a66 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a64:	e0c1      	b.n	8004bea <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2204      	movs	r2, #4
 8004a6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	88fa      	ldrh	r2, [r7, #6]
 8004a7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	88fa      	ldrh	r2, [r7, #6]
 8004a84:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aac:	d10f      	bne.n	8004ace <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004abc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004acc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad8:	2b40      	cmp	r3, #64	; 0x40
 8004ada:	d007      	beq.n	8004aec <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d162      	bne.n	8004bba <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004af4:	e02e      	b.n	8004b54 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d115      	bne.n	8004b30 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f103 020c 	add.w	r2, r3, #12
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b10:	7812      	ldrb	r2, [r2, #0]
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	3b01      	subs	r3, #1
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b2e:	e011      	b.n	8004b54 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b30:	f7fe fa6e 	bl	8003010 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d803      	bhi.n	8004b48 <HAL_SPI_Receive+0x166>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b46:	d102      	bne.n	8004b4e <HAL_SPI_Receive+0x16c>
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d102      	bne.n	8004b54 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b52:	e04a      	b.n	8004bea <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1cb      	bne.n	8004af6 <HAL_SPI_Receive+0x114>
 8004b5e:	e031      	b.n	8004bc4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d113      	bne.n	8004b96 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	b292      	uxth	r2, r2
 8004b7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b80:	1c9a      	adds	r2, r3, #2
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b94:	e011      	b.n	8004bba <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b96:	f7fe fa3b 	bl	8003010 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d803      	bhi.n	8004bae <HAL_SPI_Receive+0x1cc>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bac:	d102      	bne.n	8004bb4 <HAL_SPI_Receive+0x1d2>
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d102      	bne.n	8004bba <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004bb8:	e017      	b.n	8004bea <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1cd      	bne.n	8004b60 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	6839      	ldr	r1, [r7, #0]
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 fa45 	bl	8005058 <SPI_EndRxTransaction>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d002      	beq.n	8004bda <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	75fb      	strb	r3, [r7, #23]
 8004be6:	e000      	b.n	8004bea <HAL_SPI_Receive+0x208>
  }

error :
 8004be8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3718      	adds	r7, #24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b08c      	sub	sp, #48	; 0x30
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
 8004c10:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c12:	2301      	movs	r3, #1
 8004c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c16:	2300      	movs	r3, #0
 8004c18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d101      	bne.n	8004c2a <HAL_SPI_TransmitReceive+0x26>
 8004c26:	2302      	movs	r3, #2
 8004c28:	e18a      	b.n	8004f40 <HAL_SPI_TransmitReceive+0x33c>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c32:	f7fe f9ed 	bl	8003010 <HAL_GetTick>
 8004c36:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c48:	887b      	ldrh	r3, [r7, #2]
 8004c4a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d00f      	beq.n	8004c74 <HAL_SPI_TransmitReceive+0x70>
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c5a:	d107      	bne.n	8004c6c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d103      	bne.n	8004c6c <HAL_SPI_TransmitReceive+0x68>
 8004c64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	d003      	beq.n	8004c74 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c72:	e15b      	b.n	8004f2c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d005      	beq.n	8004c86 <HAL_SPI_TransmitReceive+0x82>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d002      	beq.n	8004c86 <HAL_SPI_TransmitReceive+0x82>
 8004c80:	887b      	ldrh	r3, [r7, #2]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d103      	bne.n	8004c8e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c8c:	e14e      	b.n	8004f2c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	d003      	beq.n	8004ca2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2205      	movs	r2, #5
 8004c9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	887a      	ldrh	r2, [r7, #2]
 8004cb2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	887a      	ldrh	r2, [r7, #2]
 8004cb8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	887a      	ldrh	r2, [r7, #2]
 8004cc4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	887a      	ldrh	r2, [r7, #2]
 8004cca:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce2:	2b40      	cmp	r3, #64	; 0x40
 8004ce4:	d007      	beq.n	8004cf6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cf4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cfe:	d178      	bne.n	8004df2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d002      	beq.n	8004d0e <HAL_SPI_TransmitReceive+0x10a>
 8004d08:	8b7b      	ldrh	r3, [r7, #26]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d166      	bne.n	8004ddc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d12:	881a      	ldrh	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1e:	1c9a      	adds	r2, r3, #2
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d32:	e053      	b.n	8004ddc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d11b      	bne.n	8004d7a <HAL_SPI_TransmitReceive+0x176>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d016      	beq.n	8004d7a <HAL_SPI_TransmitReceive+0x176>
 8004d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d113      	bne.n	8004d7a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d56:	881a      	ldrh	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d62:	1c9a      	adds	r2, r3, #2
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d119      	bne.n	8004dbc <HAL_SPI_TransmitReceive+0x1b8>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d014      	beq.n	8004dbc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9c:	b292      	uxth	r2, r2
 8004d9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da4:	1c9a      	adds	r2, r3, #2
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004db8:	2301      	movs	r3, #1
 8004dba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004dbc:	f7fe f928 	bl	8003010 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d807      	bhi.n	8004ddc <HAL_SPI_TransmitReceive+0x1d8>
 8004dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd2:	d003      	beq.n	8004ddc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004dda:	e0a7      	b.n	8004f2c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1a6      	bne.n	8004d34 <HAL_SPI_TransmitReceive+0x130>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1a1      	bne.n	8004d34 <HAL_SPI_TransmitReceive+0x130>
 8004df0:	e07c      	b.n	8004eec <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <HAL_SPI_TransmitReceive+0x1fc>
 8004dfa:	8b7b      	ldrh	r3, [r7, #26]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d16b      	bne.n	8004ed8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	330c      	adds	r3, #12
 8004e0a:	7812      	ldrb	r2, [r2, #0]
 8004e0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e12:	1c5a      	adds	r2, r3, #1
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e26:	e057      	b.n	8004ed8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d11c      	bne.n	8004e70 <HAL_SPI_TransmitReceive+0x26c>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d017      	beq.n	8004e70 <HAL_SPI_TransmitReceive+0x26c>
 8004e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d114      	bne.n	8004e70 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	330c      	adds	r3, #12
 8004e50:	7812      	ldrb	r2, [r2, #0]
 8004e52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e58:	1c5a      	adds	r2, r3, #1
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	3b01      	subs	r3, #1
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d119      	bne.n	8004eb2 <HAL_SPI_TransmitReceive+0x2ae>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d014      	beq.n	8004eb2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004eb2:	f7fe f8ad 	bl	8003010 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d803      	bhi.n	8004eca <HAL_SPI_TransmitReceive+0x2c6>
 8004ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec8:	d102      	bne.n	8004ed0 <HAL_SPI_TransmitReceive+0x2cc>
 8004eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d103      	bne.n	8004ed8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004ed6:	e029      	b.n	8004f2c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1a2      	bne.n	8004e28 <HAL_SPI_TransmitReceive+0x224>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d19d      	bne.n	8004e28 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 f917 	bl	8005124 <SPI_EndRxTxTransaction>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d006      	beq.n	8004f0a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2220      	movs	r2, #32
 8004f06:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f08:	e010      	b.n	8004f2c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10b      	bne.n	8004f2a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f12:	2300      	movs	r3, #0
 8004f14:	617b      	str	r3, [r7, #20]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	617b      	str	r3, [r7, #20]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	e000      	b.n	8004f2c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004f2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3730      	adds	r7, #48	; 0x30
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b088      	sub	sp, #32
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	603b      	str	r3, [r7, #0]
 8004f54:	4613      	mov	r3, r2
 8004f56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f58:	f7fe f85a 	bl	8003010 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f60:	1a9b      	subs	r3, r3, r2
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	4413      	add	r3, r2
 8004f66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f68:	f7fe f852 	bl	8003010 <HAL_GetTick>
 8004f6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f6e:	4b39      	ldr	r3, [pc, #228]	; (8005054 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	015b      	lsls	r3, r3, #5
 8004f74:	0d1b      	lsrs	r3, r3, #20
 8004f76:	69fa      	ldr	r2, [r7, #28]
 8004f78:	fb02 f303 	mul.w	r3, r2, r3
 8004f7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f7e:	e054      	b.n	800502a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f86:	d050      	beq.n	800502a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f88:	f7fe f842 	bl	8003010 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	69fa      	ldr	r2, [r7, #28]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d902      	bls.n	8004f9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d13d      	bne.n	800501a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fb6:	d111      	bne.n	8004fdc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fc0:	d004      	beq.n	8004fcc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fca:	d107      	bne.n	8004fdc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fe4:	d10f      	bne.n	8005006 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005004:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e017      	b.n	800504a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005020:	2300      	movs	r3, #0
 8005022:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	3b01      	subs	r3, #1
 8005028:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	4013      	ands	r3, r2
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	429a      	cmp	r2, r3
 8005038:	bf0c      	ite	eq
 800503a:	2301      	moveq	r3, #1
 800503c:	2300      	movne	r3, #0
 800503e:	b2db      	uxtb	r3, r3
 8005040:	461a      	mov	r2, r3
 8005042:	79fb      	ldrb	r3, [r7, #7]
 8005044:	429a      	cmp	r2, r3
 8005046:	d19b      	bne.n	8004f80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3720      	adds	r7, #32
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	2000005c 	.word	0x2000005c

08005058 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af02      	add	r7, sp, #8
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800506c:	d111      	bne.n	8005092 <SPI_EndRxTransaction+0x3a>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005076:	d004      	beq.n	8005082 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005080:	d107      	bne.n	8005092 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005090:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800509a:	d12a      	bne.n	80050f2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050a4:	d012      	beq.n	80050cc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	2200      	movs	r2, #0
 80050ae:	2180      	movs	r1, #128	; 0x80
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f7ff ff49 	bl	8004f48 <SPI_WaitFlagStateUntilTimeout>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d02d      	beq.n	8005118 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c0:	f043 0220 	orr.w	r2, r3, #32
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e026      	b.n	800511a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	2200      	movs	r2, #0
 80050d4:	2101      	movs	r1, #1
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f7ff ff36 	bl	8004f48 <SPI_WaitFlagStateUntilTimeout>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d01a      	beq.n	8005118 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e6:	f043 0220 	orr.w	r2, r3, #32
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e013      	b.n	800511a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	2200      	movs	r2, #0
 80050fa:	2101      	movs	r1, #1
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f7ff ff23 	bl	8004f48 <SPI_WaitFlagStateUntilTimeout>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d007      	beq.n	8005118 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510c:	f043 0220 	orr.w	r2, r3, #32
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e000      	b.n	800511a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
	...

08005124 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b088      	sub	sp, #32
 8005128:	af02      	add	r7, sp, #8
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005130:	4b1b      	ldr	r3, [pc, #108]	; (80051a0 <SPI_EndRxTxTransaction+0x7c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a1b      	ldr	r2, [pc, #108]	; (80051a4 <SPI_EndRxTxTransaction+0x80>)
 8005136:	fba2 2303 	umull	r2, r3, r2, r3
 800513a:	0d5b      	lsrs	r3, r3, #21
 800513c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005140:	fb02 f303 	mul.w	r3, r2, r3
 8005144:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800514e:	d112      	bne.n	8005176 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2200      	movs	r2, #0
 8005158:	2180      	movs	r1, #128	; 0x80
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f7ff fef4 	bl	8004f48 <SPI_WaitFlagStateUntilTimeout>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d016      	beq.n	8005194 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516a:	f043 0220 	orr.w	r2, r3, #32
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e00f      	b.n	8005196 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	3b01      	subs	r3, #1
 8005180:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800518c:	2b80      	cmp	r3, #128	; 0x80
 800518e:	d0f2      	beq.n	8005176 <SPI_EndRxTxTransaction+0x52>
 8005190:	e000      	b.n	8005194 <SPI_EndRxTxTransaction+0x70>
        break;
 8005192:	bf00      	nop
  }

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3718      	adds	r7, #24
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	2000005c 	.word	0x2000005c
 80051a4:	165e9f81 	.word	0x165e9f81

080051a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e041      	b.n	800523e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d106      	bne.n	80051d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7fd fdd6 	bl	8002d80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3304      	adds	r3, #4
 80051e4:	4619      	mov	r1, r3
 80051e6:	4610      	mov	r0, r2
 80051e8:	f000 fa88 	bl	80056fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b01      	cmp	r3, #1
 800525a:	d001      	beq.n	8005260 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e044      	b.n	80052ea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f042 0201 	orr.w	r2, r2, #1
 8005276:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a1e      	ldr	r2, [pc, #120]	; (80052f8 <HAL_TIM_Base_Start_IT+0xb0>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d018      	beq.n	80052b4 <HAL_TIM_Base_Start_IT+0x6c>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528a:	d013      	beq.n	80052b4 <HAL_TIM_Base_Start_IT+0x6c>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a1a      	ldr	r2, [pc, #104]	; (80052fc <HAL_TIM_Base_Start_IT+0xb4>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00e      	beq.n	80052b4 <HAL_TIM_Base_Start_IT+0x6c>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a19      	ldr	r2, [pc, #100]	; (8005300 <HAL_TIM_Base_Start_IT+0xb8>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d009      	beq.n	80052b4 <HAL_TIM_Base_Start_IT+0x6c>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a17      	ldr	r2, [pc, #92]	; (8005304 <HAL_TIM_Base_Start_IT+0xbc>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d004      	beq.n	80052b4 <HAL_TIM_Base_Start_IT+0x6c>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a16      	ldr	r2, [pc, #88]	; (8005308 <HAL_TIM_Base_Start_IT+0xc0>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d111      	bne.n	80052d8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2b06      	cmp	r3, #6
 80052c4:	d010      	beq.n	80052e8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f042 0201 	orr.w	r2, r2, #1
 80052d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d6:	e007      	b.n	80052e8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 0201 	orr.w	r2, r2, #1
 80052e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	40010000 	.word	0x40010000
 80052fc:	40000400 	.word	0x40000400
 8005300:	40000800 	.word	0x40000800
 8005304:	40000c00 	.word	0x40000c00
 8005308:	40014000 	.word	0x40014000

0800530c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b02      	cmp	r3, #2
 8005320:	d122      	bne.n	8005368 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	2b02      	cmp	r3, #2
 800532e:	d11b      	bne.n	8005368 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f06f 0202 	mvn.w	r2, #2
 8005338:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	f003 0303 	and.w	r3, r3, #3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f9b5 	bl	80056be <HAL_TIM_IC_CaptureCallback>
 8005354:	e005      	b.n	8005362 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f9a7 	bl	80056aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f9b8 	bl	80056d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	f003 0304 	and.w	r3, r3, #4
 8005372:	2b04      	cmp	r3, #4
 8005374:	d122      	bne.n	80053bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f003 0304 	and.w	r3, r3, #4
 8005380:	2b04      	cmp	r3, #4
 8005382:	d11b      	bne.n	80053bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f06f 0204 	mvn.w	r2, #4
 800538c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2202      	movs	r2, #2
 8005392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f98b 	bl	80056be <HAL_TIM_IC_CaptureCallback>
 80053a8:	e005      	b.n	80053b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f97d 	bl	80056aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f98e 	bl	80056d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	2b08      	cmp	r3, #8
 80053c8:	d122      	bne.n	8005410 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f003 0308 	and.w	r3, r3, #8
 80053d4:	2b08      	cmp	r3, #8
 80053d6:	d11b      	bne.n	8005410 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f06f 0208 	mvn.w	r2, #8
 80053e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2204      	movs	r2, #4
 80053e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	f003 0303 	and.w	r3, r3, #3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f961 	bl	80056be <HAL_TIM_IC_CaptureCallback>
 80053fc:	e005      	b.n	800540a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f953 	bl	80056aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 f964 	bl	80056d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f003 0310 	and.w	r3, r3, #16
 800541a:	2b10      	cmp	r3, #16
 800541c:	d122      	bne.n	8005464 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f003 0310 	and.w	r3, r3, #16
 8005428:	2b10      	cmp	r3, #16
 800542a:	d11b      	bne.n	8005464 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f06f 0210 	mvn.w	r2, #16
 8005434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2208      	movs	r2, #8
 800543a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f937 	bl	80056be <HAL_TIM_IC_CaptureCallback>
 8005450:	e005      	b.n	800545e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f929 	bl	80056aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f93a 	bl	80056d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b01      	cmp	r3, #1
 8005470:	d10e      	bne.n	8005490 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b01      	cmp	r3, #1
 800547e:	d107      	bne.n	8005490 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f06f 0201 	mvn.w	r2, #1
 8005488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7fb feae 	bl	80011ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549a:	2b80      	cmp	r3, #128	; 0x80
 800549c:	d10e      	bne.n	80054bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a8:	2b80      	cmp	r3, #128	; 0x80
 80054aa:	d107      	bne.n	80054bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fab2 	bl	8005a20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c6:	2b40      	cmp	r3, #64	; 0x40
 80054c8:	d10e      	bne.n	80054e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d4:	2b40      	cmp	r3, #64	; 0x40
 80054d6:	d107      	bne.n	80054e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f8ff 	bl	80056e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	f003 0320 	and.w	r3, r3, #32
 80054f2:	2b20      	cmp	r3, #32
 80054f4:	d10e      	bne.n	8005514 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b20      	cmp	r3, #32
 8005502:	d107      	bne.n	8005514 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f06f 0220 	mvn.w	r2, #32
 800550c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fa7c 	bl	8005a0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005514:	bf00      	nop
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005526:	2300      	movs	r3, #0
 8005528:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005530:	2b01      	cmp	r3, #1
 8005532:	d101      	bne.n	8005538 <HAL_TIM_ConfigClockSource+0x1c>
 8005534:	2302      	movs	r3, #2
 8005536:	e0b4      	b.n	80056a2 <HAL_TIM_ConfigClockSource+0x186>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005556:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800555e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005570:	d03e      	beq.n	80055f0 <HAL_TIM_ConfigClockSource+0xd4>
 8005572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005576:	f200 8087 	bhi.w	8005688 <HAL_TIM_ConfigClockSource+0x16c>
 800557a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800557e:	f000 8086 	beq.w	800568e <HAL_TIM_ConfigClockSource+0x172>
 8005582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005586:	d87f      	bhi.n	8005688 <HAL_TIM_ConfigClockSource+0x16c>
 8005588:	2b70      	cmp	r3, #112	; 0x70
 800558a:	d01a      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0xa6>
 800558c:	2b70      	cmp	r3, #112	; 0x70
 800558e:	d87b      	bhi.n	8005688 <HAL_TIM_ConfigClockSource+0x16c>
 8005590:	2b60      	cmp	r3, #96	; 0x60
 8005592:	d050      	beq.n	8005636 <HAL_TIM_ConfigClockSource+0x11a>
 8005594:	2b60      	cmp	r3, #96	; 0x60
 8005596:	d877      	bhi.n	8005688 <HAL_TIM_ConfigClockSource+0x16c>
 8005598:	2b50      	cmp	r3, #80	; 0x50
 800559a:	d03c      	beq.n	8005616 <HAL_TIM_ConfigClockSource+0xfa>
 800559c:	2b50      	cmp	r3, #80	; 0x50
 800559e:	d873      	bhi.n	8005688 <HAL_TIM_ConfigClockSource+0x16c>
 80055a0:	2b40      	cmp	r3, #64	; 0x40
 80055a2:	d058      	beq.n	8005656 <HAL_TIM_ConfigClockSource+0x13a>
 80055a4:	2b40      	cmp	r3, #64	; 0x40
 80055a6:	d86f      	bhi.n	8005688 <HAL_TIM_ConfigClockSource+0x16c>
 80055a8:	2b30      	cmp	r3, #48	; 0x30
 80055aa:	d064      	beq.n	8005676 <HAL_TIM_ConfigClockSource+0x15a>
 80055ac:	2b30      	cmp	r3, #48	; 0x30
 80055ae:	d86b      	bhi.n	8005688 <HAL_TIM_ConfigClockSource+0x16c>
 80055b0:	2b20      	cmp	r3, #32
 80055b2:	d060      	beq.n	8005676 <HAL_TIM_ConfigClockSource+0x15a>
 80055b4:	2b20      	cmp	r3, #32
 80055b6:	d867      	bhi.n	8005688 <HAL_TIM_ConfigClockSource+0x16c>
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d05c      	beq.n	8005676 <HAL_TIM_ConfigClockSource+0x15a>
 80055bc:	2b10      	cmp	r3, #16
 80055be:	d05a      	beq.n	8005676 <HAL_TIM_ConfigClockSource+0x15a>
 80055c0:	e062      	b.n	8005688 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	6899      	ldr	r1, [r3, #8]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f000 f98d 	bl	80058f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	609a      	str	r2, [r3, #8]
      break;
 80055ee:	e04f      	b.n	8005690 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6818      	ldr	r0, [r3, #0]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	6899      	ldr	r1, [r3, #8]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f000 f976 	bl	80058f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689a      	ldr	r2, [r3, #8]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005612:	609a      	str	r2, [r3, #8]
      break;
 8005614:	e03c      	b.n	8005690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6818      	ldr	r0, [r3, #0]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	6859      	ldr	r1, [r3, #4]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	461a      	mov	r2, r3
 8005624:	f000 f8ea 	bl	80057fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2150      	movs	r1, #80	; 0x50
 800562e:	4618      	mov	r0, r3
 8005630:	f000 f943 	bl	80058ba <TIM_ITRx_SetConfig>
      break;
 8005634:	e02c      	b.n	8005690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6818      	ldr	r0, [r3, #0]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	6859      	ldr	r1, [r3, #4]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	461a      	mov	r2, r3
 8005644:	f000 f909 	bl	800585a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2160      	movs	r1, #96	; 0x60
 800564e:	4618      	mov	r0, r3
 8005650:	f000 f933 	bl	80058ba <TIM_ITRx_SetConfig>
      break;
 8005654:	e01c      	b.n	8005690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6818      	ldr	r0, [r3, #0]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	6859      	ldr	r1, [r3, #4]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	461a      	mov	r2, r3
 8005664:	f000 f8ca 	bl	80057fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2140      	movs	r1, #64	; 0x40
 800566e:	4618      	mov	r0, r3
 8005670:	f000 f923 	bl	80058ba <TIM_ITRx_SetConfig>
      break;
 8005674:	e00c      	b.n	8005690 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4619      	mov	r1, r3
 8005680:	4610      	mov	r0, r2
 8005682:	f000 f91a 	bl	80058ba <TIM_ITRx_SetConfig>
      break;
 8005686:	e003      	b.n	8005690 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	73fb      	strb	r3, [r7, #15]
      break;
 800568c:	e000      	b.n	8005690 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800568e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr

080056d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b083      	sub	sp, #12
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056da:	bf00      	nop
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b083      	sub	sp, #12
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056ee:	bf00      	nop
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
	...

080056fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a34      	ldr	r2, [pc, #208]	; (80057e0 <TIM_Base_SetConfig+0xe4>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d00f      	beq.n	8005734 <TIM_Base_SetConfig+0x38>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800571a:	d00b      	beq.n	8005734 <TIM_Base_SetConfig+0x38>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a31      	ldr	r2, [pc, #196]	; (80057e4 <TIM_Base_SetConfig+0xe8>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d007      	beq.n	8005734 <TIM_Base_SetConfig+0x38>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a30      	ldr	r2, [pc, #192]	; (80057e8 <TIM_Base_SetConfig+0xec>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d003      	beq.n	8005734 <TIM_Base_SetConfig+0x38>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a2f      	ldr	r2, [pc, #188]	; (80057ec <TIM_Base_SetConfig+0xf0>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d108      	bne.n	8005746 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a25      	ldr	r2, [pc, #148]	; (80057e0 <TIM_Base_SetConfig+0xe4>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d01b      	beq.n	8005786 <TIM_Base_SetConfig+0x8a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005754:	d017      	beq.n	8005786 <TIM_Base_SetConfig+0x8a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a22      	ldr	r2, [pc, #136]	; (80057e4 <TIM_Base_SetConfig+0xe8>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d013      	beq.n	8005786 <TIM_Base_SetConfig+0x8a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a21      	ldr	r2, [pc, #132]	; (80057e8 <TIM_Base_SetConfig+0xec>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d00f      	beq.n	8005786 <TIM_Base_SetConfig+0x8a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a20      	ldr	r2, [pc, #128]	; (80057ec <TIM_Base_SetConfig+0xf0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00b      	beq.n	8005786 <TIM_Base_SetConfig+0x8a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a1f      	ldr	r2, [pc, #124]	; (80057f0 <TIM_Base_SetConfig+0xf4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d007      	beq.n	8005786 <TIM_Base_SetConfig+0x8a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a1e      	ldr	r2, [pc, #120]	; (80057f4 <TIM_Base_SetConfig+0xf8>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d003      	beq.n	8005786 <TIM_Base_SetConfig+0x8a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a1d      	ldr	r2, [pc, #116]	; (80057f8 <TIM_Base_SetConfig+0xfc>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d108      	bne.n	8005798 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800578c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4313      	orrs	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a08      	ldr	r2, [pc, #32]	; (80057e0 <TIM_Base_SetConfig+0xe4>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d103      	bne.n	80057cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	691a      	ldr	r2, [r3, #16]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	615a      	str	r2, [r3, #20]
}
 80057d2:	bf00      	nop
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	40010000 	.word	0x40010000
 80057e4:	40000400 	.word	0x40000400
 80057e8:	40000800 	.word	0x40000800
 80057ec:	40000c00 	.word	0x40000c00
 80057f0:	40014000 	.word	0x40014000
 80057f4:	40014400 	.word	0x40014400
 80057f8:	40014800 	.word	0x40014800

080057fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	f023 0201 	bic.w	r2, r3, #1
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	011b      	lsls	r3, r3, #4
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	4313      	orrs	r3, r2
 8005830:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f023 030a 	bic.w	r3, r3, #10
 8005838:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	4313      	orrs	r3, r2
 8005840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	621a      	str	r2, [r3, #32]
}
 800584e:	bf00      	nop
 8005850:	371c      	adds	r7, #28
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800585a:	b480      	push	{r7}
 800585c:	b087      	sub	sp, #28
 800585e:	af00      	add	r7, sp, #0
 8005860:	60f8      	str	r0, [r7, #12]
 8005862:	60b9      	str	r1, [r7, #8]
 8005864:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	f023 0210 	bic.w	r2, r3, #16
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005884:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	031b      	lsls	r3, r3, #12
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	4313      	orrs	r3, r2
 800588e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005896:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	011b      	lsls	r3, r3, #4
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4313      	orrs	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	621a      	str	r2, [r3, #32]
}
 80058ae:	bf00      	nop
 80058b0:	371c      	adds	r7, #28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b085      	sub	sp, #20
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
 80058c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	f043 0307 	orr.w	r3, r3, #7
 80058dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	609a      	str	r2, [r3, #8]
}
 80058e4:	bf00      	nop
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
 80058fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800590a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	021a      	lsls	r2, r3, #8
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	431a      	orrs	r2, r3
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	4313      	orrs	r3, r2
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	4313      	orrs	r3, r2
 800591c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	609a      	str	r2, [r3, #8]
}
 8005924:	bf00      	nop
 8005926:	371c      	adds	r7, #28
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005940:	2b01      	cmp	r3, #1
 8005942:	d101      	bne.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005944:	2302      	movs	r3, #2
 8005946:	e050      	b.n	80059ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a1c      	ldr	r2, [pc, #112]	; (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d018      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005994:	d013      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a18      	ldr	r2, [pc, #96]	; (80059fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d00e      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a16      	ldr	r2, [pc, #88]	; (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d009      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a15      	ldr	r2, [pc, #84]	; (8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d004      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a13      	ldr	r2, [pc, #76]	; (8005a08 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d10c      	bne.n	80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40010000 	.word	0x40010000
 80059fc:	40000400 	.word	0x40000400
 8005a00:	40000800 	.word	0x40000800
 8005a04:	40000c00 	.word	0x40000c00
 8005a08:	40014000 	.word	0x40014000

08005a0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e03f      	b.n	8005ac6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7fd fa00 	bl	8002e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2224      	movs	r2, #36	; 0x24
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68da      	ldr	r2, [r3, #12]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f929 	bl	8005cd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	691a      	ldr	r2, [r3, #16]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	695a      	ldr	r2, [r3, #20]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68da      	ldr	r2, [r3, #12]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005aac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b08a      	sub	sp, #40	; 0x28
 8005ad2:	af02      	add	r7, sp, #8
 8005ad4:	60f8      	str	r0, [r7, #12]
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	603b      	str	r3, [r7, #0]
 8005ada:	4613      	mov	r3, r2
 8005adc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b20      	cmp	r3, #32
 8005aec:	d17c      	bne.n	8005be8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d002      	beq.n	8005afa <HAL_UART_Transmit+0x2c>
 8005af4:	88fb      	ldrh	r3, [r7, #6]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e075      	b.n	8005bea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d101      	bne.n	8005b0c <HAL_UART_Transmit+0x3e>
 8005b08:	2302      	movs	r3, #2
 8005b0a:	e06e      	b.n	8005bea <HAL_UART_Transmit+0x11c>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2221      	movs	r2, #33	; 0x21
 8005b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b22:	f7fd fa75 	bl	8003010 <HAL_GetTick>
 8005b26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	88fa      	ldrh	r2, [r7, #6]
 8005b2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	88fa      	ldrh	r2, [r7, #6]
 8005b32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b3c:	d108      	bne.n	8005b50 <HAL_UART_Transmit+0x82>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d104      	bne.n	8005b50 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	61bb      	str	r3, [r7, #24]
 8005b4e:	e003      	b.n	8005b58 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b54:	2300      	movs	r3, #0
 8005b56:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005b60:	e02a      	b.n	8005bb8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	2180      	movs	r1, #128	; 0x80
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f000 f840 	bl	8005bf2 <UART_WaitOnFlagUntilTimeout>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d001      	beq.n	8005b7c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e036      	b.n	8005bea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10b      	bne.n	8005b9a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	3302      	adds	r3, #2
 8005b96:	61bb      	str	r3, [r7, #24]
 8005b98:	e007      	b.n	8005baa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	781a      	ldrb	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1cf      	bne.n	8005b62 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	2140      	movs	r1, #64	; 0x40
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 f810 	bl	8005bf2 <UART_WaitOnFlagUntilTimeout>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e006      	b.n	8005bea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2220      	movs	r2, #32
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005be4:	2300      	movs	r3, #0
 8005be6:	e000      	b.n	8005bea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005be8:	2302      	movs	r3, #2
  }
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3720      	adds	r7, #32
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b090      	sub	sp, #64	; 0x40
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	60f8      	str	r0, [r7, #12]
 8005bfa:	60b9      	str	r1, [r7, #8]
 8005bfc:	603b      	str	r3, [r7, #0]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c02:	e050      	b.n	8005ca6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0a:	d04c      	beq.n	8005ca6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d007      	beq.n	8005c22 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c12:	f7fd f9fd 	bl	8003010 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d241      	bcs.n	8005ca6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	330c      	adds	r3, #12
 8005c28:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2c:	e853 3f00 	ldrex	r3, [r3]
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	330c      	adds	r3, #12
 8005c40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c42:	637a      	str	r2, [r7, #52]	; 0x34
 8005c44:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c4a:	e841 2300 	strex	r3, r2, [r1]
 8005c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1e5      	bne.n	8005c22 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	3314      	adds	r3, #20
 8005c5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	e853 3f00 	ldrex	r3, [r3]
 8005c64:	613b      	str	r3, [r7, #16]
   return(result);
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f023 0301 	bic.w	r3, r3, #1
 8005c6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	3314      	adds	r3, #20
 8005c74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c76:	623a      	str	r2, [r7, #32]
 8005c78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7a:	69f9      	ldr	r1, [r7, #28]
 8005c7c:	6a3a      	ldr	r2, [r7, #32]
 8005c7e:	e841 2300 	strex	r3, r2, [r1]
 8005c82:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1e5      	bne.n	8005c56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2220      	movs	r2, #32
 8005c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e00f      	b.n	8005cc6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	4013      	ands	r3, r2
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	bf0c      	ite	eq
 8005cb6:	2301      	moveq	r3, #1
 8005cb8:	2300      	movne	r3, #0
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	79fb      	ldrb	r3, [r7, #7]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d09f      	beq.n	8005c04 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3740      	adds	r7, #64	; 0x40
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
	...

08005cd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cd4:	b0c0      	sub	sp, #256	; 0x100
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cec:	68d9      	ldr	r1, [r3, #12]
 8005cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	ea40 0301 	orr.w	r3, r0, r1
 8005cf8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	431a      	orrs	r2, r3
 8005d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d28:	f021 010c 	bic.w	r1, r1, #12
 8005d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d36:	430b      	orrs	r3, r1
 8005d38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d4a:	6999      	ldr	r1, [r3, #24]
 8005d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	ea40 0301 	orr.w	r3, r0, r1
 8005d56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	4b8f      	ldr	r3, [pc, #572]	; (8005f9c <UART_SetConfig+0x2cc>)
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d005      	beq.n	8005d70 <UART_SetConfig+0xa0>
 8005d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	4b8d      	ldr	r3, [pc, #564]	; (8005fa0 <UART_SetConfig+0x2d0>)
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d104      	bne.n	8005d7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d70:	f7fe f872 	bl	8003e58 <HAL_RCC_GetPCLK2Freq>
 8005d74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005d78:	e003      	b.n	8005d82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d7a:	f7fe f859 	bl	8003e30 <HAL_RCC_GetPCLK1Freq>
 8005d7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d86:	69db      	ldr	r3, [r3, #28]
 8005d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d8c:	f040 810c 	bne.w	8005fa8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d94:	2200      	movs	r2, #0
 8005d96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005d9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005da2:	4622      	mov	r2, r4
 8005da4:	462b      	mov	r3, r5
 8005da6:	1891      	adds	r1, r2, r2
 8005da8:	65b9      	str	r1, [r7, #88]	; 0x58
 8005daa:	415b      	adcs	r3, r3
 8005dac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005db2:	4621      	mov	r1, r4
 8005db4:	eb12 0801 	adds.w	r8, r2, r1
 8005db8:	4629      	mov	r1, r5
 8005dba:	eb43 0901 	adc.w	r9, r3, r1
 8005dbe:	f04f 0200 	mov.w	r2, #0
 8005dc2:	f04f 0300 	mov.w	r3, #0
 8005dc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dd2:	4690      	mov	r8, r2
 8005dd4:	4699      	mov	r9, r3
 8005dd6:	4623      	mov	r3, r4
 8005dd8:	eb18 0303 	adds.w	r3, r8, r3
 8005ddc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005de0:	462b      	mov	r3, r5
 8005de2:	eb49 0303 	adc.w	r3, r9, r3
 8005de6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005df6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005dfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005dfe:	460b      	mov	r3, r1
 8005e00:	18db      	adds	r3, r3, r3
 8005e02:	653b      	str	r3, [r7, #80]	; 0x50
 8005e04:	4613      	mov	r3, r2
 8005e06:	eb42 0303 	adc.w	r3, r2, r3
 8005e0a:	657b      	str	r3, [r7, #84]	; 0x54
 8005e0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005e10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005e14:	f7fa fa3c 	bl	8000290 <__aeabi_uldivmod>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	4b61      	ldr	r3, [pc, #388]	; (8005fa4 <UART_SetConfig+0x2d4>)
 8005e1e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e22:	095b      	lsrs	r3, r3, #5
 8005e24:	011c      	lsls	r4, r3, #4
 8005e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e38:	4642      	mov	r2, r8
 8005e3a:	464b      	mov	r3, r9
 8005e3c:	1891      	adds	r1, r2, r2
 8005e3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005e40:	415b      	adcs	r3, r3
 8005e42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005e48:	4641      	mov	r1, r8
 8005e4a:	eb12 0a01 	adds.w	sl, r2, r1
 8005e4e:	4649      	mov	r1, r9
 8005e50:	eb43 0b01 	adc.w	fp, r3, r1
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	f04f 0300 	mov.w	r3, #0
 8005e5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e68:	4692      	mov	sl, r2
 8005e6a:	469b      	mov	fp, r3
 8005e6c:	4643      	mov	r3, r8
 8005e6e:	eb1a 0303 	adds.w	r3, sl, r3
 8005e72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e76:	464b      	mov	r3, r9
 8005e78:	eb4b 0303 	adc.w	r3, fp, r3
 8005e7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005e90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005e94:	460b      	mov	r3, r1
 8005e96:	18db      	adds	r3, r3, r3
 8005e98:	643b      	str	r3, [r7, #64]	; 0x40
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	eb42 0303 	adc.w	r3, r2, r3
 8005ea0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ea2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ea6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005eaa:	f7fa f9f1 	bl	8000290 <__aeabi_uldivmod>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	4611      	mov	r1, r2
 8005eb4:	4b3b      	ldr	r3, [pc, #236]	; (8005fa4 <UART_SetConfig+0x2d4>)
 8005eb6:	fba3 2301 	umull	r2, r3, r3, r1
 8005eba:	095b      	lsrs	r3, r3, #5
 8005ebc:	2264      	movs	r2, #100	; 0x64
 8005ebe:	fb02 f303 	mul.w	r3, r2, r3
 8005ec2:	1acb      	subs	r3, r1, r3
 8005ec4:	00db      	lsls	r3, r3, #3
 8005ec6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005eca:	4b36      	ldr	r3, [pc, #216]	; (8005fa4 <UART_SetConfig+0x2d4>)
 8005ecc:	fba3 2302 	umull	r2, r3, r3, r2
 8005ed0:	095b      	lsrs	r3, r3, #5
 8005ed2:	005b      	lsls	r3, r3, #1
 8005ed4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ed8:	441c      	add	r4, r3
 8005eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ee4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ee8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005eec:	4642      	mov	r2, r8
 8005eee:	464b      	mov	r3, r9
 8005ef0:	1891      	adds	r1, r2, r2
 8005ef2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ef4:	415b      	adcs	r3, r3
 8005ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ef8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005efc:	4641      	mov	r1, r8
 8005efe:	1851      	adds	r1, r2, r1
 8005f00:	6339      	str	r1, [r7, #48]	; 0x30
 8005f02:	4649      	mov	r1, r9
 8005f04:	414b      	adcs	r3, r1
 8005f06:	637b      	str	r3, [r7, #52]	; 0x34
 8005f08:	f04f 0200 	mov.w	r2, #0
 8005f0c:	f04f 0300 	mov.w	r3, #0
 8005f10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005f14:	4659      	mov	r1, fp
 8005f16:	00cb      	lsls	r3, r1, #3
 8005f18:	4651      	mov	r1, sl
 8005f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f1e:	4651      	mov	r1, sl
 8005f20:	00ca      	lsls	r2, r1, #3
 8005f22:	4610      	mov	r0, r2
 8005f24:	4619      	mov	r1, r3
 8005f26:	4603      	mov	r3, r0
 8005f28:	4642      	mov	r2, r8
 8005f2a:	189b      	adds	r3, r3, r2
 8005f2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f30:	464b      	mov	r3, r9
 8005f32:	460a      	mov	r2, r1
 8005f34:	eb42 0303 	adc.w	r3, r2, r3
 8005f38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005f4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f50:	460b      	mov	r3, r1
 8005f52:	18db      	adds	r3, r3, r3
 8005f54:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f56:	4613      	mov	r3, r2
 8005f58:	eb42 0303 	adc.w	r3, r2, r3
 8005f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005f66:	f7fa f993 	bl	8000290 <__aeabi_uldivmod>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	4b0d      	ldr	r3, [pc, #52]	; (8005fa4 <UART_SetConfig+0x2d4>)
 8005f70:	fba3 1302 	umull	r1, r3, r3, r2
 8005f74:	095b      	lsrs	r3, r3, #5
 8005f76:	2164      	movs	r1, #100	; 0x64
 8005f78:	fb01 f303 	mul.w	r3, r1, r3
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	3332      	adds	r3, #50	; 0x32
 8005f82:	4a08      	ldr	r2, [pc, #32]	; (8005fa4 <UART_SetConfig+0x2d4>)
 8005f84:	fba2 2303 	umull	r2, r3, r2, r3
 8005f88:	095b      	lsrs	r3, r3, #5
 8005f8a:	f003 0207 	and.w	r2, r3, #7
 8005f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4422      	add	r2, r4
 8005f96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f98:	e105      	b.n	80061a6 <UART_SetConfig+0x4d6>
 8005f9a:	bf00      	nop
 8005f9c:	40011000 	.word	0x40011000
 8005fa0:	40011400 	.word	0x40011400
 8005fa4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fac:	2200      	movs	r2, #0
 8005fae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005fb2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005fb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005fba:	4642      	mov	r2, r8
 8005fbc:	464b      	mov	r3, r9
 8005fbe:	1891      	adds	r1, r2, r2
 8005fc0:	6239      	str	r1, [r7, #32]
 8005fc2:	415b      	adcs	r3, r3
 8005fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8005fc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005fca:	4641      	mov	r1, r8
 8005fcc:	1854      	adds	r4, r2, r1
 8005fce:	4649      	mov	r1, r9
 8005fd0:	eb43 0501 	adc.w	r5, r3, r1
 8005fd4:	f04f 0200 	mov.w	r2, #0
 8005fd8:	f04f 0300 	mov.w	r3, #0
 8005fdc:	00eb      	lsls	r3, r5, #3
 8005fde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fe2:	00e2      	lsls	r2, r4, #3
 8005fe4:	4614      	mov	r4, r2
 8005fe6:	461d      	mov	r5, r3
 8005fe8:	4643      	mov	r3, r8
 8005fea:	18e3      	adds	r3, r4, r3
 8005fec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ff0:	464b      	mov	r3, r9
 8005ff2:	eb45 0303 	adc.w	r3, r5, r3
 8005ff6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006006:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800600a:	f04f 0200 	mov.w	r2, #0
 800600e:	f04f 0300 	mov.w	r3, #0
 8006012:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006016:	4629      	mov	r1, r5
 8006018:	008b      	lsls	r3, r1, #2
 800601a:	4621      	mov	r1, r4
 800601c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006020:	4621      	mov	r1, r4
 8006022:	008a      	lsls	r2, r1, #2
 8006024:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006028:	f7fa f932 	bl	8000290 <__aeabi_uldivmod>
 800602c:	4602      	mov	r2, r0
 800602e:	460b      	mov	r3, r1
 8006030:	4b60      	ldr	r3, [pc, #384]	; (80061b4 <UART_SetConfig+0x4e4>)
 8006032:	fba3 2302 	umull	r2, r3, r3, r2
 8006036:	095b      	lsrs	r3, r3, #5
 8006038:	011c      	lsls	r4, r3, #4
 800603a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800603e:	2200      	movs	r2, #0
 8006040:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006044:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006048:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800604c:	4642      	mov	r2, r8
 800604e:	464b      	mov	r3, r9
 8006050:	1891      	adds	r1, r2, r2
 8006052:	61b9      	str	r1, [r7, #24]
 8006054:	415b      	adcs	r3, r3
 8006056:	61fb      	str	r3, [r7, #28]
 8006058:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800605c:	4641      	mov	r1, r8
 800605e:	1851      	adds	r1, r2, r1
 8006060:	6139      	str	r1, [r7, #16]
 8006062:	4649      	mov	r1, r9
 8006064:	414b      	adcs	r3, r1
 8006066:	617b      	str	r3, [r7, #20]
 8006068:	f04f 0200 	mov.w	r2, #0
 800606c:	f04f 0300 	mov.w	r3, #0
 8006070:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006074:	4659      	mov	r1, fp
 8006076:	00cb      	lsls	r3, r1, #3
 8006078:	4651      	mov	r1, sl
 800607a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800607e:	4651      	mov	r1, sl
 8006080:	00ca      	lsls	r2, r1, #3
 8006082:	4610      	mov	r0, r2
 8006084:	4619      	mov	r1, r3
 8006086:	4603      	mov	r3, r0
 8006088:	4642      	mov	r2, r8
 800608a:	189b      	adds	r3, r3, r2
 800608c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006090:	464b      	mov	r3, r9
 8006092:	460a      	mov	r2, r1
 8006094:	eb42 0303 	adc.w	r3, r2, r3
 8006098:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800609c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80060a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80060a8:	f04f 0200 	mov.w	r2, #0
 80060ac:	f04f 0300 	mov.w	r3, #0
 80060b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80060b4:	4649      	mov	r1, r9
 80060b6:	008b      	lsls	r3, r1, #2
 80060b8:	4641      	mov	r1, r8
 80060ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060be:	4641      	mov	r1, r8
 80060c0:	008a      	lsls	r2, r1, #2
 80060c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80060c6:	f7fa f8e3 	bl	8000290 <__aeabi_uldivmod>
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	4b39      	ldr	r3, [pc, #228]	; (80061b4 <UART_SetConfig+0x4e4>)
 80060d0:	fba3 1302 	umull	r1, r3, r3, r2
 80060d4:	095b      	lsrs	r3, r3, #5
 80060d6:	2164      	movs	r1, #100	; 0x64
 80060d8:	fb01 f303 	mul.w	r3, r1, r3
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	011b      	lsls	r3, r3, #4
 80060e0:	3332      	adds	r3, #50	; 0x32
 80060e2:	4a34      	ldr	r2, [pc, #208]	; (80061b4 <UART_SetConfig+0x4e4>)
 80060e4:	fba2 2303 	umull	r2, r3, r2, r3
 80060e8:	095b      	lsrs	r3, r3, #5
 80060ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060ee:	441c      	add	r4, r3
 80060f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060f4:	2200      	movs	r2, #0
 80060f6:	673b      	str	r3, [r7, #112]	; 0x70
 80060f8:	677a      	str	r2, [r7, #116]	; 0x74
 80060fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80060fe:	4642      	mov	r2, r8
 8006100:	464b      	mov	r3, r9
 8006102:	1891      	adds	r1, r2, r2
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	415b      	adcs	r3, r3
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800610e:	4641      	mov	r1, r8
 8006110:	1851      	adds	r1, r2, r1
 8006112:	6039      	str	r1, [r7, #0]
 8006114:	4649      	mov	r1, r9
 8006116:	414b      	adcs	r3, r1
 8006118:	607b      	str	r3, [r7, #4]
 800611a:	f04f 0200 	mov.w	r2, #0
 800611e:	f04f 0300 	mov.w	r3, #0
 8006122:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006126:	4659      	mov	r1, fp
 8006128:	00cb      	lsls	r3, r1, #3
 800612a:	4651      	mov	r1, sl
 800612c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006130:	4651      	mov	r1, sl
 8006132:	00ca      	lsls	r2, r1, #3
 8006134:	4610      	mov	r0, r2
 8006136:	4619      	mov	r1, r3
 8006138:	4603      	mov	r3, r0
 800613a:	4642      	mov	r2, r8
 800613c:	189b      	adds	r3, r3, r2
 800613e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006140:	464b      	mov	r3, r9
 8006142:	460a      	mov	r2, r1
 8006144:	eb42 0303 	adc.w	r3, r2, r3
 8006148:	66fb      	str	r3, [r7, #108]	; 0x6c
 800614a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	663b      	str	r3, [r7, #96]	; 0x60
 8006154:	667a      	str	r2, [r7, #100]	; 0x64
 8006156:	f04f 0200 	mov.w	r2, #0
 800615a:	f04f 0300 	mov.w	r3, #0
 800615e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006162:	4649      	mov	r1, r9
 8006164:	008b      	lsls	r3, r1, #2
 8006166:	4641      	mov	r1, r8
 8006168:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800616c:	4641      	mov	r1, r8
 800616e:	008a      	lsls	r2, r1, #2
 8006170:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006174:	f7fa f88c 	bl	8000290 <__aeabi_uldivmod>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	4b0d      	ldr	r3, [pc, #52]	; (80061b4 <UART_SetConfig+0x4e4>)
 800617e:	fba3 1302 	umull	r1, r3, r3, r2
 8006182:	095b      	lsrs	r3, r3, #5
 8006184:	2164      	movs	r1, #100	; 0x64
 8006186:	fb01 f303 	mul.w	r3, r1, r3
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	011b      	lsls	r3, r3, #4
 800618e:	3332      	adds	r3, #50	; 0x32
 8006190:	4a08      	ldr	r2, [pc, #32]	; (80061b4 <UART_SetConfig+0x4e4>)
 8006192:	fba2 2303 	umull	r2, r3, r2, r3
 8006196:	095b      	lsrs	r3, r3, #5
 8006198:	f003 020f 	and.w	r2, r3, #15
 800619c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4422      	add	r2, r4
 80061a4:	609a      	str	r2, [r3, #8]
}
 80061a6:	bf00      	nop
 80061a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80061ac:	46bd      	mov	sp, r7
 80061ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061b2:	bf00      	nop
 80061b4:	51eb851f 	.word	0x51eb851f

080061b8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80061bc:	4904      	ldr	r1, [pc, #16]	; (80061d0 <MX_FATFS_Init+0x18>)
 80061be:	4805      	ldr	r0, [pc, #20]	; (80061d4 <MX_FATFS_Init+0x1c>)
 80061c0:	f003 fe9c 	bl	8009efc <FATFS_LinkDriver>
 80061c4:	4603      	mov	r3, r0
 80061c6:	461a      	mov	r2, r3
 80061c8:	4b03      	ldr	r3, [pc, #12]	; (80061d8 <MX_FATFS_Init+0x20>)
 80061ca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80061cc:	bf00      	nop
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	2000351c 	.word	0x2000351c
 80061d4:	20000068 	.word	0x20000068
 80061d8:	20003518 	.word	0x20003518

080061dc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80061dc:	b480      	push	{r7}
 80061de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80061e0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	4603      	mov	r3, r0
 80061f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80061f6:	79fb      	ldrb	r3, [r7, #7]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fa fb83 	bl	8000904 <SD_disk_initialize>
 80061fe:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006200:	4618      	mov	r0, r3
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	4603      	mov	r3, r0
 8006210:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8006212:	79fb      	ldrb	r3, [r7, #7]
 8006214:	4618      	mov	r0, r3
 8006216:	f7fa fc5b 	bl	8000ad0 <SD_disk_status>
 800621a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800621c:	4618      	mov	r0, r3
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	60b9      	str	r1, [r7, #8]
 800622c:	607a      	str	r2, [r7, #4]
 800622e:	603b      	str	r3, [r7, #0]
 8006230:	4603      	mov	r3, r0
 8006232:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8006234:	7bf8      	ldrb	r0, [r7, #15]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	68b9      	ldr	r1, [r7, #8]
 800623c:	f7fa fc5e 	bl	8000afc <SD_disk_read>
 8006240:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b084      	sub	sp, #16
 800624e:	af00      	add	r7, sp, #0
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
 8006254:	603b      	str	r3, [r7, #0]
 8006256:	4603      	mov	r3, r0
 8006258:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800625a:	7bf8      	ldrb	r0, [r7, #15]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	68b9      	ldr	r1, [r7, #8]
 8006262:	f7fa fcb5 	bl	8000bd0 <SD_disk_write>
 8006266:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	4603      	mov	r3, r0
 8006278:	603a      	str	r2, [r7, #0]
 800627a:	71fb      	strb	r3, [r7, #7]
 800627c:	460b      	mov	r3, r1
 800627e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006280:	79b9      	ldrb	r1, [r7, #6]
 8006282:	79fb      	ldrb	r3, [r7, #7]
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	4618      	mov	r0, r3
 8006288:	f7fa fd26 	bl	8000cd8 <SD_disk_ioctl>
 800628c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800628e:	4618      	mov	r0, r3
 8006290:	3708      	adds	r7, #8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
	...

08006298 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	4603      	mov	r3, r0
 80062a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80062a2:	79fb      	ldrb	r3, [r7, #7]
 80062a4:	4a08      	ldr	r2, [pc, #32]	; (80062c8 <disk_status+0x30>)
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	79fa      	ldrb	r2, [r7, #7]
 80062b0:	4905      	ldr	r1, [pc, #20]	; (80062c8 <disk_status+0x30>)
 80062b2:	440a      	add	r2, r1
 80062b4:	7a12      	ldrb	r2, [r2, #8]
 80062b6:	4610      	mov	r0, r2
 80062b8:	4798      	blx	r3
 80062ba:	4603      	mov	r3, r0
 80062bc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80062be:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	20003748 	.word	0x20003748

080062cc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	4603      	mov	r3, r0
 80062d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80062d6:	2300      	movs	r3, #0
 80062d8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80062da:	79fb      	ldrb	r3, [r7, #7]
 80062dc:	4a0d      	ldr	r2, [pc, #52]	; (8006314 <disk_initialize+0x48>)
 80062de:	5cd3      	ldrb	r3, [r2, r3]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d111      	bne.n	8006308 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80062e4:	79fb      	ldrb	r3, [r7, #7]
 80062e6:	4a0b      	ldr	r2, [pc, #44]	; (8006314 <disk_initialize+0x48>)
 80062e8:	2101      	movs	r1, #1
 80062ea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80062ec:	79fb      	ldrb	r3, [r7, #7]
 80062ee:	4a09      	ldr	r2, [pc, #36]	; (8006314 <disk_initialize+0x48>)
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	79fa      	ldrb	r2, [r7, #7]
 80062fa:	4906      	ldr	r1, [pc, #24]	; (8006314 <disk_initialize+0x48>)
 80062fc:	440a      	add	r2, r1
 80062fe:	7a12      	ldrb	r2, [r2, #8]
 8006300:	4610      	mov	r0, r2
 8006302:	4798      	blx	r3
 8006304:	4603      	mov	r3, r0
 8006306:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006308:	7bfb      	ldrb	r3, [r7, #15]
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	20003748 	.word	0x20003748

08006318 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006318:	b590      	push	{r4, r7, lr}
 800631a:	b087      	sub	sp, #28
 800631c:	af00      	add	r7, sp, #0
 800631e:	60b9      	str	r1, [r7, #8]
 8006320:	607a      	str	r2, [r7, #4]
 8006322:	603b      	str	r3, [r7, #0]
 8006324:	4603      	mov	r3, r0
 8006326:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006328:	7bfb      	ldrb	r3, [r7, #15]
 800632a:	4a0a      	ldr	r2, [pc, #40]	; (8006354 <disk_read+0x3c>)
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4413      	add	r3, r2
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	689c      	ldr	r4, [r3, #8]
 8006334:	7bfb      	ldrb	r3, [r7, #15]
 8006336:	4a07      	ldr	r2, [pc, #28]	; (8006354 <disk_read+0x3c>)
 8006338:	4413      	add	r3, r2
 800633a:	7a18      	ldrb	r0, [r3, #8]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	68b9      	ldr	r1, [r7, #8]
 8006342:	47a0      	blx	r4
 8006344:	4603      	mov	r3, r0
 8006346:	75fb      	strb	r3, [r7, #23]
  return res;
 8006348:	7dfb      	ldrb	r3, [r7, #23]
}
 800634a:	4618      	mov	r0, r3
 800634c:	371c      	adds	r7, #28
 800634e:	46bd      	mov	sp, r7
 8006350:	bd90      	pop	{r4, r7, pc}
 8006352:	bf00      	nop
 8006354:	20003748 	.word	0x20003748

08006358 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006358:	b590      	push	{r4, r7, lr}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
 800635e:	60b9      	str	r1, [r7, #8]
 8006360:	607a      	str	r2, [r7, #4]
 8006362:	603b      	str	r3, [r7, #0]
 8006364:	4603      	mov	r3, r0
 8006366:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006368:	7bfb      	ldrb	r3, [r7, #15]
 800636a:	4a0a      	ldr	r2, [pc, #40]	; (8006394 <disk_write+0x3c>)
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	68dc      	ldr	r4, [r3, #12]
 8006374:	7bfb      	ldrb	r3, [r7, #15]
 8006376:	4a07      	ldr	r2, [pc, #28]	; (8006394 <disk_write+0x3c>)
 8006378:	4413      	add	r3, r2
 800637a:	7a18      	ldrb	r0, [r3, #8]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	68b9      	ldr	r1, [r7, #8]
 8006382:	47a0      	blx	r4
 8006384:	4603      	mov	r3, r0
 8006386:	75fb      	strb	r3, [r7, #23]
  return res;
 8006388:	7dfb      	ldrb	r3, [r7, #23]
}
 800638a:	4618      	mov	r0, r3
 800638c:	371c      	adds	r7, #28
 800638e:	46bd      	mov	sp, r7
 8006390:	bd90      	pop	{r4, r7, pc}
 8006392:	bf00      	nop
 8006394:	20003748 	.word	0x20003748

08006398 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	4603      	mov	r3, r0
 80063a0:	603a      	str	r2, [r7, #0]
 80063a2:	71fb      	strb	r3, [r7, #7]
 80063a4:	460b      	mov	r3, r1
 80063a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80063a8:	79fb      	ldrb	r3, [r7, #7]
 80063aa:	4a09      	ldr	r2, [pc, #36]	; (80063d0 <disk_ioctl+0x38>)
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	79fa      	ldrb	r2, [r7, #7]
 80063b6:	4906      	ldr	r1, [pc, #24]	; (80063d0 <disk_ioctl+0x38>)
 80063b8:	440a      	add	r2, r1
 80063ba:	7a10      	ldrb	r0, [r2, #8]
 80063bc:	79b9      	ldrb	r1, [r7, #6]
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	4798      	blx	r3
 80063c2:	4603      	mov	r3, r0
 80063c4:	73fb      	strb	r3, [r7, #15]
  return res;
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	20003748 	.word	0x20003748

080063d4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	3301      	adds	r3, #1
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80063e4:	89fb      	ldrh	r3, [r7, #14]
 80063e6:	021b      	lsls	r3, r3, #8
 80063e8:	b21a      	sxth	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	b21b      	sxth	r3, r3
 80063f0:	4313      	orrs	r3, r2
 80063f2:	b21b      	sxth	r3, r3
 80063f4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80063f6:	89fb      	ldrh	r3, [r7, #14]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	3303      	adds	r3, #3
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	021b      	lsls	r3, r3, #8
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	3202      	adds	r2, #2
 800641c:	7812      	ldrb	r2, [r2, #0]
 800641e:	4313      	orrs	r3, r2
 8006420:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	021b      	lsls	r3, r3, #8
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	3201      	adds	r2, #1
 800642a:	7812      	ldrb	r2, [r2, #0]
 800642c:	4313      	orrs	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	021b      	lsls	r3, r3, #8
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	7812      	ldrb	r2, [r2, #0]
 8006438:	4313      	orrs	r3, r2
 800643a:	60fb      	str	r3, [r7, #12]
	return rv;
 800643c:	68fb      	ldr	r3, [r7, #12]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800644a:	b480      	push	{r7}
 800644c:	b083      	sub	sp, #12
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	460b      	mov	r3, r1
 8006454:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	1c5a      	adds	r2, r3, #1
 800645a:	607a      	str	r2, [r7, #4]
 800645c:	887a      	ldrh	r2, [r7, #2]
 800645e:	b2d2      	uxtb	r2, r2
 8006460:	701a      	strb	r2, [r3, #0]
 8006462:	887b      	ldrh	r3, [r7, #2]
 8006464:	0a1b      	lsrs	r3, r3, #8
 8006466:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	607a      	str	r2, [r7, #4]
 800646e:	887a      	ldrh	r2, [r7, #2]
 8006470:	b2d2      	uxtb	r2, r2
 8006472:	701a      	strb	r2, [r3, #0]
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	1c5a      	adds	r2, r3, #1
 800648e:	607a      	str	r2, [r7, #4]
 8006490:	683a      	ldr	r2, [r7, #0]
 8006492:	b2d2      	uxtb	r2, r2
 8006494:	701a      	strb	r2, [r3, #0]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	0a1b      	lsrs	r3, r3, #8
 800649a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	1c5a      	adds	r2, r3, #1
 80064a0:	607a      	str	r2, [r7, #4]
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	b2d2      	uxtb	r2, r2
 80064a6:	701a      	strb	r2, [r3, #0]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	0a1b      	lsrs	r3, r3, #8
 80064ac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	607a      	str	r2, [r7, #4]
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	b2d2      	uxtb	r2, r2
 80064b8:	701a      	strb	r2, [r3, #0]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	0a1b      	lsrs	r3, r3, #8
 80064be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	1c5a      	adds	r2, r3, #1
 80064c4:	607a      	str	r2, [r7, #4]
 80064c6:	683a      	ldr	r2, [r7, #0]
 80064c8:	b2d2      	uxtb	r2, r2
 80064ca:	701a      	strb	r2, [r3, #0]
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80064d8:	b480      	push	{r7}
 80064da:	b087      	sub	sp, #28
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00d      	beq.n	800650e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	1c53      	adds	r3, r2, #1
 80064f6:	613b      	str	r3, [r7, #16]
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	1c59      	adds	r1, r3, #1
 80064fc:	6179      	str	r1, [r7, #20]
 80064fe:	7812      	ldrb	r2, [r2, #0]
 8006500:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	3b01      	subs	r3, #1
 8006506:	607b      	str	r3, [r7, #4]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1f1      	bne.n	80064f2 <mem_cpy+0x1a>
	}
}
 800650e:	bf00      	nop
 8006510:	371c      	adds	r7, #28
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr

0800651a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800651a:	b480      	push	{r7}
 800651c:	b087      	sub	sp, #28
 800651e:	af00      	add	r7, sp, #0
 8006520:	60f8      	str	r0, [r7, #12]
 8006522:	60b9      	str	r1, [r7, #8]
 8006524:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	1c5a      	adds	r2, r3, #1
 800652e:	617a      	str	r2, [r7, #20]
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	b2d2      	uxtb	r2, r2
 8006534:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	3b01      	subs	r3, #1
 800653a:	607b      	str	r3, [r7, #4]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1f3      	bne.n	800652a <mem_set+0x10>
}
 8006542:	bf00      	nop
 8006544:	bf00      	nop
 8006546:	371c      	adds	r7, #28
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006550:	b480      	push	{r7}
 8006552:	b089      	sub	sp, #36	; 0x24
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	61fb      	str	r3, [r7, #28]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006564:	2300      	movs	r3, #0
 8006566:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	1c5a      	adds	r2, r3, #1
 800656c:	61fa      	str	r2, [r7, #28]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	4619      	mov	r1, r3
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	1c5a      	adds	r2, r3, #1
 8006576:	61ba      	str	r2, [r7, #24]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	1acb      	subs	r3, r1, r3
 800657c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	3b01      	subs	r3, #1
 8006582:	607b      	str	r3, [r7, #4]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d002      	beq.n	8006590 <mem_cmp+0x40>
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d0eb      	beq.n	8006568 <mem_cmp+0x18>

	return r;
 8006590:	697b      	ldr	r3, [r7, #20]
}
 8006592:	4618      	mov	r0, r3
 8006594:	3724      	adds	r7, #36	; 0x24
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800659e:	b480      	push	{r7}
 80065a0:	b083      	sub	sp, #12
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80065a8:	e002      	b.n	80065b0 <chk_chr+0x12>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	3301      	adds	r3, #1
 80065ae:	607b      	str	r3, [r7, #4]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d005      	beq.n	80065c4 <chk_chr+0x26>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	461a      	mov	r2, r3
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d1f2      	bne.n	80065aa <chk_chr+0xc>
	return *str;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	781b      	ldrb	r3, [r3, #0]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80065de:	2300      	movs	r3, #0
 80065e0:	60bb      	str	r3, [r7, #8]
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	e029      	b.n	800663c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80065e8:	4a27      	ldr	r2, [pc, #156]	; (8006688 <chk_lock+0xb4>)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	011b      	lsls	r3, r3, #4
 80065ee:	4413      	add	r3, r2
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d01d      	beq.n	8006632 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80065f6:	4a24      	ldr	r2, [pc, #144]	; (8006688 <chk_lock+0xb4>)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	011b      	lsls	r3, r3, #4
 80065fc:	4413      	add	r3, r2
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	429a      	cmp	r2, r3
 8006606:	d116      	bne.n	8006636 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006608:	4a1f      	ldr	r2, [pc, #124]	; (8006688 <chk_lock+0xb4>)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	011b      	lsls	r3, r3, #4
 800660e:	4413      	add	r3, r2
 8006610:	3304      	adds	r3, #4
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006618:	429a      	cmp	r2, r3
 800661a:	d10c      	bne.n	8006636 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800661c:	4a1a      	ldr	r2, [pc, #104]	; (8006688 <chk_lock+0xb4>)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	011b      	lsls	r3, r3, #4
 8006622:	4413      	add	r3, r2
 8006624:	3308      	adds	r3, #8
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800662c:	429a      	cmp	r2, r3
 800662e:	d102      	bne.n	8006636 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006630:	e007      	b.n	8006642 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006632:	2301      	movs	r3, #1
 8006634:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3301      	adds	r3, #1
 800663a:	60fb      	str	r3, [r7, #12]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d9d2      	bls.n	80065e8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2b02      	cmp	r3, #2
 8006646:	d109      	bne.n	800665c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d102      	bne.n	8006654 <chk_lock+0x80>
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b02      	cmp	r3, #2
 8006652:	d101      	bne.n	8006658 <chk_lock+0x84>
 8006654:	2300      	movs	r3, #0
 8006656:	e010      	b.n	800667a <chk_lock+0xa6>
 8006658:	2312      	movs	r3, #18
 800665a:	e00e      	b.n	800667a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d108      	bne.n	8006674 <chk_lock+0xa0>
 8006662:	4a09      	ldr	r2, [pc, #36]	; (8006688 <chk_lock+0xb4>)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	011b      	lsls	r3, r3, #4
 8006668:	4413      	add	r3, r2
 800666a:	330c      	adds	r3, #12
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006672:	d101      	bne.n	8006678 <chk_lock+0xa4>
 8006674:	2310      	movs	r3, #16
 8006676:	e000      	b.n	800667a <chk_lock+0xa6>
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3714      	adds	r7, #20
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	20003528 	.word	0x20003528

0800668c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006692:	2300      	movs	r3, #0
 8006694:	607b      	str	r3, [r7, #4]
 8006696:	e002      	b.n	800669e <enq_lock+0x12>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	3301      	adds	r3, #1
 800669c:	607b      	str	r3, [r7, #4]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d806      	bhi.n	80066b2 <enq_lock+0x26>
 80066a4:	4a09      	ldr	r2, [pc, #36]	; (80066cc <enq_lock+0x40>)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	011b      	lsls	r3, r3, #4
 80066aa:	4413      	add	r3, r2
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1f2      	bne.n	8006698 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	bf14      	ite	ne
 80066b8:	2301      	movne	r3, #1
 80066ba:	2300      	moveq	r3, #0
 80066bc:	b2db      	uxtb	r3, r3
}
 80066be:	4618      	mov	r0, r3
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	20003528 	.word	0x20003528

080066d0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80066da:	2300      	movs	r3, #0
 80066dc:	60fb      	str	r3, [r7, #12]
 80066de:	e01f      	b.n	8006720 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80066e0:	4a41      	ldr	r2, [pc, #260]	; (80067e8 <inc_lock+0x118>)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	011b      	lsls	r3, r3, #4
 80066e6:	4413      	add	r3, r2
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d113      	bne.n	800671a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80066f2:	4a3d      	ldr	r2, [pc, #244]	; (80067e8 <inc_lock+0x118>)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	011b      	lsls	r3, r3, #4
 80066f8:	4413      	add	r3, r2
 80066fa:	3304      	adds	r3, #4
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006702:	429a      	cmp	r2, r3
 8006704:	d109      	bne.n	800671a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006706:	4a38      	ldr	r2, [pc, #224]	; (80067e8 <inc_lock+0x118>)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	011b      	lsls	r3, r3, #4
 800670c:	4413      	add	r3, r2
 800670e:	3308      	adds	r3, #8
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006716:	429a      	cmp	r2, r3
 8006718:	d006      	beq.n	8006728 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	3301      	adds	r3, #1
 800671e:	60fb      	str	r3, [r7, #12]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d9dc      	bls.n	80066e0 <inc_lock+0x10>
 8006726:	e000      	b.n	800672a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006728:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2b02      	cmp	r3, #2
 800672e:	d132      	bne.n	8006796 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006730:	2300      	movs	r3, #0
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	e002      	b.n	800673c <inc_lock+0x6c>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	3301      	adds	r3, #1
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d806      	bhi.n	8006750 <inc_lock+0x80>
 8006742:	4a29      	ldr	r2, [pc, #164]	; (80067e8 <inc_lock+0x118>)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	011b      	lsls	r3, r3, #4
 8006748:	4413      	add	r3, r2
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1f2      	bne.n	8006736 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2b02      	cmp	r3, #2
 8006754:	d101      	bne.n	800675a <inc_lock+0x8a>
 8006756:	2300      	movs	r3, #0
 8006758:	e040      	b.n	80067dc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	4922      	ldr	r1, [pc, #136]	; (80067e8 <inc_lock+0x118>)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	011b      	lsls	r3, r3, #4
 8006764:	440b      	add	r3, r1
 8006766:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689a      	ldr	r2, [r3, #8]
 800676c:	491e      	ldr	r1, [pc, #120]	; (80067e8 <inc_lock+0x118>)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	011b      	lsls	r3, r3, #4
 8006772:	440b      	add	r3, r1
 8006774:	3304      	adds	r3, #4
 8006776:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	695a      	ldr	r2, [r3, #20]
 800677c:	491a      	ldr	r1, [pc, #104]	; (80067e8 <inc_lock+0x118>)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	011b      	lsls	r3, r3, #4
 8006782:	440b      	add	r3, r1
 8006784:	3308      	adds	r3, #8
 8006786:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006788:	4a17      	ldr	r2, [pc, #92]	; (80067e8 <inc_lock+0x118>)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	011b      	lsls	r3, r3, #4
 800678e:	4413      	add	r3, r2
 8006790:	330c      	adds	r3, #12
 8006792:	2200      	movs	r2, #0
 8006794:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d009      	beq.n	80067b0 <inc_lock+0xe0>
 800679c:	4a12      	ldr	r2, [pc, #72]	; (80067e8 <inc_lock+0x118>)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	011b      	lsls	r3, r3, #4
 80067a2:	4413      	add	r3, r2
 80067a4:	330c      	adds	r3, #12
 80067a6:	881b      	ldrh	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <inc_lock+0xe0>
 80067ac:	2300      	movs	r3, #0
 80067ae:	e015      	b.n	80067dc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d108      	bne.n	80067c8 <inc_lock+0xf8>
 80067b6:	4a0c      	ldr	r2, [pc, #48]	; (80067e8 <inc_lock+0x118>)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	011b      	lsls	r3, r3, #4
 80067bc:	4413      	add	r3, r2
 80067be:	330c      	adds	r3, #12
 80067c0:	881b      	ldrh	r3, [r3, #0]
 80067c2:	3301      	adds	r3, #1
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	e001      	b.n	80067cc <inc_lock+0xfc>
 80067c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067cc:	4906      	ldr	r1, [pc, #24]	; (80067e8 <inc_lock+0x118>)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	011b      	lsls	r3, r3, #4
 80067d2:	440b      	add	r3, r1
 80067d4:	330c      	adds	r3, #12
 80067d6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	3301      	adds	r3, #1
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3714      	adds	r7, #20
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	20003528 	.word	0x20003528

080067ec <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	3b01      	subs	r3, #1
 80067f8:	607b      	str	r3, [r7, #4]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d825      	bhi.n	800684c <dec_lock+0x60>
		n = Files[i].ctr;
 8006800:	4a17      	ldr	r2, [pc, #92]	; (8006860 <dec_lock+0x74>)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	011b      	lsls	r3, r3, #4
 8006806:	4413      	add	r3, r2
 8006808:	330c      	adds	r3, #12
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800680e:	89fb      	ldrh	r3, [r7, #14]
 8006810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006814:	d101      	bne.n	800681a <dec_lock+0x2e>
 8006816:	2300      	movs	r3, #0
 8006818:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800681a:	89fb      	ldrh	r3, [r7, #14]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d002      	beq.n	8006826 <dec_lock+0x3a>
 8006820:	89fb      	ldrh	r3, [r7, #14]
 8006822:	3b01      	subs	r3, #1
 8006824:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006826:	4a0e      	ldr	r2, [pc, #56]	; (8006860 <dec_lock+0x74>)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	011b      	lsls	r3, r3, #4
 800682c:	4413      	add	r3, r2
 800682e:	330c      	adds	r3, #12
 8006830:	89fa      	ldrh	r2, [r7, #14]
 8006832:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006834:	89fb      	ldrh	r3, [r7, #14]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d105      	bne.n	8006846 <dec_lock+0x5a>
 800683a:	4a09      	ldr	r2, [pc, #36]	; (8006860 <dec_lock+0x74>)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	011b      	lsls	r3, r3, #4
 8006840:	4413      	add	r3, r2
 8006842:	2200      	movs	r2, #0
 8006844:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006846:	2300      	movs	r3, #0
 8006848:	737b      	strb	r3, [r7, #13]
 800684a:	e001      	b.n	8006850 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800684c:	2302      	movs	r3, #2
 800684e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006850:	7b7b      	ldrb	r3, [r7, #13]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	20003528 	.word	0x20003528

08006864 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800686c:	2300      	movs	r3, #0
 800686e:	60fb      	str	r3, [r7, #12]
 8006870:	e010      	b.n	8006894 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006872:	4a0d      	ldr	r2, [pc, #52]	; (80068a8 <clear_lock+0x44>)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	011b      	lsls	r3, r3, #4
 8006878:	4413      	add	r3, r2
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	429a      	cmp	r2, r3
 8006880:	d105      	bne.n	800688e <clear_lock+0x2a>
 8006882:	4a09      	ldr	r2, [pc, #36]	; (80068a8 <clear_lock+0x44>)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	011b      	lsls	r3, r3, #4
 8006888:	4413      	add	r3, r2
 800688a:	2200      	movs	r2, #0
 800688c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	3301      	adds	r3, #1
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d9eb      	bls.n	8006872 <clear_lock+0xe>
	}
}
 800689a:	bf00      	nop
 800689c:	bf00      	nop
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr
 80068a8:	20003528 	.word	0x20003528

080068ac <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80068b4:	2300      	movs	r3, #0
 80068b6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	78db      	ldrb	r3, [r3, #3]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d034      	beq.n	800692a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	7858      	ldrb	r0, [r3, #1]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80068d0:	2301      	movs	r3, #1
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	f7ff fd40 	bl	8006358 <disk_write>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80068de:	2301      	movs	r3, #1
 80068e0:	73fb      	strb	r3, [r7, #15]
 80068e2:	e022      	b.n	800692a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	1ad2      	subs	r2, r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d217      	bcs.n	800692a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	789b      	ldrb	r3, [r3, #2]
 80068fe:	613b      	str	r3, [r7, #16]
 8006900:	e010      	b.n	8006924 <sync_window+0x78>
					wsect += fs->fsize;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	4413      	add	r3, r2
 800690a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	7858      	ldrb	r0, [r3, #1]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006916:	2301      	movs	r3, #1
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	f7ff fd1d 	bl	8006358 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	3b01      	subs	r3, #1
 8006922:	613b      	str	r3, [r7, #16]
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d8eb      	bhi.n	8006902 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800692a:	7bfb      	ldrb	r3, [r7, #15]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3718      	adds	r7, #24
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800693e:	2300      	movs	r3, #0
 8006940:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	429a      	cmp	r2, r3
 800694a:	d01b      	beq.n	8006984 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f7ff ffad 	bl	80068ac <sync_window>
 8006952:	4603      	mov	r3, r0
 8006954:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006956:	7bfb      	ldrb	r3, [r7, #15]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d113      	bne.n	8006984 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	7858      	ldrb	r0, [r3, #1]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006966:	2301      	movs	r3, #1
 8006968:	683a      	ldr	r2, [r7, #0]
 800696a:	f7ff fcd5 	bl	8006318 <disk_read>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d004      	beq.n	800697e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006974:	f04f 33ff 	mov.w	r3, #4294967295
 8006978:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800697a:	2301      	movs	r3, #1
 800697c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	683a      	ldr	r2, [r7, #0]
 8006982:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8006984:	7bfb      	ldrb	r3, [r7, #15]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
	...

08006990 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f7ff ff87 	bl	80068ac <sync_window>
 800699e:	4603      	mov	r3, r0
 80069a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80069a2:	7bfb      	ldrb	r3, [r7, #15]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d159      	bne.n	8006a5c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	2b03      	cmp	r3, #3
 80069ae:	d149      	bne.n	8006a44 <sync_fs+0xb4>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	791b      	ldrb	r3, [r3, #4]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d145      	bne.n	8006a44 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	899b      	ldrh	r3, [r3, #12]
 80069c2:	461a      	mov	r2, r3
 80069c4:	2100      	movs	r1, #0
 80069c6:	f7ff fda8 	bl	800651a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	3338      	adds	r3, #56	; 0x38
 80069ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80069d2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7ff fd37 	bl	800644a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	3338      	adds	r3, #56	; 0x38
 80069e0:	4921      	ldr	r1, [pc, #132]	; (8006a68 <sync_fs+0xd8>)
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7ff fd4c 	bl	8006480 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	3338      	adds	r3, #56	; 0x38
 80069ec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80069f0:	491e      	ldr	r1, [pc, #120]	; (8006a6c <sync_fs+0xdc>)
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7ff fd44 	bl	8006480 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	3338      	adds	r3, #56	; 0x38
 80069fc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	4619      	mov	r1, r3
 8006a06:	4610      	mov	r0, r2
 8006a08:	f7ff fd3a 	bl	8006480 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	3338      	adds	r3, #56	; 0x38
 8006a10:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	4619      	mov	r1, r3
 8006a1a:	4610      	mov	r0, r2
 8006a1c:	f7ff fd30 	bl	8006480 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a24:	1c5a      	adds	r2, r3, #1
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	7858      	ldrb	r0, [r3, #1]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a38:	2301      	movs	r3, #1
 8006a3a:	f7ff fc8d 	bl	8006358 <disk_write>
			fs->fsi_flag = 0;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	785b      	ldrb	r3, [r3, #1]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7ff fca3 	bl	8006398 <disk_ioctl>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d001      	beq.n	8006a5c <sync_fs+0xcc>
 8006a58:	2301      	movs	r3, #1
 8006a5a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	41615252 	.word	0x41615252
 8006a6c:	61417272 	.word	0x61417272

08006a70 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	3b02      	subs	r3, #2
 8006a7e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	69db      	ldr	r3, [r3, #28]
 8006a84:	3b02      	subs	r3, #2
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d301      	bcc.n	8006a90 <clust2sect+0x20>
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	e008      	b.n	8006aa2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	895b      	ldrh	r3, [r3, #10]
 8006a94:	461a      	mov	r2, r3
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	fb03 f202 	mul.w	r2, r3, r2
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa0:	4413      	add	r3, r2
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b086      	sub	sp, #24
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
 8006ab6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d904      	bls.n	8006ace <get_fat+0x20>
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	69db      	ldr	r3, [r3, #28]
 8006ac8:	683a      	ldr	r2, [r7, #0]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d302      	bcc.n	8006ad4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006ace:	2301      	movs	r3, #1
 8006ad0:	617b      	str	r3, [r7, #20]
 8006ad2:	e0bb      	b.n	8006c4c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ad8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	f000 8083 	beq.w	8006bea <get_fat+0x13c>
 8006ae4:	2b03      	cmp	r3, #3
 8006ae6:	f300 80a7 	bgt.w	8006c38 <get_fat+0x18a>
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d002      	beq.n	8006af4 <get_fat+0x46>
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d056      	beq.n	8006ba0 <get_fat+0xf2>
 8006af2:	e0a1      	b.n	8006c38 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	085b      	lsrs	r3, r3, #1
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	4413      	add	r3, r2
 8006b00:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	899b      	ldrh	r3, [r3, #12]
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b12:	4413      	add	r3, r2
 8006b14:	4619      	mov	r1, r3
 8006b16:	6938      	ldr	r0, [r7, #16]
 8006b18:	f7ff ff0c 	bl	8006934 <move_window>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f040 808d 	bne.w	8006c3e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	1c5a      	adds	r2, r3, #1
 8006b28:	60fa      	str	r2, [r7, #12]
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	8992      	ldrh	r2, [r2, #12]
 8006b2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b32:	fb01 f202 	mul.w	r2, r1, r2
 8006b36:	1a9b      	subs	r3, r3, r2
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b40:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	899b      	ldrh	r3, [r3, #12]
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b52:	4413      	add	r3, r2
 8006b54:	4619      	mov	r1, r3
 8006b56:	6938      	ldr	r0, [r7, #16]
 8006b58:	f7ff feec 	bl	8006934 <move_window>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d16f      	bne.n	8006c42 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	899b      	ldrh	r3, [r3, #12]
 8006b66:	461a      	mov	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b6e:	fb01 f202 	mul.w	r2, r1, r2
 8006b72:	1a9b      	subs	r3, r3, r2
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	4413      	add	r3, r2
 8006b78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b7c:	021b      	lsls	r3, r3, #8
 8006b7e:	461a      	mov	r2, r3
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d002      	beq.n	8006b96 <get_fat+0xe8>
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	091b      	lsrs	r3, r3, #4
 8006b94:	e002      	b.n	8006b9c <get_fat+0xee>
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b9c:	617b      	str	r3, [r7, #20]
			break;
 8006b9e:	e055      	b.n	8006c4c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	899b      	ldrh	r3, [r3, #12]
 8006ba8:	085b      	lsrs	r3, r3, #1
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	4619      	mov	r1, r3
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bb4:	4413      	add	r3, r2
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6938      	ldr	r0, [r7, #16]
 8006bba:	f7ff febb 	bl	8006934 <move_window>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d140      	bne.n	8006c46 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	005b      	lsls	r3, r3, #1
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	8992      	ldrh	r2, [r2, #12]
 8006bd2:	fbb3 f0f2 	udiv	r0, r3, r2
 8006bd6:	fb00 f202 	mul.w	r2, r0, r2
 8006bda:	1a9b      	subs	r3, r3, r2
 8006bdc:	440b      	add	r3, r1
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7ff fbf8 	bl	80063d4 <ld_word>
 8006be4:	4603      	mov	r3, r0
 8006be6:	617b      	str	r3, [r7, #20]
			break;
 8006be8:	e030      	b.n	8006c4c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	899b      	ldrh	r3, [r3, #12]
 8006bf2:	089b      	lsrs	r3, r3, #2
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bfe:	4413      	add	r3, r2
 8006c00:	4619      	mov	r1, r3
 8006c02:	6938      	ldr	r0, [r7, #16]
 8006c04:	f7ff fe96 	bl	8006934 <move_window>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d11d      	bne.n	8006c4a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	8992      	ldrh	r2, [r2, #12]
 8006c1c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c20:	fb00 f202 	mul.w	r2, r0, r2
 8006c24:	1a9b      	subs	r3, r3, r2
 8006c26:	440b      	add	r3, r1
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7ff fbeb 	bl	8006404 <ld_dword>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c34:	617b      	str	r3, [r7, #20]
			break;
 8006c36:	e009      	b.n	8006c4c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006c38:	2301      	movs	r3, #1
 8006c3a:	617b      	str	r3, [r7, #20]
 8006c3c:	e006      	b.n	8006c4c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c3e:	bf00      	nop
 8006c40:	e004      	b.n	8006c4c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c42:	bf00      	nop
 8006c44:	e002      	b.n	8006c4c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006c46:	bf00      	nop
 8006c48:	e000      	b.n	8006c4c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c4a:	bf00      	nop
		}
	}

	return val;
 8006c4c:	697b      	ldr	r3, [r7, #20]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3718      	adds	r7, #24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006c56:	b590      	push	{r4, r7, lr}
 8006c58:	b089      	sub	sp, #36	; 0x24
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	60f8      	str	r0, [r7, #12]
 8006c5e:	60b9      	str	r1, [r7, #8]
 8006c60:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006c62:	2302      	movs	r3, #2
 8006c64:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	f240 8102 	bls.w	8006e72 <put_fat+0x21c>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	f080 80fc 	bcs.w	8006e72 <put_fat+0x21c>
		switch (fs->fs_type) {
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	2b03      	cmp	r3, #3
 8006c80:	f000 80b6 	beq.w	8006df0 <put_fat+0x19a>
 8006c84:	2b03      	cmp	r3, #3
 8006c86:	f300 80fd 	bgt.w	8006e84 <put_fat+0x22e>
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d003      	beq.n	8006c96 <put_fat+0x40>
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	f000 8083 	beq.w	8006d9a <put_fat+0x144>
 8006c94:	e0f6      	b.n	8006e84 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	61bb      	str	r3, [r7, #24]
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	085b      	lsrs	r3, r3, #1
 8006c9e:	69ba      	ldr	r2, [r7, #24]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	899b      	ldrh	r3, [r3, #12]
 8006cac:	4619      	mov	r1, r3
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cb4:	4413      	add	r3, r2
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f7ff fe3b 	bl	8006934 <move_window>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006cc2:	7ffb      	ldrb	r3, [r7, #31]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f040 80d6 	bne.w	8006e76 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	1c5a      	adds	r2, r3, #1
 8006cd4:	61ba      	str	r2, [r7, #24]
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	8992      	ldrh	r2, [r2, #12]
 8006cda:	fbb3 f0f2 	udiv	r0, r3, r2
 8006cde:	fb00 f202 	mul.w	r2, r0, r2
 8006ce2:	1a9b      	subs	r3, r3, r2
 8006ce4:	440b      	add	r3, r1
 8006ce6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00d      	beq.n	8006d0e <put_fat+0xb8>
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	b25b      	sxtb	r3, r3
 8006cf8:	f003 030f 	and.w	r3, r3, #15
 8006cfc:	b25a      	sxtb	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	011b      	lsls	r3, r3, #4
 8006d04:	b25b      	sxtb	r3, r3
 8006d06:	4313      	orrs	r3, r2
 8006d08:	b25b      	sxtb	r3, r3
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	e001      	b.n	8006d12 <put_fat+0xbc>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	899b      	ldrh	r3, [r3, #12]
 8006d24:	4619      	mov	r1, r3
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d2c:	4413      	add	r3, r2
 8006d2e:	4619      	mov	r1, r3
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f7ff fdff 	bl	8006934 <move_window>
 8006d36:	4603      	mov	r3, r0
 8006d38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d3a:	7ffb      	ldrb	r3, [r7, #31]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f040 809c 	bne.w	8006e7a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	899b      	ldrh	r3, [r3, #12]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d54:	fb00 f202 	mul.w	r2, r0, r2
 8006d58:	1a9b      	subs	r3, r3, r2
 8006d5a:	440b      	add	r3, r1
 8006d5c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d003      	beq.n	8006d70 <put_fat+0x11a>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	091b      	lsrs	r3, r3, #4
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	e00e      	b.n	8006d8e <put_fat+0x138>
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	b25b      	sxtb	r3, r3
 8006d76:	f023 030f 	bic.w	r3, r3, #15
 8006d7a:	b25a      	sxtb	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	0a1b      	lsrs	r3, r3, #8
 8006d80:	b25b      	sxtb	r3, r3
 8006d82:	f003 030f 	and.w	r3, r3, #15
 8006d86:	b25b      	sxtb	r3, r3
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	b25b      	sxtb	r3, r3
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2201      	movs	r2, #1
 8006d96:	70da      	strb	r2, [r3, #3]
			break;
 8006d98:	e074      	b.n	8006e84 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	899b      	ldrh	r3, [r3, #12]
 8006da2:	085b      	lsrs	r3, r3, #1
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	4619      	mov	r1, r3
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8006dae:	4413      	add	r3, r2
 8006db0:	4619      	mov	r1, r3
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f7ff fdbe 	bl	8006934 <move_window>
 8006db8:	4603      	mov	r3, r0
 8006dba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006dbc:	7ffb      	ldrb	r3, [r7, #31]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d15d      	bne.n	8006e7e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	005b      	lsls	r3, r3, #1
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	8992      	ldrh	r2, [r2, #12]
 8006dd0:	fbb3 f0f2 	udiv	r0, r3, r2
 8006dd4:	fb00 f202 	mul.w	r2, r0, r2
 8006dd8:	1a9b      	subs	r3, r3, r2
 8006dda:	440b      	add	r3, r1
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	b292      	uxth	r2, r2
 8006de0:	4611      	mov	r1, r2
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7ff fb31 	bl	800644a <st_word>
			fs->wflag = 1;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2201      	movs	r2, #1
 8006dec:	70da      	strb	r2, [r3, #3]
			break;
 8006dee:	e049      	b.n	8006e84 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	899b      	ldrh	r3, [r3, #12]
 8006df8:	089b      	lsrs	r3, r3, #2
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e04:	4413      	add	r3, r2
 8006e06:	4619      	mov	r1, r3
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f7ff fd93 	bl	8006934 <move_window>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e12:	7ffb      	ldrb	r3, [r7, #31]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d134      	bne.n	8006e82 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	8992      	ldrh	r2, [r2, #12]
 8006e2c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e30:	fb00 f202 	mul.w	r2, r0, r2
 8006e34:	1a9b      	subs	r3, r3, r2
 8006e36:	440b      	add	r3, r1
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7ff fae3 	bl	8006404 <ld_dword>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006e44:	4323      	orrs	r3, r4
 8006e46:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	8992      	ldrh	r2, [r2, #12]
 8006e56:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e5a:	fb00 f202 	mul.w	r2, r0, r2
 8006e5e:	1a9b      	subs	r3, r3, r2
 8006e60:	440b      	add	r3, r1
 8006e62:	6879      	ldr	r1, [r7, #4]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7ff fb0b 	bl	8006480 <st_dword>
			fs->wflag = 1;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	70da      	strb	r2, [r3, #3]
			break;
 8006e70:	e008      	b.n	8006e84 <put_fat+0x22e>
		}
	}
 8006e72:	bf00      	nop
 8006e74:	e006      	b.n	8006e84 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006e76:	bf00      	nop
 8006e78:	e004      	b.n	8006e84 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006e7a:	bf00      	nop
 8006e7c:	e002      	b.n	8006e84 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006e7e:	bf00      	nop
 8006e80:	e000      	b.n	8006e84 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006e82:	bf00      	nop
	return res;
 8006e84:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3724      	adds	r7, #36	; 0x24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd90      	pop	{r4, r7, pc}

08006e8e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b088      	sub	sp, #32
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	60f8      	str	r0, [r7, #12]
 8006e96:	60b9      	str	r1, [r7, #8]
 8006e98:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d904      	bls.n	8006eb4 <remove_chain+0x26>
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d301      	bcc.n	8006eb8 <remove_chain+0x2a>
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	e04b      	b.n	8006f50 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00c      	beq.n	8006ed8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec2:	6879      	ldr	r1, [r7, #4]
 8006ec4:	69b8      	ldr	r0, [r7, #24]
 8006ec6:	f7ff fec6 	bl	8006c56 <put_fat>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006ece:	7ffb      	ldrb	r3, [r7, #31]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d001      	beq.n	8006ed8 <remove_chain+0x4a>
 8006ed4:	7ffb      	ldrb	r3, [r7, #31]
 8006ed6:	e03b      	b.n	8006f50 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006ed8:	68b9      	ldr	r1, [r7, #8]
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f7ff fde7 	bl	8006aae <get_fat>
 8006ee0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d031      	beq.n	8006f4c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d101      	bne.n	8006ef2 <remove_chain+0x64>
 8006eee:	2302      	movs	r3, #2
 8006ef0:	e02e      	b.n	8006f50 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef8:	d101      	bne.n	8006efe <remove_chain+0x70>
 8006efa:	2301      	movs	r3, #1
 8006efc:	e028      	b.n	8006f50 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006efe:	2200      	movs	r2, #0
 8006f00:	68b9      	ldr	r1, [r7, #8]
 8006f02:	69b8      	ldr	r0, [r7, #24]
 8006f04:	f7ff fea7 	bl	8006c56 <put_fat>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006f0c:	7ffb      	ldrb	r3, [r7, #31]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <remove_chain+0x88>
 8006f12:	7ffb      	ldrb	r3, [r7, #31]
 8006f14:	e01c      	b.n	8006f50 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	699a      	ldr	r2, [r3, #24]
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	3b02      	subs	r3, #2
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d20b      	bcs.n	8006f3c <remove_chain+0xae>
			fs->free_clst++;
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	699b      	ldr	r3, [r3, #24]
 8006f28:	1c5a      	adds	r2, r3, #1
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	791b      	ldrb	r3, [r3, #4]
 8006f32:	f043 0301 	orr.w	r3, r3, #1
 8006f36:	b2da      	uxtb	r2, r3
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	69db      	ldr	r3, [r3, #28]
 8006f44:	68ba      	ldr	r2, [r7, #8]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d3c6      	bcc.n	8006ed8 <remove_chain+0x4a>
 8006f4a:	e000      	b.n	8006f4e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006f4c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3720      	adds	r7, #32
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b088      	sub	sp, #32
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10d      	bne.n	8006f8a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d004      	beq.n	8006f84 <create_chain+0x2c>
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	69db      	ldr	r3, [r3, #28]
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d31b      	bcc.n	8006fbc <create_chain+0x64>
 8006f84:	2301      	movs	r3, #1
 8006f86:	61bb      	str	r3, [r7, #24]
 8006f88:	e018      	b.n	8006fbc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006f8a:	6839      	ldr	r1, [r7, #0]
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7ff fd8e 	bl	8006aae <get_fat>
 8006f92:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d801      	bhi.n	8006f9e <create_chain+0x46>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e070      	b.n	8007080 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa4:	d101      	bne.n	8006faa <create_chain+0x52>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	e06a      	b.n	8007080 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d201      	bcs.n	8006fb8 <create_chain+0x60>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	e063      	b.n	8007080 <create_chain+0x128>
		scl = clst;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	69db      	ldr	r3, [r3, #28]
 8006fca:	69fa      	ldr	r2, [r7, #28]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d307      	bcc.n	8006fe0 <create_chain+0x88>
				ncl = 2;
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006fd4:	69fa      	ldr	r2, [r7, #28]
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d901      	bls.n	8006fe0 <create_chain+0x88>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	e04f      	b.n	8007080 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006fe0:	69f9      	ldr	r1, [r7, #28]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7ff fd63 	bl	8006aae <get_fat>
 8006fe8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00e      	beq.n	800700e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d003      	beq.n	8006ffe <create_chain+0xa6>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffc:	d101      	bne.n	8007002 <create_chain+0xaa>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	e03e      	b.n	8007080 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007002:	69fa      	ldr	r2, [r7, #28]
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	429a      	cmp	r2, r3
 8007008:	d1da      	bne.n	8006fc0 <create_chain+0x68>
 800700a:	2300      	movs	r3, #0
 800700c:	e038      	b.n	8007080 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800700e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007010:	f04f 32ff 	mov.w	r2, #4294967295
 8007014:	69f9      	ldr	r1, [r7, #28]
 8007016:	6938      	ldr	r0, [r7, #16]
 8007018:	f7ff fe1d 	bl	8006c56 <put_fat>
 800701c:	4603      	mov	r3, r0
 800701e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007020:	7dfb      	ldrb	r3, [r7, #23]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d109      	bne.n	800703a <create_chain+0xe2>
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d006      	beq.n	800703a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800702c:	69fa      	ldr	r2, [r7, #28]
 800702e:	6839      	ldr	r1, [r7, #0]
 8007030:	6938      	ldr	r0, [r7, #16]
 8007032:	f7ff fe10 	bl	8006c56 <put_fat>
 8007036:	4603      	mov	r3, r0
 8007038:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800703a:	7dfb      	ldrb	r3, [r7, #23]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d116      	bne.n	800706e <create_chain+0x116>
		fs->last_clst = ncl;
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	69fa      	ldr	r2, [r7, #28]
 8007044:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	699a      	ldr	r2, [r3, #24]
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	3b02      	subs	r3, #2
 8007050:	429a      	cmp	r2, r3
 8007052:	d804      	bhi.n	800705e <create_chain+0x106>
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	1e5a      	subs	r2, r3, #1
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	791b      	ldrb	r3, [r3, #4]
 8007062:	f043 0301 	orr.w	r3, r3, #1
 8007066:	b2da      	uxtb	r2, r3
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	711a      	strb	r2, [r3, #4]
 800706c:	e007      	b.n	800707e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800706e:	7dfb      	ldrb	r3, [r7, #23]
 8007070:	2b01      	cmp	r3, #1
 8007072:	d102      	bne.n	800707a <create_chain+0x122>
 8007074:	f04f 33ff 	mov.w	r3, #4294967295
 8007078:	e000      	b.n	800707c <create_chain+0x124>
 800707a:	2301      	movs	r3, #1
 800707c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800707e:	69fb      	ldr	r3, [r7, #28]
}
 8007080:	4618      	mov	r0, r3
 8007082:	3720      	adds	r7, #32
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007088:	b480      	push	{r7}
 800708a:	b087      	sub	sp, #28
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709c:	3304      	adds	r3, #4
 800709e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	899b      	ldrh	r3, [r3, #12]
 80070a4:	461a      	mov	r2, r3
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	8952      	ldrh	r2, [r2, #10]
 80070b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80070b4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	1d1a      	adds	r2, r3, #4
 80070ba:	613a      	str	r2, [r7, #16]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d101      	bne.n	80070ca <clmt_clust+0x42>
 80070c6:	2300      	movs	r3, #0
 80070c8:	e010      	b.n	80070ec <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d307      	bcc.n	80070e2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	617b      	str	r3, [r7, #20]
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	3304      	adds	r3, #4
 80070de:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80070e0:	e7e9      	b.n	80070b6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80070e2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	4413      	add	r3, r2
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	371c      	adds	r7, #28
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800710e:	d204      	bcs.n	800711a <dir_sdi+0x22>
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	f003 031f 	and.w	r3, r3, #31
 8007116:	2b00      	cmp	r3, #0
 8007118:	d001      	beq.n	800711e <dir_sdi+0x26>
		return FR_INT_ERR;
 800711a:	2302      	movs	r3, #2
 800711c:	e071      	b.n	8007202 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	683a      	ldr	r2, [r7, #0]
 8007122:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d106      	bne.n	800713e <dir_sdi+0x46>
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	2b02      	cmp	r3, #2
 8007136:	d902      	bls.n	800713e <dir_sdi+0x46>
		clst = fs->dirbase;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10c      	bne.n	800715e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	095b      	lsrs	r3, r3, #5
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	8912      	ldrh	r2, [r2, #8]
 800714c:	4293      	cmp	r3, r2
 800714e:	d301      	bcc.n	8007154 <dir_sdi+0x5c>
 8007150:	2302      	movs	r3, #2
 8007152:	e056      	b.n	8007202 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	61da      	str	r2, [r3, #28]
 800715c:	e02d      	b.n	80071ba <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	895b      	ldrh	r3, [r3, #10]
 8007162:	461a      	mov	r2, r3
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	899b      	ldrh	r3, [r3, #12]
 8007168:	fb02 f303 	mul.w	r3, r2, r3
 800716c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800716e:	e019      	b.n	80071a4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6979      	ldr	r1, [r7, #20]
 8007174:	4618      	mov	r0, r3
 8007176:	f7ff fc9a 	bl	8006aae <get_fat>
 800717a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007182:	d101      	bne.n	8007188 <dir_sdi+0x90>
 8007184:	2301      	movs	r3, #1
 8007186:	e03c      	b.n	8007202 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d904      	bls.n	8007198 <dir_sdi+0xa0>
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	429a      	cmp	r2, r3
 8007196:	d301      	bcc.n	800719c <dir_sdi+0xa4>
 8007198:	2302      	movs	r3, #2
 800719a:	e032      	b.n	8007202 <dir_sdi+0x10a>
			ofs -= csz;
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80071a4:	683a      	ldr	r2, [r7, #0]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d2e1      	bcs.n	8007170 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80071ac:	6979      	ldr	r1, [r7, #20]
 80071ae:	6938      	ldr	r0, [r7, #16]
 80071b0:	f7ff fc5e 	bl	8006a70 <clust2sect>
 80071b4:	4602      	mov	r2, r0
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d101      	bne.n	80071cc <dir_sdi+0xd4>
 80071c8:	2302      	movs	r3, #2
 80071ca:	e01a      	b.n	8007202 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	69da      	ldr	r2, [r3, #28]
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	899b      	ldrh	r3, [r3, #12]
 80071d4:	4619      	mov	r1, r3
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80071dc:	441a      	add	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	899b      	ldrh	r3, [r3, #12]
 80071ec:	461a      	mov	r2, r3
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	fbb3 f0f2 	udiv	r0, r3, r2
 80071f4:	fb00 f202 	mul.w	r2, r0, r2
 80071f8:	1a9b      	subs	r3, r3, r2
 80071fa:	18ca      	adds	r2, r1, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3718      	adds	r7, #24
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b086      	sub	sp, #24
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
 8007212:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	3320      	adds	r3, #32
 8007220:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d003      	beq.n	8007232 <dir_next+0x28>
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007230:	d301      	bcc.n	8007236 <dir_next+0x2c>
 8007232:	2304      	movs	r3, #4
 8007234:	e0bb      	b.n	80073ae <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	899b      	ldrh	r3, [r3, #12]
 800723a:	461a      	mov	r2, r3
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007242:	fb01 f202 	mul.w	r2, r1, r2
 8007246:	1a9b      	subs	r3, r3, r2
 8007248:	2b00      	cmp	r3, #0
 800724a:	f040 809d 	bne.w	8007388 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	69db      	ldr	r3, [r3, #28]
 8007252:	1c5a      	adds	r2, r3, #1
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10b      	bne.n	8007278 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	095b      	lsrs	r3, r3, #5
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	8912      	ldrh	r2, [r2, #8]
 8007268:	4293      	cmp	r3, r2
 800726a:	f0c0 808d 	bcc.w	8007388 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	61da      	str	r2, [r3, #28]
 8007274:	2304      	movs	r3, #4
 8007276:	e09a      	b.n	80073ae <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	899b      	ldrh	r3, [r3, #12]
 800727c:	461a      	mov	r2, r3
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	fbb3 f3f2 	udiv	r3, r3, r2
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	8952      	ldrh	r2, [r2, #10]
 8007288:	3a01      	subs	r2, #1
 800728a:	4013      	ands	r3, r2
 800728c:	2b00      	cmp	r3, #0
 800728e:	d17b      	bne.n	8007388 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	4619      	mov	r1, r3
 8007298:	4610      	mov	r0, r2
 800729a:	f7ff fc08 	bl	8006aae <get_fat>
 800729e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d801      	bhi.n	80072aa <dir_next+0xa0>
 80072a6:	2302      	movs	r3, #2
 80072a8:	e081      	b.n	80073ae <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b0:	d101      	bne.n	80072b6 <dir_next+0xac>
 80072b2:	2301      	movs	r3, #1
 80072b4:	e07b      	b.n	80073ae <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	69db      	ldr	r3, [r3, #28]
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d359      	bcc.n	8007374 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d104      	bne.n	80072d0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	61da      	str	r2, [r3, #28]
 80072cc:	2304      	movs	r3, #4
 80072ce:	e06e      	b.n	80073ae <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	4619      	mov	r1, r3
 80072d8:	4610      	mov	r0, r2
 80072da:	f7ff fe3d 	bl	8006f58 <create_chain>
 80072de:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <dir_next+0xe0>
 80072e6:	2307      	movs	r3, #7
 80072e8:	e061      	b.n	80073ae <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d101      	bne.n	80072f4 <dir_next+0xea>
 80072f0:	2302      	movs	r3, #2
 80072f2:	e05c      	b.n	80073ae <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fa:	d101      	bne.n	8007300 <dir_next+0xf6>
 80072fc:	2301      	movs	r3, #1
 80072fe:	e056      	b.n	80073ae <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f7ff fad3 	bl	80068ac <sync_window>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d001      	beq.n	8007310 <dir_next+0x106>
 800730c:	2301      	movs	r3, #1
 800730e:	e04e      	b.n	80073ae <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	899b      	ldrh	r3, [r3, #12]
 800731a:	461a      	mov	r2, r3
 800731c:	2100      	movs	r1, #0
 800731e:	f7ff f8fc 	bl	800651a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007322:	2300      	movs	r3, #0
 8007324:	613b      	str	r3, [r7, #16]
 8007326:	6979      	ldr	r1, [r7, #20]
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f7ff fba1 	bl	8006a70 <clust2sect>
 800732e:	4602      	mov	r2, r0
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	635a      	str	r2, [r3, #52]	; 0x34
 8007334:	e012      	b.n	800735c <dir_next+0x152>
						fs->wflag = 1;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2201      	movs	r2, #1
 800733a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f7ff fab5 	bl	80068ac <sync_window>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <dir_next+0x142>
 8007348:	2301      	movs	r3, #1
 800734a:	e030      	b.n	80073ae <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	3301      	adds	r3, #1
 8007350:	613b      	str	r3, [r7, #16]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007356:	1c5a      	adds	r2, r3, #1
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	635a      	str	r2, [r3, #52]	; 0x34
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	895b      	ldrh	r3, [r3, #10]
 8007360:	461a      	mov	r2, r3
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	4293      	cmp	r3, r2
 8007366:	d3e6      	bcc.n	8007336 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	1ad2      	subs	r2, r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800737a:	6979      	ldr	r1, [r7, #20]
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f7ff fb77 	bl	8006a70 <clust2sect>
 8007382:	4602      	mov	r2, r0
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	899b      	ldrh	r3, [r3, #12]
 8007398:	461a      	mov	r2, r3
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	fbb3 f0f2 	udiv	r0, r3, r2
 80073a0:	fb00 f202 	mul.w	r2, r0, r2
 80073a4:	1a9b      	subs	r3, r3, r2
 80073a6:	18ca      	adds	r2, r1, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3718      	adds	r7, #24
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b086      	sub	sp, #24
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
 80073be:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80073c6:	2100      	movs	r1, #0
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f7ff fe95 	bl	80070f8 <dir_sdi>
 80073ce:	4603      	mov	r3, r0
 80073d0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80073d2:	7dfb      	ldrb	r3, [r7, #23]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d12b      	bne.n	8007430 <dir_alloc+0x7a>
		n = 0;
 80073d8:	2300      	movs	r3, #0
 80073da:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	69db      	ldr	r3, [r3, #28]
 80073e0:	4619      	mov	r1, r3
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f7ff faa6 	bl	8006934 <move_window>
 80073e8:	4603      	mov	r3, r0
 80073ea:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80073ec:	7dfb      	ldrb	r3, [r7, #23]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d11d      	bne.n	800742e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	2be5      	cmp	r3, #229	; 0xe5
 80073fa:	d004      	beq.n	8007406 <dir_alloc+0x50>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a1b      	ldr	r3, [r3, #32]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d107      	bne.n	8007416 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	3301      	adds	r3, #1
 800740a:	613b      	str	r3, [r7, #16]
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	429a      	cmp	r2, r3
 8007412:	d102      	bne.n	800741a <dir_alloc+0x64>
 8007414:	e00c      	b.n	8007430 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007416:	2300      	movs	r3, #0
 8007418:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800741a:	2101      	movs	r1, #1
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7ff fef4 	bl	800720a <dir_next>
 8007422:	4603      	mov	r3, r0
 8007424:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007426:	7dfb      	ldrb	r3, [r7, #23]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d0d7      	beq.n	80073dc <dir_alloc+0x26>
 800742c:	e000      	b.n	8007430 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800742e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007430:	7dfb      	ldrb	r3, [r7, #23]
 8007432:	2b04      	cmp	r3, #4
 8007434:	d101      	bne.n	800743a <dir_alloc+0x84>
 8007436:	2307      	movs	r3, #7
 8007438:	75fb      	strb	r3, [r7, #23]
	return res;
 800743a:	7dfb      	ldrb	r3, [r7, #23]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3718      	adds	r7, #24
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	331a      	adds	r3, #26
 8007452:	4618      	mov	r0, r3
 8007454:	f7fe ffbe 	bl	80063d4 <ld_word>
 8007458:	4603      	mov	r3, r0
 800745a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	2b03      	cmp	r3, #3
 8007462:	d109      	bne.n	8007478 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	3314      	adds	r3, #20
 8007468:	4618      	mov	r0, r3
 800746a:	f7fe ffb3 	bl	80063d4 <ld_word>
 800746e:	4603      	mov	r3, r0
 8007470:	041b      	lsls	r3, r3, #16
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	4313      	orrs	r3, r2
 8007476:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007478:	68fb      	ldr	r3, [r7, #12]
}
 800747a:	4618      	mov	r0, r3
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b084      	sub	sp, #16
 8007486:	af00      	add	r7, sp, #0
 8007488:	60f8      	str	r0, [r7, #12]
 800748a:	60b9      	str	r1, [r7, #8]
 800748c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	331a      	adds	r3, #26
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	b292      	uxth	r2, r2
 8007496:	4611      	mov	r1, r2
 8007498:	4618      	mov	r0, r3
 800749a:	f7fe ffd6 	bl	800644a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	2b03      	cmp	r3, #3
 80074a4:	d109      	bne.n	80074ba <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	f103 0214 	add.w	r2, r3, #20
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	0c1b      	lsrs	r3, r3, #16
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	4619      	mov	r1, r3
 80074b4:	4610      	mov	r0, r2
 80074b6:	f7fe ffc8 	bl	800644a <st_word>
	}
}
 80074ba:	bf00      	nop
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
	...

080074c4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80074c4:	b590      	push	{r4, r7, lr}
 80074c6:	b087      	sub	sp, #28
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	331a      	adds	r3, #26
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fe ff7e 	bl	80063d4 <ld_word>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <cmp_lfn+0x1e>
 80074de:	2300      	movs	r3, #0
 80074e0:	e059      	b.n	8007596 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074ea:	1e5a      	subs	r2, r3, #1
 80074ec:	4613      	mov	r3, r2
 80074ee:	005b      	lsls	r3, r3, #1
 80074f0:	4413      	add	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4413      	add	r3, r2
 80074f6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80074f8:	2301      	movs	r3, #1
 80074fa:	81fb      	strh	r3, [r7, #14]
 80074fc:	2300      	movs	r3, #0
 80074fe:	613b      	str	r3, [r7, #16]
 8007500:	e033      	b.n	800756a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007502:	4a27      	ldr	r2, [pc, #156]	; (80075a0 <cmp_lfn+0xdc>)
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	4413      	add	r3, r2
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	461a      	mov	r2, r3
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	4413      	add	r3, r2
 8007510:	4618      	mov	r0, r3
 8007512:	f7fe ff5f 	bl	80063d4 <ld_word>
 8007516:	4603      	mov	r3, r0
 8007518:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800751a:	89fb      	ldrh	r3, [r7, #14]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d01a      	beq.n	8007556 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	2bfe      	cmp	r3, #254	; 0xfe
 8007524:	d812      	bhi.n	800754c <cmp_lfn+0x88>
 8007526:	89bb      	ldrh	r3, [r7, #12]
 8007528:	4618      	mov	r0, r3
 800752a:	f002 fd33 	bl	8009f94 <ff_wtoupper>
 800752e:	4603      	mov	r3, r0
 8007530:	461c      	mov	r4, r3
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	1c5a      	adds	r2, r3, #1
 8007536:	617a      	str	r2, [r7, #20]
 8007538:	005b      	lsls	r3, r3, #1
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	4413      	add	r3, r2
 800753e:	881b      	ldrh	r3, [r3, #0]
 8007540:	4618      	mov	r0, r3
 8007542:	f002 fd27 	bl	8009f94 <ff_wtoupper>
 8007546:	4603      	mov	r3, r0
 8007548:	429c      	cmp	r4, r3
 800754a:	d001      	beq.n	8007550 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800754c:	2300      	movs	r3, #0
 800754e:	e022      	b.n	8007596 <cmp_lfn+0xd2>
			}
			wc = uc;
 8007550:	89bb      	ldrh	r3, [r7, #12]
 8007552:	81fb      	strh	r3, [r7, #14]
 8007554:	e006      	b.n	8007564 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007556:	89bb      	ldrh	r3, [r7, #12]
 8007558:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800755c:	4293      	cmp	r3, r2
 800755e:	d001      	beq.n	8007564 <cmp_lfn+0xa0>
 8007560:	2300      	movs	r3, #0
 8007562:	e018      	b.n	8007596 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	3301      	adds	r3, #1
 8007568:	613b      	str	r3, [r7, #16]
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	2b0c      	cmp	r3, #12
 800756e:	d9c8      	bls.n	8007502 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00b      	beq.n	8007594 <cmp_lfn+0xd0>
 800757c:	89fb      	ldrh	r3, [r7, #14]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d008      	beq.n	8007594 <cmp_lfn+0xd0>
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	005b      	lsls	r3, r3, #1
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	4413      	add	r3, r2
 800758a:	881b      	ldrh	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d001      	beq.n	8007594 <cmp_lfn+0xd0>
 8007590:	2300      	movs	r3, #0
 8007592:	e000      	b.n	8007596 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007594:	2301      	movs	r3, #1
}
 8007596:	4618      	mov	r0, r3
 8007598:	371c      	adds	r7, #28
 800759a:	46bd      	mov	sp, r7
 800759c:	bd90      	pop	{r4, r7, pc}
 800759e:	bf00      	nop
 80075a0:	0800fb6c 	.word	0x0800fb6c

080075a4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	331a      	adds	r3, #26
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7fe ff0e 	bl	80063d4 <ld_word>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d001      	beq.n	80075c2 <pick_lfn+0x1e>
 80075be:	2300      	movs	r3, #0
 80075c0:	e04d      	b.n	800765e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ca:	1e5a      	subs	r2, r3, #1
 80075cc:	4613      	mov	r3, r2
 80075ce:	005b      	lsls	r3, r3, #1
 80075d0:	4413      	add	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4413      	add	r3, r2
 80075d6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80075d8:	2301      	movs	r3, #1
 80075da:	81fb      	strh	r3, [r7, #14]
 80075dc:	2300      	movs	r3, #0
 80075de:	613b      	str	r3, [r7, #16]
 80075e0:	e028      	b.n	8007634 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80075e2:	4a21      	ldr	r2, [pc, #132]	; (8007668 <pick_lfn+0xc4>)
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	4413      	add	r3, r2
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	461a      	mov	r2, r3
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	4413      	add	r3, r2
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7fe feef 	bl	80063d4 <ld_word>
 80075f6:	4603      	mov	r3, r0
 80075f8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80075fa:	89fb      	ldrh	r3, [r7, #14]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00f      	beq.n	8007620 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	2bfe      	cmp	r3, #254	; 0xfe
 8007604:	d901      	bls.n	800760a <pick_lfn+0x66>
 8007606:	2300      	movs	r3, #0
 8007608:	e029      	b.n	800765e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800760a:	89bb      	ldrh	r3, [r7, #12]
 800760c:	81fb      	strh	r3, [r7, #14]
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	1c5a      	adds	r2, r3, #1
 8007612:	617a      	str	r2, [r7, #20]
 8007614:	005b      	lsls	r3, r3, #1
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	4413      	add	r3, r2
 800761a:	89fa      	ldrh	r2, [r7, #14]
 800761c:	801a      	strh	r2, [r3, #0]
 800761e:	e006      	b.n	800762e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007620:	89bb      	ldrh	r3, [r7, #12]
 8007622:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007626:	4293      	cmp	r3, r2
 8007628:	d001      	beq.n	800762e <pick_lfn+0x8a>
 800762a:	2300      	movs	r3, #0
 800762c:	e017      	b.n	800765e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	3301      	adds	r3, #1
 8007632:	613b      	str	r3, [r7, #16]
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	2b0c      	cmp	r3, #12
 8007638:	d9d3      	bls.n	80075e2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00a      	beq.n	800765c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	2bfe      	cmp	r3, #254	; 0xfe
 800764a:	d901      	bls.n	8007650 <pick_lfn+0xac>
 800764c:	2300      	movs	r3, #0
 800764e:	e006      	b.n	800765e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	005b      	lsls	r3, r3, #1
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	4413      	add	r3, r2
 8007658:	2200      	movs	r2, #0
 800765a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800765c:	2301      	movs	r3, #1
}
 800765e:	4618      	mov	r0, r3
 8007660:	3718      	adds	r7, #24
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	0800fb6c 	.word	0x0800fb6c

0800766c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b088      	sub	sp, #32
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	4611      	mov	r1, r2
 8007678:	461a      	mov	r2, r3
 800767a:	460b      	mov	r3, r1
 800767c:	71fb      	strb	r3, [r7, #7]
 800767e:	4613      	mov	r3, r2
 8007680:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	330d      	adds	r3, #13
 8007686:	79ba      	ldrb	r2, [r7, #6]
 8007688:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	330b      	adds	r3, #11
 800768e:	220f      	movs	r2, #15
 8007690:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	330c      	adds	r3, #12
 8007696:	2200      	movs	r2, #0
 8007698:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	331a      	adds	r3, #26
 800769e:	2100      	movs	r1, #0
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7fe fed2 	bl	800644a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80076a6:	79fb      	ldrb	r3, [r7, #7]
 80076a8:	1e5a      	subs	r2, r3, #1
 80076aa:	4613      	mov	r3, r2
 80076ac:	005b      	lsls	r3, r3, #1
 80076ae:	4413      	add	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4413      	add	r3, r2
 80076b4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80076b6:	2300      	movs	r3, #0
 80076b8:	82fb      	strh	r3, [r7, #22]
 80076ba:	2300      	movs	r3, #0
 80076bc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80076be:	8afb      	ldrh	r3, [r7, #22]
 80076c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d007      	beq.n	80076d8 <put_lfn+0x6c>
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	1c5a      	adds	r2, r3, #1
 80076cc:	61fa      	str	r2, [r7, #28]
 80076ce:	005b      	lsls	r3, r3, #1
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	4413      	add	r3, r2
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80076d8:	4a17      	ldr	r2, [pc, #92]	; (8007738 <put_lfn+0xcc>)
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	4413      	add	r3, r2
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	461a      	mov	r2, r3
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	4413      	add	r3, r2
 80076e6:	8afa      	ldrh	r2, [r7, #22]
 80076e8:	4611      	mov	r1, r2
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fe fead 	bl	800644a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80076f0:	8afb      	ldrh	r3, [r7, #22]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d102      	bne.n	80076fc <put_lfn+0x90>
 80076f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076fa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	3301      	adds	r3, #1
 8007700:	61bb      	str	r3, [r7, #24]
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	2b0c      	cmp	r3, #12
 8007706:	d9da      	bls.n	80076be <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007708:	8afb      	ldrh	r3, [r7, #22]
 800770a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800770e:	4293      	cmp	r3, r2
 8007710:	d006      	beq.n	8007720 <put_lfn+0xb4>
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	005b      	lsls	r3, r3, #1
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	4413      	add	r3, r2
 800771a:	881b      	ldrh	r3, [r3, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d103      	bne.n	8007728 <put_lfn+0xbc>
 8007720:	79fb      	ldrb	r3, [r7, #7]
 8007722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007726:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	79fa      	ldrb	r2, [r7, #7]
 800772c:	701a      	strb	r2, [r3, #0]
}
 800772e:	bf00      	nop
 8007730:	3720      	adds	r7, #32
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	0800fb6c 	.word	0x0800fb6c

0800773c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b08c      	sub	sp, #48	; 0x30
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	607a      	str	r2, [r7, #4]
 8007748:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800774a:	220b      	movs	r2, #11
 800774c:	68b9      	ldr	r1, [r7, #8]
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f7fe fec2 	bl	80064d8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	2b05      	cmp	r3, #5
 8007758:	d92b      	bls.n	80077b2 <gen_numname+0x76>
		sr = seq;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800775e:	e022      	b.n	80077a6 <gen_numname+0x6a>
			wc = *lfn++;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	1c9a      	adds	r2, r3, #2
 8007764:	607a      	str	r2, [r7, #4]
 8007766:	881b      	ldrh	r3, [r3, #0]
 8007768:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800776a:	2300      	movs	r3, #0
 800776c:	62bb      	str	r3, [r7, #40]	; 0x28
 800776e:	e017      	b.n	80077a0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	005a      	lsls	r2, r3, #1
 8007774:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007776:	f003 0301 	and.w	r3, r3, #1
 800777a:	4413      	add	r3, r2
 800777c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800777e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007780:	085b      	lsrs	r3, r3, #1
 8007782:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800778a:	2b00      	cmp	r3, #0
 800778c:	d005      	beq.n	800779a <gen_numname+0x5e>
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8007794:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8007798:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800779a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779c:	3301      	adds	r3, #1
 800779e:	62bb      	str	r3, [r7, #40]	; 0x28
 80077a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a2:	2b0f      	cmp	r3, #15
 80077a4:	d9e4      	bls.n	8007770 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	881b      	ldrh	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1d8      	bne.n	8007760 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80077b2:	2307      	movs	r3, #7
 80077b4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	f003 030f 	and.w	r3, r3, #15
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	3330      	adds	r3, #48	; 0x30
 80077c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80077c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077ca:	2b39      	cmp	r3, #57	; 0x39
 80077cc:	d904      	bls.n	80077d8 <gen_numname+0x9c>
 80077ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077d2:	3307      	adds	r3, #7
 80077d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80077d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077da:	1e5a      	subs	r2, r3, #1
 80077dc:	62ba      	str	r2, [r7, #40]	; 0x28
 80077de:	3330      	adds	r3, #48	; 0x30
 80077e0:	443b      	add	r3, r7
 80077e2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80077e6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	091b      	lsrs	r3, r3, #4
 80077ee:	603b      	str	r3, [r7, #0]
	} while (seq);
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1df      	bne.n	80077b6 <gen_numname+0x7a>
	ns[i] = '~';
 80077f6:	f107 0214 	add.w	r2, r7, #20
 80077fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fc:	4413      	add	r3, r2
 80077fe:	227e      	movs	r2, #126	; 0x7e
 8007800:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007802:	2300      	movs	r3, #0
 8007804:	627b      	str	r3, [r7, #36]	; 0x24
 8007806:	e002      	b.n	800780e <gen_numname+0xd2>
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	3301      	adds	r3, #1
 800780c:	627b      	str	r3, [r7, #36]	; 0x24
 800780e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007812:	429a      	cmp	r2, r3
 8007814:	d205      	bcs.n	8007822 <gen_numname+0xe6>
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781a:	4413      	add	r3, r2
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	2b20      	cmp	r3, #32
 8007820:	d1f2      	bne.n	8007808 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007824:	2b07      	cmp	r3, #7
 8007826:	d807      	bhi.n	8007838 <gen_numname+0xfc>
 8007828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782a:	1c5a      	adds	r2, r3, #1
 800782c:	62ba      	str	r2, [r7, #40]	; 0x28
 800782e:	3330      	adds	r3, #48	; 0x30
 8007830:	443b      	add	r3, r7
 8007832:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007836:	e000      	b.n	800783a <gen_numname+0xfe>
 8007838:	2120      	movs	r1, #32
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	1c5a      	adds	r2, r3, #1
 800783e:	627a      	str	r2, [r7, #36]	; 0x24
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	4413      	add	r3, r2
 8007844:	460a      	mov	r2, r1
 8007846:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784a:	2b07      	cmp	r3, #7
 800784c:	d9e9      	bls.n	8007822 <gen_numname+0xe6>
}
 800784e:	bf00      	nop
 8007850:	bf00      	nop
 8007852:	3730      	adds	r7, #48	; 0x30
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007858:	b480      	push	{r7}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007860:	2300      	movs	r3, #0
 8007862:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007864:	230b      	movs	r3, #11
 8007866:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007868:	7bfb      	ldrb	r3, [r7, #15]
 800786a:	b2da      	uxtb	r2, r3
 800786c:	0852      	lsrs	r2, r2, #1
 800786e:	01db      	lsls	r3, r3, #7
 8007870:	4313      	orrs	r3, r2
 8007872:	b2da      	uxtb	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	1c59      	adds	r1, r3, #1
 8007878:	6079      	str	r1, [r7, #4]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	4413      	add	r3, r2
 800787e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	3b01      	subs	r3, #1
 8007884:	60bb      	str	r3, [r7, #8]
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1ed      	bne.n	8007868 <sum_sfn+0x10>
	return sum;
 800788c:	7bfb      	ldrb	r3, [r7, #15]
}
 800788e:	4618      	mov	r0, r3
 8007890:	3714      	adds	r7, #20
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr

0800789a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b086      	sub	sp, #24
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
 80078a2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80078a4:	2304      	movs	r3, #4
 80078a6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80078ae:	23ff      	movs	r3, #255	; 0xff
 80078b0:	757b      	strb	r3, [r7, #21]
 80078b2:	23ff      	movs	r3, #255	; 0xff
 80078b4:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80078b6:	e081      	b.n	80079bc <dir_read+0x122>
		res = move_window(fs, dp->sect);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	69db      	ldr	r3, [r3, #28]
 80078bc:	4619      	mov	r1, r3
 80078be:	6938      	ldr	r0, [r7, #16]
 80078c0:	f7ff f838 	bl	8006934 <move_window>
 80078c4:	4603      	mov	r3, r0
 80078c6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80078c8:	7dfb      	ldrb	r3, [r7, #23]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d17c      	bne.n	80079c8 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a1b      	ldr	r3, [r3, #32]
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 80078d6:	7dbb      	ldrb	r3, [r7, #22]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d102      	bne.n	80078e2 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80078dc:	2304      	movs	r3, #4
 80078de:	75fb      	strb	r3, [r7, #23]
 80078e0:	e077      	b.n	80079d2 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	330b      	adds	r3, #11
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078ee:	73fb      	strb	r3, [r7, #15]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	7bfa      	ldrb	r2, [r7, #15]
 80078f4:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80078f6:	7dbb      	ldrb	r3, [r7, #22]
 80078f8:	2be5      	cmp	r3, #229	; 0xe5
 80078fa:	d00e      	beq.n	800791a <dir_read+0x80>
 80078fc:	7dbb      	ldrb	r3, [r7, #22]
 80078fe:	2b2e      	cmp	r3, #46	; 0x2e
 8007900:	d00b      	beq.n	800791a <dir_read+0x80>
 8007902:	7bfb      	ldrb	r3, [r7, #15]
 8007904:	f023 0320 	bic.w	r3, r3, #32
 8007908:	2b08      	cmp	r3, #8
 800790a:	bf0c      	ite	eq
 800790c:	2301      	moveq	r3, #1
 800790e:	2300      	movne	r3, #0
 8007910:	b2db      	uxtb	r3, r3
 8007912:	461a      	mov	r2, r3
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	4293      	cmp	r3, r2
 8007918:	d002      	beq.n	8007920 <dir_read+0x86>
				ord = 0xFF;
 800791a:	23ff      	movs	r3, #255	; 0xff
 800791c:	757b      	strb	r3, [r7, #21]
 800791e:	e044      	b.n	80079aa <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8007920:	7bfb      	ldrb	r3, [r7, #15]
 8007922:	2b0f      	cmp	r3, #15
 8007924:	d12f      	bne.n	8007986 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8007926:	7dbb      	ldrb	r3, [r7, #22]
 8007928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00d      	beq.n	800794c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a1b      	ldr	r3, [r3, #32]
 8007934:	7b5b      	ldrb	r3, [r3, #13]
 8007936:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8007938:	7dbb      	ldrb	r3, [r7, #22]
 800793a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800793e:	75bb      	strb	r3, [r7, #22]
 8007940:	7dbb      	ldrb	r3, [r7, #22]
 8007942:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	695a      	ldr	r2, [r3, #20]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800794c:	7dba      	ldrb	r2, [r7, #22]
 800794e:	7d7b      	ldrb	r3, [r7, #21]
 8007950:	429a      	cmp	r2, r3
 8007952:	d115      	bne.n	8007980 <dir_read+0xe6>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a1b      	ldr	r3, [r3, #32]
 8007958:	330d      	adds	r3, #13
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	7d3a      	ldrb	r2, [r7, #20]
 800795e:	429a      	cmp	r2, r3
 8007960:	d10e      	bne.n	8007980 <dir_read+0xe6>
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	691a      	ldr	r2, [r3, #16]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	4619      	mov	r1, r3
 800796c:	4610      	mov	r0, r2
 800796e:	f7ff fe19 	bl	80075a4 <pick_lfn>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d003      	beq.n	8007980 <dir_read+0xe6>
 8007978:	7d7b      	ldrb	r3, [r7, #21]
 800797a:	3b01      	subs	r3, #1
 800797c:	b2db      	uxtb	r3, r3
 800797e:	e000      	b.n	8007982 <dir_read+0xe8>
 8007980:	23ff      	movs	r3, #255	; 0xff
 8007982:	757b      	strb	r3, [r7, #21]
 8007984:	e011      	b.n	80079aa <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8007986:	7d7b      	ldrb	r3, [r7, #21]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d109      	bne.n	80079a0 <dir_read+0x106>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a1b      	ldr	r3, [r3, #32]
 8007990:	4618      	mov	r0, r3
 8007992:	f7ff ff61 	bl	8007858 <sum_sfn>
 8007996:	4603      	mov	r3, r0
 8007998:	461a      	mov	r2, r3
 800799a:	7d3b      	ldrb	r3, [r7, #20]
 800799c:	4293      	cmp	r3, r2
 800799e:	d015      	beq.n	80079cc <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f04f 32ff 	mov.w	r2, #4294967295
 80079a6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 80079a8:	e010      	b.n	80079cc <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80079aa:	2100      	movs	r1, #0
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f7ff fc2c 	bl	800720a <dir_next>
 80079b2:	4603      	mov	r3, r0
 80079b4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80079b6:	7dfb      	ldrb	r3, [r7, #23]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d109      	bne.n	80079d0 <dir_read+0x136>
	while (dp->sect) {
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	69db      	ldr	r3, [r3, #28]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f47f af79 	bne.w	80078b8 <dir_read+0x1e>
 80079c6:	e004      	b.n	80079d2 <dir_read+0x138>
		if (res != FR_OK) break;
 80079c8:	bf00      	nop
 80079ca:	e002      	b.n	80079d2 <dir_read+0x138>
					break;
 80079cc:	bf00      	nop
 80079ce:	e000      	b.n	80079d2 <dir_read+0x138>
		if (res != FR_OK) break;
 80079d0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80079d2:	7dfb      	ldrb	r3, [r7, #23]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d002      	beq.n	80079de <dir_read+0x144>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	61da      	str	r2, [r3, #28]
	return res;
 80079de:	7dfb      	ldrb	r3, [r7, #23]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3718      	adds	r7, #24
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80079f6:	2100      	movs	r1, #0
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7ff fb7d 	bl	80070f8 <dir_sdi>
 80079fe:	4603      	mov	r3, r0
 8007a00:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007a02:	7dfb      	ldrb	r3, [r7, #23]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d001      	beq.n	8007a0c <dir_find+0x24>
 8007a08:	7dfb      	ldrb	r3, [r7, #23]
 8007a0a:	e0a9      	b.n	8007b60 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007a0c:	23ff      	movs	r3, #255	; 0xff
 8007a0e:	753b      	strb	r3, [r7, #20]
 8007a10:	7d3b      	ldrb	r3, [r7, #20]
 8007a12:	757b      	strb	r3, [r7, #21]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f04f 32ff 	mov.w	r2, #4294967295
 8007a1a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	69db      	ldr	r3, [r3, #28]
 8007a20:	4619      	mov	r1, r3
 8007a22:	6938      	ldr	r0, [r7, #16]
 8007a24:	f7fe ff86 	bl	8006934 <move_window>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007a2c:	7dfb      	ldrb	r3, [r7, #23]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f040 8090 	bne.w	8007b54 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a1b      	ldr	r3, [r3, #32]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007a3c:	7dbb      	ldrb	r3, [r7, #22]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d102      	bne.n	8007a48 <dir_find+0x60>
 8007a42:	2304      	movs	r3, #4
 8007a44:	75fb      	strb	r3, [r7, #23]
 8007a46:	e08a      	b.n	8007b5e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a1b      	ldr	r3, [r3, #32]
 8007a4c:	330b      	adds	r3, #11
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a54:	73fb      	strb	r3, [r7, #15]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	7bfa      	ldrb	r2, [r7, #15]
 8007a5a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007a5c:	7dbb      	ldrb	r3, [r7, #22]
 8007a5e:	2be5      	cmp	r3, #229	; 0xe5
 8007a60:	d007      	beq.n	8007a72 <dir_find+0x8a>
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
 8007a64:	f003 0308 	and.w	r3, r3, #8
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d009      	beq.n	8007a80 <dir_find+0x98>
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
 8007a6e:	2b0f      	cmp	r3, #15
 8007a70:	d006      	beq.n	8007a80 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007a72:	23ff      	movs	r3, #255	; 0xff
 8007a74:	757b      	strb	r3, [r7, #21]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f04f 32ff 	mov.w	r2, #4294967295
 8007a7c:	631a      	str	r2, [r3, #48]	; 0x30
 8007a7e:	e05e      	b.n	8007b3e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
 8007a82:	2b0f      	cmp	r3, #15
 8007a84:	d136      	bne.n	8007af4 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d154      	bne.n	8007b3e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007a94:	7dbb      	ldrb	r3, [r7, #22]
 8007a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00d      	beq.n	8007aba <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a1b      	ldr	r3, [r3, #32]
 8007aa2:	7b5b      	ldrb	r3, [r3, #13]
 8007aa4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007aa6:	7dbb      	ldrb	r3, [r7, #22]
 8007aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aac:	75bb      	strb	r3, [r7, #22]
 8007aae:	7dbb      	ldrb	r3, [r7, #22]
 8007ab0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	695a      	ldr	r2, [r3, #20]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007aba:	7dba      	ldrb	r2, [r7, #22]
 8007abc:	7d7b      	ldrb	r3, [r7, #21]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d115      	bne.n	8007aee <dir_find+0x106>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	330d      	adds	r3, #13
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	7d3a      	ldrb	r2, [r7, #20]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d10e      	bne.n	8007aee <dir_find+0x106>
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	691a      	ldr	r2, [r3, #16]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a1b      	ldr	r3, [r3, #32]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	4610      	mov	r0, r2
 8007adc:	f7ff fcf2 	bl	80074c4 <cmp_lfn>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d003      	beq.n	8007aee <dir_find+0x106>
 8007ae6:	7d7b      	ldrb	r3, [r7, #21]
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	e000      	b.n	8007af0 <dir_find+0x108>
 8007aee:	23ff      	movs	r3, #255	; 0xff
 8007af0:	757b      	strb	r3, [r7, #21]
 8007af2:	e024      	b.n	8007b3e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007af4:	7d7b      	ldrb	r3, [r7, #21]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d109      	bne.n	8007b0e <dir_find+0x126>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7ff feaa 	bl	8007858 <sum_sfn>
 8007b04:	4603      	mov	r3, r0
 8007b06:	461a      	mov	r2, r3
 8007b08:	7d3b      	ldrb	r3, [r7, #20]
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d024      	beq.n	8007b58 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007b14:	f003 0301 	and.w	r3, r3, #1
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10a      	bne.n	8007b32 <dir_find+0x14a>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6a18      	ldr	r0, [r3, #32]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	3324      	adds	r3, #36	; 0x24
 8007b24:	220b      	movs	r2, #11
 8007b26:	4619      	mov	r1, r3
 8007b28:	f7fe fd12 	bl	8006550 <mem_cmp>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d014      	beq.n	8007b5c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007b32:	23ff      	movs	r3, #255	; 0xff
 8007b34:	757b      	strb	r3, [r7, #21]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f04f 32ff 	mov.w	r2, #4294967295
 8007b3c:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007b3e:	2100      	movs	r1, #0
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f7ff fb62 	bl	800720a <dir_next>
 8007b46:	4603      	mov	r3, r0
 8007b48:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007b4a:	7dfb      	ldrb	r3, [r7, #23]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f43f af65 	beq.w	8007a1c <dir_find+0x34>
 8007b52:	e004      	b.n	8007b5e <dir_find+0x176>
		if (res != FR_OK) break;
 8007b54:	bf00      	nop
 8007b56:	e002      	b.n	8007b5e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007b58:	bf00      	nop
 8007b5a:	e000      	b.n	8007b5e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007b5c:	bf00      	nop

	return res;
 8007b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3718      	adds	r7, #24
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b08c      	sub	sp, #48	; 0x30
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007b7c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d001      	beq.n	8007b88 <dir_register+0x20>
 8007b84:	2306      	movs	r3, #6
 8007b86:	e0e0      	b.n	8007d4a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007b88:	2300      	movs	r3, #0
 8007b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8007b8c:	e002      	b.n	8007b94 <dir_register+0x2c>
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b90:	3301      	adds	r3, #1
 8007b92:	627b      	str	r3, [r7, #36]	; 0x24
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	691a      	ldr	r2, [r3, #16]
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	005b      	lsls	r3, r3, #1
 8007b9c:	4413      	add	r3, r2
 8007b9e:	881b      	ldrh	r3, [r3, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1f4      	bne.n	8007b8e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8007baa:	f107 030c 	add.w	r3, r7, #12
 8007bae:	220c      	movs	r2, #12
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7fe fc91 	bl	80064d8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007bb6:	7dfb      	ldrb	r3, [r7, #23]
 8007bb8:	f003 0301 	and.w	r3, r3, #1
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d032      	beq.n	8007c26 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2240      	movs	r2, #64	; 0x40
 8007bc4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8007bc8:	2301      	movs	r3, #1
 8007bca:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bcc:	e016      	b.n	8007bfc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	691a      	ldr	r2, [r3, #16]
 8007bd8:	f107 010c 	add.w	r1, r7, #12
 8007bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bde:	f7ff fdad 	bl	800773c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f7ff ff00 	bl	80079e8 <dir_find>
 8007be8:	4603      	mov	r3, r0
 8007bea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8007bee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d106      	bne.n	8007c04 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfe:	2b63      	cmp	r3, #99	; 0x63
 8007c00:	d9e5      	bls.n	8007bce <dir_register+0x66>
 8007c02:	e000      	b.n	8007c06 <dir_register+0x9e>
			if (res != FR_OK) break;
 8007c04:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c08:	2b64      	cmp	r3, #100	; 0x64
 8007c0a:	d101      	bne.n	8007c10 <dir_register+0xa8>
 8007c0c:	2307      	movs	r3, #7
 8007c0e:	e09c      	b.n	8007d4a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007c10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c14:	2b04      	cmp	r3, #4
 8007c16:	d002      	beq.n	8007c1e <dir_register+0xb6>
 8007c18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c1c:	e095      	b.n	8007d4a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007c1e:	7dfa      	ldrb	r2, [r7, #23]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007c26:	7dfb      	ldrb	r3, [r7, #23]
 8007c28:	f003 0302 	and.w	r3, r3, #2
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d007      	beq.n	8007c40 <dir_register+0xd8>
 8007c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c32:	330c      	adds	r3, #12
 8007c34:	4a47      	ldr	r2, [pc, #284]	; (8007d54 <dir_register+0x1ec>)
 8007c36:	fba2 2303 	umull	r2, r3, r2, r3
 8007c3a:	089b      	lsrs	r3, r3, #2
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	e000      	b.n	8007c42 <dir_register+0xda>
 8007c40:	2301      	movs	r3, #1
 8007c42:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007c44:	6a39      	ldr	r1, [r7, #32]
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7ff fbb5 	bl	80073b6 <dir_alloc>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007c52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d148      	bne.n	8007cec <dir_register+0x184>
 8007c5a:	6a3b      	ldr	r3, [r7, #32]
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	623b      	str	r3, [r7, #32]
 8007c60:	6a3b      	ldr	r3, [r7, #32]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d042      	beq.n	8007cec <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	695a      	ldr	r2, [r3, #20]
 8007c6a:	6a3b      	ldr	r3, [r7, #32]
 8007c6c:	015b      	lsls	r3, r3, #5
 8007c6e:	1ad3      	subs	r3, r2, r3
 8007c70:	4619      	mov	r1, r3
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f7ff fa40 	bl	80070f8 <dir_sdi>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007c7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d132      	bne.n	8007cec <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	3324      	adds	r3, #36	; 0x24
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7ff fde4 	bl	8007858 <sum_sfn>
 8007c90:	4603      	mov	r3, r0
 8007c92:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	69db      	ldr	r3, [r3, #28]
 8007c98:	4619      	mov	r1, r3
 8007c9a:	69f8      	ldr	r0, [r7, #28]
 8007c9c:	f7fe fe4a 	bl	8006934 <move_window>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8007ca6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d11d      	bne.n	8007cea <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	6918      	ldr	r0, [r3, #16]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a19      	ldr	r1, [r3, #32]
 8007cb6:	6a3b      	ldr	r3, [r7, #32]
 8007cb8:	b2da      	uxtb	r2, r3
 8007cba:	7efb      	ldrb	r3, [r7, #27]
 8007cbc:	f7ff fcd6 	bl	800766c <put_lfn>
				fs->wflag = 1;
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7ff fa9e 	bl	800720a <dir_next>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007cd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d107      	bne.n	8007cec <dir_register+0x184>
 8007cdc:	6a3b      	ldr	r3, [r7, #32]
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	623b      	str	r3, [r7, #32]
 8007ce2:	6a3b      	ldr	r3, [r7, #32]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1d5      	bne.n	8007c94 <dir_register+0x12c>
 8007ce8:	e000      	b.n	8007cec <dir_register+0x184>
				if (res != FR_OK) break;
 8007cea:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007cec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d128      	bne.n	8007d46 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	69db      	ldr	r3, [r3, #28]
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	69f8      	ldr	r0, [r7, #28]
 8007cfc:	f7fe fe1a 	bl	8006934 <move_window>
 8007d00:	4603      	mov	r3, r0
 8007d02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007d06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d11b      	bne.n	8007d46 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	2220      	movs	r2, #32
 8007d14:	2100      	movs	r1, #0
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7fe fbff 	bl	800651a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a18      	ldr	r0, [r3, #32]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3324      	adds	r3, #36	; 0x24
 8007d24:	220b      	movs	r2, #11
 8007d26:	4619      	mov	r1, r3
 8007d28:	f7fe fbd6 	bl	80064d8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a1b      	ldr	r3, [r3, #32]
 8007d36:	330c      	adds	r3, #12
 8007d38:	f002 0218 	and.w	r2, r2, #24
 8007d3c:	b2d2      	uxtb	r2, r2
 8007d3e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	2201      	movs	r2, #1
 8007d44:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007d46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3730      	adds	r7, #48	; 0x30
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	4ec4ec4f 	.word	0x4ec4ec4f

08007d58 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	695b      	ldr	r3, [r3, #20]
 8007d6a:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d74:	d007      	beq.n	8007d86 <dir_remove+0x2e>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7ff f9bb 	bl	80070f8 <dir_sdi>
 8007d82:	4603      	mov	r3, r0
 8007d84:	e000      	b.n	8007d88 <dir_remove+0x30>
 8007d86:	2300      	movs	r3, #0
 8007d88:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007d8a:	7dfb      	ldrb	r3, [r7, #23]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d128      	bne.n	8007de2 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	69db      	ldr	r3, [r3, #28]
 8007d94:	4619      	mov	r1, r3
 8007d96:	6938      	ldr	r0, [r7, #16]
 8007d98:	f7fe fdcc 	bl	8006934 <move_window>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007da0:	7dfb      	ldrb	r3, [r7, #23]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d115      	bne.n	8007dd2 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a1b      	ldr	r3, [r3, #32]
 8007daa:	22e5      	movs	r2, #229	; 0xe5
 8007dac:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	2201      	movs	r2, #1
 8007db2:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	695b      	ldr	r3, [r3, #20]
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d90b      	bls.n	8007dd6 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f7ff fa22 	bl	800720a <dir_next>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8007dca:	7dfb      	ldrb	r3, [r7, #23]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d0df      	beq.n	8007d90 <dir_remove+0x38>
 8007dd0:	e002      	b.n	8007dd8 <dir_remove+0x80>
			if (res != FR_OK) break;
 8007dd2:	bf00      	nop
 8007dd4:	e000      	b.n	8007dd8 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8007dd6:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8007dd8:	7dfb      	ldrb	r3, [r7, #23]
 8007dda:	2b04      	cmp	r3, #4
 8007ddc:	d101      	bne.n	8007de2 <dir_remove+0x8a>
 8007dde:	2302      	movs	r3, #2
 8007de0:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8007de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b088      	sub	sp, #32
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	69db      	ldr	r3, [r3, #28]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	f000 80c9 	beq.w	8007f9e <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e14:	d032      	beq.n	8007e7c <get_fileinfo+0x90>
			i = j = 0;
 8007e16:	2300      	movs	r3, #0
 8007e18:	61bb      	str	r3, [r7, #24]
 8007e1a:	69bb      	ldr	r3, [r7, #24]
 8007e1c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8007e1e:	e01b      	b.n	8007e58 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8007e20:	89fb      	ldrh	r3, [r7, #14]
 8007e22:	2100      	movs	r1, #0
 8007e24:	4618      	mov	r0, r3
 8007e26:	f002 f879 	bl	8009f1c <ff_convert>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8007e2e:	89fb      	ldrh	r3, [r7, #14]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d102      	bne.n	8007e3a <get_fileinfo+0x4e>
 8007e34:	2300      	movs	r3, #0
 8007e36:	61fb      	str	r3, [r7, #28]
 8007e38:	e01a      	b.n	8007e70 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	2bfe      	cmp	r3, #254	; 0xfe
 8007e3e:	d902      	bls.n	8007e46 <get_fileinfo+0x5a>
 8007e40:	2300      	movs	r3, #0
 8007e42:	61fb      	str	r3, [r7, #28]
 8007e44:	e014      	b.n	8007e70 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	1c5a      	adds	r2, r3, #1
 8007e4a:	61fa      	str	r2, [r7, #28]
 8007e4c:	89fa      	ldrh	r2, [r7, #14]
 8007e4e:	b2d1      	uxtb	r1, r2
 8007e50:	683a      	ldr	r2, [r7, #0]
 8007e52:	4413      	add	r3, r2
 8007e54:	460a      	mov	r2, r1
 8007e56:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	691a      	ldr	r2, [r3, #16]
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	1c59      	adds	r1, r3, #1
 8007e60:	61b9      	str	r1, [r7, #24]
 8007e62:	005b      	lsls	r3, r3, #1
 8007e64:	4413      	add	r3, r2
 8007e66:	881b      	ldrh	r3, [r3, #0]
 8007e68:	81fb      	strh	r3, [r7, #14]
 8007e6a:	89fb      	ldrh	r3, [r7, #14]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1d7      	bne.n	8007e20 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8007e70:	683a      	ldr	r2, [r7, #0]
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	4413      	add	r3, r2
 8007e76:	3316      	adds	r3, #22
 8007e78:	2200      	movs	r2, #0
 8007e7a:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	61bb      	str	r3, [r7, #24]
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8007e84:	683a      	ldr	r2, [r7, #0]
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	4413      	add	r3, r2
 8007e8a:	3316      	adds	r3, #22
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8007e90:	e04c      	b.n	8007f2c <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a1a      	ldr	r2, [r3, #32]
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	1c59      	adds	r1, r3, #1
 8007e9a:	61f9      	str	r1, [r7, #28]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8007ea2:	7dfb      	ldrb	r3, [r7, #23]
 8007ea4:	2b20      	cmp	r3, #32
 8007ea6:	d100      	bne.n	8007eaa <get_fileinfo+0xbe>
 8007ea8:	e040      	b.n	8007f2c <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007eaa:	7dfb      	ldrb	r3, [r7, #23]
 8007eac:	2b05      	cmp	r3, #5
 8007eae:	d101      	bne.n	8007eb4 <get_fileinfo+0xc8>
 8007eb0:	23e5      	movs	r3, #229	; 0xe5
 8007eb2:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	2b09      	cmp	r3, #9
 8007eb8:	d10f      	bne.n	8007eda <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8007eba:	89bb      	ldrh	r3, [r7, #12]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d105      	bne.n	8007ecc <get_fileinfo+0xe0>
 8007ec0:	683a      	ldr	r2, [r7, #0]
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	3316      	adds	r3, #22
 8007ec8:	222e      	movs	r2, #46	; 0x2e
 8007eca:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	1c5a      	adds	r2, r3, #1
 8007ed0:	61ba      	str	r2, [r7, #24]
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	222e      	movs	r2, #46	; 0x2e
 8007ed8:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8007eda:	683a      	ldr	r2, [r7, #0]
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	4413      	add	r3, r2
 8007ee0:	3309      	adds	r3, #9
 8007ee2:	7dfa      	ldrb	r2, [r7, #23]
 8007ee4:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8007ee6:	89bb      	ldrh	r3, [r7, #12]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d11c      	bne.n	8007f26 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8007eec:	7dfb      	ldrb	r3, [r7, #23]
 8007eee:	2b40      	cmp	r3, #64	; 0x40
 8007ef0:	d913      	bls.n	8007f1a <get_fileinfo+0x12e>
 8007ef2:	7dfb      	ldrb	r3, [r7, #23]
 8007ef4:	2b5a      	cmp	r3, #90	; 0x5a
 8007ef6:	d810      	bhi.n	8007f1a <get_fileinfo+0x12e>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a1b      	ldr	r3, [r3, #32]
 8007efc:	330c      	adds	r3, #12
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	461a      	mov	r2, r3
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	2b08      	cmp	r3, #8
 8007f06:	d901      	bls.n	8007f0c <get_fileinfo+0x120>
 8007f08:	2310      	movs	r3, #16
 8007f0a:	e000      	b.n	8007f0e <get_fileinfo+0x122>
 8007f0c:	2308      	movs	r3, #8
 8007f0e:	4013      	ands	r3, r2
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d002      	beq.n	8007f1a <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8007f14:	7dfb      	ldrb	r3, [r7, #23]
 8007f16:	3320      	adds	r3, #32
 8007f18:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	4413      	add	r3, r2
 8007f20:	3316      	adds	r3, #22
 8007f22:	7dfa      	ldrb	r2, [r7, #23]
 8007f24:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	2b0a      	cmp	r3, #10
 8007f30:	d9af      	bls.n	8007e92 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8007f32:	89bb      	ldrh	r3, [r7, #12]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10d      	bne.n	8007f54 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8007f38:	683a      	ldr	r2, [r7, #0]
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	3316      	adds	r3, #22
 8007f40:	2200      	movs	r2, #0
 8007f42:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a1b      	ldr	r3, [r3, #32]
 8007f48:	330c      	adds	r3, #12
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d101      	bne.n	8007f54 <get_fileinfo+0x168>
 8007f50:	2300      	movs	r3, #0
 8007f52:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8007f54:	683a      	ldr	r2, [r7, #0]
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	4413      	add	r3, r2
 8007f5a:	3309      	adds	r3, #9
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a1b      	ldr	r3, [r3, #32]
 8007f64:	7ada      	ldrb	r2, [r3, #11]
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a1b      	ldr	r3, [r3, #32]
 8007f6e:	331c      	adds	r3, #28
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7fe fa47 	bl	8006404 <ld_dword>
 8007f76:	4602      	mov	r2, r0
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a1b      	ldr	r3, [r3, #32]
 8007f80:	3316      	adds	r3, #22
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fe fa3e 	bl	8006404 <ld_dword>
 8007f88:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	80da      	strh	r2, [r3, #6]
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	0c1b      	lsrs	r3, r3, #16
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	809a      	strh	r2, [r3, #4]
 8007f9c:	e000      	b.n	8007fa0 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007f9e:	bf00      	nop
}
 8007fa0:	3720      	adds	r7, #32
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
	...

08007fa8 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	1c59      	adds	r1, r3, #1
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	6011      	str	r1, [r2, #0]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8007fbe:	89fb      	ldrh	r3, [r7, #14]
 8007fc0:	2b60      	cmp	r3, #96	; 0x60
 8007fc2:	d905      	bls.n	8007fd0 <get_achar+0x28>
 8007fc4:	89fb      	ldrh	r3, [r7, #14]
 8007fc6:	2b7a      	cmp	r3, #122	; 0x7a
 8007fc8:	d802      	bhi.n	8007fd0 <get_achar+0x28>
 8007fca:	89fb      	ldrh	r3, [r7, #14]
 8007fcc:	3b20      	subs	r3, #32
 8007fce:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8007fd0:	89fb      	ldrh	r3, [r7, #14]
 8007fd2:	2b7f      	cmp	r3, #127	; 0x7f
 8007fd4:	d904      	bls.n	8007fe0 <get_achar+0x38>
 8007fd6:	89fb      	ldrh	r3, [r7, #14]
 8007fd8:	3b80      	subs	r3, #128	; 0x80
 8007fda:	4a05      	ldr	r2, [pc, #20]	; (8007ff0 <get_achar+0x48>)
 8007fdc:	5cd3      	ldrb	r3, [r2, r3]
 8007fde:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 8007fe0:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3714      	adds	r7, #20
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	0800faec 	.word	0x0800faec

08007ff4 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b08a      	sub	sp, #40	; 0x28
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
 8008000:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8008002:	e009      	b.n	8008018 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8008004:	f107 0308 	add.w	r3, r7, #8
 8008008:	4618      	mov	r0, r3
 800800a:	f7ff ffcd 	bl	8007fa8 <get_achar>
 800800e:	4603      	mov	r3, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d101      	bne.n	8008018 <pattern_matching+0x24>
 8008014:	2300      	movs	r3, #0
 8008016:	e064      	b.n	80080e2 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	1e5a      	subs	r2, r3, #1
 800801c:	607a      	str	r2, [r7, #4]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1f0      	bne.n	8008004 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d104      	bne.n	8008034 <pattern_matching+0x40>
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d001      	beq.n	8008034 <pattern_matching+0x40>
 8008030:	2301      	movs	r3, #1
 8008032:	e056      	b.n	80080e2 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	617b      	str	r3, [r7, #20]
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	2b3f      	cmp	r3, #63	; 0x3f
 8008042:	d003      	beq.n	800804c <pattern_matching+0x58>
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	2b2a      	cmp	r3, #42	; 0x2a
 800804a:	d126      	bne.n	800809a <pattern_matching+0xa6>
				nm = nx = 0;
 800804c:	2300      	movs	r3, #0
 800804e:	61fb      	str	r3, [r7, #28]
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	1c5a      	adds	r2, r3, #1
 8008058:	617a      	str	r2, [r7, #20]
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	2b3f      	cmp	r3, #63	; 0x3f
 800805e:	d103      	bne.n	8008068 <pattern_matching+0x74>
 8008060:	6a3b      	ldr	r3, [r7, #32]
 8008062:	3301      	adds	r3, #1
 8008064:	623b      	str	r3, [r7, #32]
 8008066:	e001      	b.n	800806c <pattern_matching+0x78>
 8008068:	2301      	movs	r3, #1
 800806a:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	2b3f      	cmp	r3, #63	; 0x3f
 8008072:	d0ef      	beq.n	8008054 <pattern_matching+0x60>
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	2b2a      	cmp	r3, #42	; 0x2a
 800807a:	d0eb      	beq.n	8008054 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800807c:	6978      	ldr	r0, [r7, #20]
 800807e:	6939      	ldr	r1, [r7, #16]
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	6a3a      	ldr	r2, [r7, #32]
 8008084:	f7ff ffb6 	bl	8007ff4 <pattern_matching>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <pattern_matching+0x9e>
 800808e:	2301      	movs	r3, #1
 8008090:	e027      	b.n	80080e2 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008098:	e017      	b.n	80080ca <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 800809a:	f107 0314 	add.w	r3, r7, #20
 800809e:	4618      	mov	r0, r3
 80080a0:	f7ff ff82 	bl	8007fa8 <get_achar>
 80080a4:	4603      	mov	r3, r0
 80080a6:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 80080a8:	f107 0310 	add.w	r3, r7, #16
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7ff ff7b 	bl	8007fa8 <get_achar>
 80080b2:	4603      	mov	r3, r0
 80080b4:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 80080b6:	8b7a      	ldrh	r2, [r7, #26]
 80080b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d104      	bne.n	80080c8 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 80080be:	8b7b      	ldrh	r3, [r7, #26]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1bb      	bne.n	800803c <pattern_matching+0x48>
 80080c4:	2301      	movs	r3, #1
 80080c6:	e00c      	b.n	80080e2 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 80080c8:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 80080ca:	f107 0308 	add.w	r3, r7, #8
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7ff ff6a 	bl	8007fa8 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d002      	beq.n	80080e0 <pattern_matching+0xec>
 80080da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1a9      	bne.n	8008034 <pattern_matching+0x40>

	return 0;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3728      	adds	r7, #40	; 0x28
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
	...

080080ec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b08a      	sub	sp, #40	; 0x28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	613b      	str	r3, [r7, #16]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	60fb      	str	r3, [r7, #12]
 8008104:	2300      	movs	r3, #0
 8008106:	617b      	str	r3, [r7, #20]
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	1c5a      	adds	r2, r3, #1
 8008110:	61ba      	str	r2, [r7, #24]
 8008112:	693a      	ldr	r2, [r7, #16]
 8008114:	4413      	add	r3, r2
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800811a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800811c:	2b1f      	cmp	r3, #31
 800811e:	d940      	bls.n	80081a2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008120:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008122:	2b2f      	cmp	r3, #47	; 0x2f
 8008124:	d006      	beq.n	8008134 <create_name+0x48>
 8008126:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008128:	2b5c      	cmp	r3, #92	; 0x5c
 800812a:	d110      	bne.n	800814e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800812c:	e002      	b.n	8008134 <create_name+0x48>
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	3301      	adds	r3, #1
 8008132:	61bb      	str	r3, [r7, #24]
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	4413      	add	r3, r2
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	2b2f      	cmp	r3, #47	; 0x2f
 800813e:	d0f6      	beq.n	800812e <create_name+0x42>
 8008140:	693a      	ldr	r2, [r7, #16]
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	4413      	add	r3, r2
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	2b5c      	cmp	r3, #92	; 0x5c
 800814a:	d0f0      	beq.n	800812e <create_name+0x42>
			break;
 800814c:	e02a      	b.n	80081a4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	2bfe      	cmp	r3, #254	; 0xfe
 8008152:	d901      	bls.n	8008158 <create_name+0x6c>
 8008154:	2306      	movs	r3, #6
 8008156:	e17d      	b.n	8008454 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008158:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800815a:	b2db      	uxtb	r3, r3
 800815c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800815e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008160:	2101      	movs	r1, #1
 8008162:	4618      	mov	r0, r3
 8008164:	f001 feda 	bl	8009f1c <ff_convert>
 8008168:	4603      	mov	r3, r0
 800816a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800816c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800816e:	2b00      	cmp	r3, #0
 8008170:	d101      	bne.n	8008176 <create_name+0x8a>
 8008172:	2306      	movs	r3, #6
 8008174:	e16e      	b.n	8008454 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008176:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008178:	2b7f      	cmp	r3, #127	; 0x7f
 800817a:	d809      	bhi.n	8008190 <create_name+0xa4>
 800817c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800817e:	4619      	mov	r1, r3
 8008180:	488d      	ldr	r0, [pc, #564]	; (80083b8 <create_name+0x2cc>)
 8008182:	f7fe fa0c 	bl	800659e <chk_chr>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d001      	beq.n	8008190 <create_name+0xa4>
 800818c:	2306      	movs	r3, #6
 800818e:	e161      	b.n	8008454 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	1c5a      	adds	r2, r3, #1
 8008194:	617a      	str	r2, [r7, #20]
 8008196:	005b      	lsls	r3, r3, #1
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	4413      	add	r3, r2
 800819c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800819e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80081a0:	e7b4      	b.n	800810c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80081a2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80081a4:	693a      	ldr	r2, [r7, #16]
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	441a      	add	r2, r3
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80081ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081b0:	2b1f      	cmp	r3, #31
 80081b2:	d801      	bhi.n	80081b8 <create_name+0xcc>
 80081b4:	2304      	movs	r3, #4
 80081b6:	e000      	b.n	80081ba <create_name+0xce>
 80081b8:	2300      	movs	r3, #0
 80081ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80081be:	e011      	b.n	80081e4 <create_name+0xf8>
		w = lfn[di - 1];
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80081c6:	3b01      	subs	r3, #1
 80081c8:	005b      	lsls	r3, r3, #1
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	4413      	add	r3, r2
 80081ce:	881b      	ldrh	r3, [r3, #0]
 80081d0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80081d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081d4:	2b20      	cmp	r3, #32
 80081d6:	d002      	beq.n	80081de <create_name+0xf2>
 80081d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081da:	2b2e      	cmp	r3, #46	; 0x2e
 80081dc:	d106      	bne.n	80081ec <create_name+0x100>
		di--;
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	3b01      	subs	r3, #1
 80081e2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1ea      	bne.n	80081c0 <create_name+0xd4>
 80081ea:	e000      	b.n	80081ee <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80081ec:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	005b      	lsls	r3, r3, #1
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	4413      	add	r3, r2
 80081f6:	2200      	movs	r2, #0
 80081f8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d101      	bne.n	8008204 <create_name+0x118>
 8008200:	2306      	movs	r3, #6
 8008202:	e127      	b.n	8008454 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	3324      	adds	r3, #36	; 0x24
 8008208:	220b      	movs	r2, #11
 800820a:	2120      	movs	r1, #32
 800820c:	4618      	mov	r0, r3
 800820e:	f7fe f984 	bl	800651a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008212:	2300      	movs	r3, #0
 8008214:	61bb      	str	r3, [r7, #24]
 8008216:	e002      	b.n	800821e <create_name+0x132>
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	3301      	adds	r3, #1
 800821c:	61bb      	str	r3, [r7, #24]
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	005b      	lsls	r3, r3, #1
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	4413      	add	r3, r2
 8008226:	881b      	ldrh	r3, [r3, #0]
 8008228:	2b20      	cmp	r3, #32
 800822a:	d0f5      	beq.n	8008218 <create_name+0x12c>
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	005b      	lsls	r3, r3, #1
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	4413      	add	r3, r2
 8008234:	881b      	ldrh	r3, [r3, #0]
 8008236:	2b2e      	cmp	r3, #46	; 0x2e
 8008238:	d0ee      	beq.n	8008218 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d009      	beq.n	8008254 <create_name+0x168>
 8008240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008244:	f043 0303 	orr.w	r3, r3, #3
 8008248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800824c:	e002      	b.n	8008254 <create_name+0x168>
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	3b01      	subs	r3, #1
 8008252:	617b      	str	r3, [r7, #20]
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d009      	beq.n	800826e <create_name+0x182>
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008260:	3b01      	subs	r3, #1
 8008262:	005b      	lsls	r3, r3, #1
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	4413      	add	r3, r2
 8008268:	881b      	ldrh	r3, [r3, #0]
 800826a:	2b2e      	cmp	r3, #46	; 0x2e
 800826c:	d1ef      	bne.n	800824e <create_name+0x162>

	i = b = 0; ni = 8;
 800826e:	2300      	movs	r3, #0
 8008270:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008274:	2300      	movs	r3, #0
 8008276:	623b      	str	r3, [r7, #32]
 8008278:	2308      	movs	r3, #8
 800827a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	1c5a      	adds	r2, r3, #1
 8008280:	61ba      	str	r2, [r7, #24]
 8008282:	005b      	lsls	r3, r3, #1
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	4413      	add	r3, r2
 8008288:	881b      	ldrh	r3, [r3, #0]
 800828a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800828c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800828e:	2b00      	cmp	r3, #0
 8008290:	f000 8090 	beq.w	80083b4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008294:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008296:	2b20      	cmp	r3, #32
 8008298:	d006      	beq.n	80082a8 <create_name+0x1bc>
 800829a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800829c:	2b2e      	cmp	r3, #46	; 0x2e
 800829e:	d10a      	bne.n	80082b6 <create_name+0x1ca>
 80082a0:	69ba      	ldr	r2, [r7, #24]
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d006      	beq.n	80082b6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80082a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082ac:	f043 0303 	orr.w	r3, r3, #3
 80082b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80082b4:	e07d      	b.n	80083b2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80082b6:	6a3a      	ldr	r2, [r7, #32]
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d203      	bcs.n	80082c6 <create_name+0x1da>
 80082be:	69ba      	ldr	r2, [r7, #24]
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d123      	bne.n	800830e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	2b0b      	cmp	r3, #11
 80082ca:	d106      	bne.n	80082da <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80082cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082d0:	f043 0303 	orr.w	r3, r3, #3
 80082d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80082d8:	e075      	b.n	80083c6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80082da:	69ba      	ldr	r2, [r7, #24]
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d005      	beq.n	80082ee <create_name+0x202>
 80082e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082e6:	f043 0303 	orr.w	r3, r3, #3
 80082ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80082ee:	69ba      	ldr	r2, [r7, #24]
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d866      	bhi.n	80083c4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	61bb      	str	r3, [r7, #24]
 80082fa:	2308      	movs	r3, #8
 80082fc:	623b      	str	r3, [r7, #32]
 80082fe:	230b      	movs	r3, #11
 8008300:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008302:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800830c:	e051      	b.n	80083b2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800830e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008310:	2b7f      	cmp	r3, #127	; 0x7f
 8008312:	d914      	bls.n	800833e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008314:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008316:	2100      	movs	r1, #0
 8008318:	4618      	mov	r0, r3
 800831a:	f001 fdff 	bl	8009f1c <ff_convert>
 800831e:	4603      	mov	r3, r0
 8008320:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008322:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008324:	2b00      	cmp	r3, #0
 8008326:	d004      	beq.n	8008332 <create_name+0x246>
 8008328:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800832a:	3b80      	subs	r3, #128	; 0x80
 800832c:	4a23      	ldr	r2, [pc, #140]	; (80083bc <create_name+0x2d0>)
 800832e:	5cd3      	ldrb	r3, [r2, r3]
 8008330:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008332:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008336:	f043 0302 	orr.w	r3, r3, #2
 800833a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800833e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008340:	2b00      	cmp	r3, #0
 8008342:	d007      	beq.n	8008354 <create_name+0x268>
 8008344:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008346:	4619      	mov	r1, r3
 8008348:	481d      	ldr	r0, [pc, #116]	; (80083c0 <create_name+0x2d4>)
 800834a:	f7fe f928 	bl	800659e <chk_chr>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d008      	beq.n	8008366 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008354:	235f      	movs	r3, #95	; 0x5f
 8008356:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800835c:	f043 0303 	orr.w	r3, r3, #3
 8008360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008364:	e01b      	b.n	800839e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008366:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008368:	2b40      	cmp	r3, #64	; 0x40
 800836a:	d909      	bls.n	8008380 <create_name+0x294>
 800836c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800836e:	2b5a      	cmp	r3, #90	; 0x5a
 8008370:	d806      	bhi.n	8008380 <create_name+0x294>
					b |= 2;
 8008372:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008376:	f043 0302 	orr.w	r3, r3, #2
 800837a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800837e:	e00e      	b.n	800839e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008380:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008382:	2b60      	cmp	r3, #96	; 0x60
 8008384:	d90b      	bls.n	800839e <create_name+0x2b2>
 8008386:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008388:	2b7a      	cmp	r3, #122	; 0x7a
 800838a:	d808      	bhi.n	800839e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800838c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008390:	f043 0301 	orr.w	r3, r3, #1
 8008394:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008398:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800839a:	3b20      	subs	r3, #32
 800839c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800839e:	6a3b      	ldr	r3, [r7, #32]
 80083a0:	1c5a      	adds	r2, r3, #1
 80083a2:	623a      	str	r2, [r7, #32]
 80083a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80083a6:	b2d1      	uxtb	r1, r2
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	4413      	add	r3, r2
 80083ac:	460a      	mov	r2, r1
 80083ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80083b2:	e763      	b.n	800827c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80083b4:	bf00      	nop
 80083b6:	e006      	b.n	80083c6 <create_name+0x2da>
 80083b8:	0800fa24 	.word	0x0800fa24
 80083bc:	0800faec 	.word	0x0800faec
 80083c0:	0800fa30 	.word	0x0800fa30
			if (si > di) break;			/* No extension */
 80083c4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80083cc:	2be5      	cmp	r3, #229	; 0xe5
 80083ce:	d103      	bne.n	80083d8 <create_name+0x2ec>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2205      	movs	r2, #5
 80083d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	2b08      	cmp	r3, #8
 80083dc:	d104      	bne.n	80083e8 <create_name+0x2fc>
 80083de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80083e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80083ec:	f003 030c 	and.w	r3, r3, #12
 80083f0:	2b0c      	cmp	r3, #12
 80083f2:	d005      	beq.n	8008400 <create_name+0x314>
 80083f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80083f8:	f003 0303 	and.w	r3, r3, #3
 80083fc:	2b03      	cmp	r3, #3
 80083fe:	d105      	bne.n	800840c <create_name+0x320>
 8008400:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008404:	f043 0302 	orr.w	r3, r3, #2
 8008408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800840c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008410:	f003 0302 	and.w	r3, r3, #2
 8008414:	2b00      	cmp	r3, #0
 8008416:	d117      	bne.n	8008448 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008418:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800841c:	f003 0303 	and.w	r3, r3, #3
 8008420:	2b01      	cmp	r3, #1
 8008422:	d105      	bne.n	8008430 <create_name+0x344>
 8008424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008428:	f043 0310 	orr.w	r3, r3, #16
 800842c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008430:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008434:	f003 030c 	and.w	r3, r3, #12
 8008438:	2b04      	cmp	r3, #4
 800843a:	d105      	bne.n	8008448 <create_name+0x35c>
 800843c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008440:	f043 0308 	orr.w	r3, r3, #8
 8008444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800844e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8008452:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008454:	4618      	mov	r0, r3
 8008456:	3728      	adds	r7, #40	; 0x28
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b086      	sub	sp, #24
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008470:	e002      	b.n	8008478 <follow_path+0x1c>
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	3301      	adds	r3, #1
 8008476:	603b      	str	r3, [r7, #0]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	2b2f      	cmp	r3, #47	; 0x2f
 800847e:	d0f8      	beq.n	8008472 <follow_path+0x16>
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	2b5c      	cmp	r3, #92	; 0x5c
 8008486:	d0f4      	beq.n	8008472 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	2200      	movs	r2, #0
 800848c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	2b1f      	cmp	r3, #31
 8008494:	d80a      	bhi.n	80084ac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2280      	movs	r2, #128	; 0x80
 800849a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800849e:	2100      	movs	r1, #0
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f7fe fe29 	bl	80070f8 <dir_sdi>
 80084a6:	4603      	mov	r3, r0
 80084a8:	75fb      	strb	r3, [r7, #23]
 80084aa:	e048      	b.n	800853e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80084ac:	463b      	mov	r3, r7
 80084ae:	4619      	mov	r1, r3
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f7ff fe1b 	bl	80080ec <create_name>
 80084b6:	4603      	mov	r3, r0
 80084b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80084ba:	7dfb      	ldrb	r3, [r7, #23]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d139      	bne.n	8008534 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f7ff fa91 	bl	80079e8 <dir_find>
 80084c6:	4603      	mov	r3, r0
 80084c8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80084d0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80084d2:	7dfb      	ldrb	r3, [r7, #23]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00a      	beq.n	80084ee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80084d8:	7dfb      	ldrb	r3, [r7, #23]
 80084da:	2b04      	cmp	r3, #4
 80084dc:	d12c      	bne.n	8008538 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80084de:	7afb      	ldrb	r3, [r7, #11]
 80084e0:	f003 0304 	and.w	r3, r3, #4
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d127      	bne.n	8008538 <follow_path+0xdc>
 80084e8:	2305      	movs	r3, #5
 80084ea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80084ec:	e024      	b.n	8008538 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80084ee:	7afb      	ldrb	r3, [r7, #11]
 80084f0:	f003 0304 	and.w	r3, r3, #4
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d121      	bne.n	800853c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	799b      	ldrb	r3, [r3, #6]
 80084fc:	f003 0310 	and.w	r3, r3, #16
 8008500:	2b00      	cmp	r3, #0
 8008502:	d102      	bne.n	800850a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008504:	2305      	movs	r3, #5
 8008506:	75fb      	strb	r3, [r7, #23]
 8008508:	e019      	b.n	800853e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	695b      	ldr	r3, [r3, #20]
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	8992      	ldrh	r2, [r2, #12]
 8008518:	fbb3 f0f2 	udiv	r0, r3, r2
 800851c:	fb00 f202 	mul.w	r2, r0, r2
 8008520:	1a9b      	subs	r3, r3, r2
 8008522:	440b      	add	r3, r1
 8008524:	4619      	mov	r1, r3
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f7fe ff8c 	bl	8007444 <ld_clust>
 800852c:	4602      	mov	r2, r0
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008532:	e7bb      	b.n	80084ac <follow_path+0x50>
			if (res != FR_OK) break;
 8008534:	bf00      	nop
 8008536:	e002      	b.n	800853e <follow_path+0xe2>
				break;
 8008538:	bf00      	nop
 800853a:	e000      	b.n	800853e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800853c:	bf00      	nop
			}
		}
	}

	return res;
 800853e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3718      	adds	r7, #24
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008548:	b480      	push	{r7}
 800854a:	b087      	sub	sp, #28
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008550:	f04f 33ff 	mov.w	r3, #4294967295
 8008554:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d031      	beq.n	80085c2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	617b      	str	r3, [r7, #20]
 8008564:	e002      	b.n	800856c <get_ldnumber+0x24>
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	3301      	adds	r3, #1
 800856a:	617b      	str	r3, [r7, #20]
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	2b1f      	cmp	r3, #31
 8008572:	d903      	bls.n	800857c <get_ldnumber+0x34>
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	2b3a      	cmp	r3, #58	; 0x3a
 800857a:	d1f4      	bne.n	8008566 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	2b3a      	cmp	r3, #58	; 0x3a
 8008582:	d11c      	bne.n	80085be <get_ldnumber+0x76>
			tp = *path;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	1c5a      	adds	r2, r3, #1
 800858e:	60fa      	str	r2, [r7, #12]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	3b30      	subs	r3, #48	; 0x30
 8008594:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	2b09      	cmp	r3, #9
 800859a:	d80e      	bhi.n	80085ba <get_ldnumber+0x72>
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d10a      	bne.n	80085ba <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d107      	bne.n	80085ba <get_ldnumber+0x72>
					vol = (int)i;
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	3301      	adds	r3, #1
 80085b2:	617b      	str	r3, [r7, #20]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	697a      	ldr	r2, [r7, #20]
 80085b8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	e002      	b.n	80085c4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80085be:	2300      	movs	r3, #0
 80085c0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80085c2:	693b      	ldr	r3, [r7, #16]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	371c      	adds	r7, #28
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	70da      	strb	r2, [r3, #3]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f04f 32ff 	mov.w	r2, #4294967295
 80085e6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f7fe f9a2 	bl	8006934 <move_window>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d001      	beq.n	80085fa <check_fs+0x2a>
 80085f6:	2304      	movs	r3, #4
 80085f8:	e038      	b.n	800866c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	3338      	adds	r3, #56	; 0x38
 80085fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008602:	4618      	mov	r0, r3
 8008604:	f7fd fee6 	bl	80063d4 <ld_word>
 8008608:	4603      	mov	r3, r0
 800860a:	461a      	mov	r2, r3
 800860c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008610:	429a      	cmp	r2, r3
 8008612:	d001      	beq.n	8008618 <check_fs+0x48>
 8008614:	2303      	movs	r3, #3
 8008616:	e029      	b.n	800866c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800861e:	2be9      	cmp	r3, #233	; 0xe9
 8008620:	d009      	beq.n	8008636 <check_fs+0x66>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008628:	2beb      	cmp	r3, #235	; 0xeb
 800862a:	d11e      	bne.n	800866a <check_fs+0x9a>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008632:	2b90      	cmp	r3, #144	; 0x90
 8008634:	d119      	bne.n	800866a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	3338      	adds	r3, #56	; 0x38
 800863a:	3336      	adds	r3, #54	; 0x36
 800863c:	4618      	mov	r0, r3
 800863e:	f7fd fee1 	bl	8006404 <ld_dword>
 8008642:	4603      	mov	r3, r0
 8008644:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008648:	4a0a      	ldr	r2, [pc, #40]	; (8008674 <check_fs+0xa4>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d101      	bne.n	8008652 <check_fs+0x82>
 800864e:	2300      	movs	r3, #0
 8008650:	e00c      	b.n	800866c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	3338      	adds	r3, #56	; 0x38
 8008656:	3352      	adds	r3, #82	; 0x52
 8008658:	4618      	mov	r0, r3
 800865a:	f7fd fed3 	bl	8006404 <ld_dword>
 800865e:	4603      	mov	r3, r0
 8008660:	4a05      	ldr	r2, [pc, #20]	; (8008678 <check_fs+0xa8>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d101      	bne.n	800866a <check_fs+0x9a>
 8008666:	2300      	movs	r3, #0
 8008668:	e000      	b.n	800866c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800866a:	2302      	movs	r3, #2
}
 800866c:	4618      	mov	r0, r3
 800866e:	3708      	adds	r7, #8
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	00544146 	.word	0x00544146
 8008678:	33544146 	.word	0x33544146

0800867c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b096      	sub	sp, #88	; 0x58
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	4613      	mov	r3, r2
 8008688:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	2200      	movs	r2, #0
 800868e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	f7ff ff59 	bl	8008548 <get_ldnumber>
 8008696:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800869a:	2b00      	cmp	r3, #0
 800869c:	da01      	bge.n	80086a2 <find_volume+0x26>
 800869e:	230b      	movs	r3, #11
 80086a0:	e265      	b.n	8008b6e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80086a2:	4a9f      	ldr	r2, [pc, #636]	; (8008920 <find_volume+0x2a4>)
 80086a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086aa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80086ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <find_volume+0x3a>
 80086b2:	230c      	movs	r3, #12
 80086b4:	e25b      	b.n	8008b6e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086ba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80086bc:	79fb      	ldrb	r3, [r7, #7]
 80086be:	f023 0301 	bic.w	r3, r3, #1
 80086c2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80086c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d01a      	beq.n	8008702 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80086cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ce:	785b      	ldrb	r3, [r3, #1]
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7fd fde1 	bl	8006298 <disk_status>
 80086d6:	4603      	mov	r3, r0
 80086d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80086dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80086e0:	f003 0301 	and.w	r3, r3, #1
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d10c      	bne.n	8008702 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80086e8:	79fb      	ldrb	r3, [r7, #7]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d007      	beq.n	80086fe <find_volume+0x82>
 80086ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80086f2:	f003 0304 	and.w	r3, r3, #4
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d001      	beq.n	80086fe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80086fa:	230a      	movs	r3, #10
 80086fc:	e237      	b.n	8008b6e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80086fe:	2300      	movs	r3, #0
 8008700:	e235      	b.n	8008b6e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008704:	2200      	movs	r2, #0
 8008706:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800870a:	b2da      	uxtb	r2, r3
 800870c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008712:	785b      	ldrb	r3, [r3, #1]
 8008714:	4618      	mov	r0, r3
 8008716:	f7fd fdd9 	bl	80062cc <disk_initialize>
 800871a:	4603      	mov	r3, r0
 800871c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008720:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008724:	f003 0301 	and.w	r3, r3, #1
 8008728:	2b00      	cmp	r3, #0
 800872a:	d001      	beq.n	8008730 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800872c:	2303      	movs	r3, #3
 800872e:	e21e      	b.n	8008b6e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008730:	79fb      	ldrb	r3, [r7, #7]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d007      	beq.n	8008746 <find_volume+0xca>
 8008736:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800873a:	f003 0304 	and.w	r3, r3, #4
 800873e:	2b00      	cmp	r3, #0
 8008740:	d001      	beq.n	8008746 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008742:	230a      	movs	r3, #10
 8008744:	e213      	b.n	8008b6e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008748:	7858      	ldrb	r0, [r3, #1]
 800874a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874c:	330c      	adds	r3, #12
 800874e:	461a      	mov	r2, r3
 8008750:	2102      	movs	r1, #2
 8008752:	f7fd fe21 	bl	8006398 <disk_ioctl>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d001      	beq.n	8008760 <find_volume+0xe4>
 800875c:	2301      	movs	r3, #1
 800875e:	e206      	b.n	8008b6e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008762:	899b      	ldrh	r3, [r3, #12]
 8008764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008768:	d80d      	bhi.n	8008786 <find_volume+0x10a>
 800876a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876c:	899b      	ldrh	r3, [r3, #12]
 800876e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008772:	d308      	bcc.n	8008786 <find_volume+0x10a>
 8008774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008776:	899b      	ldrh	r3, [r3, #12]
 8008778:	461a      	mov	r2, r3
 800877a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877c:	899b      	ldrh	r3, [r3, #12]
 800877e:	3b01      	subs	r3, #1
 8008780:	4013      	ands	r3, r2
 8008782:	2b00      	cmp	r3, #0
 8008784:	d001      	beq.n	800878a <find_volume+0x10e>
 8008786:	2301      	movs	r3, #1
 8008788:	e1f1      	b.n	8008b6e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800878a:	2300      	movs	r3, #0
 800878c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800878e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008790:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008792:	f7ff ff1d 	bl	80085d0 <check_fs>
 8008796:	4603      	mov	r3, r0
 8008798:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800879c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d149      	bne.n	8008838 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80087a4:	2300      	movs	r3, #0
 80087a6:	643b      	str	r3, [r7, #64]	; 0x40
 80087a8:	e01e      	b.n	80087e8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80087aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ac:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80087b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087b2:	011b      	lsls	r3, r3, #4
 80087b4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80087b8:	4413      	add	r3, r2
 80087ba:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80087bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087be:	3304      	adds	r3, #4
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d006      	beq.n	80087d4 <find_volume+0x158>
 80087c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c8:	3308      	adds	r3, #8
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7fd fe1a 	bl	8006404 <ld_dword>
 80087d0:	4602      	mov	r2, r0
 80087d2:	e000      	b.n	80087d6 <find_volume+0x15a>
 80087d4:	2200      	movs	r2, #0
 80087d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	3358      	adds	r3, #88	; 0x58
 80087dc:	443b      	add	r3, r7
 80087de:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80087e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087e4:	3301      	adds	r3, #1
 80087e6:	643b      	str	r3, [r7, #64]	; 0x40
 80087e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087ea:	2b03      	cmp	r3, #3
 80087ec:	d9dd      	bls.n	80087aa <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80087ee:	2300      	movs	r3, #0
 80087f0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80087f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d002      	beq.n	80087fe <find_volume+0x182>
 80087f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087fa:	3b01      	subs	r3, #1
 80087fc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80087fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	3358      	adds	r3, #88	; 0x58
 8008804:	443b      	add	r3, r7
 8008806:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800880a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800880c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800880e:	2b00      	cmp	r3, #0
 8008810:	d005      	beq.n	800881e <find_volume+0x1a2>
 8008812:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008814:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008816:	f7ff fedb 	bl	80085d0 <check_fs>
 800881a:	4603      	mov	r3, r0
 800881c:	e000      	b.n	8008820 <find_volume+0x1a4>
 800881e:	2303      	movs	r3, #3
 8008820:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008824:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008828:	2b01      	cmp	r3, #1
 800882a:	d905      	bls.n	8008838 <find_volume+0x1bc>
 800882c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800882e:	3301      	adds	r3, #1
 8008830:	643b      	str	r3, [r7, #64]	; 0x40
 8008832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008834:	2b03      	cmp	r3, #3
 8008836:	d9e2      	bls.n	80087fe <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008838:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800883c:	2b04      	cmp	r3, #4
 800883e:	d101      	bne.n	8008844 <find_volume+0x1c8>
 8008840:	2301      	movs	r3, #1
 8008842:	e194      	b.n	8008b6e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008844:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008848:	2b01      	cmp	r3, #1
 800884a:	d901      	bls.n	8008850 <find_volume+0x1d4>
 800884c:	230d      	movs	r3, #13
 800884e:	e18e      	b.n	8008b6e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008852:	3338      	adds	r3, #56	; 0x38
 8008854:	330b      	adds	r3, #11
 8008856:	4618      	mov	r0, r3
 8008858:	f7fd fdbc 	bl	80063d4 <ld_word>
 800885c:	4603      	mov	r3, r0
 800885e:	461a      	mov	r2, r3
 8008860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008862:	899b      	ldrh	r3, [r3, #12]
 8008864:	429a      	cmp	r2, r3
 8008866:	d001      	beq.n	800886c <find_volume+0x1f0>
 8008868:	230d      	movs	r3, #13
 800886a:	e180      	b.n	8008b6e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800886c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886e:	3338      	adds	r3, #56	; 0x38
 8008870:	3316      	adds	r3, #22
 8008872:	4618      	mov	r0, r3
 8008874:	f7fd fdae 	bl	80063d4 <ld_word>
 8008878:	4603      	mov	r3, r0
 800887a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800887c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800887e:	2b00      	cmp	r3, #0
 8008880:	d106      	bne.n	8008890 <find_volume+0x214>
 8008882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008884:	3338      	adds	r3, #56	; 0x38
 8008886:	3324      	adds	r3, #36	; 0x24
 8008888:	4618      	mov	r0, r3
 800888a:	f7fd fdbb 	bl	8006404 <ld_dword>
 800888e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008892:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008894:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008898:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800889c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80088a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a2:	789b      	ldrb	r3, [r3, #2]
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d005      	beq.n	80088b4 <find_volume+0x238>
 80088a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088aa:	789b      	ldrb	r3, [r3, #2]
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	d001      	beq.n	80088b4 <find_volume+0x238>
 80088b0:	230d      	movs	r3, #13
 80088b2:	e15c      	b.n	8008b6e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80088b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b6:	789b      	ldrb	r3, [r3, #2]
 80088b8:	461a      	mov	r2, r3
 80088ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088bc:	fb02 f303 	mul.w	r3, r2, r3
 80088c0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80088c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088cc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80088ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d0:	895b      	ldrh	r3, [r3, #10]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d008      	beq.n	80088e8 <find_volume+0x26c>
 80088d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d8:	895b      	ldrh	r3, [r3, #10]
 80088da:	461a      	mov	r2, r3
 80088dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088de:	895b      	ldrh	r3, [r3, #10]
 80088e0:	3b01      	subs	r3, #1
 80088e2:	4013      	ands	r3, r2
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d001      	beq.n	80088ec <find_volume+0x270>
 80088e8:	230d      	movs	r3, #13
 80088ea:	e140      	b.n	8008b6e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80088ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ee:	3338      	adds	r3, #56	; 0x38
 80088f0:	3311      	adds	r3, #17
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7fd fd6e 	bl	80063d4 <ld_word>
 80088f8:	4603      	mov	r3, r0
 80088fa:	461a      	mov	r2, r3
 80088fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008902:	891b      	ldrh	r3, [r3, #8]
 8008904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008906:	8992      	ldrh	r2, [r2, #12]
 8008908:	0952      	lsrs	r2, r2, #5
 800890a:	b292      	uxth	r2, r2
 800890c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008910:	fb01 f202 	mul.w	r2, r1, r2
 8008914:	1a9b      	subs	r3, r3, r2
 8008916:	b29b      	uxth	r3, r3
 8008918:	2b00      	cmp	r3, #0
 800891a:	d003      	beq.n	8008924 <find_volume+0x2a8>
 800891c:	230d      	movs	r3, #13
 800891e:	e126      	b.n	8008b6e <find_volume+0x4f2>
 8008920:	20003520 	.word	0x20003520

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008926:	3338      	adds	r3, #56	; 0x38
 8008928:	3313      	adds	r3, #19
 800892a:	4618      	mov	r0, r3
 800892c:	f7fd fd52 	bl	80063d4 <ld_word>
 8008930:	4603      	mov	r3, r0
 8008932:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008936:	2b00      	cmp	r3, #0
 8008938:	d106      	bne.n	8008948 <find_volume+0x2cc>
 800893a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893c:	3338      	adds	r3, #56	; 0x38
 800893e:	3320      	adds	r3, #32
 8008940:	4618      	mov	r0, r3
 8008942:	f7fd fd5f 	bl	8006404 <ld_dword>
 8008946:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894a:	3338      	adds	r3, #56	; 0x38
 800894c:	330e      	adds	r3, #14
 800894e:	4618      	mov	r0, r3
 8008950:	f7fd fd40 	bl	80063d4 <ld_word>
 8008954:	4603      	mov	r3, r0
 8008956:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008958:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800895a:	2b00      	cmp	r3, #0
 800895c:	d101      	bne.n	8008962 <find_volume+0x2e6>
 800895e:	230d      	movs	r3, #13
 8008960:	e105      	b.n	8008b6e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008962:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008966:	4413      	add	r3, r2
 8008968:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800896a:	8911      	ldrh	r1, [r2, #8]
 800896c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800896e:	8992      	ldrh	r2, [r2, #12]
 8008970:	0952      	lsrs	r2, r2, #5
 8008972:	b292      	uxth	r2, r2
 8008974:	fbb1 f2f2 	udiv	r2, r1, r2
 8008978:	b292      	uxth	r2, r2
 800897a:	4413      	add	r3, r2
 800897c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800897e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008982:	429a      	cmp	r2, r3
 8008984:	d201      	bcs.n	800898a <find_volume+0x30e>
 8008986:	230d      	movs	r3, #13
 8008988:	e0f1      	b.n	8008b6e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800898a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800898c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898e:	1ad3      	subs	r3, r2, r3
 8008990:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008992:	8952      	ldrh	r2, [r2, #10]
 8008994:	fbb3 f3f2 	udiv	r3, r3, r2
 8008998:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800899a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899c:	2b00      	cmp	r3, #0
 800899e:	d101      	bne.n	80089a4 <find_volume+0x328>
 80089a0:	230d      	movs	r3, #13
 80089a2:	e0e4      	b.n	8008b6e <find_volume+0x4f2>
		fmt = FS_FAT32;
 80089a4:	2303      	movs	r3, #3
 80089a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d802      	bhi.n	80089ba <find_volume+0x33e>
 80089b4:	2302      	movs	r3, #2
 80089b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80089ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089bc:	f640 72f5 	movw	r2, #4085	; 0xff5
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d802      	bhi.n	80089ca <find_volume+0x34e>
 80089c4:	2301      	movs	r3, #1
 80089c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80089ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089cc:	1c9a      	adds	r2, r3, #2
 80089ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80089d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80089d6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80089d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80089da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089dc:	441a      	add	r2, r3
 80089de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80089e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80089e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e6:	441a      	add	r2, r3
 80089e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ea:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80089ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80089f0:	2b03      	cmp	r3, #3
 80089f2:	d11e      	bne.n	8008a32 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80089f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f6:	3338      	adds	r3, #56	; 0x38
 80089f8:	332a      	adds	r3, #42	; 0x2a
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7fd fcea 	bl	80063d4 <ld_word>
 8008a00:	4603      	mov	r3, r0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d001      	beq.n	8008a0a <find_volume+0x38e>
 8008a06:	230d      	movs	r3, #13
 8008a08:	e0b1      	b.n	8008b6e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0c:	891b      	ldrh	r3, [r3, #8]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d001      	beq.n	8008a16 <find_volume+0x39a>
 8008a12:	230d      	movs	r3, #13
 8008a14:	e0ab      	b.n	8008b6e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a18:	3338      	adds	r3, #56	; 0x38
 8008a1a:	332c      	adds	r3, #44	; 0x2c
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7fd fcf1 	bl	8006404 <ld_dword>
 8008a22:	4602      	mov	r2, r0
 8008a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a26:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2a:	69db      	ldr	r3, [r3, #28]
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8008a30:	e01f      	b.n	8008a72 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a34:	891b      	ldrh	r3, [r3, #8]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d101      	bne.n	8008a3e <find_volume+0x3c2>
 8008a3a:	230d      	movs	r3, #13
 8008a3c:	e097      	b.n	8008b6e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a44:	441a      	add	r2, r3
 8008a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a48:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008a4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d103      	bne.n	8008a5a <find_volume+0x3de>
 8008a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a54:	69db      	ldr	r3, [r3, #28]
 8008a56:	005b      	lsls	r3, r3, #1
 8008a58:	e00a      	b.n	8008a70 <find_volume+0x3f4>
 8008a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5c:	69da      	ldr	r2, [r3, #28]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	005b      	lsls	r3, r3, #1
 8008a62:	4413      	add	r3, r2
 8008a64:	085a      	lsrs	r2, r3, #1
 8008a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a68:	69db      	ldr	r3, [r3, #28]
 8008a6a:	f003 0301 	and.w	r3, r3, #1
 8008a6e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008a70:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a74:	6a1a      	ldr	r2, [r3, #32]
 8008a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a78:	899b      	ldrh	r3, [r3, #12]
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a7e:	440b      	add	r3, r1
 8008a80:	3b01      	subs	r3, #1
 8008a82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008a84:	8989      	ldrh	r1, [r1, #12]
 8008a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d201      	bcs.n	8008a92 <find_volume+0x416>
 8008a8e:	230d      	movs	r3, #13
 8008a90:	e06d      	b.n	8008b6e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a94:	f04f 32ff 	mov.w	r2, #4294967295
 8008a98:	619a      	str	r2, [r3, #24]
 8008a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9c:	699a      	ldr	r2, [r3, #24]
 8008a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8008aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa4:	2280      	movs	r2, #128	; 0x80
 8008aa6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008aa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008aac:	2b03      	cmp	r3, #3
 8008aae:	d149      	bne.n	8008b44 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab2:	3338      	adds	r3, #56	; 0x38
 8008ab4:	3330      	adds	r3, #48	; 0x30
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fd fc8c 	bl	80063d4 <ld_word>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d140      	bne.n	8008b44 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008aca:	f7fd ff33 	bl	8006934 <move_window>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d137      	bne.n	8008b44 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8008ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008adc:	3338      	adds	r3, #56	; 0x38
 8008ade:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7fd fc76 	bl	80063d4 <ld_word>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	461a      	mov	r2, r3
 8008aec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d127      	bne.n	8008b44 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af6:	3338      	adds	r3, #56	; 0x38
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7fd fc83 	bl	8006404 <ld_dword>
 8008afe:	4603      	mov	r3, r0
 8008b00:	4a1d      	ldr	r2, [pc, #116]	; (8008b78 <find_volume+0x4fc>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d11e      	bne.n	8008b44 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b08:	3338      	adds	r3, #56	; 0x38
 8008b0a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fd fc78 	bl	8006404 <ld_dword>
 8008b14:	4603      	mov	r3, r0
 8008b16:	4a19      	ldr	r2, [pc, #100]	; (8008b7c <find_volume+0x500>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d113      	bne.n	8008b44 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1e:	3338      	adds	r3, #56	; 0x38
 8008b20:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7fd fc6d 	bl	8006404 <ld_dword>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b32:	3338      	adds	r3, #56	; 0x38
 8008b34:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7fd fc63 	bl	8006404 <ld_dword>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b42:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b46:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008b4a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008b4c:	4b0c      	ldr	r3, [pc, #48]	; (8008b80 <find_volume+0x504>)
 8008b4e:	881b      	ldrh	r3, [r3, #0]
 8008b50:	3301      	adds	r3, #1
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	4b0a      	ldr	r3, [pc, #40]	; (8008b80 <find_volume+0x504>)
 8008b56:	801a      	strh	r2, [r3, #0]
 8008b58:	4b09      	ldr	r3, [pc, #36]	; (8008b80 <find_volume+0x504>)
 8008b5a:	881a      	ldrh	r2, [r3, #0]
 8008b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b62:	4a08      	ldr	r2, [pc, #32]	; (8008b84 <find_volume+0x508>)
 8008b64:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008b66:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b68:	f7fd fe7c 	bl	8006864 <clear_lock>
#endif
	return FR_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3758      	adds	r7, #88	; 0x58
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	41615252 	.word	0x41615252
 8008b7c:	61417272 	.word	0x61417272
 8008b80:	20003524 	.word	0x20003524
 8008b84:	20003548 	.word	0x20003548

08008b88 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008b92:	2309      	movs	r3, #9
 8008b94:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d01c      	beq.n	8008bd6 <validate+0x4e>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d018      	beq.n	8008bd6 <validate+0x4e>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d013      	beq.n	8008bd6 <validate+0x4e>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	889a      	ldrh	r2, [r3, #4]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	88db      	ldrh	r3, [r3, #6]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d10c      	bne.n	8008bd6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	785b      	ldrb	r3, [r3, #1]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7fd fb68 	bl	8006298 <disk_status>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	f003 0301 	and.w	r3, r3, #1
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d101      	bne.n	8008bd6 <validate+0x4e>
			res = FR_OK;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008bd6:	7bfb      	ldrb	r3, [r7, #15]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d102      	bne.n	8008be2 <validate+0x5a>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	e000      	b.n	8008be4 <validate+0x5c>
 8008be2:	2300      	movs	r3, #0
 8008be4:	683a      	ldr	r2, [r7, #0]
 8008be6:	6013      	str	r3, [r2, #0]
	return res;
 8008be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
	...

08008bf4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b088      	sub	sp, #32
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008c06:	f107 0310 	add.w	r3, r7, #16
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7ff fc9c 	bl	8008548 <get_ldnumber>
 8008c10:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	da01      	bge.n	8008c1c <f_mount+0x28>
 8008c18:	230b      	movs	r3, #11
 8008c1a:	e02b      	b.n	8008c74 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008c1c:	4a17      	ldr	r2, [pc, #92]	; (8008c7c <f_mount+0x88>)
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c24:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d005      	beq.n	8008c38 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008c2c:	69b8      	ldr	r0, [r7, #24]
 8008c2e:	f7fd fe19 	bl	8006864 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	2200      	movs	r2, #0
 8008c36:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d002      	beq.n	8008c44 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2200      	movs	r2, #0
 8008c42:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	490d      	ldr	r1, [pc, #52]	; (8008c7c <f_mount+0x88>)
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d002      	beq.n	8008c5a <f_mount+0x66>
 8008c54:	79fb      	ldrb	r3, [r7, #7]
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d001      	beq.n	8008c5e <f_mount+0x6a>
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	e00a      	b.n	8008c74 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008c5e:	f107 010c 	add.w	r1, r7, #12
 8008c62:	f107 0308 	add.w	r3, r7, #8
 8008c66:	2200      	movs	r2, #0
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7ff fd07 	bl	800867c <find_volume>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3720      	adds	r7, #32
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	20003520 	.word	0x20003520

08008c80 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b09a      	sub	sp, #104	; 0x68
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d101      	bne.n	8008c98 <f_open+0x18>
 8008c94:	2309      	movs	r3, #9
 8008c96:	e1bb      	b.n	8009010 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008c98:	79fb      	ldrb	r3, [r7, #7]
 8008c9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c9e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008ca0:	79fa      	ldrb	r2, [r7, #7]
 8008ca2:	f107 0110 	add.w	r1, r7, #16
 8008ca6:	f107 0308 	add.w	r3, r7, #8
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7ff fce6 	bl	800867c <find_volume>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8008cb6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	f040 819f 	bne.w	8008ffe <f_open+0x37e>
		dj.obj.fs = fs;
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008cc4:	68ba      	ldr	r2, [r7, #8]
 8008cc6:	f107 0314 	add.w	r3, r7, #20
 8008cca:	4611      	mov	r1, r2
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7ff fbc5 	bl	800845c <follow_path>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008cd8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d11a      	bne.n	8008d16 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008ce0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008ce4:	b25b      	sxtb	r3, r3
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	da03      	bge.n	8008cf2 <f_open+0x72>
				res = FR_INVALID_NAME;
 8008cea:	2306      	movs	r3, #6
 8008cec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008cf0:	e011      	b.n	8008d16 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008cf2:	79fb      	ldrb	r3, [r7, #7]
 8008cf4:	f023 0301 	bic.w	r3, r3, #1
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	bf14      	ite	ne
 8008cfc:	2301      	movne	r3, #1
 8008cfe:	2300      	moveq	r3, #0
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	461a      	mov	r2, r3
 8008d04:	f107 0314 	add.w	r3, r7, #20
 8008d08:	4611      	mov	r1, r2
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7fd fc62 	bl	80065d4 <chk_lock>
 8008d10:	4603      	mov	r3, r0
 8008d12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008d16:	79fb      	ldrb	r3, [r7, #7]
 8008d18:	f003 031c 	and.w	r3, r3, #28
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d07f      	beq.n	8008e20 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008d20:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d017      	beq.n	8008d58 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008d28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008d2c:	2b04      	cmp	r3, #4
 8008d2e:	d10e      	bne.n	8008d4e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008d30:	f7fd fcac 	bl	800668c <enq_lock>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d006      	beq.n	8008d48 <f_open+0xc8>
 8008d3a:	f107 0314 	add.w	r3, r7, #20
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7fe ff12 	bl	8007b68 <dir_register>
 8008d44:	4603      	mov	r3, r0
 8008d46:	e000      	b.n	8008d4a <f_open+0xca>
 8008d48:	2312      	movs	r3, #18
 8008d4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008d4e:	79fb      	ldrb	r3, [r7, #7]
 8008d50:	f043 0308 	orr.w	r3, r3, #8
 8008d54:	71fb      	strb	r3, [r7, #7]
 8008d56:	e010      	b.n	8008d7a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008d58:	7ebb      	ldrb	r3, [r7, #26]
 8008d5a:	f003 0311 	and.w	r3, r3, #17
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d003      	beq.n	8008d6a <f_open+0xea>
					res = FR_DENIED;
 8008d62:	2307      	movs	r3, #7
 8008d64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008d68:	e007      	b.n	8008d7a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008d6a:	79fb      	ldrb	r3, [r7, #7]
 8008d6c:	f003 0304 	and.w	r3, r3, #4
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d002      	beq.n	8008d7a <f_open+0xfa>
 8008d74:	2308      	movs	r3, #8
 8008d76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008d7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d168      	bne.n	8008e54 <f_open+0x1d4>
 8008d82:	79fb      	ldrb	r3, [r7, #7]
 8008d84:	f003 0308 	and.w	r3, r3, #8
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d063      	beq.n	8008e54 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008d8c:	f7fd fa26 	bl	80061dc <get_fattime>
 8008d90:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d94:	330e      	adds	r3, #14
 8008d96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f7fd fb71 	bl	8006480 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008da0:	3316      	adds	r3, #22
 8008da2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7fd fb6b 	bl	8006480 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dac:	330b      	adds	r3, #11
 8008dae:	2220      	movs	r2, #32
 8008db0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008db6:	4611      	mov	r1, r2
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7fe fb43 	bl	8007444 <ld_clust>
 8008dbe:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7fe fb5b 	bl	8007482 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dce:	331c      	adds	r3, #28
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7fd fb54 	bl	8006480 <st_dword>
					fs->wflag = 1;
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d037      	beq.n	8008e54 <f_open+0x1d4>
						dw = fs->winsect;
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008de8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8008dea:	f107 0314 	add.w	r3, r7, #20
 8008dee:	2200      	movs	r2, #0
 8008df0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7fe f84b 	bl	8006e8e <remove_chain>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8008dfe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d126      	bne.n	8008e54 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7fd fd92 	bl	8006934 <move_window>
 8008e10:	4603      	mov	r3, r0
 8008e12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e1a:	3a01      	subs	r2, #1
 8008e1c:	615a      	str	r2, [r3, #20]
 8008e1e:	e019      	b.n	8008e54 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008e20:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d115      	bne.n	8008e54 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008e28:	7ebb      	ldrb	r3, [r7, #26]
 8008e2a:	f003 0310 	and.w	r3, r3, #16
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d003      	beq.n	8008e3a <f_open+0x1ba>
					res = FR_NO_FILE;
 8008e32:	2304      	movs	r3, #4
 8008e34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008e38:	e00c      	b.n	8008e54 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008e3a:	79fb      	ldrb	r3, [r7, #7]
 8008e3c:	f003 0302 	and.w	r3, r3, #2
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d007      	beq.n	8008e54 <f_open+0x1d4>
 8008e44:	7ebb      	ldrb	r3, [r7, #26]
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d002      	beq.n	8008e54 <f_open+0x1d4>
						res = FR_DENIED;
 8008e4e:	2307      	movs	r3, #7
 8008e50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008e54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d128      	bne.n	8008eae <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008e5c:	79fb      	ldrb	r3, [r7, #7]
 8008e5e:	f003 0308 	and.w	r3, r3, #8
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d003      	beq.n	8008e6e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008e66:	79fb      	ldrb	r3, [r7, #7]
 8008e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e6c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008e7c:	79fb      	ldrb	r3, [r7, #7]
 8008e7e:	f023 0301 	bic.w	r3, r3, #1
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	bf14      	ite	ne
 8008e86:	2301      	movne	r3, #1
 8008e88:	2300      	moveq	r3, #0
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	f107 0314 	add.w	r3, r7, #20
 8008e92:	4611      	mov	r1, r2
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7fd fc1b 	bl	80066d0 <inc_lock>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d102      	bne.n	8008eae <f_open+0x22e>
 8008ea8:	2302      	movs	r3, #2
 8008eaa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008eae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f040 80a3 	bne.w	8008ffe <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ebc:	4611      	mov	r1, r2
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7fe fac0 	bl	8007444 <ld_clust>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ecc:	331c      	adds	r3, #28
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fd fa98 	bl	8006404 <ld_dword>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008ee0:	693a      	ldr	r2, [r7, #16]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	88da      	ldrh	r2, [r3, #6]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	79fa      	ldrb	r2, [r7, #7]
 8008ef2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2200      	movs	r2, #0
 8008efe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2200      	movs	r2, #0
 8008f04:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	3330      	adds	r3, #48	; 0x30
 8008f0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008f0e:	2100      	movs	r1, #0
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7fd fb02 	bl	800651a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008f16:	79fb      	ldrb	r3, [r7, #7]
 8008f18:	f003 0320 	and.w	r3, r3, #32
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d06e      	beq.n	8008ffe <f_open+0x37e>
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d06a      	beq.n	8008ffe <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	68da      	ldr	r2, [r3, #12]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	895b      	ldrh	r3, [r3, #10]
 8008f34:	461a      	mov	r2, r3
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	899b      	ldrh	r3, [r3, #12]
 8008f3a:	fb02 f303 	mul.w	r3, r2, r3
 8008f3e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f4c:	e016      	b.n	8008f7c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7fd fdab 	bl	8006aae <get_fat>
 8008f58:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8008f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d802      	bhi.n	8008f66 <f_open+0x2e6>
 8008f60:	2302      	movs	r3, #2
 8008f62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008f66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f6c:	d102      	bne.n	8008f74 <f_open+0x2f4>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008f74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f78:	1ad3      	subs	r3, r2, r3
 8008f7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f7c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d103      	bne.n	8008f8c <f_open+0x30c>
 8008f84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d8e0      	bhi.n	8008f4e <f_open+0x2ce>
				}
				fp->clust = clst;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f90:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008f92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d131      	bne.n	8008ffe <f_open+0x37e>
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	899b      	ldrh	r3, [r3, #12]
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fa2:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fa6:	fb01 f202 	mul.w	r2, r1, r2
 8008faa:	1a9b      	subs	r3, r3, r2
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d026      	beq.n	8008ffe <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7fd fd5b 	bl	8006a70 <clust2sect>
 8008fba:	64f8      	str	r0, [r7, #76]	; 0x4c
 8008fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d103      	bne.n	8008fca <f_open+0x34a>
						res = FR_INT_ERR;
 8008fc2:	2302      	movs	r3, #2
 8008fc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008fc8:	e019      	b.n	8008ffe <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	899b      	ldrh	r3, [r3, #12]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fd8:	441a      	add	r2, r3
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	7858      	ldrb	r0, [r3, #1]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6a1a      	ldr	r2, [r3, #32]
 8008fec:	2301      	movs	r3, #1
 8008fee:	f7fd f993 	bl	8006318 <disk_read>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d002      	beq.n	8008ffe <f_open+0x37e>
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008ffe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009002:	2b00      	cmp	r3, #0
 8009004:	d002      	beq.n	800900c <f_open+0x38c>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2200      	movs	r2, #0
 800900a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800900c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009010:	4618      	mov	r0, r3
 8009012:	3768      	adds	r7, #104	; 0x68
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b08e      	sub	sp, #56	; 0x38
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
 8009024:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	2200      	movs	r2, #0
 800902e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f107 0214 	add.w	r2, r7, #20
 8009036:	4611      	mov	r1, r2
 8009038:	4618      	mov	r0, r3
 800903a:	f7ff fda5 	bl	8008b88 <validate>
 800903e:	4603      	mov	r3, r0
 8009040:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009044:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009048:	2b00      	cmp	r3, #0
 800904a:	d107      	bne.n	800905c <f_read+0x44>
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	7d5b      	ldrb	r3, [r3, #21]
 8009050:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009054:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009058:	2b00      	cmp	r3, #0
 800905a:	d002      	beq.n	8009062 <f_read+0x4a>
 800905c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009060:	e135      	b.n	80092ce <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	7d1b      	ldrb	r3, [r3, #20]
 8009066:	f003 0301 	and.w	r3, r3, #1
 800906a:	2b00      	cmp	r3, #0
 800906c:	d101      	bne.n	8009072 <f_read+0x5a>
 800906e:	2307      	movs	r3, #7
 8009070:	e12d      	b.n	80092ce <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	68da      	ldr	r2, [r3, #12]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	1ad3      	subs	r3, r2, r3
 800907c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	6a3b      	ldr	r3, [r7, #32]
 8009082:	429a      	cmp	r2, r3
 8009084:	f240 811e 	bls.w	80092c4 <f_read+0x2ac>
 8009088:	6a3b      	ldr	r3, [r7, #32]
 800908a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800908c:	e11a      	b.n	80092c4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	699b      	ldr	r3, [r3, #24]
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	8992      	ldrh	r2, [r2, #12]
 8009096:	fbb3 f1f2 	udiv	r1, r3, r2
 800909a:	fb01 f202 	mul.w	r2, r1, r2
 800909e:	1a9b      	subs	r3, r3, r2
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f040 80d5 	bne.w	8009250 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	699b      	ldr	r3, [r3, #24]
 80090aa:	697a      	ldr	r2, [r7, #20]
 80090ac:	8992      	ldrh	r2, [r2, #12]
 80090ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80090b2:	697a      	ldr	r2, [r7, #20]
 80090b4:	8952      	ldrh	r2, [r2, #10]
 80090b6:	3a01      	subs	r2, #1
 80090b8:	4013      	ands	r3, r2
 80090ba:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d12f      	bne.n	8009122 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	699b      	ldr	r3, [r3, #24]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d103      	bne.n	80090d2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	633b      	str	r3, [r7, #48]	; 0x30
 80090d0:	e013      	b.n	80090fa <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d007      	beq.n	80090ea <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	4619      	mov	r1, r3
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f7fd ffd1 	bl	8007088 <clmt_clust>
 80090e6:	6338      	str	r0, [r7, #48]	; 0x30
 80090e8:	e007      	b.n	80090fa <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	69db      	ldr	r3, [r3, #28]
 80090f0:	4619      	mov	r1, r3
 80090f2:	4610      	mov	r0, r2
 80090f4:	f7fd fcdb 	bl	8006aae <get_fat>
 80090f8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80090fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d804      	bhi.n	800910a <f_read+0xf2>
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2202      	movs	r2, #2
 8009104:	755a      	strb	r2, [r3, #21]
 8009106:	2302      	movs	r3, #2
 8009108:	e0e1      	b.n	80092ce <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800910a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009110:	d104      	bne.n	800911c <f_read+0x104>
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2201      	movs	r2, #1
 8009116:	755a      	strb	r2, [r3, #21]
 8009118:	2301      	movs	r3, #1
 800911a:	e0d8      	b.n	80092ce <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009120:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009122:	697a      	ldr	r2, [r7, #20]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	69db      	ldr	r3, [r3, #28]
 8009128:	4619      	mov	r1, r3
 800912a:	4610      	mov	r0, r2
 800912c:	f7fd fca0 	bl	8006a70 <clust2sect>
 8009130:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d104      	bne.n	8009142 <f_read+0x12a>
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2202      	movs	r2, #2
 800913c:	755a      	strb	r2, [r3, #21]
 800913e:	2302      	movs	r3, #2
 8009140:	e0c5      	b.n	80092ce <f_read+0x2b6>
			sect += csect;
 8009142:	69ba      	ldr	r2, [r7, #24]
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	4413      	add	r3, r2
 8009148:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	899b      	ldrh	r3, [r3, #12]
 800914e:	461a      	mov	r2, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	fbb3 f3f2 	udiv	r3, r3, r2
 8009156:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915a:	2b00      	cmp	r3, #0
 800915c:	d041      	beq.n	80091e2 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800915e:	69fa      	ldr	r2, [r7, #28]
 8009160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009162:	4413      	add	r3, r2
 8009164:	697a      	ldr	r2, [r7, #20]
 8009166:	8952      	ldrh	r2, [r2, #10]
 8009168:	4293      	cmp	r3, r2
 800916a:	d905      	bls.n	8009178 <f_read+0x160>
					cc = fs->csize - csect;
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	895b      	ldrh	r3, [r3, #10]
 8009170:	461a      	mov	r2, r3
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	1ad3      	subs	r3, r2, r3
 8009176:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	7858      	ldrb	r0, [r3, #1]
 800917c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917e:	69ba      	ldr	r2, [r7, #24]
 8009180:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009182:	f7fd f8c9 	bl	8006318 <disk_read>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d004      	beq.n	8009196 <f_read+0x17e>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2201      	movs	r2, #1
 8009190:	755a      	strb	r2, [r3, #21]
 8009192:	2301      	movs	r3, #1
 8009194:	e09b      	b.n	80092ce <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	7d1b      	ldrb	r3, [r3, #20]
 800919a:	b25b      	sxtb	r3, r3
 800919c:	2b00      	cmp	r3, #0
 800919e:	da18      	bge.n	80091d2 <f_read+0x1ba>
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6a1a      	ldr	r2, [r3, #32]
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	1ad3      	subs	r3, r2, r3
 80091a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d911      	bls.n	80091d2 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6a1a      	ldr	r2, [r3, #32]
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	697a      	ldr	r2, [r7, #20]
 80091b8:	8992      	ldrh	r2, [r2, #12]
 80091ba:	fb02 f303 	mul.w	r3, r2, r3
 80091be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091c0:	18d0      	adds	r0, r2, r3
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	899b      	ldrh	r3, [r3, #12]
 80091cc:	461a      	mov	r2, r3
 80091ce:	f7fd f983 	bl	80064d8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	899b      	ldrh	r3, [r3, #12]
 80091d6:	461a      	mov	r2, r3
 80091d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091da:	fb02 f303 	mul.w	r3, r2, r3
 80091de:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80091e0:	e05c      	b.n	800929c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	69ba      	ldr	r2, [r7, #24]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d02e      	beq.n	800924a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	7d1b      	ldrb	r3, [r3, #20]
 80091f0:	b25b      	sxtb	r3, r3
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	da18      	bge.n	8009228 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	7858      	ldrb	r0, [r3, #1]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6a1a      	ldr	r2, [r3, #32]
 8009204:	2301      	movs	r3, #1
 8009206:	f7fd f8a7 	bl	8006358 <disk_write>
 800920a:	4603      	mov	r3, r0
 800920c:	2b00      	cmp	r3, #0
 800920e:	d004      	beq.n	800921a <f_read+0x202>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2201      	movs	r2, #1
 8009214:	755a      	strb	r2, [r3, #21]
 8009216:	2301      	movs	r3, #1
 8009218:	e059      	b.n	80092ce <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	7d1b      	ldrb	r3, [r3, #20]
 800921e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009222:	b2da      	uxtb	r2, r3
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	7858      	ldrb	r0, [r3, #1]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009232:	2301      	movs	r3, #1
 8009234:	69ba      	ldr	r2, [r7, #24]
 8009236:	f7fd f86f 	bl	8006318 <disk_read>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d004      	beq.n	800924a <f_read+0x232>
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2201      	movs	r2, #1
 8009244:	755a      	strb	r2, [r3, #21]
 8009246:	2301      	movs	r3, #1
 8009248:	e041      	b.n	80092ce <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	69ba      	ldr	r2, [r7, #24]
 800924e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	899b      	ldrh	r3, [r3, #12]
 8009254:	4618      	mov	r0, r3
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	699b      	ldr	r3, [r3, #24]
 800925a:	697a      	ldr	r2, [r7, #20]
 800925c:	8992      	ldrh	r2, [r2, #12]
 800925e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009262:	fb01 f202 	mul.w	r2, r1, r2
 8009266:	1a9b      	subs	r3, r3, r2
 8009268:	1ac3      	subs	r3, r0, r3
 800926a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800926c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	429a      	cmp	r2, r3
 8009272:	d901      	bls.n	8009278 <f_read+0x260>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	699b      	ldr	r3, [r3, #24]
 8009282:	697a      	ldr	r2, [r7, #20]
 8009284:	8992      	ldrh	r2, [r2, #12]
 8009286:	fbb3 f0f2 	udiv	r0, r3, r2
 800928a:	fb00 f202 	mul.w	r2, r0, r2
 800928e:	1a9b      	subs	r3, r3, r2
 8009290:	440b      	add	r3, r1
 8009292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009294:	4619      	mov	r1, r3
 8009296:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009298:	f7fd f91e 	bl	80064d8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800929c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800929e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a0:	4413      	add	r3, r2
 80092a2:	627b      	str	r3, [r7, #36]	; 0x24
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	699a      	ldr	r2, [r3, #24]
 80092a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092aa:	441a      	add	r2, r3
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	619a      	str	r2, [r3, #24]
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b6:	441a      	add	r2, r3
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	601a      	str	r2, [r3, #0]
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	f47f aee1 	bne.w	800908e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3738      	adds	r7, #56	; 0x38
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b08c      	sub	sp, #48	; 0x30
 80092da:	af00      	add	r7, sp, #0
 80092dc:	60f8      	str	r0, [r7, #12]
 80092de:	60b9      	str	r1, [r7, #8]
 80092e0:	607a      	str	r2, [r7, #4]
 80092e2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	2200      	movs	r2, #0
 80092ec:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f107 0210 	add.w	r2, r7, #16
 80092f4:	4611      	mov	r1, r2
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7ff fc46 	bl	8008b88 <validate>
 80092fc:	4603      	mov	r3, r0
 80092fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009302:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009306:	2b00      	cmp	r3, #0
 8009308:	d107      	bne.n	800931a <f_write+0x44>
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	7d5b      	ldrb	r3, [r3, #21]
 800930e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009312:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009316:	2b00      	cmp	r3, #0
 8009318:	d002      	beq.n	8009320 <f_write+0x4a>
 800931a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800931e:	e16a      	b.n	80095f6 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	7d1b      	ldrb	r3, [r3, #20]
 8009324:	f003 0302 	and.w	r3, r3, #2
 8009328:	2b00      	cmp	r3, #0
 800932a:	d101      	bne.n	8009330 <f_write+0x5a>
 800932c:	2307      	movs	r3, #7
 800932e:	e162      	b.n	80095f6 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	699a      	ldr	r2, [r3, #24]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	441a      	add	r2, r3
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	429a      	cmp	r2, r3
 800933e:	f080 814c 	bcs.w	80095da <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	699b      	ldr	r3, [r3, #24]
 8009346:	43db      	mvns	r3, r3
 8009348:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800934a:	e146      	b.n	80095da <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	699b      	ldr	r3, [r3, #24]
 8009350:	693a      	ldr	r2, [r7, #16]
 8009352:	8992      	ldrh	r2, [r2, #12]
 8009354:	fbb3 f1f2 	udiv	r1, r3, r2
 8009358:	fb01 f202 	mul.w	r2, r1, r2
 800935c:	1a9b      	subs	r3, r3, r2
 800935e:	2b00      	cmp	r3, #0
 8009360:	f040 80f1 	bne.w	8009546 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	699b      	ldr	r3, [r3, #24]
 8009368:	693a      	ldr	r2, [r7, #16]
 800936a:	8992      	ldrh	r2, [r2, #12]
 800936c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009370:	693a      	ldr	r2, [r7, #16]
 8009372:	8952      	ldrh	r2, [r2, #10]
 8009374:	3a01      	subs	r2, #1
 8009376:	4013      	ands	r3, r2
 8009378:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d143      	bne.n	8009408 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	699b      	ldr	r3, [r3, #24]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d10c      	bne.n	80093a2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800938e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009390:	2b00      	cmp	r3, #0
 8009392:	d11a      	bne.n	80093ca <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2100      	movs	r1, #0
 8009398:	4618      	mov	r0, r3
 800939a:	f7fd fddd 	bl	8006f58 <create_chain>
 800939e:	62b8      	str	r0, [r7, #40]	; 0x28
 80093a0:	e013      	b.n	80093ca <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d007      	beq.n	80093ba <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	699b      	ldr	r3, [r3, #24]
 80093ae:	4619      	mov	r1, r3
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f7fd fe69 	bl	8007088 <clmt_clust>
 80093b6:	62b8      	str	r0, [r7, #40]	; 0x28
 80093b8:	e007      	b.n	80093ca <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	69db      	ldr	r3, [r3, #28]
 80093c0:	4619      	mov	r1, r3
 80093c2:	4610      	mov	r0, r2
 80093c4:	f7fd fdc8 	bl	8006f58 <create_chain>
 80093c8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80093ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	f000 8109 	beq.w	80095e4 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80093d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d104      	bne.n	80093e2 <f_write+0x10c>
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2202      	movs	r2, #2
 80093dc:	755a      	strb	r2, [r3, #21]
 80093de:	2302      	movs	r3, #2
 80093e0:	e109      	b.n	80095f6 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80093e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e8:	d104      	bne.n	80093f4 <f_write+0x11e>
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2201      	movs	r2, #1
 80093ee:	755a      	strb	r2, [r3, #21]
 80093f0:	2301      	movs	r3, #1
 80093f2:	e100      	b.n	80095f6 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093f8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d102      	bne.n	8009408 <f_write+0x132>
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009406:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	7d1b      	ldrb	r3, [r3, #20]
 800940c:	b25b      	sxtb	r3, r3
 800940e:	2b00      	cmp	r3, #0
 8009410:	da18      	bge.n	8009444 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	7858      	ldrb	r0, [r3, #1]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6a1a      	ldr	r2, [r3, #32]
 8009420:	2301      	movs	r3, #1
 8009422:	f7fc ff99 	bl	8006358 <disk_write>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d004      	beq.n	8009436 <f_write+0x160>
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2201      	movs	r2, #1
 8009430:	755a      	strb	r2, [r3, #21]
 8009432:	2301      	movs	r3, #1
 8009434:	e0df      	b.n	80095f6 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	7d1b      	ldrb	r3, [r3, #20]
 800943a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800943e:	b2da      	uxtb	r2, r3
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009444:	693a      	ldr	r2, [r7, #16]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	69db      	ldr	r3, [r3, #28]
 800944a:	4619      	mov	r1, r3
 800944c:	4610      	mov	r0, r2
 800944e:	f7fd fb0f 	bl	8006a70 <clust2sect>
 8009452:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d104      	bne.n	8009464 <f_write+0x18e>
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2202      	movs	r2, #2
 800945e:	755a      	strb	r2, [r3, #21]
 8009460:	2302      	movs	r3, #2
 8009462:	e0c8      	b.n	80095f6 <f_write+0x320>
			sect += csect;
 8009464:	697a      	ldr	r2, [r7, #20]
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	4413      	add	r3, r2
 800946a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	899b      	ldrh	r3, [r3, #12]
 8009470:	461a      	mov	r2, r3
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	fbb3 f3f2 	udiv	r3, r3, r2
 8009478:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800947a:	6a3b      	ldr	r3, [r7, #32]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d043      	beq.n	8009508 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009480:	69ba      	ldr	r2, [r7, #24]
 8009482:	6a3b      	ldr	r3, [r7, #32]
 8009484:	4413      	add	r3, r2
 8009486:	693a      	ldr	r2, [r7, #16]
 8009488:	8952      	ldrh	r2, [r2, #10]
 800948a:	4293      	cmp	r3, r2
 800948c:	d905      	bls.n	800949a <f_write+0x1c4>
					cc = fs->csize - csect;
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	895b      	ldrh	r3, [r3, #10]
 8009492:	461a      	mov	r2, r3
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	1ad3      	subs	r3, r2, r3
 8009498:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	7858      	ldrb	r0, [r3, #1]
 800949e:	6a3b      	ldr	r3, [r7, #32]
 80094a0:	697a      	ldr	r2, [r7, #20]
 80094a2:	69f9      	ldr	r1, [r7, #28]
 80094a4:	f7fc ff58 	bl	8006358 <disk_write>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d004      	beq.n	80094b8 <f_write+0x1e2>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2201      	movs	r2, #1
 80094b2:	755a      	strb	r2, [r3, #21]
 80094b4:	2301      	movs	r3, #1
 80094b6:	e09e      	b.n	80095f6 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6a1a      	ldr	r2, [r3, #32]
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	1ad3      	subs	r3, r2, r3
 80094c0:	6a3a      	ldr	r2, [r7, #32]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d918      	bls.n	80094f8 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6a1a      	ldr	r2, [r3, #32]
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	1ad3      	subs	r3, r2, r3
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	8992      	ldrh	r2, [r2, #12]
 80094d8:	fb02 f303 	mul.w	r3, r2, r3
 80094dc:	69fa      	ldr	r2, [r7, #28]
 80094de:	18d1      	adds	r1, r2, r3
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	899b      	ldrh	r3, [r3, #12]
 80094e4:	461a      	mov	r2, r3
 80094e6:	f7fc fff7 	bl	80064d8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	7d1b      	ldrb	r3, [r3, #20]
 80094ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094f2:	b2da      	uxtb	r2, r3
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	899b      	ldrh	r3, [r3, #12]
 80094fc:	461a      	mov	r2, r3
 80094fe:	6a3b      	ldr	r3, [r7, #32]
 8009500:	fb02 f303 	mul.w	r3, r2, r3
 8009504:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009506:	e04b      	b.n	80095a0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6a1b      	ldr	r3, [r3, #32]
 800950c:	697a      	ldr	r2, [r7, #20]
 800950e:	429a      	cmp	r2, r3
 8009510:	d016      	beq.n	8009540 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	699a      	ldr	r2, [r3, #24]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800951a:	429a      	cmp	r2, r3
 800951c:	d210      	bcs.n	8009540 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	7858      	ldrb	r0, [r3, #1]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009528:	2301      	movs	r3, #1
 800952a:	697a      	ldr	r2, [r7, #20]
 800952c:	f7fc fef4 	bl	8006318 <disk_read>
 8009530:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009532:	2b00      	cmp	r3, #0
 8009534:	d004      	beq.n	8009540 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2201      	movs	r2, #1
 800953a:	755a      	strb	r2, [r3, #21]
 800953c:	2301      	movs	r3, #1
 800953e:	e05a      	b.n	80095f6 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	697a      	ldr	r2, [r7, #20]
 8009544:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	899b      	ldrh	r3, [r3, #12]
 800954a:	4618      	mov	r0, r3
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	699b      	ldr	r3, [r3, #24]
 8009550:	693a      	ldr	r2, [r7, #16]
 8009552:	8992      	ldrh	r2, [r2, #12]
 8009554:	fbb3 f1f2 	udiv	r1, r3, r2
 8009558:	fb01 f202 	mul.w	r2, r1, r2
 800955c:	1a9b      	subs	r3, r3, r2
 800955e:	1ac3      	subs	r3, r0, r3
 8009560:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	429a      	cmp	r2, r3
 8009568:	d901      	bls.n	800956e <f_write+0x298>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	699b      	ldr	r3, [r3, #24]
 8009578:	693a      	ldr	r2, [r7, #16]
 800957a:	8992      	ldrh	r2, [r2, #12]
 800957c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009580:	fb00 f202 	mul.w	r2, r0, r2
 8009584:	1a9b      	subs	r3, r3, r2
 8009586:	440b      	add	r3, r1
 8009588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800958a:	69f9      	ldr	r1, [r7, #28]
 800958c:	4618      	mov	r0, r3
 800958e:	f7fc ffa3 	bl	80064d8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	7d1b      	ldrb	r3, [r3, #20]
 8009596:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800959a:	b2da      	uxtb	r2, r3
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80095a0:	69fa      	ldr	r2, [r7, #28]
 80095a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a4:	4413      	add	r3, r2
 80095a6:	61fb      	str	r3, [r7, #28]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	699a      	ldr	r2, [r3, #24]
 80095ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ae:	441a      	add	r2, r3
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	619a      	str	r2, [r3, #24]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	68da      	ldr	r2, [r3, #12]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	699b      	ldr	r3, [r3, #24]
 80095bc:	429a      	cmp	r2, r3
 80095be:	bf38      	it	cc
 80095c0:	461a      	movcc	r2, r3
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	60da      	str	r2, [r3, #12]
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095cc:	441a      	add	r2, r3
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	601a      	str	r2, [r3, #0]
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d6:	1ad3      	subs	r3, r2, r3
 80095d8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	f47f aeb5 	bne.w	800934c <f_write+0x76>
 80095e2:	e000      	b.n	80095e6 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80095e4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	7d1b      	ldrb	r3, [r3, #20]
 80095ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095ee:	b2da      	uxtb	r2, r3
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3730      	adds	r7, #48	; 0x30
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}

080095fe <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80095fe:	b580      	push	{r7, lr}
 8009600:	b086      	sub	sp, #24
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f107 0208 	add.w	r2, r7, #8
 800960c:	4611      	mov	r1, r2
 800960e:	4618      	mov	r0, r3
 8009610:	f7ff faba 	bl	8008b88 <validate>
 8009614:	4603      	mov	r3, r0
 8009616:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009618:	7dfb      	ldrb	r3, [r7, #23]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d168      	bne.n	80096f0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	7d1b      	ldrb	r3, [r3, #20]
 8009622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009626:	2b00      	cmp	r3, #0
 8009628:	d062      	beq.n	80096f0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	7d1b      	ldrb	r3, [r3, #20]
 800962e:	b25b      	sxtb	r3, r3
 8009630:	2b00      	cmp	r3, #0
 8009632:	da15      	bge.n	8009660 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	7858      	ldrb	r0, [r3, #1]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6a1a      	ldr	r2, [r3, #32]
 8009642:	2301      	movs	r3, #1
 8009644:	f7fc fe88 	bl	8006358 <disk_write>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d001      	beq.n	8009652 <f_sync+0x54>
 800964e:	2301      	movs	r3, #1
 8009650:	e04f      	b.n	80096f2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	7d1b      	ldrb	r3, [r3, #20]
 8009656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800965a:	b2da      	uxtb	r2, r3
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009660:	f7fc fdbc 	bl	80061dc <get_fattime>
 8009664:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009666:	68ba      	ldr	r2, [r7, #8]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966c:	4619      	mov	r1, r3
 800966e:	4610      	mov	r0, r2
 8009670:	f7fd f960 	bl	8006934 <move_window>
 8009674:	4603      	mov	r3, r0
 8009676:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009678:	7dfb      	ldrb	r3, [r7, #23]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d138      	bne.n	80096f0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009682:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	330b      	adds	r3, #11
 8009688:	781a      	ldrb	r2, [r3, #0]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	330b      	adds	r3, #11
 800968e:	f042 0220 	orr.w	r2, r2, #32
 8009692:	b2d2      	uxtb	r2, r2
 8009694:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6818      	ldr	r0, [r3, #0]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	461a      	mov	r2, r3
 80096a0:	68f9      	ldr	r1, [r7, #12]
 80096a2:	f7fd feee 	bl	8007482 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f103 021c 	add.w	r2, r3, #28
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	4619      	mov	r1, r3
 80096b2:	4610      	mov	r0, r2
 80096b4:	f7fc fee4 	bl	8006480 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	3316      	adds	r3, #22
 80096bc:	6939      	ldr	r1, [r7, #16]
 80096be:	4618      	mov	r0, r3
 80096c0:	f7fc fede 	bl	8006480 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	3312      	adds	r3, #18
 80096c8:	2100      	movs	r1, #0
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7fc febd 	bl	800644a <st_word>
					fs->wflag = 1;
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	2201      	movs	r2, #1
 80096d4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	4618      	mov	r0, r3
 80096da:	f7fd f959 	bl	8006990 <sync_fs>
 80096de:	4603      	mov	r3, r0
 80096e0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	7d1b      	ldrb	r3, [r3, #20]
 80096e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096ea:	b2da      	uxtb	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80096f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3718      	adds	r7, #24
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b084      	sub	sp, #16
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f7ff ff7b 	bl	80095fe <f_sync>
 8009708:	4603      	mov	r3, r0
 800970a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800970c:	7bfb      	ldrb	r3, [r7, #15]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d118      	bne.n	8009744 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f107 0208 	add.w	r2, r7, #8
 8009718:	4611      	mov	r1, r2
 800971a:	4618      	mov	r0, r3
 800971c:	f7ff fa34 	bl	8008b88 <validate>
 8009720:	4603      	mov	r3, r0
 8009722:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009724:	7bfb      	ldrb	r3, [r7, #15]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d10c      	bne.n	8009744 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	691b      	ldr	r3, [r3, #16]
 800972e:	4618      	mov	r0, r3
 8009730:	f7fd f85c 	bl	80067ec <dec_lock>
 8009734:	4603      	mov	r3, r0
 8009736:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009738:	7bfb      	ldrb	r3, [r7, #15]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d102      	bne.n	8009744 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009744:	7bfb      	ldrb	r3, [r7, #15]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b086      	sub	sp, #24
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
 8009756:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d101      	bne.n	8009762 <f_opendir+0x14>
 800975e:	2309      	movs	r3, #9
 8009760:	e064      	b.n	800982c <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8009766:	f107 010c 	add.w	r1, r7, #12
 800976a:	463b      	mov	r3, r7
 800976c:	2200      	movs	r2, #0
 800976e:	4618      	mov	r0, r3
 8009770:	f7fe ff84 	bl	800867c <find_volume>
 8009774:	4603      	mov	r3, r0
 8009776:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009778:	7dfb      	ldrb	r3, [r7, #23]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d14f      	bne.n	800981e <f_opendir+0xd0>
		obj->fs = fs;
 800977e:	68fa      	ldr	r2, [r7, #12]
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	4619      	mov	r1, r3
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f7fe fe67 	bl	800845c <follow_path>
 800978e:	4603      	mov	r3, r0
 8009790:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8009792:	7dfb      	ldrb	r3, [r7, #23]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d13d      	bne.n	8009814 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800979e:	b25b      	sxtb	r3, r3
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	db12      	blt.n	80097ca <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	799b      	ldrb	r3, [r3, #6]
 80097a8:	f003 0310 	and.w	r3, r3, #16
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00a      	beq.n	80097c6 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6a1b      	ldr	r3, [r3, #32]
 80097b6:	4619      	mov	r1, r3
 80097b8:	4610      	mov	r0, r2
 80097ba:	f7fd fe43 	bl	8007444 <ld_clust>
 80097be:	4602      	mov	r2, r0
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	609a      	str	r2, [r3, #8]
 80097c4:	e001      	b.n	80097ca <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80097c6:	2305      	movs	r3, #5
 80097c8:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80097ca:	7dfb      	ldrb	r3, [r7, #23]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d121      	bne.n	8009814 <f_opendir+0xc6>
				obj->id = fs->id;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	88da      	ldrh	r2, [r3, #6]
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80097d8:	2100      	movs	r1, #0
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f7fd fc8c 	bl	80070f8 <dir_sdi>
 80097e0:	4603      	mov	r3, r0
 80097e2:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80097e4:	7dfb      	ldrb	r3, [r7, #23]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d114      	bne.n	8009814 <f_opendir+0xc6>
					if (obj->sclust) {
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00d      	beq.n	800980e <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80097f2:	2100      	movs	r1, #0
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f7fc ff6b 	bl	80066d0 <inc_lock>
 80097fa:	4602      	mov	r2, r0
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	691b      	ldr	r3, [r3, #16]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d105      	bne.n	8009814 <f_opendir+0xc6>
 8009808:	2312      	movs	r3, #18
 800980a:	75fb      	strb	r3, [r7, #23]
 800980c:	e002      	b.n	8009814 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	2200      	movs	r2, #0
 8009812:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8009814:	7dfb      	ldrb	r3, [r7, #23]
 8009816:	2b04      	cmp	r3, #4
 8009818:	d101      	bne.n	800981e <f_opendir+0xd0>
 800981a:	2305      	movs	r3, #5
 800981c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800981e:	7dfb      	ldrb	r3, [r7, #23]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d002      	beq.n	800982a <f_opendir+0xdc>
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	2200      	movs	r2, #0
 8009828:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800982a:	7dfb      	ldrb	r3, [r7, #23]
}
 800982c:	4618      	mov	r0, r3
 800982e:	3718      	adds	r7, #24
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f107 0208 	add.w	r2, r7, #8
 8009844:	4611      	mov	r1, r2
 8009846:	4618      	mov	r0, r3
 8009848:	f7ff f99e 	bl	8008b88 <validate>
 800984c:	4603      	mov	r3, r0
 800984e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009850:	7bfb      	ldrb	r3, [r7, #15]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d126      	bne.n	80098a4 <f_readdir+0x70>
		if (!fno) {
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d106      	bne.n	800986a <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800985c:	2100      	movs	r1, #0
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f7fd fc4a 	bl	80070f8 <dir_sdi>
 8009864:	4603      	mov	r3, r0
 8009866:	73fb      	strb	r3, [r7, #15]
 8009868:	e01c      	b.n	80098a4 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800986a:	2100      	movs	r1, #0
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f7fe f814 	bl	800789a <dir_read>
 8009872:	4603      	mov	r3, r0
 8009874:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8009876:	7bfb      	ldrb	r3, [r7, #15]
 8009878:	2b04      	cmp	r3, #4
 800987a:	d101      	bne.n	8009880 <f_readdir+0x4c>
 800987c:	2300      	movs	r3, #0
 800987e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8009880:	7bfb      	ldrb	r3, [r7, #15]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d10e      	bne.n	80098a4 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8009886:	6839      	ldr	r1, [r7, #0]
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f7fe faaf 	bl	8007dec <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800988e:	2100      	movs	r1, #0
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f7fd fcba 	bl	800720a <dir_next>
 8009896:	4603      	mov	r3, r0
 8009898:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800989a:	7bfb      	ldrb	r3, [r7, #15]
 800989c:	2b04      	cmp	r3, #4
 800989e:	d101      	bne.n	80098a4 <f_readdir+0x70>
 80098a0:	2300      	movs	r3, #0
 80098a2:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80098a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b084      	sub	sp, #16
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
 80098b6:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 80098b8:	6839      	ldr	r1, [r7, #0]
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f7ff ffba 	bl	8009834 <f_readdir>
 80098c0:	4603      	mov	r3, r0
 80098c2:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 80098c4:	7bfb      	ldrb	r3, [r7, #15]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d114      	bne.n	80098f4 <f_findnext+0x46>
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d011      	beq.n	80098f4 <f_findnext+0x46>
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	7d9b      	ldrb	r3, [r3, #22]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00d      	beq.n	80098f4 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	f103 0116 	add.w	r1, r3, #22
 80098e2:	2300      	movs	r3, #0
 80098e4:	2200      	movs	r2, #0
 80098e6:	f7fe fb85 	bl	8007ff4 <pattern_matching>
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d100      	bne.n	80098f2 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 80098f0:	e7e2      	b.n	80098b8 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 80098f2:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 80098f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3710      	adds	r7, #16
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}

080098fe <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 80098fe:	b580      	push	{r7, lr}
 8009900:	b086      	sub	sp, #24
 8009902:	af00      	add	r7, sp, #0
 8009904:	60f8      	str	r0, [r7, #12]
 8009906:	60b9      	str	r1, [r7, #8]
 8009908:	607a      	str	r2, [r7, #4]
 800990a:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	683a      	ldr	r2, [r7, #0]
 8009910:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 8009912:	6879      	ldr	r1, [r7, #4]
 8009914:	68f8      	ldr	r0, [r7, #12]
 8009916:	f7ff ff1a 	bl	800974e <f_opendir>
 800991a:	4603      	mov	r3, r0
 800991c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800991e:	7dfb      	ldrb	r3, [r7, #23]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d105      	bne.n	8009930 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 8009924:	68b9      	ldr	r1, [r7, #8]
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f7ff ffc1 	bl	80098ae <f_findnext>
 800992c:	4603      	mov	r3, r0
 800992e:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 8009930:	7dfb      	ldrb	r3, [r7, #23]
}
 8009932:	4618      	mov	r0, r3
 8009934:	3718      	adds	r7, #24
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}

0800993a <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800993a:	b580      	push	{r7, lr}
 800993c:	b0a2      	sub	sp, #136	; 0x88
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8009942:	2300      	movs	r3, #0
 8009944:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8009948:	f107 010c 	add.w	r1, r7, #12
 800994c:	1d3b      	adds	r3, r7, #4
 800994e:	2202      	movs	r2, #2
 8009950:	4618      	mov	r0, r3
 8009952:	f7fe fe93 	bl	800867c <find_volume>
 8009956:	4603      	mov	r3, r0
 8009958:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	dj.obj.fs = fs;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (res == FR_OK) {
 8009960:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8009964:	2b00      	cmp	r3, #0
 8009966:	f040 8092 	bne.w	8009a8e <f_unlink+0x154>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009970:	4611      	mov	r1, r2
 8009972:	4618      	mov	r0, r3
 8009974:	f7fe fd72 	bl	800845c <follow_path>
 8009978:	4603      	mov	r3, r0
 800997a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800997e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8009982:	2b00      	cmp	r3, #0
 8009984:	d108      	bne.n	8009998 <f_unlink+0x5e>
 8009986:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800998a:	2102      	movs	r1, #2
 800998c:	4618      	mov	r0, r3
 800998e:	f7fc fe21 	bl	80065d4 <chk_lock>
 8009992:	4603      	mov	r3, r0
 8009994:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8009998:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800999c:	2b00      	cmp	r3, #0
 800999e:	d176      	bne.n	8009a8e <f_unlink+0x154>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80099a0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80099a4:	b25b      	sxtb	r3, r3
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	da03      	bge.n	80099b2 <f_unlink+0x78>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80099aa:	2306      	movs	r3, #6
 80099ac:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80099b0:	e008      	b.n	80099c4 <f_unlink+0x8a>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80099b2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80099b6:	f003 0301 	and.w	r3, r3, #1
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d002      	beq.n	80099c4 <f_unlink+0x8a>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80099be:	2307      	movs	r3, #7
 80099c0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
			if (res == FR_OK) {
 80099c4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d136      	bne.n	8009a3a <f_unlink+0x100>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80099d0:	4611      	mov	r1, r2
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fd fd36 	bl	8007444 <ld_clust>
 80099d8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80099dc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80099e0:	f003 0310 	and.w	r3, r3, #16
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d028      	beq.n	8009a3a <f_unlink+0x100>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80099ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80099f0:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80099f2:	f107 0310 	add.w	r3, r7, #16
 80099f6:	2100      	movs	r1, #0
 80099f8:	4618      	mov	r0, r3
 80099fa:	f7fd fb7d 	bl	80070f8 <dir_sdi>
 80099fe:	4603      	mov	r3, r0
 8009a00:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						if (res == FR_OK) {
 8009a04:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d116      	bne.n	8009a3a <f_unlink+0x100>
							res = dir_read(&sdj, 0);			/* Read an item */
 8009a0c:	f107 0310 	add.w	r3, r7, #16
 8009a10:	2100      	movs	r1, #0
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fd ff41 	bl	800789a <dir_read>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8009a1e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d102      	bne.n	8009a2c <f_unlink+0xf2>
 8009a26:	2307      	movs	r3, #7
 8009a28:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8009a2c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8009a30:	2b04      	cmp	r3, #4
 8009a32:	d102      	bne.n	8009a3a <f_unlink+0x100>
 8009a34:	2300      	movs	r3, #0
 8009a36:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						}
					}
				}
			}
			if (res == FR_OK) {
 8009a3a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d125      	bne.n	8009a8e <f_unlink+0x154>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8009a42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7fe f986 	bl	8007d58 <dir_remove>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8009a52:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d10e      	bne.n	8009a78 <f_unlink+0x13e>
 8009a5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d00a      	beq.n	8009a78 <f_unlink+0x13e>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8009a62:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009a66:	2200      	movs	r2, #0
 8009a68:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7fd fa0e 	bl	8006e8e <remove_chain>
 8009a72:	4603      	mov	r3, r0
 8009a74:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8009a78:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d106      	bne.n	8009a8e <f_unlink+0x154>
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7fc ff84 	bl	8006990 <sync_fs>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8009a8e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3788      	adds	r7, #136	; 0x88
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b098      	sub	sp, #96	; 0x60
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8009aa2:	f107 0108 	add.w	r1, r7, #8
 8009aa6:	1d3b      	adds	r3, r7, #4
 8009aa8:	2202      	movs	r2, #2
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7fe fde6 	bl	800867c <find_volume>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8009aba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	f040 80f2 	bne.w	8009ca8 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	f107 030c 	add.w	r3, r7, #12
 8009aca:	4611      	mov	r1, r2
 8009acc:	4618      	mov	r0, r3
 8009ace:	f7fe fcc5 	bl	800845c <follow_path>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8009ad8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d102      	bne.n	8009ae6 <f_mkdir+0x4c>
 8009ae0:	2308      	movs	r3, #8
 8009ae2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8009ae6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009aea:	2b04      	cmp	r3, #4
 8009aec:	f040 80dc 	bne.w	8009ca8 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8009af0:	f107 030c 	add.w	r3, r7, #12
 8009af4:	2100      	movs	r1, #0
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7fd fa2e 	bl	8006f58 <create_chain>
 8009afc:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	895b      	ldrh	r3, [r3, #10]
 8009b02:	461a      	mov	r2, r3
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	899b      	ldrh	r3, [r3, #12]
 8009b08:	fb02 f303 	mul.w	r3, r2, r3
 8009b0c:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8009b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d102      	bne.n	8009b20 <f_mkdir+0x86>
 8009b1a:	2307      	movs	r3, #7
 8009b1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 8009b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d102      	bne.n	8009b2c <f_mkdir+0x92>
 8009b26:	2302      	movs	r3, #2
 8009b28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b32:	d102      	bne.n	8009b3a <f_mkdir+0xa0>
 8009b34:	2301      	movs	r3, #1
 8009b36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8009b3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d106      	bne.n	8009b50 <f_mkdir+0xb6>
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7fc feb1 	bl	80068ac <sync_window>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 8009b50:	f7fc fb44 	bl	80061dc <get_fattime>
 8009b54:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 8009b56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d16c      	bne.n	8009c38 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7fc ff84 	bl	8006a70 <clust2sect>
 8009b68:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	3338      	adds	r3, #56	; 0x38
 8009b6e:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	899b      	ldrh	r3, [r3, #12]
 8009b74:	461a      	mov	r2, r3
 8009b76:	2100      	movs	r1, #0
 8009b78:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009b7a:	f7fc fcce 	bl	800651a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8009b7e:	220b      	movs	r2, #11
 8009b80:	2120      	movs	r1, #32
 8009b82:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009b84:	f7fc fcc9 	bl	800651a <mem_set>
					dir[DIR_Name] = '.';
 8009b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b8a:	222e      	movs	r2, #46	; 0x2e
 8009b8c:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8009b8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b90:	330b      	adds	r3, #11
 8009b92:	2210      	movs	r2, #16
 8009b94:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8009b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b98:	3316      	adds	r3, #22
 8009b9a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7fc fc6f 	bl	8006480 <st_dword>
					st_clust(fs, dir, dcl);
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ba6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7fd fc6a 	bl	8007482 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8009bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bb0:	3320      	adds	r3, #32
 8009bb2:	2220      	movs	r2, #32
 8009bb4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7fc fc8e 	bl	80064d8 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8009bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bbe:	3321      	adds	r3, #33	; 0x21
 8009bc0:	222e      	movs	r2, #46	; 0x2e
 8009bc2:	701a      	strb	r2, [r3, #0]
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	2b03      	cmp	r3, #3
 8009bce:	d106      	bne.n	8009bde <f_mkdir+0x144>
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d101      	bne.n	8009bde <f_mkdir+0x144>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 8009bde:	68b8      	ldr	r0, [r7, #8]
 8009be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009be2:	3320      	adds	r3, #32
 8009be4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009be6:	4619      	mov	r1, r3
 8009be8:	f7fd fc4b 	bl	8007482 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	895b      	ldrh	r3, [r3, #10]
 8009bf0:	65bb      	str	r3, [r7, #88]	; 0x58
 8009bf2:	e01c      	b.n	8009c2e <f_mkdir+0x194>
					fs->winsect = dsc++;
 8009bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bf6:	1c5a      	adds	r2, r3, #1
 8009bf8:	657a      	str	r2, [r7, #84]	; 0x54
 8009bfa:	68ba      	ldr	r2, [r7, #8]
 8009bfc:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	2201      	movs	r2, #1
 8009c02:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7fc fe50 	bl	80068ac <sync_window>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 8009c12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d10d      	bne.n	8009c36 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	899b      	ldrh	r3, [r3, #12]
 8009c1e:	461a      	mov	r2, r3
 8009c20:	2100      	movs	r1, #0
 8009c22:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009c24:	f7fc fc79 	bl	800651a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8009c28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c2a:	3b01      	subs	r3, #1
 8009c2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d1df      	bne.n	8009bf4 <f_mkdir+0x15a>
 8009c34:	e000      	b.n	8009c38 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 8009c36:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8009c38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d107      	bne.n	8009c50 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8009c40:	f107 030c 	add.w	r3, r7, #12
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7fd ff8f 	bl	8007b68 <dir_register>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 8009c50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d120      	bne.n	8009c9a <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8009c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5a:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8009c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c5e:	3316      	adds	r3, #22
 8009c60:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7fc fc0c 	bl	8006480 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009c6c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7fd fc07 	bl	8007482 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8009c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c76:	330b      	adds	r3, #11
 8009c78:	2210      	movs	r2, #16
 8009c7a:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8009c82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d10e      	bne.n	8009ca8 <f_mkdir+0x20e>
					res = sync_fs(fs);
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7fc fe7f 	bl	8006990 <sync_fs>
 8009c92:	4603      	mov	r3, r0
 8009c94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009c98:	e006      	b.n	8009ca8 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8009c9a:	f107 030c 	add.w	r3, r7, #12
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7fd f8f3 	bl	8006e8e <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8009ca8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3760      	adds	r7, #96	; 0x60
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b088      	sub	sp, #32
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	607a      	str	r2, [r7, #4]
	int n = 0;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009cc8:	e01b      	b.n	8009d02 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8009cca:	f107 0310 	add.w	r3, r7, #16
 8009cce:	f107 0114 	add.w	r1, r7, #20
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f7ff f99f 	bl	8009018 <f_read>
		if (rc != 1) break;
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d116      	bne.n	8009d0e <f_gets+0x5a>
		c = s[0];
 8009ce0:	7d3b      	ldrb	r3, [r7, #20]
 8009ce2:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009ce4:	7dfb      	ldrb	r3, [r7, #23]
 8009ce6:	2b0d      	cmp	r3, #13
 8009ce8:	d100      	bne.n	8009cec <f_gets+0x38>
 8009cea:	e00a      	b.n	8009d02 <f_gets+0x4e>
		*p++ = c;
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	1c5a      	adds	r2, r3, #1
 8009cf0:	61ba      	str	r2, [r7, #24]
 8009cf2:	7dfa      	ldrb	r2, [r7, #23]
 8009cf4:	701a      	strb	r2, [r3, #0]
		n++;
 8009cf6:	69fb      	ldr	r3, [r7, #28]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8009cfc:	7dfb      	ldrb	r3, [r7, #23]
 8009cfe:	2b0a      	cmp	r3, #10
 8009d00:	d007      	beq.n	8009d12 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	3b01      	subs	r3, #1
 8009d06:	69fa      	ldr	r2, [r7, #28]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	dbde      	blt.n	8009cca <f_gets+0x16>
 8009d0c:	e002      	b.n	8009d14 <f_gets+0x60>
		if (rc != 1) break;
 8009d0e:	bf00      	nop
 8009d10:	e000      	b.n	8009d14 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8009d12:	bf00      	nop
	}
	*p = 0;
 8009d14:	69bb      	ldr	r3, [r7, #24]
 8009d16:	2200      	movs	r2, #0
 8009d18:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8009d1a:	69fb      	ldr	r3, [r7, #28]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d001      	beq.n	8009d24 <f_gets+0x70>
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	e000      	b.n	8009d26 <f_gets+0x72>
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3720      	adds	r7, #32
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b084      	sub	sp, #16
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
 8009d36:	460b      	mov	r3, r1
 8009d38:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8009d3a:	78fb      	ldrb	r3, [r7, #3]
 8009d3c:	2b0a      	cmp	r3, #10
 8009d3e:	d103      	bne.n	8009d48 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8009d40:	210d      	movs	r1, #13
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f7ff fff3 	bl	8009d2e <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	db25      	blt.n	8009da0 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	1c5a      	adds	r2, r3, #1
 8009d58:	60fa      	str	r2, [r7, #12]
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	78fa      	ldrb	r2, [r7, #3]
 8009d60:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2b3c      	cmp	r3, #60	; 0x3c
 8009d66:	dd12      	ble.n	8009d8e <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6818      	ldr	r0, [r3, #0]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f103 010c 	add.w	r1, r3, #12
 8009d72:	68fa      	ldr	r2, [r7, #12]
 8009d74:	f107 0308 	add.w	r3, r7, #8
 8009d78:	f7ff faad 	bl	80092d6 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009d7c:	68ba      	ldr	r2, [r7, #8]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d101      	bne.n	8009d88 <putc_bfd+0x5a>
 8009d84:	2300      	movs	r3, #0
 8009d86:	e001      	b.n	8009d8c <putc_bfd+0x5e>
 8009d88:	f04f 33ff 	mov.w	r3, #4294967295
 8009d8c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	1c5a      	adds	r2, r3, #1
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	609a      	str	r2, [r3, #8]
 8009d9e:	e000      	b.n	8009da2 <putc_bfd+0x74>
	if (i < 0) return;
 8009da0:	bf00      	nop
}
 8009da2:	3710      	adds	r7, #16
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	db16      	blt.n	8009de6 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6818      	ldr	r0, [r3, #0]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f103 010c 	add.w	r1, r3, #12
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	f107 030c 	add.w	r3, r7, #12
 8009dcc:	f7ff fa83 	bl	80092d6 <f_write>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d107      	bne.n	8009de6 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d102      	bne.n	8009de6 <putc_flush+0x3e>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	e001      	b.n	8009dea <putc_flush+0x42>
	return EOF;
 8009de6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8009df2:	b480      	push	{r7}
 8009df4:	b083      	sub	sp, #12
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
 8009dfa:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	683a      	ldr	r2, [r7, #0]
 8009e00:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	605a      	str	r2, [r3, #4]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	685a      	ldr	r2, [r3, #4]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	609a      	str	r2, [r3, #8]
}
 8009e10:	bf00      	nop
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b096      	sub	sp, #88	; 0x58
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8009e26:	f107 030c 	add.w	r3, r7, #12
 8009e2a:	6839      	ldr	r1, [r7, #0]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7ff ffe0 	bl	8009df2 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8009e32:	e009      	b.n	8009e48 <f_puts+0x2c>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	1c5a      	adds	r2, r3, #1
 8009e38:	607a      	str	r2, [r7, #4]
 8009e3a:	781a      	ldrb	r2, [r3, #0]
 8009e3c:	f107 030c 	add.w	r3, r7, #12
 8009e40:	4611      	mov	r1, r2
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7ff ff73 	bl	8009d2e <putc_bfd>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d1f1      	bne.n	8009e34 <f_puts+0x18>
	return putc_flush(&pb);
 8009e50:	f107 030c 	add.w	r3, r7, #12
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7ff ffa7 	bl	8009da8 <putc_flush>
 8009e5a:	4603      	mov	r3, r0
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3758      	adds	r7, #88	; 0x58
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b087      	sub	sp, #28
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	4613      	mov	r3, r2
 8009e70:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009e72:	2301      	movs	r3, #1
 8009e74:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009e76:	2300      	movs	r3, #0
 8009e78:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009e7a:	4b1f      	ldr	r3, [pc, #124]	; (8009ef8 <FATFS_LinkDriverEx+0x94>)
 8009e7c:	7a5b      	ldrb	r3, [r3, #9]
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d131      	bne.n	8009ee8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009e84:	4b1c      	ldr	r3, [pc, #112]	; (8009ef8 <FATFS_LinkDriverEx+0x94>)
 8009e86:	7a5b      	ldrb	r3, [r3, #9]
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	4b1a      	ldr	r3, [pc, #104]	; (8009ef8 <FATFS_LinkDriverEx+0x94>)
 8009e8e:	2100      	movs	r1, #0
 8009e90:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009e92:	4b19      	ldr	r3, [pc, #100]	; (8009ef8 <FATFS_LinkDriverEx+0x94>)
 8009e94:	7a5b      	ldrb	r3, [r3, #9]
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	4a17      	ldr	r2, [pc, #92]	; (8009ef8 <FATFS_LinkDriverEx+0x94>)
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	4413      	add	r3, r2
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009ea2:	4b15      	ldr	r3, [pc, #84]	; (8009ef8 <FATFS_LinkDriverEx+0x94>)
 8009ea4:	7a5b      	ldrb	r3, [r3, #9]
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	4b13      	ldr	r3, [pc, #76]	; (8009ef8 <FATFS_LinkDriverEx+0x94>)
 8009eac:	4413      	add	r3, r2
 8009eae:	79fa      	ldrb	r2, [r7, #7]
 8009eb0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009eb2:	4b11      	ldr	r3, [pc, #68]	; (8009ef8 <FATFS_LinkDriverEx+0x94>)
 8009eb4:	7a5b      	ldrb	r3, [r3, #9]
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	1c5a      	adds	r2, r3, #1
 8009eba:	b2d1      	uxtb	r1, r2
 8009ebc:	4a0e      	ldr	r2, [pc, #56]	; (8009ef8 <FATFS_LinkDriverEx+0x94>)
 8009ebe:	7251      	strb	r1, [r2, #9]
 8009ec0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009ec2:	7dbb      	ldrb	r3, [r7, #22]
 8009ec4:	3330      	adds	r3, #48	; 0x30
 8009ec6:	b2da      	uxtb	r2, r3
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	3301      	adds	r3, #1
 8009ed0:	223a      	movs	r2, #58	; 0x3a
 8009ed2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	3302      	adds	r3, #2
 8009ed8:	222f      	movs	r2, #47	; 0x2f
 8009eda:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	3303      	adds	r3, #3
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	371c      	adds	r7, #28
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr
 8009ef6:	bf00      	nop
 8009ef8:	20003748 	.word	0x20003748

08009efc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009f06:	2200      	movs	r2, #0
 8009f08:	6839      	ldr	r1, [r7, #0]
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f7ff ffaa 	bl	8009e64 <FATFS_LinkDriverEx>
 8009f10:	4603      	mov	r3, r0
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3708      	adds	r7, #8
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
	...

08009f1c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	4603      	mov	r3, r0
 8009f24:	6039      	str	r1, [r7, #0]
 8009f26:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009f28:	88fb      	ldrh	r3, [r7, #6]
 8009f2a:	2b7f      	cmp	r3, #127	; 0x7f
 8009f2c:	d802      	bhi.n	8009f34 <ff_convert+0x18>
		c = chr;
 8009f2e:	88fb      	ldrh	r3, [r7, #6]
 8009f30:	81fb      	strh	r3, [r7, #14]
 8009f32:	e025      	b.n	8009f80 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00b      	beq.n	8009f52 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009f3a:	88fb      	ldrh	r3, [r7, #6]
 8009f3c:	2bff      	cmp	r3, #255	; 0xff
 8009f3e:	d805      	bhi.n	8009f4c <ff_convert+0x30>
 8009f40:	88fb      	ldrh	r3, [r7, #6]
 8009f42:	3b80      	subs	r3, #128	; 0x80
 8009f44:	4a12      	ldr	r2, [pc, #72]	; (8009f90 <ff_convert+0x74>)
 8009f46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f4a:	e000      	b.n	8009f4e <ff_convert+0x32>
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	81fb      	strh	r3, [r7, #14]
 8009f50:	e016      	b.n	8009f80 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009f52:	2300      	movs	r3, #0
 8009f54:	81fb      	strh	r3, [r7, #14]
 8009f56:	e009      	b.n	8009f6c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009f58:	89fb      	ldrh	r3, [r7, #14]
 8009f5a:	4a0d      	ldr	r2, [pc, #52]	; (8009f90 <ff_convert+0x74>)
 8009f5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f60:	88fa      	ldrh	r2, [r7, #6]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d006      	beq.n	8009f74 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009f66:	89fb      	ldrh	r3, [r7, #14]
 8009f68:	3301      	adds	r3, #1
 8009f6a:	81fb      	strh	r3, [r7, #14]
 8009f6c:	89fb      	ldrh	r3, [r7, #14]
 8009f6e:	2b7f      	cmp	r3, #127	; 0x7f
 8009f70:	d9f2      	bls.n	8009f58 <ff_convert+0x3c>
 8009f72:	e000      	b.n	8009f76 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009f74:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009f76:	89fb      	ldrh	r3, [r7, #14]
 8009f78:	3380      	adds	r3, #128	; 0x80
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009f80:	89fb      	ldrh	r3, [r7, #14]
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3714      	adds	r7, #20
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	0800fb7c 	.word	0x0800fb7c

08009f94 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b087      	sub	sp, #28
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009f9e:	88fb      	ldrh	r3, [r7, #6]
 8009fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fa4:	d201      	bcs.n	8009faa <ff_wtoupper+0x16>
 8009fa6:	4b3e      	ldr	r3, [pc, #248]	; (800a0a0 <ff_wtoupper+0x10c>)
 8009fa8:	e000      	b.n	8009fac <ff_wtoupper+0x18>
 8009faa:	4b3e      	ldr	r3, [pc, #248]	; (800a0a4 <ff_wtoupper+0x110>)
 8009fac:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	1c9a      	adds	r2, r3, #2
 8009fb2:	617a      	str	r2, [r7, #20]
 8009fb4:	881b      	ldrh	r3, [r3, #0]
 8009fb6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009fb8:	8a7b      	ldrh	r3, [r7, #18]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d068      	beq.n	800a090 <ff_wtoupper+0xfc>
 8009fbe:	88fa      	ldrh	r2, [r7, #6]
 8009fc0:	8a7b      	ldrh	r3, [r7, #18]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d364      	bcc.n	800a090 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	1c9a      	adds	r2, r3, #2
 8009fca:	617a      	str	r2, [r7, #20]
 8009fcc:	881b      	ldrh	r3, [r3, #0]
 8009fce:	823b      	strh	r3, [r7, #16]
 8009fd0:	8a3b      	ldrh	r3, [r7, #16]
 8009fd2:	0a1b      	lsrs	r3, r3, #8
 8009fd4:	81fb      	strh	r3, [r7, #14]
 8009fd6:	8a3b      	ldrh	r3, [r7, #16]
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009fdc:	88fa      	ldrh	r2, [r7, #6]
 8009fde:	8a79      	ldrh	r1, [r7, #18]
 8009fe0:	8a3b      	ldrh	r3, [r7, #16]
 8009fe2:	440b      	add	r3, r1
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	da49      	bge.n	800a07c <ff_wtoupper+0xe8>
			switch (cmd) {
 8009fe8:	89fb      	ldrh	r3, [r7, #14]
 8009fea:	2b08      	cmp	r3, #8
 8009fec:	d84f      	bhi.n	800a08e <ff_wtoupper+0xfa>
 8009fee:	a201      	add	r2, pc, #4	; (adr r2, 8009ff4 <ff_wtoupper+0x60>)
 8009ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff4:	0800a019 	.word	0x0800a019
 8009ff8:	0800a02b 	.word	0x0800a02b
 8009ffc:	0800a041 	.word	0x0800a041
 800a000:	0800a049 	.word	0x0800a049
 800a004:	0800a051 	.word	0x0800a051
 800a008:	0800a059 	.word	0x0800a059
 800a00c:	0800a061 	.word	0x0800a061
 800a010:	0800a069 	.word	0x0800a069
 800a014:	0800a071 	.word	0x0800a071
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a018:	88fa      	ldrh	r2, [r7, #6]
 800a01a:	8a7b      	ldrh	r3, [r7, #18]
 800a01c:	1ad3      	subs	r3, r2, r3
 800a01e:	005b      	lsls	r3, r3, #1
 800a020:	697a      	ldr	r2, [r7, #20]
 800a022:	4413      	add	r3, r2
 800a024:	881b      	ldrh	r3, [r3, #0]
 800a026:	80fb      	strh	r3, [r7, #6]
 800a028:	e027      	b.n	800a07a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a02a:	88fa      	ldrh	r2, [r7, #6]
 800a02c:	8a7b      	ldrh	r3, [r7, #18]
 800a02e:	1ad3      	subs	r3, r2, r3
 800a030:	b29b      	uxth	r3, r3
 800a032:	f003 0301 	and.w	r3, r3, #1
 800a036:	b29b      	uxth	r3, r3
 800a038:	88fa      	ldrh	r2, [r7, #6]
 800a03a:	1ad3      	subs	r3, r2, r3
 800a03c:	80fb      	strh	r3, [r7, #6]
 800a03e:	e01c      	b.n	800a07a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a040:	88fb      	ldrh	r3, [r7, #6]
 800a042:	3b10      	subs	r3, #16
 800a044:	80fb      	strh	r3, [r7, #6]
 800a046:	e018      	b.n	800a07a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a048:	88fb      	ldrh	r3, [r7, #6]
 800a04a:	3b20      	subs	r3, #32
 800a04c:	80fb      	strh	r3, [r7, #6]
 800a04e:	e014      	b.n	800a07a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a050:	88fb      	ldrh	r3, [r7, #6]
 800a052:	3b30      	subs	r3, #48	; 0x30
 800a054:	80fb      	strh	r3, [r7, #6]
 800a056:	e010      	b.n	800a07a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a058:	88fb      	ldrh	r3, [r7, #6]
 800a05a:	3b1a      	subs	r3, #26
 800a05c:	80fb      	strh	r3, [r7, #6]
 800a05e:	e00c      	b.n	800a07a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a060:	88fb      	ldrh	r3, [r7, #6]
 800a062:	3308      	adds	r3, #8
 800a064:	80fb      	strh	r3, [r7, #6]
 800a066:	e008      	b.n	800a07a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a068:	88fb      	ldrh	r3, [r7, #6]
 800a06a:	3b50      	subs	r3, #80	; 0x50
 800a06c:	80fb      	strh	r3, [r7, #6]
 800a06e:	e004      	b.n	800a07a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a070:	88fb      	ldrh	r3, [r7, #6]
 800a072:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800a076:	80fb      	strh	r3, [r7, #6]
 800a078:	bf00      	nop
			}
			break;
 800a07a:	e008      	b.n	800a08e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800a07c:	89fb      	ldrh	r3, [r7, #14]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d195      	bne.n	8009fae <ff_wtoupper+0x1a>
 800a082:	8a3b      	ldrh	r3, [r7, #16]
 800a084:	005b      	lsls	r3, r3, #1
 800a086:	697a      	ldr	r2, [r7, #20]
 800a088:	4413      	add	r3, r2
 800a08a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a08c:	e78f      	b.n	8009fae <ff_wtoupper+0x1a>
			break;
 800a08e:	bf00      	nop
	}

	return chr;
 800a090:	88fb      	ldrh	r3, [r7, #6]
}
 800a092:	4618      	mov	r0, r3
 800a094:	371c      	adds	r7, #28
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr
 800a09e:	bf00      	nop
 800a0a0:	0800fc7c 	.word	0x0800fc7c
 800a0a4:	0800fe70 	.word	0x0800fe70

0800a0a8 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 800a0b0:	4b22      	ldr	r3, [pc, #136]	; (800a13c <WIZCHIP_READ+0x94>)
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	4798      	blx	r3
   WIZCHIP.CS._select();
 800a0b6:	4b21      	ldr	r3, [pc, #132]	; (800a13c <WIZCHIP_READ+0x94>)
 800a0b8:	695b      	ldr	r3, [r3, #20]
 800a0ba:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800a0bc:	4b1f      	ldr	r3, [pc, #124]	; (800a13c <WIZCHIP_READ+0x94>)
 800a0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d003      	beq.n	800a0cc <WIZCHIP_READ+0x24>
 800a0c4:	4b1d      	ldr	r3, [pc, #116]	; (800a13c <WIZCHIP_READ+0x94>)
 800a0c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d114      	bne.n	800a0f6 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800a0cc:	4b1b      	ldr	r3, [pc, #108]	; (800a13c <WIZCHIP_READ+0x94>)
 800a0ce:	6a1b      	ldr	r3, [r3, #32]
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	0c12      	lsrs	r2, r2, #16
 800a0d4:	b2d2      	uxtb	r2, r2
 800a0d6:	4610      	mov	r0, r2
 800a0d8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800a0da:	4b18      	ldr	r3, [pc, #96]	; (800a13c <WIZCHIP_READ+0x94>)
 800a0dc:	6a1b      	ldr	r3, [r3, #32]
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	0a12      	lsrs	r2, r2, #8
 800a0e2:	b2d2      	uxtb	r2, r2
 800a0e4:	4610      	mov	r0, r2
 800a0e6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800a0e8:	4b14      	ldr	r3, [pc, #80]	; (800a13c <WIZCHIP_READ+0x94>)
 800a0ea:	6a1b      	ldr	r3, [r3, #32]
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	b2d2      	uxtb	r2, r2
 800a0f0:	4610      	mov	r0, r2
 800a0f2:	4798      	blx	r3
 800a0f4:	e011      	b.n	800a11a <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	0c1b      	lsrs	r3, r3, #16
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	0a1b      	lsrs	r3, r3, #8
 800a102:	b2db      	uxtb	r3, r3
 800a104:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800a10c:	4b0b      	ldr	r3, [pc, #44]	; (800a13c <WIZCHIP_READ+0x94>)
 800a10e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a110:	f107 020c 	add.w	r2, r7, #12
 800a114:	2103      	movs	r1, #3
 800a116:	4610      	mov	r0, r2
 800a118:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800a11a:	4b08      	ldr	r3, [pc, #32]	; (800a13c <WIZCHIP_READ+0x94>)
 800a11c:	69db      	ldr	r3, [r3, #28]
 800a11e:	4798      	blx	r3
 800a120:	4603      	mov	r3, r0
 800a122:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 800a124:	4b05      	ldr	r3, [pc, #20]	; (800a13c <WIZCHIP_READ+0x94>)
 800a126:	699b      	ldr	r3, [r3, #24]
 800a128:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800a12a:	4b04      	ldr	r3, [pc, #16]	; (800a13c <WIZCHIP_READ+0x94>)
 800a12c:	691b      	ldr	r3, [r3, #16]
 800a12e:	4798      	blx	r3
   return ret;
 800a130:	7bfb      	ldrb	r3, [r7, #15]
}
 800a132:	4618      	mov	r0, r3
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	20000080 	.word	0x20000080

0800a140 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	460b      	mov	r3, r1
 800a14a:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 800a14c:	4b22      	ldr	r3, [pc, #136]	; (800a1d8 <WIZCHIP_WRITE+0x98>)
 800a14e:	68db      	ldr	r3, [r3, #12]
 800a150:	4798      	blx	r3
   WIZCHIP.CS._select();
 800a152:	4b21      	ldr	r3, [pc, #132]	; (800a1d8 <WIZCHIP_WRITE+0x98>)
 800a154:	695b      	ldr	r3, [r3, #20]
 800a156:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f043 0304 	orr.w	r3, r3, #4
 800a15e:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800a160:	4b1d      	ldr	r3, [pc, #116]	; (800a1d8 <WIZCHIP_WRITE+0x98>)
 800a162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a164:	2b00      	cmp	r3, #0
 800a166:	d119      	bne.n	800a19c <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800a168:	4b1b      	ldr	r3, [pc, #108]	; (800a1d8 <WIZCHIP_WRITE+0x98>)
 800a16a:	6a1b      	ldr	r3, [r3, #32]
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	0c12      	lsrs	r2, r2, #16
 800a170:	b2d2      	uxtb	r2, r2
 800a172:	4610      	mov	r0, r2
 800a174:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800a176:	4b18      	ldr	r3, [pc, #96]	; (800a1d8 <WIZCHIP_WRITE+0x98>)
 800a178:	6a1b      	ldr	r3, [r3, #32]
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	0a12      	lsrs	r2, r2, #8
 800a17e:	b2d2      	uxtb	r2, r2
 800a180:	4610      	mov	r0, r2
 800a182:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800a184:	4b14      	ldr	r3, [pc, #80]	; (800a1d8 <WIZCHIP_WRITE+0x98>)
 800a186:	6a1b      	ldr	r3, [r3, #32]
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	b2d2      	uxtb	r2, r2
 800a18c:	4610      	mov	r0, r2
 800a18e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 800a190:	4b11      	ldr	r3, [pc, #68]	; (800a1d8 <WIZCHIP_WRITE+0x98>)
 800a192:	6a1b      	ldr	r3, [r3, #32]
 800a194:	78fa      	ldrb	r2, [r7, #3]
 800a196:	4610      	mov	r0, r2
 800a198:	4798      	blx	r3
 800a19a:	e013      	b.n	800a1c4 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	0c1b      	lsrs	r3, r3, #16
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	0a1b      	lsrs	r3, r3, #8
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800a1b2:	78fb      	ldrb	r3, [r7, #3]
 800a1b4:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800a1b6:	4b08      	ldr	r3, [pc, #32]	; (800a1d8 <WIZCHIP_WRITE+0x98>)
 800a1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ba:	f107 020c 	add.w	r2, r7, #12
 800a1be:	2104      	movs	r1, #4
 800a1c0:	4610      	mov	r0, r2
 800a1c2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800a1c4:	4b04      	ldr	r3, [pc, #16]	; (800a1d8 <WIZCHIP_WRITE+0x98>)
 800a1c6:	699b      	ldr	r3, [r3, #24]
 800a1c8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800a1ca:	4b03      	ldr	r3, [pc, #12]	; (800a1d8 <WIZCHIP_WRITE+0x98>)
 800a1cc:	691b      	ldr	r3, [r3, #16]
 800a1ce:	4798      	blx	r3
}
 800a1d0:	bf00      	nop
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	20000080 	.word	0x20000080

0800a1dc <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800a1dc:	b590      	push	{r4, r7, lr}
 800a1de:	b087      	sub	sp, #28
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	4613      	mov	r3, r2
 800a1e8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800a1ea:	4b2b      	ldr	r3, [pc, #172]	; (800a298 <WIZCHIP_READ_BUF+0xbc>)
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	4798      	blx	r3
   WIZCHIP.CS._select();
 800a1f0:	4b29      	ldr	r3, [pc, #164]	; (800a298 <WIZCHIP_READ_BUF+0xbc>)
 800a1f2:	695b      	ldr	r3, [r3, #20]
 800a1f4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800a1f6:	4b28      	ldr	r3, [pc, #160]	; (800a298 <WIZCHIP_READ_BUF+0xbc>)
 800a1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d003      	beq.n	800a206 <WIZCHIP_READ_BUF+0x2a>
 800a1fe:	4b26      	ldr	r3, [pc, #152]	; (800a298 <WIZCHIP_READ_BUF+0xbc>)
 800a200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a202:	2b00      	cmp	r3, #0
 800a204:	d126      	bne.n	800a254 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800a206:	4b24      	ldr	r3, [pc, #144]	; (800a298 <WIZCHIP_READ_BUF+0xbc>)
 800a208:	6a1b      	ldr	r3, [r3, #32]
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	0c12      	lsrs	r2, r2, #16
 800a20e:	b2d2      	uxtb	r2, r2
 800a210:	4610      	mov	r0, r2
 800a212:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800a214:	4b20      	ldr	r3, [pc, #128]	; (800a298 <WIZCHIP_READ_BUF+0xbc>)
 800a216:	6a1b      	ldr	r3, [r3, #32]
 800a218:	68fa      	ldr	r2, [r7, #12]
 800a21a:	0a12      	lsrs	r2, r2, #8
 800a21c:	b2d2      	uxtb	r2, r2
 800a21e:	4610      	mov	r0, r2
 800a220:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800a222:	4b1d      	ldr	r3, [pc, #116]	; (800a298 <WIZCHIP_READ_BUF+0xbc>)
 800a224:	6a1b      	ldr	r3, [r3, #32]
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	b2d2      	uxtb	r2, r2
 800a22a:	4610      	mov	r0, r2
 800a22c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800a22e:	2300      	movs	r3, #0
 800a230:	82fb      	strh	r3, [r7, #22]
 800a232:	e00a      	b.n	800a24a <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 800a234:	4b18      	ldr	r3, [pc, #96]	; (800a298 <WIZCHIP_READ_BUF+0xbc>)
 800a236:	69db      	ldr	r3, [r3, #28]
 800a238:	8afa      	ldrh	r2, [r7, #22]
 800a23a:	68b9      	ldr	r1, [r7, #8]
 800a23c:	188c      	adds	r4, r1, r2
 800a23e:	4798      	blx	r3
 800a240:	4603      	mov	r3, r0
 800a242:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 800a244:	8afb      	ldrh	r3, [r7, #22]
 800a246:	3301      	adds	r3, #1
 800a248:	82fb      	strh	r3, [r7, #22]
 800a24a:	8afa      	ldrh	r2, [r7, #22]
 800a24c:	88fb      	ldrh	r3, [r7, #6]
 800a24e:	429a      	cmp	r2, r3
 800a250:	d3f0      	bcc.n	800a234 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800a252:	e017      	b.n	800a284 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	0c1b      	lsrs	r3, r3, #16
 800a258:	b2db      	uxtb	r3, r3
 800a25a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	0a1b      	lsrs	r3, r3, #8
 800a260:	b2db      	uxtb	r3, r3
 800a262:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	b2db      	uxtb	r3, r3
 800a268:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800a26a:	4b0b      	ldr	r3, [pc, #44]	; (800a298 <WIZCHIP_READ_BUF+0xbc>)
 800a26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a26e:	f107 0210 	add.w	r2, r7, #16
 800a272:	2103      	movs	r1, #3
 800a274:	4610      	mov	r0, r2
 800a276:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 800a278:	4b07      	ldr	r3, [pc, #28]	; (800a298 <WIZCHIP_READ_BUF+0xbc>)
 800a27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27c:	88fa      	ldrh	r2, [r7, #6]
 800a27e:	4611      	mov	r1, r2
 800a280:	68b8      	ldr	r0, [r7, #8]
 800a282:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800a284:	4b04      	ldr	r3, [pc, #16]	; (800a298 <WIZCHIP_READ_BUF+0xbc>)
 800a286:	699b      	ldr	r3, [r3, #24]
 800a288:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800a28a:	4b03      	ldr	r3, [pc, #12]	; (800a298 <WIZCHIP_READ_BUF+0xbc>)
 800a28c:	691b      	ldr	r3, [r3, #16]
 800a28e:	4798      	blx	r3
}
 800a290:	bf00      	nop
 800a292:	371c      	adds	r7, #28
 800a294:	46bd      	mov	sp, r7
 800a296:	bd90      	pop	{r4, r7, pc}
 800a298:	20000080 	.word	0x20000080

0800a29c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b086      	sub	sp, #24
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800a2aa:	4b2b      	ldr	r3, [pc, #172]	; (800a358 <WIZCHIP_WRITE_BUF+0xbc>)
 800a2ac:	68db      	ldr	r3, [r3, #12]
 800a2ae:	4798      	blx	r3
   WIZCHIP.CS._select();
 800a2b0:	4b29      	ldr	r3, [pc, #164]	; (800a358 <WIZCHIP_WRITE_BUF+0xbc>)
 800a2b2:	695b      	ldr	r3, [r3, #20]
 800a2b4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f043 0304 	orr.w	r3, r3, #4
 800a2bc:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800a2be:	4b26      	ldr	r3, [pc, #152]	; (800a358 <WIZCHIP_WRITE_BUF+0xbc>)
 800a2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d126      	bne.n	800a314 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800a2c6:	4b24      	ldr	r3, [pc, #144]	; (800a358 <WIZCHIP_WRITE_BUF+0xbc>)
 800a2c8:	6a1b      	ldr	r3, [r3, #32]
 800a2ca:	68fa      	ldr	r2, [r7, #12]
 800a2cc:	0c12      	lsrs	r2, r2, #16
 800a2ce:	b2d2      	uxtb	r2, r2
 800a2d0:	4610      	mov	r0, r2
 800a2d2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800a2d4:	4b20      	ldr	r3, [pc, #128]	; (800a358 <WIZCHIP_WRITE_BUF+0xbc>)
 800a2d6:	6a1b      	ldr	r3, [r3, #32]
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	0a12      	lsrs	r2, r2, #8
 800a2dc:	b2d2      	uxtb	r2, r2
 800a2de:	4610      	mov	r0, r2
 800a2e0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800a2e2:	4b1d      	ldr	r3, [pc, #116]	; (800a358 <WIZCHIP_WRITE_BUF+0xbc>)
 800a2e4:	6a1b      	ldr	r3, [r3, #32]
 800a2e6:	68fa      	ldr	r2, [r7, #12]
 800a2e8:	b2d2      	uxtb	r2, r2
 800a2ea:	4610      	mov	r0, r2
 800a2ec:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	82fb      	strh	r3, [r7, #22]
 800a2f2:	e00a      	b.n	800a30a <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 800a2f4:	4b18      	ldr	r3, [pc, #96]	; (800a358 <WIZCHIP_WRITE_BUF+0xbc>)
 800a2f6:	6a1b      	ldr	r3, [r3, #32]
 800a2f8:	8afa      	ldrh	r2, [r7, #22]
 800a2fa:	68b9      	ldr	r1, [r7, #8]
 800a2fc:	440a      	add	r2, r1
 800a2fe:	7812      	ldrb	r2, [r2, #0]
 800a300:	4610      	mov	r0, r2
 800a302:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800a304:	8afb      	ldrh	r3, [r7, #22]
 800a306:	3301      	adds	r3, #1
 800a308:	82fb      	strh	r3, [r7, #22]
 800a30a:	8afa      	ldrh	r2, [r7, #22]
 800a30c:	88fb      	ldrh	r3, [r7, #6]
 800a30e:	429a      	cmp	r2, r3
 800a310:	d3f0      	bcc.n	800a2f4 <WIZCHIP_WRITE_BUF+0x58>
 800a312:	e017      	b.n	800a344 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	0c1b      	lsrs	r3, r3, #16
 800a318:	b2db      	uxtb	r3, r3
 800a31a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	0a1b      	lsrs	r3, r3, #8
 800a320:	b2db      	uxtb	r3, r3
 800a322:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	b2db      	uxtb	r3, r3
 800a328:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800a32a:	4b0b      	ldr	r3, [pc, #44]	; (800a358 <WIZCHIP_WRITE_BUF+0xbc>)
 800a32c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a32e:	f107 0210 	add.w	r2, r7, #16
 800a332:	2103      	movs	r1, #3
 800a334:	4610      	mov	r0, r2
 800a336:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 800a338:	4b07      	ldr	r3, [pc, #28]	; (800a358 <WIZCHIP_WRITE_BUF+0xbc>)
 800a33a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a33c:	88fa      	ldrh	r2, [r7, #6]
 800a33e:	4611      	mov	r1, r2
 800a340:	68b8      	ldr	r0, [r7, #8]
 800a342:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800a344:	4b04      	ldr	r3, [pc, #16]	; (800a358 <WIZCHIP_WRITE_BUF+0xbc>)
 800a346:	699b      	ldr	r3, [r3, #24]
 800a348:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800a34a:	4b03      	ldr	r3, [pc, #12]	; (800a358 <WIZCHIP_WRITE_BUF+0xbc>)
 800a34c:	691b      	ldr	r3, [r3, #16]
 800a34e:	4798      	blx	r3
}
 800a350:	bf00      	nop
 800a352:	3718      	adds	r7, #24
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	20000080 	.word	0x20000080

0800a35c <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 800a35c:	b590      	push	{r4, r7, lr}
 800a35e:	b085      	sub	sp, #20
 800a360:	af00      	add	r7, sp, #0
 800a362:	4603      	mov	r3, r0
 800a364:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800a366:	2300      	movs	r3, #0
 800a368:	81fb      	strh	r3, [r7, #14]
 800a36a:	2300      	movs	r3, #0
 800a36c:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800a36e:	79fb      	ldrb	r3, [r7, #7]
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	3301      	adds	r3, #1
 800a374:	00db      	lsls	r3, r3, #3
 800a376:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7ff fe94 	bl	800a0a8 <WIZCHIP_READ>
 800a380:	4603      	mov	r3, r0
 800a382:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800a384:	89bb      	ldrh	r3, [r7, #12]
 800a386:	021b      	lsls	r3, r3, #8
 800a388:	b29c      	uxth	r4, r3
 800a38a:	79fb      	ldrb	r3, [r7, #7]
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	3301      	adds	r3, #1
 800a390:	00db      	lsls	r3, r3, #3
 800a392:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800a396:	4618      	mov	r0, r3
 800a398:	f7ff fe86 	bl	800a0a8 <WIZCHIP_READ>
 800a39c:	4603      	mov	r3, r0
 800a39e:	b29b      	uxth	r3, r3
 800a3a0:	4423      	add	r3, r4
 800a3a2:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800a3a4:	89bb      	ldrh	r3, [r7, #12]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d01a      	beq.n	800a3e0 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800a3aa:	79fb      	ldrb	r3, [r7, #7]
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	00db      	lsls	r3, r3, #3
 800a3b2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7ff fe76 	bl	800a0a8 <WIZCHIP_READ>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800a3c0:	89fb      	ldrh	r3, [r7, #14]
 800a3c2:	021b      	lsls	r3, r3, #8
 800a3c4:	b29c      	uxth	r4, r3
 800a3c6:	79fb      	ldrb	r3, [r7, #7]
 800a3c8:	009b      	lsls	r3, r3, #2
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	00db      	lsls	r3, r3, #3
 800a3ce:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7ff fe68 	bl	800a0a8 <WIZCHIP_READ>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	4423      	add	r3, r4
 800a3de:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800a3e0:	89fa      	ldrh	r2, [r7, #14]
 800a3e2:	89bb      	ldrh	r3, [r7, #12]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d1c2      	bne.n	800a36e <getSn_TX_FSR+0x12>
   return val;
 800a3e8:	89fb      	ldrh	r3, [r7, #14]
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3714      	adds	r7, #20
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd90      	pop	{r4, r7, pc}

0800a3f2 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800a3f2:	b590      	push	{r4, r7, lr}
 800a3f4:	b085      	sub	sp, #20
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	81fb      	strh	r3, [r7, #14]
 800a400:	2300      	movs	r3, #0
 800a402:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 800a404:	79fb      	ldrb	r3, [r7, #7]
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	3301      	adds	r3, #1
 800a40a:	00db      	lsls	r3, r3, #3
 800a40c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 800a410:	4618      	mov	r0, r3
 800a412:	f7ff fe49 	bl	800a0a8 <WIZCHIP_READ>
 800a416:	4603      	mov	r3, r0
 800a418:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800a41a:	89bb      	ldrh	r3, [r7, #12]
 800a41c:	021b      	lsls	r3, r3, #8
 800a41e:	b29c      	uxth	r4, r3
 800a420:	79fb      	ldrb	r3, [r7, #7]
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	3301      	adds	r3, #1
 800a426:	00db      	lsls	r3, r3, #3
 800a428:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7ff fe3b 	bl	800a0a8 <WIZCHIP_READ>
 800a432:	4603      	mov	r3, r0
 800a434:	b29b      	uxth	r3, r3
 800a436:	4423      	add	r3, r4
 800a438:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800a43a:	89bb      	ldrh	r3, [r7, #12]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d01a      	beq.n	800a476 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 800a440:	79fb      	ldrb	r3, [r7, #7]
 800a442:	009b      	lsls	r3, r3, #2
 800a444:	3301      	adds	r3, #1
 800a446:	00db      	lsls	r3, r3, #3
 800a448:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 800a44c:	4618      	mov	r0, r3
 800a44e:	f7ff fe2b 	bl	800a0a8 <WIZCHIP_READ>
 800a452:	4603      	mov	r3, r0
 800a454:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800a456:	89fb      	ldrh	r3, [r7, #14]
 800a458:	021b      	lsls	r3, r3, #8
 800a45a:	b29c      	uxth	r4, r3
 800a45c:	79fb      	ldrb	r3, [r7, #7]
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	3301      	adds	r3, #1
 800a462:	00db      	lsls	r3, r3, #3
 800a464:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800a468:	4618      	mov	r0, r3
 800a46a:	f7ff fe1d 	bl	800a0a8 <WIZCHIP_READ>
 800a46e:	4603      	mov	r3, r0
 800a470:	b29b      	uxth	r3, r3
 800a472:	4423      	add	r3, r4
 800a474:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800a476:	89fa      	ldrh	r2, [r7, #14]
 800a478:	89bb      	ldrh	r3, [r7, #12]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d1c2      	bne.n	800a404 <getSn_RX_RSR+0x12>
   return val;
 800a47e:	89fb      	ldrh	r3, [r7, #14]
}
 800a480:	4618      	mov	r0, r3
 800a482:	3714      	adds	r7, #20
 800a484:	46bd      	mov	sp, r7
 800a486:	bd90      	pop	{r4, r7, pc}

0800a488 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800a488:	b590      	push	{r4, r7, lr}
 800a48a:	b085      	sub	sp, #20
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	4603      	mov	r3, r0
 800a490:	6039      	str	r1, [r7, #0]
 800a492:	71fb      	strb	r3, [r7, #7]
 800a494:	4613      	mov	r3, r2
 800a496:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800a498:	2300      	movs	r3, #0
 800a49a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800a49c:	2300      	movs	r3, #0
 800a49e:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 800a4a0:	88bb      	ldrh	r3, [r7, #4]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d048      	beq.n	800a538 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 800a4a6:	79fb      	ldrb	r3, [r7, #7]
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	00db      	lsls	r3, r3, #3
 800a4ae:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7ff fdf8 	bl	800a0a8 <WIZCHIP_READ>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	021b      	lsls	r3, r3, #8
 800a4be:	b29c      	uxth	r4, r3
 800a4c0:	79fb      	ldrb	r3, [r7, #7]
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	00db      	lsls	r3, r3, #3
 800a4c8:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7ff fdeb 	bl	800a0a8 <WIZCHIP_READ>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	4423      	add	r3, r4
 800a4d8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800a4da:	89fb      	ldrh	r3, [r7, #14]
 800a4dc:	021b      	lsls	r3, r3, #8
 800a4de:	79fa      	ldrb	r2, [r7, #7]
 800a4e0:	0092      	lsls	r2, r2, #2
 800a4e2:	3202      	adds	r2, #2
 800a4e4:	00d2      	lsls	r2, r2, #3
 800a4e6:	4413      	add	r3, r2
 800a4e8:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 800a4ea:	88bb      	ldrh	r3, [r7, #4]
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	6839      	ldr	r1, [r7, #0]
 800a4f0:	68b8      	ldr	r0, [r7, #8]
 800a4f2:	f7ff fed3 	bl	800a29c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800a4f6:	89fa      	ldrh	r2, [r7, #14]
 800a4f8:	88bb      	ldrh	r3, [r7, #4]
 800a4fa:	4413      	add	r3, r2
 800a4fc:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800a4fe:	79fb      	ldrb	r3, [r7, #7]
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	3301      	adds	r3, #1
 800a504:	00db      	lsls	r3, r3, #3
 800a506:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800a50a:	461a      	mov	r2, r3
 800a50c:	89fb      	ldrh	r3, [r7, #14]
 800a50e:	0a1b      	lsrs	r3, r3, #8
 800a510:	b29b      	uxth	r3, r3
 800a512:	b2db      	uxtb	r3, r3
 800a514:	4619      	mov	r1, r3
 800a516:	4610      	mov	r0, r2
 800a518:	f7ff fe12 	bl	800a140 <WIZCHIP_WRITE>
 800a51c:	79fb      	ldrb	r3, [r7, #7]
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	3301      	adds	r3, #1
 800a522:	00db      	lsls	r3, r3, #3
 800a524:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800a528:	461a      	mov	r2, r3
 800a52a:	89fb      	ldrh	r3, [r7, #14]
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	4619      	mov	r1, r3
 800a530:	4610      	mov	r0, r2
 800a532:	f7ff fe05 	bl	800a140 <WIZCHIP_WRITE>
 800a536:	e000      	b.n	800a53a <wiz_send_data+0xb2>
   if(len == 0)  return;
 800a538:	bf00      	nop
}
 800a53a:	3714      	adds	r7, #20
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd90      	pop	{r4, r7, pc}

0800a540 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800a540:	b590      	push	{r4, r7, lr}
 800a542:	b085      	sub	sp, #20
 800a544:	af00      	add	r7, sp, #0
 800a546:	4603      	mov	r3, r0
 800a548:	6039      	str	r1, [r7, #0]
 800a54a:	71fb      	strb	r3, [r7, #7]
 800a54c:	4613      	mov	r3, r2
 800a54e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800a550:	2300      	movs	r3, #0
 800a552:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800a554:	2300      	movs	r3, #0
 800a556:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 800a558:	88bb      	ldrh	r3, [r7, #4]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d048      	beq.n	800a5f0 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 800a55e:	79fb      	ldrb	r3, [r7, #7]
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	3301      	adds	r3, #1
 800a564:	00db      	lsls	r3, r3, #3
 800a566:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7ff fd9c 	bl	800a0a8 <WIZCHIP_READ>
 800a570:	4603      	mov	r3, r0
 800a572:	b29b      	uxth	r3, r3
 800a574:	021b      	lsls	r3, r3, #8
 800a576:	b29c      	uxth	r4, r3
 800a578:	79fb      	ldrb	r3, [r7, #7]
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	3301      	adds	r3, #1
 800a57e:	00db      	lsls	r3, r3, #3
 800a580:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800a584:	4618      	mov	r0, r3
 800a586:	f7ff fd8f 	bl	800a0a8 <WIZCHIP_READ>
 800a58a:	4603      	mov	r3, r0
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	4423      	add	r3, r4
 800a590:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800a592:	89fb      	ldrh	r3, [r7, #14]
 800a594:	021b      	lsls	r3, r3, #8
 800a596:	79fa      	ldrb	r2, [r7, #7]
 800a598:	0092      	lsls	r2, r2, #2
 800a59a:	3203      	adds	r2, #3
 800a59c:	00d2      	lsls	r2, r2, #3
 800a59e:	4413      	add	r3, r2
 800a5a0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800a5a2:	88bb      	ldrh	r3, [r7, #4]
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	6839      	ldr	r1, [r7, #0]
 800a5a8:	68b8      	ldr	r0, [r7, #8]
 800a5aa:	f7ff fe17 	bl	800a1dc <WIZCHIP_READ_BUF>
   ptr += len;
 800a5ae:	89fa      	ldrh	r2, [r7, #14]
 800a5b0:	88bb      	ldrh	r3, [r7, #4]
 800a5b2:	4413      	add	r3, r2
 800a5b4:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800a5b6:	79fb      	ldrb	r3, [r7, #7]
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	00db      	lsls	r3, r3, #3
 800a5be:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	89fb      	ldrh	r3, [r7, #14]
 800a5c6:	0a1b      	lsrs	r3, r3, #8
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	4610      	mov	r0, r2
 800a5d0:	f7ff fdb6 	bl	800a140 <WIZCHIP_WRITE>
 800a5d4:	79fb      	ldrb	r3, [r7, #7]
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	3301      	adds	r3, #1
 800a5da:	00db      	lsls	r3, r3, #3
 800a5dc:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	89fb      	ldrh	r3, [r7, #14]
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	4610      	mov	r0, r2
 800a5ea:	f7ff fda9 	bl	800a140 <WIZCHIP_WRITE>
 800a5ee:	e000      	b.n	800a5f2 <wiz_recv_data+0xb2>
   if(len == 0) return;
 800a5f0:	bf00      	nop
}
 800a5f2:	3714      	adds	r7, #20
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd90      	pop	{r4, r7, pc}

0800a5f8 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 800a5f8:	b590      	push	{r4, r7, lr}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	4603      	mov	r3, r0
 800a600:	460a      	mov	r2, r1
 800a602:	71fb      	strb	r3, [r7, #7]
 800a604:	4613      	mov	r3, r2
 800a606:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800a608:	2300      	movs	r3, #0
 800a60a:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 800a60c:	79fb      	ldrb	r3, [r7, #7]
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	3301      	adds	r3, #1
 800a612:	00db      	lsls	r3, r3, #3
 800a614:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800a618:	4618      	mov	r0, r3
 800a61a:	f7ff fd45 	bl	800a0a8 <WIZCHIP_READ>
 800a61e:	4603      	mov	r3, r0
 800a620:	b29b      	uxth	r3, r3
 800a622:	021b      	lsls	r3, r3, #8
 800a624:	b29c      	uxth	r4, r3
 800a626:	79fb      	ldrb	r3, [r7, #7]
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	3301      	adds	r3, #1
 800a62c:	00db      	lsls	r3, r3, #3
 800a62e:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800a632:	4618      	mov	r0, r3
 800a634:	f7ff fd38 	bl	800a0a8 <WIZCHIP_READ>
 800a638:	4603      	mov	r3, r0
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	4423      	add	r3, r4
 800a63e:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 800a640:	89fa      	ldrh	r2, [r7, #14]
 800a642:	88bb      	ldrh	r3, [r7, #4]
 800a644:	4413      	add	r3, r2
 800a646:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 800a648:	79fb      	ldrb	r3, [r7, #7]
 800a64a:	009b      	lsls	r3, r3, #2
 800a64c:	3301      	adds	r3, #1
 800a64e:	00db      	lsls	r3, r3, #3
 800a650:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800a654:	461a      	mov	r2, r3
 800a656:	89fb      	ldrh	r3, [r7, #14]
 800a658:	0a1b      	lsrs	r3, r3, #8
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	4619      	mov	r1, r3
 800a660:	4610      	mov	r0, r2
 800a662:	f7ff fd6d 	bl	800a140 <WIZCHIP_WRITE>
 800a666:	79fb      	ldrb	r3, [r7, #7]
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	3301      	adds	r3, #1
 800a66c:	00db      	lsls	r3, r3, #3
 800a66e:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800a672:	461a      	mov	r2, r3
 800a674:	89fb      	ldrh	r3, [r7, #14]
 800a676:	b2db      	uxtb	r3, r3
 800a678:	4619      	mov	r1, r3
 800a67a:	4610      	mov	r0, r2
 800a67c:	f7ff fd60 	bl	800a140 <WIZCHIP_WRITE>
}
 800a680:	bf00      	nop
 800a682:	3714      	adds	r7, #20
 800a684:	46bd      	mov	sp, r7
 800a686:	bd90      	pop	{r4, r7, pc}

0800a688 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 800a688:	b590      	push	{r4, r7, lr}
 800a68a:	b085      	sub	sp, #20
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	4604      	mov	r4, r0
 800a690:	4608      	mov	r0, r1
 800a692:	4611      	mov	r1, r2
 800a694:	461a      	mov	r2, r3
 800a696:	4623      	mov	r3, r4
 800a698:	71fb      	strb	r3, [r7, #7]
 800a69a:	4603      	mov	r3, r0
 800a69c:	71bb      	strb	r3, [r7, #6]
 800a69e:	460b      	mov	r3, r1
 800a6a0:	80bb      	strh	r3, [r7, #4]
 800a6a2:	4613      	mov	r3, r2
 800a6a4:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800a6a6:	79fb      	ldrb	r3, [r7, #7]
 800a6a8:	2b08      	cmp	r3, #8
 800a6aa:	d902      	bls.n	800a6b2 <socket+0x2a>
 800a6ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a6b0:	e0f2      	b.n	800a898 <socket+0x210>
	switch(protocol)
 800a6b2:	79bb      	ldrb	r3, [r7, #6]
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d005      	beq.n	800a6c4 <socket+0x3c>
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	dd11      	ble.n	800a6e0 <socket+0x58>
 800a6bc:	3b02      	subs	r3, #2
 800a6be:	2b02      	cmp	r3, #2
 800a6c0:	d80e      	bhi.n	800a6e0 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800a6c2:	e011      	b.n	800a6e8 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 800a6c4:	f107 030c 	add.w	r3, r7, #12
 800a6c8:	2204      	movs	r2, #4
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800a6d0:	f7ff fd84 	bl	800a1dc <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d105      	bne.n	800a6e6 <socket+0x5e>
 800a6da:	f06f 0302 	mvn.w	r3, #2
 800a6de:	e0db      	b.n	800a898 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 800a6e0:	f06f 0304 	mvn.w	r3, #4
 800a6e4:	e0d8      	b.n	800a898 <socket+0x210>
	    break;
 800a6e6:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800a6e8:	78fb      	ldrb	r3, [r7, #3]
 800a6ea:	f003 0304 	and.w	r3, r3, #4
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d002      	beq.n	800a6f8 <socket+0x70>
 800a6f2:	f06f 0305 	mvn.w	r3, #5
 800a6f6:	e0cf      	b.n	800a898 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 800a6f8:	78fb      	ldrb	r3, [r7, #3]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d025      	beq.n	800a74a <socket+0xc2>
	{
   	switch(protocol)
 800a6fe:	79bb      	ldrb	r3, [r7, #6]
 800a700:	2b01      	cmp	r3, #1
 800a702:	d002      	beq.n	800a70a <socket+0x82>
 800a704:	2b02      	cmp	r3, #2
 800a706:	d008      	beq.n	800a71a <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800a708:	e024      	b.n	800a754 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800a70a:	78fb      	ldrb	r3, [r7, #3]
 800a70c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800a710:	2b00      	cmp	r3, #0
 800a712:	d11c      	bne.n	800a74e <socket+0xc6>
 800a714:	f06f 0305 	mvn.w	r3, #5
 800a718:	e0be      	b.n	800a898 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 800a71a:	78fb      	ldrb	r3, [r7, #3]
 800a71c:	f003 0320 	and.w	r3, r3, #32
 800a720:	2b00      	cmp	r3, #0
 800a722:	d006      	beq.n	800a732 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800a724:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	db02      	blt.n	800a732 <socket+0xaa>
 800a72c:	f06f 0305 	mvn.w	r3, #5
 800a730:	e0b2      	b.n	800a898 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 800a732:	78fb      	ldrb	r3, [r7, #3]
 800a734:	f003 0310 	and.w	r3, r3, #16
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d00a      	beq.n	800a752 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 800a73c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a740:	2b00      	cmp	r3, #0
 800a742:	db06      	blt.n	800a752 <socket+0xca>
 800a744:	f06f 0305 	mvn.w	r3, #5
 800a748:	e0a6      	b.n	800a898 <socket+0x210>
   	}
   }
 800a74a:	bf00      	nop
 800a74c:	e002      	b.n	800a754 <socket+0xcc>
   	      break;
 800a74e:	bf00      	nop
 800a750:	e000      	b.n	800a754 <socket+0xcc>
   	      break;
 800a752:	bf00      	nop
	close(sn);
 800a754:	79fb      	ldrb	r3, [r7, #7]
 800a756:	4618      	mov	r0, r3
 800a758:	f000 f8ac 	bl	800a8b4 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 800a75c:	79fb      	ldrb	r3, [r7, #7]
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	3301      	adds	r3, #1
 800a762:	00db      	lsls	r3, r3, #3
 800a764:	4618      	mov	r0, r3
 800a766:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a76a:	f023 030f 	bic.w	r3, r3, #15
 800a76e:	b25a      	sxtb	r2, r3
 800a770:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a774:	4313      	orrs	r3, r2
 800a776:	b25b      	sxtb	r3, r3
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	4619      	mov	r1, r3
 800a77c:	f7ff fce0 	bl	800a140 <WIZCHIP_WRITE>
    #endif
	if(!port)
 800a780:	88bb      	ldrh	r3, [r7, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d110      	bne.n	800a7a8 <socket+0x120>
	{
	   port = sock_any_port++;
 800a786:	4b46      	ldr	r3, [pc, #280]	; (800a8a0 <socket+0x218>)
 800a788:	881b      	ldrh	r3, [r3, #0]
 800a78a:	1c5a      	adds	r2, r3, #1
 800a78c:	b291      	uxth	r1, r2
 800a78e:	4a44      	ldr	r2, [pc, #272]	; (800a8a0 <socket+0x218>)
 800a790:	8011      	strh	r1, [r2, #0]
 800a792:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 800a794:	4b42      	ldr	r3, [pc, #264]	; (800a8a0 <socket+0x218>)
 800a796:	881b      	ldrh	r3, [r3, #0]
 800a798:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d103      	bne.n	800a7a8 <socket+0x120>
 800a7a0:	4b3f      	ldr	r3, [pc, #252]	; (800a8a0 <socket+0x218>)
 800a7a2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800a7a6:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800a7a8:	79fb      	ldrb	r3, [r7, #7]
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	00db      	lsls	r3, r3, #3
 800a7b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	88bb      	ldrh	r3, [r7, #4]
 800a7b8:	0a1b      	lsrs	r3, r3, #8
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	4619      	mov	r1, r3
 800a7c0:	4610      	mov	r0, r2
 800a7c2:	f7ff fcbd 	bl	800a140 <WIZCHIP_WRITE>
 800a7c6:	79fb      	ldrb	r3, [r7, #7]
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	00db      	lsls	r3, r3, #3
 800a7ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	88bb      	ldrh	r3, [r7, #4]
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	4619      	mov	r1, r3
 800a7da:	4610      	mov	r0, r2
 800a7dc:	f7ff fcb0 	bl	800a140 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 800a7e0:	79fb      	ldrb	r3, [r7, #7]
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	00db      	lsls	r3, r3, #3
 800a7e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a7ec:	2101      	movs	r1, #1
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7ff fca6 	bl	800a140 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800a7f4:	bf00      	nop
 800a7f6:	79fb      	ldrb	r3, [r7, #7]
 800a7f8:	009b      	lsls	r3, r3, #2
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	00db      	lsls	r3, r3, #3
 800a7fe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a802:	4618      	mov	r0, r3
 800a804:	f7ff fc50 	bl	800a0a8 <WIZCHIP_READ>
 800a808:	4603      	mov	r3, r0
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d1f3      	bne.n	800a7f6 <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800a80e:	79fb      	ldrb	r3, [r7, #7]
 800a810:	2201      	movs	r2, #1
 800a812:	fa02 f303 	lsl.w	r3, r2, r3
 800a816:	b21b      	sxth	r3, r3
 800a818:	43db      	mvns	r3, r3
 800a81a:	b21a      	sxth	r2, r3
 800a81c:	4b21      	ldr	r3, [pc, #132]	; (800a8a4 <socket+0x21c>)
 800a81e:	881b      	ldrh	r3, [r3, #0]
 800a820:	b21b      	sxth	r3, r3
 800a822:	4013      	ands	r3, r2
 800a824:	b21b      	sxth	r3, r3
 800a826:	b29a      	uxth	r2, r3
 800a828:	4b1e      	ldr	r3, [pc, #120]	; (800a8a4 <socket+0x21c>)
 800a82a:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800a82c:	78fb      	ldrb	r3, [r7, #3]
 800a82e:	f003 0201 	and.w	r2, r3, #1
 800a832:	79fb      	ldrb	r3, [r7, #7]
 800a834:	fa02 f303 	lsl.w	r3, r2, r3
 800a838:	b21a      	sxth	r2, r3
 800a83a:	4b1a      	ldr	r3, [pc, #104]	; (800a8a4 <socket+0x21c>)
 800a83c:	881b      	ldrh	r3, [r3, #0]
 800a83e:	b21b      	sxth	r3, r3
 800a840:	4313      	orrs	r3, r2
 800a842:	b21b      	sxth	r3, r3
 800a844:	b29a      	uxth	r2, r3
 800a846:	4b17      	ldr	r3, [pc, #92]	; (800a8a4 <socket+0x21c>)
 800a848:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 800a84a:	79fb      	ldrb	r3, [r7, #7]
 800a84c:	2201      	movs	r2, #1
 800a84e:	fa02 f303 	lsl.w	r3, r2, r3
 800a852:	b21b      	sxth	r3, r3
 800a854:	43db      	mvns	r3, r3
 800a856:	b21a      	sxth	r2, r3
 800a858:	4b13      	ldr	r3, [pc, #76]	; (800a8a8 <socket+0x220>)
 800a85a:	881b      	ldrh	r3, [r3, #0]
 800a85c:	b21b      	sxth	r3, r3
 800a85e:	4013      	ands	r3, r2
 800a860:	b21b      	sxth	r3, r3
 800a862:	b29a      	uxth	r2, r3
 800a864:	4b10      	ldr	r3, [pc, #64]	; (800a8a8 <socket+0x220>)
 800a866:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800a868:	79fb      	ldrb	r3, [r7, #7]
 800a86a:	4a10      	ldr	r2, [pc, #64]	; (800a8ac <socket+0x224>)
 800a86c:	2100      	movs	r1, #0
 800a86e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 800a872:	79fb      	ldrb	r3, [r7, #7]
 800a874:	4a0e      	ldr	r2, [pc, #56]	; (800a8b0 <socket+0x228>)
 800a876:	2100      	movs	r1, #0
 800a878:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800a87a:	bf00      	nop
 800a87c:	79fb      	ldrb	r3, [r7, #7]
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	3301      	adds	r3, #1
 800a882:	00db      	lsls	r3, r3, #3
 800a884:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a888:	4618      	mov	r0, r3
 800a88a:	f7ff fc0d 	bl	800a0a8 <WIZCHIP_READ>
 800a88e:	4603      	mov	r3, r0
 800a890:	2b00      	cmp	r3, #0
 800a892:	d0f3      	beq.n	800a87c <socket+0x1f4>
   return (int8_t)sn;
 800a894:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800a898:	4618      	mov	r0, r3
 800a89a:	3714      	adds	r7, #20
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd90      	pop	{r4, r7, pc}
 800a8a0:	2000007c 	.word	0x2000007c
 800a8a4:	20003754 	.word	0x20003754
 800a8a8:	20003756 	.word	0x20003756
 800a8ac:	20003758 	.word	0x20003758
 800a8b0:	20003768 	.word	0x20003768

0800a8b4 <close>:

int8_t close(uint8_t sn)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800a8be:	79fb      	ldrb	r3, [r7, #7]
 800a8c0:	2b08      	cmp	r3, #8
 800a8c2:	d902      	bls.n	800a8ca <close+0x16>
 800a8c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8c8:	e055      	b.n	800a976 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800a8ca:	79fb      	ldrb	r3, [r7, #7]
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	00db      	lsls	r3, r3, #3
 800a8d2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a8d6:	2110      	movs	r1, #16
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f7ff fc31 	bl	800a140 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 800a8de:	bf00      	nop
 800a8e0:	79fb      	ldrb	r3, [r7, #7]
 800a8e2:	009b      	lsls	r3, r3, #2
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	00db      	lsls	r3, r3, #3
 800a8e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f7ff fbdb 	bl	800a0a8 <WIZCHIP_READ>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d1f3      	bne.n	800a8e0 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 800a8f8:	79fb      	ldrb	r3, [r7, #7]
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	00db      	lsls	r3, r3, #3
 800a900:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a904:	211f      	movs	r1, #31
 800a906:	4618      	mov	r0, r3
 800a908:	f7ff fc1a 	bl	800a140 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 800a90c:	79fb      	ldrb	r3, [r7, #7]
 800a90e:	2201      	movs	r2, #1
 800a910:	fa02 f303 	lsl.w	r3, r2, r3
 800a914:	b21b      	sxth	r3, r3
 800a916:	43db      	mvns	r3, r3
 800a918:	b21a      	sxth	r2, r3
 800a91a:	4b19      	ldr	r3, [pc, #100]	; (800a980 <close+0xcc>)
 800a91c:	881b      	ldrh	r3, [r3, #0]
 800a91e:	b21b      	sxth	r3, r3
 800a920:	4013      	ands	r3, r2
 800a922:	b21b      	sxth	r3, r3
 800a924:	b29a      	uxth	r2, r3
 800a926:	4b16      	ldr	r3, [pc, #88]	; (800a980 <close+0xcc>)
 800a928:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800a92a:	79fb      	ldrb	r3, [r7, #7]
 800a92c:	2201      	movs	r2, #1
 800a92e:	fa02 f303 	lsl.w	r3, r2, r3
 800a932:	b21b      	sxth	r3, r3
 800a934:	43db      	mvns	r3, r3
 800a936:	b21a      	sxth	r2, r3
 800a938:	4b12      	ldr	r3, [pc, #72]	; (800a984 <close+0xd0>)
 800a93a:	881b      	ldrh	r3, [r3, #0]
 800a93c:	b21b      	sxth	r3, r3
 800a93e:	4013      	ands	r3, r2
 800a940:	b21b      	sxth	r3, r3
 800a942:	b29a      	uxth	r2, r3
 800a944:	4b0f      	ldr	r3, [pc, #60]	; (800a984 <close+0xd0>)
 800a946:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 800a948:	79fb      	ldrb	r3, [r7, #7]
 800a94a:	4a0f      	ldr	r2, [pc, #60]	; (800a988 <close+0xd4>)
 800a94c:	2100      	movs	r1, #0
 800a94e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800a952:	79fb      	ldrb	r3, [r7, #7]
 800a954:	4a0d      	ldr	r2, [pc, #52]	; (800a98c <close+0xd8>)
 800a956:	2100      	movs	r1, #0
 800a958:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800a95a:	bf00      	nop
 800a95c:	79fb      	ldrb	r3, [r7, #7]
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	3301      	adds	r3, #1
 800a962:	00db      	lsls	r3, r3, #3
 800a964:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a968:	4618      	mov	r0, r3
 800a96a:	f7ff fb9d 	bl	800a0a8 <WIZCHIP_READ>
 800a96e:	4603      	mov	r3, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d1f3      	bne.n	800a95c <close+0xa8>
	return SOCK_OK;
 800a974:	2301      	movs	r3, #1
}
 800a976:	4618      	mov	r0, r3
 800a978:	3708      	adds	r7, #8
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	20003754 	.word	0x20003754
 800a984:	20003756 	.word	0x20003756
 800a988:	20003758 	.word	0x20003758
 800a98c:	20003768 	.word	0x20003768

0800a990 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	4603      	mov	r3, r0
 800a998:	6039      	str	r1, [r7, #0]
 800a99a:	71fb      	strb	r3, [r7, #7]
 800a99c:	4613      	mov	r3, r2
 800a99e:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 800a9a0:	79fb      	ldrb	r3, [r7, #7]
 800a9a2:	2b08      	cmp	r3, #8
 800a9a4:	d902      	bls.n	800a9ac <connect+0x1c>
 800a9a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a9aa:	e0c6      	b.n	800ab3a <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800a9ac:	79fb      	ldrb	r3, [r7, #7]
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	00db      	lsls	r3, r3, #3
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7ff fb77 	bl	800a0a8 <WIZCHIP_READ>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	f003 030f 	and.w	r3, r3, #15
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d002      	beq.n	800a9ca <connect+0x3a>
 800a9c4:	f06f 0304 	mvn.w	r3, #4
 800a9c8:	e0b7      	b.n	800ab3a <connect+0x1aa>
   CHECK_SOCKINIT();
 800a9ca:	79fb      	ldrb	r3, [r7, #7]
 800a9cc:	009b      	lsls	r3, r3, #2
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	00db      	lsls	r3, r3, #3
 800a9d2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7ff fb66 	bl	800a0a8 <WIZCHIP_READ>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b13      	cmp	r3, #19
 800a9e0:	d002      	beq.n	800a9e8 <connect+0x58>
 800a9e2:	f06f 0302 	mvn.w	r3, #2
 800a9e6:	e0a8      	b.n	800ab3a <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	021b      	lsls	r3, r3, #8
 800a9f2:	683a      	ldr	r2, [r7, #0]
 800a9f4:	3201      	adds	r2, #1
 800a9f6:	7812      	ldrb	r2, [r2, #0]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	021b      	lsls	r3, r3, #8
 800aa00:	683a      	ldr	r2, [r7, #0]
 800aa02:	3202      	adds	r2, #2
 800aa04:	7812      	ldrb	r2, [r2, #0]
 800aa06:	4413      	add	r3, r2
 800aa08:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	021b      	lsls	r3, r3, #8
 800aa0e:	683a      	ldr	r2, [r7, #0]
 800aa10:	3203      	adds	r2, #3
 800aa12:	7812      	ldrb	r2, [r2, #0]
 800aa14:	4413      	add	r3, r2
 800aa16:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa1e:	d002      	beq.n	800aa26 <connect+0x96>
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d102      	bne.n	800aa2c <connect+0x9c>
 800aa26:	f06f 030b 	mvn.w	r3, #11
 800aa2a:	e086      	b.n	800ab3a <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 800aa2c:	88bb      	ldrh	r3, [r7, #4]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d102      	bne.n	800aa38 <connect+0xa8>
 800aa32:	f06f 030a 	mvn.w	r3, #10
 800aa36:	e080      	b.n	800ab3a <connect+0x1aa>
	setSn_DIPR(sn,addr);
 800aa38:	79fb      	ldrb	r3, [r7, #7]
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	00db      	lsls	r3, r3, #3
 800aa40:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800aa44:	2204      	movs	r2, #4
 800aa46:	6839      	ldr	r1, [r7, #0]
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7ff fc27 	bl	800a29c <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 800aa4e:	79fb      	ldrb	r3, [r7, #7]
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	3301      	adds	r3, #1
 800aa54:	00db      	lsls	r3, r3, #3
 800aa56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	88bb      	ldrh	r3, [r7, #4]
 800aa5e:	0a1b      	lsrs	r3, r3, #8
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	4619      	mov	r1, r3
 800aa66:	4610      	mov	r0, r2
 800aa68:	f7ff fb6a 	bl	800a140 <WIZCHIP_WRITE>
 800aa6c:	79fb      	ldrb	r3, [r7, #7]
 800aa6e:	009b      	lsls	r3, r3, #2
 800aa70:	3301      	adds	r3, #1
 800aa72:	00db      	lsls	r3, r3, #3
 800aa74:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800aa78:	461a      	mov	r2, r3
 800aa7a:	88bb      	ldrh	r3, [r7, #4]
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	4619      	mov	r1, r3
 800aa80:	4610      	mov	r0, r2
 800aa82:	f7ff fb5d 	bl	800a140 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 800aa86:	79fb      	ldrb	r3, [r7, #7]
 800aa88:	009b      	lsls	r3, r3, #2
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	00db      	lsls	r3, r3, #3
 800aa8e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800aa92:	2104      	movs	r1, #4
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7ff fb53 	bl	800a140 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800aa9a:	bf00      	nop
 800aa9c:	79fb      	ldrb	r3, [r7, #7]
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	00db      	lsls	r3, r3, #3
 800aaa4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7ff fafd 	bl	800a0a8 <WIZCHIP_READ>
 800aaae:	4603      	mov	r3, r0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d1f3      	bne.n	800aa9c <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800aab4:	4b23      	ldr	r3, [pc, #140]	; (800ab44 <connect+0x1b4>)
 800aab6:	881b      	ldrh	r3, [r3, #0]
 800aab8:	461a      	mov	r2, r3
 800aaba:	79fb      	ldrb	r3, [r7, #7]
 800aabc:	fa42 f303 	asr.w	r3, r2, r3
 800aac0:	f003 0301 	and.w	r3, r3, #1
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d02b      	beq.n	800ab20 <connect+0x190>
 800aac8:	2300      	movs	r3, #0
 800aaca:	e036      	b.n	800ab3a <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 800aacc:	79fb      	ldrb	r3, [r7, #7]
 800aace:	009b      	lsls	r3, r3, #2
 800aad0:	3301      	adds	r3, #1
 800aad2:	00db      	lsls	r3, r3, #3
 800aad4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800aad8:	4618      	mov	r0, r3
 800aada:	f7ff fae5 	bl	800a0a8 <WIZCHIP_READ>
 800aade:	4603      	mov	r3, r0
 800aae0:	f003 0308 	and.w	r3, r3, #8
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d00c      	beq.n	800ab02 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 800aae8:	79fb      	ldrb	r3, [r7, #7]
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	3301      	adds	r3, #1
 800aaee:	00db      	lsls	r3, r3, #3
 800aaf0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800aaf4:	2108      	movs	r1, #8
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7ff fb22 	bl	800a140 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 800aafc:	f06f 030c 	mvn.w	r3, #12
 800ab00:	e01b      	b.n	800ab3a <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 800ab02:	79fb      	ldrb	r3, [r7, #7]
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	3301      	adds	r3, #1
 800ab08:	00db      	lsls	r3, r3, #3
 800ab0a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f7ff faca 	bl	800a0a8 <WIZCHIP_READ>
 800ab14:	4603      	mov	r3, r0
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d102      	bne.n	800ab20 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 800ab1a:	f06f 0303 	mvn.w	r3, #3
 800ab1e:	e00c      	b.n	800ab3a <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 800ab20:	79fb      	ldrb	r3, [r7, #7]
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	3301      	adds	r3, #1
 800ab26:	00db      	lsls	r3, r3, #3
 800ab28:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7ff fabb 	bl	800a0a8 <WIZCHIP_READ>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b17      	cmp	r3, #23
 800ab36:	d1c9      	bne.n	800aacc <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 800ab38:	2301      	movs	r3, #1
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3710      	adds	r7, #16
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop
 800ab44:	20003754 	.word	0x20003754

0800ab48 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	4603      	mov	r3, r0
 800ab50:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800ab52:	79fb      	ldrb	r3, [r7, #7]
 800ab54:	2b08      	cmp	r3, #8
 800ab56:	d902      	bls.n	800ab5e <disconnect+0x16>
 800ab58:	f04f 33ff 	mov.w	r3, #4294967295
 800ab5c:	e062      	b.n	800ac24 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800ab5e:	79fb      	ldrb	r3, [r7, #7]
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	3301      	adds	r3, #1
 800ab64:	00db      	lsls	r3, r3, #3
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7ff fa9e 	bl	800a0a8 <WIZCHIP_READ>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	f003 030f 	and.w	r3, r3, #15
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	d002      	beq.n	800ab7c <disconnect+0x34>
 800ab76:	f06f 0304 	mvn.w	r3, #4
 800ab7a:	e053      	b.n	800ac24 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 800ab7c:	79fb      	ldrb	r3, [r7, #7]
 800ab7e:	009b      	lsls	r3, r3, #2
 800ab80:	3301      	adds	r3, #1
 800ab82:	00db      	lsls	r3, r3, #3
 800ab84:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ab88:	2108      	movs	r1, #8
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7ff fad8 	bl	800a140 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800ab90:	bf00      	nop
 800ab92:	79fb      	ldrb	r3, [r7, #7]
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	3301      	adds	r3, #1
 800ab98:	00db      	lsls	r3, r3, #3
 800ab9a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7ff fa82 	bl	800a0a8 <WIZCHIP_READ>
 800aba4:	4603      	mov	r3, r0
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d1f3      	bne.n	800ab92 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 800abaa:	79fb      	ldrb	r3, [r7, #7]
 800abac:	2201      	movs	r2, #1
 800abae:	fa02 f303 	lsl.w	r3, r2, r3
 800abb2:	b21b      	sxth	r3, r3
 800abb4:	43db      	mvns	r3, r3
 800abb6:	b21a      	sxth	r2, r3
 800abb8:	4b1c      	ldr	r3, [pc, #112]	; (800ac2c <disconnect+0xe4>)
 800abba:	881b      	ldrh	r3, [r3, #0]
 800abbc:	b21b      	sxth	r3, r3
 800abbe:	4013      	ands	r3, r2
 800abc0:	b21b      	sxth	r3, r3
 800abc2:	b29a      	uxth	r2, r3
 800abc4:	4b19      	ldr	r3, [pc, #100]	; (800ac2c <disconnect+0xe4>)
 800abc6:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800abc8:	4b19      	ldr	r3, [pc, #100]	; (800ac30 <disconnect+0xe8>)
 800abca:	881b      	ldrh	r3, [r3, #0]
 800abcc:	461a      	mov	r2, r3
 800abce:	79fb      	ldrb	r3, [r7, #7]
 800abd0:	fa42 f303 	asr.w	r3, r2, r3
 800abd4:	f003 0301 	and.w	r3, r3, #1
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d016      	beq.n	800ac0a <disconnect+0xc2>
 800abdc:	2300      	movs	r3, #0
 800abde:	e021      	b.n	800ac24 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 800abe0:	79fb      	ldrb	r3, [r7, #7]
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	3301      	adds	r3, #1
 800abe6:	00db      	lsls	r3, r3, #3
 800abe8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800abec:	4618      	mov	r0, r3
 800abee:	f7ff fa5b 	bl	800a0a8 <WIZCHIP_READ>
 800abf2:	4603      	mov	r3, r0
 800abf4:	f003 0308 	and.w	r3, r3, #8
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d006      	beq.n	800ac0a <disconnect+0xc2>
	   {
	      close(sn);
 800abfc:	79fb      	ldrb	r3, [r7, #7]
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7ff fe58 	bl	800a8b4 <close>
	      return SOCKERR_TIMEOUT;
 800ac04:	f06f 030c 	mvn.w	r3, #12
 800ac08:	e00c      	b.n	800ac24 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 800ac0a:	79fb      	ldrb	r3, [r7, #7]
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	3301      	adds	r3, #1
 800ac10:	00db      	lsls	r3, r3, #3
 800ac12:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ac16:	4618      	mov	r0, r3
 800ac18:	f7ff fa46 	bl	800a0a8 <WIZCHIP_READ>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d1de      	bne.n	800abe0 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 800ac22:	2301      	movs	r3, #1
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3708      	adds	r7, #8
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	20003756 	.word	0x20003756
 800ac30:	20003754 	.word	0x20003754

0800ac34 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b084      	sub	sp, #16
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	6039      	str	r1, [r7, #0]
 800ac3e:	71fb      	strb	r3, [r7, #7]
 800ac40:	4613      	mov	r3, r2
 800ac42:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 800ac44:	2300      	movs	r3, #0
 800ac46:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 800ac4c:	79fb      	ldrb	r3, [r7, #7]
 800ac4e:	2b08      	cmp	r3, #8
 800ac50:	d902      	bls.n	800ac58 <send+0x24>
 800ac52:	f04f 33ff 	mov.w	r3, #4294967295
 800ac56:	e0de      	b.n	800ae16 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800ac58:	79fb      	ldrb	r3, [r7, #7]
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	00db      	lsls	r3, r3, #3
 800ac60:	4618      	mov	r0, r3
 800ac62:	f7ff fa21 	bl	800a0a8 <WIZCHIP_READ>
 800ac66:	4603      	mov	r3, r0
 800ac68:	f003 030f 	and.w	r3, r3, #15
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d002      	beq.n	800ac76 <send+0x42>
 800ac70:	f06f 0304 	mvn.w	r3, #4
 800ac74:	e0cf      	b.n	800ae16 <send+0x1e2>
   CHECK_SOCKDATA();
 800ac76:	88bb      	ldrh	r3, [r7, #4]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d102      	bne.n	800ac82 <send+0x4e>
 800ac7c:	f06f 030d 	mvn.w	r3, #13
 800ac80:	e0c9      	b.n	800ae16 <send+0x1e2>
   tmp = getSn_SR(sn);
 800ac82:	79fb      	ldrb	r3, [r7, #7]
 800ac84:	009b      	lsls	r3, r3, #2
 800ac86:	3301      	adds	r3, #1
 800ac88:	00db      	lsls	r3, r3, #3
 800ac8a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7ff fa0a 	bl	800a0a8 <WIZCHIP_READ>
 800ac94:	4603      	mov	r3, r0
 800ac96:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800ac98:	7bfb      	ldrb	r3, [r7, #15]
 800ac9a:	2b17      	cmp	r3, #23
 800ac9c:	d005      	beq.n	800acaa <send+0x76>
 800ac9e:	7bfb      	ldrb	r3, [r7, #15]
 800aca0:	2b1c      	cmp	r3, #28
 800aca2:	d002      	beq.n	800acaa <send+0x76>
 800aca4:	f06f 0306 	mvn.w	r3, #6
 800aca8:	e0b5      	b.n	800ae16 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 800acaa:	4b5d      	ldr	r3, [pc, #372]	; (800ae20 <send+0x1ec>)
 800acac:	881b      	ldrh	r3, [r3, #0]
 800acae:	461a      	mov	r2, r3
 800acb0:	79fb      	ldrb	r3, [r7, #7]
 800acb2:	fa42 f303 	asr.w	r3, r2, r3
 800acb6:	f003 0301 	and.w	r3, r3, #1
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d039      	beq.n	800ad32 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800acbe:	79fb      	ldrb	r3, [r7, #7]
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	3301      	adds	r3, #1
 800acc4:	00db      	lsls	r3, r3, #3
 800acc6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800acca:	4618      	mov	r0, r3
 800accc:	f7ff f9ec 	bl	800a0a8 <WIZCHIP_READ>
 800acd0:	4603      	mov	r3, r0
 800acd2:	f003 031f 	and.w	r3, r3, #31
 800acd6:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 800acd8:	7bfb      	ldrb	r3, [r7, #15]
 800acda:	f003 0310 	and.w	r3, r3, #16
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d019      	beq.n	800ad16 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800ace2:	79fb      	ldrb	r3, [r7, #7]
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	3301      	adds	r3, #1
 800ace8:	00db      	lsls	r3, r3, #3
 800acea:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800acee:	2110      	movs	r1, #16
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7ff fa25 	bl	800a140 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 800acf6:	79fb      	ldrb	r3, [r7, #7]
 800acf8:	2201      	movs	r2, #1
 800acfa:	fa02 f303 	lsl.w	r3, r2, r3
 800acfe:	b21b      	sxth	r3, r3
 800ad00:	43db      	mvns	r3, r3
 800ad02:	b21a      	sxth	r2, r3
 800ad04:	4b46      	ldr	r3, [pc, #280]	; (800ae20 <send+0x1ec>)
 800ad06:	881b      	ldrh	r3, [r3, #0]
 800ad08:	b21b      	sxth	r3, r3
 800ad0a:	4013      	ands	r3, r2
 800ad0c:	b21b      	sxth	r3, r3
 800ad0e:	b29a      	uxth	r2, r3
 800ad10:	4b43      	ldr	r3, [pc, #268]	; (800ae20 <send+0x1ec>)
 800ad12:	801a      	strh	r2, [r3, #0]
 800ad14:	e00d      	b.n	800ad32 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 800ad16:	7bfb      	ldrb	r3, [r7, #15]
 800ad18:	f003 0308 	and.w	r3, r3, #8
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d006      	beq.n	800ad2e <send+0xfa>
      {
         close(sn);
 800ad20:	79fb      	ldrb	r3, [r7, #7]
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7ff fdc6 	bl	800a8b4 <close>
         return SOCKERR_TIMEOUT;
 800ad28:	f06f 030c 	mvn.w	r3, #12
 800ad2c:	e073      	b.n	800ae16 <send+0x1e2>
      }
      else return SOCK_BUSY;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	e071      	b.n	800ae16 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 800ad32:	79fb      	ldrb	r3, [r7, #7]
 800ad34:	009b      	lsls	r3, r3, #2
 800ad36:	3301      	adds	r3, #1
 800ad38:	00db      	lsls	r3, r3, #3
 800ad3a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7ff f9b2 	bl	800a0a8 <WIZCHIP_READ>
 800ad44:	4603      	mov	r3, r0
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	029b      	lsls	r3, r3, #10
 800ad4a:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800ad4c:	88ba      	ldrh	r2, [r7, #4]
 800ad4e:	89bb      	ldrh	r3, [r7, #12]
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d901      	bls.n	800ad58 <send+0x124>
 800ad54:	89bb      	ldrh	r3, [r7, #12]
 800ad56:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800ad58:	79fb      	ldrb	r3, [r7, #7]
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7ff fafe 	bl	800a35c <getSn_TX_FSR>
 800ad60:	4603      	mov	r3, r0
 800ad62:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 800ad64:	79fb      	ldrb	r3, [r7, #7]
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	3301      	adds	r3, #1
 800ad6a:	00db      	lsls	r3, r3, #3
 800ad6c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ad70:	4618      	mov	r0, r3
 800ad72:	f7ff f999 	bl	800a0a8 <WIZCHIP_READ>
 800ad76:	4603      	mov	r3, r0
 800ad78:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800ad7a:	7bfb      	ldrb	r3, [r7, #15]
 800ad7c:	2b17      	cmp	r3, #23
 800ad7e:	d009      	beq.n	800ad94 <send+0x160>
 800ad80:	7bfb      	ldrb	r3, [r7, #15]
 800ad82:	2b1c      	cmp	r3, #28
 800ad84:	d006      	beq.n	800ad94 <send+0x160>
      {
         close(sn);
 800ad86:	79fb      	ldrb	r3, [r7, #7]
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f7ff fd93 	bl	800a8b4 <close>
         return SOCKERR_SOCKSTATUS;
 800ad8e:	f06f 0306 	mvn.w	r3, #6
 800ad92:	e040      	b.n	800ae16 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800ad94:	4b23      	ldr	r3, [pc, #140]	; (800ae24 <send+0x1f0>)
 800ad96:	881b      	ldrh	r3, [r3, #0]
 800ad98:	461a      	mov	r2, r3
 800ad9a:	79fb      	ldrb	r3, [r7, #7]
 800ad9c:	fa42 f303 	asr.w	r3, r2, r3
 800ada0:	f003 0301 	and.w	r3, r3, #1
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d005      	beq.n	800adb4 <send+0x180>
 800ada8:	88ba      	ldrh	r2, [r7, #4]
 800adaa:	89bb      	ldrh	r3, [r7, #12]
 800adac:	429a      	cmp	r2, r3
 800adae:	d901      	bls.n	800adb4 <send+0x180>
 800adb0:	2300      	movs	r3, #0
 800adb2:	e030      	b.n	800ae16 <send+0x1e2>
      if(len <= freesize) break;
 800adb4:	88ba      	ldrh	r2, [r7, #4]
 800adb6:	89bb      	ldrh	r3, [r7, #12]
 800adb8:	429a      	cmp	r2, r3
 800adba:	d900      	bls.n	800adbe <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 800adbc:	e7cc      	b.n	800ad58 <send+0x124>
      if(len <= freesize) break;
 800adbe:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 800adc0:	88ba      	ldrh	r2, [r7, #4]
 800adc2:	79fb      	ldrb	r3, [r7, #7]
 800adc4:	6839      	ldr	r1, [r7, #0]
 800adc6:	4618      	mov	r0, r3
 800adc8:	f7ff fb5e 	bl	800a488 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 800adcc:	79fb      	ldrb	r3, [r7, #7]
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	3301      	adds	r3, #1
 800add2:	00db      	lsls	r3, r3, #3
 800add4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800add8:	2120      	movs	r1, #32
 800adda:	4618      	mov	r0, r3
 800addc:	f7ff f9b0 	bl	800a140 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 800ade0:	bf00      	nop
 800ade2:	79fb      	ldrb	r3, [r7, #7]
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	3301      	adds	r3, #1
 800ade8:	00db      	lsls	r3, r3, #3
 800adea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800adee:	4618      	mov	r0, r3
 800adf0:	f7ff f95a 	bl	800a0a8 <WIZCHIP_READ>
 800adf4:	4603      	mov	r3, r0
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d1f3      	bne.n	800ade2 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 800adfa:	79fb      	ldrb	r3, [r7, #7]
 800adfc:	2201      	movs	r2, #1
 800adfe:	fa02 f303 	lsl.w	r3, r2, r3
 800ae02:	b21a      	sxth	r2, r3
 800ae04:	4b06      	ldr	r3, [pc, #24]	; (800ae20 <send+0x1ec>)
 800ae06:	881b      	ldrh	r3, [r3, #0]
 800ae08:	b21b      	sxth	r3, r3
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	b21b      	sxth	r3, r3
 800ae0e:	b29a      	uxth	r2, r3
 800ae10:	4b03      	ldr	r3, [pc, #12]	; (800ae20 <send+0x1ec>)
 800ae12:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800ae14:	88bb      	ldrh	r3, [r7, #4]
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	20003756 	.word	0x20003756
 800ae24:	20003754 	.word	0x20003754

0800ae28 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800ae28:	b590      	push	{r4, r7, lr}
 800ae2a:	b085      	sub	sp, #20
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	4603      	mov	r3, r0
 800ae30:	6039      	str	r1, [r7, #0]
 800ae32:	71fb      	strb	r3, [r7, #7]
 800ae34:	4613      	mov	r3, r2
 800ae36:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 800ae40:	79fb      	ldrb	r3, [r7, #7]
 800ae42:	2b08      	cmp	r3, #8
 800ae44:	d902      	bls.n	800ae4c <recv+0x24>
 800ae46:	f04f 33ff 	mov.w	r3, #4294967295
 800ae4a:	e09c      	b.n	800af86 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800ae4c:	79fb      	ldrb	r3, [r7, #7]
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	3301      	adds	r3, #1
 800ae52:	00db      	lsls	r3, r3, #3
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7ff f927 	bl	800a0a8 <WIZCHIP_READ>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	f003 030f 	and.w	r3, r3, #15
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	d002      	beq.n	800ae6a <recv+0x42>
 800ae64:	f06f 0304 	mvn.w	r3, #4
 800ae68:	e08d      	b.n	800af86 <recv+0x15e>
   CHECK_SOCKDATA();
 800ae6a:	88bb      	ldrh	r3, [r7, #4]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d102      	bne.n	800ae76 <recv+0x4e>
 800ae70:	f06f 030d 	mvn.w	r3, #13
 800ae74:	e087      	b.n	800af86 <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 800ae76:	79fb      	ldrb	r3, [r7, #7]
 800ae78:	009b      	lsls	r3, r3, #2
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	00db      	lsls	r3, r3, #3
 800ae7e:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7ff f910 	bl	800a0a8 <WIZCHIP_READ>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	b29b      	uxth	r3, r3
 800ae8c:	029b      	lsls	r3, r3, #10
 800ae8e:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 800ae90:	89ba      	ldrh	r2, [r7, #12]
 800ae92:	88bb      	ldrh	r3, [r7, #4]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d201      	bcs.n	800ae9c <recv+0x74>
 800ae98:	89bb      	ldrh	r3, [r7, #12]
 800ae9a:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 800ae9c:	79fb      	ldrb	r3, [r7, #7]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7ff faa7 	bl	800a3f2 <getSn_RX_RSR>
 800aea4:	4603      	mov	r3, r0
 800aea6:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 800aea8:	79fb      	ldrb	r3, [r7, #7]
 800aeaa:	009b      	lsls	r3, r3, #2
 800aeac:	3301      	adds	r3, #1
 800aeae:	00db      	lsls	r3, r3, #3
 800aeb0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7ff f8f7 	bl	800a0a8 <WIZCHIP_READ>
 800aeba:	4603      	mov	r3, r0
 800aebc:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 800aebe:	7bfb      	ldrb	r3, [r7, #15]
 800aec0:	2b17      	cmp	r3, #23
 800aec2:	d026      	beq.n	800af12 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 800aec4:	7bfb      	ldrb	r3, [r7, #15]
 800aec6:	2b1c      	cmp	r3, #28
 800aec8:	d11c      	bne.n	800af04 <recv+0xdc>
            {
               if(recvsize != 0) break;
 800aeca:	89bb      	ldrh	r3, [r7, #12]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d133      	bne.n	800af38 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 800aed0:	79fb      	ldrb	r3, [r7, #7]
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7ff fa42 	bl	800a35c <getSn_TX_FSR>
 800aed8:	4603      	mov	r3, r0
 800aeda:	461c      	mov	r4, r3
 800aedc:	79fb      	ldrb	r3, [r7, #7]
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	3301      	adds	r3, #1
 800aee2:	00db      	lsls	r3, r3, #3
 800aee4:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7ff f8dd 	bl	800a0a8 <WIZCHIP_READ>
 800aeee:	4603      	mov	r3, r0
 800aef0:	029b      	lsls	r3, r3, #10
 800aef2:	429c      	cmp	r4, r3
 800aef4:	d10d      	bne.n	800af12 <recv+0xea>
               {
                  close(sn);
 800aef6:	79fb      	ldrb	r3, [r7, #7]
 800aef8:	4618      	mov	r0, r3
 800aefa:	f7ff fcdb 	bl	800a8b4 <close>
                  return SOCKERR_SOCKSTATUS;
 800aefe:	f06f 0306 	mvn.w	r3, #6
 800af02:	e040      	b.n	800af86 <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 800af04:	79fb      	ldrb	r3, [r7, #7]
 800af06:	4618      	mov	r0, r3
 800af08:	f7ff fcd4 	bl	800a8b4 <close>
               return SOCKERR_SOCKSTATUS;
 800af0c:	f06f 0306 	mvn.w	r3, #6
 800af10:	e039      	b.n	800af86 <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 800af12:	4b1f      	ldr	r3, [pc, #124]	; (800af90 <recv+0x168>)
 800af14:	881b      	ldrh	r3, [r3, #0]
 800af16:	461a      	mov	r2, r3
 800af18:	79fb      	ldrb	r3, [r7, #7]
 800af1a:	fa42 f303 	asr.w	r3, r2, r3
 800af1e:	f003 0301 	and.w	r3, r3, #1
 800af22:	2b00      	cmp	r3, #0
 800af24:	d004      	beq.n	800af30 <recv+0x108>
 800af26:	89bb      	ldrh	r3, [r7, #12]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d101      	bne.n	800af30 <recv+0x108>
 800af2c:	2300      	movs	r3, #0
 800af2e:	e02a      	b.n	800af86 <recv+0x15e>
         if(recvsize != 0) break;
 800af30:	89bb      	ldrh	r3, [r7, #12]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d102      	bne.n	800af3c <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 800af36:	e7b1      	b.n	800ae9c <recv+0x74>
               if(recvsize != 0) break;
 800af38:	bf00      	nop
 800af3a:	e000      	b.n	800af3e <recv+0x116>
         if(recvsize != 0) break;
 800af3c:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 800af3e:	89ba      	ldrh	r2, [r7, #12]
 800af40:	88bb      	ldrh	r3, [r7, #4]
 800af42:	429a      	cmp	r2, r3
 800af44:	d201      	bcs.n	800af4a <recv+0x122>
 800af46:	89bb      	ldrh	r3, [r7, #12]
 800af48:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 800af4a:	88ba      	ldrh	r2, [r7, #4]
 800af4c:	79fb      	ldrb	r3, [r7, #7]
 800af4e:	6839      	ldr	r1, [r7, #0]
 800af50:	4618      	mov	r0, r3
 800af52:	f7ff faf5 	bl	800a540 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800af56:	79fb      	ldrb	r3, [r7, #7]
 800af58:	009b      	lsls	r3, r3, #2
 800af5a:	3301      	adds	r3, #1
 800af5c:	00db      	lsls	r3, r3, #3
 800af5e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800af62:	2140      	movs	r1, #64	; 0x40
 800af64:	4618      	mov	r0, r3
 800af66:	f7ff f8eb 	bl	800a140 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800af6a:	bf00      	nop
 800af6c:	79fb      	ldrb	r3, [r7, #7]
 800af6e:	009b      	lsls	r3, r3, #2
 800af70:	3301      	adds	r3, #1
 800af72:	00db      	lsls	r3, r3, #3
 800af74:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800af78:	4618      	mov	r0, r3
 800af7a:	f7ff f895 	bl	800a0a8 <WIZCHIP_READ>
 800af7e:	4603      	mov	r3, r0
 800af80:	2b00      	cmp	r3, #0
 800af82:	d1f3      	bne.n	800af6c <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800af84:	88bb      	ldrh	r3, [r7, #4]
}
 800af86:	4618      	mov	r0, r3
 800af88:	3714      	adds	r7, #20
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd90      	pop	{r4, r7, pc}
 800af8e:	bf00      	nop
 800af90:	20003754 	.word	0x20003754

0800af94 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b086      	sub	sp, #24
 800af98:	af00      	add	r7, sp, #0
 800af9a:	60b9      	str	r1, [r7, #8]
 800af9c:	607b      	str	r3, [r7, #4]
 800af9e:	4603      	mov	r3, r0
 800afa0:	73fb      	strb	r3, [r7, #15]
 800afa2:	4613      	mov	r3, r2
 800afa4:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 800afa6:	2300      	movs	r3, #0
 800afa8:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 800afaa:	2300      	movs	r3, #0
 800afac:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 800afae:	7bfb      	ldrb	r3, [r7, #15]
 800afb0:	2b08      	cmp	r3, #8
 800afb2:	d902      	bls.n	800afba <sendto+0x26>
 800afb4:	f04f 33ff 	mov.w	r3, #4294967295
 800afb8:	e11b      	b.n	800b1f2 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 800afba:	7bfb      	ldrb	r3, [r7, #15]
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	3301      	adds	r3, #1
 800afc0:	00db      	lsls	r3, r3, #3
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7ff f870 	bl	800a0a8 <WIZCHIP_READ>
 800afc8:	4603      	mov	r3, r0
 800afca:	f003 030f 	and.w	r3, r3, #15
 800afce:	3b02      	subs	r3, #2
 800afd0:	2b02      	cmp	r3, #2
 800afd2:	d902      	bls.n	800afda <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 800afd4:	f06f 0304 	mvn.w	r3, #4
 800afd8:	e10b      	b.n	800b1f2 <sendto+0x25e>
         break;
 800afda:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800afdc:	89bb      	ldrh	r3, [r7, #12]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d102      	bne.n	800afe8 <sendto+0x54>
 800afe2:	f06f 030d 	mvn.w	r3, #13
 800afe6:	e104      	b.n	800b1f2 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	021b      	lsls	r3, r3, #8
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	3201      	adds	r2, #1
 800aff6:	7812      	ldrb	r2, [r2, #0]
 800aff8:	4413      	add	r3, r2
 800affa:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	021b      	lsls	r3, r3, #8
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	3202      	adds	r2, #2
 800b004:	7812      	ldrb	r2, [r2, #0]
 800b006:	4413      	add	r3, r2
 800b008:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	021b      	lsls	r3, r3, #8
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	3203      	adds	r2, #3
 800b012:	7812      	ldrb	r2, [r2, #0]
 800b014:	4413      	add	r3, r2
 800b016:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d10e      	bne.n	800b03c <sendto+0xa8>
 800b01e:	7bfb      	ldrb	r3, [r7, #15]
 800b020:	009b      	lsls	r3, r3, #2
 800b022:	3301      	adds	r3, #1
 800b024:	00db      	lsls	r3, r3, #3
 800b026:	4618      	mov	r0, r3
 800b028:	f7ff f83e 	bl	800a0a8 <WIZCHIP_READ>
 800b02c:	4603      	mov	r3, r0
 800b02e:	f003 0304 	and.w	r3, r3, #4
 800b032:	2b04      	cmp	r3, #4
 800b034:	d002      	beq.n	800b03c <sendto+0xa8>
 800b036:	f06f 030b 	mvn.w	r3, #11
 800b03a:	e0da      	b.n	800b1f2 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 800b03c:	8c3b      	ldrh	r3, [r7, #32]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d10e      	bne.n	800b060 <sendto+0xcc>
 800b042:	7bfb      	ldrb	r3, [r7, #15]
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	3301      	adds	r3, #1
 800b048:	00db      	lsls	r3, r3, #3
 800b04a:	4618      	mov	r0, r3
 800b04c:	f7ff f82c 	bl	800a0a8 <WIZCHIP_READ>
 800b050:	4603      	mov	r3, r0
 800b052:	f003 0304 	and.w	r3, r3, #4
 800b056:	2b04      	cmp	r3, #4
 800b058:	d002      	beq.n	800b060 <sendto+0xcc>
 800b05a:	f06f 030a 	mvn.w	r3, #10
 800b05e:	e0c8      	b.n	800b1f2 <sendto+0x25e>
   tmp = getSn_SR(sn);
 800b060:	7bfb      	ldrb	r3, [r7, #15]
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	3301      	adds	r3, #1
 800b066:	00db      	lsls	r3, r3, #3
 800b068:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800b06c:	4618      	mov	r0, r3
 800b06e:	f7ff f81b 	bl	800a0a8 <WIZCHIP_READ>
 800b072:	4603      	mov	r3, r0
 800b074:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 800b076:	7dfb      	ldrb	r3, [r7, #23]
 800b078:	2b42      	cmp	r3, #66	; 0x42
 800b07a:	d008      	beq.n	800b08e <sendto+0xfa>
 800b07c:	7dfb      	ldrb	r3, [r7, #23]
 800b07e:	2b22      	cmp	r3, #34	; 0x22
 800b080:	d005      	beq.n	800b08e <sendto+0xfa>
 800b082:	7dfb      	ldrb	r3, [r7, #23]
 800b084:	2b32      	cmp	r3, #50	; 0x32
 800b086:	d002      	beq.n	800b08e <sendto+0xfa>
 800b088:	f06f 0306 	mvn.w	r3, #6
 800b08c:	e0b1      	b.n	800b1f2 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 800b08e:	7bfb      	ldrb	r3, [r7, #15]
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	3301      	adds	r3, #1
 800b094:	00db      	lsls	r3, r3, #3
 800b096:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800b09a:	2204      	movs	r2, #4
 800b09c:	6879      	ldr	r1, [r7, #4]
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7ff f8fc 	bl	800a29c <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 800b0a4:	7bfb      	ldrb	r3, [r7, #15]
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	00db      	lsls	r3, r3, #3
 800b0ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	8c3b      	ldrh	r3, [r7, #32]
 800b0b4:	0a1b      	lsrs	r3, r3, #8
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	4610      	mov	r0, r2
 800b0be:	f7ff f83f 	bl	800a140 <WIZCHIP_WRITE>
 800b0c2:	7bfb      	ldrb	r3, [r7, #15]
 800b0c4:	009b      	lsls	r3, r3, #2
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	00db      	lsls	r3, r3, #3
 800b0ca:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	8c3b      	ldrh	r3, [r7, #32]
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	4610      	mov	r0, r2
 800b0d8:	f7ff f832 	bl	800a140 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 800b0dc:	7bfb      	ldrb	r3, [r7, #15]
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	00db      	lsls	r3, r3, #3
 800b0e4:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f7fe ffdd 	bl	800a0a8 <WIZCHIP_READ>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	029b      	lsls	r3, r3, #10
 800b0f4:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800b0f6:	89ba      	ldrh	r2, [r7, #12]
 800b0f8:	8abb      	ldrh	r3, [r7, #20]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d901      	bls.n	800b102 <sendto+0x16e>
 800b0fe:	8abb      	ldrh	r3, [r7, #20]
 800b100:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800b102:	7bfb      	ldrb	r3, [r7, #15]
 800b104:	4618      	mov	r0, r3
 800b106:	f7ff f929 	bl	800a35c <getSn_TX_FSR>
 800b10a:	4603      	mov	r3, r0
 800b10c:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800b10e:	7bfb      	ldrb	r3, [r7, #15]
 800b110:	009b      	lsls	r3, r3, #2
 800b112:	3301      	adds	r3, #1
 800b114:	00db      	lsls	r3, r3, #3
 800b116:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7fe ffc4 	bl	800a0a8 <WIZCHIP_READ>
 800b120:	4603      	mov	r3, r0
 800b122:	2b00      	cmp	r3, #0
 800b124:	d102      	bne.n	800b12c <sendto+0x198>
 800b126:	f06f 0303 	mvn.w	r3, #3
 800b12a:	e062      	b.n	800b1f2 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800b12c:	4b33      	ldr	r3, [pc, #204]	; (800b1fc <sendto+0x268>)
 800b12e:	881b      	ldrh	r3, [r3, #0]
 800b130:	461a      	mov	r2, r3
 800b132:	7bfb      	ldrb	r3, [r7, #15]
 800b134:	fa42 f303 	asr.w	r3, r2, r3
 800b138:	f003 0301 	and.w	r3, r3, #1
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d005      	beq.n	800b14c <sendto+0x1b8>
 800b140:	89ba      	ldrh	r2, [r7, #12]
 800b142:	8abb      	ldrh	r3, [r7, #20]
 800b144:	429a      	cmp	r2, r3
 800b146:	d901      	bls.n	800b14c <sendto+0x1b8>
 800b148:	2300      	movs	r3, #0
 800b14a:	e052      	b.n	800b1f2 <sendto+0x25e>
      if(len <= freesize) break;
 800b14c:	89ba      	ldrh	r2, [r7, #12]
 800b14e:	8abb      	ldrh	r3, [r7, #20]
 800b150:	429a      	cmp	r2, r3
 800b152:	d900      	bls.n	800b156 <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 800b154:	e7d5      	b.n	800b102 <sendto+0x16e>
      if(len <= freesize) break;
 800b156:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 800b158:	89ba      	ldrh	r2, [r7, #12]
 800b15a:	7bfb      	ldrb	r3, [r7, #15]
 800b15c:	68b9      	ldr	r1, [r7, #8]
 800b15e:	4618      	mov	r0, r3
 800b160:	f7ff f992 	bl	800a488 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 800b164:	7bfb      	ldrb	r3, [r7, #15]
 800b166:	009b      	lsls	r3, r3, #2
 800b168:	3301      	adds	r3, #1
 800b16a:	00db      	lsls	r3, r3, #3
 800b16c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b170:	2120      	movs	r1, #32
 800b172:	4618      	mov	r0, r3
 800b174:	f7fe ffe4 	bl	800a140 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800b178:	bf00      	nop
 800b17a:	7bfb      	ldrb	r3, [r7, #15]
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	3301      	adds	r3, #1
 800b180:	00db      	lsls	r3, r3, #3
 800b182:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b186:	4618      	mov	r0, r3
 800b188:	f7fe ff8e 	bl	800a0a8 <WIZCHIP_READ>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d1f3      	bne.n	800b17a <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 800b192:	7bfb      	ldrb	r3, [r7, #15]
 800b194:	009b      	lsls	r3, r3, #2
 800b196:	3301      	adds	r3, #1
 800b198:	00db      	lsls	r3, r3, #3
 800b19a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7fe ff82 	bl	800a0a8 <WIZCHIP_READ>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	f003 031f 	and.w	r3, r3, #31
 800b1aa:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 800b1ac:	7dfb      	ldrb	r3, [r7, #23]
 800b1ae:	f003 0310 	and.w	r3, r3, #16
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d00c      	beq.n	800b1d0 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800b1b6:	7bfb      	ldrb	r3, [r7, #15]
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	3301      	adds	r3, #1
 800b1bc:	00db      	lsls	r3, r3, #3
 800b1be:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b1c2:	2110      	movs	r1, #16
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7fe ffbb 	bl	800a140 <WIZCHIP_WRITE>
         break;
 800b1ca:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800b1cc:	89bb      	ldrh	r3, [r7, #12]
 800b1ce:	e010      	b.n	800b1f2 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 800b1d0:	7dfb      	ldrb	r3, [r7, #23]
 800b1d2:	f003 0308 	and.w	r3, r3, #8
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d0db      	beq.n	800b192 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 800b1da:	7bfb      	ldrb	r3, [r7, #15]
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	3301      	adds	r3, #1
 800b1e0:	00db      	lsls	r3, r3, #3
 800b1e2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b1e6:	2108      	movs	r1, #8
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f7fe ffa9 	bl	800a140 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 800b1ee:	f06f 030c 	mvn.w	r3, #12
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3718      	adds	r7, #24
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	20003754 	.word	0x20003754

0800b200 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b088      	sub	sp, #32
 800b204:	af00      	add	r7, sp, #0
 800b206:	60b9      	str	r1, [r7, #8]
 800b208:	607b      	str	r3, [r7, #4]
 800b20a:	4603      	mov	r3, r0
 800b20c:	73fb      	strb	r3, [r7, #15]
 800b20e:	4613      	mov	r3, r2
 800b210:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 800b212:	2300      	movs	r3, #0
 800b214:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 800b216:	7bfb      	ldrb	r3, [r7, #15]
 800b218:	2b08      	cmp	r3, #8
 800b21a:	d902      	bls.n	800b222 <recvfrom+0x22>
 800b21c:	f04f 33ff 	mov.w	r3, #4294967295
 800b220:	e1d4      	b.n	800b5cc <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 800b222:	7bfb      	ldrb	r3, [r7, #15]
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	3301      	adds	r3, #1
 800b228:	00db      	lsls	r3, r3, #3
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7fe ff3c 	bl	800a0a8 <WIZCHIP_READ>
 800b230:	4603      	mov	r3, r0
 800b232:	777b      	strb	r3, [r7, #29]
 800b234:	7f7b      	ldrb	r3, [r7, #29]
 800b236:	f003 030f 	and.w	r3, r3, #15
 800b23a:	3b02      	subs	r3, #2
 800b23c:	2b02      	cmp	r3, #2
 800b23e:	d902      	bls.n	800b246 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 800b240:	f06f 0304 	mvn.w	r3, #4
 800b244:	e1c2      	b.n	800b5cc <recvfrom+0x3cc>
         break;
 800b246:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800b248:	89bb      	ldrh	r3, [r7, #12]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d102      	bne.n	800b254 <recvfrom+0x54>
 800b24e:	f06f 030d 	mvn.w	r3, #13
 800b252:	e1bb      	b.n	800b5cc <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 800b254:	7bfb      	ldrb	r3, [r7, #15]
 800b256:	4a88      	ldr	r2, [pc, #544]	; (800b478 <recvfrom+0x278>)
 800b258:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d128      	bne.n	800b2b2 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 800b260:	7bfb      	ldrb	r3, [r7, #15]
 800b262:	4618      	mov	r0, r3
 800b264:	f7ff f8c5 	bl	800a3f2 <getSn_RX_RSR>
 800b268:	4603      	mov	r3, r0
 800b26a:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800b26c:	7bfb      	ldrb	r3, [r7, #15]
 800b26e:	009b      	lsls	r3, r3, #2
 800b270:	3301      	adds	r3, #1
 800b272:	00db      	lsls	r3, r3, #3
 800b274:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800b278:	4618      	mov	r0, r3
 800b27a:	f7fe ff15 	bl	800a0a8 <WIZCHIP_READ>
 800b27e:	4603      	mov	r3, r0
 800b280:	2b00      	cmp	r3, #0
 800b282:	d102      	bne.n	800b28a <recvfrom+0x8a>
 800b284:	f06f 0303 	mvn.w	r3, #3
 800b288:	e1a0      	b.n	800b5cc <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 800b28a:	4b7c      	ldr	r3, [pc, #496]	; (800b47c <recvfrom+0x27c>)
 800b28c:	881b      	ldrh	r3, [r3, #0]
 800b28e:	461a      	mov	r2, r3
 800b290:	7bfb      	ldrb	r3, [r7, #15]
 800b292:	fa42 f303 	asr.w	r3, r2, r3
 800b296:	f003 0301 	and.w	r3, r3, #1
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d004      	beq.n	800b2a8 <recvfrom+0xa8>
 800b29e:	8bfb      	ldrh	r3, [r7, #30]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d101      	bne.n	800b2a8 <recvfrom+0xa8>
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	e191      	b.n	800b5cc <recvfrom+0x3cc>
         if(pack_len != 0) break;
 800b2a8:	8bfb      	ldrh	r3, [r7, #30]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d100      	bne.n	800b2b0 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 800b2ae:	e7d7      	b.n	800b260 <recvfrom+0x60>
         if(pack_len != 0) break;
 800b2b0:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 800b2b2:	7f7b      	ldrb	r3, [r7, #29]
 800b2b4:	f003 0307 	and.w	r3, r3, #7
 800b2b8:	2b04      	cmp	r3, #4
 800b2ba:	d079      	beq.n	800b3b0 <recvfrom+0x1b0>
 800b2bc:	2b04      	cmp	r3, #4
 800b2be:	f300 8142 	bgt.w	800b546 <recvfrom+0x346>
 800b2c2:	2b02      	cmp	r3, #2
 800b2c4:	d003      	beq.n	800b2ce <recvfrom+0xce>
 800b2c6:	2b03      	cmp	r3, #3
 800b2c8:	f000 80dc 	beq.w	800b484 <recvfrom+0x284>
 800b2cc:	e13b      	b.n	800b546 <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 800b2ce:	7bfb      	ldrb	r3, [r7, #15]
 800b2d0:	4a69      	ldr	r2, [pc, #420]	; (800b478 <recvfrom+0x278>)
 800b2d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d152      	bne.n	800b380 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 800b2da:	f107 0114 	add.w	r1, r7, #20
 800b2de:	7bfb      	ldrb	r3, [r7, #15]
 800b2e0:	2208      	movs	r2, #8
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7ff f92c 	bl	800a540 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800b2e8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ea:	009b      	lsls	r3, r3, #2
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	00db      	lsls	r3, r3, #3
 800b2f0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b2f4:	2140      	movs	r1, #64	; 0x40
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f7fe ff22 	bl	800a140 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800b2fc:	bf00      	nop
 800b2fe:	7bfb      	ldrb	r3, [r7, #15]
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	3301      	adds	r3, #1
 800b304:	00db      	lsls	r3, r3, #3
 800b306:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7fe fecc 	bl	800a0a8 <WIZCHIP_READ>
 800b310:	4603      	mov	r3, r0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d1f3      	bne.n	800b2fe <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 800b316:	7d3a      	ldrb	r2, [r7, #20]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	3301      	adds	r3, #1
 800b320:	7d7a      	ldrb	r2, [r7, #21]
 800b322:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	3302      	adds	r3, #2
 800b328:	7dba      	ldrb	r2, [r7, #22]
 800b32a:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	3303      	adds	r3, #3
 800b330:	7dfa      	ldrb	r2, [r7, #23]
 800b332:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 800b334:	7e3b      	ldrb	r3, [r7, #24]
 800b336:	b29a      	uxth	r2, r3
 800b338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b33a:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 800b33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b33e:	881b      	ldrh	r3, [r3, #0]
 800b340:	021b      	lsls	r3, r3, #8
 800b342:	b29a      	uxth	r2, r3
 800b344:	7e7b      	ldrb	r3, [r7, #25]
 800b346:	b29b      	uxth	r3, r3
 800b348:	4413      	add	r3, r2
 800b34a:	b29a      	uxth	r2, r3
 800b34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34e:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 800b350:	7eba      	ldrb	r2, [r7, #26]
 800b352:	7bfb      	ldrb	r3, [r7, #15]
 800b354:	b291      	uxth	r1, r2
 800b356:	4a48      	ldr	r2, [pc, #288]	; (800b478 <recvfrom+0x278>)
 800b358:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 800b35c:	7bfb      	ldrb	r3, [r7, #15]
 800b35e:	4a46      	ldr	r2, [pc, #280]	; (800b478 <recvfrom+0x278>)
 800b360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b364:	021b      	lsls	r3, r3, #8
 800b366:	b299      	uxth	r1, r3
 800b368:	7efb      	ldrb	r3, [r7, #27]
 800b36a:	b29a      	uxth	r2, r3
 800b36c:	7bfb      	ldrb	r3, [r7, #15]
 800b36e:	440a      	add	r2, r1
 800b370:	b291      	uxth	r1, r2
 800b372:	4a41      	ldr	r2, [pc, #260]	; (800b478 <recvfrom+0x278>)
 800b374:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 800b378:	7bfb      	ldrb	r3, [r7, #15]
 800b37a:	4a41      	ldr	r2, [pc, #260]	; (800b480 <recvfrom+0x280>)
 800b37c:	2180      	movs	r1, #128	; 0x80
 800b37e:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800b380:	7bfb      	ldrb	r3, [r7, #15]
 800b382:	4a3d      	ldr	r2, [pc, #244]	; (800b478 <recvfrom+0x278>)
 800b384:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b388:	89ba      	ldrh	r2, [r7, #12]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d202      	bcs.n	800b394 <recvfrom+0x194>
 800b38e:	89bb      	ldrh	r3, [r7, #12]
 800b390:	83fb      	strh	r3, [r7, #30]
 800b392:	e004      	b.n	800b39e <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 800b394:	7bfb      	ldrb	r3, [r7, #15]
 800b396:	4a38      	ldr	r2, [pc, #224]	; (800b478 <recvfrom+0x278>)
 800b398:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b39c:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 800b39e:	8bfb      	ldrh	r3, [r7, #30]
 800b3a0:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 800b3a2:	8bfa      	ldrh	r2, [r7, #30]
 800b3a4:	7bfb      	ldrb	r3, [r7, #15]
 800b3a6:	68b9      	ldr	r1, [r7, #8]
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f7ff f8c9 	bl	800a540 <wiz_recv_data>
			break;
 800b3ae:	e0d6      	b.n	800b55e <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 800b3b0:	7bfb      	ldrb	r3, [r7, #15]
 800b3b2:	4a31      	ldr	r2, [pc, #196]	; (800b478 <recvfrom+0x278>)
 800b3b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d146      	bne.n	800b44a <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 800b3bc:	f107 0114 	add.w	r1, r7, #20
 800b3c0:	7bfb      	ldrb	r3, [r7, #15]
 800b3c2:	2202      	movs	r2, #2
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f7ff f8bb 	bl	800a540 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800b3ca:	7bfb      	ldrb	r3, [r7, #15]
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	00db      	lsls	r3, r3, #3
 800b3d2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b3d6:	2140      	movs	r1, #64	; 0x40
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f7fe feb1 	bl	800a140 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800b3de:	bf00      	nop
 800b3e0:	7bfb      	ldrb	r3, [r7, #15]
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	00db      	lsls	r3, r3, #3
 800b3e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7fe fe5b 	bl	800a0a8 <WIZCHIP_READ>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d1f3      	bne.n	800b3e0 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 800b3f8:	7d3a      	ldrb	r2, [r7, #20]
 800b3fa:	7bfb      	ldrb	r3, [r7, #15]
 800b3fc:	b291      	uxth	r1, r2
 800b3fe:	4a1e      	ldr	r2, [pc, #120]	; (800b478 <recvfrom+0x278>)
 800b400:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 800b404:	7bfb      	ldrb	r3, [r7, #15]
 800b406:	4a1c      	ldr	r2, [pc, #112]	; (800b478 <recvfrom+0x278>)
 800b408:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b40c:	021b      	lsls	r3, r3, #8
 800b40e:	b29a      	uxth	r2, r3
 800b410:	7d7b      	ldrb	r3, [r7, #21]
 800b412:	b29b      	uxth	r3, r3
 800b414:	4413      	add	r3, r2
 800b416:	b29a      	uxth	r2, r3
 800b418:	7bfb      	ldrb	r3, [r7, #15]
 800b41a:	3a02      	subs	r2, #2
 800b41c:	b291      	uxth	r1, r2
 800b41e:	4a16      	ldr	r2, [pc, #88]	; (800b478 <recvfrom+0x278>)
 800b420:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 800b424:	7bfb      	ldrb	r3, [r7, #15]
 800b426:	4a14      	ldr	r2, [pc, #80]	; (800b478 <recvfrom+0x278>)
 800b428:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b42c:	f240 52ea 	movw	r2, #1514	; 0x5ea
 800b430:	4293      	cmp	r3, r2
 800b432:	d906      	bls.n	800b442 <recvfrom+0x242>
   			{
   			   close(sn);
 800b434:	7bfb      	ldrb	r3, [r7, #15]
 800b436:	4618      	mov	r0, r3
 800b438:	f7ff fa3c 	bl	800a8b4 <close>
   			   return SOCKFATAL_PACKLEN;
 800b43c:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 800b440:	e0c4      	b.n	800b5cc <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 800b442:	7bfb      	ldrb	r3, [r7, #15]
 800b444:	4a0e      	ldr	r2, [pc, #56]	; (800b480 <recvfrom+0x280>)
 800b446:	2180      	movs	r1, #128	; 0x80
 800b448:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800b44a:	7bfb      	ldrb	r3, [r7, #15]
 800b44c:	4a0a      	ldr	r2, [pc, #40]	; (800b478 <recvfrom+0x278>)
 800b44e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b452:	89ba      	ldrh	r2, [r7, #12]
 800b454:	429a      	cmp	r2, r3
 800b456:	d202      	bcs.n	800b45e <recvfrom+0x25e>
 800b458:	89bb      	ldrh	r3, [r7, #12]
 800b45a:	83fb      	strh	r3, [r7, #30]
 800b45c:	e004      	b.n	800b468 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 800b45e:	7bfb      	ldrb	r3, [r7, #15]
 800b460:	4a05      	ldr	r2, [pc, #20]	; (800b478 <recvfrom+0x278>)
 800b462:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b466:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 800b468:	8bfa      	ldrh	r2, [r7, #30]
 800b46a:	7bfb      	ldrb	r3, [r7, #15]
 800b46c:	68b9      	ldr	r1, [r7, #8]
 800b46e:	4618      	mov	r0, r3
 800b470:	f7ff f866 	bl	800a540 <wiz_recv_data>
		   break;
 800b474:	e073      	b.n	800b55e <recvfrom+0x35e>
 800b476:	bf00      	nop
 800b478:	20003758 	.word	0x20003758
 800b47c:	20003754 	.word	0x20003754
 800b480:	20003768 	.word	0x20003768
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 800b484:	7bfb      	ldrb	r3, [r7, #15]
 800b486:	4a53      	ldr	r2, [pc, #332]	; (800b5d4 <recvfrom+0x3d4>)
 800b488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d144      	bne.n	800b51a <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 800b490:	f107 0114 	add.w	r1, r7, #20
 800b494:	7bfb      	ldrb	r3, [r7, #15]
 800b496:	2206      	movs	r2, #6
 800b498:	4618      	mov	r0, r3
 800b49a:	f7ff f851 	bl	800a540 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800b49e:	7bfb      	ldrb	r3, [r7, #15]
 800b4a0:	009b      	lsls	r3, r3, #2
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	00db      	lsls	r3, r3, #3
 800b4a6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b4aa:	2140      	movs	r1, #64	; 0x40
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f7fe fe47 	bl	800a140 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800b4b2:	bf00      	nop
 800b4b4:	7bfb      	ldrb	r3, [r7, #15]
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	00db      	lsls	r3, r3, #3
 800b4bc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f7fe fdf1 	bl	800a0a8 <WIZCHIP_READ>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d1f3      	bne.n	800b4b4 <recvfrom+0x2b4>
   			addr[0] = head[0];
 800b4cc:	7d3a      	ldrb	r2, [r7, #20]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	7d7a      	ldrb	r2, [r7, #21]
 800b4d8:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	3302      	adds	r3, #2
 800b4de:	7dba      	ldrb	r2, [r7, #22]
 800b4e0:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	3303      	adds	r3, #3
 800b4e6:	7dfa      	ldrb	r2, [r7, #23]
 800b4e8:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 800b4ea:	7e3a      	ldrb	r2, [r7, #24]
 800b4ec:	7bfb      	ldrb	r3, [r7, #15]
 800b4ee:	b291      	uxth	r1, r2
 800b4f0:	4a38      	ldr	r2, [pc, #224]	; (800b5d4 <recvfrom+0x3d4>)
 800b4f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 800b4f6:	7bfb      	ldrb	r3, [r7, #15]
 800b4f8:	4a36      	ldr	r2, [pc, #216]	; (800b5d4 <recvfrom+0x3d4>)
 800b4fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4fe:	021b      	lsls	r3, r3, #8
 800b500:	b299      	uxth	r1, r3
 800b502:	7e7b      	ldrb	r3, [r7, #25]
 800b504:	b29a      	uxth	r2, r3
 800b506:	7bfb      	ldrb	r3, [r7, #15]
 800b508:	440a      	add	r2, r1
 800b50a:	b291      	uxth	r1, r2
 800b50c:	4a31      	ldr	r2, [pc, #196]	; (800b5d4 <recvfrom+0x3d4>)
 800b50e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 800b512:	7bfb      	ldrb	r3, [r7, #15]
 800b514:	4a30      	ldr	r2, [pc, #192]	; (800b5d8 <recvfrom+0x3d8>)
 800b516:	2180      	movs	r1, #128	; 0x80
 800b518:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 800b51a:	7bfb      	ldrb	r3, [r7, #15]
 800b51c:	4a2d      	ldr	r2, [pc, #180]	; (800b5d4 <recvfrom+0x3d4>)
 800b51e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b522:	89ba      	ldrh	r2, [r7, #12]
 800b524:	429a      	cmp	r2, r3
 800b526:	d202      	bcs.n	800b52e <recvfrom+0x32e>
 800b528:	89bb      	ldrh	r3, [r7, #12]
 800b52a:	83fb      	strh	r3, [r7, #30]
 800b52c:	e004      	b.n	800b538 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 800b52e:	7bfb      	ldrb	r3, [r7, #15]
 800b530:	4a28      	ldr	r2, [pc, #160]	; (800b5d4 <recvfrom+0x3d4>)
 800b532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b536:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 800b538:	8bfa      	ldrh	r2, [r7, #30]
 800b53a:	7bfb      	ldrb	r3, [r7, #15]
 800b53c:	68b9      	ldr	r1, [r7, #8]
 800b53e:	4618      	mov	r0, r3
 800b540:	f7fe fffe 	bl	800a540 <wiz_recv_data>
			break;
 800b544:	e00b      	b.n	800b55e <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 800b546:	8bfa      	ldrh	r2, [r7, #30]
 800b548:	7bfb      	ldrb	r3, [r7, #15]
 800b54a:	4611      	mov	r1, r2
 800b54c:	4618      	mov	r0, r3
 800b54e:	f7ff f853 	bl	800a5f8 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 800b552:	7bfb      	ldrb	r3, [r7, #15]
 800b554:	491f      	ldr	r1, [pc, #124]	; (800b5d4 <recvfrom+0x3d4>)
 800b556:	8bfa      	ldrh	r2, [r7, #30]
 800b558:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 800b55c:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 800b55e:	7bfb      	ldrb	r3, [r7, #15]
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	3301      	adds	r3, #1
 800b564:	00db      	lsls	r3, r3, #3
 800b566:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b56a:	2140      	movs	r1, #64	; 0x40
 800b56c:	4618      	mov	r0, r3
 800b56e:	f7fe fde7 	bl	800a140 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 800b572:	bf00      	nop
 800b574:	7bfb      	ldrb	r3, [r7, #15]
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	3301      	adds	r3, #1
 800b57a:	00db      	lsls	r3, r3, #3
 800b57c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b580:	4618      	mov	r0, r3
 800b582:	f7fe fd91 	bl	800a0a8 <WIZCHIP_READ>
 800b586:	4603      	mov	r3, r0
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d1f3      	bne.n	800b574 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 800b58c:	7bfb      	ldrb	r3, [r7, #15]
 800b58e:	4a11      	ldr	r2, [pc, #68]	; (800b5d4 <recvfrom+0x3d4>)
 800b590:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800b594:	7bfb      	ldrb	r3, [r7, #15]
 800b596:	8bfa      	ldrh	r2, [r7, #30]
 800b598:	1a8a      	subs	r2, r1, r2
 800b59a:	b291      	uxth	r1, r2
 800b59c:	4a0d      	ldr	r2, [pc, #52]	; (800b5d4 <recvfrom+0x3d4>)
 800b59e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 800b5a2:	7bfb      	ldrb	r3, [r7, #15]
 800b5a4:	4a0b      	ldr	r2, [pc, #44]	; (800b5d4 <recvfrom+0x3d4>)
 800b5a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d009      	beq.n	800b5c2 <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 800b5ae:	7bfb      	ldrb	r3, [r7, #15]
 800b5b0:	4a09      	ldr	r2, [pc, #36]	; (800b5d8 <recvfrom+0x3d8>)
 800b5b2:	5cd2      	ldrb	r2, [r2, r3]
 800b5b4:	7bfb      	ldrb	r3, [r7, #15]
 800b5b6:	f042 0201 	orr.w	r2, r2, #1
 800b5ba:	b2d1      	uxtb	r1, r2
 800b5bc:	4a06      	ldr	r2, [pc, #24]	; (800b5d8 <recvfrom+0x3d8>)
 800b5be:	54d1      	strb	r1, [r2, r3]
 800b5c0:	e003      	b.n	800b5ca <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 800b5c2:	7bfb      	ldrb	r3, [r7, #15]
 800b5c4:	4a04      	ldr	r2, [pc, #16]	; (800b5d8 <recvfrom+0x3d8>)
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 800b5ca:	8bfb      	ldrh	r3, [r7, #30]
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3720      	adds	r7, #32
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}
 800b5d4:	20003758 	.word	0x20003758
 800b5d8:	20003768 	.word	0x20003768

0800b5dc <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 800b5dc:	b480      	push	{r7}
 800b5de:	af00      	add	r7, sp, #0
 800b5e0:	bf00      	nop
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr

0800b5ea <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800b5ea:	b480      	push	{r7}
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	bf00      	nop
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr

0800b5f8 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 800b5f8:	b480      	push	{r7}
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	bf00      	nop
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr

0800b606 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800b606:	b480      	push	{r7}
 800b608:	af00      	add	r7, sp, #0
 800b60a:	bf00      	nop
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr

0800b614 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	b2db      	uxtb	r3, r3
 800b622:	4618      	mov	r0, r3
 800b624:	370c      	adds	r7, #12
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr

0800b62e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800b62e:	b480      	push	{r7}
 800b630:	b083      	sub	sp, #12
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
 800b636:	460b      	mov	r3, r1
 800b638:	70fb      	strb	r3, [r7, #3]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	78fa      	ldrb	r2, [r7, #3]
 800b63e:	701a      	strb	r2, [r3, #0]
 800b640:	bf00      	nop
 800b642:	370c      	adds	r7, #12
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 800b64c:	b480      	push	{r7}
 800b64e:	af00      	add	r7, sp, #0
 800b650:	2300      	movs	r3, #0
 800b652:	4618      	mov	r0, r3
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr

0800b65c <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 800b65c:	b480      	push	{r7}
 800b65e:	b083      	sub	sp, #12
 800b660:	af00      	add	r7, sp, #0
 800b662:	4603      	mov	r3, r0
 800b664:	71fb      	strb	r3, [r7, #7]
 800b666:	bf00      	nop
 800b668:	370c      	adds	r7, #12
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr
	...

0800b674 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 800b674:	b480      	push	{r7}
 800b676:	b083      	sub	sp, #12
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d002      	beq.n	800b68a <reg_wizchip_cs_cbfunc+0x16>
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d106      	bne.n	800b698 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800b68a:	4b0a      	ldr	r3, [pc, #40]	; (800b6b4 <reg_wizchip_cs_cbfunc+0x40>)
 800b68c:	4a0a      	ldr	r2, [pc, #40]	; (800b6b8 <reg_wizchip_cs_cbfunc+0x44>)
 800b68e:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 800b690:	4b08      	ldr	r3, [pc, #32]	; (800b6b4 <reg_wizchip_cs_cbfunc+0x40>)
 800b692:	4a0a      	ldr	r2, [pc, #40]	; (800b6bc <reg_wizchip_cs_cbfunc+0x48>)
 800b694:	619a      	str	r2, [r3, #24]
 800b696:	e006      	b.n	800b6a6 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 800b698:	4a06      	ldr	r2, [pc, #24]	; (800b6b4 <reg_wizchip_cs_cbfunc+0x40>)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800b69e:	4a05      	ldr	r2, [pc, #20]	; (800b6b4 <reg_wizchip_cs_cbfunc+0x40>)
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	6193      	str	r3, [r2, #24]
   }
}
 800b6a4:	bf00      	nop
 800b6a6:	bf00      	nop
 800b6a8:	370c      	adds	r7, #12
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr
 800b6b2:	bf00      	nop
 800b6b4:	20000080 	.word	0x20000080
 800b6b8:	0800b5f9 	.word	0x0800b5f9
 800b6bc:	0800b607 	.word	0x0800b607

0800b6c0 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b083      	sub	sp, #12
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800b6ca:	bf00      	nop
 800b6cc:	4b0f      	ldr	r3, [pc, #60]	; (800b70c <reg_wizchip_spi_cbfunc+0x4c>)
 800b6ce:	881b      	ldrh	r3, [r3, #0]
 800b6d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d0f9      	beq.n	800b6cc <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d002      	beq.n	800b6e4 <reg_wizchip_spi_cbfunc+0x24>
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d106      	bne.n	800b6f2 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 800b6e4:	4b09      	ldr	r3, [pc, #36]	; (800b70c <reg_wizchip_spi_cbfunc+0x4c>)
 800b6e6:	4a0a      	ldr	r2, [pc, #40]	; (800b710 <reg_wizchip_spi_cbfunc+0x50>)
 800b6e8:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800b6ea:	4b08      	ldr	r3, [pc, #32]	; (800b70c <reg_wizchip_spi_cbfunc+0x4c>)
 800b6ec:	4a09      	ldr	r2, [pc, #36]	; (800b714 <reg_wizchip_spi_cbfunc+0x54>)
 800b6ee:	621a      	str	r2, [r3, #32]
 800b6f0:	e006      	b.n	800b700 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800b6f2:	4a06      	ldr	r2, [pc, #24]	; (800b70c <reg_wizchip_spi_cbfunc+0x4c>)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 800b6f8:	4a04      	ldr	r2, [pc, #16]	; (800b70c <reg_wizchip_spi_cbfunc+0x4c>)
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	6213      	str	r3, [r2, #32]
   }
}
 800b6fe:	bf00      	nop
 800b700:	bf00      	nop
 800b702:	370c      	adds	r7, #12
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr
 800b70c:	20000080 	.word	0x20000080
 800b710:	0800b64d 	.word	0x0800b64d
 800b714:	0800b65d 	.word	0x0800b65d

0800b718 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b086      	sub	sp, #24
 800b71c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800b71e:	1d3b      	adds	r3, r7, #4
 800b720:	2206      	movs	r2, #6
 800b722:	4619      	mov	r1, r3
 800b724:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800b728:	f7fe fd58 	bl	800a1dc <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800b72c:	f107 0314 	add.w	r3, r7, #20
 800b730:	2204      	movs	r2, #4
 800b732:	4619      	mov	r1, r3
 800b734:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b738:	f7fe fd50 	bl	800a1dc <WIZCHIP_READ_BUF>
 800b73c:	f107 0310 	add.w	r3, r7, #16
 800b740:	2204      	movs	r2, #4
 800b742:	4619      	mov	r1, r3
 800b744:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800b748:	f7fe fd48 	bl	800a1dc <WIZCHIP_READ_BUF>
 800b74c:	f107 030c 	add.w	r3, r7, #12
 800b750:	2204      	movs	r2, #4
 800b752:	4619      	mov	r1, r3
 800b754:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800b758:	f7fe fd40 	bl	800a1dc <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 800b75c:	2180      	movs	r1, #128	; 0x80
 800b75e:	2000      	movs	r0, #0
 800b760:	f7fe fcee 	bl	800a140 <WIZCHIP_WRITE>
   getMR(); // for delay
 800b764:	2000      	movs	r0, #0
 800b766:	f7fe fc9f 	bl	800a0a8 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800b76a:	1d3b      	adds	r3, r7, #4
 800b76c:	2206      	movs	r2, #6
 800b76e:	4619      	mov	r1, r3
 800b770:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800b774:	f7fe fd92 	bl	800a29c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800b778:	f107 0314 	add.w	r3, r7, #20
 800b77c:	2204      	movs	r2, #4
 800b77e:	4619      	mov	r1, r3
 800b780:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b784:	f7fe fd8a 	bl	800a29c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800b788:	f107 0310 	add.w	r3, r7, #16
 800b78c:	2204      	movs	r2, #4
 800b78e:	4619      	mov	r1, r3
 800b790:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800b794:	f7fe fd82 	bl	800a29c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800b798:	f107 030c 	add.w	r3, r7, #12
 800b79c:	2204      	movs	r2, #4
 800b79e:	4619      	mov	r1, r3
 800b7a0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800b7a4:	f7fe fd7a 	bl	800a29c <WIZCHIP_WRITE_BUF>
}
 800b7a8:	bf00      	nop
 800b7aa:	3718      	adds	r7, #24
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800b7be:	f7ff ffab 	bl	800b718 <wizchip_sw_reset>
   if(txsize)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d03b      	beq.n	800b840 <wizchip_init+0x90>
   {
      tmp = 0;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	73fb      	strb	r3, [r7, #15]
 800b7d0:	e015      	b.n	800b7fe <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 800b7d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	4413      	add	r3, r2
 800b7da:	781a      	ldrb	r2, [r3, #0]
 800b7dc:	7bbb      	ldrb	r3, [r7, #14]
 800b7de:	4413      	add	r3, r2
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 800b7e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7e8:	2b10      	cmp	r3, #16
 800b7ea:	dd02      	ble.n	800b7f2 <wizchip_init+0x42>
 800b7ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b7f0:	e066      	b.n	800b8c0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800b7f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	3301      	adds	r3, #1
 800b7fa:	b2db      	uxtb	r3, r3
 800b7fc:	73fb      	strb	r3, [r7, #15]
 800b7fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b802:	2b07      	cmp	r3, #7
 800b804:	dde5      	ble.n	800b7d2 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800b806:	2300      	movs	r3, #0
 800b808:	73fb      	strb	r3, [r7, #15]
 800b80a:	e015      	b.n	800b838 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 800b80c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b810:	009b      	lsls	r3, r3, #2
 800b812:	3301      	adds	r3, #1
 800b814:	00db      	lsls	r3, r3, #3
 800b816:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800b81a:	4618      	mov	r0, r3
 800b81c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	4413      	add	r3, r2
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	4619      	mov	r1, r3
 800b828:	f7fe fc8a 	bl	800a140 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800b82c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b830:	b2db      	uxtb	r3, r3
 800b832:	3301      	adds	r3, #1
 800b834:	b2db      	uxtb	r3, r3
 800b836:	73fb      	strb	r3, [r7, #15]
 800b838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b83c:	2b07      	cmp	r3, #7
 800b83e:	dde5      	ble.n	800b80c <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d03b      	beq.n	800b8be <wizchip_init+0x10e>
   {
      tmp = 0;
 800b846:	2300      	movs	r3, #0
 800b848:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800b84a:	2300      	movs	r3, #0
 800b84c:	73fb      	strb	r3, [r7, #15]
 800b84e:	e015      	b.n	800b87c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 800b850:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b854:	683a      	ldr	r2, [r7, #0]
 800b856:	4413      	add	r3, r2
 800b858:	781a      	ldrb	r2, [r3, #0]
 800b85a:	7bbb      	ldrb	r3, [r7, #14]
 800b85c:	4413      	add	r3, r2
 800b85e:	b2db      	uxtb	r3, r3
 800b860:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 800b862:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b866:	2b10      	cmp	r3, #16
 800b868:	dd02      	ble.n	800b870 <wizchip_init+0xc0>
 800b86a:	f04f 33ff 	mov.w	r3, #4294967295
 800b86e:	e027      	b.n	800b8c0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800b870:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b874:	b2db      	uxtb	r3, r3
 800b876:	3301      	adds	r3, #1
 800b878:	b2db      	uxtb	r3, r3
 800b87a:	73fb      	strb	r3, [r7, #15]
 800b87c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b880:	2b07      	cmp	r3, #7
 800b882:	dde5      	ble.n	800b850 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800b884:	2300      	movs	r3, #0
 800b886:	73fb      	strb	r3, [r7, #15]
 800b888:	e015      	b.n	800b8b6 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800b88a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b88e:	009b      	lsls	r3, r3, #2
 800b890:	3301      	adds	r3, #1
 800b892:	00db      	lsls	r3, r3, #3
 800b894:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800b898:	4618      	mov	r0, r3
 800b89a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b89e:	683a      	ldr	r2, [r7, #0]
 800b8a0:	4413      	add	r3, r2
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	f7fe fc4b 	bl	800a140 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800b8aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8ae:	b2db      	uxtb	r3, r3
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	73fb      	strb	r3, [r7, #15]
 800b8b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8ba:	2b07      	cmp	r3, #7
 800b8bc:	dde5      	ble.n	800b88a <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 800b8be:	2300      	movs	r3, #0
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3710      	adds	r7, #16
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b082      	sub	sp, #8
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2206      	movs	r2, #6
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800b8da:	f7fe fcdf 	bl	800a29c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	330e      	adds	r3, #14
 800b8e2:	2204      	movs	r2, #4
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b8ea:	f7fe fcd7 	bl	800a29c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	330a      	adds	r3, #10
 800b8f2:	2204      	movs	r2, #4
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800b8fa:	f7fe fccf 	bl	800a29c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	3306      	adds	r3, #6
 800b902:	2204      	movs	r2, #4
 800b904:	4619      	mov	r1, r3
 800b906:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800b90a:	f7fe fcc7 	bl	800a29c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	7c9a      	ldrb	r2, [r3, #18]
 800b912:	4b0b      	ldr	r3, [pc, #44]	; (800b940 <wizchip_setnetinfo+0x78>)
 800b914:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	7cda      	ldrb	r2, [r3, #19]
 800b91a:	4b09      	ldr	r3, [pc, #36]	; (800b940 <wizchip_setnetinfo+0x78>)
 800b91c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	7d1a      	ldrb	r2, [r3, #20]
 800b922:	4b07      	ldr	r3, [pc, #28]	; (800b940 <wizchip_setnetinfo+0x78>)
 800b924:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	7d5a      	ldrb	r2, [r3, #21]
 800b92a:	4b05      	ldr	r3, [pc, #20]	; (800b940 <wizchip_setnetinfo+0x78>)
 800b92c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	7d9a      	ldrb	r2, [r3, #22]
 800b932:	4b04      	ldr	r3, [pc, #16]	; (800b944 <wizchip_setnetinfo+0x7c>)
 800b934:	701a      	strb	r2, [r3, #0]
}
 800b936:	bf00      	nop
 800b938:	3708      	adds	r7, #8
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}
 800b93e:	bf00      	nop
 800b940:	20003770 	.word	0x20003770
 800b944:	20003774 	.word	0x20003774

0800b948 <wizchip_settimeout>:
{
   return (netmode_type) getMR();
}

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	4619      	mov	r1, r3
 800b956:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800b95a:	f7fe fbf1 	bl	800a140 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	885b      	ldrh	r3, [r3, #2]
 800b962:	0a1b      	lsrs	r3, r3, #8
 800b964:	b29b      	uxth	r3, r3
 800b966:	b2db      	uxtb	r3, r3
 800b968:	4619      	mov	r1, r3
 800b96a:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 800b96e:	f7fe fbe7 	bl	800a140 <WIZCHIP_WRITE>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	885b      	ldrh	r3, [r3, #2]
 800b976:	b2db      	uxtb	r3, r3
 800b978:	4619      	mov	r1, r3
 800b97a:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800b97e:	f7fe fbdf 	bl	800a140 <WIZCHIP_WRITE>
}
 800b982:	bf00      	nop
 800b984:	3708      	adds	r7, #8
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}

0800b98a <NewMessageData>:
 * Contributors:
 *    Allan Stockdill-Mander/Ian Craggs - initial API and implementation and/or initial documentation
 *******************************************************************************/
#include "MQTTClient.h"

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 800b98a:	b480      	push	{r7}
 800b98c:	b085      	sub	sp, #20
 800b98e:	af00      	add	r7, sp, #0
 800b990:	60f8      	str	r0, [r7, #12]
 800b992:	60b9      	str	r1, [r7, #8]
 800b994:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	68ba      	ldr	r2, [r7, #8]
 800b99a:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	601a      	str	r2, [r3, #0]
}
 800b9a2:	bf00      	nop
 800b9a4:	3714      	adds	r7, #20
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr

0800b9ae <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 800b9ae:	b480      	push	{r7}
 800b9b0:	b083      	sub	sp, #12
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d003      	beq.n	800b9ca <getNextPacketId+0x1c>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	e000      	b.n	800b9cc <getNextPacketId+0x1e>
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	6013      	str	r3, [r2, #0]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	370c      	adds	r7, #12
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr

0800b9e0 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 800b9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9e2:	b087      	sub	sp, #28
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	60f8      	str	r0, [r7, #12]
 800b9e8:	60b9      	str	r1, [r7, #8]
 800b9ea:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 800b9ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b9f0:	617b      	str	r3, [r7, #20]
        sent = 0;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 800b9f6:	e018      	b.n	800ba2a <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9fc:	689c      	ldr	r4, [r3, #8]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	691a      	ldr	r2, [r3, #16]
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	18d6      	adds	r6, r2, r3
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 fcee 	bl	800c3ec <TimerLeftMS>
 800ba10:	4603      	mov	r3, r0
 800ba12:	68ba      	ldr	r2, [r7, #8]
 800ba14:	4631      	mov	r1, r6
 800ba16:	4628      	mov	r0, r5
 800ba18:	47a0      	blx	r4
 800ba1a:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	db0e      	blt.n	800ba40 <sendPacket+0x60>
            break;
        sent += rc;
 800ba22:	693a      	ldr	r2, [r7, #16]
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	4413      	add	r3, r2
 800ba28:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 800ba2a:	693a      	ldr	r2, [r7, #16]
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	da07      	bge.n	800ba42 <sendPacket+0x62>
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 fc98 	bl	800c368 <TimerIsExpired>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d0dc      	beq.n	800b9f8 <sendPacket+0x18>
 800ba3e:	e000      	b.n	800ba42 <sendPacket+0x62>
            break;
 800ba40:	bf00      	nop
    }
    if (sent == length)
 800ba42:	693a      	ldr	r2, [r7, #16]
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d10b      	bne.n	800ba62 <sendPacket+0x82>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	699b      	ldr	r3, [r3, #24]
 800ba54:	4619      	mov	r1, r3
 800ba56:	4610      	mov	r0, r2
 800ba58:	f000 fcb0 	bl	800c3bc <TimerCountdown>
        rc = SUCCESSS;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	617b      	str	r3, [r7, #20]
 800ba60:	e002      	b.n	800ba68 <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 800ba62:	f04f 33ff 	mov.w	r3, #4294967295
 800ba66:	617b      	str	r3, [r7, #20]
    return rc;
 800ba68:	697b      	ldr	r3, [r7, #20]
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	371c      	adds	r7, #28
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ba72 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 800ba72:	b580      	push	{r7, lr}
 800ba74:	b086      	sub	sp, #24
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	60f8      	str	r0, [r7, #12]
 800ba7a:	60b9      	str	r1, [r7, #8]
 800ba7c:	607a      	str	r2, [r7, #4]
 800ba7e:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	68ba      	ldr	r2, [r7, #8]
 800ba84:	651a      	str	r2, [r3, #80]	; 0x50

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800ba86:	2300      	movs	r3, #0
 800ba88:	617b      	str	r3, [r7, #20]
 800ba8a:	e009      	b.n	800baa0 <MQTTClientInit+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 800ba8c:	68fa      	ldr	r2, [r7, #12]
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	3304      	adds	r3, #4
 800ba92:	00db      	lsls	r3, r3, #3
 800ba94:	4413      	add	r3, r2
 800ba96:	2200      	movs	r2, #0
 800ba98:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	617b      	str	r3, [r7, #20]
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	2b04      	cmp	r3, #4
 800baa4:	ddf2      	ble.n	800ba8c <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	687a      	ldr	r2, [r7, #4]
 800baaa:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	683a      	ldr	r2, [r7, #0]
 800bab0:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	6a3a      	ldr	r2, [r7, #32]
 800bab6:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800babc:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bac2:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2200      	movs	r2, #0
 800bac8:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2200      	movs	r2, #0
 800bace:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	2200      	movs	r2, #0
 800bad4:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2201      	movs	r2, #1
 800bada:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	3354      	adds	r3, #84	; 0x54
 800bae0:	4618      	mov	r0, r3
 800bae2:	f000 fc34 	bl	800c34e <TimerInit>
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 800bae6:	bf00      	nop
 800bae8:	3718      	adds	r7, #24
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}

0800baee <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 800baee:	b590      	push	{r4, r7, lr}
 800baf0:	b08b      	sub	sp, #44	; 0x2c
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	60f8      	str	r0, [r7, #12]
 800baf6:	60b9      	str	r1, [r7, #8]
 800baf8:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 800bafa:	2301      	movs	r3, #1
 800bafc:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 800bafe:	2300      	movs	r3, #0
 800bb00:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 800bb02:	2304      	movs	r3, #4
 800bb04:	61fb      	str	r3, [r7, #28]

    *value = 0;
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 800bb0c:	f04f 33ff 	mov.w	r3, #4294967295
 800bb10:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800bb12:	6a3b      	ldr	r3, [r7, #32]
 800bb14:	3301      	adds	r3, #1
 800bb16:	623b      	str	r3, [r7, #32]
 800bb18:	6a3a      	ldr	r2, [r7, #32]
 800bb1a:	69fb      	ldr	r3, [r7, #28]
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	dd03      	ble.n	800bb28 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 800bb20:	f04f 33ff 	mov.w	r3, #4294967295
 800bb24:	61bb      	str	r3, [r7, #24]
            goto exit;
 800bb26:	e021      	b.n	800bb6c <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb2c:	685c      	ldr	r4, [r3, #4]
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bb32:	f107 0117 	add.w	r1, r7, #23
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2201      	movs	r2, #1
 800bb3a:	47a0      	blx	r4
 800bb3c:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 800bb3e:	69bb      	ldr	r3, [r7, #24]
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d112      	bne.n	800bb6a <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	681a      	ldr	r2, [r3, #0]
 800bb48:	7dfb      	ldrb	r3, [r7, #23]
 800bb4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb50:	fb01 f303 	mul.w	r3, r1, r3
 800bb54:	441a      	add	r2, r3
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 800bb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5c:	01db      	lsls	r3, r3, #7
 800bb5e:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 800bb60:	7dfb      	ldrb	r3, [r7, #23]
 800bb62:	b25b      	sxtb	r3, r3
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	dbd1      	blt.n	800bb0c <decodePacket+0x1e>
exit:
 800bb68:	e000      	b.n	800bb6c <decodePacket+0x7e>
            goto exit;
 800bb6a:	bf00      	nop
    return len;
 800bb6c:	6a3b      	ldr	r3, [r7, #32]
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	372c      	adds	r7, #44	; 0x2c
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd90      	pop	{r4, r7, pc}

0800bb76 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 800bb76:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb78:	b089      	sub	sp, #36	; 0x24
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	60f8      	str	r0, [r7, #12]
 800bb7e:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 800bb80:	f04f 33ff 	mov.w	r3, #4294967295
 800bb84:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 800bb86:	2300      	movs	r3, #0
 800bb88:	617b      	str	r3, [r7, #20]
    int len = 0;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb96:	685c      	ldr	r4, [r3, #4]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	695e      	ldr	r6, [r3, #20]
 800bba0:	68b8      	ldr	r0, [r7, #8]
 800bba2:	f000 fc23 	bl	800c3ec <TimerLeftMS>
 800bba6:	4603      	mov	r3, r0
 800bba8:	2201      	movs	r2, #1
 800bbaa:	4631      	mov	r1, r6
 800bbac:	4628      	mov	r0, r5
 800bbae:	47a0      	blx	r4
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	2b01      	cmp	r3, #1
 800bbb4:	d13b      	bne.n	800bc2e <readPacket+0xb8>
        goto exit;

    len = 1;
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 800bbba:	68b8      	ldr	r0, [r7, #8]
 800bbbc:	f000 fc16 	bl	800c3ec <TimerLeftMS>
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	f107 0310 	add.w	r3, r7, #16
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	68f8      	ldr	r0, [r7, #12]
 800bbca:	f7ff ff90 	bl	800baee <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	695b      	ldr	r3, [r3, #20]
 800bbd2:	3301      	adds	r3, #1
 800bbd4:	693a      	ldr	r2, [r7, #16]
 800bbd6:	4611      	mov	r1, r2
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f000 ff6c 	bl	800cab6 <MQTTPacket_encode>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	69bb      	ldr	r3, [r7, #24]
 800bbe2:	4413      	add	r3, r2
 800bbe4:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	dd16      	ble.n	800bc1a <readPacket+0xa4>
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbf0:	685c      	ldr	r4, [r3, #4]
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	695a      	ldr	r2, [r3, #20]
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	18d6      	adds	r6, r2, r3
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	607b      	str	r3, [r7, #4]
 800bc02:	68b8      	ldr	r0, [r7, #8]
 800bc04:	f000 fbf2 	bl	800c3ec <TimerLeftMS>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	4631      	mov	r1, r6
 800bc0e:	4628      	mov	r0, r5
 800bc10:	47a0      	blx	r4
 800bc12:	4602      	mov	r2, r0
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d10b      	bne.n	800bc32 <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	695b      	ldr	r3, [r3, #20]
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 800bc22:	7d3b      	ldrb	r3, [r7, #20]
 800bc24:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	61fb      	str	r3, [r7, #28]
 800bc2c:	e002      	b.n	800bc34 <readPacket+0xbe>
        goto exit;
 800bc2e:	bf00      	nop
 800bc30:	e000      	b.n	800bc34 <readPacket+0xbe>
        goto exit;
 800bc32:	bf00      	nop
exit:
    return rc;
 800bc34:	69fb      	ldr	r3, [r7, #28]
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3724      	adds	r7, #36	; 0x24
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bc3e <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 800bc3e:	b480      	push	{r7}
 800bc40:	b087      	sub	sp, #28
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
 800bc46:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	689b      	ldr	r3, [r3, #8]
 800bc50:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	685b      	ldr	r3, [r3, #4]
 800bc56:	461a      	mov	r2, r3
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	4413      	add	r3, r2
 800bc5c:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 800bc5e:	e039      	b.n	800bcd4 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	781b      	ldrb	r3, [r3, #0]
 800bc64:	2b2f      	cmp	r3, #47	; 0x2f
 800bc66:	d103      	bne.n	800bc70 <isTopicMatched+0x32>
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	2b2f      	cmp	r3, #47	; 0x2f
 800bc6e:	d13a      	bne.n	800bce6 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	781b      	ldrb	r3, [r3, #0]
 800bc74:	2b2b      	cmp	r3, #43	; 0x2b
 800bc76:	d009      	beq.n	800bc8c <isTopicMatched+0x4e>
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	2b23      	cmp	r3, #35	; 0x23
 800bc7e:	d005      	beq.n	800bc8c <isTopicMatched+0x4e>
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	781a      	ldrb	r2, [r3, #0]
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d12e      	bne.n	800bcea <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	2b2b      	cmp	r3, #43	; 0x2b
 800bc92:	d112      	bne.n	800bcba <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	3301      	adds	r3, #1
 800bc98:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 800bc9a:	e005      	b.n	800bca8 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	3301      	adds	r3, #1
 800bca0:	613b      	str	r3, [r7, #16]
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	3301      	adds	r3, #1
 800bca6:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 800bca8:	68fa      	ldr	r2, [r7, #12]
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d20b      	bcs.n	800bcc8 <isTopicMatched+0x8a>
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	2b2f      	cmp	r3, #47	; 0x2f
 800bcb6:	d1f1      	bne.n	800bc9c <isTopicMatched+0x5e>
 800bcb8:	e006      	b.n	800bcc8 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	2b23      	cmp	r3, #35	; 0x23
 800bcc0:	d102      	bne.n	800bcc8 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	3b01      	subs	r3, #1
 800bcc6:	613b      	str	r3, [r7, #16]
        curf++;
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	3301      	adds	r3, #1
 800bccc:	617b      	str	r3, [r7, #20]
        curn++;
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d007      	beq.n	800bcec <isTopicMatched+0xae>
 800bcdc:	693a      	ldr	r2, [r7, #16]
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d3bd      	bcc.n	800bc60 <isTopicMatched+0x22>
 800bce4:	e002      	b.n	800bcec <isTopicMatched+0xae>
            break;
 800bce6:	bf00      	nop
 800bce8:	e000      	b.n	800bcec <isTopicMatched+0xae>
            break;
 800bcea:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 800bcec:	693a      	ldr	r2, [r7, #16]
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d105      	bne.n	800bd00 <isTopicMatched+0xc2>
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d101      	bne.n	800bd00 <isTopicMatched+0xc2>
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	e000      	b.n	800bd02 <isTopicMatched+0xc4>
 800bd00:	2300      	movs	r3, #0
 800bd02:	b2db      	uxtb	r3, r3
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	371c      	adds	r7, #28
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b08a      	sub	sp, #40	; 0x28
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	60f8      	str	r0, [r7, #12]
 800bd18:	60b9      	str	r1, [r7, #8]
 800bd1a:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 800bd1c:	f04f 33ff 	mov.w	r3, #4294967295
 800bd20:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800bd22:	2300      	movs	r3, #0
 800bd24:	627b      	str	r3, [r7, #36]	; 0x24
 800bd26:	e03f      	b.n	800bda8 <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd2c:	3304      	adds	r3, #4
 800bd2e:	00db      	lsls	r3, r3, #3
 800bd30:	4413      	add	r3, r2
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d034      	beq.n	800bda2 <deliverMessage+0x92>
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd3c:	3304      	adds	r3, #4
 800bd3e:	00db      	lsls	r3, r3, #3
 800bd40:	4413      	add	r3, r2
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	4619      	mov	r1, r3
 800bd46:	68b8      	ldr	r0, [r7, #8]
 800bd48:	f001 f884 	bl	800ce54 <MQTTPacket_equals>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d10c      	bne.n	800bd6c <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 800bd52:	68fa      	ldr	r2, [r7, #12]
 800bd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd56:	3304      	adds	r3, #4
 800bd58:	00db      	lsls	r3, r3, #3
 800bd5a:	4413      	add	r3, r2
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	68b9      	ldr	r1, [r7, #8]
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7ff ff6c 	bl	800bc3e <isTopicMatched>
 800bd66:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d01a      	beq.n	800bda2 <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 800bd6c:	68fa      	ldr	r2, [r7, #12]
 800bd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd70:	3304      	adds	r3, #4
 800bd72:	00db      	lsls	r3, r3, #3
 800bd74:	4413      	add	r3, r2
 800bd76:	689b      	ldr	r3, [r3, #8]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d012      	beq.n	800bda2 <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 800bd7c:	f107 0318 	add.w	r3, r7, #24
 800bd80:	687a      	ldr	r2, [r7, #4]
 800bd82:	68b9      	ldr	r1, [r7, #8]
 800bd84:	4618      	mov	r0, r3
 800bd86:	f7ff fe00 	bl	800b98a <NewMessageData>
                c->messageHandlers[i].fp(&md);
 800bd8a:	68fa      	ldr	r2, [r7, #12]
 800bd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8e:	3304      	adds	r3, #4
 800bd90:	00db      	lsls	r3, r3, #3
 800bd92:	4413      	add	r3, r2
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	f107 0218 	add.w	r2, r7, #24
 800bd9a:	4610      	mov	r0, r2
 800bd9c:	4798      	blx	r3
                rc = SUCCESSS;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800bda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda4:	3301      	adds	r3, #1
 800bda6:	627b      	str	r3, [r7, #36]	; 0x24
 800bda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdaa:	2b04      	cmp	r3, #4
 800bdac:	ddbc      	ble.n	800bd28 <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 800bdae:	6a3b      	ldr	r3, [r7, #32]
 800bdb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdb4:	d112      	bne.n	800bddc <deliverMessage+0xcc>
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d00e      	beq.n	800bddc <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 800bdbe:	f107 0310 	add.w	r3, r7, #16
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	68b9      	ldr	r1, [r7, #8]
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f7ff fddf 	bl	800b98a <NewMessageData>
        c->defaultMessageHandler(&md);
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdd0:	f107 0210 	add.w	r2, r7, #16
 800bdd4:	4610      	mov	r0, r2
 800bdd6:	4798      	blx	r3
        rc = SUCCESSS;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	623b      	str	r3, [r7, #32]
    }

    return rc;
 800bddc:	6a3b      	ldr	r3, [r7, #32]
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3728      	adds	r7, #40	; 0x28
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}

0800bde6 <keepalive>:


int keepalive(MQTTClient* c)
{
 800bde6:	b580      	push	{r7, lr}
 800bde8:	b086      	sub	sp, #24
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 800bdee:	f04f 33ff 	mov.w	r3, #4294967295
 800bdf2:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	699b      	ldr	r3, [r3, #24]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d102      	bne.n	800be02 <keepalive+0x1c>
    {
        rc = SUCCESSS;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	617b      	str	r3, [r7, #20]
        goto exit;
 800be00:	e033      	b.n	800be6a <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	3354      	adds	r3, #84	; 0x54
 800be06:	4618      	mov	r0, r3
 800be08:	f000 faae 	bl	800c368 <TimerIsExpired>
 800be0c:	4603      	mov	r3, r0
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d02a      	beq.n	800be68 <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	7f1b      	ldrb	r3, [r3, #28]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d126      	bne.n	800be68 <keepalive+0x82>
        {
            Timer timer;
            TimerInit(&timer);
 800be1a:	f107 0308 	add.w	r3, r7, #8
 800be1e:	4618      	mov	r0, r3
 800be20:	f000 fa95 	bl	800c34e <TimerInit>
            TimerCountdownMS(&timer, 1000);
 800be24:	f107 0308 	add.w	r3, r7, #8
 800be28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800be2c:	4618      	mov	r0, r3
 800be2e:	f000 fab1 	bl	800c394 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	691a      	ldr	r2, [r3, #16]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	689b      	ldr	r3, [r3, #8]
 800be3a:	4619      	mov	r1, r3
 800be3c:	4610      	mov	r0, r2
 800be3e:	f000 fd6e 	bl	800c91e <MQTTSerialize_pingreq>
 800be42:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	2b00      	cmp	r3, #0
 800be48:	dd0f      	ble.n	800be6a <keepalive+0x84>
 800be4a:	f107 0308 	add.w	r3, r7, #8
 800be4e:	461a      	mov	r2, r3
 800be50:	6939      	ldr	r1, [r7, #16]
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f7ff fdc4 	bl	800b9e0 <sendPacket>
 800be58:	6178      	str	r0, [r7, #20]
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d104      	bne.n	800be6a <keepalive+0x84>
                c->ping_outstanding = 1;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2201      	movs	r2, #1
 800be64:	771a      	strb	r2, [r3, #28]
 800be66:	e000      	b.n	800be6a <keepalive+0x84>
        }
    }

exit:
 800be68:	bf00      	nop
    return rc;
 800be6a:	697b      	ldr	r3, [r7, #20]
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3718      	adds	r7, #24
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 800be74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be76:	b095      	sub	sp, #84	; 0x54
 800be78:	af06      	add	r7, sp, #24
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 800be7e:	6839      	ldr	r1, [r7, #0]
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f7ff fe78 	bl	800bb76 <readPacket>
 800be86:	4603      	mov	r3, r0
 800be88:	85fb      	strh	r3, [r7, #46]	; 0x2e

    int len = 0,
 800be8a:	2300      	movs	r3, #0
 800be8c:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESSS;
 800be8e:	2300      	movs	r3, #0
 800be90:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
 800be92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800be94:	3b02      	subs	r3, #2
 800be96:	2b0b      	cmp	r3, #11
 800be98:	f200 80c0 	bhi.w	800c01c <cycle+0x1a8>
 800be9c:	a201      	add	r2, pc, #4	; (adr r2, 800bea4 <cycle+0x30>)
 800be9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea2:	bf00      	nop
 800bea4:	0800c01d 	.word	0x0800c01d
 800bea8:	0800bed5 	.word	0x0800bed5
 800beac:	0800c01d 	.word	0x0800c01d
 800beb0:	0800bf9d 	.word	0x0800bf9d
 800beb4:	0800c01d 	.word	0x0800c01d
 800beb8:	0800c01d 	.word	0x0800c01d
 800bebc:	0800c01d 	.word	0x0800c01d
 800bec0:	0800c01d 	.word	0x0800c01d
 800bec4:	0800c01d 	.word	0x0800c01d
 800bec8:	0800c01d 	.word	0x0800c01d
 800becc:	0800c01d 	.word	0x0800c01d
 800bed0:	0800c00f 	.word	0x0800c00f
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 800bed8:	687a      	ldr	r2, [r7, #4]
 800beda:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 800bedc:	4616      	mov	r6, r2
 800bede:	f107 0210 	add.w	r2, r7, #16
 800bee2:	1d15      	adds	r5, r2, #4
 800bee4:	f107 0210 	add.w	r2, r7, #16
 800bee8:	1c54      	adds	r4, r2, #1
 800beea:	f107 010c 	add.w	r1, r7, #12
 800beee:	f107 0210 	add.w	r2, r7, #16
 800bef2:	1c90      	adds	r0, r2, #2
 800bef4:	9604      	str	r6, [sp, #16]
 800bef6:	9303      	str	r3, [sp, #12]
 800bef8:	f107 0310 	add.w	r3, r7, #16
 800befc:	330c      	adds	r3, #12
 800befe:	9302      	str	r3, [sp, #8]
 800bf00:	f107 0310 	add.w	r3, r7, #16
 800bf04:	3308      	adds	r3, #8
 800bf06:	9301      	str	r3, [sp, #4]
 800bf08:	f107 0320 	add.w	r3, r7, #32
 800bf0c:	9300      	str	r3, [sp, #0]
 800bf0e:	462b      	mov	r3, r5
 800bf10:	4622      	mov	r2, r4
 800bf12:	f000 fd13 	bl	800c93c <MQTTDeserialize_publish>
 800bf16:	4603      	mov	r3, r0
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	f040 8083 	bne.w	800c024 <cycle+0x1b0>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	b2db      	uxtb	r3, r3
 800bf22:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 800bf24:	f107 0210 	add.w	r2, r7, #16
 800bf28:	f107 0320 	add.w	r3, r7, #32
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f7ff feee 	bl	800bd10 <deliverMessage>
            if (msg.qos != QOS0)
 800bf34:	7c3b      	ldrb	r3, [r7, #16]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d06d      	beq.n	800c016 <cycle+0x1a2>
            {
                if (msg.qos == QOS1)
 800bf3a:	7c3b      	ldrb	r3, [r7, #16]
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d10c      	bne.n	800bf5a <cycle+0xe6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6918      	ldr	r0, [r3, #16]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	4619      	mov	r1, r3
 800bf4a:	8abb      	ldrh	r3, [r7, #20]
 800bf4c:	9300      	str	r3, [sp, #0]
 800bf4e:	2300      	movs	r3, #0
 800bf50:	2204      	movs	r2, #4
 800bf52:	f001 f84c 	bl	800cfee <MQTTSerialize_ack>
 800bf56:	6378      	str	r0, [r7, #52]	; 0x34
 800bf58:	e00e      	b.n	800bf78 <cycle+0x104>
                else if (msg.qos == QOS2)
 800bf5a:	7c3b      	ldrb	r3, [r7, #16]
 800bf5c:	2b02      	cmp	r3, #2
 800bf5e:	d10b      	bne.n	800bf78 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6918      	ldr	r0, [r3, #16]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	689b      	ldr	r3, [r3, #8]
 800bf68:	4619      	mov	r1, r3
 800bf6a:	8abb      	ldrh	r3, [r7, #20]
 800bf6c:	9300      	str	r3, [sp, #0]
 800bf6e:	2300      	movs	r3, #0
 800bf70:	2205      	movs	r2, #5
 800bf72:	f001 f83c 	bl	800cfee <MQTTSerialize_ack>
 800bf76:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 800bf78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	dc03      	bgt.n	800bf86 <cycle+0x112>
                    rc = FAILURE;
 800bf7e:	f04f 33ff 	mov.w	r3, #4294967295
 800bf82:	633b      	str	r3, [r7, #48]	; 0x30
 800bf84:	e005      	b.n	800bf92 <cycle+0x11e>
                else
                    rc = sendPacket(c, len, timer);
 800bf86:	683a      	ldr	r2, [r7, #0]
 800bf88:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f7ff fd28 	bl	800b9e0 <sendPacket>
 800bf90:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 800bf92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf98:	d13d      	bne.n	800c016 <cycle+0x1a2>
                    goto exit; // there was a problem
 800bf9a:	e044      	b.n	800c026 <cycle+0x1b2>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	695c      	ldr	r4, [r3, #20]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	68db      	ldr	r3, [r3, #12]
 800bfa4:	f107 020a 	add.w	r2, r7, #10
 800bfa8:	f107 0109 	add.w	r1, r7, #9
 800bfac:	f107 0008 	add.w	r0, r7, #8
 800bfb0:	9300      	str	r3, [sp, #0]
 800bfb2:	4623      	mov	r3, r4
 800bfb4:	f000 fd34 	bl	800ca20 <MQTTDeserialize_ack>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	2b01      	cmp	r3, #1
 800bfbc:	d003      	beq.n	800bfc6 <cycle+0x152>
                rc = FAILURE;
 800bfbe:	f04f 33ff 	mov.w	r3, #4294967295
 800bfc2:	633b      	str	r3, [r7, #48]	; 0x30
 800bfc4:	e01e      	b.n	800c004 <cycle+0x190>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6918      	ldr	r0, [r3, #16]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	4619      	mov	r1, r3
 800bfd0:	897b      	ldrh	r3, [r7, #10]
 800bfd2:	9300      	str	r3, [sp, #0]
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	2206      	movs	r2, #6
 800bfd8:	f001 f809 	bl	800cfee <MQTTSerialize_ack>
 800bfdc:	6378      	str	r0, [r7, #52]	; 0x34
 800bfde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	dc03      	bgt.n	800bfec <cycle+0x178>
                rc = FAILURE;
 800bfe4:	f04f 33ff 	mov.w	r3, #4294967295
 800bfe8:	633b      	str	r3, [r7, #48]	; 0x30
 800bfea:	e00b      	b.n	800c004 <cycle+0x190>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
 800bfec:	683a      	ldr	r2, [r7, #0]
 800bfee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f7ff fcf5 	bl	800b9e0 <sendPacket>
 800bff6:	6338      	str	r0, [r7, #48]	; 0x30
 800bff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d002      	beq.n	800c004 <cycle+0x190>
                rc = FAILURE; // there was a problem
 800bffe:	f04f 33ff 	mov.w	r3, #4294967295
 800c002:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 800c004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c00a:	d106      	bne.n	800c01a <cycle+0x1a6>
                goto exit; // there was a problem
 800c00c:	e00b      	b.n	800c026 <cycle+0x1b2>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2200      	movs	r2, #0
 800c012:	771a      	strb	r2, [r3, #28]
            break;
 800c014:	e002      	b.n	800c01c <cycle+0x1a8>
            break;
 800c016:	bf00      	nop
 800c018:	e000      	b.n	800c01c <cycle+0x1a8>
            break;
 800c01a:	bf00      	nop
    }
    keepalive(c);
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f7ff fee2 	bl	800bde6 <keepalive>
 800c022:	e000      	b.n	800c026 <cycle+0x1b2>
                goto exit;
 800c024:	bf00      	nop
exit:
    if (rc == SUCCESSS)
 800c026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d101      	bne.n	800c030 <cycle+0x1bc>
        rc = packet_type;
 800c02c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c02e:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
 800c030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800c032:	4618      	mov	r0, r3
 800c034:	373c      	adds	r7, #60	; 0x3c
 800c036:	46bd      	mov	sp, r7
 800c038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c03a:	bf00      	nop

0800c03c <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b086      	sub	sp, #24
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	6039      	str	r1, [r7, #0]
    int rc = SUCCESSS;
 800c046:	2300      	movs	r3, #0
 800c048:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 800c04a:	f107 030c 	add.w	r3, r7, #12
 800c04e:	4618      	mov	r0, r3
 800c050:	f000 f97d 	bl	800c34e <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 800c054:	683a      	ldr	r2, [r7, #0]
 800c056:	f107 030c 	add.w	r3, r7, #12
 800c05a:	4611      	mov	r1, r2
 800c05c:	4618      	mov	r0, r3
 800c05e:	f000 f999 	bl	800c394 <TimerCountdownMS>

    if (cycle(c, &timer) == FAILURE)
 800c062:	f107 030c 	add.w	r3, r7, #12
 800c066:	4619      	mov	r1, r3
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f7ff ff03 	bl	800be74 <cycle>
 800c06e:	4603      	mov	r3, r0
 800c070:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c074:	d102      	bne.n	800c07c <MQTTYield+0x40>
    {
        rc = FAILURE;
 800c076:	f04f 33ff 	mov.w	r3, #4294967295
 800c07a:	617b      	str	r3, [r7, #20]
    }

    return rc;
 800c07c:	697b      	ldr	r3, [r7, #20]
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3718      	adds	r7, #24
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}

0800c086 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 800c086:	b580      	push	{r7, lr}
 800c088:	b086      	sub	sp, #24
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	60f8      	str	r0, [r7, #12]
 800c08e:	60b9      	str	r1, [r7, #8]
 800c090:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 800c092:	f04f 33ff 	mov.w	r3, #4294967295
 800c096:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 f965 	bl	800c368 <TimerIsExpired>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d109      	bne.n	800c0b8 <waitfor+0x32>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);
 800c0a4:	6879      	ldr	r1, [r7, #4]
 800c0a6:	68f8      	ldr	r0, [r7, #12]
 800c0a8:	f7ff fee4 	bl	800be74 <cycle>
 800c0ac:	6178      	str	r0, [r7, #20]
 800c0ae:	697a      	ldr	r2, [r7, #20]
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d1f0      	bne.n	800c098 <waitfor+0x12>
 800c0b6:	e000      	b.n	800c0ba <waitfor+0x34>
            break; // we timed out
 800c0b8:	bf00      	nop

    return rc;
 800c0ba:	697b      	ldr	r3, [r7, #20]
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3718      	adds	r7, #24
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b09e      	sub	sp, #120	; 0x78
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 800c0ce:	f04f 33ff 	mov.w	r3, #4294967295
 800c0d2:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 800c0d4:	4a3d      	ldr	r2, [pc, #244]	; (800c1cc <MQTTConnect+0x108>)
 800c0d6:	f107 0310 	add.w	r3, r7, #16
 800c0da:	4611      	mov	r1, r2
 800c0dc:	2258      	movs	r2, #88	; 0x58
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f001 fe68 	bl	800ddb4 <memcpy>
    int len = 0;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6a1b      	ldr	r3, [r3, #32]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d15d      	bne.n	800c1ac <MQTTConnect+0xe8>
		goto exit;

    TimerInit(&connect_timer);
 800c0f0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f000 f92a 	bl	800c34e <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	685a      	ldr	r2, [r3, #4]
 800c0fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c102:	4611      	mov	r1, r2
 800c104:	4618      	mov	r0, r3
 800c106:	f000 f945 	bl	800c394 <TimerCountdownMS>

    if (options == 0)
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d102      	bne.n	800c116 <MQTTConnect+0x52>
        options = &default_options; /* set default options if none were supplied */
 800c110:	f107 0310 	add.w	r3, r7, #16
 800c114:	603b      	str	r3, [r7, #0]

    c->keepAliveInterval = options->keepAliveInterval;
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	8b1b      	ldrh	r3, [r3, #24]
 800c11a:	461a      	mov	r2, r3
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	699b      	ldr	r3, [r3, #24]
 800c12a:	4619      	mov	r1, r3
 800c12c:	4610      	mov	r0, r2
 800c12e:	f000 f945 	bl	800c3bc <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6918      	ldr	r0, [r3, #16]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	689b      	ldr	r3, [r3, #8]
 800c13a:	683a      	ldr	r2, [r7, #0]
 800c13c:	4619      	mov	r1, r3
 800c13e:	f000 fa75 	bl	800c62c <MQTTSerialize_connect>
 800c142:	6738      	str	r0, [r7, #112]	; 0x70
 800c144:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c146:	2b00      	cmp	r3, #0
 800c148:	dd32      	ble.n	800c1b0 <MQTTConnect+0xec>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
 800c14a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c14e:	461a      	mov	r2, r3
 800c150:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f7ff fc44 	bl	800b9e0 <sendPacket>
 800c158:	6778      	str	r0, [r7, #116]	; 0x74
 800c15a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d129      	bne.n	800c1b4 <MQTTConnect+0xf0>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 800c160:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c164:	461a      	mov	r2, r3
 800c166:	2102      	movs	r1, #2
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f7ff ff8c 	bl	800c086 <waitfor>
 800c16e:	4603      	mov	r3, r0
 800c170:	2b02      	cmp	r3, #2
 800c172:	d117      	bne.n	800c1a4 <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 800c174:	23ff      	movs	r3, #255	; 0xff
 800c176:	73fb      	strb	r3, [r7, #15]
        unsigned char sessionPresent = 0;
 800c178:	2300      	movs	r3, #0
 800c17a:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	695a      	ldr	r2, [r3, #20]
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	68db      	ldr	r3, [r3, #12]
 800c184:	f107 010f 	add.w	r1, r7, #15
 800c188:	f107 000e 	add.w	r0, r7, #14
 800c18c:	f000 fb3a 	bl	800c804 <MQTTDeserialize_connack>
 800c190:	4603      	mov	r3, r0
 800c192:	2b01      	cmp	r3, #1
 800c194:	d102      	bne.n	800c19c <MQTTConnect+0xd8>
            rc = connack_rc;
 800c196:	7bfb      	ldrb	r3, [r7, #15]
 800c198:	677b      	str	r3, [r7, #116]	; 0x74
 800c19a:	e00c      	b.n	800c1b6 <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 800c19c:	f04f 33ff 	mov.w	r3, #4294967295
 800c1a0:	677b      	str	r3, [r7, #116]	; 0x74
 800c1a2:	e008      	b.n	800c1b6 <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 800c1a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c1a8:	677b      	str	r3, [r7, #116]	; 0x74
 800c1aa:	e004      	b.n	800c1b6 <MQTTConnect+0xf2>
		goto exit;
 800c1ac:	bf00      	nop
 800c1ae:	e002      	b.n	800c1b6 <MQTTConnect+0xf2>
        goto exit;
 800c1b0:	bf00      	nop
 800c1b2:	e000      	b.n	800c1b6 <MQTTConnect+0xf2>
        goto exit; // there was a problem
 800c1b4:	bf00      	nop

exit:
    if (rc == SUCCESSS)
 800c1b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d102      	bne.n	800c1c2 <MQTTConnect+0xfe>
        c->isconnected = 1;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2201      	movs	r2, #1
 800c1c0:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
 800c1c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3778      	adds	r7, #120	; 0x78
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}
 800c1cc:	0800fa6c 	.word	0x0800fa6c

0800c1d0 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 800c1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1d2:	b097      	sub	sp, #92	; 0x5c
 800c1d4:	af08      	add	r7, sp, #32
 800c1d6:	60f8      	str	r0, [r7, #12]
 800c1d8:	60b9      	str	r1, [r7, #8]
 800c1da:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 800c1dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c1e0:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	61fb      	str	r3, [r7, #28]
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	623b      	str	r3, [r7, #32]
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	61fb      	str	r3, [r7, #28]
    int len = 0;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	6a1b      	ldr	r3, [r3, #32]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	f000 809b 	beq.w	800c336 <MQTTPublish+0x166>
		goto exit;

    TimerInit(&timer);
 800c200:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c204:	4618      	mov	r0, r3
 800c206:	f000 f8a2 	bl	800c34e <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	685a      	ldr	r2, [r3, #4]
 800c20e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c212:	4611      	mov	r1, r2
 800c214:	4618      	mov	r0, r3
 800c216:	f000 f8bd 	bl	800c394 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	2b01      	cmp	r3, #1
 800c220:	d003      	beq.n	800c22a <MQTTPublish+0x5a>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	2b02      	cmp	r3, #2
 800c228:	d106      	bne.n	800c238 <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 800c22a:	68f8      	ldr	r0, [r7, #12]
 800c22c:	f7ff fbbf 	bl	800b9ae <getNextPacketId>
 800c230:	4603      	mov	r3, r0
 800c232:	b29a      	uxth	r2, r3
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	691b      	ldr	r3, [r3, #16]
 800c23c:	603b      	str	r3, [r7, #0]
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	689b      	ldr	r3, [r3, #8]
 800c242:	469c      	mov	ip, r3
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	469e      	mov	lr, r3
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	785d      	ldrb	r5, [r3, #1]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	689b      	ldr	r3, [r3, #8]
 800c256:	687a      	ldr	r2, [r7, #4]
 800c258:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 800c25a:	9206      	str	r2, [sp, #24]
 800c25c:	9305      	str	r3, [sp, #20]
 800c25e:	ac02      	add	r4, sp, #8
 800c260:	f107 031c 	add.w	r3, r7, #28
 800c264:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c268:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c26c:	9601      	str	r6, [sp, #4]
 800c26e:	9500      	str	r5, [sp, #0]
 800c270:	4673      	mov	r3, lr
 800c272:	2200      	movs	r2, #0
 800c274:	4661      	mov	r1, ip
 800c276:	6838      	ldr	r0, [r7, #0]
 800c278:	f000 fe43 	bl	800cf02 <MQTTSerialize_publish>
 800c27c:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 800c27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c280:	2b00      	cmp	r3, #0
 800c282:	dd5a      	ble.n	800c33a <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 800c284:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c288:	461a      	mov	r2, r3
 800c28a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c28c:	68f8      	ldr	r0, [r7, #12]
 800c28e:	f7ff fba7 	bl	800b9e0 <sendPacket>
 800c292:	6378      	str	r0, [r7, #52]	; 0x34
 800c294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c296:	2b00      	cmp	r3, #0
 800c298:	d151      	bne.n	800c33e <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d122      	bne.n	800c2e8 <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 800c2a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	2104      	movs	r1, #4
 800c2aa:	68f8      	ldr	r0, [r7, #12]
 800c2ac:	f7ff feeb 	bl	800c086 <waitfor>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	2b04      	cmp	r3, #4
 800c2b4:	d114      	bne.n	800c2e0 <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	695c      	ldr	r4, [r3, #20]
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	68db      	ldr	r3, [r3, #12]
 800c2be:	f107 021a 	add.w	r2, r7, #26
 800c2c2:	f107 0119 	add.w	r1, r7, #25
 800c2c6:	f107 0018 	add.w	r0, r7, #24
 800c2ca:	9300      	str	r3, [sp, #0]
 800c2cc:	4623      	mov	r3, r4
 800c2ce:	f000 fba7 	bl	800ca20 <MQTTDeserialize_ack>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d035      	beq.n	800c344 <MQTTPublish+0x174>
                rc = FAILURE;
 800c2d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c2dc:	637b      	str	r3, [r7, #52]	; 0x34
 800c2de:	e031      	b.n	800c344 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 800c2e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c2e4:	637b      	str	r3, [r7, #52]	; 0x34
 800c2e6:	e02d      	b.n	800c344 <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	2b02      	cmp	r3, #2
 800c2ee:	d128      	bne.n	800c342 <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 800c2f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	2107      	movs	r1, #7
 800c2f8:	68f8      	ldr	r0, [r7, #12]
 800c2fa:	f7ff fec4 	bl	800c086 <waitfor>
 800c2fe:	4603      	mov	r3, r0
 800c300:	2b07      	cmp	r3, #7
 800c302:	d114      	bne.n	800c32e <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	695c      	ldr	r4, [r3, #20]
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	68db      	ldr	r3, [r3, #12]
 800c30c:	f107 0216 	add.w	r2, r7, #22
 800c310:	f107 0115 	add.w	r1, r7, #21
 800c314:	f107 0014 	add.w	r0, r7, #20
 800c318:	9300      	str	r3, [sp, #0]
 800c31a:	4623      	mov	r3, r4
 800c31c:	f000 fb80 	bl	800ca20 <MQTTDeserialize_ack>
 800c320:	4603      	mov	r3, r0
 800c322:	2b01      	cmp	r3, #1
 800c324:	d00e      	beq.n	800c344 <MQTTPublish+0x174>
                rc = FAILURE;
 800c326:	f04f 33ff 	mov.w	r3, #4294967295
 800c32a:	637b      	str	r3, [r7, #52]	; 0x34
 800c32c:	e00a      	b.n	800c344 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 800c32e:	f04f 33ff 	mov.w	r3, #4294967295
 800c332:	637b      	str	r3, [r7, #52]	; 0x34
 800c334:	e006      	b.n	800c344 <MQTTPublish+0x174>
		goto exit;
 800c336:	bf00      	nop
 800c338:	e004      	b.n	800c344 <MQTTPublish+0x174>
        goto exit;
 800c33a:	bf00      	nop
 800c33c:	e002      	b.n	800c344 <MQTTPublish+0x174>
        goto exit; // there was a problem
 800c33e:	bf00      	nop
 800c340:	e000      	b.n	800c344 <MQTTPublish+0x174>
    }

exit:
 800c342:	bf00      	nop
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 800c344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c346:	4618      	mov	r0, r3
 800c348:	373c      	adds	r7, #60	; 0x3c
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c34e <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 800c34e:	b480      	push	{r7}
 800c350:	b083      	sub	sp, #12
 800c352:	af00      	add	r7, sp, #0
 800c354:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2200      	movs	r2, #0
 800c35a:	605a      	str	r2, [r3, #4]
}
 800c35c:	bf00      	nop
 800c35e:	370c      	adds	r7, #12
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr

0800c368 <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 800c368:	b480      	push	{r7}
 800c36a:	b085      	sub	sp, #20
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	685a      	ldr	r2, [r3, #4]
 800c374:	4b06      	ldr	r3, [pc, #24]	; (800c390 <TimerIsExpired+0x28>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	1ad3      	subs	r3, r2, r3
 800c37a:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	0fdb      	lsrs	r3, r3, #31
 800c380:	b2db      	uxtb	r3, r3
}
 800c382:	4618      	mov	r0, r3
 800c384:	3714      	adds	r7, #20
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr
 800c38e:	bf00      	nop
 800c390:	20003778 	.word	0x20003778

0800c394 <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 800c39e:	4b06      	ldr	r3, [pc, #24]	; (800c3b8 <TimerCountdownMS+0x24>)
 800c3a0:	681a      	ldr	r2, [r3, #0]
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	441a      	add	r2, r3
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	605a      	str	r2, [r3, #4]
}
 800c3aa:	bf00      	nop
 800c3ac:	370c      	adds	r7, #12
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b4:	4770      	bx	lr
 800c3b6:	bf00      	nop
 800c3b8:	20003778 	.word	0x20003778

0800c3bc <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 800c3bc:	b480      	push	{r7}
 800c3be:	b083      	sub	sp, #12
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c3cc:	fb03 f202 	mul.w	r2, r3, r2
 800c3d0:	4b05      	ldr	r3, [pc, #20]	; (800c3e8 <TimerCountdown+0x2c>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	441a      	add	r2, r3
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	605a      	str	r2, [r3, #4]
}
 800c3da:	bf00      	nop
 800c3dc:	370c      	adds	r7, #12
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e4:	4770      	bx	lr
 800c3e6:	bf00      	nop
 800c3e8:	20003778 	.word	0x20003778

0800c3ec <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 800c3ec:	b480      	push	{r7}
 800c3ee:	b085      	sub	sp, #20
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	685a      	ldr	r2, [r3, #4]
 800c3f8:	4b06      	ldr	r3, [pc, #24]	; (800c414 <TimerLeftMS+0x28>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	1ad3      	subs	r3, r2, r3
 800c3fe:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 800c406:	4618      	mov	r0, r3
 800c408:	3714      	adds	r7, #20
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr
 800c412:	bf00      	nop
 800c414:	20003778 	.word	0x20003778

0800c418 <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 800c418:	b480      	push	{r7}
 800c41a:	b083      	sub	sp, #12
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	683a      	ldr	r2, [r7, #0]
 800c426:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	4a07      	ldr	r2, [pc, #28]	; (800c448 <NewNetwork+0x30>)
 800c42c:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	4a06      	ldr	r2, [pc, #24]	; (800c44c <NewNetwork+0x34>)
 800c432:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	4a06      	ldr	r2, [pc, #24]	; (800c450 <NewNetwork+0x38>)
 800c438:	60da      	str	r2, [r3, #12]
}
 800c43a:	bf00      	nop
 800c43c:	370c      	adds	r7, #12
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr
 800c446:	bf00      	nop
 800c448:	0800c455 	.word	0x0800c455
 800c44c:	0800c4af 	.word	0x0800c4af
 800c450:	0800c4f7 	.word	0x0800c4f7

0800c454 <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b084      	sub	sp, #16
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	607a      	str	r2, [r7, #4]
 800c460:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	009b      	lsls	r3, r3, #2
 800c468:	3301      	adds	r3, #1
 800c46a:	00db      	lsls	r3, r3, #3
 800c46c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c470:	4618      	mov	r0, r3
 800c472:	f7fd fe19 	bl	800a0a8 <WIZCHIP_READ>
 800c476:	4603      	mov	r3, r0
 800c478:	2b17      	cmp	r3, #23
 800c47a:	d113      	bne.n	800c4a4 <w5x00_read+0x50>
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	b2db      	uxtb	r3, r3
 800c482:	4618      	mov	r0, r3
 800c484:	f7fd ffb5 	bl	800a3f2 <getSn_RX_RSR>
 800c488:	4603      	mov	r3, r0
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d00a      	beq.n	800c4a4 <w5x00_read+0x50>
		return recv(n->my_socket, buffer, len);
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	b2db      	uxtb	r3, r3
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	b292      	uxth	r2, r2
 800c498:	68b9      	ldr	r1, [r7, #8]
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7fe fcc4 	bl	800ae28 <recv>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	e000      	b.n	800c4a6 <w5x00_read+0x52>

	return SOCK_ERROR;
 800c4a4:	2300      	movs	r3, #0
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3710      	adds	r7, #16
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}

0800c4ae <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 800c4ae:	b580      	push	{r7, lr}
 800c4b0:	b084      	sub	sp, #16
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	60f8      	str	r0, [r7, #12]
 800c4b6:	60b9      	str	r1, [r7, #8]
 800c4b8:	607a      	str	r2, [r7, #4]
 800c4ba:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	009b      	lsls	r3, r3, #2
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	00db      	lsls	r3, r3, #3
 800c4c6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7fd fdec 	bl	800a0a8 <WIZCHIP_READ>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	2b17      	cmp	r3, #23
 800c4d4:	d10a      	bne.n	800c4ec <w5x00_write+0x3e>
		return send(n->my_socket, buffer, len);
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	b2db      	uxtb	r3, r3
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	b292      	uxth	r2, r2
 800c4e0:	68b9      	ldr	r1, [r7, #8]
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f7fe fba6 	bl	800ac34 <send>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	e000      	b.n	800c4ee <w5x00_write+0x40>

	return SOCK_ERROR;
 800c4ec:	2300      	movs	r3, #0
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3710      	adds	r7, #16
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}

0800c4f6 <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 800c4f6:	b580      	push	{r7, lr}
 800c4f8:	b082      	sub	sp, #8
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	b2db      	uxtb	r3, r3
 800c504:	4618      	mov	r0, r3
 800c506:	f7fe fb1f 	bl	800ab48 <disconnect>
}
 800c50a:	bf00      	nop
 800c50c:	3708      	adds	r7, #8
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}

0800c512 <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 800c512:	b580      	push	{r7, lr}
 800c514:	b086      	sub	sp, #24
 800c516:	af00      	add	r7, sp, #0
 800c518:	60f8      	str	r0, [r7, #12]
 800c51a:	60b9      	str	r1, [r7, #8]
 800c51c:	4613      	mov	r3, r2
 800c51e:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 800c520:	f243 0339 	movw	r3, #12345	; 0x3039
 800c524:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	b2d8      	uxtb	r0, r3
 800c52c:	8afa      	ldrh	r2, [r7, #22]
 800c52e:	2300      	movs	r3, #0
 800c530:	2101      	movs	r1, #1
 800c532:	f7fe f8a9 	bl	800a688 <socket>
 800c536:	4603      	mov	r3, r0
 800c538:	461a      	mov	r2, r3
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	429a      	cmp	r2, r3
 800c540:	d001      	beq.n	800c546 <ConnectNetwork+0x34>
		return SOCK_ERROR;
 800c542:	2300      	movs	r3, #0
 800c544:	e00d      	b.n	800c562 <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	b2db      	uxtb	r3, r3
 800c54c:	88fa      	ldrh	r2, [r7, #6]
 800c54e:	68b9      	ldr	r1, [r7, #8]
 800c550:	4618      	mov	r0, r3
 800c552:	f7fe fa1d 	bl	800a990 <connect>
 800c556:	4603      	mov	r3, r0
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d001      	beq.n	800c560 <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 800c55c:	2300      	movs	r3, #0
 800c55e:	e000      	b.n	800c562 <ConnectNetwork+0x50>

	return SOCK_OK;
 800c560:	2301      	movs	r3, #1
}
 800c562:	4618      	mov	r0, r3
 800c564:	3718      	adds	r7, #24
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 800c56a:	b590      	push	{r4, r7, lr}
 800c56c:	b085      	sub	sp, #20
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
	int len = 0;
 800c572:	2300      	movs	r3, #0
 800c574:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	7a1b      	ldrb	r3, [r3, #8]
 800c57a:	2b03      	cmp	r3, #3
 800c57c:	d102      	bne.n	800c584 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 800c57e:	230c      	movs	r3, #12
 800c580:	60fb      	str	r3, [r7, #12]
 800c582:	e005      	b.n	800c590 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	7a1b      	ldrb	r3, [r3, #8]
 800c588:	2b04      	cmp	r3, #4
 800c58a:	d101      	bne.n	800c590 <MQTTSerialize_connectLength+0x26>
		len = 10;
 800c58c:	230a      	movs	r3, #10
 800c58e:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	330c      	adds	r3, #12
 800c594:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c598:	f000 fc43 	bl	800ce22 <MQTTstrlen>
 800c59c:	4603      	mov	r3, r0
 800c59e:	3302      	adds	r3, #2
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	4413      	add	r3, r2
 800c5a4:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	7edb      	ldrb	r3, [r3, #27]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d013      	beq.n	800c5d6 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	3324      	adds	r3, #36	; 0x24
 800c5b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c5b6:	f000 fc34 	bl	800ce22 <MQTTstrlen>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	1c9c      	adds	r4, r3, #2
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	3330      	adds	r3, #48	; 0x30
 800c5c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c5c6:	f000 fc2c 	bl	800ce22 <MQTTstrlen>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	4423      	add	r3, r4
 800c5ce:	3302      	adds	r3, #2
 800c5d0:	68fa      	ldr	r2, [r7, #12]
 800c5d2:	4413      	add	r3, r2
 800c5d4:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d103      	bne.n	800c5e6 <MQTTSerialize_connectLength+0x7c>
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d00a      	beq.n	800c5fc <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	3340      	adds	r3, #64	; 0x40
 800c5ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c5ee:	f000 fc18 	bl	800ce22 <MQTTstrlen>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	3302      	adds	r3, #2
 800c5f6:	68fa      	ldr	r2, [r7, #12]
 800c5f8:	4413      	add	r3, r2
 800c5fa:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c600:	2b00      	cmp	r3, #0
 800c602:	d103      	bne.n	800c60c <MQTTSerialize_connectLength+0xa2>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d00a      	beq.n	800c622 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	334c      	adds	r3, #76	; 0x4c
 800c610:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c614:	f000 fc05 	bl	800ce22 <MQTTstrlen>
 800c618:	4603      	mov	r3, r0
 800c61a:	3302      	adds	r3, #2
 800c61c:	68fa      	ldr	r2, [r7, #12]
 800c61e:	4413      	add	r3, r2
 800c620:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 800c622:	68fb      	ldr	r3, [r7, #12]
}
 800c624:	4618      	mov	r0, r3
 800c626:	3714      	adds	r7, #20
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd90      	pop	{r4, r7, pc}

0800c62c <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b08a      	sub	sp, #40	; 0x28
 800c630:	af00      	add	r7, sp, #0
 800c632:	60f8      	str	r0, [r7, #12]
 800c634:	60b9      	str	r1, [r7, #8]
 800c636:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 800c63c:	2300      	movs	r3, #0
 800c63e:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 800c640:	2300      	movs	r3, #0
 800c642:	617b      	str	r3, [r7, #20]
	int len = 0;
 800c644:	2300      	movs	r3, #0
 800c646:	623b      	str	r3, [r7, #32]
	int rc = -1;
 800c648:	f04f 33ff 	mov.w	r3, #4294967295
 800c64c:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f7ff ff8b 	bl	800c56a <MQTTSerialize_connectLength>
 800c654:	6238      	str	r0, [r7, #32]
 800c656:	6a38      	ldr	r0, [r7, #32]
 800c658:	f000 fa98 	bl	800cb8c <MQTTPacket_len>
 800c65c:	4602      	mov	r2, r0
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	4293      	cmp	r3, r2
 800c662:	da03      	bge.n	800c66c <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800c664:	f06f 0301 	mvn.w	r3, #1
 800c668:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 800c66a:	e0c2      	b.n	800c7f2 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 800c66c:	2300      	movs	r3, #0
 800c66e:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 800c670:	7e3b      	ldrb	r3, [r7, #24]
 800c672:	2201      	movs	r2, #1
 800c674:	f362 1307 	bfi	r3, r2, #4, #4
 800c678:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800c67a:	7e3a      	ldrb	r2, [r7, #24]
 800c67c:	f107 031c 	add.w	r3, r7, #28
 800c680:	4611      	mov	r1, r2
 800c682:	4618      	mov	r0, r3
 800c684:	f000 fb11 	bl	800ccaa <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 800c688:	69fb      	ldr	r3, [r7, #28]
 800c68a:	6a39      	ldr	r1, [r7, #32]
 800c68c:	4618      	mov	r0, r3
 800c68e:	f000 fa12 	bl	800cab6 <MQTTPacket_encode>
 800c692:	4602      	mov	r2, r0
 800c694:	69fb      	ldr	r3, [r7, #28]
 800c696:	4413      	add	r3, r2
 800c698:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	7a1b      	ldrb	r3, [r3, #8]
 800c69e:	2b04      	cmp	r3, #4
 800c6a0:	d10c      	bne.n	800c6bc <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 800c6a2:	f107 031c 	add.w	r3, r7, #28
 800c6a6:	4955      	ldr	r1, [pc, #340]	; (800c7fc <MQTTSerialize_connect+0x1d0>)
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f000 fb3c 	bl	800cd26 <writeCString>
		writeChar(&ptr, (char) 4);
 800c6ae:	f107 031c 	add.w	r3, r7, #28
 800c6b2:	2104      	movs	r1, #4
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f000 faf8 	bl	800ccaa <writeChar>
 800c6ba:	e00b      	b.n	800c6d4 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 800c6bc:	f107 031c 	add.w	r3, r7, #28
 800c6c0:	494f      	ldr	r1, [pc, #316]	; (800c800 <MQTTSerialize_connect+0x1d4>)
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f000 fb2f 	bl	800cd26 <writeCString>
		writeChar(&ptr, (char) 3);
 800c6c8:	f107 031c 	add.w	r3, r7, #28
 800c6cc:	2103      	movs	r1, #3
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f000 faeb 	bl	800ccaa <writeChar>
	}

	flags.all = 0;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	7e9b      	ldrb	r3, [r3, #26]
 800c6dc:	f003 0301 	and.w	r3, r3, #1
 800c6e0:	b2da      	uxtb	r2, r3
 800c6e2:	7d3b      	ldrb	r3, [r7, #20]
 800c6e4:	f362 0341 	bfi	r3, r2, #1, #1
 800c6e8:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	7edb      	ldrb	r3, [r3, #27]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	bf14      	ite	ne
 800c6f2:	2301      	movne	r3, #1
 800c6f4:	2300      	moveq	r3, #0
 800c6f6:	b2da      	uxtb	r2, r3
 800c6f8:	7d3b      	ldrb	r3, [r7, #20]
 800c6fa:	f362 0382 	bfi	r3, r2, #2, #1
 800c6fe:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 800c700:	7d3b      	ldrb	r3, [r7, #20]
 800c702:	f003 0304 	and.w	r3, r3, #4
 800c706:	b2db      	uxtb	r3, r3
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d013      	beq.n	800c734 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c712:	f003 0303 	and.w	r3, r3, #3
 800c716:	b2da      	uxtb	r2, r3
 800c718:	7d3b      	ldrb	r3, [r7, #20]
 800c71a:	f362 03c4 	bfi	r3, r2, #3, #2
 800c71e:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c726:	f003 0301 	and.w	r3, r3, #1
 800c72a:	b2da      	uxtb	r2, r3
 800c72c:	7d3b      	ldrb	r3, [r7, #20]
 800c72e:	f362 1345 	bfi	r3, r2, #5, #1
 800c732:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d103      	bne.n	800c744 <MQTTSerialize_connect+0x118>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c740:	2b00      	cmp	r3, #0
 800c742:	d003      	beq.n	800c74c <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 800c744:	7d3b      	ldrb	r3, [r7, #20]
 800c746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c74a:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c750:	2b00      	cmp	r3, #0
 800c752:	d103      	bne.n	800c75c <MQTTSerialize_connect+0x130>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d003      	beq.n	800c764 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 800c75c:	7d3b      	ldrb	r3, [r7, #20]
 800c75e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c762:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 800c764:	7d3a      	ldrb	r2, [r7, #20]
 800c766:	f107 031c 	add.w	r3, r7, #28
 800c76a:	4611      	mov	r1, r2
 800c76c:	4618      	mov	r0, r3
 800c76e:	f000 fa9c 	bl	800ccaa <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	8b1b      	ldrh	r3, [r3, #24]
 800c776:	461a      	mov	r2, r3
 800c778:	f107 031c 	add.w	r3, r7, #28
 800c77c:	4611      	mov	r1, r2
 800c77e:	4618      	mov	r0, r3
 800c780:	f000 faa8 	bl	800ccd4 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f107 001c 	add.w	r0, r7, #28
 800c78a:	330c      	adds	r3, #12
 800c78c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c78e:	f000 fae9 	bl	800cd64 <writeMQTTString>
	if (options->willFlag)
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	7edb      	ldrb	r3, [r3, #27]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d00d      	beq.n	800c7b6 <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f107 001c 	add.w	r0, r7, #28
 800c7a0:	3324      	adds	r3, #36	; 0x24
 800c7a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c7a4:	f000 fade 	bl	800cd64 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f107 001c 	add.w	r0, r7, #28
 800c7ae:	3330      	adds	r3, #48	; 0x30
 800c7b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c7b2:	f000 fad7 	bl	800cd64 <writeMQTTString>
	}
	if (flags.bits.username)
 800c7b6:	7d3b      	ldrb	r3, [r7, #20]
 800c7b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c7bc:	b2db      	uxtb	r3, r3
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d006      	beq.n	800c7d0 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f107 001c 	add.w	r0, r7, #28
 800c7c8:	3340      	adds	r3, #64	; 0x40
 800c7ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c7cc:	f000 faca 	bl	800cd64 <writeMQTTString>
	if (flags.bits.password)
 800c7d0:	7d3b      	ldrb	r3, [r7, #20]
 800c7d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d006      	beq.n	800c7ea <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f107 001c 	add.w	r0, r7, #28
 800c7e2:	334c      	adds	r3, #76	; 0x4c
 800c7e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c7e6:	f000 fabd 	bl	800cd64 <writeMQTTString>

	rc = ptr - buf;
 800c7ea:	69fa      	ldr	r2, [r7, #28]
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	1ad3      	subs	r3, r2, r3
 800c7f0:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 800c7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3728      	adds	r7, #40	; 0x28
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}
 800c7fc:	0800fac4 	.word	0x0800fac4
 800c800:	0800facc 	.word	0x0800facc

0800c804 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b08a      	sub	sp, #40	; 0x28
 800c808:	af00      	add	r7, sp, #0
 800c80a:	60f8      	str	r0, [r7, #12]
 800c80c:	60b9      	str	r1, [r7, #8]
 800c80e:	607a      	str	r2, [r7, #4]
 800c810:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800c812:	2300      	movs	r3, #0
 800c814:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800c81a:	2300      	movs	r3, #0
 800c81c:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800c81e:	2300      	movs	r3, #0
 800c820:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 800c822:	2300      	movs	r3, #0
 800c824:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800c826:	f107 0318 	add.w	r3, r7, #24
 800c82a:	4618      	mov	r0, r3
 800c82c:	f000 fa29 	bl	800cc82 <readChar>
 800c830:	4603      	mov	r3, r0
 800c832:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 800c834:	7f3b      	ldrb	r3, [r7, #28]
 800c836:	f023 030f 	bic.w	r3, r3, #15
 800c83a:	b2db      	uxtb	r3, r3
 800c83c:	2b20      	cmp	r3, #32
 800c83e:	d12e      	bne.n	800c89e <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800c840:	69bb      	ldr	r3, [r7, #24]
 800c842:	f107 0214 	add.w	r2, r7, #20
 800c846:	4611      	mov	r1, r2
 800c848:	4618      	mov	r0, r3
 800c84a:	f000 f9e9 	bl	800cc20 <MQTTPacket_decodeBuf>
 800c84e:	6278      	str	r0, [r7, #36]	; 0x24
 800c850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c852:	69bb      	ldr	r3, [r7, #24]
 800c854:	4413      	add	r3, r2
 800c856:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800c858:	69bb      	ldr	r3, [r7, #24]
 800c85a:	697a      	ldr	r2, [r7, #20]
 800c85c:	4413      	add	r3, r2
 800c85e:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 800c860:	69bb      	ldr	r3, [r7, #24]
 800c862:	6a3a      	ldr	r2, [r7, #32]
 800c864:	1ad3      	subs	r3, r2, r3
 800c866:	2b01      	cmp	r3, #1
 800c868:	dd1b      	ble.n	800c8a2 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 800c86a:	f107 0318 	add.w	r3, r7, #24
 800c86e:	4618      	mov	r0, r3
 800c870:	f000 fa07 	bl	800cc82 <readChar>
 800c874:	4603      	mov	r3, r0
 800c876:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 800c878:	7c3b      	ldrb	r3, [r7, #16]
 800c87a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c87e:	b2db      	uxtb	r3, r3
 800c880:	461a      	mov	r2, r3
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 800c886:	f107 0318 	add.w	r3, r7, #24
 800c88a:	4618      	mov	r0, r3
 800c88c:	f000 f9f9 	bl	800cc82 <readChar>
 800c890:	4603      	mov	r3, r0
 800c892:	461a      	mov	r2, r3
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	701a      	strb	r2, [r3, #0]

	rc = 1;
 800c898:	2301      	movs	r3, #1
 800c89a:	627b      	str	r3, [r7, #36]	; 0x24
 800c89c:	e002      	b.n	800c8a4 <MQTTDeserialize_connack+0xa0>
		goto exit;
 800c89e:	bf00      	nop
 800c8a0:	e000      	b.n	800c8a4 <MQTTDeserialize_connack+0xa0>
		goto exit;
 800c8a2:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800c8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3728      	adds	r7, #40	; 0x28
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}

0800c8ae <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 800c8ae:	b580      	push	{r7, lr}
 800c8b0:	b088      	sub	sp, #32
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	60f8      	str	r0, [r7, #12]
 800c8b6:	60b9      	str	r1, [r7, #8]
 800c8b8:	4613      	mov	r3, r2
 800c8ba:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 800c8bc:	2300      	movs	r3, #0
 800c8be:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 800c8c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c8c4:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	dc03      	bgt.n	800c8d8 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800c8d0:	f06f 0301 	mvn.w	r3, #1
 800c8d4:	61fb      	str	r3, [r7, #28]
		goto exit;
 800c8d6:	e01d      	b.n	800c914 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 800c8dc:	79fb      	ldrb	r3, [r7, #7]
 800c8de:	f003 030f 	and.w	r3, r3, #15
 800c8e2:	b2da      	uxtb	r2, r3
 800c8e4:	7e3b      	ldrb	r3, [r7, #24]
 800c8e6:	f362 1307 	bfi	r3, r2, #4, #4
 800c8ea:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800c8ec:	7e3a      	ldrb	r2, [r7, #24]
 800c8ee:	f107 0314 	add.w	r3, r7, #20
 800c8f2:	4611      	mov	r1, r2
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f000 f9d8 	bl	800ccaa <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	2100      	movs	r1, #0
 800c8fe:	4618      	mov	r0, r3
 800c900:	f000 f8d9 	bl	800cab6 <MQTTPacket_encode>
 800c904:	4602      	mov	r2, r0
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	4413      	add	r3, r2
 800c90a:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 800c90c:	697a      	ldr	r2, [r7, #20]
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	1ad3      	subs	r3, r2, r3
 800c912:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800c914:	69fb      	ldr	r3, [r7, #28]
}
 800c916:	4618      	mov	r0, r3
 800c918:	3720      	adds	r7, #32
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}

0800c91e <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 800c91e:	b580      	push	{r7, lr}
 800c920:	b082      	sub	sp, #8
 800c922:	af00      	add	r7, sp, #0
 800c924:	6078      	str	r0, [r7, #4]
 800c926:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 800c928:	220c      	movs	r2, #12
 800c92a:	6839      	ldr	r1, [r7, #0]
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f7ff ffbe 	bl	800c8ae <MQTTSerialize_zero>
 800c932:	4603      	mov	r3, r0
}
 800c934:	4618      	mov	r0, r3
 800c936:	3708      	adds	r7, #8
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b08a      	sub	sp, #40	; 0x28
 800c940:	af00      	add	r7, sp, #0
 800c942:	60f8      	str	r0, [r7, #12]
 800c944:	60b9      	str	r1, [r7, #8]
 800c946:	607a      	str	r2, [r7, #4]
 800c948:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800c94a:	2300      	movs	r3, #0
 800c94c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800c94e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c950:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800c952:	2300      	movs	r3, #0
 800c954:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800c956:	2300      	movs	r3, #0
 800c958:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 800c95a:	2300      	movs	r3, #0
 800c95c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800c95e:	f107 0318 	add.w	r3, r7, #24
 800c962:	4618      	mov	r0, r3
 800c964:	f000 f98d 	bl	800cc82 <readChar>
 800c968:	4603      	mov	r3, r0
 800c96a:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 800c96c:	7f3b      	ldrb	r3, [r7, #28]
 800c96e:	f023 030f 	bic.w	r3, r3, #15
 800c972:	b2db      	uxtb	r3, r3
 800c974:	2b30      	cmp	r3, #48	; 0x30
 800c976:	d14b      	bne.n	800ca10 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 800c978:	7f3b      	ldrb	r3, [r7, #28]
 800c97a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c97e:	b2db      	uxtb	r3, r3
 800c980:	461a      	mov	r2, r3
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 800c986:	7f3b      	ldrb	r3, [r7, #28]
 800c988:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	461a      	mov	r2, r3
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 800c994:	7f3b      	ldrb	r3, [r7, #28]
 800c996:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c99a:	b2db      	uxtb	r3, r3
 800c99c:	461a      	mov	r2, r3
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800c9a2:	69bb      	ldr	r3, [r7, #24]
 800c9a4:	f107 0214 	add.w	r2, r7, #20
 800c9a8:	4611      	mov	r1, r2
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f000 f938 	bl	800cc20 <MQTTPacket_decodeBuf>
 800c9b0:	6278      	str	r0, [r7, #36]	; 0x24
 800c9b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9b4:	69bb      	ldr	r3, [r7, #24]
 800c9b6:	4413      	add	r3, r2
 800c9b8:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800c9ba:	69bb      	ldr	r3, [r7, #24]
 800c9bc:	697a      	ldr	r2, [r7, #20]
 800c9be:	4413      	add	r3, r2
 800c9c0:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800c9c2:	f107 0318 	add.w	r3, r7, #24
 800c9c6:	6a3a      	ldr	r2, [r7, #32]
 800c9c8:	4619      	mov	r1, r3
 800c9ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c9cc:	f000 f9f8 	bl	800cdc0 <readMQTTLenString>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d01e      	beq.n	800ca14 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 800c9d6:	69bb      	ldr	r3, [r7, #24]
 800c9d8:	6a3a      	ldr	r2, [r7, #32]
 800c9da:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	db19      	blt.n	800ca14 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	dd08      	ble.n	800c9fa <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 800c9e8:	f107 0318 	add.w	r3, r7, #24
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f000 f92d 	bl	800cc4c <readInt>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	b29a      	uxth	r2, r3
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 800c9fa:	69bb      	ldr	r3, [r7, #24]
 800c9fc:	6a3a      	ldr	r2, [r7, #32]
 800c9fe:	1ad2      	subs	r2, r2, r3
 800ca00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca02:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 800ca04:	69ba      	ldr	r2, [r7, #24]
 800ca06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca08:	601a      	str	r2, [r3, #0]
	rc = 1;
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	627b      	str	r3, [r7, #36]	; 0x24
 800ca0e:	e002      	b.n	800ca16 <MQTTDeserialize_publish+0xda>
		goto exit;
 800ca10:	bf00      	nop
 800ca12:	e000      	b.n	800ca16 <MQTTDeserialize_publish+0xda>
		goto exit;
 800ca14:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800ca16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3728      	adds	r7, #40	; 0x28
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b08a      	sub	sp, #40	; 0x28
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	60f8      	str	r0, [r7, #12]
 800ca28:	60b9      	str	r1, [r7, #8]
 800ca2a:	607a      	str	r2, [r7, #4]
 800ca2c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800ca2e:	2300      	movs	r3, #0
 800ca30:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800ca36:	2300      	movs	r3, #0
 800ca38:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800ca3e:	f107 0318 	add.w	r3, r7, #24
 800ca42:	4618      	mov	r0, r3
 800ca44:	f000 f91d 	bl	800cc82 <readChar>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 800ca4c:	7f3b      	ldrb	r3, [r7, #28]
 800ca4e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800ca52:	b2db      	uxtb	r3, r3
 800ca54:	461a      	mov	r2, r3
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 800ca5a:	7f3b      	ldrb	r3, [r7, #28]
 800ca5c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800ca60:	b2db      	uxtb	r3, r3
 800ca62:	461a      	mov	r2, r3
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800ca68:	69bb      	ldr	r3, [r7, #24]
 800ca6a:	f107 0214 	add.w	r2, r7, #20
 800ca6e:	4611      	mov	r1, r2
 800ca70:	4618      	mov	r0, r3
 800ca72:	f000 f8d5 	bl	800cc20 <MQTTPacket_decodeBuf>
 800ca76:	6278      	str	r0, [r7, #36]	; 0x24
 800ca78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca7a:	69bb      	ldr	r3, [r7, #24]
 800ca7c:	4413      	add	r3, r2
 800ca7e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800ca80:	69bb      	ldr	r3, [r7, #24]
 800ca82:	697a      	ldr	r2, [r7, #20]
 800ca84:	4413      	add	r3, r2
 800ca86:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 800ca88:	69bb      	ldr	r3, [r7, #24]
 800ca8a:	6a3a      	ldr	r2, [r7, #32]
 800ca8c:	1ad3      	subs	r3, r2, r3
 800ca8e:	2b01      	cmp	r3, #1
 800ca90:	dd0b      	ble.n	800caaa <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 800ca92:	f107 0318 	add.w	r3, r7, #24
 800ca96:	4618      	mov	r0, r3
 800ca98:	f000 f8d8 	bl	800cc4c <readInt>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	b29a      	uxth	r2, r3
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	801a      	strh	r2, [r3, #0]

	rc = 1;
 800caa4:	2301      	movs	r3, #1
 800caa6:	627b      	str	r3, [r7, #36]	; 0x24
 800caa8:	e000      	b.n	800caac <MQTTDeserialize_ack+0x8c>
		goto exit;
 800caaa:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800caac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3728      	adds	r7, #40	; 0x28
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}

0800cab6 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 800cab6:	b480      	push	{r7}
 800cab8:	b085      	sub	sp, #20
 800caba:	af00      	add	r7, sp, #0
 800cabc:	6078      	str	r0, [r7, #4]
 800cabe:	6039      	str	r1, [r7, #0]
	int rc = 0;
 800cac0:	2300      	movs	r3, #0
 800cac2:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	425a      	negs	r2, r3
 800cac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cacc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cad0:	bf58      	it	pl
 800cad2:	4253      	negpl	r3, r2
 800cad4:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	da00      	bge.n	800cade <MQTTPacket_encode+0x28>
 800cadc:	337f      	adds	r3, #127	; 0x7f
 800cade:	11db      	asrs	r3, r3, #7
 800cae0:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	dd03      	ble.n	800caf0 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 800cae8:	7afb      	ldrb	r3, [r7, #11]
 800caea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800caee:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	1c5a      	adds	r2, r3, #1
 800caf4:	60fa      	str	r2, [r7, #12]
 800caf6:	461a      	mov	r2, r3
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	4413      	add	r3, r2
 800cafc:	7afa      	ldrb	r2, [r7, #11]
 800cafe:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	dcde      	bgt.n	800cac4 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 800cb06:	68fb      	ldr	r3, [r7, #12]
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3714      	adds	r7, #20
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb12:	4770      	bx	lr

0800cb14 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b086      	sub	sp, #24
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 800cb1e:	2301      	movs	r3, #1
 800cb20:	617b      	str	r3, [r7, #20]
	int len = 0;
 800cb22:	2300      	movs	r3, #0
 800cb24:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 800cb2c:	f04f 33ff 	mov.w	r3, #4294967295
 800cb30:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	3301      	adds	r3, #1
 800cb36:	613b      	str	r3, [r7, #16]
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	2b04      	cmp	r3, #4
 800cb3c:	dd03      	ble.n	800cb46 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 800cb3e:	f04f 33ff 	mov.w	r3, #4294967295
 800cb42:	60fb      	str	r3, [r7, #12]
			goto exit;
 800cb44:	e01d      	b.n	800cb82 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 800cb46:	f107 020b 	add.w	r2, r7, #11
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2101      	movs	r1, #1
 800cb4e:	4610      	mov	r0, r2
 800cb50:	4798      	blx	r3
 800cb52:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2b01      	cmp	r3, #1
 800cb58:	d112      	bne.n	800cb80 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	7afb      	ldrb	r3, [r7, #11]
 800cb60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb64:	6979      	ldr	r1, [r7, #20]
 800cb66:	fb01 f303 	mul.w	r3, r1, r3
 800cb6a:	441a      	add	r2, r3
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	01db      	lsls	r3, r3, #7
 800cb74:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 800cb76:	7afb      	ldrb	r3, [r7, #11]
 800cb78:	b25b      	sxtb	r3, r3
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	dbd6      	blt.n	800cb2c <MQTTPacket_decode+0x18>
exit:
 800cb7e:	e000      	b.n	800cb82 <MQTTPacket_decode+0x6e>
			goto exit;
 800cb80:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 800cb82:	693b      	ldr	r3, [r7, #16]
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3718      	adds	r7, #24
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	3301      	adds	r3, #1
 800cb98:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2b7f      	cmp	r3, #127	; 0x7f
 800cb9e:	dc03      	bgt.n	800cba8 <MQTTPacket_len+0x1c>
		rem_len += 1;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	3301      	adds	r3, #1
 800cba4:	607b      	str	r3, [r7, #4]
 800cba6:	e012      	b.n	800cbce <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cbae:	da03      	bge.n	800cbb8 <MQTTPacket_len+0x2c>
		rem_len += 2;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	3302      	adds	r3, #2
 800cbb4:	607b      	str	r3, [r7, #4]
 800cbb6:	e00a      	b.n	800cbce <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	4a08      	ldr	r2, [pc, #32]	; (800cbdc <MQTTPacket_len+0x50>)
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	dc03      	bgt.n	800cbc8 <MQTTPacket_len+0x3c>
		rem_len += 3;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	3303      	adds	r3, #3
 800cbc4:	607b      	str	r3, [r7, #4]
 800cbc6:	e002      	b.n	800cbce <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	3304      	adds	r3, #4
 800cbcc:	607b      	str	r3, [r7, #4]
	return rem_len;
 800cbce:	687b      	ldr	r3, [r7, #4]
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	370c      	adds	r7, #12
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr
 800cbdc:	001ffffe 	.word	0x001ffffe

0800cbe0 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b085      	sub	sp, #20
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 800cbea:	2300      	movs	r3, #0
 800cbec:	60fb      	str	r3, [r7, #12]
 800cbee:	e00a      	b.n	800cc06 <bufchar+0x26>
		*c = *bufptr++;
 800cbf0:	4b0a      	ldr	r3, [pc, #40]	; (800cc1c <bufchar+0x3c>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	1c5a      	adds	r2, r3, #1
 800cbf6:	4909      	ldr	r1, [pc, #36]	; (800cc1c <bufchar+0x3c>)
 800cbf8:	600a      	str	r2, [r1, #0]
 800cbfa:	781a      	ldrb	r2, [r3, #0]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	3301      	adds	r3, #1
 800cc04:	60fb      	str	r3, [r7, #12]
 800cc06:	68fa      	ldr	r2, [r7, #12]
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	dbf0      	blt.n	800cbf0 <bufchar+0x10>
	return count;
 800cc0e:	683b      	ldr	r3, [r7, #0]
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	3714      	adds	r7, #20
 800cc14:	46bd      	mov	sp, r7
 800cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1a:	4770      	bx	lr
 800cc1c:	2000377c 	.word	0x2000377c

0800cc20 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b082      	sub	sp, #8
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 800cc2a:	4a06      	ldr	r2, [pc, #24]	; (800cc44 <MQTTPacket_decodeBuf+0x24>)
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 800cc30:	6839      	ldr	r1, [r7, #0]
 800cc32:	4805      	ldr	r0, [pc, #20]	; (800cc48 <MQTTPacket_decodeBuf+0x28>)
 800cc34:	f7ff ff6e 	bl	800cb14 <MQTTPacket_decode>
 800cc38:	4603      	mov	r3, r0
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3708      	adds	r7, #8
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	2000377c 	.word	0x2000377c
 800cc48:	0800cbe1 	.word	0x0800cbe1

0800cc4c <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b085      	sub	sp, #20
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	021b      	lsls	r3, r3, #8
 800cc60:	68fa      	ldr	r2, [r7, #12]
 800cc62:	3201      	adds	r2, #1
 800cc64:	7812      	ldrb	r2, [r2, #0]
 800cc66:	4413      	add	r3, r2
 800cc68:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	1c9a      	adds	r2, r3, #2
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	601a      	str	r2, [r3, #0]
	return len;
 800cc74:	68bb      	ldr	r3, [r7, #8]
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3714      	adds	r7, #20
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc80:	4770      	bx	lr

0800cc82 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 800cc82:	b480      	push	{r7}
 800cc84:	b085      	sub	sp, #20
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	781b      	ldrb	r3, [r3, #0]
 800cc90:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	1c5a      	adds	r2, r3, #1
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	601a      	str	r2, [r3, #0]
	return c;
 800cc9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3714      	adds	r7, #20
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr

0800ccaa <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 800ccaa:	b480      	push	{r7}
 800ccac:	b083      	sub	sp, #12
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	6078      	str	r0, [r7, #4]
 800ccb2:	460b      	mov	r3, r1
 800ccb4:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	78fa      	ldrb	r2, [r7, #3]
 800ccbc:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	1c5a      	adds	r2, r3, #1
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	601a      	str	r2, [r3, #0]
}
 800ccc8:	bf00      	nop
 800ccca:	370c      	adds	r7, #12
 800cccc:	46bd      	mov	sp, r7
 800ccce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd2:	4770      	bx	lr

0800ccd4 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b083      	sub	sp, #12
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	da00      	bge.n	800cce6 <writeInt+0x12>
 800cce4:	33ff      	adds	r3, #255	; 0xff
 800cce6:	121b      	asrs	r3, r3, #8
 800cce8:	461a      	mov	r2, r3
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	b2d2      	uxtb	r2, r2
 800ccf0:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	1c5a      	adds	r2, r3, #1
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	425a      	negs	r2, r3
 800cd00:	b2db      	uxtb	r3, r3
 800cd02:	b2d2      	uxtb	r2, r2
 800cd04:	bf58      	it	pl
 800cd06:	4253      	negpl	r3, r2
 800cd08:	687a      	ldr	r2, [r7, #4]
 800cd0a:	6812      	ldr	r2, [r2, #0]
 800cd0c:	b2db      	uxtb	r3, r3
 800cd0e:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	1c5a      	adds	r2, r3, #1
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	601a      	str	r2, [r3, #0]
}
 800cd1a:	bf00      	nop
 800cd1c:	370c      	adds	r7, #12
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd24:	4770      	bx	lr

0800cd26 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 800cd26:	b580      	push	{r7, lr}
 800cd28:	b084      	sub	sp, #16
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	6078      	str	r0, [r7, #4]
 800cd2e:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 800cd30:	6838      	ldr	r0, [r7, #0]
 800cd32:	f7f3 fa55 	bl	80001e0 <strlen>
 800cd36:	4603      	mov	r3, r0
 800cd38:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 800cd3a:	68f9      	ldr	r1, [r7, #12]
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f7ff ffc9 	bl	800ccd4 <writeInt>
	memcpy(*pptr, string, len);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	68fa      	ldr	r2, [r7, #12]
 800cd48:	6839      	ldr	r1, [r7, #0]
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f001 f832 	bl	800ddb4 <memcpy>
	*pptr += len;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681a      	ldr	r2, [r3, #0]
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	441a      	add	r2, r3
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	601a      	str	r2, [r3, #0]
}
 800cd5c:	bf00      	nop
 800cd5e:	3710      	adds	r7, #16
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}

0800cd64 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b084      	sub	sp, #16
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	60f8      	str	r0, [r7, #12]
 800cd6c:	4638      	mov	r0, r7
 800cd6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	dd12      	ble.n	800cd9e <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	4619      	mov	r1, r3
 800cd7c:	68f8      	ldr	r0, [r7, #12]
 800cd7e:	f7ff ffa9 	bl	800ccd4 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	68b9      	ldr	r1, [r7, #8]
 800cd88:	687a      	ldr	r2, [r7, #4]
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f001 f812 	bl	800ddb4 <memcpy>
		*pptr += mqttstring.lenstring.len;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	441a      	add	r2, r3
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 800cd9c:	e00c      	b.n	800cdb8 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d005      	beq.n	800cdb0 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	4619      	mov	r1, r3
 800cda8:	68f8      	ldr	r0, [r7, #12]
 800cdaa:	f7ff ffbc 	bl	800cd26 <writeCString>
}
 800cdae:	e003      	b.n	800cdb8 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 800cdb0:	2100      	movs	r1, #0
 800cdb2:	68f8      	ldr	r0, [r7, #12]
 800cdb4:	f7ff ff8e 	bl	800ccd4 <writeInt>
}
 800cdb8:	bf00      	nop
 800cdba:	3710      	adds	r7, #16
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b086      	sub	sp, #24
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	60f8      	str	r0, [r7, #12]
 800cdc8:	60b9      	str	r1, [r7, #8]
 800cdca:	607a      	str	r2, [r7, #4]
	int rc = 0;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	687a      	ldr	r2, [r7, #4]
 800cdd6:	1ad3      	subs	r3, r2, r3
 800cdd8:	2b01      	cmp	r3, #1
 800cdda:	dd1a      	ble.n	800ce12 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 800cddc:	68b8      	ldr	r0, [r7, #8]
 800cdde:	f7ff ff35 	bl	800cc4c <readInt>
 800cde2:	4602      	mov	r2, r0
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	68fa      	ldr	r2, [r7, #12]
 800cdee:	6852      	ldr	r2, [r2, #4]
 800cdf0:	4413      	add	r3, r2
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d30c      	bcc.n	800ce12 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	681a      	ldr	r2, [r3, #0]
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	68fa      	ldr	r2, [r7, #12]
 800ce06:	6852      	ldr	r2, [r2, #4]
 800ce08:	441a      	add	r2, r3
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	601a      	str	r2, [r3, #0]
			rc = 1;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2200      	movs	r2, #0
 800ce16:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 800ce18:	697b      	ldr	r3, [r7, #20]
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3718      	adds	r7, #24
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}

0800ce22 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 800ce22:	b580      	push	{r7, lr}
 800ce24:	b086      	sub	sp, #24
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	1d3b      	adds	r3, r7, #4
 800ce2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d006      	beq.n	800ce46 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f7f3 f9d0 	bl	80001e0 <strlen>
 800ce40:	4603      	mov	r3, r0
 800ce42:	617b      	str	r3, [r7, #20]
 800ce44:	e001      	b.n	800ce4a <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	617b      	str	r3, [r7, #20]
	return rc;
 800ce4a:	697b      	ldr	r3, [r7, #20]
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3718      	adds	r7, #24
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b086      	sub	sp, #24
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	6039      	str	r1, [r7, #0]
	int alen = 0,
 800ce5e:	2300      	movs	r3, #0
 800ce60:	617b      	str	r3, [r7, #20]
		blen = 0;
 800ce62:	2300      	movs	r3, #0
 800ce64:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d00a      	beq.n	800ce84 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f7f3 f9b1 	bl	80001e0 <strlen>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	617b      	str	r3, [r7, #20]
 800ce82:	e005      	b.n	800ce90 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	689b      	ldr	r3, [r3, #8]
 800ce88:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 800ce90:	6838      	ldr	r0, [r7, #0]
 800ce92:	f7f3 f9a5 	bl	80001e0 <strlen>
 800ce96:	4603      	mov	r3, r0
 800ce98:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 800ce9a:	697a      	ldr	r2, [r7, #20]
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	d10a      	bne.n	800ceb8 <MQTTPacket_equals+0x64>
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	461a      	mov	r2, r3
 800cea6:	6839      	ldr	r1, [r7, #0]
 800cea8:	6938      	ldr	r0, [r7, #16]
 800ceaa:	f001 f93f 	bl	800e12c <strncmp>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d101      	bne.n	800ceb8 <MQTTPacket_equals+0x64>
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	e000      	b.n	800ceba <MQTTPacket_equals+0x66>
 800ceb8:	2300      	movs	r3, #0
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3718      	adds	r7, #24
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}

0800cec2 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 800cec2:	b580      	push	{r7, lr}
 800cec4:	b086      	sub	sp, #24
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	60f8      	str	r0, [r7, #12]
 800ceca:	4638      	mov	r0, r7
 800cecc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 800ced0:	2300      	movs	r3, #0
 800ced2:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 800ced4:	463b      	mov	r3, r7
 800ced6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ceda:	f7ff ffa2 	bl	800ce22 <MQTTstrlen>
 800cede:	4603      	mov	r3, r0
 800cee0:	1c9a      	adds	r2, r3, #2
 800cee2:	6a3b      	ldr	r3, [r7, #32]
 800cee4:	4413      	add	r3, r2
 800cee6:	697a      	ldr	r2, [r7, #20]
 800cee8:	4413      	add	r3, r2
 800ceea:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	dd02      	ble.n	800cef8 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	3302      	adds	r3, #2
 800cef6:	617b      	str	r3, [r7, #20]
	return len;
 800cef8:	697b      	ldr	r3, [r7, #20]
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3718      	adds	r7, #24
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}

0800cf02 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 800cf02:	b580      	push	{r7, lr}
 800cf04:	b08a      	sub	sp, #40	; 0x28
 800cf06:	af02      	add	r7, sp, #8
 800cf08:	60f8      	str	r0, [r7, #12]
 800cf0a:	60b9      	str	r1, [r7, #8]
 800cf0c:	603b      	str	r3, [r7, #0]
 800cf0e:	4613      	mov	r3, r2
 800cf10:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 800cf16:	2300      	movs	r3, #0
 800cf18:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 800cf22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf24:	9300      	str	r3, [sp, #0]
 800cf26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cf2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cf2c:	6838      	ldr	r0, [r7, #0]
 800cf2e:	f7ff ffc8 	bl	800cec2 <MQTTSerialize_publishLength>
 800cf32:	61b8      	str	r0, [r7, #24]
 800cf34:	69b8      	ldr	r0, [r7, #24]
 800cf36:	f7ff fe29 	bl	800cb8c <MQTTPacket_len>
 800cf3a:	4602      	mov	r2, r0
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	da03      	bge.n	800cf4a <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800cf42:	f06f 0301 	mvn.w	r3, #1
 800cf46:	61fb      	str	r3, [r7, #28]
		goto exit;
 800cf48:	e04c      	b.n	800cfe4 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 800cf4a:	7c3b      	ldrb	r3, [r7, #16]
 800cf4c:	2203      	movs	r2, #3
 800cf4e:	f362 1307 	bfi	r3, r2, #4, #4
 800cf52:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 800cf54:	79fb      	ldrb	r3, [r7, #7]
 800cf56:	f003 0301 	and.w	r3, r3, #1
 800cf5a:	b2da      	uxtb	r2, r3
 800cf5c:	7c3b      	ldrb	r3, [r7, #16]
 800cf5e:	f362 03c3 	bfi	r3, r2, #3, #1
 800cf62:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	f003 0303 	and.w	r3, r3, #3
 800cf6a:	b2da      	uxtb	r2, r3
 800cf6c:	7c3b      	ldrb	r3, [r7, #16]
 800cf6e:	f362 0342 	bfi	r3, r2, #1, #2
 800cf72:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 800cf74:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cf78:	f003 0301 	and.w	r3, r3, #1
 800cf7c:	b2da      	uxtb	r2, r3
 800cf7e:	7c3b      	ldrb	r3, [r7, #16]
 800cf80:	f362 0300 	bfi	r3, r2, #0, #1
 800cf84:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 800cf86:	7c3a      	ldrb	r2, [r7, #16]
 800cf88:	f107 0314 	add.w	r3, r7, #20
 800cf8c:	4611      	mov	r1, r2
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f7ff fe8b 	bl	800ccaa <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	69b9      	ldr	r1, [r7, #24]
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f7ff fd8c 	bl	800cab6 <MQTTPacket_encode>
 800cf9e:	4602      	mov	r2, r0
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	4413      	add	r3, r2
 800cfa4:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 800cfa6:	f107 0014 	add.w	r0, r7, #20
 800cfaa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cfae:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cfb0:	f7ff fed8 	bl	800cd64 <writeMQTTString>

	if (qos > 0)
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	dd06      	ble.n	800cfc8 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 800cfba:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800cfbc:	f107 0314 	add.w	r3, r7, #20
 800cfc0:	4611      	mov	r1, r2
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7ff fe86 	bl	800ccd4 <writeInt>

	memcpy(ptr, payload, payloadlen);
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cfcc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f000 fef0 	bl	800ddb4 <memcpy>
	ptr += payloadlen;
 800cfd4:	697a      	ldr	r2, [r7, #20]
 800cfd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfd8:	4413      	add	r3, r2
 800cfda:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 800cfdc:	697a      	ldr	r2, [r7, #20]
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	1ad3      	subs	r3, r2, r3
 800cfe2:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800cfe4:	69fb      	ldr	r3, [r7, #28]
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3720      	adds	r7, #32
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}

0800cfee <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 800cfee:	b580      	push	{r7, lr}
 800cff0:	b088      	sub	sp, #32
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	60f8      	str	r0, [r7, #12]
 800cff6:	60b9      	str	r1, [r7, #8]
 800cff8:	4611      	mov	r1, r2
 800cffa:	461a      	mov	r2, r3
 800cffc:	460b      	mov	r3, r1
 800cffe:	71fb      	strb	r3, [r7, #7]
 800d000:	4613      	mov	r3, r2
 800d002:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 800d004:	2300      	movs	r3, #0
 800d006:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 800d008:	2300      	movs	r3, #0
 800d00a:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 800d010:	68bb      	ldr	r3, [r7, #8]
 800d012:	2b03      	cmp	r3, #3
 800d014:	dc03      	bgt.n	800d01e <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800d016:	f06f 0301 	mvn.w	r3, #1
 800d01a:	61fb      	str	r3, [r7, #28]
		goto exit;
 800d01c:	e037      	b.n	800d08e <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 800d01e:	79fb      	ldrb	r3, [r7, #7]
 800d020:	f003 030f 	and.w	r3, r3, #15
 800d024:	b2da      	uxtb	r2, r3
 800d026:	7e3b      	ldrb	r3, [r7, #24]
 800d028:	f362 1307 	bfi	r3, r2, #4, #4
 800d02c:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 800d02e:	79bb      	ldrb	r3, [r7, #6]
 800d030:	f003 0301 	and.w	r3, r3, #1
 800d034:	b2da      	uxtb	r2, r3
 800d036:	7e3b      	ldrb	r3, [r7, #24]
 800d038:	f362 03c3 	bfi	r3, r2, #3, #1
 800d03c:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 800d03e:	79fb      	ldrb	r3, [r7, #7]
 800d040:	2b06      	cmp	r3, #6
 800d042:	bf0c      	ite	eq
 800d044:	2301      	moveq	r3, #1
 800d046:	2300      	movne	r3, #0
 800d048:	b2db      	uxtb	r3, r3
 800d04a:	f003 0303 	and.w	r3, r3, #3
 800d04e:	b2da      	uxtb	r2, r3
 800d050:	7e3b      	ldrb	r3, [r7, #24]
 800d052:	f362 0342 	bfi	r3, r2, #1, #2
 800d056:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800d058:	7e3a      	ldrb	r2, [r7, #24]
 800d05a:	f107 0314 	add.w	r3, r7, #20
 800d05e:	4611      	mov	r1, r2
 800d060:	4618      	mov	r0, r3
 800d062:	f7ff fe22 	bl	800ccaa <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	2102      	movs	r1, #2
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7ff fd23 	bl	800cab6 <MQTTPacket_encode>
 800d070:	4602      	mov	r2, r0
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	4413      	add	r3, r2
 800d076:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 800d078:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d07a:	f107 0314 	add.w	r3, r7, #20
 800d07e:	4611      	mov	r1, r2
 800d080:	4618      	mov	r0, r3
 800d082:	f7ff fe27 	bl	800ccd4 <writeInt>
	rc = ptr - buf;
 800d086:	697a      	ldr	r2, [r7, #20]
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	1ad3      	subs	r3, r2, r3
 800d08c:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800d08e:	69fb      	ldr	r3, [r7, #28]
}
 800d090:	4618      	mov	r0, r3
 800d092:	3720      	adds	r7, #32
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}

0800d098 <get_seconds_from_ntp_server>:
47) UTC+12:45 (Summer)New Zealand
48) UTC+13:00 Tonga
49) UTC+14:00 Kiribati (Line Islands)
*/
void get_seconds_from_ntp_server(uint8_t *buf, uint16_t idx)
{
 800d098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d09c:	b0d0      	sub	sp, #320	; 0x140
 800d09e:	af00      	add	r7, sp, #0
 800d0a0:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
 800d0a4:	460b      	mov	r3, r1
 800d0a6:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
	tstamp seconds = 0;
 800d0aa:	f04f 0200 	mov.w	r2, #0
 800d0ae:	f04f 0300 	mov.w	r3, #0
 800d0b2:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	uint8_t i=0;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	for (i = 0; i < 4; i++)
 800d0bc:	2300      	movs	r3, #0
 800d0be:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800d0c2:	e028      	b.n	800d116 <get_seconds_from_ntp_server+0x7e>
	{
		seconds = (seconds << 8) | buf[idx + i];
 800d0c4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d0c8:	f04f 0000 	mov.w	r0, #0
 800d0cc:	f04f 0100 	mov.w	r1, #0
 800d0d0:	0219      	lsls	r1, r3, #8
 800d0d2:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d0d6:	0210      	lsls	r0, r2, #8
 800d0d8:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 800d0dc:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800d0e0:	4413      	add	r3, r2
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d0e8:	4413      	add	r3, r2
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	b2db      	uxtb	r3, r3
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	461c      	mov	r4, r3
 800d0f2:	4615      	mov	r5, r2
 800d0f4:	ea40 0304 	orr.w	r3, r0, r4
 800d0f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800d0fc:	ea41 0305 	orr.w	r3, r1, r5
 800d100:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800d104:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800d108:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	for (i = 0; i < 4; i++)
 800d10c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800d110:	3301      	adds	r3, #1
 800d112:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800d116:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800d11a:	2b03      	cmp	r3, #3
 800d11c:	d9d2      	bls.n	800d0c4 <get_seconds_from_ntp_server+0x2c>
	}
	switch (time_zone)
 800d11e:	4be2      	ldr	r3, [pc, #904]	; (800d4a8 <get_seconds_from_ntp_server+0x410>)
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	2b31      	cmp	r3, #49	; 0x31
 800d124:	f200 82a3 	bhi.w	800d66e <get_seconds_from_ntp_server+0x5d6>
 800d128:	a201      	add	r2, pc, #4	; (adr r2, 800d130 <get_seconds_from_ntp_server+0x98>)
 800d12a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d12e:	bf00      	nop
 800d130:	0800d1f9 	.word	0x0800d1f9
 800d134:	0800d217 	.word	0x0800d217
 800d138:	0800d235 	.word	0x0800d235
 800d13c:	0800d253 	.word	0x0800d253
 800d140:	0800d271 	.word	0x0800d271
 800d144:	0800d28f 	.word	0x0800d28f
 800d148:	0800d28f 	.word	0x0800d28f
 800d14c:	0800d2ad 	.word	0x0800d2ad
 800d150:	0800d2ad 	.word	0x0800d2ad
 800d154:	0800d2cb 	.word	0x0800d2cb
 800d158:	0800d2cb 	.word	0x0800d2cb
 800d15c:	0800d2e9 	.word	0x0800d2e9
 800d160:	0800d2e9 	.word	0x0800d2e9
 800d164:	0800d2e9 	.word	0x0800d2e9
 800d168:	0800d307 	.word	0x0800d307
 800d16c:	0800d325 	.word	0x0800d325
 800d170:	0800d325 	.word	0x0800d325
 800d174:	0800d343 	.word	0x0800d343
 800d178:	0800d361 	.word	0x0800d361
 800d17c:	0800d37f 	.word	0x0800d37f
 800d180:	0800d39d 	.word	0x0800d39d
 800d184:	0800d66f 	.word	0x0800d66f
 800d188:	0800d66f 	.word	0x0800d66f
 800d18c:	0800d3bb 	.word	0x0800d3bb
 800d190:	0800d3bb 	.word	0x0800d3bb
 800d194:	0800d3bb 	.word	0x0800d3bb
 800d198:	0800d3d9 	.word	0x0800d3d9
 800d19c:	0800d3d9 	.word	0x0800d3d9
 800d1a0:	0800d3f7 	.word	0x0800d3f7
 800d1a4:	0800d3f7 	.word	0x0800d3f7
 800d1a8:	0800d417 	.word	0x0800d417
 800d1ac:	0800d437 	.word	0x0800d437
 800d1b0:	0800d455 	.word	0x0800d455
 800d1b4:	0800d471 	.word	0x0800d471
 800d1b8:	0800d48d 	.word	0x0800d48d
 800d1bc:	0800d4d9 	.word	0x0800d4d9
 800d1c0:	0800d4f5 	.word	0x0800d4f5
 800d1c4:	0800d511 	.word	0x0800d511
 800d1c8:	0800d52d 	.word	0x0800d52d
 800d1cc:	0800d549 	.word	0x0800d549
 800d1d0:	0800d563 	.word	0x0800d563
 800d1d4:	0800d57f 	.word	0x0800d57f
 800d1d8:	0800d59b 	.word	0x0800d59b
 800d1dc:	0800d5b7 	.word	0x0800d5b7
 800d1e0:	0800d5d3 	.word	0x0800d5d3
 800d1e4:	0800d5ef 	.word	0x0800d5ef
 800d1e8:	0800d60b 	.word	0x0800d60b
 800d1ec:	0800d627 	.word	0x0800d627
 800d1f0:	0800d643 	.word	0x0800d643
 800d1f4:	0800d659 	.word	0x0800d659
	{
	case 0:
		seconds -=  12*3600;
 800d1f8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d1fc:	49ab      	ldr	r1, [pc, #684]	; (800d4ac <get_seconds_from_ntp_server+0x414>)
 800d1fe:	1851      	adds	r1, r2, r1
 800d200:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 800d204:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d208:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800d20c:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 800d210:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d214:	e22b      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 1:
		seconds -=  11*3600;
 800d216:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d21a:	49a5      	ldr	r1, [pc, #660]	; (800d4b0 <get_seconds_from_ntp_server+0x418>)
 800d21c:	1851      	adds	r1, r2, r1
 800d21e:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 800d222:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d226:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800d22a:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800d22e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d232:	e21c      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 2:
		seconds -=  10*3600;
 800d234:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d238:	499e      	ldr	r1, [pc, #632]	; (800d4b4 <get_seconds_from_ntp_server+0x41c>)
 800d23a:	1851      	adds	r1, r2, r1
 800d23c:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800d240:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d244:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800d248:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 800d24c:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d250:	e20d      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 3:
		seconds -=  (9*3600+30*60);
 800d252:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d256:	4998      	ldr	r1, [pc, #608]	; (800d4b8 <get_seconds_from_ntp_server+0x420>)
 800d258:	1851      	adds	r1, r2, r1
 800d25a:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800d25e:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d262:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d266:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800d26a:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d26e:	e1fe      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 4:
		seconds -=  9*3600;
 800d270:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d274:	4991      	ldr	r1, [pc, #580]	; (800d4bc <get_seconds_from_ntp_server+0x424>)
 800d276:	1851      	adds	r1, r2, r1
 800d278:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800d27c:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d280:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d284:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 800d288:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d28c:	e1ef      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 5:
	case 6:
		seconds -=  8*3600;
 800d28e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d292:	f5b2 41e1 	subs.w	r1, r2, #28800	; 0x7080
 800d296:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800d29a:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d29e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d2a2:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800d2a6:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d2aa:	e1e0      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 7:
	case 8:
		seconds -=  7*3600;
 800d2ac:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d2b0:	4983      	ldr	r1, [pc, #524]	; (800d4c0 <get_seconds_from_ntp_server+0x428>)
 800d2b2:	1851      	adds	r1, r2, r1
 800d2b4:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 800d2b8:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d2bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d2c0:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800d2c4:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d2c8:	e1d1      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 9:
	case 10:
		seconds -=  6*3600;
 800d2ca:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d2ce:	497d      	ldr	r1, [pc, #500]	; (800d4c4 <get_seconds_from_ntp_server+0x42c>)
 800d2d0:	1851      	adds	r1, r2, r1
 800d2d2:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 800d2d6:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d2da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d2de:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800d2e2:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d2e6:	e1c2      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 11:
	case 12:
	case 13:
		seconds -= 5*3600;
 800d2e8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d2ec:	4976      	ldr	r1, [pc, #472]	; (800d4c8 <get_seconds_from_ntp_server+0x430>)
 800d2ee:	1851      	adds	r1, r2, r1
 800d2f0:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800d2f4:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d2f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d2fc:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800d300:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d304:	e1b3      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 14:
		seconds -=  (4*3600+30*60);
 800d306:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d30a:	4970      	ldr	r1, [pc, #448]	; (800d4cc <get_seconds_from_ntp_server+0x434>)
 800d30c:	1851      	adds	r1, r2, r1
 800d30e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800d312:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d316:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d31a:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800d31e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d322:	e1a4      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 15:
	case 16:
		seconds -=  4*3600;
 800d324:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d328:	f5b2 5161 	subs.w	r1, r2, #14400	; 0x3840
 800d32c:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800d330:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d334:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d338:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800d33c:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d340:	e195      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 17:
		seconds -=  (3*3600+30*60);
 800d342:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d346:	4962      	ldr	r1, [pc, #392]	; (800d4d0 <get_seconds_from_ntp_server+0x438>)
 800d348:	1851      	adds	r1, r2, r1
 800d34a:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800d34e:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d352:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d356:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800d35a:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d35e:	e186      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 18:
		seconds -=  3*3600;
 800d360:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d364:	495b      	ldr	r1, [pc, #364]	; (800d4d4 <get_seconds_from_ntp_server+0x43c>)
 800d366:	1851      	adds	r1, r2, r1
 800d368:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800d36c:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d370:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d374:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800d378:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d37c:	e177      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 19:
		seconds -=  2*3600;
 800d37e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d382:	f5b2 51e1 	subs.w	r1, r2, #7200	; 0x1c20
 800d386:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800d38a:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d38e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d392:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 800d396:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d39a:	e168      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 20:
		seconds -=  1*3600;
 800d39c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d3a0:	f5b2 6161 	subs.w	r1, r2, #3600	; 0xe10
 800d3a4:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 800d3a8:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d3ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d3b0:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800d3b4:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d3b8:	e159      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 22:
		break;
	case 23:
	case 24:
	case 25:
		seconds +=  1*3600;
 800d3ba:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d3be:	f512 6161 	adds.w	r1, r2, #3600	; 0xe10
 800d3c2:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800d3c6:	f143 0300 	adc.w	r3, r3, #0
 800d3ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d3ce:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 800d3d2:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d3d6:	e14a      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 26:
	case 27:
		seconds +=  2*3600;
 800d3d8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d3dc:	f512 51e1 	adds.w	r1, r2, #7200	; 0x1c20
 800d3e0:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800d3e4:	f143 0300 	adc.w	r3, r3, #0
 800d3e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d3ec:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800d3f0:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d3f4:	e13b      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 28:
	case 29:
		seconds +=  3*3600;
 800d3f6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d3fa:	f642 2130 	movw	r1, #10800	; 0x2a30
 800d3fe:	1851      	adds	r1, r2, r1
 800d400:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 800d404:	f143 0300 	adc.w	r3, r3, #0
 800d408:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d40c:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800d410:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d414:	e12b      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 30:
		seconds +=  (3*3600+30*60);
 800d416:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d41a:	f243 1138 	movw	r1, #12600	; 0x3138
 800d41e:	1851      	adds	r1, r2, r1
 800d420:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800d424:	f143 0300 	adc.w	r3, r3, #0
 800d428:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d42c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800d430:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d434:	e11b      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 31:
		seconds +=  4*3600;
 800d436:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d43a:	f512 5161 	adds.w	r1, r2, #14400	; 0x3840
 800d43e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800d442:	f143 0300 	adc.w	r3, r3, #0
 800d446:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d44a:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800d44e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d452:	e10c      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 32:
		seconds +=  (4*3600+30*60);
 800d454:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d458:	f643 7148 	movw	r1, #16200	; 0x3f48
 800d45c:	1851      	adds	r1, r2, r1
 800d45e:	67b9      	str	r1, [r7, #120]	; 0x78
 800d460:	f143 0300 	adc.w	r3, r3, #0
 800d464:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d466:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800d46a:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d46e:	e0fe      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 33:
		seconds +=  5*3600;
 800d470:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d474:	f244 6150 	movw	r1, #18000	; 0x4650
 800d478:	1851      	adds	r1, r2, r1
 800d47a:	6739      	str	r1, [r7, #112]	; 0x70
 800d47c:	f143 0300 	adc.w	r3, r3, #0
 800d480:	677b      	str	r3, [r7, #116]	; 0x74
 800d482:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800d486:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d48a:	e0f0      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 34:
		seconds +=  (5*3600+30*60);
 800d48c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d490:	f644 5158 	movw	r1, #19800	; 0x4d58
 800d494:	1851      	adds	r1, r2, r1
 800d496:	66b9      	str	r1, [r7, #104]	; 0x68
 800d498:	f143 0300 	adc.w	r3, r3, #0
 800d49c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d49e:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800d4a2:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d4a6:	e0e2      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
 800d4a8:	200037f5 	.word	0x200037f5
 800d4ac:	ffff5740 	.word	0xffff5740
 800d4b0:	ffff6550 	.word	0xffff6550
 800d4b4:	ffff7360 	.word	0xffff7360
 800d4b8:	ffff7a68 	.word	0xffff7a68
 800d4bc:	ffff8170 	.word	0xffff8170
 800d4c0:	ffff9d90 	.word	0xffff9d90
 800d4c4:	ffffaba0 	.word	0xffffaba0
 800d4c8:	ffffb9b0 	.word	0xffffb9b0
 800d4cc:	ffffc0b8 	.word	0xffffc0b8
 800d4d0:	ffffcec8 	.word	0xffffcec8
 800d4d4:	ffffd5d0 	.word	0xffffd5d0
	case 35:
		seconds +=  (5*3600+45*60);
 800d4d8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d4dc:	f245 01dc 	movw	r1, #20700	; 0x50dc
 800d4e0:	1851      	adds	r1, r2, r1
 800d4e2:	6639      	str	r1, [r7, #96]	; 0x60
 800d4e4:	f143 0300 	adc.w	r3, r3, #0
 800d4e8:	667b      	str	r3, [r7, #100]	; 0x64
 800d4ea:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800d4ee:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d4f2:	e0bc      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 36:
		seconds +=  6*3600;
 800d4f4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d4f8:	f245 4160 	movw	r1, #21600	; 0x5460
 800d4fc:	1851      	adds	r1, r2, r1
 800d4fe:	65b9      	str	r1, [r7, #88]	; 0x58
 800d500:	f143 0300 	adc.w	r3, r3, #0
 800d504:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d506:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800d50a:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d50e:	e0ae      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 37:
		seconds +=  (6*3600+30*60);
 800d510:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d514:	f645 3168 	movw	r1, #23400	; 0x5b68
 800d518:	1851      	adds	r1, r2, r1
 800d51a:	6539      	str	r1, [r7, #80]	; 0x50
 800d51c:	f143 0300 	adc.w	r3, r3, #0
 800d520:	657b      	str	r3, [r7, #84]	; 0x54
 800d522:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800d526:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d52a:	e0a0      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 38:
		seconds +=  7*3600;
 800d52c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d530:	f246 2170 	movw	r1, #25200	; 0x6270
 800d534:	1851      	adds	r1, r2, r1
 800d536:	64b9      	str	r1, [r7, #72]	; 0x48
 800d538:	f143 0300 	adc.w	r3, r3, #0
 800d53c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d53e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800d542:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d546:	e092      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 39:
		seconds +=  8*3600;
 800d548:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d54c:	f512 41e1 	adds.w	r1, r2, #28800	; 0x7080
 800d550:	6439      	str	r1, [r7, #64]	; 0x40
 800d552:	f143 0300 	adc.w	r3, r3, #0
 800d556:	647b      	str	r3, [r7, #68]	; 0x44
 800d558:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800d55c:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d560:	e085      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 40:
		seconds +=  9*3600;
 800d562:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d566:	f647 6190 	movw	r1, #32400	; 0x7e90
 800d56a:	1851      	adds	r1, r2, r1
 800d56c:	63b9      	str	r1, [r7, #56]	; 0x38
 800d56e:	f143 0300 	adc.w	r3, r3, #0
 800d572:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d574:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800d578:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d57c:	e077      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 41:
		seconds +=  (9*3600+30*60);
 800d57e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d582:	f248 5198 	movw	r1, #34200	; 0x8598
 800d586:	1851      	adds	r1, r2, r1
 800d588:	6339      	str	r1, [r7, #48]	; 0x30
 800d58a:	f143 0300 	adc.w	r3, r3, #0
 800d58e:	637b      	str	r3, [r7, #52]	; 0x34
 800d590:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800d594:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d598:	e069      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 42:
		seconds +=  10*3600;
 800d59a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d59e:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 800d5a2:	1851      	adds	r1, r2, r1
 800d5a4:	62b9      	str	r1, [r7, #40]	; 0x28
 800d5a6:	f143 0300 	adc.w	r3, r3, #0
 800d5aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d5ac:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800d5b0:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d5b4:	e05b      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 43:
		seconds +=  (10*3600+30*60);
 800d5b6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d5ba:	f249 31a8 	movw	r1, #37800	; 0x93a8
 800d5be:	1851      	adds	r1, r2, r1
 800d5c0:	6239      	str	r1, [r7, #32]
 800d5c2:	f143 0300 	adc.w	r3, r3, #0
 800d5c6:	627b      	str	r3, [r7, #36]	; 0x24
 800d5c8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d5cc:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d5d0:	e04d      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 44:
		seconds +=  11*3600;
 800d5d2:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d5d6:	f649 21b0 	movw	r1, #39600	; 0x9ab0
 800d5da:	1851      	adds	r1, r2, r1
 800d5dc:	61b9      	str	r1, [r7, #24]
 800d5de:	f143 0300 	adc.w	r3, r3, #0
 800d5e2:	61fb      	str	r3, [r7, #28]
 800d5e4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d5e8:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d5ec:	e03f      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 45:
		seconds +=  (11*3600+30*60);
 800d5ee:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d5f2:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
 800d5f6:	1851      	adds	r1, r2, r1
 800d5f8:	6139      	str	r1, [r7, #16]
 800d5fa:	f143 0300 	adc.w	r3, r3, #0
 800d5fe:	617b      	str	r3, [r7, #20]
 800d600:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d604:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d608:	e031      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 46:
		seconds +=  12*3600;
 800d60a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d60e:	f64a 01c0 	movw	r1, #43200	; 0xa8c0
 800d612:	1851      	adds	r1, r2, r1
 800d614:	60b9      	str	r1, [r7, #8]
 800d616:	f143 0300 	adc.w	r3, r3, #0
 800d61a:	60fb      	str	r3, [r7, #12]
 800d61c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d620:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d624:	e023      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 47:
		seconds +=  (12*3600+45*60);
 800d626:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d62a:	f24b 314c 	movw	r1, #45900	; 0xb34c
 800d62e:	1851      	adds	r1, r2, r1
 800d630:	6039      	str	r1, [r7, #0]
 800d632:	f143 0300 	adc.w	r3, r3, #0
 800d636:	607b      	str	r3, [r7, #4]
 800d638:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d63c:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d640:	e015      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 48:
		seconds +=  13*3600;
 800d642:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d646:	f24b 61d0 	movw	r1, #46800	; 0xb6d0
 800d64a:	eb12 0a01 	adds.w	sl, r2, r1
 800d64e:	f143 0b00 	adc.w	fp, r3, #0
 800d652:	e9c7 ab4e 	strd	sl, fp, [r7, #312]	; 0x138
		break;
 800d656:	e00a      	b.n	800d66e <get_seconds_from_ntp_server+0x5d6>
	case 49:
		seconds +=  14*3600;
 800d658:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d65c:	f24c 41e0 	movw	r1, #50400	; 0xc4e0
 800d660:	eb12 0801 	adds.w	r8, r2, r1
 800d664:	f143 0900 	adc.w	r9, r3, #0
 800d668:	e9c7 894e 	strd	r8, r9, [r7, #312]	; 0x138
		break;
 800d66c:	bf00      	nop

	}

	//calculation for date
	calcdatetime(seconds);
 800d66e:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800d672:	f000 f941 	bl	800d8f8 <calcdatetime>
}
 800d676:	bf00      	nop
 800d678:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800d67c:	46bd      	mov	sp, r7
 800d67e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d682:	bf00      	nop

0800d684 <SNTP_init>:

void SNTP_init(uint8_t s, uint8_t *ntp_server, uint8_t tz, uint8_t *buf)
{
 800d684:	b480      	push	{r7}
 800d686:	b087      	sub	sp, #28
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60b9      	str	r1, [r7, #8]
 800d68c:	607b      	str	r3, [r7, #4]
 800d68e:	4603      	mov	r3, r0
 800d690:	73fb      	strb	r3, [r7, #15]
 800d692:	4613      	mov	r3, r2
 800d694:	73bb      	strb	r3, [r7, #14]
	NTP_SOCKET = s;
 800d696:	4a34      	ldr	r2, [pc, #208]	; (800d768 <SNTP_init+0xe4>)
 800d698:	7bfb      	ldrb	r3, [r7, #15]
 800d69a:	7013      	strb	r3, [r2, #0]

	NTPformat.dstaddr[0] = ntp_server[0];
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	781a      	ldrb	r2, [r3, #0]
 800d6a0:	4b32      	ldr	r3, [pc, #200]	; (800d76c <SNTP_init+0xe8>)
 800d6a2:	701a      	strb	r2, [r3, #0]
	NTPformat.dstaddr[1] = ntp_server[1];
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	785a      	ldrb	r2, [r3, #1]
 800d6a8:	4b30      	ldr	r3, [pc, #192]	; (800d76c <SNTP_init+0xe8>)
 800d6aa:	705a      	strb	r2, [r3, #1]
	NTPformat.dstaddr[2] = ntp_server[2];
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	789a      	ldrb	r2, [r3, #2]
 800d6b0:	4b2e      	ldr	r3, [pc, #184]	; (800d76c <SNTP_init+0xe8>)
 800d6b2:	709a      	strb	r2, [r3, #2]
	NTPformat.dstaddr[3] = ntp_server[3];
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	78da      	ldrb	r2, [r3, #3]
 800d6b8:	4b2c      	ldr	r3, [pc, #176]	; (800d76c <SNTP_init+0xe8>)
 800d6ba:	70da      	strb	r2, [r3, #3]

	time_zone = tz;
 800d6bc:	4a2c      	ldr	r2, [pc, #176]	; (800d770 <SNTP_init+0xec>)
 800d6be:	7bbb      	ldrb	r3, [r7, #14]
 800d6c0:	7013      	strb	r3, [r2, #0]

	data_buf = buf;
 800d6c2:	4a2c      	ldr	r2, [pc, #176]	; (800d774 <SNTP_init+0xf0>)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6013      	str	r3, [r2, #0]

	uint8_t Flag;
	NTPformat.leap = 0;           /* leap indicator */
 800d6c8:	4b28      	ldr	r3, [pc, #160]	; (800d76c <SNTP_init+0xe8>)
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	715a      	strb	r2, [r3, #5]
	NTPformat.version = 4;        /* version number */
 800d6ce:	4b27      	ldr	r3, [pc, #156]	; (800d76c <SNTP_init+0xe8>)
 800d6d0:	2204      	movs	r2, #4
 800d6d2:	711a      	strb	r2, [r3, #4]
	NTPformat.mode = 3;           /* mode */
 800d6d4:	4b25      	ldr	r3, [pc, #148]	; (800d76c <SNTP_init+0xe8>)
 800d6d6:	2203      	movs	r2, #3
 800d6d8:	719a      	strb	r2, [r3, #6]
	NTPformat.stratum = 0;        /* stratum */
 800d6da:	4b24      	ldr	r3, [pc, #144]	; (800d76c <SNTP_init+0xe8>)
 800d6dc:	2200      	movs	r2, #0
 800d6de:	71da      	strb	r2, [r3, #7]
	NTPformat.poll = 0;           /* poll interval */
 800d6e0:	4b22      	ldr	r3, [pc, #136]	; (800d76c <SNTP_init+0xe8>)
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	721a      	strb	r2, [r3, #8]
	NTPformat.precision = 0;      /* precision */
 800d6e6:	4b21      	ldr	r3, [pc, #132]	; (800d76c <SNTP_init+0xe8>)
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	725a      	strb	r2, [r3, #9]
	NTPformat.rootdelay = 0;      /* root delay */
 800d6ec:	4b1f      	ldr	r3, [pc, #124]	; (800d76c <SNTP_init+0xe8>)
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	60da      	str	r2, [r3, #12]
	NTPformat.rootdisp = 0;       /* root dispersion */
 800d6f2:	4b1e      	ldr	r3, [pc, #120]	; (800d76c <SNTP_init+0xe8>)
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	611a      	str	r2, [r3, #16]
	NTPformat.refid = 0;          /* reference ID */
 800d6f8:	4b1c      	ldr	r3, [pc, #112]	; (800d76c <SNTP_init+0xe8>)
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	751a      	strb	r2, [r3, #20]
	NTPformat.reftime = 0;        /* reference time */
 800d6fe:	491b      	ldr	r1, [pc, #108]	; (800d76c <SNTP_init+0xe8>)
 800d700:	f04f 0200 	mov.w	r2, #0
 800d704:	f04f 0300 	mov.w	r3, #0
 800d708:	e9c1 2306 	strd	r2, r3, [r1, #24]
	NTPformat.org = 0;            /* origin timestamp */
 800d70c:	4917      	ldr	r1, [pc, #92]	; (800d76c <SNTP_init+0xe8>)
 800d70e:	f04f 0200 	mov.w	r2, #0
 800d712:	f04f 0300 	mov.w	r3, #0
 800d716:	e9c1 2308 	strd	r2, r3, [r1, #32]
	NTPformat.rec = 0;            /* receive timestamp */
 800d71a:	4914      	ldr	r1, [pc, #80]	; (800d76c <SNTP_init+0xe8>)
 800d71c:	f04f 0200 	mov.w	r2, #0
 800d720:	f04f 0300 	mov.w	r3, #0
 800d724:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	NTPformat.xmt = 1;            /* transmit timestamp */
 800d728:	4910      	ldr	r1, [pc, #64]	; (800d76c <SNTP_init+0xe8>)
 800d72a:	f04f 0201 	mov.w	r2, #1
 800d72e:	f04f 0300 	mov.w	r3, #0
 800d732:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	Flag = (NTPformat.leap<<6)+(NTPformat.version<<3)+NTPformat.mode; //one byte Flag
 800d736:	4b0d      	ldr	r3, [pc, #52]	; (800d76c <SNTP_init+0xe8>)
 800d738:	795b      	ldrb	r3, [r3, #5]
 800d73a:	019b      	lsls	r3, r3, #6
 800d73c:	b2da      	uxtb	r2, r3
 800d73e:	4b0b      	ldr	r3, [pc, #44]	; (800d76c <SNTP_init+0xe8>)
 800d740:	791b      	ldrb	r3, [r3, #4]
 800d742:	00db      	lsls	r3, r3, #3
 800d744:	b2db      	uxtb	r3, r3
 800d746:	4413      	add	r3, r2
 800d748:	b2da      	uxtb	r2, r3
 800d74a:	4b08      	ldr	r3, [pc, #32]	; (800d76c <SNTP_init+0xe8>)
 800d74c:	799b      	ldrb	r3, [r3, #6]
 800d74e:	4413      	add	r3, r2
 800d750:	b2db      	uxtb	r3, r3
 800d752:	75fb      	strb	r3, [r7, #23]
 800d754:	7dfa      	ldrb	r2, [r7, #23]
	memcpy(ntpmessage,(void const*)(&Flag),1);
 800d756:	4b08      	ldr	r3, [pc, #32]	; (800d778 <SNTP_init+0xf4>)
 800d758:	701a      	strb	r2, [r3, #0]
}
 800d75a:	bf00      	nop
 800d75c:	371c      	adds	r7, #28
 800d75e:	46bd      	mov	sp, r7
 800d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d764:	4770      	bx	lr
 800d766:	bf00      	nop
 800d768:	200037f4 	.word	0x200037f4
 800d76c:	20003780 	.word	0x20003780
 800d770:	200037f5 	.word	0x200037f5
 800d774:	200037f0 	.word	0x200037f0
 800d778:	200037c0 	.word	0x200037c0

0800d77c <SNTP_run>:

int8_t SNTP_run(datetime *time)
{
 800d77c:	b590      	push	{r4, r7, lr}
 800d77e:	b089      	sub	sp, #36	; 0x24
 800d780:	af02      	add	r7, sp, #8
 800d782:	6078      	str	r0, [r7, #4]
	uint16_t RSR_len;
	uint32_t destip = 0;
 800d784:	2300      	movs	r3, #0
 800d786:	613b      	str	r3, [r7, #16]
	uint16_t destport;
	uint16_t startindex = 40; //last 8-byte of data_buf[size is 48 byte] is xmt, so the startindex should be 40
 800d788:	2328      	movs	r3, #40	; 0x28
 800d78a:	82bb      	strh	r3, [r7, #20]

	switch(getSn_SR(NTP_SOCKET))
 800d78c:	4b53      	ldr	r3, [pc, #332]	; (800d8dc <SNTP_run+0x160>)
 800d78e:	781b      	ldrb	r3, [r3, #0]
 800d790:	009b      	lsls	r3, r3, #2
 800d792:	3301      	adds	r3, #1
 800d794:	00db      	lsls	r3, r3, #3
 800d796:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800d79a:	4618      	mov	r0, r3
 800d79c:	f7fc fc84 	bl	800a0a8 <WIZCHIP_READ>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	f000 808b 	beq.w	800d8be <SNTP_run+0x142>
 800d7a8:	2b22      	cmp	r3, #34	; 0x22
 800d7aa:	f040 8091 	bne.w	800d8d0 <SNTP_run+0x154>
	{
	case SOCK_UDP:
		if ((RSR_len = getSn_RX_RSR(NTP_SOCKET)) > 0)
 800d7ae:	4b4b      	ldr	r3, [pc, #300]	; (800d8dc <SNTP_run+0x160>)
 800d7b0:	781b      	ldrb	r3, [r3, #0]
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f7fc fe1d 	bl	800a3f2 <getSn_RX_RSR>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	82fb      	strh	r3, [r7, #22]
 800d7bc:	8afb      	ldrh	r3, [r7, #22]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d03a      	beq.n	800d838 <SNTP_run+0xbc>
		{
			if (RSR_len > MAX_SNTP_BUF_SIZE) RSR_len = MAX_SNTP_BUF_SIZE;	// if Rx data size is lager than TX_RX_MAX_BUF_SIZE
 800d7c2:	8afb      	ldrh	r3, [r7, #22]
 800d7c4:	2b38      	cmp	r3, #56	; 0x38
 800d7c6:	d901      	bls.n	800d7cc <SNTP_run+0x50>
 800d7c8:	2338      	movs	r3, #56	; 0x38
 800d7ca:	82fb      	strh	r3, [r7, #22]
			recvfrom(NTP_SOCKET, data_buf, RSR_len, (uint8_t *)&destip, &destport);
 800d7cc:	4b43      	ldr	r3, [pc, #268]	; (800d8dc <SNTP_run+0x160>)
 800d7ce:	7818      	ldrb	r0, [r3, #0]
 800d7d0:	4b43      	ldr	r3, [pc, #268]	; (800d8e0 <SNTP_run+0x164>)
 800d7d2:	6819      	ldr	r1, [r3, #0]
 800d7d4:	f107 0410 	add.w	r4, r7, #16
 800d7d8:	8afa      	ldrh	r2, [r7, #22]
 800d7da:	f107 030e 	add.w	r3, r7, #14
 800d7de:	9300      	str	r3, [sp, #0]
 800d7e0:	4623      	mov	r3, r4
 800d7e2:	f7fd fd0d 	bl	800b200 <recvfrom>

			get_seconds_from_ntp_server(data_buf,startindex);
 800d7e6:	4b3e      	ldr	r3, [pc, #248]	; (800d8e0 <SNTP_run+0x164>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	8aba      	ldrh	r2, [r7, #20]
 800d7ec:	4611      	mov	r1, r2
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f7ff fc52 	bl	800d098 <get_seconds_from_ntp_server>
			time->yy = Nowdatetime.yy;
 800d7f4:	4b3b      	ldr	r3, [pc, #236]	; (800d8e4 <SNTP_run+0x168>)
 800d7f6:	881a      	ldrh	r2, [r3, #0]
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	801a      	strh	r2, [r3, #0]
			time->mo = Nowdatetime.mo;
 800d7fc:	4b39      	ldr	r3, [pc, #228]	; (800d8e4 <SNTP_run+0x168>)
 800d7fe:	789a      	ldrb	r2, [r3, #2]
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	709a      	strb	r2, [r3, #2]
			time->dd = Nowdatetime.dd;
 800d804:	4b37      	ldr	r3, [pc, #220]	; (800d8e4 <SNTP_run+0x168>)
 800d806:	78da      	ldrb	r2, [r3, #3]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	70da      	strb	r2, [r3, #3]
			time->hh = Nowdatetime.hh;
 800d80c:	4b35      	ldr	r3, [pc, #212]	; (800d8e4 <SNTP_run+0x168>)
 800d80e:	791a      	ldrb	r2, [r3, #4]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	711a      	strb	r2, [r3, #4]
			time->mm = Nowdatetime.mm;
 800d814:	4b33      	ldr	r3, [pc, #204]	; (800d8e4 <SNTP_run+0x168>)
 800d816:	795a      	ldrb	r2, [r3, #5]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	715a      	strb	r2, [r3, #5]
			time->ss = Nowdatetime.ss;
 800d81c:	4b31      	ldr	r3, [pc, #196]	; (800d8e4 <SNTP_run+0x168>)
 800d81e:	799a      	ldrb	r2, [r3, #6]
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	719a      	strb	r2, [r3, #6]

			ntp_retry_cnt=0;
 800d824:	4b30      	ldr	r3, [pc, #192]	; (800d8e8 <SNTP_run+0x16c>)
 800d826:	2200      	movs	r2, #0
 800d828:	801a      	strh	r2, [r3, #0]
			close(NTP_SOCKET);
 800d82a:	4b2c      	ldr	r3, [pc, #176]	; (800d8dc <SNTP_run+0x160>)
 800d82c:	781b      	ldrb	r3, [r3, #0]
 800d82e:	4618      	mov	r0, r3
 800d830:	f7fd f840 	bl	800a8b4 <close>

			return 1;
 800d834:	2301      	movs	r3, #1
 800d836:	e04c      	b.n	800d8d2 <SNTP_run+0x156>
		}

		if(ntp_retry_cnt<0xFFFF)
 800d838:	4b2b      	ldr	r3, [pc, #172]	; (800d8e8 <SNTP_run+0x16c>)
 800d83a:	881b      	ldrh	r3, [r3, #0]
 800d83c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d840:	4293      	cmp	r3, r2
 800d842:	d033      	beq.n	800d8ac <SNTP_run+0x130>
		{
			if(ntp_retry_cnt==0)//first send request, no need to wait
 800d844:	4b28      	ldr	r3, [pc, #160]	; (800d8e8 <SNTP_run+0x16c>)
 800d846:	881b      	ldrh	r3, [r3, #0]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d10f      	bne.n	800d86c <SNTP_run+0xf0>
			{
				sendto(NTP_SOCKET,ntpmessage,sizeof(ntpmessage),NTPformat.dstaddr,ntp_port);
 800d84c:	4b23      	ldr	r3, [pc, #140]	; (800d8dc <SNTP_run+0x160>)
 800d84e:	7818      	ldrb	r0, [r3, #0]
 800d850:	237b      	movs	r3, #123	; 0x7b
 800d852:	9300      	str	r3, [sp, #0]
 800d854:	4b25      	ldr	r3, [pc, #148]	; (800d8ec <SNTP_run+0x170>)
 800d856:	2230      	movs	r2, #48	; 0x30
 800d858:	4925      	ldr	r1, [pc, #148]	; (800d8f0 <SNTP_run+0x174>)
 800d85a:	f7fd fb9b 	bl	800af94 <sendto>
				ntp_retry_cnt++;
 800d85e:	4b22      	ldr	r3, [pc, #136]	; (800d8e8 <SNTP_run+0x16c>)
 800d860:	881b      	ldrh	r3, [r3, #0]
 800d862:	3301      	adds	r3, #1
 800d864:	b29a      	uxth	r2, r3
 800d866:	4b20      	ldr	r3, [pc, #128]	; (800d8e8 <SNTP_run+0x16c>)
 800d868:	801a      	strh	r2, [r3, #0]
#ifdef _SNTP_DEBUG_
			printf("ntp retry failed!\r\n");
#endif
			close(NTP_SOCKET);
		}
		break;
 800d86a:	e030      	b.n	800d8ce <SNTP_run+0x152>
				if((ntp_retry_cnt % 0xFFF) == 0) //wait time
 800d86c:	4b1e      	ldr	r3, [pc, #120]	; (800d8e8 <SNTP_run+0x16c>)
 800d86e:	881a      	ldrh	r2, [r3, #0]
 800d870:	4b20      	ldr	r3, [pc, #128]	; (800d8f4 <SNTP_run+0x178>)
 800d872:	fba3 1302 	umull	r1, r3, r3, r2
 800d876:	1ad1      	subs	r1, r2, r3
 800d878:	0849      	lsrs	r1, r1, #1
 800d87a:	440b      	add	r3, r1
 800d87c:	0ad9      	lsrs	r1, r3, #11
 800d87e:	460b      	mov	r3, r1
 800d880:	031b      	lsls	r3, r3, #12
 800d882:	1a5b      	subs	r3, r3, r1
 800d884:	1ad3      	subs	r3, r2, r3
 800d886:	b29b      	uxth	r3, r3
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d120      	bne.n	800d8ce <SNTP_run+0x152>
					sendto(NTP_SOCKET,ntpmessage,sizeof(ntpmessage),NTPformat.dstaddr,ntp_port);
 800d88c:	4b13      	ldr	r3, [pc, #76]	; (800d8dc <SNTP_run+0x160>)
 800d88e:	7818      	ldrb	r0, [r3, #0]
 800d890:	237b      	movs	r3, #123	; 0x7b
 800d892:	9300      	str	r3, [sp, #0]
 800d894:	4b15      	ldr	r3, [pc, #84]	; (800d8ec <SNTP_run+0x170>)
 800d896:	2230      	movs	r2, #48	; 0x30
 800d898:	4915      	ldr	r1, [pc, #84]	; (800d8f0 <SNTP_run+0x174>)
 800d89a:	f7fd fb7b 	bl	800af94 <sendto>
					ntp_retry_cnt++;
 800d89e:	4b12      	ldr	r3, [pc, #72]	; (800d8e8 <SNTP_run+0x16c>)
 800d8a0:	881b      	ldrh	r3, [r3, #0]
 800d8a2:	3301      	adds	r3, #1
 800d8a4:	b29a      	uxth	r2, r3
 800d8a6:	4b10      	ldr	r3, [pc, #64]	; (800d8e8 <SNTP_run+0x16c>)
 800d8a8:	801a      	strh	r2, [r3, #0]
		break;
 800d8aa:	e010      	b.n	800d8ce <SNTP_run+0x152>
			ntp_retry_cnt=0;
 800d8ac:	4b0e      	ldr	r3, [pc, #56]	; (800d8e8 <SNTP_run+0x16c>)
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	801a      	strh	r2, [r3, #0]
			close(NTP_SOCKET);
 800d8b2:	4b0a      	ldr	r3, [pc, #40]	; (800d8dc <SNTP_run+0x160>)
 800d8b4:	781b      	ldrb	r3, [r3, #0]
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f7fc fffc 	bl	800a8b4 <close>
		break;
 800d8bc:	e007      	b.n	800d8ce <SNTP_run+0x152>
	case SOCK_CLOSED:
		socket(NTP_SOCKET,Sn_MR_UDP,ntp_port,0);
 800d8be:	4b07      	ldr	r3, [pc, #28]	; (800d8dc <SNTP_run+0x160>)
 800d8c0:	7818      	ldrb	r0, [r3, #0]
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	227b      	movs	r2, #123	; 0x7b
 800d8c6:	2102      	movs	r1, #2
 800d8c8:	f7fc fede 	bl	800a688 <socket>
		break;
 800d8cc:	e000      	b.n	800d8d0 <SNTP_run+0x154>
		break;
 800d8ce:	bf00      	nop
	}
	// Return value
	// 0 - failed / 1 - success
	return 0;
 800d8d0:	2300      	movs	r3, #0
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	371c      	adds	r7, #28
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd90      	pop	{r4, r7, pc}
 800d8da:	bf00      	nop
 800d8dc:	200037f4 	.word	0x200037f4
 800d8e0:	200037f0 	.word	0x200037f0
 800d8e4:	200037b8 	.word	0x200037b8
 800d8e8:	200037f6 	.word	0x200037f6
 800d8ec:	20003780 	.word	0x20003780
 800d8f0:	200037c0 	.word	0x200037c0
 800d8f4:	00100101 	.word	0x00100101

0800d8f8 <calcdatetime>:

void calcdatetime(tstamp seconds)
{
 800d8f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d8fc:	b0ae      	sub	sp, #184	; 0xb8
 800d8fe:	af00      	add	r7, sp, #0
 800d900:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
	uint8_t yf=0;
 800d904:	2300      	movs	r3, #0
 800d906:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	tstamp n=0,d=0,total_d=0,rz=0;
 800d90a:	f04f 0200 	mov.w	r2, #0
 800d90e:	f04f 0300 	mov.w	r3, #0
 800d912:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 800d916:	f04f 0200 	mov.w	r2, #0
 800d91a:	f04f 0300 	mov.w	r3, #0
 800d91e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 800d922:	f04f 0200 	mov.w	r2, #0
 800d926:	f04f 0300 	mov.w	r3, #0
 800d92a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 800d92e:	f04f 0200 	mov.w	r2, #0
 800d932:	f04f 0300 	mov.w	r3, #0
 800d936:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	uint16_t y=0,r=0,yr=0;
 800d93a:	2300      	movs	r3, #0
 800d93c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800d940:	2300      	movs	r3, #0
 800d942:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800d946:	2300      	movs	r3, #0
 800d948:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	signed long long yd=0;
 800d94c:	f04f 0200 	mov.w	r2, #0
 800d950:	f04f 0300 	mov.w	r3, #0
 800d954:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88

	n = seconds;
 800d958:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d95c:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	total_d = seconds/(SECS_PERDAY);
 800d960:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d964:	4ac0      	ldr	r2, [pc, #768]	; (800dc68 <calcdatetime+0x370>)
 800d966:	f04f 0300 	mov.w	r3, #0
 800d96a:	f7f2 fc91 	bl	8000290 <__aeabi_uldivmod>
 800d96e:	4602      	mov	r2, r0
 800d970:	460b      	mov	r3, r1
 800d972:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	d=0;
 800d976:	f04f 0200 	mov.w	r2, #0
 800d97a:	f04f 0300 	mov.w	r3, #0
 800d97e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	uint32_t p_year_total_sec=SECS_PERDAY*365;
 800d982:	4bba      	ldr	r3, [pc, #744]	; (800dc6c <calcdatetime+0x374>)
 800d984:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t r_year_total_sec=SECS_PERDAY*366;
 800d986:	4bba      	ldr	r3, [pc, #744]	; (800dc70 <calcdatetime+0x378>)
 800d988:	677b      	str	r3, [r7, #116]	; 0x74
	while(n>=p_year_total_sec)
 800d98a:	e06c      	b.n	800da66 <calcdatetime+0x16e>
	{
		if((EPOCH+r)%400==0 || ((EPOCH+r)%100!=0 && (EPOCH+r)%4==0))
 800d98c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800d990:	f203 716c 	addw	r1, r3, #1900	; 0x76c
 800d994:	4bb7      	ldr	r3, [pc, #732]	; (800dc74 <calcdatetime+0x37c>)
 800d996:	fb83 2301 	smull	r2, r3, r3, r1
 800d99a:	11da      	asrs	r2, r3, #7
 800d99c:	17cb      	asrs	r3, r1, #31
 800d99e:	1ad3      	subs	r3, r2, r3
 800d9a0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d9a4:	fb02 f303 	mul.w	r3, r2, r3
 800d9a8:	1acb      	subs	r3, r1, r3
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d017      	beq.n	800d9de <calcdatetime+0xe6>
 800d9ae:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800d9b2:	f203 716c 	addw	r1, r3, #1900	; 0x76c
 800d9b6:	4baf      	ldr	r3, [pc, #700]	; (800dc74 <calcdatetime+0x37c>)
 800d9b8:	fb83 2301 	smull	r2, r3, r3, r1
 800d9bc:	115a      	asrs	r2, r3, #5
 800d9be:	17cb      	asrs	r3, r1, #31
 800d9c0:	1ad3      	subs	r3, r2, r3
 800d9c2:	2264      	movs	r2, #100	; 0x64
 800d9c4:	fb02 f303 	mul.w	r3, r2, r3
 800d9c8:	1acb      	subs	r3, r1, r3
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d024      	beq.n	800da18 <calcdatetime+0x120>
 800d9ce:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800d9d2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800d9d6:	f003 0303 	and.w	r3, r3, #3
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d11c      	bne.n	800da18 <calcdatetime+0x120>
		{
			n = n -(r_year_total_sec);
 800d9de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	4698      	mov	r8, r3
 800d9e4:	4691      	mov	r9, r2
 800d9e6:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800d9ea:	ebb2 0108 	subs.w	r1, r2, r8
 800d9ee:	65b9      	str	r1, [r7, #88]	; 0x58
 800d9f0:	eb63 0309 	sbc.w	r3, r3, r9
 800d9f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d9f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d9fa:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
			d = d + 366;
 800d9fe:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800da02:	f512 71b7 	adds.w	r1, r2, #366	; 0x16e
 800da06:	6539      	str	r1, [r7, #80]	; 0x50
 800da08:	f143 0300 	adc.w	r3, r3, #0
 800da0c:	657b      	str	r3, [r7, #84]	; 0x54
 800da0e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800da12:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 800da16:	e01c      	b.n	800da52 <calcdatetime+0x15a>
		}
		else
		{
			n = n - (p_year_total_sec);
 800da18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da1a:	2200      	movs	r2, #0
 800da1c:	469a      	mov	sl, r3
 800da1e:	4693      	mov	fp, r2
 800da20:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800da24:	ebb2 010a 	subs.w	r1, r2, sl
 800da28:	64b9      	str	r1, [r7, #72]	; 0x48
 800da2a:	eb63 030b 	sbc.w	r3, r3, fp
 800da2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800da34:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
			d = d + 365;
 800da38:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800da3c:	f240 116d 	movw	r1, #365	; 0x16d
 800da40:	1851      	adds	r1, r2, r1
 800da42:	6439      	str	r1, [r7, #64]	; 0x40
 800da44:	f143 0300 	adc.w	r3, r3, #0
 800da48:	647b      	str	r3, [r7, #68]	; 0x44
 800da4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800da4e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
		}
		r+=1;
 800da52:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800da56:	3301      	adds	r3, #1
 800da58:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
		y+=1;
 800da5c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800da60:	3301      	adds	r3, #1
 800da62:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	while(n>=p_year_total_sec)
 800da66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da68:	2200      	movs	r2, #0
 800da6a:	461c      	mov	r4, r3
 800da6c:	4615      	mov	r5, r2
 800da6e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800da72:	42a2      	cmp	r2, r4
 800da74:	41ab      	sbcs	r3, r5
 800da76:	d289      	bcs.n	800d98c <calcdatetime+0x94>

	}

	y += EPOCH;
 800da78:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800da7c:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800da80:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

	Nowdatetime.yy = y;
 800da84:	4a7c      	ldr	r2, [pc, #496]	; (800dc78 <calcdatetime+0x380>)
 800da86:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800da8a:	8013      	strh	r3, [r2, #0]

	yd=0;
 800da8c:	f04f 0200 	mov.w	r2, #0
 800da90:	f04f 0300 	mov.w	r3, #0
 800da94:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	yd = total_d - d;
 800da98:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800da9c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800daa0:	1a84      	subs	r4, r0, r2
 800daa2:	663c      	str	r4, [r7, #96]	; 0x60
 800daa4:	eb61 0303 	sbc.w	r3, r1, r3
 800daa8:	667b      	str	r3, [r7, #100]	; 0x64
 800daaa:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800daae:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88

	yf=1;
 800dab2:	2301      	movs	r3, #1
 800dab4:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	while(yd>=28)
 800dab8:	e0c8      	b.n	800dc4c <calcdatetime+0x354>
	{

		if(yf==1 || yf==3 || yf==5 || yf==7 || yf==8 || yf==10 || yf==12)
 800daba:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800dabe:	2b01      	cmp	r3, #1
 800dac0:	d017      	beq.n	800daf2 <calcdatetime+0x1fa>
 800dac2:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800dac6:	2b03      	cmp	r3, #3
 800dac8:	d013      	beq.n	800daf2 <calcdatetime+0x1fa>
 800daca:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800dace:	2b05      	cmp	r3, #5
 800dad0:	d00f      	beq.n	800daf2 <calcdatetime+0x1fa>
 800dad2:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800dad6:	2b07      	cmp	r3, #7
 800dad8:	d00b      	beq.n	800daf2 <calcdatetime+0x1fa>
 800dada:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800dade:	2b08      	cmp	r3, #8
 800dae0:	d007      	beq.n	800daf2 <calcdatetime+0x1fa>
 800dae2:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800dae6:	2b0a      	cmp	r3, #10
 800dae8:	d003      	beq.n	800daf2 <calcdatetime+0x1fa>
 800daea:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800daee:	2b0c      	cmp	r3, #12
 800daf0:	d11c      	bne.n	800db2c <calcdatetime+0x234>
		{
			yd -= 31;
 800daf2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800daf6:	f1b2 011f 	subs.w	r1, r2, #31
 800dafa:	63b9      	str	r1, [r7, #56]	; 0x38
 800dafc:	f143 33ff 	adc.w	r3, r3, #4294967295
 800db00:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db02:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800db06:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			if(yd<0)break;
 800db0a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800db0e:	2b00      	cmp	r3, #0
 800db10:	f2c0 80a4 	blt.w	800dc5c <calcdatetime+0x364>
			rz += 31;
 800db14:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800db18:	f112 011f 	adds.w	r1, r2, #31
 800db1c:	6339      	str	r1, [r7, #48]	; 0x30
 800db1e:	f143 0300 	adc.w	r3, r3, #0
 800db22:	637b      	str	r3, [r7, #52]	; 0x34
 800db24:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800db28:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		}

		if (yf==2)
 800db2c:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800db30:	2b02      	cmp	r3, #2
 800db32:	d15a      	bne.n	800dbea <calcdatetime+0x2f2>
		{
			if (y%400==0 || (y%100!=0 && y%4==0))
 800db34:	f8b7 1096 	ldrh.w	r1, [r7, #150]	; 0x96
 800db38:	4b4e      	ldr	r3, [pc, #312]	; (800dc74 <calcdatetime+0x37c>)
 800db3a:	fba3 2301 	umull	r2, r3, r3, r1
 800db3e:	09da      	lsrs	r2, r3, #7
 800db40:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800db44:	fb02 f303 	mul.w	r3, r2, r3
 800db48:	1acb      	subs	r3, r1, r3
 800db4a:	b29b      	uxth	r3, r3
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d013      	beq.n	800db78 <calcdatetime+0x280>
 800db50:	f8b7 1096 	ldrh.w	r1, [r7, #150]	; 0x96
 800db54:	4b47      	ldr	r3, [pc, #284]	; (800dc74 <calcdatetime+0x37c>)
 800db56:	fba3 2301 	umull	r2, r3, r3, r1
 800db5a:	095a      	lsrs	r2, r3, #5
 800db5c:	2364      	movs	r3, #100	; 0x64
 800db5e:	fb02 f303 	mul.w	r3, r2, r3
 800db62:	1acb      	subs	r3, r1, r3
 800db64:	b29b      	uxth	r3, r3
 800db66:	2b00      	cmp	r3, #0
 800db68:	d023      	beq.n	800dbb2 <calcdatetime+0x2ba>
 800db6a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800db6e:	f003 0303 	and.w	r3, r3, #3
 800db72:	b29b      	uxth	r3, r3
 800db74:	2b00      	cmp	r3, #0
 800db76:	d11c      	bne.n	800dbb2 <calcdatetime+0x2ba>
			{
				yd -= 29;
 800db78:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800db7c:	f1b2 011d 	subs.w	r1, r2, #29
 800db80:	62b9      	str	r1, [r7, #40]	; 0x28
 800db82:	f143 33ff 	adc.w	r3, r3, #4294967295
 800db86:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db88:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800db8c:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
				if(yd<0)break;
 800db90:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800db94:	2b00      	cmp	r3, #0
 800db96:	db63      	blt.n	800dc60 <calcdatetime+0x368>
				rz += 29;
 800db98:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800db9c:	f112 011d 	adds.w	r1, r2, #29
 800dba0:	6239      	str	r1, [r7, #32]
 800dba2:	f143 0300 	adc.w	r3, r3, #0
 800dba6:	627b      	str	r3, [r7, #36]	; 0x24
 800dba8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800dbac:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
 800dbb0:	e01b      	b.n	800dbea <calcdatetime+0x2f2>
			}
			else
			{
				yd -= 28;
 800dbb2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800dbb6:	f1b2 011c 	subs.w	r1, r2, #28
 800dbba:	61b9      	str	r1, [r7, #24]
 800dbbc:	f143 33ff 	adc.w	r3, r3, #4294967295
 800dbc0:	61fb      	str	r3, [r7, #28]
 800dbc2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800dbc6:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
				if(yd<0)break;
 800dbca:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	db48      	blt.n	800dc64 <calcdatetime+0x36c>
				rz += 28;
 800dbd2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800dbd6:	f112 011c 	adds.w	r1, r2, #28
 800dbda:	6139      	str	r1, [r7, #16]
 800dbdc:	f143 0300 	adc.w	r3, r3, #0
 800dbe0:	617b      	str	r3, [r7, #20]
 800dbe2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800dbe6:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			}
		}
		if(yf==4 || yf==6 || yf==9 || yf==11 )
 800dbea:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800dbee:	2b04      	cmp	r3, #4
 800dbf0:	d00b      	beq.n	800dc0a <calcdatetime+0x312>
 800dbf2:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800dbf6:	2b06      	cmp	r3, #6
 800dbf8:	d007      	beq.n	800dc0a <calcdatetime+0x312>
 800dbfa:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800dbfe:	2b09      	cmp	r3, #9
 800dc00:	d003      	beq.n	800dc0a <calcdatetime+0x312>
 800dc02:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800dc06:	2b0b      	cmp	r3, #11
 800dc08:	d11b      	bne.n	800dc42 <calcdatetime+0x34a>
		{
			yd -= 30;
 800dc0a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800dc0e:	f1b2 011e 	subs.w	r1, r2, #30
 800dc12:	60b9      	str	r1, [r7, #8]
 800dc14:	f143 33ff 	adc.w	r3, r3, #4294967295
 800dc18:	60fb      	str	r3, [r7, #12]
 800dc1a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800dc1e:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			if(yd<0)break;
 800dc22:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	db28      	blt.n	800dc7c <calcdatetime+0x384>
			rz += 30;
 800dc2a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800dc2e:	f112 011e 	adds.w	r1, r2, #30
 800dc32:	6039      	str	r1, [r7, #0]
 800dc34:	f143 0300 	adc.w	r3, r3, #0
 800dc38:	607b      	str	r3, [r7, #4]
 800dc3a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800dc3e:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		}
		yf += 1;
 800dc42:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800dc46:	3301      	adds	r3, #1
 800dc48:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	while(yd>=28)
 800dc4c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800dc50:	2a1c      	cmp	r2, #28
 800dc52:	f173 0300 	sbcs.w	r3, r3, #0
 800dc56:	f6bf af30 	bge.w	800daba <calcdatetime+0x1c2>
 800dc5a:	e010      	b.n	800dc7e <calcdatetime+0x386>
			if(yd<0)break;
 800dc5c:	bf00      	nop
 800dc5e:	e00e      	b.n	800dc7e <calcdatetime+0x386>
				if(yd<0)break;
 800dc60:	bf00      	nop
 800dc62:	e00c      	b.n	800dc7e <calcdatetime+0x386>
				if(yd<0)break;
 800dc64:	bf00      	nop
 800dc66:	e00a      	b.n	800dc7e <calcdatetime+0x386>
 800dc68:	00015180 	.word	0x00015180
 800dc6c:	01e13380 	.word	0x01e13380
 800dc70:	01e28500 	.word	0x01e28500
 800dc74:	51eb851f 	.word	0x51eb851f
 800dc78:	200037b8 	.word	0x200037b8
			if(yd<0)break;
 800dc7c:	bf00      	nop

	}
	Nowdatetime.mo=yf;
 800dc7e:	4a2e      	ldr	r2, [pc, #184]	; (800dd38 <calcdatetime+0x440>)
 800dc80:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800dc84:	7093      	strb	r3, [r2, #2]
	yr = total_d-d-rz;
 800dc86:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 800dc8a:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800dc8e:	1ad3      	subs	r3, r2, r3
 800dc90:	b29a      	uxth	r2, r3
 800dc92:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800dc96:	1ad3      	subs	r3, r2, r3
 800dc98:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

	yr += 1;
 800dc9c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800dca0:	3301      	adds	r3, #1
 800dca2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

	Nowdatetime.dd=yr;
 800dca6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800dcaa:	b2da      	uxtb	r2, r3
 800dcac:	4b22      	ldr	r3, [pc, #136]	; (800dd38 <calcdatetime+0x440>)
 800dcae:	70da      	strb	r2, [r3, #3]

	//calculation for time
	seconds = seconds%SECS_PERDAY;
 800dcb0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800dcb4:	4a21      	ldr	r2, [pc, #132]	; (800dd3c <calcdatetime+0x444>)
 800dcb6:	f04f 0300 	mov.w	r3, #0
 800dcba:	f7f2 fae9 	bl	8000290 <__aeabi_uldivmod>
 800dcbe:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	Nowdatetime.hh = seconds/3600;
 800dcc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800dcc6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800dcca:	f04f 0300 	mov.w	r3, #0
 800dcce:	f7f2 fadf 	bl	8000290 <__aeabi_uldivmod>
 800dcd2:	4602      	mov	r2, r0
 800dcd4:	460b      	mov	r3, r1
 800dcd6:	b2d2      	uxtb	r2, r2
 800dcd8:	4b17      	ldr	r3, [pc, #92]	; (800dd38 <calcdatetime+0x440>)
 800dcda:	711a      	strb	r2, [r3, #4]
	Nowdatetime.mm = (seconds%3600)/60;
 800dcdc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800dce0:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800dce4:	f04f 0300 	mov.w	r3, #0
 800dce8:	f7f2 fad2 	bl	8000290 <__aeabi_uldivmod>
 800dcec:	4610      	mov	r0, r2
 800dcee:	4619      	mov	r1, r3
 800dcf0:	f04f 023c 	mov.w	r2, #60	; 0x3c
 800dcf4:	f04f 0300 	mov.w	r3, #0
 800dcf8:	f7f2 faca 	bl	8000290 <__aeabi_uldivmod>
 800dcfc:	4602      	mov	r2, r0
 800dcfe:	460b      	mov	r3, r1
 800dd00:	b2d2      	uxtb	r2, r2
 800dd02:	4b0d      	ldr	r3, [pc, #52]	; (800dd38 <calcdatetime+0x440>)
 800dd04:	715a      	strb	r2, [r3, #5]
	Nowdatetime.ss = (seconds%3600)%60;
 800dd06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800dd0a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800dd0e:	f04f 0300 	mov.w	r3, #0
 800dd12:	f7f2 fabd 	bl	8000290 <__aeabi_uldivmod>
 800dd16:	4610      	mov	r0, r2
 800dd18:	4619      	mov	r1, r3
 800dd1a:	f04f 023c 	mov.w	r2, #60	; 0x3c
 800dd1e:	f04f 0300 	mov.w	r3, #0
 800dd22:	f7f2 fab5 	bl	8000290 <__aeabi_uldivmod>
 800dd26:	b2d2      	uxtb	r2, r2
 800dd28:	4b03      	ldr	r3, [pc, #12]	; (800dd38 <calcdatetime+0x440>)
 800dd2a:	719a      	strb	r2, [r3, #6]

}
 800dd2c:	bf00      	nop
 800dd2e:	37b8      	adds	r7, #184	; 0xb8
 800dd30:	46bd      	mov	sp, r7
 800dd32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dd36:	bf00      	nop
 800dd38:	200037b8 	.word	0x200037b8
 800dd3c:	00015180 	.word	0x00015180

0800dd40 <__errno>:
 800dd40:	4b01      	ldr	r3, [pc, #4]	; (800dd48 <__errno+0x8>)
 800dd42:	6818      	ldr	r0, [r3, #0]
 800dd44:	4770      	bx	lr
 800dd46:	bf00      	nop
 800dd48:	200000ac 	.word	0x200000ac

0800dd4c <__libc_init_array>:
 800dd4c:	b570      	push	{r4, r5, r6, lr}
 800dd4e:	4d0d      	ldr	r5, [pc, #52]	; (800dd84 <__libc_init_array+0x38>)
 800dd50:	4c0d      	ldr	r4, [pc, #52]	; (800dd88 <__libc_init_array+0x3c>)
 800dd52:	1b64      	subs	r4, r4, r5
 800dd54:	10a4      	asrs	r4, r4, #2
 800dd56:	2600      	movs	r6, #0
 800dd58:	42a6      	cmp	r6, r4
 800dd5a:	d109      	bne.n	800dd70 <__libc_init_array+0x24>
 800dd5c:	4d0b      	ldr	r5, [pc, #44]	; (800dd8c <__libc_init_array+0x40>)
 800dd5e:	4c0c      	ldr	r4, [pc, #48]	; (800dd90 <__libc_init_array+0x44>)
 800dd60:	f001 fa2c 	bl	800f1bc <_init>
 800dd64:	1b64      	subs	r4, r4, r5
 800dd66:	10a4      	asrs	r4, r4, #2
 800dd68:	2600      	movs	r6, #0
 800dd6a:	42a6      	cmp	r6, r4
 800dd6c:	d105      	bne.n	800dd7a <__libc_init_array+0x2e>
 800dd6e:	bd70      	pop	{r4, r5, r6, pc}
 800dd70:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd74:	4798      	blx	r3
 800dd76:	3601      	adds	r6, #1
 800dd78:	e7ee      	b.n	800dd58 <__libc_init_array+0xc>
 800dd7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd7e:	4798      	blx	r3
 800dd80:	3601      	adds	r6, #1
 800dd82:	e7f2      	b.n	800dd6a <__libc_init_array+0x1e>
 800dd84:	0800ffcc 	.word	0x0800ffcc
 800dd88:	0800ffcc 	.word	0x0800ffcc
 800dd8c:	0800ffcc 	.word	0x0800ffcc
 800dd90:	0800ffd0 	.word	0x0800ffd0

0800dd94 <malloc>:
 800dd94:	4b02      	ldr	r3, [pc, #8]	; (800dda0 <malloc+0xc>)
 800dd96:	4601      	mov	r1, r0
 800dd98:	6818      	ldr	r0, [r3, #0]
 800dd9a:	f000 b88d 	b.w	800deb8 <_malloc_r>
 800dd9e:	bf00      	nop
 800dda0:	200000ac 	.word	0x200000ac

0800dda4 <free>:
 800dda4:	4b02      	ldr	r3, [pc, #8]	; (800ddb0 <free+0xc>)
 800dda6:	4601      	mov	r1, r0
 800dda8:	6818      	ldr	r0, [r3, #0]
 800ddaa:	f000 b819 	b.w	800dde0 <_free_r>
 800ddae:	bf00      	nop
 800ddb0:	200000ac 	.word	0x200000ac

0800ddb4 <memcpy>:
 800ddb4:	440a      	add	r2, r1
 800ddb6:	4291      	cmp	r1, r2
 800ddb8:	f100 33ff 	add.w	r3, r0, #4294967295
 800ddbc:	d100      	bne.n	800ddc0 <memcpy+0xc>
 800ddbe:	4770      	bx	lr
 800ddc0:	b510      	push	{r4, lr}
 800ddc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ddca:	4291      	cmp	r1, r2
 800ddcc:	d1f9      	bne.n	800ddc2 <memcpy+0xe>
 800ddce:	bd10      	pop	{r4, pc}

0800ddd0 <memset>:
 800ddd0:	4402      	add	r2, r0
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	4293      	cmp	r3, r2
 800ddd6:	d100      	bne.n	800ddda <memset+0xa>
 800ddd8:	4770      	bx	lr
 800ddda:	f803 1b01 	strb.w	r1, [r3], #1
 800ddde:	e7f9      	b.n	800ddd4 <memset+0x4>

0800dde0 <_free_r>:
 800dde0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dde2:	2900      	cmp	r1, #0
 800dde4:	d044      	beq.n	800de70 <_free_r+0x90>
 800dde6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddea:	9001      	str	r0, [sp, #4]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	f1a1 0404 	sub.w	r4, r1, #4
 800ddf2:	bfb8      	it	lt
 800ddf4:	18e4      	addlt	r4, r4, r3
 800ddf6:	f000 fc8d 	bl	800e714 <__malloc_lock>
 800ddfa:	4a1e      	ldr	r2, [pc, #120]	; (800de74 <_free_r+0x94>)
 800ddfc:	9801      	ldr	r0, [sp, #4]
 800ddfe:	6813      	ldr	r3, [r2, #0]
 800de00:	b933      	cbnz	r3, 800de10 <_free_r+0x30>
 800de02:	6063      	str	r3, [r4, #4]
 800de04:	6014      	str	r4, [r2, #0]
 800de06:	b003      	add	sp, #12
 800de08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de0c:	f000 bc88 	b.w	800e720 <__malloc_unlock>
 800de10:	42a3      	cmp	r3, r4
 800de12:	d908      	bls.n	800de26 <_free_r+0x46>
 800de14:	6825      	ldr	r5, [r4, #0]
 800de16:	1961      	adds	r1, r4, r5
 800de18:	428b      	cmp	r3, r1
 800de1a:	bf01      	itttt	eq
 800de1c:	6819      	ldreq	r1, [r3, #0]
 800de1e:	685b      	ldreq	r3, [r3, #4]
 800de20:	1949      	addeq	r1, r1, r5
 800de22:	6021      	streq	r1, [r4, #0]
 800de24:	e7ed      	b.n	800de02 <_free_r+0x22>
 800de26:	461a      	mov	r2, r3
 800de28:	685b      	ldr	r3, [r3, #4]
 800de2a:	b10b      	cbz	r3, 800de30 <_free_r+0x50>
 800de2c:	42a3      	cmp	r3, r4
 800de2e:	d9fa      	bls.n	800de26 <_free_r+0x46>
 800de30:	6811      	ldr	r1, [r2, #0]
 800de32:	1855      	adds	r5, r2, r1
 800de34:	42a5      	cmp	r5, r4
 800de36:	d10b      	bne.n	800de50 <_free_r+0x70>
 800de38:	6824      	ldr	r4, [r4, #0]
 800de3a:	4421      	add	r1, r4
 800de3c:	1854      	adds	r4, r2, r1
 800de3e:	42a3      	cmp	r3, r4
 800de40:	6011      	str	r1, [r2, #0]
 800de42:	d1e0      	bne.n	800de06 <_free_r+0x26>
 800de44:	681c      	ldr	r4, [r3, #0]
 800de46:	685b      	ldr	r3, [r3, #4]
 800de48:	6053      	str	r3, [r2, #4]
 800de4a:	4421      	add	r1, r4
 800de4c:	6011      	str	r1, [r2, #0]
 800de4e:	e7da      	b.n	800de06 <_free_r+0x26>
 800de50:	d902      	bls.n	800de58 <_free_r+0x78>
 800de52:	230c      	movs	r3, #12
 800de54:	6003      	str	r3, [r0, #0]
 800de56:	e7d6      	b.n	800de06 <_free_r+0x26>
 800de58:	6825      	ldr	r5, [r4, #0]
 800de5a:	1961      	adds	r1, r4, r5
 800de5c:	428b      	cmp	r3, r1
 800de5e:	bf04      	itt	eq
 800de60:	6819      	ldreq	r1, [r3, #0]
 800de62:	685b      	ldreq	r3, [r3, #4]
 800de64:	6063      	str	r3, [r4, #4]
 800de66:	bf04      	itt	eq
 800de68:	1949      	addeq	r1, r1, r5
 800de6a:	6021      	streq	r1, [r4, #0]
 800de6c:	6054      	str	r4, [r2, #4]
 800de6e:	e7ca      	b.n	800de06 <_free_r+0x26>
 800de70:	b003      	add	sp, #12
 800de72:	bd30      	pop	{r4, r5, pc}
 800de74:	200037f8 	.word	0x200037f8

0800de78 <sbrk_aligned>:
 800de78:	b570      	push	{r4, r5, r6, lr}
 800de7a:	4e0e      	ldr	r6, [pc, #56]	; (800deb4 <sbrk_aligned+0x3c>)
 800de7c:	460c      	mov	r4, r1
 800de7e:	6831      	ldr	r1, [r6, #0]
 800de80:	4605      	mov	r5, r0
 800de82:	b911      	cbnz	r1, 800de8a <sbrk_aligned+0x12>
 800de84:	f000 f91a 	bl	800e0bc <_sbrk_r>
 800de88:	6030      	str	r0, [r6, #0]
 800de8a:	4621      	mov	r1, r4
 800de8c:	4628      	mov	r0, r5
 800de8e:	f000 f915 	bl	800e0bc <_sbrk_r>
 800de92:	1c43      	adds	r3, r0, #1
 800de94:	d00a      	beq.n	800deac <sbrk_aligned+0x34>
 800de96:	1cc4      	adds	r4, r0, #3
 800de98:	f024 0403 	bic.w	r4, r4, #3
 800de9c:	42a0      	cmp	r0, r4
 800de9e:	d007      	beq.n	800deb0 <sbrk_aligned+0x38>
 800dea0:	1a21      	subs	r1, r4, r0
 800dea2:	4628      	mov	r0, r5
 800dea4:	f000 f90a 	bl	800e0bc <_sbrk_r>
 800dea8:	3001      	adds	r0, #1
 800deaa:	d101      	bne.n	800deb0 <sbrk_aligned+0x38>
 800deac:	f04f 34ff 	mov.w	r4, #4294967295
 800deb0:	4620      	mov	r0, r4
 800deb2:	bd70      	pop	{r4, r5, r6, pc}
 800deb4:	200037fc 	.word	0x200037fc

0800deb8 <_malloc_r>:
 800deb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800debc:	1ccd      	adds	r5, r1, #3
 800debe:	f025 0503 	bic.w	r5, r5, #3
 800dec2:	3508      	adds	r5, #8
 800dec4:	2d0c      	cmp	r5, #12
 800dec6:	bf38      	it	cc
 800dec8:	250c      	movcc	r5, #12
 800deca:	2d00      	cmp	r5, #0
 800decc:	4607      	mov	r7, r0
 800dece:	db01      	blt.n	800ded4 <_malloc_r+0x1c>
 800ded0:	42a9      	cmp	r1, r5
 800ded2:	d905      	bls.n	800dee0 <_malloc_r+0x28>
 800ded4:	230c      	movs	r3, #12
 800ded6:	603b      	str	r3, [r7, #0]
 800ded8:	2600      	movs	r6, #0
 800deda:	4630      	mov	r0, r6
 800dedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dee0:	4e2e      	ldr	r6, [pc, #184]	; (800df9c <_malloc_r+0xe4>)
 800dee2:	f000 fc17 	bl	800e714 <__malloc_lock>
 800dee6:	6833      	ldr	r3, [r6, #0]
 800dee8:	461c      	mov	r4, r3
 800deea:	bb34      	cbnz	r4, 800df3a <_malloc_r+0x82>
 800deec:	4629      	mov	r1, r5
 800deee:	4638      	mov	r0, r7
 800def0:	f7ff ffc2 	bl	800de78 <sbrk_aligned>
 800def4:	1c43      	adds	r3, r0, #1
 800def6:	4604      	mov	r4, r0
 800def8:	d14d      	bne.n	800df96 <_malloc_r+0xde>
 800defa:	6834      	ldr	r4, [r6, #0]
 800defc:	4626      	mov	r6, r4
 800defe:	2e00      	cmp	r6, #0
 800df00:	d140      	bne.n	800df84 <_malloc_r+0xcc>
 800df02:	6823      	ldr	r3, [r4, #0]
 800df04:	4631      	mov	r1, r6
 800df06:	4638      	mov	r0, r7
 800df08:	eb04 0803 	add.w	r8, r4, r3
 800df0c:	f000 f8d6 	bl	800e0bc <_sbrk_r>
 800df10:	4580      	cmp	r8, r0
 800df12:	d13a      	bne.n	800df8a <_malloc_r+0xd2>
 800df14:	6821      	ldr	r1, [r4, #0]
 800df16:	3503      	adds	r5, #3
 800df18:	1a6d      	subs	r5, r5, r1
 800df1a:	f025 0503 	bic.w	r5, r5, #3
 800df1e:	3508      	adds	r5, #8
 800df20:	2d0c      	cmp	r5, #12
 800df22:	bf38      	it	cc
 800df24:	250c      	movcc	r5, #12
 800df26:	4629      	mov	r1, r5
 800df28:	4638      	mov	r0, r7
 800df2a:	f7ff ffa5 	bl	800de78 <sbrk_aligned>
 800df2e:	3001      	adds	r0, #1
 800df30:	d02b      	beq.n	800df8a <_malloc_r+0xd2>
 800df32:	6823      	ldr	r3, [r4, #0]
 800df34:	442b      	add	r3, r5
 800df36:	6023      	str	r3, [r4, #0]
 800df38:	e00e      	b.n	800df58 <_malloc_r+0xa0>
 800df3a:	6822      	ldr	r2, [r4, #0]
 800df3c:	1b52      	subs	r2, r2, r5
 800df3e:	d41e      	bmi.n	800df7e <_malloc_r+0xc6>
 800df40:	2a0b      	cmp	r2, #11
 800df42:	d916      	bls.n	800df72 <_malloc_r+0xba>
 800df44:	1961      	adds	r1, r4, r5
 800df46:	42a3      	cmp	r3, r4
 800df48:	6025      	str	r5, [r4, #0]
 800df4a:	bf18      	it	ne
 800df4c:	6059      	strne	r1, [r3, #4]
 800df4e:	6863      	ldr	r3, [r4, #4]
 800df50:	bf08      	it	eq
 800df52:	6031      	streq	r1, [r6, #0]
 800df54:	5162      	str	r2, [r4, r5]
 800df56:	604b      	str	r3, [r1, #4]
 800df58:	4638      	mov	r0, r7
 800df5a:	f104 060b 	add.w	r6, r4, #11
 800df5e:	f000 fbdf 	bl	800e720 <__malloc_unlock>
 800df62:	f026 0607 	bic.w	r6, r6, #7
 800df66:	1d23      	adds	r3, r4, #4
 800df68:	1af2      	subs	r2, r6, r3
 800df6a:	d0b6      	beq.n	800deda <_malloc_r+0x22>
 800df6c:	1b9b      	subs	r3, r3, r6
 800df6e:	50a3      	str	r3, [r4, r2]
 800df70:	e7b3      	b.n	800deda <_malloc_r+0x22>
 800df72:	6862      	ldr	r2, [r4, #4]
 800df74:	42a3      	cmp	r3, r4
 800df76:	bf0c      	ite	eq
 800df78:	6032      	streq	r2, [r6, #0]
 800df7a:	605a      	strne	r2, [r3, #4]
 800df7c:	e7ec      	b.n	800df58 <_malloc_r+0xa0>
 800df7e:	4623      	mov	r3, r4
 800df80:	6864      	ldr	r4, [r4, #4]
 800df82:	e7b2      	b.n	800deea <_malloc_r+0x32>
 800df84:	4634      	mov	r4, r6
 800df86:	6876      	ldr	r6, [r6, #4]
 800df88:	e7b9      	b.n	800defe <_malloc_r+0x46>
 800df8a:	230c      	movs	r3, #12
 800df8c:	603b      	str	r3, [r7, #0]
 800df8e:	4638      	mov	r0, r7
 800df90:	f000 fbc6 	bl	800e720 <__malloc_unlock>
 800df94:	e7a1      	b.n	800deda <_malloc_r+0x22>
 800df96:	6025      	str	r5, [r4, #0]
 800df98:	e7de      	b.n	800df58 <_malloc_r+0xa0>
 800df9a:	bf00      	nop
 800df9c:	200037f8 	.word	0x200037f8

0800dfa0 <iprintf>:
 800dfa0:	b40f      	push	{r0, r1, r2, r3}
 800dfa2:	4b0a      	ldr	r3, [pc, #40]	; (800dfcc <iprintf+0x2c>)
 800dfa4:	b513      	push	{r0, r1, r4, lr}
 800dfa6:	681c      	ldr	r4, [r3, #0]
 800dfa8:	b124      	cbz	r4, 800dfb4 <iprintf+0x14>
 800dfaa:	69a3      	ldr	r3, [r4, #24]
 800dfac:	b913      	cbnz	r3, 800dfb4 <iprintf+0x14>
 800dfae:	4620      	mov	r0, r4
 800dfb0:	f000 faaa 	bl	800e508 <__sinit>
 800dfb4:	ab05      	add	r3, sp, #20
 800dfb6:	9a04      	ldr	r2, [sp, #16]
 800dfb8:	68a1      	ldr	r1, [r4, #8]
 800dfba:	9301      	str	r3, [sp, #4]
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	f000 fd3b 	bl	800ea38 <_vfiprintf_r>
 800dfc2:	b002      	add	sp, #8
 800dfc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfc8:	b004      	add	sp, #16
 800dfca:	4770      	bx	lr
 800dfcc:	200000ac 	.word	0x200000ac

0800dfd0 <_puts_r>:
 800dfd0:	b570      	push	{r4, r5, r6, lr}
 800dfd2:	460e      	mov	r6, r1
 800dfd4:	4605      	mov	r5, r0
 800dfd6:	b118      	cbz	r0, 800dfe0 <_puts_r+0x10>
 800dfd8:	6983      	ldr	r3, [r0, #24]
 800dfda:	b90b      	cbnz	r3, 800dfe0 <_puts_r+0x10>
 800dfdc:	f000 fa94 	bl	800e508 <__sinit>
 800dfe0:	69ab      	ldr	r3, [r5, #24]
 800dfe2:	68ac      	ldr	r4, [r5, #8]
 800dfe4:	b913      	cbnz	r3, 800dfec <_puts_r+0x1c>
 800dfe6:	4628      	mov	r0, r5
 800dfe8:	f000 fa8e 	bl	800e508 <__sinit>
 800dfec:	4b2c      	ldr	r3, [pc, #176]	; (800e0a0 <_puts_r+0xd0>)
 800dfee:	429c      	cmp	r4, r3
 800dff0:	d120      	bne.n	800e034 <_puts_r+0x64>
 800dff2:	686c      	ldr	r4, [r5, #4]
 800dff4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dff6:	07db      	lsls	r3, r3, #31
 800dff8:	d405      	bmi.n	800e006 <_puts_r+0x36>
 800dffa:	89a3      	ldrh	r3, [r4, #12]
 800dffc:	0598      	lsls	r0, r3, #22
 800dffe:	d402      	bmi.n	800e006 <_puts_r+0x36>
 800e000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e002:	f000 fb1f 	bl	800e644 <__retarget_lock_acquire_recursive>
 800e006:	89a3      	ldrh	r3, [r4, #12]
 800e008:	0719      	lsls	r1, r3, #28
 800e00a:	d51d      	bpl.n	800e048 <_puts_r+0x78>
 800e00c:	6923      	ldr	r3, [r4, #16]
 800e00e:	b1db      	cbz	r3, 800e048 <_puts_r+0x78>
 800e010:	3e01      	subs	r6, #1
 800e012:	68a3      	ldr	r3, [r4, #8]
 800e014:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e018:	3b01      	subs	r3, #1
 800e01a:	60a3      	str	r3, [r4, #8]
 800e01c:	bb39      	cbnz	r1, 800e06e <_puts_r+0x9e>
 800e01e:	2b00      	cmp	r3, #0
 800e020:	da38      	bge.n	800e094 <_puts_r+0xc4>
 800e022:	4622      	mov	r2, r4
 800e024:	210a      	movs	r1, #10
 800e026:	4628      	mov	r0, r5
 800e028:	f000 f894 	bl	800e154 <__swbuf_r>
 800e02c:	3001      	adds	r0, #1
 800e02e:	d011      	beq.n	800e054 <_puts_r+0x84>
 800e030:	250a      	movs	r5, #10
 800e032:	e011      	b.n	800e058 <_puts_r+0x88>
 800e034:	4b1b      	ldr	r3, [pc, #108]	; (800e0a4 <_puts_r+0xd4>)
 800e036:	429c      	cmp	r4, r3
 800e038:	d101      	bne.n	800e03e <_puts_r+0x6e>
 800e03a:	68ac      	ldr	r4, [r5, #8]
 800e03c:	e7da      	b.n	800dff4 <_puts_r+0x24>
 800e03e:	4b1a      	ldr	r3, [pc, #104]	; (800e0a8 <_puts_r+0xd8>)
 800e040:	429c      	cmp	r4, r3
 800e042:	bf08      	it	eq
 800e044:	68ec      	ldreq	r4, [r5, #12]
 800e046:	e7d5      	b.n	800dff4 <_puts_r+0x24>
 800e048:	4621      	mov	r1, r4
 800e04a:	4628      	mov	r0, r5
 800e04c:	f000 f8d4 	bl	800e1f8 <__swsetup_r>
 800e050:	2800      	cmp	r0, #0
 800e052:	d0dd      	beq.n	800e010 <_puts_r+0x40>
 800e054:	f04f 35ff 	mov.w	r5, #4294967295
 800e058:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e05a:	07da      	lsls	r2, r3, #31
 800e05c:	d405      	bmi.n	800e06a <_puts_r+0x9a>
 800e05e:	89a3      	ldrh	r3, [r4, #12]
 800e060:	059b      	lsls	r3, r3, #22
 800e062:	d402      	bmi.n	800e06a <_puts_r+0x9a>
 800e064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e066:	f000 faee 	bl	800e646 <__retarget_lock_release_recursive>
 800e06a:	4628      	mov	r0, r5
 800e06c:	bd70      	pop	{r4, r5, r6, pc}
 800e06e:	2b00      	cmp	r3, #0
 800e070:	da04      	bge.n	800e07c <_puts_r+0xac>
 800e072:	69a2      	ldr	r2, [r4, #24]
 800e074:	429a      	cmp	r2, r3
 800e076:	dc06      	bgt.n	800e086 <_puts_r+0xb6>
 800e078:	290a      	cmp	r1, #10
 800e07a:	d004      	beq.n	800e086 <_puts_r+0xb6>
 800e07c:	6823      	ldr	r3, [r4, #0]
 800e07e:	1c5a      	adds	r2, r3, #1
 800e080:	6022      	str	r2, [r4, #0]
 800e082:	7019      	strb	r1, [r3, #0]
 800e084:	e7c5      	b.n	800e012 <_puts_r+0x42>
 800e086:	4622      	mov	r2, r4
 800e088:	4628      	mov	r0, r5
 800e08a:	f000 f863 	bl	800e154 <__swbuf_r>
 800e08e:	3001      	adds	r0, #1
 800e090:	d1bf      	bne.n	800e012 <_puts_r+0x42>
 800e092:	e7df      	b.n	800e054 <_puts_r+0x84>
 800e094:	6823      	ldr	r3, [r4, #0]
 800e096:	250a      	movs	r5, #10
 800e098:	1c5a      	adds	r2, r3, #1
 800e09a:	6022      	str	r2, [r4, #0]
 800e09c:	701d      	strb	r5, [r3, #0]
 800e09e:	e7db      	b.n	800e058 <_puts_r+0x88>
 800e0a0:	0800ff50 	.word	0x0800ff50
 800e0a4:	0800ff70 	.word	0x0800ff70
 800e0a8:	0800ff30 	.word	0x0800ff30

0800e0ac <puts>:
 800e0ac:	4b02      	ldr	r3, [pc, #8]	; (800e0b8 <puts+0xc>)
 800e0ae:	4601      	mov	r1, r0
 800e0b0:	6818      	ldr	r0, [r3, #0]
 800e0b2:	f7ff bf8d 	b.w	800dfd0 <_puts_r>
 800e0b6:	bf00      	nop
 800e0b8:	200000ac 	.word	0x200000ac

0800e0bc <_sbrk_r>:
 800e0bc:	b538      	push	{r3, r4, r5, lr}
 800e0be:	4d06      	ldr	r5, [pc, #24]	; (800e0d8 <_sbrk_r+0x1c>)
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	4604      	mov	r4, r0
 800e0c4:	4608      	mov	r0, r1
 800e0c6:	602b      	str	r3, [r5, #0]
 800e0c8:	f7f4 fd76 	bl	8002bb8 <_sbrk>
 800e0cc:	1c43      	adds	r3, r0, #1
 800e0ce:	d102      	bne.n	800e0d6 <_sbrk_r+0x1a>
 800e0d0:	682b      	ldr	r3, [r5, #0]
 800e0d2:	b103      	cbz	r3, 800e0d6 <_sbrk_r+0x1a>
 800e0d4:	6023      	str	r3, [r4, #0]
 800e0d6:	bd38      	pop	{r3, r4, r5, pc}
 800e0d8:	20003804 	.word	0x20003804

0800e0dc <siprintf>:
 800e0dc:	b40e      	push	{r1, r2, r3}
 800e0de:	b500      	push	{lr}
 800e0e0:	b09c      	sub	sp, #112	; 0x70
 800e0e2:	ab1d      	add	r3, sp, #116	; 0x74
 800e0e4:	9002      	str	r0, [sp, #8]
 800e0e6:	9006      	str	r0, [sp, #24]
 800e0e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e0ec:	4809      	ldr	r0, [pc, #36]	; (800e114 <siprintf+0x38>)
 800e0ee:	9107      	str	r1, [sp, #28]
 800e0f0:	9104      	str	r1, [sp, #16]
 800e0f2:	4909      	ldr	r1, [pc, #36]	; (800e118 <siprintf+0x3c>)
 800e0f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0f8:	9105      	str	r1, [sp, #20]
 800e0fa:	6800      	ldr	r0, [r0, #0]
 800e0fc:	9301      	str	r3, [sp, #4]
 800e0fe:	a902      	add	r1, sp, #8
 800e100:	f000 fb70 	bl	800e7e4 <_svfiprintf_r>
 800e104:	9b02      	ldr	r3, [sp, #8]
 800e106:	2200      	movs	r2, #0
 800e108:	701a      	strb	r2, [r3, #0]
 800e10a:	b01c      	add	sp, #112	; 0x70
 800e10c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e110:	b003      	add	sp, #12
 800e112:	4770      	bx	lr
 800e114:	200000ac 	.word	0x200000ac
 800e118:	ffff0208 	.word	0xffff0208

0800e11c <strcpy>:
 800e11c:	4603      	mov	r3, r0
 800e11e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e122:	f803 2b01 	strb.w	r2, [r3], #1
 800e126:	2a00      	cmp	r2, #0
 800e128:	d1f9      	bne.n	800e11e <strcpy+0x2>
 800e12a:	4770      	bx	lr

0800e12c <strncmp>:
 800e12c:	b510      	push	{r4, lr}
 800e12e:	b17a      	cbz	r2, 800e150 <strncmp+0x24>
 800e130:	4603      	mov	r3, r0
 800e132:	3901      	subs	r1, #1
 800e134:	1884      	adds	r4, r0, r2
 800e136:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e13a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e13e:	4290      	cmp	r0, r2
 800e140:	d101      	bne.n	800e146 <strncmp+0x1a>
 800e142:	42a3      	cmp	r3, r4
 800e144:	d101      	bne.n	800e14a <strncmp+0x1e>
 800e146:	1a80      	subs	r0, r0, r2
 800e148:	bd10      	pop	{r4, pc}
 800e14a:	2800      	cmp	r0, #0
 800e14c:	d1f3      	bne.n	800e136 <strncmp+0xa>
 800e14e:	e7fa      	b.n	800e146 <strncmp+0x1a>
 800e150:	4610      	mov	r0, r2
 800e152:	e7f9      	b.n	800e148 <strncmp+0x1c>

0800e154 <__swbuf_r>:
 800e154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e156:	460e      	mov	r6, r1
 800e158:	4614      	mov	r4, r2
 800e15a:	4605      	mov	r5, r0
 800e15c:	b118      	cbz	r0, 800e166 <__swbuf_r+0x12>
 800e15e:	6983      	ldr	r3, [r0, #24]
 800e160:	b90b      	cbnz	r3, 800e166 <__swbuf_r+0x12>
 800e162:	f000 f9d1 	bl	800e508 <__sinit>
 800e166:	4b21      	ldr	r3, [pc, #132]	; (800e1ec <__swbuf_r+0x98>)
 800e168:	429c      	cmp	r4, r3
 800e16a:	d12b      	bne.n	800e1c4 <__swbuf_r+0x70>
 800e16c:	686c      	ldr	r4, [r5, #4]
 800e16e:	69a3      	ldr	r3, [r4, #24]
 800e170:	60a3      	str	r3, [r4, #8]
 800e172:	89a3      	ldrh	r3, [r4, #12]
 800e174:	071a      	lsls	r2, r3, #28
 800e176:	d52f      	bpl.n	800e1d8 <__swbuf_r+0x84>
 800e178:	6923      	ldr	r3, [r4, #16]
 800e17a:	b36b      	cbz	r3, 800e1d8 <__swbuf_r+0x84>
 800e17c:	6923      	ldr	r3, [r4, #16]
 800e17e:	6820      	ldr	r0, [r4, #0]
 800e180:	1ac0      	subs	r0, r0, r3
 800e182:	6963      	ldr	r3, [r4, #20]
 800e184:	b2f6      	uxtb	r6, r6
 800e186:	4283      	cmp	r3, r0
 800e188:	4637      	mov	r7, r6
 800e18a:	dc04      	bgt.n	800e196 <__swbuf_r+0x42>
 800e18c:	4621      	mov	r1, r4
 800e18e:	4628      	mov	r0, r5
 800e190:	f000 f926 	bl	800e3e0 <_fflush_r>
 800e194:	bb30      	cbnz	r0, 800e1e4 <__swbuf_r+0x90>
 800e196:	68a3      	ldr	r3, [r4, #8]
 800e198:	3b01      	subs	r3, #1
 800e19a:	60a3      	str	r3, [r4, #8]
 800e19c:	6823      	ldr	r3, [r4, #0]
 800e19e:	1c5a      	adds	r2, r3, #1
 800e1a0:	6022      	str	r2, [r4, #0]
 800e1a2:	701e      	strb	r6, [r3, #0]
 800e1a4:	6963      	ldr	r3, [r4, #20]
 800e1a6:	3001      	adds	r0, #1
 800e1a8:	4283      	cmp	r3, r0
 800e1aa:	d004      	beq.n	800e1b6 <__swbuf_r+0x62>
 800e1ac:	89a3      	ldrh	r3, [r4, #12]
 800e1ae:	07db      	lsls	r3, r3, #31
 800e1b0:	d506      	bpl.n	800e1c0 <__swbuf_r+0x6c>
 800e1b2:	2e0a      	cmp	r6, #10
 800e1b4:	d104      	bne.n	800e1c0 <__swbuf_r+0x6c>
 800e1b6:	4621      	mov	r1, r4
 800e1b8:	4628      	mov	r0, r5
 800e1ba:	f000 f911 	bl	800e3e0 <_fflush_r>
 800e1be:	b988      	cbnz	r0, 800e1e4 <__swbuf_r+0x90>
 800e1c0:	4638      	mov	r0, r7
 800e1c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1c4:	4b0a      	ldr	r3, [pc, #40]	; (800e1f0 <__swbuf_r+0x9c>)
 800e1c6:	429c      	cmp	r4, r3
 800e1c8:	d101      	bne.n	800e1ce <__swbuf_r+0x7a>
 800e1ca:	68ac      	ldr	r4, [r5, #8]
 800e1cc:	e7cf      	b.n	800e16e <__swbuf_r+0x1a>
 800e1ce:	4b09      	ldr	r3, [pc, #36]	; (800e1f4 <__swbuf_r+0xa0>)
 800e1d0:	429c      	cmp	r4, r3
 800e1d2:	bf08      	it	eq
 800e1d4:	68ec      	ldreq	r4, [r5, #12]
 800e1d6:	e7ca      	b.n	800e16e <__swbuf_r+0x1a>
 800e1d8:	4621      	mov	r1, r4
 800e1da:	4628      	mov	r0, r5
 800e1dc:	f000 f80c 	bl	800e1f8 <__swsetup_r>
 800e1e0:	2800      	cmp	r0, #0
 800e1e2:	d0cb      	beq.n	800e17c <__swbuf_r+0x28>
 800e1e4:	f04f 37ff 	mov.w	r7, #4294967295
 800e1e8:	e7ea      	b.n	800e1c0 <__swbuf_r+0x6c>
 800e1ea:	bf00      	nop
 800e1ec:	0800ff50 	.word	0x0800ff50
 800e1f0:	0800ff70 	.word	0x0800ff70
 800e1f4:	0800ff30 	.word	0x0800ff30

0800e1f8 <__swsetup_r>:
 800e1f8:	4b32      	ldr	r3, [pc, #200]	; (800e2c4 <__swsetup_r+0xcc>)
 800e1fa:	b570      	push	{r4, r5, r6, lr}
 800e1fc:	681d      	ldr	r5, [r3, #0]
 800e1fe:	4606      	mov	r6, r0
 800e200:	460c      	mov	r4, r1
 800e202:	b125      	cbz	r5, 800e20e <__swsetup_r+0x16>
 800e204:	69ab      	ldr	r3, [r5, #24]
 800e206:	b913      	cbnz	r3, 800e20e <__swsetup_r+0x16>
 800e208:	4628      	mov	r0, r5
 800e20a:	f000 f97d 	bl	800e508 <__sinit>
 800e20e:	4b2e      	ldr	r3, [pc, #184]	; (800e2c8 <__swsetup_r+0xd0>)
 800e210:	429c      	cmp	r4, r3
 800e212:	d10f      	bne.n	800e234 <__swsetup_r+0x3c>
 800e214:	686c      	ldr	r4, [r5, #4]
 800e216:	89a3      	ldrh	r3, [r4, #12]
 800e218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e21c:	0719      	lsls	r1, r3, #28
 800e21e:	d42c      	bmi.n	800e27a <__swsetup_r+0x82>
 800e220:	06dd      	lsls	r5, r3, #27
 800e222:	d411      	bmi.n	800e248 <__swsetup_r+0x50>
 800e224:	2309      	movs	r3, #9
 800e226:	6033      	str	r3, [r6, #0]
 800e228:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e22c:	81a3      	strh	r3, [r4, #12]
 800e22e:	f04f 30ff 	mov.w	r0, #4294967295
 800e232:	e03e      	b.n	800e2b2 <__swsetup_r+0xba>
 800e234:	4b25      	ldr	r3, [pc, #148]	; (800e2cc <__swsetup_r+0xd4>)
 800e236:	429c      	cmp	r4, r3
 800e238:	d101      	bne.n	800e23e <__swsetup_r+0x46>
 800e23a:	68ac      	ldr	r4, [r5, #8]
 800e23c:	e7eb      	b.n	800e216 <__swsetup_r+0x1e>
 800e23e:	4b24      	ldr	r3, [pc, #144]	; (800e2d0 <__swsetup_r+0xd8>)
 800e240:	429c      	cmp	r4, r3
 800e242:	bf08      	it	eq
 800e244:	68ec      	ldreq	r4, [r5, #12]
 800e246:	e7e6      	b.n	800e216 <__swsetup_r+0x1e>
 800e248:	0758      	lsls	r0, r3, #29
 800e24a:	d512      	bpl.n	800e272 <__swsetup_r+0x7a>
 800e24c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e24e:	b141      	cbz	r1, 800e262 <__swsetup_r+0x6a>
 800e250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e254:	4299      	cmp	r1, r3
 800e256:	d002      	beq.n	800e25e <__swsetup_r+0x66>
 800e258:	4630      	mov	r0, r6
 800e25a:	f7ff fdc1 	bl	800dde0 <_free_r>
 800e25e:	2300      	movs	r3, #0
 800e260:	6363      	str	r3, [r4, #52]	; 0x34
 800e262:	89a3      	ldrh	r3, [r4, #12]
 800e264:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e268:	81a3      	strh	r3, [r4, #12]
 800e26a:	2300      	movs	r3, #0
 800e26c:	6063      	str	r3, [r4, #4]
 800e26e:	6923      	ldr	r3, [r4, #16]
 800e270:	6023      	str	r3, [r4, #0]
 800e272:	89a3      	ldrh	r3, [r4, #12]
 800e274:	f043 0308 	orr.w	r3, r3, #8
 800e278:	81a3      	strh	r3, [r4, #12]
 800e27a:	6923      	ldr	r3, [r4, #16]
 800e27c:	b94b      	cbnz	r3, 800e292 <__swsetup_r+0x9a>
 800e27e:	89a3      	ldrh	r3, [r4, #12]
 800e280:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e288:	d003      	beq.n	800e292 <__swsetup_r+0x9a>
 800e28a:	4621      	mov	r1, r4
 800e28c:	4630      	mov	r0, r6
 800e28e:	f000 fa01 	bl	800e694 <__smakebuf_r>
 800e292:	89a0      	ldrh	r0, [r4, #12]
 800e294:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e298:	f010 0301 	ands.w	r3, r0, #1
 800e29c:	d00a      	beq.n	800e2b4 <__swsetup_r+0xbc>
 800e29e:	2300      	movs	r3, #0
 800e2a0:	60a3      	str	r3, [r4, #8]
 800e2a2:	6963      	ldr	r3, [r4, #20]
 800e2a4:	425b      	negs	r3, r3
 800e2a6:	61a3      	str	r3, [r4, #24]
 800e2a8:	6923      	ldr	r3, [r4, #16]
 800e2aa:	b943      	cbnz	r3, 800e2be <__swsetup_r+0xc6>
 800e2ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e2b0:	d1ba      	bne.n	800e228 <__swsetup_r+0x30>
 800e2b2:	bd70      	pop	{r4, r5, r6, pc}
 800e2b4:	0781      	lsls	r1, r0, #30
 800e2b6:	bf58      	it	pl
 800e2b8:	6963      	ldrpl	r3, [r4, #20]
 800e2ba:	60a3      	str	r3, [r4, #8]
 800e2bc:	e7f4      	b.n	800e2a8 <__swsetup_r+0xb0>
 800e2be:	2000      	movs	r0, #0
 800e2c0:	e7f7      	b.n	800e2b2 <__swsetup_r+0xba>
 800e2c2:	bf00      	nop
 800e2c4:	200000ac 	.word	0x200000ac
 800e2c8:	0800ff50 	.word	0x0800ff50
 800e2cc:	0800ff70 	.word	0x0800ff70
 800e2d0:	0800ff30 	.word	0x0800ff30

0800e2d4 <__sflush_r>:
 800e2d4:	898a      	ldrh	r2, [r1, #12]
 800e2d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2da:	4605      	mov	r5, r0
 800e2dc:	0710      	lsls	r0, r2, #28
 800e2de:	460c      	mov	r4, r1
 800e2e0:	d458      	bmi.n	800e394 <__sflush_r+0xc0>
 800e2e2:	684b      	ldr	r3, [r1, #4]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	dc05      	bgt.n	800e2f4 <__sflush_r+0x20>
 800e2e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	dc02      	bgt.n	800e2f4 <__sflush_r+0x20>
 800e2ee:	2000      	movs	r0, #0
 800e2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e2f6:	2e00      	cmp	r6, #0
 800e2f8:	d0f9      	beq.n	800e2ee <__sflush_r+0x1a>
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e300:	682f      	ldr	r7, [r5, #0]
 800e302:	602b      	str	r3, [r5, #0]
 800e304:	d032      	beq.n	800e36c <__sflush_r+0x98>
 800e306:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e308:	89a3      	ldrh	r3, [r4, #12]
 800e30a:	075a      	lsls	r2, r3, #29
 800e30c:	d505      	bpl.n	800e31a <__sflush_r+0x46>
 800e30e:	6863      	ldr	r3, [r4, #4]
 800e310:	1ac0      	subs	r0, r0, r3
 800e312:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e314:	b10b      	cbz	r3, 800e31a <__sflush_r+0x46>
 800e316:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e318:	1ac0      	subs	r0, r0, r3
 800e31a:	2300      	movs	r3, #0
 800e31c:	4602      	mov	r2, r0
 800e31e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e320:	6a21      	ldr	r1, [r4, #32]
 800e322:	4628      	mov	r0, r5
 800e324:	47b0      	blx	r6
 800e326:	1c43      	adds	r3, r0, #1
 800e328:	89a3      	ldrh	r3, [r4, #12]
 800e32a:	d106      	bne.n	800e33a <__sflush_r+0x66>
 800e32c:	6829      	ldr	r1, [r5, #0]
 800e32e:	291d      	cmp	r1, #29
 800e330:	d82c      	bhi.n	800e38c <__sflush_r+0xb8>
 800e332:	4a2a      	ldr	r2, [pc, #168]	; (800e3dc <__sflush_r+0x108>)
 800e334:	40ca      	lsrs	r2, r1
 800e336:	07d6      	lsls	r6, r2, #31
 800e338:	d528      	bpl.n	800e38c <__sflush_r+0xb8>
 800e33a:	2200      	movs	r2, #0
 800e33c:	6062      	str	r2, [r4, #4]
 800e33e:	04d9      	lsls	r1, r3, #19
 800e340:	6922      	ldr	r2, [r4, #16]
 800e342:	6022      	str	r2, [r4, #0]
 800e344:	d504      	bpl.n	800e350 <__sflush_r+0x7c>
 800e346:	1c42      	adds	r2, r0, #1
 800e348:	d101      	bne.n	800e34e <__sflush_r+0x7a>
 800e34a:	682b      	ldr	r3, [r5, #0]
 800e34c:	b903      	cbnz	r3, 800e350 <__sflush_r+0x7c>
 800e34e:	6560      	str	r0, [r4, #84]	; 0x54
 800e350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e352:	602f      	str	r7, [r5, #0]
 800e354:	2900      	cmp	r1, #0
 800e356:	d0ca      	beq.n	800e2ee <__sflush_r+0x1a>
 800e358:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e35c:	4299      	cmp	r1, r3
 800e35e:	d002      	beq.n	800e366 <__sflush_r+0x92>
 800e360:	4628      	mov	r0, r5
 800e362:	f7ff fd3d 	bl	800dde0 <_free_r>
 800e366:	2000      	movs	r0, #0
 800e368:	6360      	str	r0, [r4, #52]	; 0x34
 800e36a:	e7c1      	b.n	800e2f0 <__sflush_r+0x1c>
 800e36c:	6a21      	ldr	r1, [r4, #32]
 800e36e:	2301      	movs	r3, #1
 800e370:	4628      	mov	r0, r5
 800e372:	47b0      	blx	r6
 800e374:	1c41      	adds	r1, r0, #1
 800e376:	d1c7      	bne.n	800e308 <__sflush_r+0x34>
 800e378:	682b      	ldr	r3, [r5, #0]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d0c4      	beq.n	800e308 <__sflush_r+0x34>
 800e37e:	2b1d      	cmp	r3, #29
 800e380:	d001      	beq.n	800e386 <__sflush_r+0xb2>
 800e382:	2b16      	cmp	r3, #22
 800e384:	d101      	bne.n	800e38a <__sflush_r+0xb6>
 800e386:	602f      	str	r7, [r5, #0]
 800e388:	e7b1      	b.n	800e2ee <__sflush_r+0x1a>
 800e38a:	89a3      	ldrh	r3, [r4, #12]
 800e38c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e390:	81a3      	strh	r3, [r4, #12]
 800e392:	e7ad      	b.n	800e2f0 <__sflush_r+0x1c>
 800e394:	690f      	ldr	r7, [r1, #16]
 800e396:	2f00      	cmp	r7, #0
 800e398:	d0a9      	beq.n	800e2ee <__sflush_r+0x1a>
 800e39a:	0793      	lsls	r3, r2, #30
 800e39c:	680e      	ldr	r6, [r1, #0]
 800e39e:	bf08      	it	eq
 800e3a0:	694b      	ldreq	r3, [r1, #20]
 800e3a2:	600f      	str	r7, [r1, #0]
 800e3a4:	bf18      	it	ne
 800e3a6:	2300      	movne	r3, #0
 800e3a8:	eba6 0807 	sub.w	r8, r6, r7
 800e3ac:	608b      	str	r3, [r1, #8]
 800e3ae:	f1b8 0f00 	cmp.w	r8, #0
 800e3b2:	dd9c      	ble.n	800e2ee <__sflush_r+0x1a>
 800e3b4:	6a21      	ldr	r1, [r4, #32]
 800e3b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e3b8:	4643      	mov	r3, r8
 800e3ba:	463a      	mov	r2, r7
 800e3bc:	4628      	mov	r0, r5
 800e3be:	47b0      	blx	r6
 800e3c0:	2800      	cmp	r0, #0
 800e3c2:	dc06      	bgt.n	800e3d2 <__sflush_r+0xfe>
 800e3c4:	89a3      	ldrh	r3, [r4, #12]
 800e3c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3ca:	81a3      	strh	r3, [r4, #12]
 800e3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e3d0:	e78e      	b.n	800e2f0 <__sflush_r+0x1c>
 800e3d2:	4407      	add	r7, r0
 800e3d4:	eba8 0800 	sub.w	r8, r8, r0
 800e3d8:	e7e9      	b.n	800e3ae <__sflush_r+0xda>
 800e3da:	bf00      	nop
 800e3dc:	20400001 	.word	0x20400001

0800e3e0 <_fflush_r>:
 800e3e0:	b538      	push	{r3, r4, r5, lr}
 800e3e2:	690b      	ldr	r3, [r1, #16]
 800e3e4:	4605      	mov	r5, r0
 800e3e6:	460c      	mov	r4, r1
 800e3e8:	b913      	cbnz	r3, 800e3f0 <_fflush_r+0x10>
 800e3ea:	2500      	movs	r5, #0
 800e3ec:	4628      	mov	r0, r5
 800e3ee:	bd38      	pop	{r3, r4, r5, pc}
 800e3f0:	b118      	cbz	r0, 800e3fa <_fflush_r+0x1a>
 800e3f2:	6983      	ldr	r3, [r0, #24]
 800e3f4:	b90b      	cbnz	r3, 800e3fa <_fflush_r+0x1a>
 800e3f6:	f000 f887 	bl	800e508 <__sinit>
 800e3fa:	4b14      	ldr	r3, [pc, #80]	; (800e44c <_fflush_r+0x6c>)
 800e3fc:	429c      	cmp	r4, r3
 800e3fe:	d11b      	bne.n	800e438 <_fflush_r+0x58>
 800e400:	686c      	ldr	r4, [r5, #4]
 800e402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d0ef      	beq.n	800e3ea <_fflush_r+0xa>
 800e40a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e40c:	07d0      	lsls	r0, r2, #31
 800e40e:	d404      	bmi.n	800e41a <_fflush_r+0x3a>
 800e410:	0599      	lsls	r1, r3, #22
 800e412:	d402      	bmi.n	800e41a <_fflush_r+0x3a>
 800e414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e416:	f000 f915 	bl	800e644 <__retarget_lock_acquire_recursive>
 800e41a:	4628      	mov	r0, r5
 800e41c:	4621      	mov	r1, r4
 800e41e:	f7ff ff59 	bl	800e2d4 <__sflush_r>
 800e422:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e424:	07da      	lsls	r2, r3, #31
 800e426:	4605      	mov	r5, r0
 800e428:	d4e0      	bmi.n	800e3ec <_fflush_r+0xc>
 800e42a:	89a3      	ldrh	r3, [r4, #12]
 800e42c:	059b      	lsls	r3, r3, #22
 800e42e:	d4dd      	bmi.n	800e3ec <_fflush_r+0xc>
 800e430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e432:	f000 f908 	bl	800e646 <__retarget_lock_release_recursive>
 800e436:	e7d9      	b.n	800e3ec <_fflush_r+0xc>
 800e438:	4b05      	ldr	r3, [pc, #20]	; (800e450 <_fflush_r+0x70>)
 800e43a:	429c      	cmp	r4, r3
 800e43c:	d101      	bne.n	800e442 <_fflush_r+0x62>
 800e43e:	68ac      	ldr	r4, [r5, #8]
 800e440:	e7df      	b.n	800e402 <_fflush_r+0x22>
 800e442:	4b04      	ldr	r3, [pc, #16]	; (800e454 <_fflush_r+0x74>)
 800e444:	429c      	cmp	r4, r3
 800e446:	bf08      	it	eq
 800e448:	68ec      	ldreq	r4, [r5, #12]
 800e44a:	e7da      	b.n	800e402 <_fflush_r+0x22>
 800e44c:	0800ff50 	.word	0x0800ff50
 800e450:	0800ff70 	.word	0x0800ff70
 800e454:	0800ff30 	.word	0x0800ff30

0800e458 <std>:
 800e458:	2300      	movs	r3, #0
 800e45a:	b510      	push	{r4, lr}
 800e45c:	4604      	mov	r4, r0
 800e45e:	e9c0 3300 	strd	r3, r3, [r0]
 800e462:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e466:	6083      	str	r3, [r0, #8]
 800e468:	8181      	strh	r1, [r0, #12]
 800e46a:	6643      	str	r3, [r0, #100]	; 0x64
 800e46c:	81c2      	strh	r2, [r0, #14]
 800e46e:	6183      	str	r3, [r0, #24]
 800e470:	4619      	mov	r1, r3
 800e472:	2208      	movs	r2, #8
 800e474:	305c      	adds	r0, #92	; 0x5c
 800e476:	f7ff fcab 	bl	800ddd0 <memset>
 800e47a:	4b05      	ldr	r3, [pc, #20]	; (800e490 <std+0x38>)
 800e47c:	6263      	str	r3, [r4, #36]	; 0x24
 800e47e:	4b05      	ldr	r3, [pc, #20]	; (800e494 <std+0x3c>)
 800e480:	62a3      	str	r3, [r4, #40]	; 0x28
 800e482:	4b05      	ldr	r3, [pc, #20]	; (800e498 <std+0x40>)
 800e484:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e486:	4b05      	ldr	r3, [pc, #20]	; (800e49c <std+0x44>)
 800e488:	6224      	str	r4, [r4, #32]
 800e48a:	6323      	str	r3, [r4, #48]	; 0x30
 800e48c:	bd10      	pop	{r4, pc}
 800e48e:	bf00      	nop
 800e490:	0800efc1 	.word	0x0800efc1
 800e494:	0800efe3 	.word	0x0800efe3
 800e498:	0800f01b 	.word	0x0800f01b
 800e49c:	0800f03f 	.word	0x0800f03f

0800e4a0 <_cleanup_r>:
 800e4a0:	4901      	ldr	r1, [pc, #4]	; (800e4a8 <_cleanup_r+0x8>)
 800e4a2:	f000 b8af 	b.w	800e604 <_fwalk_reent>
 800e4a6:	bf00      	nop
 800e4a8:	0800e3e1 	.word	0x0800e3e1

0800e4ac <__sfmoreglue>:
 800e4ac:	b570      	push	{r4, r5, r6, lr}
 800e4ae:	2268      	movs	r2, #104	; 0x68
 800e4b0:	1e4d      	subs	r5, r1, #1
 800e4b2:	4355      	muls	r5, r2
 800e4b4:	460e      	mov	r6, r1
 800e4b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e4ba:	f7ff fcfd 	bl	800deb8 <_malloc_r>
 800e4be:	4604      	mov	r4, r0
 800e4c0:	b140      	cbz	r0, 800e4d4 <__sfmoreglue+0x28>
 800e4c2:	2100      	movs	r1, #0
 800e4c4:	e9c0 1600 	strd	r1, r6, [r0]
 800e4c8:	300c      	adds	r0, #12
 800e4ca:	60a0      	str	r0, [r4, #8]
 800e4cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e4d0:	f7ff fc7e 	bl	800ddd0 <memset>
 800e4d4:	4620      	mov	r0, r4
 800e4d6:	bd70      	pop	{r4, r5, r6, pc}

0800e4d8 <__sfp_lock_acquire>:
 800e4d8:	4801      	ldr	r0, [pc, #4]	; (800e4e0 <__sfp_lock_acquire+0x8>)
 800e4da:	f000 b8b3 	b.w	800e644 <__retarget_lock_acquire_recursive>
 800e4de:	bf00      	nop
 800e4e0:	20003801 	.word	0x20003801

0800e4e4 <__sfp_lock_release>:
 800e4e4:	4801      	ldr	r0, [pc, #4]	; (800e4ec <__sfp_lock_release+0x8>)
 800e4e6:	f000 b8ae 	b.w	800e646 <__retarget_lock_release_recursive>
 800e4ea:	bf00      	nop
 800e4ec:	20003801 	.word	0x20003801

0800e4f0 <__sinit_lock_acquire>:
 800e4f0:	4801      	ldr	r0, [pc, #4]	; (800e4f8 <__sinit_lock_acquire+0x8>)
 800e4f2:	f000 b8a7 	b.w	800e644 <__retarget_lock_acquire_recursive>
 800e4f6:	bf00      	nop
 800e4f8:	20003802 	.word	0x20003802

0800e4fc <__sinit_lock_release>:
 800e4fc:	4801      	ldr	r0, [pc, #4]	; (800e504 <__sinit_lock_release+0x8>)
 800e4fe:	f000 b8a2 	b.w	800e646 <__retarget_lock_release_recursive>
 800e502:	bf00      	nop
 800e504:	20003802 	.word	0x20003802

0800e508 <__sinit>:
 800e508:	b510      	push	{r4, lr}
 800e50a:	4604      	mov	r4, r0
 800e50c:	f7ff fff0 	bl	800e4f0 <__sinit_lock_acquire>
 800e510:	69a3      	ldr	r3, [r4, #24]
 800e512:	b11b      	cbz	r3, 800e51c <__sinit+0x14>
 800e514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e518:	f7ff bff0 	b.w	800e4fc <__sinit_lock_release>
 800e51c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e520:	6523      	str	r3, [r4, #80]	; 0x50
 800e522:	4b13      	ldr	r3, [pc, #76]	; (800e570 <__sinit+0x68>)
 800e524:	4a13      	ldr	r2, [pc, #76]	; (800e574 <__sinit+0x6c>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	62a2      	str	r2, [r4, #40]	; 0x28
 800e52a:	42a3      	cmp	r3, r4
 800e52c:	bf04      	itt	eq
 800e52e:	2301      	moveq	r3, #1
 800e530:	61a3      	streq	r3, [r4, #24]
 800e532:	4620      	mov	r0, r4
 800e534:	f000 f820 	bl	800e578 <__sfp>
 800e538:	6060      	str	r0, [r4, #4]
 800e53a:	4620      	mov	r0, r4
 800e53c:	f000 f81c 	bl	800e578 <__sfp>
 800e540:	60a0      	str	r0, [r4, #8]
 800e542:	4620      	mov	r0, r4
 800e544:	f000 f818 	bl	800e578 <__sfp>
 800e548:	2200      	movs	r2, #0
 800e54a:	60e0      	str	r0, [r4, #12]
 800e54c:	2104      	movs	r1, #4
 800e54e:	6860      	ldr	r0, [r4, #4]
 800e550:	f7ff ff82 	bl	800e458 <std>
 800e554:	68a0      	ldr	r0, [r4, #8]
 800e556:	2201      	movs	r2, #1
 800e558:	2109      	movs	r1, #9
 800e55a:	f7ff ff7d 	bl	800e458 <std>
 800e55e:	68e0      	ldr	r0, [r4, #12]
 800e560:	2202      	movs	r2, #2
 800e562:	2112      	movs	r1, #18
 800e564:	f7ff ff78 	bl	800e458 <std>
 800e568:	2301      	movs	r3, #1
 800e56a:	61a3      	str	r3, [r4, #24]
 800e56c:	e7d2      	b.n	800e514 <__sinit+0xc>
 800e56e:	bf00      	nop
 800e570:	0800ff2c 	.word	0x0800ff2c
 800e574:	0800e4a1 	.word	0x0800e4a1

0800e578 <__sfp>:
 800e578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e57a:	4607      	mov	r7, r0
 800e57c:	f7ff ffac 	bl	800e4d8 <__sfp_lock_acquire>
 800e580:	4b1e      	ldr	r3, [pc, #120]	; (800e5fc <__sfp+0x84>)
 800e582:	681e      	ldr	r6, [r3, #0]
 800e584:	69b3      	ldr	r3, [r6, #24]
 800e586:	b913      	cbnz	r3, 800e58e <__sfp+0x16>
 800e588:	4630      	mov	r0, r6
 800e58a:	f7ff ffbd 	bl	800e508 <__sinit>
 800e58e:	3648      	adds	r6, #72	; 0x48
 800e590:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e594:	3b01      	subs	r3, #1
 800e596:	d503      	bpl.n	800e5a0 <__sfp+0x28>
 800e598:	6833      	ldr	r3, [r6, #0]
 800e59a:	b30b      	cbz	r3, 800e5e0 <__sfp+0x68>
 800e59c:	6836      	ldr	r6, [r6, #0]
 800e59e:	e7f7      	b.n	800e590 <__sfp+0x18>
 800e5a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e5a4:	b9d5      	cbnz	r5, 800e5dc <__sfp+0x64>
 800e5a6:	4b16      	ldr	r3, [pc, #88]	; (800e600 <__sfp+0x88>)
 800e5a8:	60e3      	str	r3, [r4, #12]
 800e5aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e5ae:	6665      	str	r5, [r4, #100]	; 0x64
 800e5b0:	f000 f847 	bl	800e642 <__retarget_lock_init_recursive>
 800e5b4:	f7ff ff96 	bl	800e4e4 <__sfp_lock_release>
 800e5b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e5bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e5c0:	6025      	str	r5, [r4, #0]
 800e5c2:	61a5      	str	r5, [r4, #24]
 800e5c4:	2208      	movs	r2, #8
 800e5c6:	4629      	mov	r1, r5
 800e5c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e5cc:	f7ff fc00 	bl	800ddd0 <memset>
 800e5d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e5d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e5d8:	4620      	mov	r0, r4
 800e5da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5dc:	3468      	adds	r4, #104	; 0x68
 800e5de:	e7d9      	b.n	800e594 <__sfp+0x1c>
 800e5e0:	2104      	movs	r1, #4
 800e5e2:	4638      	mov	r0, r7
 800e5e4:	f7ff ff62 	bl	800e4ac <__sfmoreglue>
 800e5e8:	4604      	mov	r4, r0
 800e5ea:	6030      	str	r0, [r6, #0]
 800e5ec:	2800      	cmp	r0, #0
 800e5ee:	d1d5      	bne.n	800e59c <__sfp+0x24>
 800e5f0:	f7ff ff78 	bl	800e4e4 <__sfp_lock_release>
 800e5f4:	230c      	movs	r3, #12
 800e5f6:	603b      	str	r3, [r7, #0]
 800e5f8:	e7ee      	b.n	800e5d8 <__sfp+0x60>
 800e5fa:	bf00      	nop
 800e5fc:	0800ff2c 	.word	0x0800ff2c
 800e600:	ffff0001 	.word	0xffff0001

0800e604 <_fwalk_reent>:
 800e604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e608:	4606      	mov	r6, r0
 800e60a:	4688      	mov	r8, r1
 800e60c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e610:	2700      	movs	r7, #0
 800e612:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e616:	f1b9 0901 	subs.w	r9, r9, #1
 800e61a:	d505      	bpl.n	800e628 <_fwalk_reent+0x24>
 800e61c:	6824      	ldr	r4, [r4, #0]
 800e61e:	2c00      	cmp	r4, #0
 800e620:	d1f7      	bne.n	800e612 <_fwalk_reent+0xe>
 800e622:	4638      	mov	r0, r7
 800e624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e628:	89ab      	ldrh	r3, [r5, #12]
 800e62a:	2b01      	cmp	r3, #1
 800e62c:	d907      	bls.n	800e63e <_fwalk_reent+0x3a>
 800e62e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e632:	3301      	adds	r3, #1
 800e634:	d003      	beq.n	800e63e <_fwalk_reent+0x3a>
 800e636:	4629      	mov	r1, r5
 800e638:	4630      	mov	r0, r6
 800e63a:	47c0      	blx	r8
 800e63c:	4307      	orrs	r7, r0
 800e63e:	3568      	adds	r5, #104	; 0x68
 800e640:	e7e9      	b.n	800e616 <_fwalk_reent+0x12>

0800e642 <__retarget_lock_init_recursive>:
 800e642:	4770      	bx	lr

0800e644 <__retarget_lock_acquire_recursive>:
 800e644:	4770      	bx	lr

0800e646 <__retarget_lock_release_recursive>:
 800e646:	4770      	bx	lr

0800e648 <__swhatbuf_r>:
 800e648:	b570      	push	{r4, r5, r6, lr}
 800e64a:	460e      	mov	r6, r1
 800e64c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e650:	2900      	cmp	r1, #0
 800e652:	b096      	sub	sp, #88	; 0x58
 800e654:	4614      	mov	r4, r2
 800e656:	461d      	mov	r5, r3
 800e658:	da08      	bge.n	800e66c <__swhatbuf_r+0x24>
 800e65a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e65e:	2200      	movs	r2, #0
 800e660:	602a      	str	r2, [r5, #0]
 800e662:	061a      	lsls	r2, r3, #24
 800e664:	d410      	bmi.n	800e688 <__swhatbuf_r+0x40>
 800e666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e66a:	e00e      	b.n	800e68a <__swhatbuf_r+0x42>
 800e66c:	466a      	mov	r2, sp
 800e66e:	f000 fd0d 	bl	800f08c <_fstat_r>
 800e672:	2800      	cmp	r0, #0
 800e674:	dbf1      	blt.n	800e65a <__swhatbuf_r+0x12>
 800e676:	9a01      	ldr	r2, [sp, #4]
 800e678:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e67c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e680:	425a      	negs	r2, r3
 800e682:	415a      	adcs	r2, r3
 800e684:	602a      	str	r2, [r5, #0]
 800e686:	e7ee      	b.n	800e666 <__swhatbuf_r+0x1e>
 800e688:	2340      	movs	r3, #64	; 0x40
 800e68a:	2000      	movs	r0, #0
 800e68c:	6023      	str	r3, [r4, #0]
 800e68e:	b016      	add	sp, #88	; 0x58
 800e690:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e694 <__smakebuf_r>:
 800e694:	898b      	ldrh	r3, [r1, #12]
 800e696:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e698:	079d      	lsls	r5, r3, #30
 800e69a:	4606      	mov	r6, r0
 800e69c:	460c      	mov	r4, r1
 800e69e:	d507      	bpl.n	800e6b0 <__smakebuf_r+0x1c>
 800e6a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e6a4:	6023      	str	r3, [r4, #0]
 800e6a6:	6123      	str	r3, [r4, #16]
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	6163      	str	r3, [r4, #20]
 800e6ac:	b002      	add	sp, #8
 800e6ae:	bd70      	pop	{r4, r5, r6, pc}
 800e6b0:	ab01      	add	r3, sp, #4
 800e6b2:	466a      	mov	r2, sp
 800e6b4:	f7ff ffc8 	bl	800e648 <__swhatbuf_r>
 800e6b8:	9900      	ldr	r1, [sp, #0]
 800e6ba:	4605      	mov	r5, r0
 800e6bc:	4630      	mov	r0, r6
 800e6be:	f7ff fbfb 	bl	800deb8 <_malloc_r>
 800e6c2:	b948      	cbnz	r0, 800e6d8 <__smakebuf_r+0x44>
 800e6c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6c8:	059a      	lsls	r2, r3, #22
 800e6ca:	d4ef      	bmi.n	800e6ac <__smakebuf_r+0x18>
 800e6cc:	f023 0303 	bic.w	r3, r3, #3
 800e6d0:	f043 0302 	orr.w	r3, r3, #2
 800e6d4:	81a3      	strh	r3, [r4, #12]
 800e6d6:	e7e3      	b.n	800e6a0 <__smakebuf_r+0xc>
 800e6d8:	4b0d      	ldr	r3, [pc, #52]	; (800e710 <__smakebuf_r+0x7c>)
 800e6da:	62b3      	str	r3, [r6, #40]	; 0x28
 800e6dc:	89a3      	ldrh	r3, [r4, #12]
 800e6de:	6020      	str	r0, [r4, #0]
 800e6e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6e4:	81a3      	strh	r3, [r4, #12]
 800e6e6:	9b00      	ldr	r3, [sp, #0]
 800e6e8:	6163      	str	r3, [r4, #20]
 800e6ea:	9b01      	ldr	r3, [sp, #4]
 800e6ec:	6120      	str	r0, [r4, #16]
 800e6ee:	b15b      	cbz	r3, 800e708 <__smakebuf_r+0x74>
 800e6f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e6f4:	4630      	mov	r0, r6
 800e6f6:	f000 fcdb 	bl	800f0b0 <_isatty_r>
 800e6fa:	b128      	cbz	r0, 800e708 <__smakebuf_r+0x74>
 800e6fc:	89a3      	ldrh	r3, [r4, #12]
 800e6fe:	f023 0303 	bic.w	r3, r3, #3
 800e702:	f043 0301 	orr.w	r3, r3, #1
 800e706:	81a3      	strh	r3, [r4, #12]
 800e708:	89a0      	ldrh	r0, [r4, #12]
 800e70a:	4305      	orrs	r5, r0
 800e70c:	81a5      	strh	r5, [r4, #12]
 800e70e:	e7cd      	b.n	800e6ac <__smakebuf_r+0x18>
 800e710:	0800e4a1 	.word	0x0800e4a1

0800e714 <__malloc_lock>:
 800e714:	4801      	ldr	r0, [pc, #4]	; (800e71c <__malloc_lock+0x8>)
 800e716:	f7ff bf95 	b.w	800e644 <__retarget_lock_acquire_recursive>
 800e71a:	bf00      	nop
 800e71c:	20003800 	.word	0x20003800

0800e720 <__malloc_unlock>:
 800e720:	4801      	ldr	r0, [pc, #4]	; (800e728 <__malloc_unlock+0x8>)
 800e722:	f7ff bf90 	b.w	800e646 <__retarget_lock_release_recursive>
 800e726:	bf00      	nop
 800e728:	20003800 	.word	0x20003800

0800e72c <__ssputs_r>:
 800e72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e730:	688e      	ldr	r6, [r1, #8]
 800e732:	429e      	cmp	r6, r3
 800e734:	4682      	mov	sl, r0
 800e736:	460c      	mov	r4, r1
 800e738:	4690      	mov	r8, r2
 800e73a:	461f      	mov	r7, r3
 800e73c:	d838      	bhi.n	800e7b0 <__ssputs_r+0x84>
 800e73e:	898a      	ldrh	r2, [r1, #12]
 800e740:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e744:	d032      	beq.n	800e7ac <__ssputs_r+0x80>
 800e746:	6825      	ldr	r5, [r4, #0]
 800e748:	6909      	ldr	r1, [r1, #16]
 800e74a:	eba5 0901 	sub.w	r9, r5, r1
 800e74e:	6965      	ldr	r5, [r4, #20]
 800e750:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e754:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e758:	3301      	adds	r3, #1
 800e75a:	444b      	add	r3, r9
 800e75c:	106d      	asrs	r5, r5, #1
 800e75e:	429d      	cmp	r5, r3
 800e760:	bf38      	it	cc
 800e762:	461d      	movcc	r5, r3
 800e764:	0553      	lsls	r3, r2, #21
 800e766:	d531      	bpl.n	800e7cc <__ssputs_r+0xa0>
 800e768:	4629      	mov	r1, r5
 800e76a:	f7ff fba5 	bl	800deb8 <_malloc_r>
 800e76e:	4606      	mov	r6, r0
 800e770:	b950      	cbnz	r0, 800e788 <__ssputs_r+0x5c>
 800e772:	230c      	movs	r3, #12
 800e774:	f8ca 3000 	str.w	r3, [sl]
 800e778:	89a3      	ldrh	r3, [r4, #12]
 800e77a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e77e:	81a3      	strh	r3, [r4, #12]
 800e780:	f04f 30ff 	mov.w	r0, #4294967295
 800e784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e788:	6921      	ldr	r1, [r4, #16]
 800e78a:	464a      	mov	r2, r9
 800e78c:	f7ff fb12 	bl	800ddb4 <memcpy>
 800e790:	89a3      	ldrh	r3, [r4, #12]
 800e792:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e79a:	81a3      	strh	r3, [r4, #12]
 800e79c:	6126      	str	r6, [r4, #16]
 800e79e:	6165      	str	r5, [r4, #20]
 800e7a0:	444e      	add	r6, r9
 800e7a2:	eba5 0509 	sub.w	r5, r5, r9
 800e7a6:	6026      	str	r6, [r4, #0]
 800e7a8:	60a5      	str	r5, [r4, #8]
 800e7aa:	463e      	mov	r6, r7
 800e7ac:	42be      	cmp	r6, r7
 800e7ae:	d900      	bls.n	800e7b2 <__ssputs_r+0x86>
 800e7b0:	463e      	mov	r6, r7
 800e7b2:	6820      	ldr	r0, [r4, #0]
 800e7b4:	4632      	mov	r2, r6
 800e7b6:	4641      	mov	r1, r8
 800e7b8:	f000 fc9c 	bl	800f0f4 <memmove>
 800e7bc:	68a3      	ldr	r3, [r4, #8]
 800e7be:	1b9b      	subs	r3, r3, r6
 800e7c0:	60a3      	str	r3, [r4, #8]
 800e7c2:	6823      	ldr	r3, [r4, #0]
 800e7c4:	4433      	add	r3, r6
 800e7c6:	6023      	str	r3, [r4, #0]
 800e7c8:	2000      	movs	r0, #0
 800e7ca:	e7db      	b.n	800e784 <__ssputs_r+0x58>
 800e7cc:	462a      	mov	r2, r5
 800e7ce:	f000 fcab 	bl	800f128 <_realloc_r>
 800e7d2:	4606      	mov	r6, r0
 800e7d4:	2800      	cmp	r0, #0
 800e7d6:	d1e1      	bne.n	800e79c <__ssputs_r+0x70>
 800e7d8:	6921      	ldr	r1, [r4, #16]
 800e7da:	4650      	mov	r0, sl
 800e7dc:	f7ff fb00 	bl	800dde0 <_free_r>
 800e7e0:	e7c7      	b.n	800e772 <__ssputs_r+0x46>
	...

0800e7e4 <_svfiprintf_r>:
 800e7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7e8:	4698      	mov	r8, r3
 800e7ea:	898b      	ldrh	r3, [r1, #12]
 800e7ec:	061b      	lsls	r3, r3, #24
 800e7ee:	b09d      	sub	sp, #116	; 0x74
 800e7f0:	4607      	mov	r7, r0
 800e7f2:	460d      	mov	r5, r1
 800e7f4:	4614      	mov	r4, r2
 800e7f6:	d50e      	bpl.n	800e816 <_svfiprintf_r+0x32>
 800e7f8:	690b      	ldr	r3, [r1, #16]
 800e7fa:	b963      	cbnz	r3, 800e816 <_svfiprintf_r+0x32>
 800e7fc:	2140      	movs	r1, #64	; 0x40
 800e7fe:	f7ff fb5b 	bl	800deb8 <_malloc_r>
 800e802:	6028      	str	r0, [r5, #0]
 800e804:	6128      	str	r0, [r5, #16]
 800e806:	b920      	cbnz	r0, 800e812 <_svfiprintf_r+0x2e>
 800e808:	230c      	movs	r3, #12
 800e80a:	603b      	str	r3, [r7, #0]
 800e80c:	f04f 30ff 	mov.w	r0, #4294967295
 800e810:	e0d1      	b.n	800e9b6 <_svfiprintf_r+0x1d2>
 800e812:	2340      	movs	r3, #64	; 0x40
 800e814:	616b      	str	r3, [r5, #20]
 800e816:	2300      	movs	r3, #0
 800e818:	9309      	str	r3, [sp, #36]	; 0x24
 800e81a:	2320      	movs	r3, #32
 800e81c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e820:	f8cd 800c 	str.w	r8, [sp, #12]
 800e824:	2330      	movs	r3, #48	; 0x30
 800e826:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e9d0 <_svfiprintf_r+0x1ec>
 800e82a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e82e:	f04f 0901 	mov.w	r9, #1
 800e832:	4623      	mov	r3, r4
 800e834:	469a      	mov	sl, r3
 800e836:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e83a:	b10a      	cbz	r2, 800e840 <_svfiprintf_r+0x5c>
 800e83c:	2a25      	cmp	r2, #37	; 0x25
 800e83e:	d1f9      	bne.n	800e834 <_svfiprintf_r+0x50>
 800e840:	ebba 0b04 	subs.w	fp, sl, r4
 800e844:	d00b      	beq.n	800e85e <_svfiprintf_r+0x7a>
 800e846:	465b      	mov	r3, fp
 800e848:	4622      	mov	r2, r4
 800e84a:	4629      	mov	r1, r5
 800e84c:	4638      	mov	r0, r7
 800e84e:	f7ff ff6d 	bl	800e72c <__ssputs_r>
 800e852:	3001      	adds	r0, #1
 800e854:	f000 80aa 	beq.w	800e9ac <_svfiprintf_r+0x1c8>
 800e858:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e85a:	445a      	add	r2, fp
 800e85c:	9209      	str	r2, [sp, #36]	; 0x24
 800e85e:	f89a 3000 	ldrb.w	r3, [sl]
 800e862:	2b00      	cmp	r3, #0
 800e864:	f000 80a2 	beq.w	800e9ac <_svfiprintf_r+0x1c8>
 800e868:	2300      	movs	r3, #0
 800e86a:	f04f 32ff 	mov.w	r2, #4294967295
 800e86e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e872:	f10a 0a01 	add.w	sl, sl, #1
 800e876:	9304      	str	r3, [sp, #16]
 800e878:	9307      	str	r3, [sp, #28]
 800e87a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e87e:	931a      	str	r3, [sp, #104]	; 0x68
 800e880:	4654      	mov	r4, sl
 800e882:	2205      	movs	r2, #5
 800e884:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e888:	4851      	ldr	r0, [pc, #324]	; (800e9d0 <_svfiprintf_r+0x1ec>)
 800e88a:	f7f1 fcb1 	bl	80001f0 <memchr>
 800e88e:	9a04      	ldr	r2, [sp, #16]
 800e890:	b9d8      	cbnz	r0, 800e8ca <_svfiprintf_r+0xe6>
 800e892:	06d0      	lsls	r0, r2, #27
 800e894:	bf44      	itt	mi
 800e896:	2320      	movmi	r3, #32
 800e898:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e89c:	0711      	lsls	r1, r2, #28
 800e89e:	bf44      	itt	mi
 800e8a0:	232b      	movmi	r3, #43	; 0x2b
 800e8a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8a6:	f89a 3000 	ldrb.w	r3, [sl]
 800e8aa:	2b2a      	cmp	r3, #42	; 0x2a
 800e8ac:	d015      	beq.n	800e8da <_svfiprintf_r+0xf6>
 800e8ae:	9a07      	ldr	r2, [sp, #28]
 800e8b0:	4654      	mov	r4, sl
 800e8b2:	2000      	movs	r0, #0
 800e8b4:	f04f 0c0a 	mov.w	ip, #10
 800e8b8:	4621      	mov	r1, r4
 800e8ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8be:	3b30      	subs	r3, #48	; 0x30
 800e8c0:	2b09      	cmp	r3, #9
 800e8c2:	d94e      	bls.n	800e962 <_svfiprintf_r+0x17e>
 800e8c4:	b1b0      	cbz	r0, 800e8f4 <_svfiprintf_r+0x110>
 800e8c6:	9207      	str	r2, [sp, #28]
 800e8c8:	e014      	b.n	800e8f4 <_svfiprintf_r+0x110>
 800e8ca:	eba0 0308 	sub.w	r3, r0, r8
 800e8ce:	fa09 f303 	lsl.w	r3, r9, r3
 800e8d2:	4313      	orrs	r3, r2
 800e8d4:	9304      	str	r3, [sp, #16]
 800e8d6:	46a2      	mov	sl, r4
 800e8d8:	e7d2      	b.n	800e880 <_svfiprintf_r+0x9c>
 800e8da:	9b03      	ldr	r3, [sp, #12]
 800e8dc:	1d19      	adds	r1, r3, #4
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	9103      	str	r1, [sp, #12]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	bfbb      	ittet	lt
 800e8e6:	425b      	neglt	r3, r3
 800e8e8:	f042 0202 	orrlt.w	r2, r2, #2
 800e8ec:	9307      	strge	r3, [sp, #28]
 800e8ee:	9307      	strlt	r3, [sp, #28]
 800e8f0:	bfb8      	it	lt
 800e8f2:	9204      	strlt	r2, [sp, #16]
 800e8f4:	7823      	ldrb	r3, [r4, #0]
 800e8f6:	2b2e      	cmp	r3, #46	; 0x2e
 800e8f8:	d10c      	bne.n	800e914 <_svfiprintf_r+0x130>
 800e8fa:	7863      	ldrb	r3, [r4, #1]
 800e8fc:	2b2a      	cmp	r3, #42	; 0x2a
 800e8fe:	d135      	bne.n	800e96c <_svfiprintf_r+0x188>
 800e900:	9b03      	ldr	r3, [sp, #12]
 800e902:	1d1a      	adds	r2, r3, #4
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	9203      	str	r2, [sp, #12]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	bfb8      	it	lt
 800e90c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e910:	3402      	adds	r4, #2
 800e912:	9305      	str	r3, [sp, #20]
 800e914:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e9e0 <_svfiprintf_r+0x1fc>
 800e918:	7821      	ldrb	r1, [r4, #0]
 800e91a:	2203      	movs	r2, #3
 800e91c:	4650      	mov	r0, sl
 800e91e:	f7f1 fc67 	bl	80001f0 <memchr>
 800e922:	b140      	cbz	r0, 800e936 <_svfiprintf_r+0x152>
 800e924:	2340      	movs	r3, #64	; 0x40
 800e926:	eba0 000a 	sub.w	r0, r0, sl
 800e92a:	fa03 f000 	lsl.w	r0, r3, r0
 800e92e:	9b04      	ldr	r3, [sp, #16]
 800e930:	4303      	orrs	r3, r0
 800e932:	3401      	adds	r4, #1
 800e934:	9304      	str	r3, [sp, #16]
 800e936:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e93a:	4826      	ldr	r0, [pc, #152]	; (800e9d4 <_svfiprintf_r+0x1f0>)
 800e93c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e940:	2206      	movs	r2, #6
 800e942:	f7f1 fc55 	bl	80001f0 <memchr>
 800e946:	2800      	cmp	r0, #0
 800e948:	d038      	beq.n	800e9bc <_svfiprintf_r+0x1d8>
 800e94a:	4b23      	ldr	r3, [pc, #140]	; (800e9d8 <_svfiprintf_r+0x1f4>)
 800e94c:	bb1b      	cbnz	r3, 800e996 <_svfiprintf_r+0x1b2>
 800e94e:	9b03      	ldr	r3, [sp, #12]
 800e950:	3307      	adds	r3, #7
 800e952:	f023 0307 	bic.w	r3, r3, #7
 800e956:	3308      	adds	r3, #8
 800e958:	9303      	str	r3, [sp, #12]
 800e95a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e95c:	4433      	add	r3, r6
 800e95e:	9309      	str	r3, [sp, #36]	; 0x24
 800e960:	e767      	b.n	800e832 <_svfiprintf_r+0x4e>
 800e962:	fb0c 3202 	mla	r2, ip, r2, r3
 800e966:	460c      	mov	r4, r1
 800e968:	2001      	movs	r0, #1
 800e96a:	e7a5      	b.n	800e8b8 <_svfiprintf_r+0xd4>
 800e96c:	2300      	movs	r3, #0
 800e96e:	3401      	adds	r4, #1
 800e970:	9305      	str	r3, [sp, #20]
 800e972:	4619      	mov	r1, r3
 800e974:	f04f 0c0a 	mov.w	ip, #10
 800e978:	4620      	mov	r0, r4
 800e97a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e97e:	3a30      	subs	r2, #48	; 0x30
 800e980:	2a09      	cmp	r2, #9
 800e982:	d903      	bls.n	800e98c <_svfiprintf_r+0x1a8>
 800e984:	2b00      	cmp	r3, #0
 800e986:	d0c5      	beq.n	800e914 <_svfiprintf_r+0x130>
 800e988:	9105      	str	r1, [sp, #20]
 800e98a:	e7c3      	b.n	800e914 <_svfiprintf_r+0x130>
 800e98c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e990:	4604      	mov	r4, r0
 800e992:	2301      	movs	r3, #1
 800e994:	e7f0      	b.n	800e978 <_svfiprintf_r+0x194>
 800e996:	ab03      	add	r3, sp, #12
 800e998:	9300      	str	r3, [sp, #0]
 800e99a:	462a      	mov	r2, r5
 800e99c:	4b0f      	ldr	r3, [pc, #60]	; (800e9dc <_svfiprintf_r+0x1f8>)
 800e99e:	a904      	add	r1, sp, #16
 800e9a0:	4638      	mov	r0, r7
 800e9a2:	f3af 8000 	nop.w
 800e9a6:	1c42      	adds	r2, r0, #1
 800e9a8:	4606      	mov	r6, r0
 800e9aa:	d1d6      	bne.n	800e95a <_svfiprintf_r+0x176>
 800e9ac:	89ab      	ldrh	r3, [r5, #12]
 800e9ae:	065b      	lsls	r3, r3, #25
 800e9b0:	f53f af2c 	bmi.w	800e80c <_svfiprintf_r+0x28>
 800e9b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e9b6:	b01d      	add	sp, #116	; 0x74
 800e9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9bc:	ab03      	add	r3, sp, #12
 800e9be:	9300      	str	r3, [sp, #0]
 800e9c0:	462a      	mov	r2, r5
 800e9c2:	4b06      	ldr	r3, [pc, #24]	; (800e9dc <_svfiprintf_r+0x1f8>)
 800e9c4:	a904      	add	r1, sp, #16
 800e9c6:	4638      	mov	r0, r7
 800e9c8:	f000 f9d4 	bl	800ed74 <_printf_i>
 800e9cc:	e7eb      	b.n	800e9a6 <_svfiprintf_r+0x1c2>
 800e9ce:	bf00      	nop
 800e9d0:	0800ff90 	.word	0x0800ff90
 800e9d4:	0800ff9a 	.word	0x0800ff9a
 800e9d8:	00000000 	.word	0x00000000
 800e9dc:	0800e72d 	.word	0x0800e72d
 800e9e0:	0800ff96 	.word	0x0800ff96

0800e9e4 <__sfputc_r>:
 800e9e4:	6893      	ldr	r3, [r2, #8]
 800e9e6:	3b01      	subs	r3, #1
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	b410      	push	{r4}
 800e9ec:	6093      	str	r3, [r2, #8]
 800e9ee:	da08      	bge.n	800ea02 <__sfputc_r+0x1e>
 800e9f0:	6994      	ldr	r4, [r2, #24]
 800e9f2:	42a3      	cmp	r3, r4
 800e9f4:	db01      	blt.n	800e9fa <__sfputc_r+0x16>
 800e9f6:	290a      	cmp	r1, #10
 800e9f8:	d103      	bne.n	800ea02 <__sfputc_r+0x1e>
 800e9fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9fe:	f7ff bba9 	b.w	800e154 <__swbuf_r>
 800ea02:	6813      	ldr	r3, [r2, #0]
 800ea04:	1c58      	adds	r0, r3, #1
 800ea06:	6010      	str	r0, [r2, #0]
 800ea08:	7019      	strb	r1, [r3, #0]
 800ea0a:	4608      	mov	r0, r1
 800ea0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea10:	4770      	bx	lr

0800ea12 <__sfputs_r>:
 800ea12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea14:	4606      	mov	r6, r0
 800ea16:	460f      	mov	r7, r1
 800ea18:	4614      	mov	r4, r2
 800ea1a:	18d5      	adds	r5, r2, r3
 800ea1c:	42ac      	cmp	r4, r5
 800ea1e:	d101      	bne.n	800ea24 <__sfputs_r+0x12>
 800ea20:	2000      	movs	r0, #0
 800ea22:	e007      	b.n	800ea34 <__sfputs_r+0x22>
 800ea24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea28:	463a      	mov	r2, r7
 800ea2a:	4630      	mov	r0, r6
 800ea2c:	f7ff ffda 	bl	800e9e4 <__sfputc_r>
 800ea30:	1c43      	adds	r3, r0, #1
 800ea32:	d1f3      	bne.n	800ea1c <__sfputs_r+0xa>
 800ea34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ea38 <_vfiprintf_r>:
 800ea38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea3c:	460d      	mov	r5, r1
 800ea3e:	b09d      	sub	sp, #116	; 0x74
 800ea40:	4614      	mov	r4, r2
 800ea42:	4698      	mov	r8, r3
 800ea44:	4606      	mov	r6, r0
 800ea46:	b118      	cbz	r0, 800ea50 <_vfiprintf_r+0x18>
 800ea48:	6983      	ldr	r3, [r0, #24]
 800ea4a:	b90b      	cbnz	r3, 800ea50 <_vfiprintf_r+0x18>
 800ea4c:	f7ff fd5c 	bl	800e508 <__sinit>
 800ea50:	4b89      	ldr	r3, [pc, #548]	; (800ec78 <_vfiprintf_r+0x240>)
 800ea52:	429d      	cmp	r5, r3
 800ea54:	d11b      	bne.n	800ea8e <_vfiprintf_r+0x56>
 800ea56:	6875      	ldr	r5, [r6, #4]
 800ea58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea5a:	07d9      	lsls	r1, r3, #31
 800ea5c:	d405      	bmi.n	800ea6a <_vfiprintf_r+0x32>
 800ea5e:	89ab      	ldrh	r3, [r5, #12]
 800ea60:	059a      	lsls	r2, r3, #22
 800ea62:	d402      	bmi.n	800ea6a <_vfiprintf_r+0x32>
 800ea64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea66:	f7ff fded 	bl	800e644 <__retarget_lock_acquire_recursive>
 800ea6a:	89ab      	ldrh	r3, [r5, #12]
 800ea6c:	071b      	lsls	r3, r3, #28
 800ea6e:	d501      	bpl.n	800ea74 <_vfiprintf_r+0x3c>
 800ea70:	692b      	ldr	r3, [r5, #16]
 800ea72:	b9eb      	cbnz	r3, 800eab0 <_vfiprintf_r+0x78>
 800ea74:	4629      	mov	r1, r5
 800ea76:	4630      	mov	r0, r6
 800ea78:	f7ff fbbe 	bl	800e1f8 <__swsetup_r>
 800ea7c:	b1c0      	cbz	r0, 800eab0 <_vfiprintf_r+0x78>
 800ea7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea80:	07dc      	lsls	r4, r3, #31
 800ea82:	d50e      	bpl.n	800eaa2 <_vfiprintf_r+0x6a>
 800ea84:	f04f 30ff 	mov.w	r0, #4294967295
 800ea88:	b01d      	add	sp, #116	; 0x74
 800ea8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea8e:	4b7b      	ldr	r3, [pc, #492]	; (800ec7c <_vfiprintf_r+0x244>)
 800ea90:	429d      	cmp	r5, r3
 800ea92:	d101      	bne.n	800ea98 <_vfiprintf_r+0x60>
 800ea94:	68b5      	ldr	r5, [r6, #8]
 800ea96:	e7df      	b.n	800ea58 <_vfiprintf_r+0x20>
 800ea98:	4b79      	ldr	r3, [pc, #484]	; (800ec80 <_vfiprintf_r+0x248>)
 800ea9a:	429d      	cmp	r5, r3
 800ea9c:	bf08      	it	eq
 800ea9e:	68f5      	ldreq	r5, [r6, #12]
 800eaa0:	e7da      	b.n	800ea58 <_vfiprintf_r+0x20>
 800eaa2:	89ab      	ldrh	r3, [r5, #12]
 800eaa4:	0598      	lsls	r0, r3, #22
 800eaa6:	d4ed      	bmi.n	800ea84 <_vfiprintf_r+0x4c>
 800eaa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eaaa:	f7ff fdcc 	bl	800e646 <__retarget_lock_release_recursive>
 800eaae:	e7e9      	b.n	800ea84 <_vfiprintf_r+0x4c>
 800eab0:	2300      	movs	r3, #0
 800eab2:	9309      	str	r3, [sp, #36]	; 0x24
 800eab4:	2320      	movs	r3, #32
 800eab6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eaba:	f8cd 800c 	str.w	r8, [sp, #12]
 800eabe:	2330      	movs	r3, #48	; 0x30
 800eac0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ec84 <_vfiprintf_r+0x24c>
 800eac4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eac8:	f04f 0901 	mov.w	r9, #1
 800eacc:	4623      	mov	r3, r4
 800eace:	469a      	mov	sl, r3
 800ead0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ead4:	b10a      	cbz	r2, 800eada <_vfiprintf_r+0xa2>
 800ead6:	2a25      	cmp	r2, #37	; 0x25
 800ead8:	d1f9      	bne.n	800eace <_vfiprintf_r+0x96>
 800eada:	ebba 0b04 	subs.w	fp, sl, r4
 800eade:	d00b      	beq.n	800eaf8 <_vfiprintf_r+0xc0>
 800eae0:	465b      	mov	r3, fp
 800eae2:	4622      	mov	r2, r4
 800eae4:	4629      	mov	r1, r5
 800eae6:	4630      	mov	r0, r6
 800eae8:	f7ff ff93 	bl	800ea12 <__sfputs_r>
 800eaec:	3001      	adds	r0, #1
 800eaee:	f000 80aa 	beq.w	800ec46 <_vfiprintf_r+0x20e>
 800eaf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eaf4:	445a      	add	r2, fp
 800eaf6:	9209      	str	r2, [sp, #36]	; 0x24
 800eaf8:	f89a 3000 	ldrb.w	r3, [sl]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	f000 80a2 	beq.w	800ec46 <_vfiprintf_r+0x20e>
 800eb02:	2300      	movs	r3, #0
 800eb04:	f04f 32ff 	mov.w	r2, #4294967295
 800eb08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb0c:	f10a 0a01 	add.w	sl, sl, #1
 800eb10:	9304      	str	r3, [sp, #16]
 800eb12:	9307      	str	r3, [sp, #28]
 800eb14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb18:	931a      	str	r3, [sp, #104]	; 0x68
 800eb1a:	4654      	mov	r4, sl
 800eb1c:	2205      	movs	r2, #5
 800eb1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb22:	4858      	ldr	r0, [pc, #352]	; (800ec84 <_vfiprintf_r+0x24c>)
 800eb24:	f7f1 fb64 	bl	80001f0 <memchr>
 800eb28:	9a04      	ldr	r2, [sp, #16]
 800eb2a:	b9d8      	cbnz	r0, 800eb64 <_vfiprintf_r+0x12c>
 800eb2c:	06d1      	lsls	r1, r2, #27
 800eb2e:	bf44      	itt	mi
 800eb30:	2320      	movmi	r3, #32
 800eb32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb36:	0713      	lsls	r3, r2, #28
 800eb38:	bf44      	itt	mi
 800eb3a:	232b      	movmi	r3, #43	; 0x2b
 800eb3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb40:	f89a 3000 	ldrb.w	r3, [sl]
 800eb44:	2b2a      	cmp	r3, #42	; 0x2a
 800eb46:	d015      	beq.n	800eb74 <_vfiprintf_r+0x13c>
 800eb48:	9a07      	ldr	r2, [sp, #28]
 800eb4a:	4654      	mov	r4, sl
 800eb4c:	2000      	movs	r0, #0
 800eb4e:	f04f 0c0a 	mov.w	ip, #10
 800eb52:	4621      	mov	r1, r4
 800eb54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb58:	3b30      	subs	r3, #48	; 0x30
 800eb5a:	2b09      	cmp	r3, #9
 800eb5c:	d94e      	bls.n	800ebfc <_vfiprintf_r+0x1c4>
 800eb5e:	b1b0      	cbz	r0, 800eb8e <_vfiprintf_r+0x156>
 800eb60:	9207      	str	r2, [sp, #28]
 800eb62:	e014      	b.n	800eb8e <_vfiprintf_r+0x156>
 800eb64:	eba0 0308 	sub.w	r3, r0, r8
 800eb68:	fa09 f303 	lsl.w	r3, r9, r3
 800eb6c:	4313      	orrs	r3, r2
 800eb6e:	9304      	str	r3, [sp, #16]
 800eb70:	46a2      	mov	sl, r4
 800eb72:	e7d2      	b.n	800eb1a <_vfiprintf_r+0xe2>
 800eb74:	9b03      	ldr	r3, [sp, #12]
 800eb76:	1d19      	adds	r1, r3, #4
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	9103      	str	r1, [sp, #12]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	bfbb      	ittet	lt
 800eb80:	425b      	neglt	r3, r3
 800eb82:	f042 0202 	orrlt.w	r2, r2, #2
 800eb86:	9307      	strge	r3, [sp, #28]
 800eb88:	9307      	strlt	r3, [sp, #28]
 800eb8a:	bfb8      	it	lt
 800eb8c:	9204      	strlt	r2, [sp, #16]
 800eb8e:	7823      	ldrb	r3, [r4, #0]
 800eb90:	2b2e      	cmp	r3, #46	; 0x2e
 800eb92:	d10c      	bne.n	800ebae <_vfiprintf_r+0x176>
 800eb94:	7863      	ldrb	r3, [r4, #1]
 800eb96:	2b2a      	cmp	r3, #42	; 0x2a
 800eb98:	d135      	bne.n	800ec06 <_vfiprintf_r+0x1ce>
 800eb9a:	9b03      	ldr	r3, [sp, #12]
 800eb9c:	1d1a      	adds	r2, r3, #4
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	9203      	str	r2, [sp, #12]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	bfb8      	it	lt
 800eba6:	f04f 33ff 	movlt.w	r3, #4294967295
 800ebaa:	3402      	adds	r4, #2
 800ebac:	9305      	str	r3, [sp, #20]
 800ebae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ec94 <_vfiprintf_r+0x25c>
 800ebb2:	7821      	ldrb	r1, [r4, #0]
 800ebb4:	2203      	movs	r2, #3
 800ebb6:	4650      	mov	r0, sl
 800ebb8:	f7f1 fb1a 	bl	80001f0 <memchr>
 800ebbc:	b140      	cbz	r0, 800ebd0 <_vfiprintf_r+0x198>
 800ebbe:	2340      	movs	r3, #64	; 0x40
 800ebc0:	eba0 000a 	sub.w	r0, r0, sl
 800ebc4:	fa03 f000 	lsl.w	r0, r3, r0
 800ebc8:	9b04      	ldr	r3, [sp, #16]
 800ebca:	4303      	orrs	r3, r0
 800ebcc:	3401      	adds	r4, #1
 800ebce:	9304      	str	r3, [sp, #16]
 800ebd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebd4:	482c      	ldr	r0, [pc, #176]	; (800ec88 <_vfiprintf_r+0x250>)
 800ebd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ebda:	2206      	movs	r2, #6
 800ebdc:	f7f1 fb08 	bl	80001f0 <memchr>
 800ebe0:	2800      	cmp	r0, #0
 800ebe2:	d03f      	beq.n	800ec64 <_vfiprintf_r+0x22c>
 800ebe4:	4b29      	ldr	r3, [pc, #164]	; (800ec8c <_vfiprintf_r+0x254>)
 800ebe6:	bb1b      	cbnz	r3, 800ec30 <_vfiprintf_r+0x1f8>
 800ebe8:	9b03      	ldr	r3, [sp, #12]
 800ebea:	3307      	adds	r3, #7
 800ebec:	f023 0307 	bic.w	r3, r3, #7
 800ebf0:	3308      	adds	r3, #8
 800ebf2:	9303      	str	r3, [sp, #12]
 800ebf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebf6:	443b      	add	r3, r7
 800ebf8:	9309      	str	r3, [sp, #36]	; 0x24
 800ebfa:	e767      	b.n	800eacc <_vfiprintf_r+0x94>
 800ebfc:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec00:	460c      	mov	r4, r1
 800ec02:	2001      	movs	r0, #1
 800ec04:	e7a5      	b.n	800eb52 <_vfiprintf_r+0x11a>
 800ec06:	2300      	movs	r3, #0
 800ec08:	3401      	adds	r4, #1
 800ec0a:	9305      	str	r3, [sp, #20]
 800ec0c:	4619      	mov	r1, r3
 800ec0e:	f04f 0c0a 	mov.w	ip, #10
 800ec12:	4620      	mov	r0, r4
 800ec14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec18:	3a30      	subs	r2, #48	; 0x30
 800ec1a:	2a09      	cmp	r2, #9
 800ec1c:	d903      	bls.n	800ec26 <_vfiprintf_r+0x1ee>
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d0c5      	beq.n	800ebae <_vfiprintf_r+0x176>
 800ec22:	9105      	str	r1, [sp, #20]
 800ec24:	e7c3      	b.n	800ebae <_vfiprintf_r+0x176>
 800ec26:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec2a:	4604      	mov	r4, r0
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	e7f0      	b.n	800ec12 <_vfiprintf_r+0x1da>
 800ec30:	ab03      	add	r3, sp, #12
 800ec32:	9300      	str	r3, [sp, #0]
 800ec34:	462a      	mov	r2, r5
 800ec36:	4b16      	ldr	r3, [pc, #88]	; (800ec90 <_vfiprintf_r+0x258>)
 800ec38:	a904      	add	r1, sp, #16
 800ec3a:	4630      	mov	r0, r6
 800ec3c:	f3af 8000 	nop.w
 800ec40:	4607      	mov	r7, r0
 800ec42:	1c78      	adds	r0, r7, #1
 800ec44:	d1d6      	bne.n	800ebf4 <_vfiprintf_r+0x1bc>
 800ec46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec48:	07d9      	lsls	r1, r3, #31
 800ec4a:	d405      	bmi.n	800ec58 <_vfiprintf_r+0x220>
 800ec4c:	89ab      	ldrh	r3, [r5, #12]
 800ec4e:	059a      	lsls	r2, r3, #22
 800ec50:	d402      	bmi.n	800ec58 <_vfiprintf_r+0x220>
 800ec52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec54:	f7ff fcf7 	bl	800e646 <__retarget_lock_release_recursive>
 800ec58:	89ab      	ldrh	r3, [r5, #12]
 800ec5a:	065b      	lsls	r3, r3, #25
 800ec5c:	f53f af12 	bmi.w	800ea84 <_vfiprintf_r+0x4c>
 800ec60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec62:	e711      	b.n	800ea88 <_vfiprintf_r+0x50>
 800ec64:	ab03      	add	r3, sp, #12
 800ec66:	9300      	str	r3, [sp, #0]
 800ec68:	462a      	mov	r2, r5
 800ec6a:	4b09      	ldr	r3, [pc, #36]	; (800ec90 <_vfiprintf_r+0x258>)
 800ec6c:	a904      	add	r1, sp, #16
 800ec6e:	4630      	mov	r0, r6
 800ec70:	f000 f880 	bl	800ed74 <_printf_i>
 800ec74:	e7e4      	b.n	800ec40 <_vfiprintf_r+0x208>
 800ec76:	bf00      	nop
 800ec78:	0800ff50 	.word	0x0800ff50
 800ec7c:	0800ff70 	.word	0x0800ff70
 800ec80:	0800ff30 	.word	0x0800ff30
 800ec84:	0800ff90 	.word	0x0800ff90
 800ec88:	0800ff9a 	.word	0x0800ff9a
 800ec8c:	00000000 	.word	0x00000000
 800ec90:	0800ea13 	.word	0x0800ea13
 800ec94:	0800ff96 	.word	0x0800ff96

0800ec98 <_printf_common>:
 800ec98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec9c:	4616      	mov	r6, r2
 800ec9e:	4699      	mov	r9, r3
 800eca0:	688a      	ldr	r2, [r1, #8]
 800eca2:	690b      	ldr	r3, [r1, #16]
 800eca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eca8:	4293      	cmp	r3, r2
 800ecaa:	bfb8      	it	lt
 800ecac:	4613      	movlt	r3, r2
 800ecae:	6033      	str	r3, [r6, #0]
 800ecb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ecb4:	4607      	mov	r7, r0
 800ecb6:	460c      	mov	r4, r1
 800ecb8:	b10a      	cbz	r2, 800ecbe <_printf_common+0x26>
 800ecba:	3301      	adds	r3, #1
 800ecbc:	6033      	str	r3, [r6, #0]
 800ecbe:	6823      	ldr	r3, [r4, #0]
 800ecc0:	0699      	lsls	r1, r3, #26
 800ecc2:	bf42      	ittt	mi
 800ecc4:	6833      	ldrmi	r3, [r6, #0]
 800ecc6:	3302      	addmi	r3, #2
 800ecc8:	6033      	strmi	r3, [r6, #0]
 800ecca:	6825      	ldr	r5, [r4, #0]
 800eccc:	f015 0506 	ands.w	r5, r5, #6
 800ecd0:	d106      	bne.n	800ece0 <_printf_common+0x48>
 800ecd2:	f104 0a19 	add.w	sl, r4, #25
 800ecd6:	68e3      	ldr	r3, [r4, #12]
 800ecd8:	6832      	ldr	r2, [r6, #0]
 800ecda:	1a9b      	subs	r3, r3, r2
 800ecdc:	42ab      	cmp	r3, r5
 800ecde:	dc26      	bgt.n	800ed2e <_printf_common+0x96>
 800ece0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ece4:	1e13      	subs	r3, r2, #0
 800ece6:	6822      	ldr	r2, [r4, #0]
 800ece8:	bf18      	it	ne
 800ecea:	2301      	movne	r3, #1
 800ecec:	0692      	lsls	r2, r2, #26
 800ecee:	d42b      	bmi.n	800ed48 <_printf_common+0xb0>
 800ecf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ecf4:	4649      	mov	r1, r9
 800ecf6:	4638      	mov	r0, r7
 800ecf8:	47c0      	blx	r8
 800ecfa:	3001      	adds	r0, #1
 800ecfc:	d01e      	beq.n	800ed3c <_printf_common+0xa4>
 800ecfe:	6823      	ldr	r3, [r4, #0]
 800ed00:	68e5      	ldr	r5, [r4, #12]
 800ed02:	6832      	ldr	r2, [r6, #0]
 800ed04:	f003 0306 	and.w	r3, r3, #6
 800ed08:	2b04      	cmp	r3, #4
 800ed0a:	bf08      	it	eq
 800ed0c:	1aad      	subeq	r5, r5, r2
 800ed0e:	68a3      	ldr	r3, [r4, #8]
 800ed10:	6922      	ldr	r2, [r4, #16]
 800ed12:	bf0c      	ite	eq
 800ed14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed18:	2500      	movne	r5, #0
 800ed1a:	4293      	cmp	r3, r2
 800ed1c:	bfc4      	itt	gt
 800ed1e:	1a9b      	subgt	r3, r3, r2
 800ed20:	18ed      	addgt	r5, r5, r3
 800ed22:	2600      	movs	r6, #0
 800ed24:	341a      	adds	r4, #26
 800ed26:	42b5      	cmp	r5, r6
 800ed28:	d11a      	bne.n	800ed60 <_printf_common+0xc8>
 800ed2a:	2000      	movs	r0, #0
 800ed2c:	e008      	b.n	800ed40 <_printf_common+0xa8>
 800ed2e:	2301      	movs	r3, #1
 800ed30:	4652      	mov	r2, sl
 800ed32:	4649      	mov	r1, r9
 800ed34:	4638      	mov	r0, r7
 800ed36:	47c0      	blx	r8
 800ed38:	3001      	adds	r0, #1
 800ed3a:	d103      	bne.n	800ed44 <_printf_common+0xac>
 800ed3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed44:	3501      	adds	r5, #1
 800ed46:	e7c6      	b.n	800ecd6 <_printf_common+0x3e>
 800ed48:	18e1      	adds	r1, r4, r3
 800ed4a:	1c5a      	adds	r2, r3, #1
 800ed4c:	2030      	movs	r0, #48	; 0x30
 800ed4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ed52:	4422      	add	r2, r4
 800ed54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ed58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ed5c:	3302      	adds	r3, #2
 800ed5e:	e7c7      	b.n	800ecf0 <_printf_common+0x58>
 800ed60:	2301      	movs	r3, #1
 800ed62:	4622      	mov	r2, r4
 800ed64:	4649      	mov	r1, r9
 800ed66:	4638      	mov	r0, r7
 800ed68:	47c0      	blx	r8
 800ed6a:	3001      	adds	r0, #1
 800ed6c:	d0e6      	beq.n	800ed3c <_printf_common+0xa4>
 800ed6e:	3601      	adds	r6, #1
 800ed70:	e7d9      	b.n	800ed26 <_printf_common+0x8e>
	...

0800ed74 <_printf_i>:
 800ed74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed78:	7e0f      	ldrb	r7, [r1, #24]
 800ed7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ed7c:	2f78      	cmp	r7, #120	; 0x78
 800ed7e:	4691      	mov	r9, r2
 800ed80:	4680      	mov	r8, r0
 800ed82:	460c      	mov	r4, r1
 800ed84:	469a      	mov	sl, r3
 800ed86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ed8a:	d807      	bhi.n	800ed9c <_printf_i+0x28>
 800ed8c:	2f62      	cmp	r7, #98	; 0x62
 800ed8e:	d80a      	bhi.n	800eda6 <_printf_i+0x32>
 800ed90:	2f00      	cmp	r7, #0
 800ed92:	f000 80d8 	beq.w	800ef46 <_printf_i+0x1d2>
 800ed96:	2f58      	cmp	r7, #88	; 0x58
 800ed98:	f000 80a3 	beq.w	800eee2 <_printf_i+0x16e>
 800ed9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eda0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eda4:	e03a      	b.n	800ee1c <_printf_i+0xa8>
 800eda6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800edaa:	2b15      	cmp	r3, #21
 800edac:	d8f6      	bhi.n	800ed9c <_printf_i+0x28>
 800edae:	a101      	add	r1, pc, #4	; (adr r1, 800edb4 <_printf_i+0x40>)
 800edb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800edb4:	0800ee0d 	.word	0x0800ee0d
 800edb8:	0800ee21 	.word	0x0800ee21
 800edbc:	0800ed9d 	.word	0x0800ed9d
 800edc0:	0800ed9d 	.word	0x0800ed9d
 800edc4:	0800ed9d 	.word	0x0800ed9d
 800edc8:	0800ed9d 	.word	0x0800ed9d
 800edcc:	0800ee21 	.word	0x0800ee21
 800edd0:	0800ed9d 	.word	0x0800ed9d
 800edd4:	0800ed9d 	.word	0x0800ed9d
 800edd8:	0800ed9d 	.word	0x0800ed9d
 800eddc:	0800ed9d 	.word	0x0800ed9d
 800ede0:	0800ef2d 	.word	0x0800ef2d
 800ede4:	0800ee51 	.word	0x0800ee51
 800ede8:	0800ef0f 	.word	0x0800ef0f
 800edec:	0800ed9d 	.word	0x0800ed9d
 800edf0:	0800ed9d 	.word	0x0800ed9d
 800edf4:	0800ef4f 	.word	0x0800ef4f
 800edf8:	0800ed9d 	.word	0x0800ed9d
 800edfc:	0800ee51 	.word	0x0800ee51
 800ee00:	0800ed9d 	.word	0x0800ed9d
 800ee04:	0800ed9d 	.word	0x0800ed9d
 800ee08:	0800ef17 	.word	0x0800ef17
 800ee0c:	682b      	ldr	r3, [r5, #0]
 800ee0e:	1d1a      	adds	r2, r3, #4
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	602a      	str	r2, [r5, #0]
 800ee14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	e0a3      	b.n	800ef68 <_printf_i+0x1f4>
 800ee20:	6820      	ldr	r0, [r4, #0]
 800ee22:	6829      	ldr	r1, [r5, #0]
 800ee24:	0606      	lsls	r6, r0, #24
 800ee26:	f101 0304 	add.w	r3, r1, #4
 800ee2a:	d50a      	bpl.n	800ee42 <_printf_i+0xce>
 800ee2c:	680e      	ldr	r6, [r1, #0]
 800ee2e:	602b      	str	r3, [r5, #0]
 800ee30:	2e00      	cmp	r6, #0
 800ee32:	da03      	bge.n	800ee3c <_printf_i+0xc8>
 800ee34:	232d      	movs	r3, #45	; 0x2d
 800ee36:	4276      	negs	r6, r6
 800ee38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee3c:	485e      	ldr	r0, [pc, #376]	; (800efb8 <_printf_i+0x244>)
 800ee3e:	230a      	movs	r3, #10
 800ee40:	e019      	b.n	800ee76 <_printf_i+0x102>
 800ee42:	680e      	ldr	r6, [r1, #0]
 800ee44:	602b      	str	r3, [r5, #0]
 800ee46:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ee4a:	bf18      	it	ne
 800ee4c:	b236      	sxthne	r6, r6
 800ee4e:	e7ef      	b.n	800ee30 <_printf_i+0xbc>
 800ee50:	682b      	ldr	r3, [r5, #0]
 800ee52:	6820      	ldr	r0, [r4, #0]
 800ee54:	1d19      	adds	r1, r3, #4
 800ee56:	6029      	str	r1, [r5, #0]
 800ee58:	0601      	lsls	r1, r0, #24
 800ee5a:	d501      	bpl.n	800ee60 <_printf_i+0xec>
 800ee5c:	681e      	ldr	r6, [r3, #0]
 800ee5e:	e002      	b.n	800ee66 <_printf_i+0xf2>
 800ee60:	0646      	lsls	r6, r0, #25
 800ee62:	d5fb      	bpl.n	800ee5c <_printf_i+0xe8>
 800ee64:	881e      	ldrh	r6, [r3, #0]
 800ee66:	4854      	ldr	r0, [pc, #336]	; (800efb8 <_printf_i+0x244>)
 800ee68:	2f6f      	cmp	r7, #111	; 0x6f
 800ee6a:	bf0c      	ite	eq
 800ee6c:	2308      	moveq	r3, #8
 800ee6e:	230a      	movne	r3, #10
 800ee70:	2100      	movs	r1, #0
 800ee72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ee76:	6865      	ldr	r5, [r4, #4]
 800ee78:	60a5      	str	r5, [r4, #8]
 800ee7a:	2d00      	cmp	r5, #0
 800ee7c:	bfa2      	ittt	ge
 800ee7e:	6821      	ldrge	r1, [r4, #0]
 800ee80:	f021 0104 	bicge.w	r1, r1, #4
 800ee84:	6021      	strge	r1, [r4, #0]
 800ee86:	b90e      	cbnz	r6, 800ee8c <_printf_i+0x118>
 800ee88:	2d00      	cmp	r5, #0
 800ee8a:	d04d      	beq.n	800ef28 <_printf_i+0x1b4>
 800ee8c:	4615      	mov	r5, r2
 800ee8e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ee92:	fb03 6711 	mls	r7, r3, r1, r6
 800ee96:	5dc7      	ldrb	r7, [r0, r7]
 800ee98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ee9c:	4637      	mov	r7, r6
 800ee9e:	42bb      	cmp	r3, r7
 800eea0:	460e      	mov	r6, r1
 800eea2:	d9f4      	bls.n	800ee8e <_printf_i+0x11a>
 800eea4:	2b08      	cmp	r3, #8
 800eea6:	d10b      	bne.n	800eec0 <_printf_i+0x14c>
 800eea8:	6823      	ldr	r3, [r4, #0]
 800eeaa:	07de      	lsls	r6, r3, #31
 800eeac:	d508      	bpl.n	800eec0 <_printf_i+0x14c>
 800eeae:	6923      	ldr	r3, [r4, #16]
 800eeb0:	6861      	ldr	r1, [r4, #4]
 800eeb2:	4299      	cmp	r1, r3
 800eeb4:	bfde      	ittt	le
 800eeb6:	2330      	movle	r3, #48	; 0x30
 800eeb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eebc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800eec0:	1b52      	subs	r2, r2, r5
 800eec2:	6122      	str	r2, [r4, #16]
 800eec4:	f8cd a000 	str.w	sl, [sp]
 800eec8:	464b      	mov	r3, r9
 800eeca:	aa03      	add	r2, sp, #12
 800eecc:	4621      	mov	r1, r4
 800eece:	4640      	mov	r0, r8
 800eed0:	f7ff fee2 	bl	800ec98 <_printf_common>
 800eed4:	3001      	adds	r0, #1
 800eed6:	d14c      	bne.n	800ef72 <_printf_i+0x1fe>
 800eed8:	f04f 30ff 	mov.w	r0, #4294967295
 800eedc:	b004      	add	sp, #16
 800eede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eee2:	4835      	ldr	r0, [pc, #212]	; (800efb8 <_printf_i+0x244>)
 800eee4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800eee8:	6829      	ldr	r1, [r5, #0]
 800eeea:	6823      	ldr	r3, [r4, #0]
 800eeec:	f851 6b04 	ldr.w	r6, [r1], #4
 800eef0:	6029      	str	r1, [r5, #0]
 800eef2:	061d      	lsls	r5, r3, #24
 800eef4:	d514      	bpl.n	800ef20 <_printf_i+0x1ac>
 800eef6:	07df      	lsls	r7, r3, #31
 800eef8:	bf44      	itt	mi
 800eefa:	f043 0320 	orrmi.w	r3, r3, #32
 800eefe:	6023      	strmi	r3, [r4, #0]
 800ef00:	b91e      	cbnz	r6, 800ef0a <_printf_i+0x196>
 800ef02:	6823      	ldr	r3, [r4, #0]
 800ef04:	f023 0320 	bic.w	r3, r3, #32
 800ef08:	6023      	str	r3, [r4, #0]
 800ef0a:	2310      	movs	r3, #16
 800ef0c:	e7b0      	b.n	800ee70 <_printf_i+0xfc>
 800ef0e:	6823      	ldr	r3, [r4, #0]
 800ef10:	f043 0320 	orr.w	r3, r3, #32
 800ef14:	6023      	str	r3, [r4, #0]
 800ef16:	2378      	movs	r3, #120	; 0x78
 800ef18:	4828      	ldr	r0, [pc, #160]	; (800efbc <_printf_i+0x248>)
 800ef1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ef1e:	e7e3      	b.n	800eee8 <_printf_i+0x174>
 800ef20:	0659      	lsls	r1, r3, #25
 800ef22:	bf48      	it	mi
 800ef24:	b2b6      	uxthmi	r6, r6
 800ef26:	e7e6      	b.n	800eef6 <_printf_i+0x182>
 800ef28:	4615      	mov	r5, r2
 800ef2a:	e7bb      	b.n	800eea4 <_printf_i+0x130>
 800ef2c:	682b      	ldr	r3, [r5, #0]
 800ef2e:	6826      	ldr	r6, [r4, #0]
 800ef30:	6961      	ldr	r1, [r4, #20]
 800ef32:	1d18      	adds	r0, r3, #4
 800ef34:	6028      	str	r0, [r5, #0]
 800ef36:	0635      	lsls	r5, r6, #24
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	d501      	bpl.n	800ef40 <_printf_i+0x1cc>
 800ef3c:	6019      	str	r1, [r3, #0]
 800ef3e:	e002      	b.n	800ef46 <_printf_i+0x1d2>
 800ef40:	0670      	lsls	r0, r6, #25
 800ef42:	d5fb      	bpl.n	800ef3c <_printf_i+0x1c8>
 800ef44:	8019      	strh	r1, [r3, #0]
 800ef46:	2300      	movs	r3, #0
 800ef48:	6123      	str	r3, [r4, #16]
 800ef4a:	4615      	mov	r5, r2
 800ef4c:	e7ba      	b.n	800eec4 <_printf_i+0x150>
 800ef4e:	682b      	ldr	r3, [r5, #0]
 800ef50:	1d1a      	adds	r2, r3, #4
 800ef52:	602a      	str	r2, [r5, #0]
 800ef54:	681d      	ldr	r5, [r3, #0]
 800ef56:	6862      	ldr	r2, [r4, #4]
 800ef58:	2100      	movs	r1, #0
 800ef5a:	4628      	mov	r0, r5
 800ef5c:	f7f1 f948 	bl	80001f0 <memchr>
 800ef60:	b108      	cbz	r0, 800ef66 <_printf_i+0x1f2>
 800ef62:	1b40      	subs	r0, r0, r5
 800ef64:	6060      	str	r0, [r4, #4]
 800ef66:	6863      	ldr	r3, [r4, #4]
 800ef68:	6123      	str	r3, [r4, #16]
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef70:	e7a8      	b.n	800eec4 <_printf_i+0x150>
 800ef72:	6923      	ldr	r3, [r4, #16]
 800ef74:	462a      	mov	r2, r5
 800ef76:	4649      	mov	r1, r9
 800ef78:	4640      	mov	r0, r8
 800ef7a:	47d0      	blx	sl
 800ef7c:	3001      	adds	r0, #1
 800ef7e:	d0ab      	beq.n	800eed8 <_printf_i+0x164>
 800ef80:	6823      	ldr	r3, [r4, #0]
 800ef82:	079b      	lsls	r3, r3, #30
 800ef84:	d413      	bmi.n	800efae <_printf_i+0x23a>
 800ef86:	68e0      	ldr	r0, [r4, #12]
 800ef88:	9b03      	ldr	r3, [sp, #12]
 800ef8a:	4298      	cmp	r0, r3
 800ef8c:	bfb8      	it	lt
 800ef8e:	4618      	movlt	r0, r3
 800ef90:	e7a4      	b.n	800eedc <_printf_i+0x168>
 800ef92:	2301      	movs	r3, #1
 800ef94:	4632      	mov	r2, r6
 800ef96:	4649      	mov	r1, r9
 800ef98:	4640      	mov	r0, r8
 800ef9a:	47d0      	blx	sl
 800ef9c:	3001      	adds	r0, #1
 800ef9e:	d09b      	beq.n	800eed8 <_printf_i+0x164>
 800efa0:	3501      	adds	r5, #1
 800efa2:	68e3      	ldr	r3, [r4, #12]
 800efa4:	9903      	ldr	r1, [sp, #12]
 800efa6:	1a5b      	subs	r3, r3, r1
 800efa8:	42ab      	cmp	r3, r5
 800efaa:	dcf2      	bgt.n	800ef92 <_printf_i+0x21e>
 800efac:	e7eb      	b.n	800ef86 <_printf_i+0x212>
 800efae:	2500      	movs	r5, #0
 800efb0:	f104 0619 	add.w	r6, r4, #25
 800efb4:	e7f5      	b.n	800efa2 <_printf_i+0x22e>
 800efb6:	bf00      	nop
 800efb8:	0800ffa1 	.word	0x0800ffa1
 800efbc:	0800ffb2 	.word	0x0800ffb2

0800efc0 <__sread>:
 800efc0:	b510      	push	{r4, lr}
 800efc2:	460c      	mov	r4, r1
 800efc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efc8:	f000 f8de 	bl	800f188 <_read_r>
 800efcc:	2800      	cmp	r0, #0
 800efce:	bfab      	itete	ge
 800efd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800efd2:	89a3      	ldrhlt	r3, [r4, #12]
 800efd4:	181b      	addge	r3, r3, r0
 800efd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800efda:	bfac      	ite	ge
 800efdc:	6563      	strge	r3, [r4, #84]	; 0x54
 800efde:	81a3      	strhlt	r3, [r4, #12]
 800efe0:	bd10      	pop	{r4, pc}

0800efe2 <__swrite>:
 800efe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efe6:	461f      	mov	r7, r3
 800efe8:	898b      	ldrh	r3, [r1, #12]
 800efea:	05db      	lsls	r3, r3, #23
 800efec:	4605      	mov	r5, r0
 800efee:	460c      	mov	r4, r1
 800eff0:	4616      	mov	r6, r2
 800eff2:	d505      	bpl.n	800f000 <__swrite+0x1e>
 800eff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eff8:	2302      	movs	r3, #2
 800effa:	2200      	movs	r2, #0
 800effc:	f000 f868 	bl	800f0d0 <_lseek_r>
 800f000:	89a3      	ldrh	r3, [r4, #12]
 800f002:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f006:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f00a:	81a3      	strh	r3, [r4, #12]
 800f00c:	4632      	mov	r2, r6
 800f00e:	463b      	mov	r3, r7
 800f010:	4628      	mov	r0, r5
 800f012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f016:	f000 b817 	b.w	800f048 <_write_r>

0800f01a <__sseek>:
 800f01a:	b510      	push	{r4, lr}
 800f01c:	460c      	mov	r4, r1
 800f01e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f022:	f000 f855 	bl	800f0d0 <_lseek_r>
 800f026:	1c43      	adds	r3, r0, #1
 800f028:	89a3      	ldrh	r3, [r4, #12]
 800f02a:	bf15      	itete	ne
 800f02c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f02e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f032:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f036:	81a3      	strheq	r3, [r4, #12]
 800f038:	bf18      	it	ne
 800f03a:	81a3      	strhne	r3, [r4, #12]
 800f03c:	bd10      	pop	{r4, pc}

0800f03e <__sclose>:
 800f03e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f042:	f000 b813 	b.w	800f06c <_close_r>
	...

0800f048 <_write_r>:
 800f048:	b538      	push	{r3, r4, r5, lr}
 800f04a:	4d07      	ldr	r5, [pc, #28]	; (800f068 <_write_r+0x20>)
 800f04c:	4604      	mov	r4, r0
 800f04e:	4608      	mov	r0, r1
 800f050:	4611      	mov	r1, r2
 800f052:	2200      	movs	r2, #0
 800f054:	602a      	str	r2, [r5, #0]
 800f056:	461a      	mov	r2, r3
 800f058:	f7f2 f800 	bl	800105c <_write>
 800f05c:	1c43      	adds	r3, r0, #1
 800f05e:	d102      	bne.n	800f066 <_write_r+0x1e>
 800f060:	682b      	ldr	r3, [r5, #0]
 800f062:	b103      	cbz	r3, 800f066 <_write_r+0x1e>
 800f064:	6023      	str	r3, [r4, #0]
 800f066:	bd38      	pop	{r3, r4, r5, pc}
 800f068:	20003804 	.word	0x20003804

0800f06c <_close_r>:
 800f06c:	b538      	push	{r3, r4, r5, lr}
 800f06e:	4d06      	ldr	r5, [pc, #24]	; (800f088 <_close_r+0x1c>)
 800f070:	2300      	movs	r3, #0
 800f072:	4604      	mov	r4, r0
 800f074:	4608      	mov	r0, r1
 800f076:	602b      	str	r3, [r5, #0]
 800f078:	f7f3 fd69 	bl	8002b4e <_close>
 800f07c:	1c43      	adds	r3, r0, #1
 800f07e:	d102      	bne.n	800f086 <_close_r+0x1a>
 800f080:	682b      	ldr	r3, [r5, #0]
 800f082:	b103      	cbz	r3, 800f086 <_close_r+0x1a>
 800f084:	6023      	str	r3, [r4, #0]
 800f086:	bd38      	pop	{r3, r4, r5, pc}
 800f088:	20003804 	.word	0x20003804

0800f08c <_fstat_r>:
 800f08c:	b538      	push	{r3, r4, r5, lr}
 800f08e:	4d07      	ldr	r5, [pc, #28]	; (800f0ac <_fstat_r+0x20>)
 800f090:	2300      	movs	r3, #0
 800f092:	4604      	mov	r4, r0
 800f094:	4608      	mov	r0, r1
 800f096:	4611      	mov	r1, r2
 800f098:	602b      	str	r3, [r5, #0]
 800f09a:	f7f3 fd64 	bl	8002b66 <_fstat>
 800f09e:	1c43      	adds	r3, r0, #1
 800f0a0:	d102      	bne.n	800f0a8 <_fstat_r+0x1c>
 800f0a2:	682b      	ldr	r3, [r5, #0]
 800f0a4:	b103      	cbz	r3, 800f0a8 <_fstat_r+0x1c>
 800f0a6:	6023      	str	r3, [r4, #0]
 800f0a8:	bd38      	pop	{r3, r4, r5, pc}
 800f0aa:	bf00      	nop
 800f0ac:	20003804 	.word	0x20003804

0800f0b0 <_isatty_r>:
 800f0b0:	b538      	push	{r3, r4, r5, lr}
 800f0b2:	4d06      	ldr	r5, [pc, #24]	; (800f0cc <_isatty_r+0x1c>)
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	4604      	mov	r4, r0
 800f0b8:	4608      	mov	r0, r1
 800f0ba:	602b      	str	r3, [r5, #0]
 800f0bc:	f7f3 fd63 	bl	8002b86 <_isatty>
 800f0c0:	1c43      	adds	r3, r0, #1
 800f0c2:	d102      	bne.n	800f0ca <_isatty_r+0x1a>
 800f0c4:	682b      	ldr	r3, [r5, #0]
 800f0c6:	b103      	cbz	r3, 800f0ca <_isatty_r+0x1a>
 800f0c8:	6023      	str	r3, [r4, #0]
 800f0ca:	bd38      	pop	{r3, r4, r5, pc}
 800f0cc:	20003804 	.word	0x20003804

0800f0d0 <_lseek_r>:
 800f0d0:	b538      	push	{r3, r4, r5, lr}
 800f0d2:	4d07      	ldr	r5, [pc, #28]	; (800f0f0 <_lseek_r+0x20>)
 800f0d4:	4604      	mov	r4, r0
 800f0d6:	4608      	mov	r0, r1
 800f0d8:	4611      	mov	r1, r2
 800f0da:	2200      	movs	r2, #0
 800f0dc:	602a      	str	r2, [r5, #0]
 800f0de:	461a      	mov	r2, r3
 800f0e0:	f7f3 fd5c 	bl	8002b9c <_lseek>
 800f0e4:	1c43      	adds	r3, r0, #1
 800f0e6:	d102      	bne.n	800f0ee <_lseek_r+0x1e>
 800f0e8:	682b      	ldr	r3, [r5, #0]
 800f0ea:	b103      	cbz	r3, 800f0ee <_lseek_r+0x1e>
 800f0ec:	6023      	str	r3, [r4, #0]
 800f0ee:	bd38      	pop	{r3, r4, r5, pc}
 800f0f0:	20003804 	.word	0x20003804

0800f0f4 <memmove>:
 800f0f4:	4288      	cmp	r0, r1
 800f0f6:	b510      	push	{r4, lr}
 800f0f8:	eb01 0402 	add.w	r4, r1, r2
 800f0fc:	d902      	bls.n	800f104 <memmove+0x10>
 800f0fe:	4284      	cmp	r4, r0
 800f100:	4623      	mov	r3, r4
 800f102:	d807      	bhi.n	800f114 <memmove+0x20>
 800f104:	1e43      	subs	r3, r0, #1
 800f106:	42a1      	cmp	r1, r4
 800f108:	d008      	beq.n	800f11c <memmove+0x28>
 800f10a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f10e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f112:	e7f8      	b.n	800f106 <memmove+0x12>
 800f114:	4402      	add	r2, r0
 800f116:	4601      	mov	r1, r0
 800f118:	428a      	cmp	r2, r1
 800f11a:	d100      	bne.n	800f11e <memmove+0x2a>
 800f11c:	bd10      	pop	{r4, pc}
 800f11e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f122:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f126:	e7f7      	b.n	800f118 <memmove+0x24>

0800f128 <_realloc_r>:
 800f128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f12c:	4680      	mov	r8, r0
 800f12e:	4614      	mov	r4, r2
 800f130:	460e      	mov	r6, r1
 800f132:	b921      	cbnz	r1, 800f13e <_realloc_r+0x16>
 800f134:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f138:	4611      	mov	r1, r2
 800f13a:	f7fe bebd 	b.w	800deb8 <_malloc_r>
 800f13e:	b92a      	cbnz	r2, 800f14c <_realloc_r+0x24>
 800f140:	f7fe fe4e 	bl	800dde0 <_free_r>
 800f144:	4625      	mov	r5, r4
 800f146:	4628      	mov	r0, r5
 800f148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f14c:	f000 f82e 	bl	800f1ac <_malloc_usable_size_r>
 800f150:	4284      	cmp	r4, r0
 800f152:	4607      	mov	r7, r0
 800f154:	d802      	bhi.n	800f15c <_realloc_r+0x34>
 800f156:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f15a:	d812      	bhi.n	800f182 <_realloc_r+0x5a>
 800f15c:	4621      	mov	r1, r4
 800f15e:	4640      	mov	r0, r8
 800f160:	f7fe feaa 	bl	800deb8 <_malloc_r>
 800f164:	4605      	mov	r5, r0
 800f166:	2800      	cmp	r0, #0
 800f168:	d0ed      	beq.n	800f146 <_realloc_r+0x1e>
 800f16a:	42bc      	cmp	r4, r7
 800f16c:	4622      	mov	r2, r4
 800f16e:	4631      	mov	r1, r6
 800f170:	bf28      	it	cs
 800f172:	463a      	movcs	r2, r7
 800f174:	f7fe fe1e 	bl	800ddb4 <memcpy>
 800f178:	4631      	mov	r1, r6
 800f17a:	4640      	mov	r0, r8
 800f17c:	f7fe fe30 	bl	800dde0 <_free_r>
 800f180:	e7e1      	b.n	800f146 <_realloc_r+0x1e>
 800f182:	4635      	mov	r5, r6
 800f184:	e7df      	b.n	800f146 <_realloc_r+0x1e>
	...

0800f188 <_read_r>:
 800f188:	b538      	push	{r3, r4, r5, lr}
 800f18a:	4d07      	ldr	r5, [pc, #28]	; (800f1a8 <_read_r+0x20>)
 800f18c:	4604      	mov	r4, r0
 800f18e:	4608      	mov	r0, r1
 800f190:	4611      	mov	r1, r2
 800f192:	2200      	movs	r2, #0
 800f194:	602a      	str	r2, [r5, #0]
 800f196:	461a      	mov	r2, r3
 800f198:	f7f3 fcbc 	bl	8002b14 <_read>
 800f19c:	1c43      	adds	r3, r0, #1
 800f19e:	d102      	bne.n	800f1a6 <_read_r+0x1e>
 800f1a0:	682b      	ldr	r3, [r5, #0]
 800f1a2:	b103      	cbz	r3, 800f1a6 <_read_r+0x1e>
 800f1a4:	6023      	str	r3, [r4, #0]
 800f1a6:	bd38      	pop	{r3, r4, r5, pc}
 800f1a8:	20003804 	.word	0x20003804

0800f1ac <_malloc_usable_size_r>:
 800f1ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1b0:	1f18      	subs	r0, r3, #4
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	bfbc      	itt	lt
 800f1b6:	580b      	ldrlt	r3, [r1, r0]
 800f1b8:	18c0      	addlt	r0, r0, r3
 800f1ba:	4770      	bx	lr

0800f1bc <_init>:
 800f1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1be:	bf00      	nop
 800f1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1c2:	bc08      	pop	{r3}
 800f1c4:	469e      	mov	lr, r3
 800f1c6:	4770      	bx	lr

0800f1c8 <_fini>:
 800f1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1ca:	bf00      	nop
 800f1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1ce:	bc08      	pop	{r3}
 800f1d0:	469e      	mov	lr, r3
 800f1d2:	4770      	bx	lr
