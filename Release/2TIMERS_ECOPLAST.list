
2TIMERS_ECOPLAST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f05c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e14  0800f1fc  0800f1fc  0001f1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010010  08010010  00030110  2**0
                  CONTENTS
  4 .ARM          00000008  08010010  08010010  00020010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010018  08010018  00030110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010018  08010018  00020018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801001c  0801001c  0002001c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08010020  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000036f8  20000110  08010130  00030110  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003808  08010130  00033808  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d0fd  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b3f  00000000  00000000  0004d23d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001950  00000000  00000000  00051d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017d0  00000000  00000000  000536cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c4e0  00000000  00000000  00054e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021b85  00000000  00000000  0007137c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d82b  00000000  00000000  00092f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013072c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007268  00000000  00000000  0013077c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000110 	.word	0x20000110
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f1e4 	.word	0x0800f1e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000114 	.word	0x20000114
 80001dc:	0800f1e4 	.word	0x0800f1e4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800059e:	4804      	ldr	r0, [pc, #16]	; (80005b0 <SELECT+0x1c>)
 80005a0:	f003 f810 	bl	80035c4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005a4:	2001      	movs	r0, #1
 80005a6:	f002 fd53 	bl	8003050 <HAL_Delay>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020400 	.word	0x40020400

080005b4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005be:	4804      	ldr	r0, [pc, #16]	; (80005d0 <DESELECT+0x1c>)
 80005c0:	f003 f800 	bl	80035c4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005c4:	2001      	movs	r0, #1
 80005c6:	f002 fd43 	bl	8003050 <HAL_Delay>
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40020400 	.word	0x40020400

080005d4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005de:	bf00      	nop
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <SPI_TxByte+0x30>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	689b      	ldr	r3, [r3, #8]
 80005e6:	f003 0302 	and.w	r3, r3, #2
 80005ea:	2b02      	cmp	r3, #2
 80005ec:	d1f8      	bne.n	80005e0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80005ee:	1df9      	adds	r1, r7, #7
 80005f0:	2364      	movs	r3, #100	; 0x64
 80005f2:	2201      	movs	r2, #1
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <SPI_TxByte+0x30>)
 80005f6:	f004 f8cc 	bl	8004792 <HAL_SPI_Transmit>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200033e4 	.word	0x200033e4

08000608 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000614:	bf00      	nop
 8000616:	4b08      	ldr	r3, [pc, #32]	; (8000638 <SPI_TxBuffer+0x30>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	689b      	ldr	r3, [r3, #8]
 800061c:	f003 0302 	and.w	r3, r3, #2
 8000620:	2b02      	cmp	r3, #2
 8000622:	d1f8      	bne.n	8000616 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000624:	887a      	ldrh	r2, [r7, #2]
 8000626:	2364      	movs	r3, #100	; 0x64
 8000628:	6879      	ldr	r1, [r7, #4]
 800062a:	4803      	ldr	r0, [pc, #12]	; (8000638 <SPI_TxBuffer+0x30>)
 800062c:	f004 f8b1 	bl	8004792 <HAL_SPI_Transmit>
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200033e4 	.word	0x200033e4

0800063c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000642:	23ff      	movs	r3, #255	; 0xff
 8000644:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000646:	bf00      	nop
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <SPI_RxByte+0x34>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	f003 0302 	and.w	r3, r3, #2
 8000652:	2b02      	cmp	r3, #2
 8000654:	d1f8      	bne.n	8000648 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000656:	1dba      	adds	r2, r7, #6
 8000658:	1df9      	adds	r1, r7, #7
 800065a:	2364      	movs	r3, #100	; 0x64
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2301      	movs	r3, #1
 8000660:	4803      	ldr	r0, [pc, #12]	; (8000670 <SPI_RxByte+0x34>)
 8000662:	f004 fae3 	bl	8004c2c <HAL_SPI_TransmitReceive>

	return data;
 8000666:	79bb      	ldrb	r3, [r7, #6]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200033e4 	.word	0x200033e4

08000674 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800067c:	f7ff ffde 	bl	800063c <SPI_RxByte>
 8000680:	4603      	mov	r3, r0
 8000682:	461a      	mov	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	701a      	strb	r2, [r3, #0]
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000696:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <SD_ReadyWait+0x30>)
 8000698:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800069c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800069e:	f7ff ffcd 	bl	800063c <SPI_RxByte>
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2bff      	cmp	r3, #255	; 0xff
 80006aa:	d003      	beq.n	80006b4 <SD_ReadyWait+0x24>
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <SD_ReadyWait+0x30>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1f4      	bne.n	800069e <SD_ReadyWait+0xe>

	return res;
 80006b4:	79fb      	ldrb	r3, [r7, #7]
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	2000012e 	.word	0x2000012e

080006c4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80006ca:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80006ce:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80006d0:	f7ff ff70 	bl	80005b4 <DESELECT>
	for(int i = 0; i < 10; i++)
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	e005      	b.n	80006e6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80006da:	20ff      	movs	r0, #255	; 0xff
 80006dc:	f7ff ff7a 	bl	80005d4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	3301      	adds	r3, #1
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	ddf6      	ble.n	80006da <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80006ec:	f7ff ff52 	bl	8000594 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80006f0:	2340      	movs	r3, #64	; 0x40
 80006f2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000704:	2395      	movs	r3, #149	; 0x95
 8000706:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000708:	463b      	mov	r3, r7
 800070a:	2106      	movs	r1, #6
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff7b 	bl	8000608 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000712:	e002      	b.n	800071a <SD_PowerOn+0x56>
	{
		cnt--;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	3b01      	subs	r3, #1
 8000718:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800071a:	f7ff ff8f 	bl	800063c <SPI_RxByte>
 800071e:	4603      	mov	r3, r0
 8000720:	2b01      	cmp	r3, #1
 8000722:	d002      	beq.n	800072a <SD_PowerOn+0x66>
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d1f4      	bne.n	8000714 <SD_PowerOn+0x50>
	}

	DESELECT();
 800072a:	f7ff ff43 	bl	80005b4 <DESELECT>
	SPI_TxByte(0XFF);
 800072e:	20ff      	movs	r0, #255	; 0xff
 8000730:	f7ff ff50 	bl	80005d4 <SPI_TxByte>

	PowerFlag = 1;
 8000734:	4b03      	ldr	r3, [pc, #12]	; (8000744 <SD_PowerOn+0x80>)
 8000736:	2201      	movs	r2, #1
 8000738:	701a      	strb	r2, [r3, #0]
}
 800073a:	bf00      	nop
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000131 	.word	0x20000131

08000748 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800074c:	4b03      	ldr	r3, [pc, #12]	; (800075c <SD_PowerOff+0x14>)
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	20000131 	.word	0x20000131

08000760 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000764:	4b03      	ldr	r3, [pc, #12]	; (8000774 <SD_CheckPower+0x14>)
 8000766:	781b      	ldrb	r3, [r3, #0]
}
 8000768:	4618      	mov	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	20000131 	.word	0x20000131

08000778 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000782:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <SD_RxDataBlock+0x58>)
 8000784:	22c8      	movs	r2, #200	; 0xc8
 8000786:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000788:	f7ff ff58 	bl	800063c <SPI_RxByte>
 800078c:	4603      	mov	r3, r0
 800078e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	2bff      	cmp	r3, #255	; 0xff
 8000794:	d103      	bne.n	800079e <SD_RxDataBlock+0x26>
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <SD_RxDataBlock+0x58>)
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d1f4      	bne.n	8000788 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800079e:	7bfb      	ldrb	r3, [r7, #15]
 80007a0:	2bfe      	cmp	r3, #254	; 0xfe
 80007a2:	d001      	beq.n	80007a8 <SD_RxDataBlock+0x30>
 80007a4:	2300      	movs	r3, #0
 80007a6:	e00f      	b.n	80007c8 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff ff60 	bl	8000674 <SPI_RxBytePtr>
	} while(len--);
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	1e5a      	subs	r2, r3, #1
 80007b8:	603a      	str	r2, [r7, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d1f4      	bne.n	80007a8 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80007be:	f7ff ff3d 	bl	800063c <SPI_RxByte>
	SPI_RxByte();
 80007c2:	f7ff ff3b 	bl	800063c <SPI_RxByte>

	return TRUE;
 80007c6:	2301      	movs	r3, #1
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2000012c 	.word	0x2000012c

080007d4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80007e4:	f7ff ff54 	bl	8000690 <SD_ReadyWait>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2bff      	cmp	r3, #255	; 0xff
 80007ec:	d001      	beq.n	80007f2 <SD_TxDataBlock+0x1e>
 80007ee:	2300      	movs	r3, #0
 80007f0:	e02f      	b.n	8000852 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80007f2:	78fb      	ldrb	r3, [r7, #3]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff feed 	bl	80005d4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80007fa:	78fb      	ldrb	r3, [r7, #3]
 80007fc:	2bfd      	cmp	r3, #253	; 0xfd
 80007fe:	d020      	beq.n	8000842 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000800:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff feff 	bl	8000608 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800080a:	f7ff ff17 	bl	800063c <SPI_RxByte>
		SPI_RxByte();
 800080e:	f7ff ff15 	bl	800063c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000812:	e00b      	b.n	800082c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000814:	f7ff ff12 	bl	800063c <SPI_RxByte>
 8000818:	4603      	mov	r3, r0
 800081a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	f003 031f 	and.w	r3, r3, #31
 8000822:	2b05      	cmp	r3, #5
 8000824:	d006      	beq.n	8000834 <SD_TxDataBlock+0x60>
			i++;
 8000826:	7bbb      	ldrb	r3, [r7, #14]
 8000828:	3301      	adds	r3, #1
 800082a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800082c:	7bbb      	ldrb	r3, [r7, #14]
 800082e:	2b40      	cmp	r3, #64	; 0x40
 8000830:	d9f0      	bls.n	8000814 <SD_TxDataBlock+0x40>
 8000832:	e000      	b.n	8000836 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000834:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000836:	bf00      	nop
 8000838:	f7ff ff00 	bl	800063c <SPI_RxByte>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d0fa      	beq.n	8000838 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	f003 031f 	and.w	r3, r3, #31
 8000848:	2b05      	cmp	r3, #5
 800084a:	d101      	bne.n	8000850 <SD_TxDataBlock+0x7c>
 800084c:	2301      	movs	r3, #1
 800084e:	e000      	b.n	8000852 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b084      	sub	sp, #16
 800085e:	af00      	add	r7, sp, #0
 8000860:	4603      	mov	r3, r0
 8000862:	6039      	str	r1, [r7, #0]
 8000864:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000866:	f7ff ff13 	bl	8000690 <SD_ReadyWait>
 800086a:	4603      	mov	r3, r0
 800086c:	2bff      	cmp	r3, #255	; 0xff
 800086e:	d001      	beq.n	8000874 <SD_SendCmd+0x1a>
 8000870:	23ff      	movs	r3, #255	; 0xff
 8000872:	e042      	b.n	80008fa <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff feac 	bl	80005d4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	0e1b      	lsrs	r3, r3, #24
 8000880:	b2db      	uxtb	r3, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fea6 	bl	80005d4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	0c1b      	lsrs	r3, r3, #16
 800088c:	b2db      	uxtb	r3, r3
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fea0 	bl	80005d4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	0a1b      	lsrs	r3, r3, #8
 8000898:	b2db      	uxtb	r3, r3
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fe9a 	bl	80005d4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fe95 	bl	80005d4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2b40      	cmp	r3, #64	; 0x40
 80008ae:	d102      	bne.n	80008b6 <SD_SendCmd+0x5c>
 80008b0:	2395      	movs	r3, #149	; 0x95
 80008b2:	73fb      	strb	r3, [r7, #15]
 80008b4:	e007      	b.n	80008c6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	2b48      	cmp	r3, #72	; 0x48
 80008ba:	d102      	bne.n	80008c2 <SD_SendCmd+0x68>
 80008bc:	2387      	movs	r3, #135	; 0x87
 80008be:	73fb      	strb	r3, [r7, #15]
 80008c0:	e001      	b.n	80008c6 <SD_SendCmd+0x6c>
	else crc = 1;
 80008c2:	2301      	movs	r3, #1
 80008c4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fe83 	bl	80005d4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	2b4c      	cmp	r3, #76	; 0x4c
 80008d2:	d101      	bne.n	80008d8 <SD_SendCmd+0x7e>
 80008d4:	f7ff feb2 	bl	800063c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80008d8:	230a      	movs	r3, #10
 80008da:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80008dc:	f7ff feae 	bl	800063c <SPI_RxByte>
 80008e0:	4603      	mov	r3, r0
 80008e2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80008e4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	da05      	bge.n	80008f8 <SD_SendCmd+0x9e>
 80008ec:	7bbb      	ldrb	r3, [r7, #14]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	73bb      	strb	r3, [r7, #14]
 80008f2:	7bbb      	ldrb	r3, [r7, #14]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d1f1      	bne.n	80008dc <SD_SendCmd+0x82>

	return res;
 80008f8:	7b7b      	ldrb	r3, [r7, #13]
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SD_disk_initialize+0x14>
 8000914:	2301      	movs	r3, #1
 8000916:	e0d1      	b.n	8000abc <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000918:	4b6a      	ldr	r3, [pc, #424]	; (8000ac4 <SD_disk_initialize+0x1c0>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	b2db      	uxtb	r3, r3
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	2b00      	cmp	r3, #0
 8000924:	d003      	beq.n	800092e <SD_disk_initialize+0x2a>
 8000926:	4b67      	ldr	r3, [pc, #412]	; (8000ac4 <SD_disk_initialize+0x1c0>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	e0c6      	b.n	8000abc <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800092e:	f7ff fec9 	bl	80006c4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000932:	f7ff fe2f 	bl	8000594 <SELECT>

	/* check disk type */
	type = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800093a:	2100      	movs	r1, #0
 800093c:	2040      	movs	r0, #64	; 0x40
 800093e:	f7ff ff8c 	bl	800085a <SD_SendCmd>
 8000942:	4603      	mov	r3, r0
 8000944:	2b01      	cmp	r3, #1
 8000946:	f040 80a1 	bne.w	8000a8c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800094a:	4b5f      	ldr	r3, [pc, #380]	; (8000ac8 <SD_disk_initialize+0x1c4>)
 800094c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000950:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000952:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000956:	2048      	movs	r0, #72	; 0x48
 8000958:	f7ff ff7f 	bl	800085a <SD_SendCmd>
 800095c:	4603      	mov	r3, r0
 800095e:	2b01      	cmp	r3, #1
 8000960:	d155      	bne.n	8000a0e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000962:	2300      	movs	r3, #0
 8000964:	73fb      	strb	r3, [r7, #15]
 8000966:	e00c      	b.n	8000982 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000968:	7bfc      	ldrb	r4, [r7, #15]
 800096a:	f7ff fe67 	bl	800063c <SPI_RxByte>
 800096e:	4603      	mov	r3, r0
 8000970:	461a      	mov	r2, r3
 8000972:	f104 0310 	add.w	r3, r4, #16
 8000976:	443b      	add	r3, r7
 8000978:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800097c:	7bfb      	ldrb	r3, [r7, #15]
 800097e:	3301      	adds	r3, #1
 8000980:	73fb      	strb	r3, [r7, #15]
 8000982:	7bfb      	ldrb	r3, [r7, #15]
 8000984:	2b03      	cmp	r3, #3
 8000986:	d9ef      	bls.n	8000968 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000988:	7abb      	ldrb	r3, [r7, #10]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d17e      	bne.n	8000a8c <SD_disk_initialize+0x188>
 800098e:	7afb      	ldrb	r3, [r7, #11]
 8000990:	2baa      	cmp	r3, #170	; 0xaa
 8000992:	d17b      	bne.n	8000a8c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000994:	2100      	movs	r1, #0
 8000996:	2077      	movs	r0, #119	; 0x77
 8000998:	f7ff ff5f 	bl	800085a <SD_SendCmd>
 800099c:	4603      	mov	r3, r0
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d807      	bhi.n	80009b2 <SD_disk_initialize+0xae>
 80009a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80009a6:	2069      	movs	r0, #105	; 0x69
 80009a8:	f7ff ff57 	bl	800085a <SD_SendCmd>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d004      	beq.n	80009bc <SD_disk_initialize+0xb8>
				} while (Timer1);
 80009b2:	4b45      	ldr	r3, [pc, #276]	; (8000ac8 <SD_disk_initialize+0x1c4>)
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d1ec      	bne.n	8000994 <SD_disk_initialize+0x90>
 80009ba:	e000      	b.n	80009be <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009bc:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80009be:	4b42      	ldr	r3, [pc, #264]	; (8000ac8 <SD_disk_initialize+0x1c4>)
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d062      	beq.n	8000a8c <SD_disk_initialize+0x188>
 80009c6:	2100      	movs	r1, #0
 80009c8:	207a      	movs	r0, #122	; 0x7a
 80009ca:	f7ff ff46 	bl	800085a <SD_SendCmd>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d15b      	bne.n	8000a8c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80009d4:	2300      	movs	r3, #0
 80009d6:	73fb      	strb	r3, [r7, #15]
 80009d8:	e00c      	b.n	80009f4 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80009da:	7bfc      	ldrb	r4, [r7, #15]
 80009dc:	f7ff fe2e 	bl	800063c <SPI_RxByte>
 80009e0:	4603      	mov	r3, r0
 80009e2:	461a      	mov	r2, r3
 80009e4:	f104 0310 	add.w	r3, r4, #16
 80009e8:	443b      	add	r3, r7
 80009ea:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	3301      	adds	r3, #1
 80009f2:	73fb      	strb	r3, [r7, #15]
 80009f4:	7bfb      	ldrb	r3, [r7, #15]
 80009f6:	2b03      	cmp	r3, #3
 80009f8:	d9ef      	bls.n	80009da <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80009fa:	7a3b      	ldrb	r3, [r7, #8]
 80009fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SD_disk_initialize+0x104>
 8000a04:	230c      	movs	r3, #12
 8000a06:	e000      	b.n	8000a0a <SD_disk_initialize+0x106>
 8000a08:	2304      	movs	r3, #4
 8000a0a:	73bb      	strb	r3, [r7, #14]
 8000a0c:	e03e      	b.n	8000a8c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000a0e:	2100      	movs	r1, #0
 8000a10:	2077      	movs	r0, #119	; 0x77
 8000a12:	f7ff ff22 	bl	800085a <SD_SendCmd>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d808      	bhi.n	8000a2e <SD_disk_initialize+0x12a>
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2069      	movs	r0, #105	; 0x69
 8000a20:	f7ff ff1b 	bl	800085a <SD_SendCmd>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d801      	bhi.n	8000a2e <SD_disk_initialize+0x12a>
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	e000      	b.n	8000a30 <SD_disk_initialize+0x12c>
 8000a2e:	2301      	movs	r3, #1
 8000a30:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000a32:	7bbb      	ldrb	r3, [r7, #14]
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	d10e      	bne.n	8000a56 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2077      	movs	r0, #119	; 0x77
 8000a3c:	f7ff ff0d 	bl	800085a <SD_SendCmd>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d80e      	bhi.n	8000a64 <SD_disk_initialize+0x160>
 8000a46:	2100      	movs	r1, #0
 8000a48:	2069      	movs	r0, #105	; 0x69
 8000a4a:	f7ff ff06 	bl	800085a <SD_SendCmd>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d107      	bne.n	8000a64 <SD_disk_initialize+0x160>
 8000a54:	e00c      	b.n	8000a70 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a56:	2100      	movs	r1, #0
 8000a58:	2041      	movs	r0, #65	; 0x41
 8000a5a:	f7ff fefe 	bl	800085a <SD_SendCmd>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d004      	beq.n	8000a6e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000a64:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <SD_disk_initialize+0x1c4>)
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d1e2      	bne.n	8000a32 <SD_disk_initialize+0x12e>
 8000a6c:	e000      	b.n	8000a70 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a6e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a70:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <SD_disk_initialize+0x1c4>)
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d007      	beq.n	8000a88 <SD_disk_initialize+0x184>
 8000a78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7c:	2050      	movs	r0, #80	; 0x50
 8000a7e:	f7ff feec 	bl	800085a <SD_SendCmd>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <SD_disk_initialize+0x188>
 8000a88:	2300      	movs	r3, #0
 8000a8a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000a8c:	4a0f      	ldr	r2, [pc, #60]	; (8000acc <SD_disk_initialize+0x1c8>)
 8000a8e:	7bbb      	ldrb	r3, [r7, #14]
 8000a90:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000a92:	f7ff fd8f 	bl	80005b4 <DESELECT>
	SPI_RxByte();
 8000a96:	f7ff fdd1 	bl	800063c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000a9a:	7bbb      	ldrb	r3, [r7, #14]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d008      	beq.n	8000ab2 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <SD_disk_initialize+0x1c0>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	f023 0301 	bic.w	r3, r3, #1
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <SD_disk_initialize+0x1c0>)
 8000aae:	701a      	strb	r2, [r3, #0]
 8000ab0:	e001      	b.n	8000ab6 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000ab2:	f7ff fe49 	bl	8000748 <SD_PowerOff>
	}

	return Stat;
 8000ab6:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <SD_disk_initialize+0x1c0>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	b2db      	uxtb	r3, r3
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd90      	pop	{r4, r7, pc}
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	2000012c 	.word	0x2000012c
 8000acc:	20000130 	.word	0x20000130

08000ad0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SD_disk_status+0x14>
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e002      	b.n	8000aea <SD_disk_status+0x1a>
	return Stat;
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <SD_disk_status+0x28>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b2db      	uxtb	r3, r3
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000000 	.word	0x20000000

08000afc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	4603      	mov	r3, r0
 8000b0a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d102      	bne.n	8000b18 <SD_disk_read+0x1c>
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d101      	bne.n	8000b1c <SD_disk_read+0x20>
 8000b18:	2304      	movs	r3, #4
 8000b1a:	e051      	b.n	8000bc0 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b1c:	4b2a      	ldr	r3, [pc, #168]	; (8000bc8 <SD_disk_read+0xcc>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SD_disk_read+0x32>
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	e048      	b.n	8000bc0 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b2e:	4b27      	ldr	r3, [pc, #156]	; (8000bcc <SD_disk_read+0xd0>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d102      	bne.n	8000b40 <SD_disk_read+0x44>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	025b      	lsls	r3, r3, #9
 8000b3e:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b40:	f7ff fd28 	bl	8000594 <SELECT>

	if (count == 1)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d111      	bne.n	8000b6e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	2051      	movs	r0, #81	; 0x51
 8000b4e:	f7ff fe84 	bl	800085a <SD_SendCmd>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d129      	bne.n	8000bac <SD_disk_read+0xb0>
 8000b58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b5c:	68b8      	ldr	r0, [r7, #8]
 8000b5e:	f7ff fe0b 	bl	8000778 <SD_RxDataBlock>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d021      	beq.n	8000bac <SD_disk_read+0xb0>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	e01e      	b.n	8000bac <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	2052      	movs	r0, #82	; 0x52
 8000b72:	f7ff fe72 	bl	800085a <SD_SendCmd>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d117      	bne.n	8000bac <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b80:	68b8      	ldr	r0, [r7, #8]
 8000b82:	f7ff fdf9 	bl	8000778 <SD_RxDataBlock>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d00a      	beq.n	8000ba2 <SD_disk_read+0xa6>
				buff += 512;
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b92:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d1ed      	bne.n	8000b7c <SD_disk_read+0x80>
 8000ba0:	e000      	b.n	8000ba4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ba2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	204c      	movs	r0, #76	; 0x4c
 8000ba8:	f7ff fe57 	bl	800085a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000bac:	f7ff fd02 	bl	80005b4 <DESELECT>
	SPI_RxByte();
 8000bb0:	f7ff fd44 	bl	800063c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	bf14      	ite	ne
 8000bba:	2301      	movne	r3, #1
 8000bbc:	2300      	moveq	r3, #0
 8000bbe:	b2db      	uxtb	r3, r3
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	20000130 	.word	0x20000130

08000bd0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	4603      	mov	r3, r0
 8000bde:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d102      	bne.n	8000bec <SD_disk_write+0x1c>
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d101      	bne.n	8000bf0 <SD_disk_write+0x20>
 8000bec:	2304      	movs	r3, #4
 8000bee:	e06b      	b.n	8000cc8 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000bf0:	4b37      	ldr	r3, [pc, #220]	; (8000cd0 <SD_disk_write+0x100>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SD_disk_write+0x32>
 8000bfe:	2303      	movs	r3, #3
 8000c00:	e062      	b.n	8000cc8 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000c02:	4b33      	ldr	r3, [pc, #204]	; (8000cd0 <SD_disk_write+0x100>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	f003 0304 	and.w	r3, r3, #4
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SD_disk_write+0x44>
 8000c10:	2302      	movs	r3, #2
 8000c12:	e059      	b.n	8000cc8 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000c14:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <SD_disk_write+0x104>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d102      	bne.n	8000c26 <SD_disk_write+0x56>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	025b      	lsls	r3, r3, #9
 8000c24:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c26:	f7ff fcb5 	bl	8000594 <SELECT>

	if (count == 1)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d110      	bne.n	8000c52 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c30:	6879      	ldr	r1, [r7, #4]
 8000c32:	2058      	movs	r0, #88	; 0x58
 8000c34:	f7ff fe11 	bl	800085a <SD_SendCmd>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d13a      	bne.n	8000cb4 <SD_disk_write+0xe4>
 8000c3e:	21fe      	movs	r1, #254	; 0xfe
 8000c40:	68b8      	ldr	r0, [r7, #8]
 8000c42:	f7ff fdc7 	bl	80007d4 <SD_TxDataBlock>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d033      	beq.n	8000cb4 <SD_disk_write+0xe4>
			count = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	e030      	b.n	8000cb4 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000c52:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <SD_disk_write+0x104>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d007      	beq.n	8000c6e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000c5e:	2100      	movs	r1, #0
 8000c60:	2077      	movs	r0, #119	; 0x77
 8000c62:	f7ff fdfa 	bl	800085a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c66:	6839      	ldr	r1, [r7, #0]
 8000c68:	2057      	movs	r0, #87	; 0x57
 8000c6a:	f7ff fdf6 	bl	800085a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	2059      	movs	r0, #89	; 0x59
 8000c72:	f7ff fdf2 	bl	800085a <SD_SendCmd>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d11b      	bne.n	8000cb4 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c7c:	21fc      	movs	r1, #252	; 0xfc
 8000c7e:	68b8      	ldr	r0, [r7, #8]
 8000c80:	f7ff fda8 	bl	80007d4 <SD_TxDataBlock>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d00a      	beq.n	8000ca0 <SD_disk_write+0xd0>
				buff += 512;
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c90:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	3b01      	subs	r3, #1
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d1ee      	bne.n	8000c7c <SD_disk_write+0xac>
 8000c9e:	e000      	b.n	8000ca2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000ca0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000ca2:	21fd      	movs	r1, #253	; 0xfd
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f7ff fd95 	bl	80007d4 <SD_TxDataBlock>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d101      	bne.n	8000cb4 <SD_disk_write+0xe4>
			{
				count = 1;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000cb4:	f7ff fc7e 	bl	80005b4 <DESELECT>
	SPI_RxByte();
 8000cb8:	f7ff fcc0 	bl	800063c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	bf14      	ite	ne
 8000cc2:	2301      	movne	r3, #1
 8000cc4:	2300      	moveq	r3, #0
 8000cc6:	b2db      	uxtb	r3, r3
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	20000130 	.word	0x20000130

08000cd8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b08b      	sub	sp, #44	; 0x2c
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	603a      	str	r2, [r7, #0]
 8000ce2:	71fb      	strb	r3, [r7, #7]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SD_disk_ioctl+0x1e>
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	e115      	b.n	8000f22 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000cfc:	79bb      	ldrb	r3, [r7, #6]
 8000cfe:	2b05      	cmp	r3, #5
 8000d00:	d124      	bne.n	8000d4c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000d02:	6a3b      	ldr	r3, [r7, #32]
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d012      	beq.n	8000d30 <SD_disk_ioctl+0x58>
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	dc1a      	bgt.n	8000d44 <SD_disk_ioctl+0x6c>
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d002      	beq.n	8000d18 <SD_disk_ioctl+0x40>
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d006      	beq.n	8000d24 <SD_disk_ioctl+0x4c>
 8000d16:	e015      	b.n	8000d44 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000d18:	f7ff fd16 	bl	8000748 <SD_PowerOff>
			res = RES_OK;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d22:	e0fc      	b.n	8000f1e <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000d24:	f7ff fcce 	bl	80006c4 <SD_PowerOn>
			res = RES_OK;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d2e:	e0f6      	b.n	8000f1e <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000d30:	6a3b      	ldr	r3, [r7, #32]
 8000d32:	1c5c      	adds	r4, r3, #1
 8000d34:	f7ff fd14 	bl	8000760 <SD_CheckPower>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d42:	e0ec      	b.n	8000f1e <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000d44:	2304      	movs	r3, #4
 8000d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d4a:	e0e8      	b.n	8000f1e <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d4c:	4b77      	ldr	r3, [pc, #476]	; (8000f2c <SD_disk_ioctl+0x254>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <SD_disk_ioctl+0x86>
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e0e1      	b.n	8000f22 <SD_disk_ioctl+0x24a>

		SELECT();
 8000d5e:	f7ff fc19 	bl	8000594 <SELECT>

		switch (ctrl)
 8000d62:	79bb      	ldrb	r3, [r7, #6]
 8000d64:	2b0d      	cmp	r3, #13
 8000d66:	f200 80cb 	bhi.w	8000f00 <SD_disk_ioctl+0x228>
 8000d6a:	a201      	add	r2, pc, #4	; (adr r2, 8000d70 <SD_disk_ioctl+0x98>)
 8000d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d70:	08000e6b 	.word	0x08000e6b
 8000d74:	08000da9 	.word	0x08000da9
 8000d78:	08000e5b 	.word	0x08000e5b
 8000d7c:	08000f01 	.word	0x08000f01
 8000d80:	08000f01 	.word	0x08000f01
 8000d84:	08000f01 	.word	0x08000f01
 8000d88:	08000f01 	.word	0x08000f01
 8000d8c:	08000f01 	.word	0x08000f01
 8000d90:	08000f01 	.word	0x08000f01
 8000d94:	08000f01 	.word	0x08000f01
 8000d98:	08000f01 	.word	0x08000f01
 8000d9c:	08000e7d 	.word	0x08000e7d
 8000da0:	08000ea1 	.word	0x08000ea1
 8000da4:	08000ec5 	.word	0x08000ec5
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000da8:	2100      	movs	r1, #0
 8000daa:	2049      	movs	r0, #73	; 0x49
 8000dac:	f7ff fd55 	bl	800085a <SD_SendCmd>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 80a8 	bne.w	8000f08 <SD_disk_ioctl+0x230>
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	2110      	movs	r1, #16
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fcda 	bl	8000778 <SD_RxDataBlock>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f000 809e 	beq.w	8000f08 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000dcc:	7b3b      	ldrb	r3, [r7, #12]
 8000dce:	099b      	lsrs	r3, r3, #6
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d10e      	bne.n	8000df4 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000dd6:	7d7b      	ldrb	r3, [r7, #21]
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	7d3b      	ldrb	r3, [r7, #20]
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	021b      	lsls	r3, r3, #8
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	4413      	add	r3, r2
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	3301      	adds	r3, #1
 8000de8:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000dea:	8bfb      	ldrh	r3, [r7, #30]
 8000dec:	029a      	lsls	r2, r3, #10
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	e02e      	b.n	8000e52 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000df4:	7c7b      	ldrb	r3, [r7, #17]
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	7dbb      	ldrb	r3, [r7, #22]
 8000dfe:	09db      	lsrs	r3, r3, #7
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	4413      	add	r3, r2
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	7d7b      	ldrb	r3, [r7, #21]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	f003 0306 	and.w	r3, r3, #6
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	4413      	add	r3, r2
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	3302      	adds	r3, #2
 8000e18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e1c:	7d3b      	ldrb	r3, [r7, #20]
 8000e1e:	099b      	lsrs	r3, r3, #6
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	7cfb      	ldrb	r3, [r7, #19]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	4413      	add	r3, r2
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	7cbb      	ldrb	r3, [r7, #18]
 8000e32:	029b      	lsls	r3, r3, #10
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	4413      	add	r3, r2
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	3301      	adds	r3, #1
 8000e42:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e44:	8bfa      	ldrh	r2, [r7, #30]
 8000e46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e4a:	3b09      	subs	r3, #9
 8000e4c:	409a      	lsls	r2, r3
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000e58:	e056      	b.n	8000f08 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e60:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e62:	2300      	movs	r3, #0
 8000e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e68:	e055      	b.n	8000f16 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e6a:	f7ff fc11 	bl	8000690 <SD_ReadyWait>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2bff      	cmp	r3, #255	; 0xff
 8000e72:	d14b      	bne.n	8000f0c <SD_disk_ioctl+0x234>
 8000e74:	2300      	movs	r3, #0
 8000e76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e7a:	e047      	b.n	8000f0c <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2049      	movs	r0, #73	; 0x49
 8000e80:	f7ff fceb 	bl	800085a <SD_SendCmd>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d142      	bne.n	8000f10 <SD_disk_ioctl+0x238>
 8000e8a:	2110      	movs	r1, #16
 8000e8c:	6a38      	ldr	r0, [r7, #32]
 8000e8e:	f7ff fc73 	bl	8000778 <SD_RxDataBlock>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d03b      	beq.n	8000f10 <SD_disk_ioctl+0x238>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e9e:	e037      	b.n	8000f10 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	204a      	movs	r0, #74	; 0x4a
 8000ea4:	f7ff fcd9 	bl	800085a <SD_SendCmd>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d132      	bne.n	8000f14 <SD_disk_ioctl+0x23c>
 8000eae:	2110      	movs	r1, #16
 8000eb0:	6a38      	ldr	r0, [r7, #32]
 8000eb2:	f7ff fc61 	bl	8000778 <SD_RxDataBlock>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d02b      	beq.n	8000f14 <SD_disk_ioctl+0x23c>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000ec2:	e027      	b.n	8000f14 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	207a      	movs	r0, #122	; 0x7a
 8000ec8:	f7ff fcc7 	bl	800085a <SD_SendCmd>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d116      	bne.n	8000f00 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ed8:	e00b      	b.n	8000ef2 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000eda:	6a3c      	ldr	r4, [r7, #32]
 8000edc:	1c63      	adds	r3, r4, #1
 8000ede:	623b      	str	r3, [r7, #32]
 8000ee0:	f7ff fbac 	bl	800063c <SPI_RxByte>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000ee8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000eec:	3301      	adds	r3, #1
 8000eee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ef2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d9ef      	bls.n	8000eda <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000f00:	2304      	movs	r3, #4
 8000f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f06:	e006      	b.n	8000f16 <SD_disk_ioctl+0x23e>
			break;
 8000f08:	bf00      	nop
 8000f0a:	e004      	b.n	8000f16 <SD_disk_ioctl+0x23e>
			break;
 8000f0c:	bf00      	nop
 8000f0e:	e002      	b.n	8000f16 <SD_disk_ioctl+0x23e>
			break;
 8000f10:	bf00      	nop
 8000f12:	e000      	b.n	8000f16 <SD_disk_ioctl+0x23e>
			break;
 8000f14:	bf00      	nop
		}

		DESELECT();
 8000f16:	f7ff fb4d 	bl	80005b4 <DESELECT>
		SPI_RxByte();
 8000f1a:	f7ff fb8f 	bl	800063c <SPI_RxByte>
	}

	return res;
 8000f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	372c      	adds	r7, #44	; 0x2c
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd90      	pop	{r4, r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000000 	.word	0x20000000

08000f30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	4b40      	ldr	r3, [pc, #256]	; (800104c <MX_GPIO_Init+0x11c>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a3f      	ldr	r2, [pc, #252]	; (800104c <MX_GPIO_Init+0x11c>)
 8000f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b3d      	ldr	r3, [pc, #244]	; (800104c <MX_GPIO_Init+0x11c>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b39      	ldr	r3, [pc, #228]	; (800104c <MX_GPIO_Init+0x11c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a38      	ldr	r2, [pc, #224]	; (800104c <MX_GPIO_Init+0x11c>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b36      	ldr	r3, [pc, #216]	; (800104c <MX_GPIO_Init+0x11c>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	4b32      	ldr	r3, [pc, #200]	; (800104c <MX_GPIO_Init+0x11c>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a31      	ldr	r2, [pc, #196]	; (800104c <MX_GPIO_Init+0x11c>)
 8000f88:	f043 0302 	orr.w	r3, r3, #2
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b2f      	ldr	r3, [pc, #188]	; (800104c <MX_GPIO_Init+0x11c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	4b2b      	ldr	r3, [pc, #172]	; (800104c <MX_GPIO_Init+0x11c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a2a      	ldr	r2, [pc, #168]	; (800104c <MX_GPIO_Init+0x11c>)
 8000fa4:	f043 0308 	orr.w	r3, r3, #8
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b28      	ldr	r3, [pc, #160]	; (800104c <MX_GPIO_Init+0x11c>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0308 	and.w	r3, r3, #8
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_ETHERNET_CS_GPIO_Port, SPI1_ETHERNET_CS_Pin, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2110      	movs	r1, #16
 8000fba:	4825      	ldr	r0, [pc, #148]	; (8001050 <MX_GPIO_Init+0x120>)
 8000fbc:	f002 fb02 	bl	80035c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc6:	4823      	ldr	r0, [pc, #140]	; (8001054 <MX_GPIO_Init+0x124>)
 8000fc8:	f002 fafc 	bl	80035c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETHERNET_RST_GPIO_Port, ETHERNET_RST_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2104      	movs	r1, #4
 8000fd0:	4821      	ldr	r0, [pc, #132]	; (8001058 <MX_GPIO_Init+0x128>)
 8000fd2:	f002 faf7 	bl	80035c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_ETHERNET_CS_Pin;
 8000fd6:	2310      	movs	r3, #16
 8000fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_ETHERNET_CS_GPIO_Port, &GPIO_InitStruct);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	4818      	ldr	r0, [pc, #96]	; (8001050 <MX_GPIO_Init+0x120>)
 8000fee:	f002 f965 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOLD_BACKWARD_INPUT_Pin|INJECTION_FORWARD_INPUT_Pin|RAW_MATERIAL_INPUT_Pin|INJECTION_BACKWARD_INPUT_Pin
 8000ff2:	23ff      	movs	r3, #255	; 0xff
 8000ff4:	617b      	str	r3, [r7, #20]
                          |MOLD_FORWARD_INPUT_Pin|REVIZED_1_INPUT_Pin|REVIZED_2_INPUT_Pin|REVIZED_3_INPUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	4813      	ldr	r0, [pc, #76]	; (8001054 <MX_GPIO_Init+0x124>)
 8001006:	f002 f959 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800100a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	2301      	movs	r3, #1
 8001012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001014:	2301      	movs	r3, #1
 8001016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4619      	mov	r1, r3
 8001022:	480c      	ldr	r0, [pc, #48]	; (8001054 <MX_GPIO_Init+0x124>)
 8001024:	f002 f94a 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ETHERNET_RST_Pin;
 8001028:	2304      	movs	r3, #4
 800102a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102c:	2301      	movs	r3, #1
 800102e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001030:	2301      	movs	r3, #1
 8001032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ETHERNET_RST_GPIO_Port, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	4806      	ldr	r0, [pc, #24]	; (8001058 <MX_GPIO_Init+0x128>)
 8001040:	f002 f93c 	bl	80032bc <HAL_GPIO_Init>

}
 8001044:	bf00      	nop
 8001046:	3728      	adds	r7, #40	; 0x28
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40023800 	.word	0x40023800
 8001050:	40020000 	.word	0x40020000
 8001054:	40020400 	.word	0x40020400
 8001058:	40020c00 	.word	0x40020c00

0800105c <_write>:
/* W5500 Defines End*/

/* Printf Defines */
#if defined(__GNUC__)
int _write(int fd, char * ptr, int len)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	b29a      	uxth	r2, r3
 800106c:	f04f 33ff 	mov.w	r3, #4294967295
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	4804      	ldr	r0, [pc, #16]	; (8001084 <_write+0x28>)
 8001074:	f004 fd3f 	bl	8005af6 <HAL_UART_Transmit>
  return len;
 8001078:	687b      	ldr	r3, [r7, #4]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200034d0 	.word	0x200034d0

08001088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800108c:	f001 ff6e 	bl	8002f6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001090:	f000 f84c 	bl	800112c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001094:	f7ff ff4c 	bl	8000f30 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001098:	f001 fdea 	bl	8002c70 <MX_TIM3_Init>
  MX_RTC_Init();
 800109c:	f001 fb60 	bl	8002760 <MX_RTC_Init>
  MX_SPI1_Init();
 80010a0:	f001 fbe4 	bl	800286c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80010a4:	f001 fec6 	bl	8002e34 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80010a8:	f001 fc16 	bl	80028d8 <MX_SPI2_Init>
  MX_FATFS_Init();
 80010ac:	f005 f898 	bl	80061e0 <MX_FATFS_Init>
  MX_TIM4_Init();
 80010b0:	f001 fe2c 	bl	8002d0c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  sdStatus = SDInit();
 80010b4:	f001 f89e 	bl	80021f4 <SDInit>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b10      	ldr	r3, [pc, #64]	; (8001100 <main+0x78>)
 80010be:	701a      	strb	r2, [r3, #0]
  if (sdStatus == SD_CARD_READY) {
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <main+0x78>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	b25b      	sxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d102      	bne.n	80010d0 <main+0x48>
	  msgLogger("SD_CARD Init is done.");
 80010ca:	480e      	ldr	r0, [pc, #56]	; (8001104 <main+0x7c>)
 80010cc:	f001 fa8c 	bl	80025e8 <msgLogger>
  }
  reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 80010d0:	490d      	ldr	r1, [pc, #52]	; (8001108 <main+0x80>)
 80010d2:	480e      	ldr	r0, [pc, #56]	; (800110c <main+0x84>)
 80010d4:	f00a fae2 	bl	800b69c <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(spi_rb, spi_wb);
 80010d8:	490d      	ldr	r1, [pc, #52]	; (8001110 <main+0x88>)
 80010da:	480e      	ldr	r0, [pc, #56]	; (8001114 <main+0x8c>)
 80010dc:	f00a fb04 	bl	800b6e8 <reg_wizchip_spi_cbfunc>

  prevInputs = GPIOB->IDR;
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <main+0x90>)
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4b0d      	ldr	r3, [pc, #52]	; (800111c <main+0x94>)
 80010e8:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim4);
 80010ea:	480d      	ldr	r0, [pc, #52]	; (8001120 <main+0x98>)
 80010ec:	f004 f8c0 	bl	8005270 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80010f0:	480c      	ldr	r0, [pc, #48]	; (8001124 <main+0x9c>)
 80010f2:	f004 f8bd 	bl	8005270 <HAL_TIM_Base_Start_IT>

  msgLogger("Setup is DONE.");
 80010f6:	480c      	ldr	r0, [pc, #48]	; (8001128 <main+0xa0>)
 80010f8:	f001 fa76 	bl	80025e8 <msgLogger>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <main+0x74>
 80010fe:	bf00      	nop
 8001100:	20000140 	.word	0x20000140
 8001104:	0800f218 	.word	0x0800f218
 8001108:	080026f5 	.word	0x080026f5
 800110c:	080026dd 	.word	0x080026dd
 8001110:	08002731 	.word	0x08002731
 8001114:	0800270d 	.word	0x0800270d
 8001118:	40020400 	.word	0x40020400
 800111c:	20002b01 	.word	0x20002b01
 8001120:	20003488 	.word	0x20003488
 8001124:	20003440 	.word	0x20003440
 8001128:	0800f230 	.word	0x0800f230

0800112c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b094      	sub	sp, #80	; 0x50
 8001130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001132:	f107 0320 	add.w	r3, r7, #32
 8001136:	2230      	movs	r2, #48	; 0x30
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f00c fe5c 	bl	800ddf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <SystemClock_Config+0xb8>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	4a22      	ldr	r2, [pc, #136]	; (80011e4 <SystemClock_Config+0xb8>)
 800115a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115e:	6413      	str	r3, [r2, #64]	; 0x40
 8001160:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <SystemClock_Config+0xb8>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800116c:	2300      	movs	r3, #0
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <SystemClock_Config+0xbc>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001178:	4a1b      	ldr	r2, [pc, #108]	; (80011e8 <SystemClock_Config+0xbc>)
 800117a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <SystemClock_Config+0xbc>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800118c:	2309      	movs	r3, #9
 800118e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001190:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001196:	2301      	movs	r3, #1
 8001198:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800119a:	2300      	movs	r3, #0
 800119c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119e:	f107 0320 	add.w	r3, r7, #32
 80011a2:	4618      	mov	r0, r3
 80011a4:	f002 fa28 	bl	80035f8 <HAL_RCC_OscConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80011ae:	f001 fad1 	bl	8002754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b2:	230f      	movs	r3, #15
 80011b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80011b6:	2301      	movs	r3, #1
 80011b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f002 fc8b 	bl	8003ae8 <HAL_RCC_ClockConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80011d8:	f001 fabc 	bl	8002754 <Error_Handler>
  }
}
 80011dc:	bf00      	nop
 80011de:	3750      	adds	r7, #80	; 0x50
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40007000 	.word	0x40007000

080011ec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011f0:	b08b      	sub	sp, #44	; 0x2c
 80011f2:	af06      	add	r7, sp, #24
 80011f4:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4aa4      	ldr	r2, [pc, #656]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d147      	bne.n	8001290 <HAL_TIM_PeriodElapsedCallback+0xa4>
		if (currentTimer3Status == 0) {
 8001200:	4ba3      	ldr	r3, [pc, #652]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d11b      	bne.n	8001242 <HAL_TIM_PeriodElapsedCallback+0x56>
			product = (struct productVal*)malloc(sizeof(struct productVal));
 800120a:	f240 1069 	movw	r0, #361	; 0x169
 800120e:	f00c fdd5 	bl	800ddbc <malloc>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	4b9f      	ldr	r3, [pc, #636]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001218:	601a      	str	r2, [r3, #0]
			if (product != NULL) {
 800121a:	4b9e      	ldr	r3, [pc, #632]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00b      	beq.n	800123a <HAL_TIM_PeriodElapsedCallback+0x4e>
				fillProduct(product);
 8001222:	4b9c      	ldr	r3, [pc, #624]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f000 fbac 	bl	8001984 <fillProduct>
				currentTimer3Status = 1;
 800122c:	4b98      	ldr	r3, [pc, #608]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800122e:	2201      	movs	r2, #1
 8001230:	701a      	strb	r2, [r3, #0]
				msgLogger("Timer3 status is changed. 0 --> 1");
 8001232:	4899      	ldr	r0, [pc, #612]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001234:	f001 f9d8 	bl	80025e8 <msgLogger>
 8001238:	e02a      	b.n	8001290 <HAL_TIM_PeriodElapsedCallback+0xa4>
			}
			else
				currentTimer3Status = 0;
 800123a:	4b95      	ldr	r3, [pc, #596]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
 8001240:	e026      	b.n	8001290 <HAL_TIM_PeriodElapsedCallback+0xa4>
		}
		else if (currentTimer3Status == 1) {
 8001242:	4b93      	ldr	r3, [pc, #588]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b01      	cmp	r3, #1
 800124a:	d10e      	bne.n	800126a <HAL_TIM_PeriodElapsedCallback+0x7e>
			checkInputs();
 800124c:	f000 f962 	bl	8001514 <checkInputs>
			int productStatus = checkProduct();
 8001250:	f000 f982 	bl	8001558 <checkProduct>
 8001254:	60f8      	str	r0, [r7, #12]
			if (productStatus) {
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d019      	beq.n	8001290 <HAL_TIM_PeriodElapsedCallback+0xa4>
				currentTimer3Status = 2;
 800125c:	4b8c      	ldr	r3, [pc, #560]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800125e:	2202      	movs	r2, #2
 8001260:	701a      	strb	r2, [r3, #0]
				msgLogger("Timer3 status is changed. 1 --> 2");
 8001262:	488e      	ldr	r0, [pc, #568]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001264:	f001 f9c0 	bl	80025e8 <msgLogger>
 8001268:	e012      	b.n	8001290 <HAL_TIM_PeriodElapsedCallback+0xa4>
			}
		}
		else if (currentTimer3Status == 2) {
 800126a:	4b89      	ldr	r3, [pc, #548]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d10d      	bne.n	8001290 <HAL_TIM_PeriodElapsedCallback+0xa4>
			free(product);
 8001274:	4b87      	ldr	r3, [pc, #540]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f00c fda7 	bl	800ddcc <free>
			IsProductDone = true;
 800127e:	4b88      	ldr	r3, [pc, #544]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001280:	2201      	movs	r2, #1
 8001282:	701a      	strb	r2, [r3, #0]
			currentTimer3Status = 0;
 8001284:	4b82      	ldr	r3, [pc, #520]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
			msgLogger("Timer3 status is changed. 2 --> 0");
 800128a:	4886      	ldr	r0, [pc, #536]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800128c:	f001 f9ac 	bl	80025e8 <msgLogger>
		}
	}
	if (htim->Instance == TIM4) {
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a84      	ldr	r2, [pc, #528]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001296:	4293      	cmp	r3, r2
 8001298:	f040 80f2 	bne.w	8001480 <HAL_TIM_PeriodElapsedCallback+0x294>
		timer4Counter++;
 800129c:	4b83      	ldr	r3, [pc, #524]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	f112 0801 	adds.w	r8, r2, #1
 80012a6:	f143 0900 	adc.w	r9, r3, #0
 80012aa:	4b80      	ldr	r3, [pc, #512]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80012ac:	e9c3 8900 	strd	r8, r9, [r3]
		if (currentTimer4Status == 0) {
 80012b0:	4b7f      	ldr	r3, [pc, #508]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10b      	bne.n	80012d2 <HAL_TIM_PeriodElapsedCallback+0xe6>
			ETH_PWR_RESET;
 80012ba:	2200      	movs	r2, #0
 80012bc:	2104      	movs	r1, #4
 80012be:	487d      	ldr	r0, [pc, #500]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80012c0:	f002 f980 	bl	80035c4 <HAL_GPIO_WritePin>
			currentTimer4Status = 1;
 80012c4:	4b7a      	ldr	r3, [pc, #488]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
			msgLogger("Timer4 status is changed. 0 --> 1");
 80012ca:	487b      	ldr	r0, [pc, #492]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80012cc:	f001 f98c 	bl	80025e8 <msgLogger>
				currentTimer4Status = 6;
				msgLogger("Timer4 status is changed. 7 --> 6");
			}
		}
	}
}
 80012d0:	e0d6      	b.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x294>
		else if (currentTimer4Status == 1) {
 80012d2:	4b77      	ldr	r3, [pc, #476]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d10b      	bne.n	80012f4 <HAL_TIM_PeriodElapsedCallback+0x108>
			ETH_PWR_SET;
 80012dc:	2201      	movs	r2, #1
 80012de:	2104      	movs	r1, #4
 80012e0:	4874      	ldr	r0, [pc, #464]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80012e2:	f002 f96f 	bl	80035c4 <HAL_GPIO_WritePin>
			currentTimer4Status = 2;
 80012e6:	4b72      	ldr	r3, [pc, #456]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80012e8:	2202      	movs	r2, #2
 80012ea:	701a      	strb	r2, [r3, #0]
			msgLogger("Timer4 status is changed. 1 --> 2");
 80012ec:	4873      	ldr	r0, [pc, #460]	; (80014bc <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80012ee:	f001 f97b 	bl	80025e8 <msgLogger>
}
 80012f2:	e0c5      	b.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x294>
		else if (currentTimer4Status == 2) {
 80012f4:	4b6e      	ldr	r3, [pc, #440]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d11f      	bne.n	800133e <HAL_TIM_PeriodElapsedCallback+0x152>
			if (w5500Init(w5500opt) == 0) {
 80012fe:	4e70      	ldr	r6, [pc, #448]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001300:	466d      	mov	r5, sp
 8001302:	f106 0410 	add.w	r4, r6, #16
 8001306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800130a:	6823      	ldr	r3, [r4, #0]
 800130c:	602b      	str	r3, [r5, #0]
 800130e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001312:	f001 f82d 	bl	8002370 <w5500Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d109      	bne.n	8001330 <HAL_TIM_PeriodElapsedCallback+0x144>
				msgLogger("W5500 init OK.");
 800131c:	4869      	ldr	r0, [pc, #420]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800131e:	f001 f963 	bl	80025e8 <msgLogger>
				currentTimer4Status = 3;
 8001322:	4b63      	ldr	r3, [pc, #396]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001324:	2203      	movs	r2, #3
 8001326:	701a      	strb	r2, [r3, #0]
				msgLogger("Timer4 status is changed. 2 --> 3");
 8001328:	4867      	ldr	r0, [pc, #412]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800132a:	f001 f95d 	bl	80025e8 <msgLogger>
}
 800132e:	e0a7      	b.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x294>
				currentTimer4Status = 0;
 8001330:	4b5f      	ldr	r3, [pc, #380]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001332:	2200      	movs	r2, #0
 8001334:	701a      	strb	r2, [r3, #0]
				msgLogger("W5500 Init Error. Timer4 status is changed. 2 --> 0");
 8001336:	4865      	ldr	r0, [pc, #404]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001338:	f001 f956 	bl	80025e8 <msgLogger>
}
 800133c:	e0a0      	b.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x294>
		else if (currentTimer4Status == 3) {
 800133e:	4b5c      	ldr	r3, [pc, #368]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b03      	cmp	r3, #3
 8001346:	d106      	bne.n	8001356 <HAL_TIM_PeriodElapsedCallback+0x16a>
			currentTimer4Status = 4;
 8001348:	4b59      	ldr	r3, [pc, #356]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800134a:	2204      	movs	r2, #4
 800134c:	701a      	strb	r2, [r3, #0]
			msgLogger("Timer4 status is changed. 3 --> 4");
 800134e:	4860      	ldr	r0, [pc, #384]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001350:	f001 f94a 	bl	80025e8 <msgLogger>
}
 8001354:	e094      	b.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x294>
		else if (currentTimer4Status == 4) {
 8001356:	4b56      	ldr	r3, [pc, #344]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b04      	cmp	r3, #4
 800135e:	d106      	bne.n	800136e <HAL_TIM_PeriodElapsedCallback+0x182>
			currentTimer4Status = 5;
 8001360:	4b53      	ldr	r3, [pc, #332]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001362:	2205      	movs	r2, #5
 8001364:	701a      	strb	r2, [r3, #0]
			msgLogger("Timer4 status is changed. 4 --> 5");
 8001366:	485b      	ldr	r0, [pc, #364]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001368:	f001 f93e 	bl	80025e8 <msgLogger>
}
 800136c:	e088      	b.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x294>
		else if (currentTimer4Status == 5) {
 800136e:	4b50      	ldr	r3, [pc, #320]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b05      	cmp	r3, #5
 8001376:	d148      	bne.n	800140a <HAL_TIM_PeriodElapsedCallback+0x21e>
			if (rtcStatus == SET_RTC_NOK) {
 8001378:	4b57      	ldr	r3, [pc, #348]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800137a:	f993 3000 	ldrsb.w	r3, [r3]
 800137e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001382:	d17d      	bne.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x294>
				if (timer4Counter % 2 == 0) {    //to make 2 seconds delay
 8001384:	4b49      	ldr	r3, [pc, #292]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138a:	f002 0401 	and.w	r4, r2, #1
 800138e:	2500      	movs	r5, #0
 8001390:	ea54 0305 	orrs.w	r3, r4, r5
 8001394:	d174      	bne.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x294>
					SNTP_init(ntpSocket, ntp_server, timeZone, ethBuf);
 8001396:	4b51      	ldr	r3, [pc, #324]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001398:	7818      	ldrb	r0, [r3, #0]
 800139a:	4b51      	ldr	r3, [pc, #324]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800139c:	781a      	ldrb	r2, [r3, #0]
 800139e:	4b51      	ldr	r3, [pc, #324]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80013a0:	4951      	ldr	r1, [pc, #324]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80013a2:	f00c f983 	bl	800d6ac <SNTP_init>
					if (SET_RTC_OK == setRTCTime()) {
 80013a6:	f000 fc93 	bl	8001cd0 <setRTCTime>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d113      	bne.n	80013d8 <HAL_TIM_PeriodElapsedCallback+0x1ec>
						rtcStatus = SET_RTC_OK;
 80013b0:	4b49      	ldr	r3, [pc, #292]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	701a      	strb	r2, [r3, #0]
						printf("Time is succesfully set to = %s\r\n", getRTCTime());
 80013b6:	f000 fd93 	bl	8001ee0 <getRTCTime>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4619      	mov	r1, r3
 80013be:	484b      	ldr	r0, [pc, #300]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x300>)
 80013c0:	f00c fe02 	bl	800dfc8 <iprintf>
						currentTimer4Status = 6;
 80013c4:	4b3a      	ldr	r3, [pc, #232]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80013c6:	2206      	movs	r2, #6
 80013c8:	701a      	strb	r2, [r3, #0]
						msgLogger("Timer4 status is changed. 5 --> 6");
 80013ca:	4849      	ldr	r0, [pc, #292]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80013cc:	f001 f90c 	bl	80025e8 <msgLogger>
						counter = 0;
 80013d0:	4b48      	ldr	r3, [pc, #288]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
}
 80013d6:	e053      	b.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x294>
						msgLogger("setRTCTime Error");
 80013d8:	4847      	ldr	r0, [pc, #284]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80013da:	f001 f905 	bl	80025e8 <msgLogger>
						counter++;
 80013de:	4b45      	ldr	r3, [pc, #276]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	3301      	adds	r3, #1
 80013e4:	4a43      	ldr	r2, [pc, #268]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80013e6:	6013      	str	r3, [r2, #0]
						if (counter > 10) {
 80013e8:	4b42      	ldr	r3, [pc, #264]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b0a      	cmp	r3, #10
 80013ee:	dd47      	ble.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x294>
							msgLogger("setRTCTime Error happaned too many times.");
 80013f0:	4842      	ldr	r0, [pc, #264]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x310>)
 80013f2:	f001 f8f9 	bl	80025e8 <msgLogger>
							counter = 0;
 80013f6:	4b3f      	ldr	r3, [pc, #252]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
							currentTimer4Status = 0;
 80013fc:	4b2c      	ldr	r3, [pc, #176]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
							msgLogger("Timer4 status is changed. 5 --> 0");
 8001402:	483f      	ldr	r0, [pc, #252]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001404:	f001 f8f0 	bl	80025e8 <msgLogger>
}
 8001408:	e03a      	b.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x294>
		else if (currentTimer4Status == 6) {
 800140a:	4b29      	ldr	r3, [pc, #164]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b06      	cmp	r3, #6
 8001412:	d10b      	bne.n	800142c <HAL_TIM_PeriodElapsedCallback+0x240>
			if (IsProductDone) {
 8001414:	4b22      	ldr	r3, [pc, #136]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d030      	beq.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x294>
				currentTimer4Status = 7;
 800141e:	4b24      	ldr	r3, [pc, #144]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001420:	2207      	movs	r2, #7
 8001422:	701a      	strb	r2, [r3, #0]
				msgLogger("Timer4 status is changed. 6 --> 7");
 8001424:	4837      	ldr	r0, [pc, #220]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001426:	f001 f8df 	bl	80025e8 <msgLogger>
}
 800142a:	e029      	b.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x294>
		else if (currentTimer4Status == 7) {
 800142c:	4b20      	ldr	r3, [pc, #128]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b07      	cmp	r3, #7
 8001434:	d124      	bne.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x294>
			if (sdStatus == SD_CARD_READY) {
 8001436:	4b34      	ldr	r3, [pc, #208]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	b25b      	sxtb	r3, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	d111      	bne.n	8001464 <HAL_TIM_PeriodElapsedCallback+0x278>
				if (checkSDStore()) {
 8001440:	f000 ff1c 	bl	800227c <checkSDStore>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d006      	beq.n	8001458 <HAL_TIM_PeriodElapsedCallback+0x26c>
					currentTimer4Status = 6;
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800144c:	2206      	movs	r2, #6
 800144e:	701a      	strb	r2, [r3, #0]
					msgLogger("Timer4 status is changed. 7 --> 6");
 8001450:	482e      	ldr	r0, [pc, #184]	; (800150c <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001452:	f001 f8c9 	bl	80025e8 <msgLogger>
 8001456:	e005      	b.n	8001464 <HAL_TIM_PeriodElapsedCallback+0x278>
					currentTimer4Status = 0;
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
					msgLogger("Timer4 status is changed. 7 --> 0");
 800145e:	482c      	ldr	r0, [pc, #176]	; (8001510 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001460:	f001 f8c2 	bl	80025e8 <msgLogger>
			if (!IsProductDone) {
 8001464:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	f083 0301 	eor.w	r3, r3, #1
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d005      	beq.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x294>
				currentTimer4Status = 6;
 8001474:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001476:	2206      	movs	r2, #6
 8001478:	701a      	strb	r2, [r3, #0]
				msgLogger("Timer4 status is changed. 7 --> 6");
 800147a:	4824      	ldr	r0, [pc, #144]	; (800150c <HAL_TIM_PeriodElapsedCallback+0x320>)
 800147c:	f001 f8b4 	bl	80025e8 <msgLogger>
}
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800148a:	bf00      	nop
 800148c:	40000400 	.word	0x40000400
 8001490:	20002b03 	.word	0x20002b03
 8001494:	20000134 	.word	0x20000134
 8001498:	0800f240 	.word	0x0800f240
 800149c:	0800f264 	.word	0x0800f264
 80014a0:	20000050 	.word	0x20000050
 80014a4:	0800f288 	.word	0x0800f288
 80014a8:	40000800 	.word	0x40000800
 80014ac:	20000138 	.word	0x20000138
 80014b0:	20002b04 	.word	0x20002b04
 80014b4:	40020c00 	.word	0x40020c00
 80014b8:	0800f2ac 	.word	0x0800f2ac
 80014bc:	0800f2d0 	.word	0x0800f2d0
 80014c0:	20000004 	.word	0x20000004
 80014c4:	0800f2f4 	.word	0x0800f2f4
 80014c8:	0800f304 	.word	0x0800f304
 80014cc:	0800f328 	.word	0x0800f328
 80014d0:	0800f35c 	.word	0x0800f35c
 80014d4:	0800f380 	.word	0x0800f380
 80014d8:	20000001 	.word	0x20000001
 80014dc:	20002b05 	.word	0x20002b05
 80014e0:	20000058 	.word	0x20000058
 80014e4:	20002b08 	.word	0x20002b08
 80014e8:	20000054 	.word	0x20000054
 80014ec:	0800f3a4 	.word	0x0800f3a4
 80014f0:	0800f3c8 	.word	0x0800f3c8
 80014f4:	20003308 	.word	0x20003308
 80014f8:	0800f3ec 	.word	0x0800f3ec
 80014fc:	0800f400 	.word	0x0800f400
 8001500:	0800f42c 	.word	0x0800f42c
 8001504:	0800f450 	.word	0x0800f450
 8001508:	20000140 	.word	0x20000140
 800150c:	0800f474 	.word	0x0800f474
 8001510:	0800f498 	.word	0x0800f498

08001514 <checkInputs>:

void checkInputs(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	currentInputs = GPIOB->IDR;
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <checkInputs+0x38>)
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <checkInputs+0x3c>)
 8001520:	701a      	strb	r2, [r3, #0]
	if (prevInputs != currentInputs) {
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <checkInputs+0x40>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <checkInputs+0x3c>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	429a      	cmp	r2, r3
 8001530:	d00a      	beq.n	8001548 <checkInputs+0x34>
		inputStatusLogger(currentInputs);
 8001532:	4b07      	ldr	r3, [pc, #28]	; (8001550 <checkInputs+0x3c>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4618      	mov	r0, r3
 800153a:	f001 f86d 	bl	8002618 <inputStatusLogger>
		prevInputs = currentInputs;
 800153e:	4b04      	ldr	r3, [pc, #16]	; (8001550 <checkInputs+0x3c>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b2da      	uxtb	r2, r3
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <checkInputs+0x40>)
 8001546:	701a      	strb	r2, [r3, #0]
	}
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40020400 	.word	0x40020400
 8001550:	20002b00 	.word	0x20002b00
 8001554:	20002b01 	.word	0x20002b01

08001558 <checkProduct>:

int checkProduct(void)
{
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
	switch(currentProductStatus) {
 800155e:	4bb3      	ldr	r3, [pc, #716]	; (800182c <checkProduct+0x2d4>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b07      	cmp	r3, #7
 8001566:	f200 81fc 	bhi.w	8001962 <checkProduct+0x40a>
 800156a:	a201      	add	r2, pc, #4	; (adr r2, 8001570 <checkProduct+0x18>)
 800156c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001570:	08001591 	.word	0x08001591
 8001574:	080015c5 	.word	0x080015c5
 8001578:	08001633 	.word	0x08001633
 800157c:	080016a3 	.word	0x080016a3
 8001580:	08001713 	.word	0x08001713
 8001584:	08001789 	.word	0x08001789
 8001588:	080017f9 	.word	0x080017f9
 800158c:	0800189d 	.word	0x0800189d
	case 0:
		if (((currentInputs & bit(MOULD_BACKWARD)) == bit(MOULD_BACKWARD)) == true) {
 8001590:	4ba7      	ldr	r3, [pc, #668]	; (8001830 <checkProduct+0x2d8>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b01      	cmp	r3, #1
 800159c:	f040 81d2 	bne.w	8001944 <checkProduct+0x3ec>
			strcpy(product->mouldBackward.inputHighDate, getRTCTime());
 80015a0:	4ba4      	ldr	r3, [pc, #656]	; (8001834 <checkProduct+0x2dc>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f103 0429 	add.w	r4, r3, #41	; 0x29
 80015a8:	f000 fc9a 	bl	8001ee0 <getRTCTime>
 80015ac:	4603      	mov	r3, r0
 80015ae:	4619      	mov	r1, r3
 80015b0:	4620      	mov	r0, r4
 80015b2:	f00c fdc7 	bl	800e144 <strcpy>
			currentProductStatus = 1;
 80015b6:	4b9d      	ldr	r3, [pc, #628]	; (800182c <checkProduct+0x2d4>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	701a      	strb	r2, [r3, #0]
			msgLogger("Current product status is changed. 0 --> 1");
 80015bc:	489e      	ldr	r0, [pc, #632]	; (8001838 <checkProduct+0x2e0>)
 80015be:	f001 f813 	bl	80025e8 <msgLogger>
		}
		break;
 80015c2:	e1bf      	b.n	8001944 <checkProduct+0x3ec>
	case 1:
		if (((currentInputs & bit(MOULD_BACKWARD)) == bit(MOULD_BACKWARD)) == false) {
 80015c4:	4b9a      	ldr	r3, [pc, #616]	; (8001830 <checkProduct+0x2d8>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d010      	beq.n	80015f4 <checkProduct+0x9c>
			strcpy(product->mouldBackward.inputLowDate, getRTCTime());
 80015d2:	4b98      	ldr	r3, [pc, #608]	; (8001834 <checkProduct+0x2dc>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	1c5c      	adds	r4, r3, #1
 80015d8:	f000 fc82 	bl	8001ee0 <getRTCTime>
 80015dc:	4603      	mov	r3, r0
 80015de:	4619      	mov	r1, r3
 80015e0:	4620      	mov	r0, r4
 80015e2:	f00c fdaf 	bl	800e144 <strcpy>
			currentProductStatus = 2;
 80015e6:	4b91      	ldr	r3, [pc, #580]	; (800182c <checkProduct+0x2d4>)
 80015e8:	2202      	movs	r2, #2
 80015ea:	701a      	strb	r2, [r3, #0]
			msgLogger("Current product status is changed. 1 --> 2");
 80015ec:	4893      	ldr	r0, [pc, #588]	; (800183c <checkProduct+0x2e4>)
 80015ee:	f000 fffb 	bl	80025e8 <msgLogger>
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
				product->pInfo = PRODUCT_ERROR;
				return 1;
			}
		}
		break;
 80015f2:	e1a9      	b.n	8001948 <checkProduct+0x3f0>
			if (((currentInputs & bit(MOULD_FORWARD)) == bit(MOULD_FORWARD)) == true) {
 80015f4:	4b8e      	ldr	r3, [pc, #568]	; (8001830 <checkProduct+0x2d8>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	f003 0310 	and.w	r3, r3, #16
 80015fe:	2b10      	cmp	r3, #16
 8001600:	f040 81a2 	bne.w	8001948 <checkProduct+0x3f0>
				strcpy(product->productEndDate, getDataTime());
 8001604:	4b8b      	ldr	r3, [pc, #556]	; (8001834 <checkProduct+0x2dc>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f203 1441 	addw	r4, r3, #321	; 0x141
 800160c:	f000 fd26 	bl	800205c <getDataTime>
 8001610:	4603      	mov	r3, r0
 8001612:	4619      	mov	r1, r3
 8001614:	4620      	mov	r0, r4
 8001616:	f00c fd95 	bl	800e144 <strcpy>
				currentProductStatus = 0;
 800161a:	4b84      	ldr	r3, [pc, #528]	; (800182c <checkProduct+0x2d4>)
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
 8001620:	4887      	ldr	r0, [pc, #540]	; (8001840 <checkProduct+0x2e8>)
 8001622:	f000 ffe1 	bl	80025e8 <msgLogger>
				product->pInfo = PRODUCT_ERROR;
 8001626:	4b83      	ldr	r3, [pc, #524]	; (8001834 <checkProduct+0x2dc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2200      	movs	r2, #0
 800162c:	701a      	strb	r2, [r3, #0]
				return 1;
 800162e:	2301      	movs	r3, #1
 8001630:	e198      	b.n	8001964 <checkProduct+0x40c>
	case 2:
		if (((currentInputs & bit(INJECTION_FORWARD)) == bit(INJECTION_FORWARD)) == true) {
 8001632:	4b7f      	ldr	r3, [pc, #508]	; (8001830 <checkProduct+0x2d8>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b02      	cmp	r3, #2
 800163e:	d111      	bne.n	8001664 <checkProduct+0x10c>
			strcpy(product->injectionForward.inputHighDate, getRTCTime());
 8001640:	4b7c      	ldr	r3, [pc, #496]	; (8001834 <checkProduct+0x2dc>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f103 0479 	add.w	r4, r3, #121	; 0x79
 8001648:	f000 fc4a 	bl	8001ee0 <getRTCTime>
 800164c:	4603      	mov	r3, r0
 800164e:	4619      	mov	r1, r3
 8001650:	4620      	mov	r0, r4
 8001652:	f00c fd77 	bl	800e144 <strcpy>
			currentProductStatus = 3;
 8001656:	4b75      	ldr	r3, [pc, #468]	; (800182c <checkProduct+0x2d4>)
 8001658:	2203      	movs	r2, #3
 800165a:	701a      	strb	r2, [r3, #0]
			msgLogger("Current product status is changed. 2 --> 3");
 800165c:	4879      	ldr	r0, [pc, #484]	; (8001844 <checkProduct+0x2ec>)
 800165e:	f000 ffc3 	bl	80025e8 <msgLogger>
				currentProductStatus = 0;
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
				return 2;
			}
		}
		break;
 8001662:	e173      	b.n	800194c <checkProduct+0x3f4>
			if (((currentInputs & bit(MOULD_FORWARD)) == bit(MOULD_FORWARD)) == true) {
 8001664:	4b72      	ldr	r3, [pc, #456]	; (8001830 <checkProduct+0x2d8>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	f003 0310 	and.w	r3, r3, #16
 800166e:	2b10      	cmp	r3, #16
 8001670:	f040 816c 	bne.w	800194c <checkProduct+0x3f4>
				strcpy(product->productEndDate, getDataTime());
 8001674:	4b6f      	ldr	r3, [pc, #444]	; (8001834 <checkProduct+0x2dc>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f203 1441 	addw	r4, r3, #321	; 0x141
 800167c:	f000 fcee 	bl	800205c <getDataTime>
 8001680:	4603      	mov	r3, r0
 8001682:	4619      	mov	r1, r3
 8001684:	4620      	mov	r0, r4
 8001686:	f00c fd5d 	bl	800e144 <strcpy>
				product->pInfo = PRODUCT_ERROR;
 800168a:	4b6a      	ldr	r3, [pc, #424]	; (8001834 <checkProduct+0x2dc>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]
				currentProductStatus = 0;
 8001692:	4b66      	ldr	r3, [pc, #408]	; (800182c <checkProduct+0x2d4>)
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
 8001698:	4869      	ldr	r0, [pc, #420]	; (8001840 <checkProduct+0x2e8>)
 800169a:	f000 ffa5 	bl	80025e8 <msgLogger>
				return 2;
 800169e:	2302      	movs	r3, #2
 80016a0:	e160      	b.n	8001964 <checkProduct+0x40c>
	case 3:
		if (((currentInputs & bit(INJECTION_FORWARD)) == bit(INJECTION_FORWARD)) == false) {
 80016a2:	4b63      	ldr	r3, [pc, #396]	; (8001830 <checkProduct+0x2d8>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d011      	beq.n	80016d4 <checkProduct+0x17c>
			strcpy(product->injectionForward.inputLowDate, getRTCTime());
 80016b0:	4b60      	ldr	r3, [pc, #384]	; (8001834 <checkProduct+0x2dc>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f103 0451 	add.w	r4, r3, #81	; 0x51
 80016b8:	f000 fc12 	bl	8001ee0 <getRTCTime>
 80016bc:	4603      	mov	r3, r0
 80016be:	4619      	mov	r1, r3
 80016c0:	4620      	mov	r0, r4
 80016c2:	f00c fd3f 	bl	800e144 <strcpy>
			currentProductStatus = 4;
 80016c6:	4b59      	ldr	r3, [pc, #356]	; (800182c <checkProduct+0x2d4>)
 80016c8:	2204      	movs	r2, #4
 80016ca:	701a      	strb	r2, [r3, #0]
			msgLogger("Current product status is changed. 3 --> 4");
 80016cc:	485e      	ldr	r0, [pc, #376]	; (8001848 <checkProduct+0x2f0>)
 80016ce:	f000 ff8b 	bl	80025e8 <msgLogger>
				currentProductStatus = 0;
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
				return 3;
			}
		}
		break;
 80016d2:	e13d      	b.n	8001950 <checkProduct+0x3f8>
			if (((currentInputs & bit(MOULD_FORWARD)) == bit(MOULD_FORWARD)) == true) {
 80016d4:	4b56      	ldr	r3, [pc, #344]	; (8001830 <checkProduct+0x2d8>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	f003 0310 	and.w	r3, r3, #16
 80016de:	2b10      	cmp	r3, #16
 80016e0:	f040 8136 	bne.w	8001950 <checkProduct+0x3f8>
				strcpy(product->productEndDate, getDataTime());
 80016e4:	4b53      	ldr	r3, [pc, #332]	; (8001834 <checkProduct+0x2dc>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f203 1441 	addw	r4, r3, #321	; 0x141
 80016ec:	f000 fcb6 	bl	800205c <getDataTime>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4619      	mov	r1, r3
 80016f4:	4620      	mov	r0, r4
 80016f6:	f00c fd25 	bl	800e144 <strcpy>
				product->pInfo = PRODUCT_ERROR;
 80016fa:	4b4e      	ldr	r3, [pc, #312]	; (8001834 <checkProduct+0x2dc>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
				currentProductStatus = 0;
 8001702:	4b4a      	ldr	r3, [pc, #296]	; (800182c <checkProduct+0x2d4>)
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
 8001708:	484d      	ldr	r0, [pc, #308]	; (8001840 <checkProduct+0x2e8>)
 800170a:	f000 ff6d 	bl	80025e8 <msgLogger>
				return 3;
 800170e:	2303      	movs	r3, #3
 8001710:	e128      	b.n	8001964 <checkProduct+0x40c>
	case 4:
		if (((currentInputs & bit(RAW_MATERIAL_PACKING)) == bit(RAW_MATERIAL_PACKING)) == true) {
 8001712:	4b47      	ldr	r3, [pc, #284]	; (8001830 <checkProduct+0x2d8>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b04      	cmp	r3, #4
 800171e:	d114      	bne.n	800174a <checkProduct+0x1f2>
			strcpy(product->rawMaterialPacking.inputHighDate, getRTCTime());
 8001720:	4b44      	ldr	r3, [pc, #272]	; (8001834 <checkProduct+0x2dc>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f103 04c9 	add.w	r4, r3, #201	; 0xc9
 8001728:	f000 fbda 	bl	8001ee0 <getRTCTime>
 800172c:	4603      	mov	r3, r0
 800172e:	4619      	mov	r1, r3
 8001730:	4620      	mov	r0, r4
 8001732:	f00c fd07 	bl	800e144 <strcpy>
			currentProductStatus = 5;
 8001736:	4b3d      	ldr	r3, [pc, #244]	; (800182c <checkProduct+0x2d4>)
 8001738:	2205      	movs	r2, #5
 800173a:	701a      	strb	r2, [r3, #0]
			msgLogger("Current product status is changed. 4 --> 5");
 800173c:	4843      	ldr	r0, [pc, #268]	; (800184c <checkProduct+0x2f4>)
 800173e:	f000 ff53 	bl	80025e8 <msgLogger>
			IsProductDone = false;
 8001742:	4b43      	ldr	r3, [pc, #268]	; (8001850 <checkProduct+0x2f8>)
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
				currentProductStatus = 0;
				msgLogger("Current state is 0. Unexpected behavior happaned.");
				return 4;
			}
		}
		break;
 8001748:	e104      	b.n	8001954 <checkProduct+0x3fc>
			if (((currentInputs & bit(MOULD_FORWARD)) == bit(MOULD_FORWARD)) == true) {
 800174a:	4b39      	ldr	r3, [pc, #228]	; (8001830 <checkProduct+0x2d8>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	f003 0310 	and.w	r3, r3, #16
 8001754:	2b10      	cmp	r3, #16
 8001756:	f040 80fd 	bne.w	8001954 <checkProduct+0x3fc>
				strcpy(product->productEndDate, getDataTime());
 800175a:	4b36      	ldr	r3, [pc, #216]	; (8001834 <checkProduct+0x2dc>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f203 1441 	addw	r4, r3, #321	; 0x141
 8001762:	f000 fc7b 	bl	800205c <getDataTime>
 8001766:	4603      	mov	r3, r0
 8001768:	4619      	mov	r1, r3
 800176a:	4620      	mov	r0, r4
 800176c:	f00c fcea 	bl	800e144 <strcpy>
				product->pInfo = PRODUCT_ERROR;
 8001770:	4b30      	ldr	r3, [pc, #192]	; (8001834 <checkProduct+0x2dc>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
				currentProductStatus = 0;
 8001778:	4b2c      	ldr	r3, [pc, #176]	; (800182c <checkProduct+0x2d4>)
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
				msgLogger("Current state is 0. Unexpected behavior happaned.");
 800177e:	4835      	ldr	r0, [pc, #212]	; (8001854 <checkProduct+0x2fc>)
 8001780:	f000 ff32 	bl	80025e8 <msgLogger>
				return 4;
 8001784:	2304      	movs	r3, #4
 8001786:	e0ed      	b.n	8001964 <checkProduct+0x40c>
	case 5:
		if (((currentInputs & bit(RAW_MATERIAL_PACKING)) == bit(RAW_MATERIAL_PACKING)) == false) {
 8001788:	4b29      	ldr	r3, [pc, #164]	; (8001830 <checkProduct+0x2d8>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	b2db      	uxtb	r3, r3
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	2b04      	cmp	r3, #4
 8001794:	d011      	beq.n	80017ba <checkProduct+0x262>
			strcpy(product->rawMaterialPacking.inputLowDate, getRTCTime());
 8001796:	4b27      	ldr	r3, [pc, #156]	; (8001834 <checkProduct+0x2dc>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f103 04a1 	add.w	r4, r3, #161	; 0xa1
 800179e:	f000 fb9f 	bl	8001ee0 <getRTCTime>
 80017a2:	4603      	mov	r3, r0
 80017a4:	4619      	mov	r1, r3
 80017a6:	4620      	mov	r0, r4
 80017a8:	f00c fccc 	bl	800e144 <strcpy>
			currentProductStatus = 6;
 80017ac:	4b1f      	ldr	r3, [pc, #124]	; (800182c <checkProduct+0x2d4>)
 80017ae:	2206      	movs	r2, #6
 80017b0:	701a      	strb	r2, [r3, #0]
			msgLogger("Current product status is changed. 5 --> 6");
 80017b2:	4829      	ldr	r0, [pc, #164]	; (8001858 <checkProduct+0x300>)
 80017b4:	f000 ff18 	bl	80025e8 <msgLogger>
				currentProductStatus = 0;
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
				return 5;
			}
		}
		break;
 80017b8:	e0ce      	b.n	8001958 <checkProduct+0x400>
			if (((currentInputs & bit(MOULD_FORWARD)) == bit(MOULD_FORWARD)) == true) {
 80017ba:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <checkProduct+0x2d8>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	f003 0310 	and.w	r3, r3, #16
 80017c4:	2b10      	cmp	r3, #16
 80017c6:	f040 80c7 	bne.w	8001958 <checkProduct+0x400>
				strcpy(product->productEndDate, getDataTime());
 80017ca:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <checkProduct+0x2dc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f203 1441 	addw	r4, r3, #321	; 0x141
 80017d2:	f000 fc43 	bl	800205c <getDataTime>
 80017d6:	4603      	mov	r3, r0
 80017d8:	4619      	mov	r1, r3
 80017da:	4620      	mov	r0, r4
 80017dc:	f00c fcb2 	bl	800e144 <strcpy>
				product->pInfo = PRODUCT_ERROR;
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <checkProduct+0x2dc>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
				currentProductStatus = 0;
 80017e8:	4b10      	ldr	r3, [pc, #64]	; (800182c <checkProduct+0x2d4>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
 80017ee:	4814      	ldr	r0, [pc, #80]	; (8001840 <checkProduct+0x2e8>)
 80017f0:	f000 fefa 	bl	80025e8 <msgLogger>
				return 5;
 80017f4:	2305      	movs	r3, #5
 80017f6:	e0b5      	b.n	8001964 <checkProduct+0x40c>
	case 6:
		if (((currentInputs & bit(MOULD_FORWARD)) == bit(MOULD_FORWARD)) == true) {
 80017f8:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <checkProduct+0x2d8>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	f003 0310 	and.w	r3, r3, #16
 8001802:	2b10      	cmp	r3, #16
 8001804:	d12c      	bne.n	8001860 <checkProduct+0x308>
			strcpy(product->mouldForward.inputHighDate, getRTCTime());
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <checkProduct+0x2dc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f203 1419 	addw	r4, r3, #281	; 0x119
 800180e:	f000 fb67 	bl	8001ee0 <getRTCTime>
 8001812:	4603      	mov	r3, r0
 8001814:	4619      	mov	r1, r3
 8001816:	4620      	mov	r0, r4
 8001818:	f00c fc94 	bl	800e144 <strcpy>
			currentProductStatus = 7;
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <checkProduct+0x2d4>)
 800181e:	2207      	movs	r2, #7
 8001820:	701a      	strb	r2, [r3, #0]
			msgLogger("Current product status is changed. 6 --> 7");
 8001822:	480e      	ldr	r0, [pc, #56]	; (800185c <checkProduct+0x304>)
 8001824:	f000 fee0 	bl	80025e8 <msgLogger>
				currentProductStatus = 0;
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
				return 6;
			}
		}
		break;
 8001828:	e098      	b.n	800195c <checkProduct+0x404>
 800182a:	bf00      	nop
 800182c:	20002b02 	.word	0x20002b02
 8001830:	20002b00 	.word	0x20002b00
 8001834:	20000134 	.word	0x20000134
 8001838:	0800f4bc 	.word	0x0800f4bc
 800183c:	0800f4e8 	.word	0x0800f4e8
 8001840:	0800f514 	.word	0x0800f514
 8001844:	0800f550 	.word	0x0800f550
 8001848:	0800f57c 	.word	0x0800f57c
 800184c:	0800f5a8 	.word	0x0800f5a8
 8001850:	20000050 	.word	0x20000050
 8001854:	0800f5d4 	.word	0x0800f5d4
 8001858:	0800f608 	.word	0x0800f608
 800185c:	0800f634 	.word	0x0800f634
			if (((currentInputs & bit(MOULD_BACKWARD)) == bit(MOULD_BACKWARD)) == true) {
 8001860:	4b42      	ldr	r3, [pc, #264]	; (800196c <checkProduct+0x414>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b01      	cmp	r3, #1
 800186c:	d176      	bne.n	800195c <checkProduct+0x404>
				strcpy(product->productEndDate, getDataTime());
 800186e:	4b40      	ldr	r3, [pc, #256]	; (8001970 <checkProduct+0x418>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f203 1441 	addw	r4, r3, #321	; 0x141
 8001876:	f000 fbf1 	bl	800205c <getDataTime>
 800187a:	4603      	mov	r3, r0
 800187c:	4619      	mov	r1, r3
 800187e:	4620      	mov	r0, r4
 8001880:	f00c fc60 	bl	800e144 <strcpy>
				product->pInfo = PRODUCT_ERROR;
 8001884:	4b3a      	ldr	r3, [pc, #232]	; (8001970 <checkProduct+0x418>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
				currentProductStatus = 0;
 800188c:	4b39      	ldr	r3, [pc, #228]	; (8001974 <checkProduct+0x41c>)
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
 8001892:	4839      	ldr	r0, [pc, #228]	; (8001978 <checkProduct+0x420>)
 8001894:	f000 fea8 	bl	80025e8 <msgLogger>
				return 6;
 8001898:	2306      	movs	r3, #6
 800189a:	e063      	b.n	8001964 <checkProduct+0x40c>
	case 7:
		if (((currentInputs & bit(MOULD_FORWARD)) == bit(MOULD_FORWARD)) == false) {
 800189c:	4b33      	ldr	r3, [pc, #204]	; (800196c <checkProduct+0x414>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	f003 0310 	and.w	r3, r3, #16
 80018a6:	2b10      	cmp	r3, #16
 80018a8:	d02e      	beq.n	8001908 <checkProduct+0x3b0>
			strcpy(product->mouldForward.inputLowDate, getRTCTime());
 80018aa:	4b31      	ldr	r3, [pc, #196]	; (8001970 <checkProduct+0x418>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f103 04f1 	add.w	r4, r3, #241	; 0xf1
 80018b2:	f000 fb15 	bl	8001ee0 <getRTCTime>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4619      	mov	r1, r3
 80018ba:	4620      	mov	r0, r4
 80018bc:	f00c fc42 	bl	800e144 <strcpy>
			strcpy(product->productEndDate, getDataTime());
 80018c0:	4b2b      	ldr	r3, [pc, #172]	; (8001970 <checkProduct+0x418>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f203 1441 	addw	r4, r3, #321	; 0x141
 80018c8:	f000 fbc8 	bl	800205c <getDataTime>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4619      	mov	r1, r3
 80018d0:	4620      	mov	r0, r4
 80018d2:	f00c fc37 	bl	800e144 <strcpy>
			product->pInfo = PRODUCT_PRODUCED;
 80018d6:	4b26      	ldr	r3, [pc, #152]	; (8001970 <checkProduct+0x418>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2201      	movs	r2, #1
 80018dc:	701a      	strb	r2, [r3, #0]
			currentProductStatus = 0;
 80018de:	4b25      	ldr	r3, [pc, #148]	; (8001974 <checkProduct+0x41c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
			msgLogger("Product produced succesfully.");
 80018e4:	4825      	ldr	r0, [pc, #148]	; (800197c <checkProduct+0x424>)
 80018e6:	f000 fe7f 	bl	80025e8 <msgLogger>
			int sdResult = writeSDProductInfo(product);
 80018ea:	4b21      	ldr	r3, [pc, #132]	; (8001970 <checkProduct+0x418>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 f898 	bl	8001a24 <writeSDProductInfo>
 80018f4:	4603      	mov	r3, r0
 80018f6:	607b      	str	r3, [r7, #4]
			if (sdResult)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d002      	beq.n	8001904 <checkProduct+0x3ac>
				msgLogger("Data is created on SD CARD.");
 80018fe:	4820      	ldr	r0, [pc, #128]	; (8001980 <checkProduct+0x428>)
 8001900:	f000 fe72 	bl	80025e8 <msgLogger>
			return 8;
 8001904:	2308      	movs	r3, #8
 8001906:	e02d      	b.n	8001964 <checkProduct+0x40c>
		}
		else {
			if (((currentInputs & bit(MOULD_BACKWARD)) == bit(MOULD_BACKWARD)) == true) {
 8001908:	4b18      	ldr	r3, [pc, #96]	; (800196c <checkProduct+0x414>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b01      	cmp	r3, #1
 8001914:	d124      	bne.n	8001960 <checkProduct+0x408>
				strcpy(product->productEndDate, getDataTime());
 8001916:	4b16      	ldr	r3, [pc, #88]	; (8001970 <checkProduct+0x418>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f203 1441 	addw	r4, r3, #321	; 0x141
 800191e:	f000 fb9d 	bl	800205c <getDataTime>
 8001922:	4603      	mov	r3, r0
 8001924:	4619      	mov	r1, r3
 8001926:	4620      	mov	r0, r4
 8001928:	f00c fc0c 	bl	800e144 <strcpy>
				product->pInfo = PRODUCT_ERROR;
 800192c:	4b10      	ldr	r3, [pc, #64]	; (8001970 <checkProduct+0x418>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
				currentProductStatus = 0;
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <checkProduct+0x41c>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
				msgLogger("Current state is 0. Unexpected behavior has been detected.");
 800193a:	480f      	ldr	r0, [pc, #60]	; (8001978 <checkProduct+0x420>)
 800193c:	f000 fe54 	bl	80025e8 <msgLogger>
				return 7;
 8001940:	2307      	movs	r3, #7
 8001942:	e00f      	b.n	8001964 <checkProduct+0x40c>
		break;
 8001944:	bf00      	nop
 8001946:	e00c      	b.n	8001962 <checkProduct+0x40a>
		break;
 8001948:	bf00      	nop
 800194a:	e00a      	b.n	8001962 <checkProduct+0x40a>
		break;
 800194c:	bf00      	nop
 800194e:	e008      	b.n	8001962 <checkProduct+0x40a>
		break;
 8001950:	bf00      	nop
 8001952:	e006      	b.n	8001962 <checkProduct+0x40a>
		break;
 8001954:	bf00      	nop
 8001956:	e004      	b.n	8001962 <checkProduct+0x40a>
		break;
 8001958:	bf00      	nop
 800195a:	e002      	b.n	8001962 <checkProduct+0x40a>
		break;
 800195c:	bf00      	nop
 800195e:	e000      	b.n	8001962 <checkProduct+0x40a>
			}
		}
		break;
 8001960:	bf00      	nop
	}
	return 0;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	bd90      	pop	{r4, r7, pc}
 800196c:	20002b00 	.word	0x20002b00
 8001970:	20000134 	.word	0x20000134
 8001974:	20002b02 	.word	0x20002b02
 8001978:	0800f514 	.word	0x0800f514
 800197c:	0800f660 	.word	0x0800f660
 8001980:	0800f680 	.word	0x0800f680

08001984 <fillProduct>:

void fillProduct(struct productVal *product)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	product->pInfo = PRODUCT_ERROR;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
	strcpy(product->injectionForward.inputHighDate, "null");
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3379      	adds	r3, #121	; 0x79
 8001996:	4a22      	ldr	r2, [pc, #136]	; (8001a20 <fillProduct+0x9c>)
 8001998:	6810      	ldr	r0, [r2, #0]
 800199a:	6018      	str	r0, [r3, #0]
 800199c:	7912      	ldrb	r2, [r2, #4]
 800199e:	711a      	strb	r2, [r3, #4]
	strcpy(product->injectionForward.inputLowDate, "null");
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3351      	adds	r3, #81	; 0x51
 80019a4:	4a1e      	ldr	r2, [pc, #120]	; (8001a20 <fillProduct+0x9c>)
 80019a6:	6810      	ldr	r0, [r2, #0]
 80019a8:	6018      	str	r0, [r3, #0]
 80019aa:	7912      	ldrb	r2, [r2, #4]
 80019ac:	711a      	strb	r2, [r3, #4]
	strcpy(product->mouldBackward.inputHighDate, "null");
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3329      	adds	r3, #41	; 0x29
 80019b2:	4a1b      	ldr	r2, [pc, #108]	; (8001a20 <fillProduct+0x9c>)
 80019b4:	6810      	ldr	r0, [r2, #0]
 80019b6:	6018      	str	r0, [r3, #0]
 80019b8:	7912      	ldrb	r2, [r2, #4]
 80019ba:	711a      	strb	r2, [r3, #4]
	strcpy(product->mouldBackward.inputLowDate, "null");
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3301      	adds	r3, #1
 80019c0:	4a17      	ldr	r2, [pc, #92]	; (8001a20 <fillProduct+0x9c>)
 80019c2:	6810      	ldr	r0, [r2, #0]
 80019c4:	6018      	str	r0, [r3, #0]
 80019c6:	7912      	ldrb	r2, [r2, #4]
 80019c8:	711a      	strb	r2, [r3, #4]
	strcpy(product->mouldForward.inputHighDate, "null");
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f203 1319 	addw	r3, r3, #281	; 0x119
 80019d0:	4a13      	ldr	r2, [pc, #76]	; (8001a20 <fillProduct+0x9c>)
 80019d2:	6810      	ldr	r0, [r2, #0]
 80019d4:	6018      	str	r0, [r3, #0]
 80019d6:	7912      	ldrb	r2, [r2, #4]
 80019d8:	711a      	strb	r2, [r3, #4]
	strcpy(product->mouldForward.inputLowDate, "null");
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	33f1      	adds	r3, #241	; 0xf1
 80019de:	4a10      	ldr	r2, [pc, #64]	; (8001a20 <fillProduct+0x9c>)
 80019e0:	6810      	ldr	r0, [r2, #0]
 80019e2:	6018      	str	r0, [r3, #0]
 80019e4:	7912      	ldrb	r2, [r2, #4]
 80019e6:	711a      	strb	r2, [r3, #4]
	strcpy(product->rawMaterialPacking.inputHighDate, "null");
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	33c9      	adds	r3, #201	; 0xc9
 80019ec:	4a0c      	ldr	r2, [pc, #48]	; (8001a20 <fillProduct+0x9c>)
 80019ee:	6810      	ldr	r0, [r2, #0]
 80019f0:	6018      	str	r0, [r3, #0]
 80019f2:	7912      	ldrb	r2, [r2, #4]
 80019f4:	711a      	strb	r2, [r3, #4]
	strcpy(product->rawMaterialPacking.inputLowDate, "null");
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	33a1      	adds	r3, #161	; 0xa1
 80019fa:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <fillProduct+0x9c>)
 80019fc:	6810      	ldr	r0, [r2, #0]
 80019fe:	6018      	str	r0, [r3, #0]
 8001a00:	7912      	ldrb	r2, [r2, #4]
 8001a02:	711a      	strb	r2, [r3, #4]
	strcpy(product->productEndDate, "null");
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f203 1341 	addw	r3, r3, #321	; 0x141
 8001a0a:	4a05      	ldr	r2, [pc, #20]	; (8001a20 <fillProduct+0x9c>)
 8001a0c:	6810      	ldr	r0, [r2, #0]
 8001a0e:	6018      	str	r0, [r3, #0]
 8001a10:	7912      	ldrb	r2, [r2, #4]
 8001a12:	711a      	strb	r2, [r3, #4]
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	0800f69c 	.word	0x0800f69c

08001a24 <writeSDProductInfo>:

bool writeSDProductInfo(struct productVal *product)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b09a      	sub	sp, #104	; 0x68
 8001a28:	af04      	add	r7, sp, #16
 8001a2a:	6078      	str	r0, [r7, #4]
	char *result = (char*)malloc(4 * (sizeof(int)));
 8001a2c:	2010      	movs	r0, #16
 8001a2e:	f00c f9c5 	bl	800ddbc <malloc>
 8001a32:	4603      	mov	r3, r0
 8001a34:	657b      	str	r3, [r7, #84]	; 0x54
	if (result == NULL) {
 8001a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d104      	bne.n	8001a46 <writeSDProductInfo+0x22>
		printf("[writeSDProductInfo()] Memory Allocation Error!!!");
 8001a3c:	4896      	ldr	r0, [pc, #600]	; (8001c98 <writeSDProductInfo+0x274>)
 8001a3e:	f00c fac3 	bl	800dfc8 <iprintf>
		return false;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e124      	b.n	8001c90 <writeSDProductInfo+0x26c>
	}
	char *mback  = (char*)malloc(150 * (sizeof(char)));
 8001a46:	2096      	movs	r0, #150	; 0x96
 8001a48:	f00c f9b8 	bl	800ddbc <malloc>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	653b      	str	r3, [r7, #80]	; 0x50
	if (mback == NULL) {
 8001a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d107      	bne.n	8001a66 <writeSDProductInfo+0x42>
		printf("[writeSDProductInfo()] Memory Allocation Error!!!");
 8001a56:	4890      	ldr	r0, [pc, #576]	; (8001c98 <writeSDProductInfo+0x274>)
 8001a58:	f00c fab6 	bl	800dfc8 <iprintf>
		free(result);
 8001a5c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001a5e:	f00c f9b5 	bl	800ddcc <free>
		return false;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e114      	b.n	8001c90 <writeSDProductInfo+0x26c>
	}
	char *mforw  = (char*)malloc(150 * (sizeof(char)));
 8001a66:	2096      	movs	r0, #150	; 0x96
 8001a68:	f00c f9a8 	bl	800ddbc <malloc>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (mforw == NULL) {
 8001a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10a      	bne.n	8001a8c <writeSDProductInfo+0x68>
		printf("[writeSDProductInfo()] Memory Allocation Error!!!");
 8001a76:	4888      	ldr	r0, [pc, #544]	; (8001c98 <writeSDProductInfo+0x274>)
 8001a78:	f00c faa6 	bl	800dfc8 <iprintf>
		free(result); free(mback);
 8001a7c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001a7e:	f00c f9a5 	bl	800ddcc <free>
 8001a82:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001a84:	f00c f9a2 	bl	800ddcc <free>
		return false;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	e101      	b.n	8001c90 <writeSDProductInfo+0x26c>
	}
	char *iforw  = (char*)malloc(150 * (sizeof(char)));
 8001a8c:	2096      	movs	r0, #150	; 0x96
 8001a8e:	f00c f995 	bl	800ddbc <malloc>
 8001a92:	4603      	mov	r3, r0
 8001a94:	64bb      	str	r3, [r7, #72]	; 0x48
	if (iforw == NULL) {
 8001a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10d      	bne.n	8001ab8 <writeSDProductInfo+0x94>
		printf("[writeSDProductInfo()] Memory Allocation Error!!!");
 8001a9c:	487e      	ldr	r0, [pc, #504]	; (8001c98 <writeSDProductInfo+0x274>)
 8001a9e:	f00c fa93 	bl	800dfc8 <iprintf>
		free(result); free(mback); free(mforw);
 8001aa2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001aa4:	f00c f992 	bl	800ddcc <free>
 8001aa8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001aaa:	f00c f98f 	bl	800ddcc <free>
 8001aae:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001ab0:	f00c f98c 	bl	800ddcc <free>
		return false;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	e0eb      	b.n	8001c90 <writeSDProductInfo+0x26c>
	}
	char *rmet   = (char*)malloc(150 * (sizeof(char)));
 8001ab8:	2096      	movs	r0, #150	; 0x96
 8001aba:	f00c f97f 	bl	800ddbc <malloc>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	647b      	str	r3, [r7, #68]	; 0x44
	if (rmet == NULL) {
 8001ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d110      	bne.n	8001aea <writeSDProductInfo+0xc6>
		printf("[writeSDProductInfo()] Memory Allocation Error!!!");
 8001ac8:	4873      	ldr	r0, [pc, #460]	; (8001c98 <writeSDProductInfo+0x274>)
 8001aca:	f00c fa7d 	bl	800dfc8 <iprintf>
		free(result); free(mback); free(mforw); free(iforw);
 8001ace:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001ad0:	f00c f97c 	bl	800ddcc <free>
 8001ad4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001ad6:	f00c f979 	bl	800ddcc <free>
 8001ada:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001adc:	f00c f976 	bl	800ddcc <free>
 8001ae0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001ae2:	f00c f973 	bl	800ddcc <free>
		return false;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	e0d2      	b.n	8001c90 <writeSDProductInfo+0x26c>
	}

	if (sdStatus == SD_CARD_READY) {
 8001aea:	4b6c      	ldr	r3, [pc, #432]	; (8001c9c <writeSDProductInfo+0x278>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	b25b      	sxtb	r3, r3
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f040 80bd 	bne.w	8001c70 <writeSDProductInfo+0x24c>
		sdStatus = SD_CARD_BUSY;
 8001af6:	4b69      	ldr	r3, [pc, #420]	; (8001c9c <writeSDProductInfo+0x278>)
 8001af8:	22ff      	movs	r2, #255	; 0xff
 8001afa:	701a      	strb	r2, [r3, #0]
		char fileName[50];
		if (strlen(product->productEndDate) > 5) {
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f203 1341 	addw	r3, r3, #321	; 0x141
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fb6c 	bl	80001e0 <strlen>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b05      	cmp	r3, #5
 8001b0c:	d909      	bls.n	8001b22 <writeSDProductInfo+0xfe>
			sprintf(fileName, "Data/%s.log", product->productEndDate);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f203 1241 	addw	r2, r3, #321	; 0x141
 8001b14:	f107 030c 	add.w	r3, r7, #12
 8001b18:	4961      	ldr	r1, [pc, #388]	; (8001ca0 <writeSDProductInfo+0x27c>)
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f00c faf2 	bl	800e104 <siprintf>
 8001b20:	e008      	b.n	8001b34 <writeSDProductInfo+0x110>
		} else {
			sprintf(fileName, "Data/%s_Err.log", getLogTime());
 8001b22:	f000 fa51 	bl	8001fc8 <getLogTime>
 8001b26:	4602      	mov	r2, r0
 8001b28:	f107 030c 	add.w	r3, r7, #12
 8001b2c:	495d      	ldr	r1, [pc, #372]	; (8001ca4 <writeSDProductInfo+0x280>)
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f00c fae8 	bl	800e104 <siprintf>
		}
		fresult = f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_WRITE);
 8001b34:	f107 030c 	add.w	r3, r7, #12
 8001b38:	2212      	movs	r2, #18
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	485a      	ldr	r0, [pc, #360]	; (8001ca8 <writeSDProductInfo+0x284>)
 8001b3e:	f007 f8b3 	bl	8008ca8 <f_open>
 8001b42:	4603      	mov	r3, r0
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b59      	ldr	r3, [pc, #356]	; (8001cac <writeSDProductInfo+0x288>)
 8001b48:	701a      	strb	r2, [r3, #0]
		if (fresult == FR_OK) {
 8001b4a:	4b58      	ldr	r3, [pc, #352]	; (8001cac <writeSDProductInfo+0x288>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d177      	bne.n	8001c42 <writeSDProductInfo+0x21e>
			sprintf(result, "\"result\": %d", product->pInfo);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	4955      	ldr	r1, [pc, #340]	; (8001cb0 <writeSDProductInfo+0x28c>)
 8001b5a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001b5c:	f00c fad2 	bl	800e104 <siprintf>
			sprintf(mback, ", \"mback\": { \"inputHighDate\": \"%s\", \"inputLowDate\": \"%s\" }", product->mouldBackward.inputHighDate, product->mouldBackward.inputLowDate);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	4952      	ldr	r1, [pc, #328]	; (8001cb4 <writeSDProductInfo+0x290>)
 8001b6c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001b6e:	f00c fac9 	bl	800e104 <siprintf>
			sprintf(mforw, ", \"mforw\": { \"inputHighDate\": \"%s\", \"inputLowDate\": \"%s\" }", product->mouldForward.inputHighDate, product->mouldForward.inputLowDate);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f203 1219 	addw	r2, r3, #281	; 0x119
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	33f1      	adds	r3, #241	; 0xf1
 8001b7c:	494e      	ldr	r1, [pc, #312]	; (8001cb8 <writeSDProductInfo+0x294>)
 8001b7e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001b80:	f00c fac0 	bl	800e104 <siprintf>
			sprintf(iforw, ", \"iforw\": { \"inputHighDate\": \"%s\", \"inputLowDate\": \"%s\" }", product->injectionForward.inputHighDate, product->injectionForward.inputLowDate);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f103 0279 	add.w	r2, r3, #121	; 0x79
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3351      	adds	r3, #81	; 0x51
 8001b8e:	494b      	ldr	r1, [pc, #300]	; (8001cbc <writeSDProductInfo+0x298>)
 8001b90:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001b92:	f00c fab7 	bl	800e104 <siprintf>
			sprintf(rmet, ", \"rmet\": { \"inputHighDate\": \"%s\", \"inputLowDate\": \"%s\" }", product->rawMaterialPacking.inputHighDate, product->rawMaterialPacking.inputLowDate);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f103 02c9 	add.w	r2, r3, #201	; 0xc9
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	33a1      	adds	r3, #161	; 0xa1
 8001ba0:	4947      	ldr	r1, [pc, #284]	; (8001cc0 <writeSDProductInfo+0x29c>)
 8001ba2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001ba4:	f00c faae 	bl	800e104 <siprintf>
			char* data = (char*)malloc(150 * 5 * (sizeof(char)));
 8001ba8:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001bac:	f00c f906 	bl	800ddbc <malloc>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	643b      	str	r3, [r7, #64]	; 0x40
			if (data != NULL) {
 8001bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d029      	beq.n	8001c0e <writeSDProductInfo+0x1ea>
				sprintf(data, "{%s%s%s%s%s}", result, mback, mforw, iforw, rmet);
 8001bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bbc:	9302      	str	r3, [sp, #8]
 8001bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bc0:	9301      	str	r3, [sp, #4]
 8001bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001bca:	493e      	ldr	r1, [pc, #248]	; (8001cc4 <writeSDProductInfo+0x2a0>)
 8001bcc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001bce:	f00c fa99 	bl	800e104 <siprintf>
				f_puts(data, &fil);
 8001bd2:	4935      	ldr	r1, [pc, #212]	; (8001ca8 <writeSDProductInfo+0x284>)
 8001bd4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001bd6:	f008 f935 	bl	8009e44 <f_puts>
				free(result); free(mback); free(mforw); free(iforw); free(rmet);
 8001bda:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001bdc:	f00c f8f6 	bl	800ddcc <free>
 8001be0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001be2:	f00c f8f3 	bl	800ddcc <free>
 8001be6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001be8:	f00c f8f0 	bl	800ddcc <free>
 8001bec:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001bee:	f00c f8ed 	bl	800ddcc <free>
 8001bf2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001bf4:	f00c f8ea 	bl	800ddcc <free>
				free(data);
 8001bf8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001bfa:	f00c f8e7 	bl	800ddcc <free>
				f_close(&fil);
 8001bfe:	482a      	ldr	r0, [pc, #168]	; (8001ca8 <writeSDProductInfo+0x284>)
 8001c00:	f007 fd8f 	bl	8009722 <f_close>
				sdStatus = SD_CARD_READY;
 8001c04:	4b25      	ldr	r3, [pc, #148]	; (8001c9c <writeSDProductInfo+0x278>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]
				return true;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e040      	b.n	8001c90 <writeSDProductInfo+0x26c>
			}
			else {
				free(result); free(mback); free(mforw); free(iforw); free(rmet);
 8001c0e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001c10:	f00c f8dc 	bl	800ddcc <free>
 8001c14:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001c16:	f00c f8d9 	bl	800ddcc <free>
 8001c1a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001c1c:	f00c f8d6 	bl	800ddcc <free>
 8001c20:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001c22:	f00c f8d3 	bl	800ddcc <free>
 8001c26:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001c28:	f00c f8d0 	bl	800ddcc <free>
				printf("[writeSDProductInfo()] Memory Allocation Error. \r\n");
 8001c2c:	4826      	ldr	r0, [pc, #152]	; (8001cc8 <writeSDProductInfo+0x2a4>)
 8001c2e:	f00c fa51 	bl	800e0d4 <puts>
				f_close(&fil);
 8001c32:	481d      	ldr	r0, [pc, #116]	; (8001ca8 <writeSDProductInfo+0x284>)
 8001c34:	f007 fd75 	bl	8009722 <f_close>
				sdStatus = SD_CARD_READY;
 8001c38:	4b18      	ldr	r3, [pc, #96]	; (8001c9c <writeSDProductInfo+0x278>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
				return false;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e026      	b.n	8001c90 <writeSDProductInfo+0x26c>
			}
		}
		else {
			free(result); free(mback); free(mforw); free(iforw); free(rmet);
 8001c42:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001c44:	f00c f8c2 	bl	800ddcc <free>
 8001c48:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001c4a:	f00c f8bf 	bl	800ddcc <free>
 8001c4e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001c50:	f00c f8bc 	bl	800ddcc <free>
 8001c54:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001c56:	f00c f8b9 	bl	800ddcc <free>
 8001c5a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001c5c:	f00c f8b6 	bl	800ddcc <free>
			printf("[writeSDProductInfo()] Error happaned while opening file.\r\n");
 8001c60:	481a      	ldr	r0, [pc, #104]	; (8001ccc <writeSDProductInfo+0x2a8>)
 8001c62:	f00c fa37 	bl	800e0d4 <puts>
			sdStatus = SD_CARD_READY;
 8001c66:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <writeSDProductInfo+0x278>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
			return false;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	e00f      	b.n	8001c90 <writeSDProductInfo+0x26c>
		}
	}
	else {
		free(result); free(mback); free(mforw); free(iforw); free(rmet);
 8001c70:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001c72:	f00c f8ab 	bl	800ddcc <free>
 8001c76:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001c78:	f00c f8a8 	bl	800ddcc <free>
 8001c7c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001c7e:	f00c f8a5 	bl	800ddcc <free>
 8001c82:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001c84:	f00c f8a2 	bl	800ddcc <free>
 8001c88:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001c8a:	f00c f89f 	bl	800ddcc <free>
		return false;
 8001c8e:	2300      	movs	r3, #0
	}

	return false;
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3758      	adds	r7, #88	; 0x58
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	0800f6a4 	.word	0x0800f6a4
 8001c9c:	20000140 	.word	0x20000140
 8001ca0:	0800f6d8 	.word	0x0800f6d8
 8001ca4:	0800f6e4 	.word	0x0800f6e4
 8001ca8:	2000117c 	.word	0x2000117c
 8001cac:	200021ac 	.word	0x200021ac
 8001cb0:	0800f6f4 	.word	0x0800f6f4
 8001cb4:	0800f704 	.word	0x0800f704
 8001cb8:	0800f740 	.word	0x0800f740
 8001cbc:	0800f77c 	.word	0x0800f77c
 8001cc0:	0800f7b8 	.word	0x0800f7b8
 8001cc4:	0800f7f4 	.word	0x0800f7f4
 8001cc8:	0800f804 	.word	0x0800f804
 8001ccc:	0800f838 	.word	0x0800f838

08001cd0 <setRTCTime>:

RTC_StatusTypeDef setRTCTime()  //timeBuf is gonna have ["day" = 0, "month" = 1, "year" = 2, "hour" = 3, "min" = 4, "second" = 5]
{
 8001cd0:	b590      	push	{r4, r7, lr}
 8001cd2:	b08b      	sub	sp, #44	; 0x2c
 8001cd4:	af00      	add	r7, sp, #0
	uint8_t status;
	datetime ntpTime;
	status = SNTP_run(&ntpTime);
 8001cd6:	f107 031c 	add.w	r3, r7, #28
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f00b fd62 	bl	800d7a4 <SNTP_run>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	// check rtc.c if there is added new sDate and sTime
	if (status) {
 8001ce6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 80eb 	beq.w	8001ec6 <setRTCTime+0x1f6>
		RTC_TimeTypeDef sTime = {0};
 8001cf0:	f107 0308 	add.w	r3, r7, #8
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
		RTC_DateTypeDef sDate = {0};
 8001d00:	2300      	movs	r3, #0
 8001d02:	607b      	str	r3, [r7, #4]

		sTime.Hours = DEC2BCD(ntpTime.hh);
 8001d04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d08:	4a72      	ldr	r2, [pc, #456]	; (8001ed4 <setRTCTime+0x204>)
 8001d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0e:	08db      	lsrs	r3, r3, #3
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	b2d8      	uxtb	r0, r3
 8001d16:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d1a:	4b6e      	ldr	r3, [pc, #440]	; (8001ed4 <setRTCTime+0x204>)
 8001d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8001d20:	08d9      	lsrs	r1, r3, #3
 8001d22:	460b      	mov	r3, r1
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	440b      	add	r3, r1
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	4403      	add	r3, r0
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	723b      	strb	r3, [r7, #8]
		sTime.Minutes = DEC2BCD(ntpTime.mm);
 8001d34:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d38:	4a66      	ldr	r2, [pc, #408]	; (8001ed4 <setRTCTime+0x204>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	08db      	lsrs	r3, r3, #3
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	b2d8      	uxtb	r0, r3
 8001d46:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001d4a:	4b62      	ldr	r3, [pc, #392]	; (8001ed4 <setRTCTime+0x204>)
 8001d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8001d50:	08d9      	lsrs	r1, r3, #3
 8001d52:	460b      	mov	r3, r1
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	440b      	add	r3, r1
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	4403      	add	r3, r0
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	727b      	strb	r3, [r7, #9]
		sTime.Seconds = DEC2BCD(ntpTime.ss);
 8001d64:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001d68:	4a5a      	ldr	r2, [pc, #360]	; (8001ed4 <setRTCTime+0x204>)
 8001d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6e:	08db      	lsrs	r3, r3, #3
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	011b      	lsls	r3, r3, #4
 8001d74:	b2d8      	uxtb	r0, r3
 8001d76:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001d7a:	4b56      	ldr	r3, [pc, #344]	; (8001ed4 <setRTCTime+0x204>)
 8001d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	460b      	mov	r3, r1
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	440b      	add	r3, r1
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	4403      	add	r3, r0
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	72bb      	strb	r3, [r7, #10]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61bb      	str	r3, [r7, #24]
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d9c:	f107 0308 	add.w	r3, r7, #8
 8001da0:	2201      	movs	r2, #1
 8001da2:	4619      	mov	r1, r3
 8001da4:	484c      	ldr	r0, [pc, #304]	; (8001ed8 <setRTCTime+0x208>)
 8001da6:	f002 f9e3 	bl	8004170 <HAL_RTC_SetTime>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <setRTCTime+0xe4>
		{
			Error_Handler();
 8001db0:	f000 fcd0 	bl	8002754 <Error_Handler>
		}
		sDate.Date = DEC2BCD(ntpTime.dd);
 8001db4:	7ffb      	ldrb	r3, [r7, #31]
 8001db6:	4a47      	ldr	r2, [pc, #284]	; (8001ed4 <setRTCTime+0x204>)
 8001db8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbc:	08db      	lsrs	r3, r3, #3
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	011b      	lsls	r3, r3, #4
 8001dc2:	b2d8      	uxtb	r0, r3
 8001dc4:	7ffa      	ldrb	r2, [r7, #31]
 8001dc6:	4b43      	ldr	r3, [pc, #268]	; (8001ed4 <setRTCTime+0x204>)
 8001dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8001dcc:	08d9      	lsrs	r1, r3, #3
 8001dce:	460b      	mov	r3, r1
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	4403      	add	r3, r0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	71bb      	strb	r3, [r7, #6]
		sDate.Month = DEC2BCD(ntpTime.mo);
 8001de0:	7fbb      	ldrb	r3, [r7, #30]
 8001de2:	4a3c      	ldr	r2, [pc, #240]	; (8001ed4 <setRTCTime+0x204>)
 8001de4:	fba2 2303 	umull	r2, r3, r2, r3
 8001de8:	08db      	lsrs	r3, r3, #3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	011b      	lsls	r3, r3, #4
 8001dee:	b2d8      	uxtb	r0, r3
 8001df0:	7fba      	ldrb	r2, [r7, #30]
 8001df2:	4b38      	ldr	r3, [pc, #224]	; (8001ed4 <setRTCTime+0x204>)
 8001df4:	fba3 1302 	umull	r1, r3, r3, r2
 8001df8:	08d9      	lsrs	r1, r3, #3
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	440b      	add	r3, r1
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	4403      	add	r3, r0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	717b      	strb	r3, [r7, #5]
		sDate.Year = DEC2BCD(ntpTime.yy%100);
 8001e0c:	8bbb      	ldrh	r3, [r7, #28]
 8001e0e:	4a33      	ldr	r2, [pc, #204]	; (8001edc <setRTCTime+0x20c>)
 8001e10:	fba2 1203 	umull	r1, r2, r2, r3
 8001e14:	0952      	lsrs	r2, r2, #5
 8001e16:	2164      	movs	r1, #100	; 0x64
 8001e18:	fb01 f202 	mul.w	r2, r1, r2
 8001e1c:	1a9b      	subs	r3, r3, r2
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	4a2c      	ldr	r2, [pc, #176]	; (8001ed4 <setRTCTime+0x204>)
 8001e22:	fba2 2303 	umull	r2, r3, r2, r3
 8001e26:	08db      	lsrs	r3, r3, #3
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	011b      	lsls	r3, r3, #4
 8001e2e:	b2d8      	uxtb	r0, r3
 8001e30:	8bbb      	ldrh	r3, [r7, #28]
 8001e32:	4a2a      	ldr	r2, [pc, #168]	; (8001edc <setRTCTime+0x20c>)
 8001e34:	fba2 1203 	umull	r1, r2, r2, r3
 8001e38:	0952      	lsrs	r2, r2, #5
 8001e3a:	2164      	movs	r1, #100	; 0x64
 8001e3c:	fb01 f202 	mul.w	r2, r1, r2
 8001e40:	1a9b      	subs	r3, r3, r2
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	4b23      	ldr	r3, [pc, #140]	; (8001ed4 <setRTCTime+0x204>)
 8001e46:	fba3 1302 	umull	r1, r3, r3, r2
 8001e4a:	08d9      	lsrs	r1, r3, #3
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	4403      	add	r3, r0
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	71fb      	strb	r3, [r7, #7]
		sDate.WeekDay = DEC2BCD(dayOfWeek(ntpTime.dd, ntpTime.mo, ntpTime.yy));  // d, m, y
 8001e60:	7ffb      	ldrb	r3, [r7, #31]
 8001e62:	7fb9      	ldrb	r1, [r7, #30]
 8001e64:	8bba      	ldrh	r2, [r7, #28]
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f000 f96b 	bl	8002144 <dayOfWeek>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <setRTCTime+0x204>)
 8001e74:	fba3 2302 	umull	r2, r3, r3, r2
 8001e78:	08db      	lsrs	r3, r3, #3
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	b2dc      	uxtb	r4, r3
 8001e80:	7ffb      	ldrb	r3, [r7, #31]
 8001e82:	7fb9      	ldrb	r1, [r7, #30]
 8001e84:	8bba      	ldrh	r2, [r7, #28]
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f000 f95b 	bl	8002144 <dayOfWeek>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <setRTCTime+0x204>)
 8001e94:	fba3 1302 	umull	r1, r3, r3, r2
 8001e98:	08d9      	lsrs	r1, r3, #3
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	4423      	add	r3, r4
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	713b      	strb	r3, [r7, #4]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001eac:	1d3b      	adds	r3, r7, #4
 8001eae:	2201      	movs	r2, #1
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4809      	ldr	r0, [pc, #36]	; (8001ed8 <setRTCTime+0x208>)
 8001eb4:	f002 fa54 	bl	8004360 <HAL_RTC_SetDate>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <setRTCTime+0x1f2>
		{
			Error_Handler();
 8001ebe:	f000 fc49 	bl	8002754 <Error_Handler>
		}
		return SET_RTC_OK;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e001      	b.n	8001eca <setRTCTime+0x1fa>
	}
	else return SET_RTC_NOK;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	372c      	adds	r7, #44	; 0x2c
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd90      	pop	{r4, r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	cccccccd 	.word	0xcccccccd
 8001ed8:	2000336c 	.word	0x2000336c
 8001edc:	51eb851f 	.word	0x51eb851f

08001ee0 <getRTCTime>:

char* getRTCTime(void)
{
 8001ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee2:	b08b      	sub	sp, #44	; 0x2c
 8001ee4:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef gTime;
	RTC_DateTypeDef gDate;

	static char getTimeBuf[30] = {'\0'};

	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	2201      	movs	r2, #1
 8001eea:	4619      	mov	r1, r3
 8001eec:	4833      	ldr	r0, [pc, #204]	; (8001fbc <getRTCTime+0xdc>)
 8001eee:	f002 f9d9 	bl	80042a4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BCD);
 8001ef2:	463b      	mov	r3, r7
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4830      	ldr	r0, [pc, #192]	; (8001fbc <getRTCTime+0xdc>)
 8001efa:	f002 fab5 	bl	8004468 <HAL_RTC_GetDate>

	sprintf(getTimeBuf, "%02d/%02d/%04d,%02d:%02d:%02d", BCD2DEC(gDate.Date), BCD2DEC(gDate.Month), BCD2DEC(gDate.Year) + YEAR, BCD2DEC(gTime.Hours), BCD2DEC(gTime.Minutes), BCD2DEC(gTime.Seconds));
 8001efe:	78bb      	ldrb	r3, [r7, #2]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	461a      	mov	r2, r3
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	461a      	mov	r2, r3
 8001f10:	78bb      	ldrb	r3, [r7, #2]
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	18d4      	adds	r4, r2, r3
 8001f18:	787b      	ldrb	r3, [r7, #1]
 8001f1a:	091b      	lsrs	r3, r3, #4
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	461a      	mov	r2, r3
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	461a      	mov	r2, r3
 8001f2a:	787b      	ldrb	r3, [r7, #1]
 8001f2c:	f003 030f 	and.w	r3, r3, #15
 8001f30:	18d5      	adds	r5, r2, r3
 8001f32:	78fb      	ldrb	r3, [r7, #3]
 8001f34:	091b      	lsrs	r3, r3, #4
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	461a      	mov	r2, r3
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8001f50:	793b      	ldrb	r3, [r7, #4]
 8001f52:	091b      	lsrs	r3, r3, #4
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	4619      	mov	r1, r3
 8001f58:	460b      	mov	r3, r1
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4619      	mov	r1, r3
 8001f62:	793b      	ldrb	r3, [r7, #4]
 8001f64:	f003 030f 	and.w	r3, r3, #15
 8001f68:	4419      	add	r1, r3
 8001f6a:	797b      	ldrb	r3, [r7, #5]
 8001f6c:	091b      	lsrs	r3, r3, #4
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	4618      	mov	r0, r3
 8001f72:	4603      	mov	r3, r0
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4403      	add	r3, r0
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	797b      	ldrb	r3, [r7, #5]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	4418      	add	r0, r3
 8001f84:	79bb      	ldrb	r3, [r7, #6]
 8001f86:	091b      	lsrs	r3, r3, #4
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	461e      	mov	r6, r3
 8001f8c:	4633      	mov	r3, r6
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4433      	add	r3, r6
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	461e      	mov	r6, r3
 8001f96:	79bb      	ldrb	r3, [r7, #6]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	4433      	add	r3, r6
 8001f9e:	9303      	str	r3, [sp, #12]
 8001fa0:	9002      	str	r0, [sp, #8]
 8001fa2:	9101      	str	r1, [sp, #4]
 8001fa4:	9200      	str	r2, [sp, #0]
 8001fa6:	462b      	mov	r3, r5
 8001fa8:	4622      	mov	r2, r4
 8001faa:	4905      	ldr	r1, [pc, #20]	; (8001fc0 <getRTCTime+0xe0>)
 8001fac:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <getRTCTime+0xe4>)
 8001fae:	f00c f8a9 	bl	800e104 <siprintf>
						//format can be changed by what developers want.
	return getTimeBuf;
 8001fb2:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <getRTCTime+0xe4>)
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	371c      	adds	r7, #28
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fbc:	2000336c 	.word	0x2000336c
 8001fc0:	0800f874 	.word	0x0800f874
 8001fc4:	2000330c 	.word	0x2000330c

08001fc8 <getLogTime>:

char* getLogTime(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af02      	add	r7, sp, #8
	RTC_TimeTypeDef gTime;
	RTC_DateTypeDef gDate;

	static char getTimeBuf[30] = {'\0'};

	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	481e      	ldr	r0, [pc, #120]	; (8002050 <getLogTime+0x88>)
 8001fd6:	f002 f965 	bl	80042a4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BCD);
 8001fda:	463b      	mov	r3, r7
 8001fdc:	2201      	movs	r2, #1
 8001fde:	4619      	mov	r1, r3
 8001fe0:	481b      	ldr	r0, [pc, #108]	; (8002050 <getLogTime+0x88>)
 8001fe2:	f002 fa41 	bl	8004468 <HAL_RTC_GetDate>

	sprintf(getTimeBuf,"%02d_%02d_%04d", BCD2DEC(gDate.Date), BCD2DEC(gDate.Month), BCD2DEC(gDate.Year) + YEAR);
 8001fe6:	78bb      	ldrb	r3, [r7, #2]
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	461a      	mov	r2, r3
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	78bb      	ldrb	r3, [r7, #2]
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	441a      	add	r2, r3
 8002000:	787b      	ldrb	r3, [r7, #1]
 8002002:	091b      	lsrs	r3, r3, #4
 8002004:	b2db      	uxtb	r3, r3
 8002006:	4619      	mov	r1, r3
 8002008:	460b      	mov	r3, r1
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4619      	mov	r1, r3
 8002012:	787b      	ldrb	r3, [r7, #1]
 8002014:	f003 030f 	and.w	r3, r3, #15
 8002018:	4419      	add	r1, r3
 800201a:	78fb      	ldrb	r3, [r7, #3]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	b2db      	uxtb	r3, r3
 8002020:	4618      	mov	r0, r3
 8002022:	4603      	mov	r3, r0
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4403      	add	r3, r0
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	4618      	mov	r0, r3
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	4403      	add	r3, r0
 8002034:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	460b      	mov	r3, r1
 800203c:	4905      	ldr	r1, [pc, #20]	; (8002054 <getLogTime+0x8c>)
 800203e:	4806      	ldr	r0, [pc, #24]	; (8002058 <getLogTime+0x90>)
 8002040:	f00c f860 	bl	800e104 <siprintf>
						//format can be changed by what developers want.
	return getTimeBuf;
 8002044:	4b04      	ldr	r3, [pc, #16]	; (8002058 <getLogTime+0x90>)
}
 8002046:	4618      	mov	r0, r3
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	2000336c 	.word	0x2000336c
 8002054:	0800f894 	.word	0x0800f894
 8002058:	2000332c 	.word	0x2000332c

0800205c <getDataTime>:

char* getDataTime(void)
{
 800205c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800205e:	b08b      	sub	sp, #44	; 0x2c
 8002060:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef gTime;
	RTC_DateTypeDef gDate;

	static char getTimeBuf[30] = {'\0'};

	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 8002062:	1d3b      	adds	r3, r7, #4
 8002064:	2201      	movs	r2, #1
 8002066:	4619      	mov	r1, r3
 8002068:	4833      	ldr	r0, [pc, #204]	; (8002138 <getDataTime+0xdc>)
 800206a:	f002 f91b 	bl	80042a4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BCD);
 800206e:	463b      	mov	r3, r7
 8002070:	2201      	movs	r2, #1
 8002072:	4619      	mov	r1, r3
 8002074:	4830      	ldr	r0, [pc, #192]	; (8002138 <getDataTime+0xdc>)
 8002076:	f002 f9f7 	bl	8004468 <HAL_RTC_GetDate>

	sprintf(getTimeBuf, "%02d_%02d_%04dT%02d_%02d_%02d", BCD2DEC(gDate.Date), BCD2DEC(gDate.Month), BCD2DEC(gDate.Year) + YEAR, BCD2DEC(gTime.Hours), BCD2DEC(gTime.Minutes), BCD2DEC(gTime.Seconds));
 800207a:	78bb      	ldrb	r3, [r7, #2]
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	b2db      	uxtb	r3, r3
 8002080:	461a      	mov	r2, r3
 8002082:	4613      	mov	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	461a      	mov	r2, r3
 800208c:	78bb      	ldrb	r3, [r7, #2]
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	18d4      	adds	r4, r2, r3
 8002094:	787b      	ldrb	r3, [r7, #1]
 8002096:	091b      	lsrs	r3, r3, #4
 8002098:	b2db      	uxtb	r3, r3
 800209a:	461a      	mov	r2, r3
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	461a      	mov	r2, r3
 80020a6:	787b      	ldrb	r3, [r7, #1]
 80020a8:	f003 030f 	and.w	r3, r3, #15
 80020ac:	18d5      	adds	r5, r2, r3
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	4613      	mov	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	461a      	mov	r2, r3
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	4413      	add	r3, r2
 80020c8:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80020cc:	793b      	ldrb	r3, [r7, #4]
 80020ce:	091b      	lsrs	r3, r3, #4
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	4619      	mov	r1, r3
 80020d4:	460b      	mov	r3, r1
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4619      	mov	r1, r3
 80020de:	793b      	ldrb	r3, [r7, #4]
 80020e0:	f003 030f 	and.w	r3, r3, #15
 80020e4:	4419      	add	r1, r3
 80020e6:	797b      	ldrb	r3, [r7, #5]
 80020e8:	091b      	lsrs	r3, r3, #4
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	4618      	mov	r0, r3
 80020ee:	4603      	mov	r3, r0
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4403      	add	r3, r0
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	4618      	mov	r0, r3
 80020f8:	797b      	ldrb	r3, [r7, #5]
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	4418      	add	r0, r3
 8002100:	79bb      	ldrb	r3, [r7, #6]
 8002102:	091b      	lsrs	r3, r3, #4
 8002104:	b2db      	uxtb	r3, r3
 8002106:	461e      	mov	r6, r3
 8002108:	4633      	mov	r3, r6
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4433      	add	r3, r6
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	461e      	mov	r6, r3
 8002112:	79bb      	ldrb	r3, [r7, #6]
 8002114:	f003 030f 	and.w	r3, r3, #15
 8002118:	4433      	add	r3, r6
 800211a:	9303      	str	r3, [sp, #12]
 800211c:	9002      	str	r0, [sp, #8]
 800211e:	9101      	str	r1, [sp, #4]
 8002120:	9200      	str	r2, [sp, #0]
 8002122:	462b      	mov	r3, r5
 8002124:	4622      	mov	r2, r4
 8002126:	4905      	ldr	r1, [pc, #20]	; (800213c <getDataTime+0xe0>)
 8002128:	4805      	ldr	r0, [pc, #20]	; (8002140 <getDataTime+0xe4>)
 800212a:	f00b ffeb 	bl	800e104 <siprintf>
						//format can be changed by what developers want.
	return getTimeBuf;
 800212e:	4b04      	ldr	r3, [pc, #16]	; (8002140 <getDataTime+0xe4>)
}
 8002130:	4618      	mov	r0, r3
 8002132:	371c      	adds	r7, #28
 8002134:	46bd      	mov	sp, r7
 8002136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002138:	2000336c 	.word	0x2000336c
 800213c:	0800f8a4 	.word	0x0800f8a4
 8002140:	2000334c 	.word	0x2000334c

08002144 <dayOfWeek>:

uint8_t dayOfWeek(uint8_t d, uint8_t m, uint8_t y)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
 800214e:	460b      	mov	r3, r1
 8002150:	71bb      	strb	r3, [r7, #6]
 8002152:	4613      	mov	r3, r2
 8002154:	717b      	strb	r3, [r7, #5]
	//this is zero-based algorithm. So sunday is 0 monday is 1 etc.
	uint8_t weekDay = (d += m < 3 ? y-- : y - 2, 23*m/9 + d + 4 + y/4- y/100 + y/400)%7;
 8002156:	79bb      	ldrb	r3, [r7, #6]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d803      	bhi.n	8002164 <dayOfWeek+0x20>
 800215c:	797b      	ldrb	r3, [r7, #5]
 800215e:	1e5a      	subs	r2, r3, #1
 8002160:	717a      	strb	r2, [r7, #5]
 8002162:	e001      	b.n	8002168 <dayOfWeek+0x24>
 8002164:	797b      	ldrb	r3, [r7, #5]
 8002166:	3b02      	subs	r3, #2
 8002168:	b2da      	uxtb	r2, r3
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	4413      	add	r3, r2
 800216e:	71fb      	strb	r3, [r7, #7]
 8002170:	79ba      	ldrb	r2, [r7, #6]
 8002172:	4613      	mov	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	1a9b      	subs	r3, r3, r2
 800217c:	4a1a      	ldr	r2, [pc, #104]	; (80021e8 <dayOfWeek+0xa4>)
 800217e:	fb82 1203 	smull	r1, r2, r2, r3
 8002182:	1052      	asrs	r2, r2, #1
 8002184:	17db      	asrs	r3, r3, #31
 8002186:	1ad2      	subs	r2, r2, r3
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	4413      	add	r3, r2
 800218c:	3304      	adds	r3, #4
 800218e:	797a      	ldrb	r2, [r7, #5]
 8002190:	0892      	lsrs	r2, r2, #2
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	4413      	add	r3, r2
 8002196:	797a      	ldrb	r2, [r7, #5]
 8002198:	4914      	ldr	r1, [pc, #80]	; (80021ec <dayOfWeek+0xa8>)
 800219a:	fba1 1202 	umull	r1, r2, r1, r2
 800219e:	0952      	lsrs	r2, r2, #5
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	1a9a      	subs	r2, r3, r2
 80021a4:	797b      	ldrb	r3, [r7, #5]
 80021a6:	4911      	ldr	r1, [pc, #68]	; (80021ec <dayOfWeek+0xa8>)
 80021a8:	fb81 0103 	smull	r0, r1, r1, r3
 80021ac:	11c9      	asrs	r1, r1, #7
 80021ae:	17db      	asrs	r3, r3, #31
 80021b0:	1acb      	subs	r3, r1, r3
 80021b2:	441a      	add	r2, r3
 80021b4:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <dayOfWeek+0xac>)
 80021b6:	fb83 1302 	smull	r1, r3, r3, r2
 80021ba:	4413      	add	r3, r2
 80021bc:	1099      	asrs	r1, r3, #2
 80021be:	17d3      	asrs	r3, r2, #31
 80021c0:	1ac9      	subs	r1, r1, r3
 80021c2:	460b      	mov	r3, r1
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	1a5b      	subs	r3, r3, r1
 80021c8:	1ad1      	subs	r1, r2, r3
 80021ca:	460b      	mov	r3, r1
 80021cc:	73fb      	strb	r3, [r7, #15]
	if (weekDay == 0) return 7;
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <dayOfWeek+0x94>
 80021d4:	2307      	movs	r3, #7
 80021d6:	e000      	b.n	80021da <dayOfWeek+0x96>
	else return weekDay;
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	38e38e39 	.word	0x38e38e39
 80021ec:	51eb851f 	.word	0x51eb851f
 80021f0:	92492493 	.word	0x92492493

080021f4 <SDInit>:
	}
	return "NOTHING";
}

SD_CARD_StatusTypeDef SDInit(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "", 0);
 80021f8:	2200      	movs	r2, #0
 80021fa:	491b      	ldr	r1, [pc, #108]	; (8002268 <SDInit+0x74>)
 80021fc:	481b      	ldr	r0, [pc, #108]	; (800226c <SDInit+0x78>)
 80021fe:	f006 fd0d 	bl	8008c1c <f_mount>
 8002202:	4603      	mov	r3, r0
 8002204:	461a      	mov	r2, r3
 8002206:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <SDInit+0x7c>)
 8002208:	701a      	strb	r2, [r3, #0]
	if (FR_OK != fresult) {
 800220a:	4b19      	ldr	r3, [pc, #100]	; (8002270 <SDInit+0x7c>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d002      	beq.n	8002218 <SDInit+0x24>
		return SD_CARD_ERROR;
 8002212:	f06f 0301 	mvn.w	r3, #1
 8002216:	e024      	b.n	8002262 <SDInit+0x6e>
	}
	fresult = f_mkdir("Data");
 8002218:	4816      	ldr	r0, [pc, #88]	; (8002274 <SDInit+0x80>)
 800221a:	f007 fc52 	bl	8009ac2 <f_mkdir>
 800221e:	4603      	mov	r3, r0
 8002220:	461a      	mov	r2, r3
 8002222:	4b13      	ldr	r3, [pc, #76]	; (8002270 <SDInit+0x7c>)
 8002224:	701a      	strb	r2, [r3, #0]
	if (FR_OK != fresult && FR_EXIST != fresult) {
 8002226:	4b12      	ldr	r3, [pc, #72]	; (8002270 <SDInit+0x7c>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d006      	beq.n	800223c <SDInit+0x48>
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <SDInit+0x7c>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b08      	cmp	r3, #8
 8002234:	d002      	beq.n	800223c <SDInit+0x48>
		return SD_CARD_ERROR;
 8002236:	f06f 0301 	mvn.w	r3, #1
 800223a:	e012      	b.n	8002262 <SDInit+0x6e>
	}
	fresult = f_mkdir("Log");
 800223c:	480e      	ldr	r0, [pc, #56]	; (8002278 <SDInit+0x84>)
 800223e:	f007 fc40 	bl	8009ac2 <f_mkdir>
 8002242:	4603      	mov	r3, r0
 8002244:	461a      	mov	r2, r3
 8002246:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <SDInit+0x7c>)
 8002248:	701a      	strb	r2, [r3, #0]
	if (FR_OK != fresult && FR_EXIST != fresult) {
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <SDInit+0x7c>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d006      	beq.n	8002260 <SDInit+0x6c>
 8002252:	4b07      	ldr	r3, [pc, #28]	; (8002270 <SDInit+0x7c>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b08      	cmp	r3, #8
 8002258:	d002      	beq.n	8002260 <SDInit+0x6c>
		return SD_CARD_ERROR;
 800225a:	f06f 0301 	mvn.w	r3, #1
 800225e:	e000      	b.n	8002262 <SDInit+0x6e>
	}

	return SD_CARD_READY;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	0800f8fc 	.word	0x0800f8fc
 800226c:	20000144 	.word	0x20000144
 8002270:	200021ac 	.word	0x200021ac
 8002274:	0800f900 	.word	0x0800f900
 8002278:	0800f908 	.word	0x0800f908

0800227c <checkSDStore>:

bool checkSDStore(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	f5ad 7d44 	sub.w	sp, sp, #784	; 0x310
 8002282:	af00      	add	r7, sp, #0
	sdStatus = SD_CARD_BUSY;
 8002284:	4b2f      	ldr	r3, [pc, #188]	; (8002344 <checkSDStore+0xc8>)
 8002286:	22ff      	movs	r2, #255	; 0xff
 8002288:	701a      	strb	r2, [r3, #0]
	fresult = f_findfirst(&dir, &fno, "Data", "????*.log");
 800228a:	4b2f      	ldr	r3, [pc, #188]	; (8002348 <checkSDStore+0xcc>)
 800228c:	4a2f      	ldr	r2, [pc, #188]	; (800234c <checkSDStore+0xd0>)
 800228e:	4930      	ldr	r1, [pc, #192]	; (8002350 <checkSDStore+0xd4>)
 8002290:	4830      	ldr	r0, [pc, #192]	; (8002354 <checkSDStore+0xd8>)
 8002292:	f007 fb48 	bl	8009926 <f_findfirst>
 8002296:	4603      	mov	r3, r0
 8002298:	461a      	mov	r2, r3
 800229a:	4b2f      	ldr	r3, [pc, #188]	; (8002358 <checkSDStore+0xdc>)
 800229c:	701a      	strb	r2, [r3, #0]
	if (strlen(fno.fname) > 1 && fresult == FR_OK) {
 800229e:	482f      	ldr	r0, [pc, #188]	; (800235c <checkSDStore+0xe0>)
 80022a0:	f7fd ff9e 	bl	80001e0 <strlen>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d943      	bls.n	8002332 <checkSDStore+0xb6>
 80022aa:	4b2b      	ldr	r3, [pc, #172]	; (8002358 <checkSDStore+0xdc>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d13f      	bne.n	8002332 <checkSDStore+0xb6>
		char fileName[sizeof(fno.fname) + 20];
		sprintf(fileName, "Data/%s", fno.fname);
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	4a29      	ldr	r2, [pc, #164]	; (800235c <checkSDStore+0xe0>)
 80022b6:	492a      	ldr	r1, [pc, #168]	; (8002360 <checkSDStore+0xe4>)
 80022b8:	4618      	mov	r0, r3
 80022ba:	f00b ff23 	bl	800e104 <siprintf>
		fresult = f_open(&fil, fileName, FA_READ);
 80022be:	1d3b      	adds	r3, r7, #4
 80022c0:	2201      	movs	r2, #1
 80022c2:	4619      	mov	r1, r3
 80022c4:	4827      	ldr	r0, [pc, #156]	; (8002364 <checkSDStore+0xe8>)
 80022c6:	f006 fcef 	bl	8008ca8 <f_open>
 80022ca:	4603      	mov	r3, r0
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b22      	ldr	r3, [pc, #136]	; (8002358 <checkSDStore+0xdc>)
 80022d0:	701a      	strb	r2, [r3, #0]
		char buf[SD_READ_BUF_SIZE];
		f_gets(buf, sizeof(buf), &fil);
 80022d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022d6:	4a23      	ldr	r2, [pc, #140]	; (8002364 <checkSDStore+0xe8>)
 80022d8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80022dc:	4618      	mov	r0, r3
 80022de:	f007 fcfd 	bl	8009cdc <f_gets>
		int result = MQTT_run(buf);
 80022e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 f866 	bl	80023b8 <MQTT_run>
 80022ec:	f8c7 030c 	str.w	r0, [r7, #780]	; 0x30c
		if (result < 0) {
 80022f0:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	da0e      	bge.n	8002316 <checkSDStore+0x9a>
			msgLogger("Error Happaned While Sending Data to MQTT Server.");
 80022f8:	481b      	ldr	r0, [pc, #108]	; (8002368 <checkSDStore+0xec>)
 80022fa:	f000 f975 	bl	80025e8 <msgLogger>
			sdStatus = SD_CARD_READY;
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <checkSDStore+0xc8>)
 8002300:	2200      	movs	r2, #0
 8002302:	701a      	strb	r2, [r3, #0]
			fresult = f_close(&fil);
 8002304:	4817      	ldr	r0, [pc, #92]	; (8002364 <checkSDStore+0xe8>)
 8002306:	f007 fa0c 	bl	8009722 <f_close>
 800230a:	4603      	mov	r3, r0
 800230c:	461a      	mov	r2, r3
 800230e:	4b12      	ldr	r3, [pc, #72]	; (8002358 <checkSDStore+0xdc>)
 8002310:	701a      	strb	r2, [r3, #0]
			return false;
 8002312:	2300      	movs	r3, #0
 8002314:	e011      	b.n	800233a <checkSDStore+0xbe>
		}
		else {
			msgLogger("Data has been sent succesfully.");
 8002316:	4815      	ldr	r0, [pc, #84]	; (800236c <checkSDStore+0xf0>)
 8002318:	f000 f966 	bl	80025e8 <msgLogger>
			fresult = f_close(&fil);
 800231c:	4811      	ldr	r0, [pc, #68]	; (8002364 <checkSDStore+0xe8>)
 800231e:	f007 fa00 	bl	8009722 <f_close>
 8002322:	4603      	mov	r3, r0
 8002324:	461a      	mov	r2, r3
 8002326:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <checkSDStore+0xdc>)
 8002328:	701a      	strb	r2, [r3, #0]
			f_unlink(fileName);
 800232a:	1d3b      	adds	r3, r7, #4
 800232c:	4618      	mov	r0, r3
 800232e:	f007 fb18 	bl	8009962 <f_unlink>
		}
	}
	sdStatus = SD_CARD_READY;
 8002332:	4b04      	ldr	r3, [pc, #16]	; (8002344 <checkSDStore+0xc8>)
 8002334:	2200      	movs	r2, #0
 8002336:	701a      	strb	r2, [r3, #0]
	return true;
 8002338:	2301      	movs	r3, #1
}
 800233a:	4618      	mov	r0, r3
 800233c:	f507 7744 	add.w	r7, r7, #784	; 0x310
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20000140 	.word	0x20000140
 8002348:	0800f90c 	.word	0x0800f90c
 800234c:	0800f900 	.word	0x0800f900
 8002350:	200021e8 	.word	0x200021e8
 8002354:	200021b0 	.word	0x200021b0
 8002358:	200021ac 	.word	0x200021ac
 800235c:	200021fe 	.word	0x200021fe
 8002360:	0800f918 	.word	0x0800f918
 8002364:	2000117c 	.word	0x2000117c
 8002368:	0800f920 	.word	0x0800f920
 800236c:	0800f954 	.word	0x0800f954

08002370 <w5500Init>:

int8_t w5500Init(struct w5500_setup w5500Opt)
{
 8002370:	b084      	sub	sp, #16
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	f107 0c10 	add.w	ip, r7, #16
 800237c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int8_t result;
	result = wizchip_init(w5500Opt.bufSize, w5500Opt.bufSize);
 8002380:	f107 0110 	add.w	r1, r7, #16
 8002384:	f107 0010 	add.w	r0, r7, #16
 8002388:	f009 fa26 	bl	800b7d8 <wizchip_init>
 800238c:	4603      	mov	r3, r0
 800238e:	71fb      	strb	r3, [r7, #7]
	wizchip_setnetinfo(&w5500Opt.netInfo);
 8002390:	f107 0318 	add.w	r3, r7, #24
 8002394:	4618      	mov	r0, r3
 8002396:	f009 faab 	bl	800b8f0 <wizchip_setnetinfo>
	wizchip_settimeout(&w5500Opt.netTimeInfo);
 800239a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800239e:	4618      	mov	r0, r3
 80023a0:	f009 fae6 	bl	800b970 <wizchip_settimeout>
	return result;
 80023a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023b2:	b004      	add	sp, #16
 80023b4:	4770      	bx	lr
	...

080023b8 <MQTT_run>:

int MQTT_run(char* sdBuf)
{
 80023b8:	b5b0      	push	{r4, r5, r7, lr}
 80023ba:	f5ad 6da0 	sub.w	sp, sp, #1280	; 0x500
 80023be:	af04      	add	r7, sp, #16
 80023c0:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80023c4:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 80023c8:	6018      	str	r0, [r3, #0]
	int rc = 0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
	char pubbuf[SD_READ_BUF_SIZE];
	Network n;
	MQTTClient c;
	MQTTMessage m;

	NewNetwork(&n, 0);
 80023d0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80023d4:	2100      	movs	r1, #0
 80023d6:	4618      	mov	r0, r3
 80023d8:	f00a f832 	bl	800c440 <NewNetwork>
	int i =	ConnectNetwork(&n, (uint8_t*)hostIp, 1883);
 80023dc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80023e0:	f240 725b 	movw	r2, #1883	; 0x75b
 80023e4:	4979      	ldr	r1, [pc, #484]	; (80025cc <MQTT_run+0x214>)
 80023e6:	4618      	mov	r0, r3
 80023e8:	f00a f8a7 	bl	800c53a <ConnectNetwork>
 80023ec:	f8c7 04e4 	str.w	r0, [r7, #1252]	; 0x4e4
	if (i == 0) return -1;
 80023f0:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <MQTT_run+0x46>
 80023f8:	f04f 33ff 	mov.w	r3, #4294967295
 80023fc:	e0e0      	b.n	80025c0 <MQTT_run+0x208>
	MQTTClientInit(&c, &n, 1000, buf, sizeof(buf), tempBuffer, sizeof(tempBuffer));
 80023fe:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002402:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8002406:	f107 0090 	add.w	r0, r7, #144	; 0x90
 800240a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800240e:	9202      	str	r2, [sp, #8]
 8002410:	4a6f      	ldr	r2, [pc, #444]	; (80025d0 <MQTT_run+0x218>)
 8002412:	9201      	str	r2, [sp, #4]
 8002414:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002418:	9200      	str	r2, [sp, #0]
 800241a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800241e:	f009 fb3c 	bl	800ba9a <MQTTClientInit>

	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 8002422:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8002426:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800242a:	4a6a      	ldr	r2, [pc, #424]	; (80025d4 <MQTT_run+0x21c>)
 800242c:	4618      	mov	r0, r3
 800242e:	4611      	mov	r1, r2
 8002430:	2358      	movs	r3, #88	; 0x58
 8002432:	461a      	mov	r2, r3
 8002434:	f00b fcd2 	bl	800dddc <memcpy>
	data.willFlag = 0;
 8002438:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800243c:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8002440:	2200      	movs	r2, #0
 8002442:	76da      	strb	r2, [r3, #27]
	data.MQTTVersion = 3;
 8002444:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8002448:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800244c:	2203      	movs	r2, #3
 800244e:	721a      	strb	r2, [r3, #8]
	data.clientID.cstring = mqttopt.clientid;
 8002450:	4b61      	ldr	r3, [pc, #388]	; (80025d8 <MQTT_run+0x220>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8002458:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800245c:	60da      	str	r2, [r3, #12]
	data.username.cstring = mqttopt.username;
 800245e:	4b5e      	ldr	r3, [pc, #376]	; (80025d8 <MQTT_run+0x220>)
 8002460:	691a      	ldr	r2, [r3, #16]
 8002462:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8002466:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800246a:	641a      	str	r2, [r3, #64]	; 0x40
	data.password.cstring = mqttopt.password;
 800246c:	4b5a      	ldr	r3, [pc, #360]	; (80025d8 <MQTT_run+0x220>)
 800246e:	695a      	ldr	r2, [r3, #20]
 8002470:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8002474:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8002478:	64da      	str	r2, [r3, #76]	; 0x4c

	data.keepAliveInterval = 60;
 800247a:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800247e:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8002482:	223c      	movs	r2, #60	; 0x3c
 8002484:	831a      	strh	r2, [r3, #24]
	data.cleansession = 1;
 8002486:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800248a:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800248e:	2201      	movs	r2, #1
 8002490:	769a      	strb	r2, [r3, #26]

	rc = MQTTConnect(&c, &data);
 8002492:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002496:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800249a:	4611      	mov	r1, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f009 fe25 	bl	800c0ec <MQTTConnect>
 80024a2:	f8c7 04ec 	str.w	r0, [r7, #1260]	; 0x4ec
	if (rc < 0) {
 80024a6:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	da02      	bge.n	80024b4 <MQTT_run+0xfc>
		return rc;
 80024ae:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 80024b2:	e085      	b.n	80025c0 <MQTT_run+0x208>
	}
	printf("Connected to server : {%d, %d, %d, %d}\r\n", hostIp[0], hostIp[1], hostIp[2], hostIp[3]);
 80024b4:	4b45      	ldr	r3, [pc, #276]	; (80025cc <MQTT_run+0x214>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	4619      	mov	r1, r3
 80024ba:	4b44      	ldr	r3, [pc, #272]	; (80025cc <MQTT_run+0x214>)
 80024bc:	785b      	ldrb	r3, [r3, #1]
 80024be:	461a      	mov	r2, r3
 80024c0:	4b42      	ldr	r3, [pc, #264]	; (80025cc <MQTT_run+0x214>)
 80024c2:	789b      	ldrb	r3, [r3, #2]
 80024c4:	4618      	mov	r0, r3
 80024c6:	4b41      	ldr	r3, [pc, #260]	; (80025cc <MQTT_run+0x214>)
 80024c8:	78db      	ldrb	r3, [r3, #3]
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	4603      	mov	r3, r0
 80024ce:	4843      	ldr	r0, [pc, #268]	; (80025dc <MQTT_run+0x224>)
 80024d0:	f00b fd7a 	bl	800dfc8 <iprintf>
	mqttopt.showtopics = 1;
 80024d4:	4b40      	ldr	r3, [pc, #256]	; (80025d8 <MQTT_run+0x220>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	621a      	str	r2, [r3, #32]

	m.qos = QOS0;
 80024da:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80024de:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
	m.retained = 1;
 80024e6:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80024ea:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 80024ee:	2201      	movs	r2, #1
 80024f0:	705a      	strb	r2, [r3, #1]
	m.dup = 0;
 80024f2:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80024f6:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 80024fa:	2200      	movs	r2, #0
 80024fc:	709a      	strb	r2, [r3, #2]

	MQTTYield(&c, data.keepAliveInterval);
 80024fe:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8002502:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8002506:	8b1b      	ldrh	r3, [r3, #24]
 8002508:	461a      	mov	r2, r3
 800250a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f009 fda7 	bl	800c064 <MQTTYield>
	sprintf(pubbuf, sdBuf);
 8002516:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800251a:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 800251e:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8002522:	6819      	ldr	r1, [r3, #0]
 8002524:	4610      	mov	r0, r2
 8002526:	f00b fded 	bl	800e104 <siprintf>
	m.payload = pubbuf;
 800252a:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800252e:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8002532:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8002536:	609a      	str	r2, [r3, #8]
	m.payloadlen = strlen(pubbuf);
 8002538:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800253c:	4618      	mov	r0, r3
 800253e:	f7fd fe4f 	bl	80001e0 <strlen>
 8002542:	4602      	mov	r2, r0
 8002544:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8002548:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800254c:	60da      	str	r2, [r3, #12]
	uint8_t mqttTOPIC[30] = "/product_003";
 800254e:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8002552:	f5a3 659d 	sub.w	r5, r3, #1256	; 0x4e8
 8002556:	4b22      	ldr	r3, [pc, #136]	; (80025e0 <MQTT_run+0x228>)
 8002558:	462c      	mov	r4, r5
 800255a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800255c:	c407      	stmia	r4!, {r0, r1, r2}
 800255e:	7023      	strb	r3, [r4, #0]
 8002560:	f105 030d 	add.w	r3, r5, #13
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	741a      	strb	r2, [r3, #16]
	rc = -1;
 8002570:	f04f 33ff 	mov.w	r3, #4294967295
 8002574:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
	uint8_t retry = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	f887 34eb 	strb.w	r3, [r7, #1259]	; 0x4eb
	while (rc != 0) {
 800257e:	e016      	b.n	80025ae <MQTT_run+0x1f6>
		retry++;
 8002580:	f897 34eb 	ldrb.w	r3, [r7, #1259]	; 0x4eb
 8002584:	3301      	adds	r3, #1
 8002586:	f887 34eb 	strb.w	r3, [r7, #1259]	; 0x4eb
		rc = MQTTPublish(&c, (const char*)mqttTOPIC, &m);
 800258a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800258e:	f107 0108 	add.w	r1, r7, #8
 8002592:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002596:	4618      	mov	r0, r3
 8002598:	f009 fe2e 	bl	800c1f8 <MQTTPublish>
 800259c:	f8c7 04ec 	str.w	r0, [r7, #1260]	; 0x4ec
		if (retry > 4) return rc;
 80025a0:	f897 34eb 	ldrb.w	r3, [r7, #1259]	; 0x4eb
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d902      	bls.n	80025ae <MQTT_run+0x1f6>
 80025a8:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 80025ac:	e008      	b.n	80025c0 <MQTT_run+0x208>
	while (rc != 0) {
 80025ae:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1e4      	bne.n	8002580 <MQTT_run+0x1c8>
	}
	printf("Message is sent to MQTT Server.\r\n");
 80025b6:	480b      	ldr	r0, [pc, #44]	; (80025e4 <MQTT_run+0x22c>)
 80025b8:	f00b fd8c 	bl	800e0d4 <puts>
	return rc;
 80025bc:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	f507 679e 	add.w	r7, r7, #1264	; 0x4f0
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bdb0      	pop	{r4, r5, r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000028 	.word	0x20000028
 80025d0:	20002300 	.word	0x20002300
 80025d4:	0800f9c4 	.word	0x0800f9c4
 80025d8:	2000002c 	.word	0x2000002c
 80025dc:	0800f974 	.word	0x0800f974
 80025e0:	0800fa1c 	.word	0x0800fa1c
 80025e4:	0800f9a0 	.word	0x0800f9a0

080025e8 <msgLogger>:

void msgLogger (char* msg)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
#if MSG_LOGGER & UART_LOGGER
	uint32_t len = strlen(msg);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7fd fdf5 	bl	80001e0 <strlen>
 80025f6:	60f8      	str	r0, [r7, #12]
	printf("[%s] ==> %s\n", getRTCTime(), msg);
 80025f8:	f7ff fc72 	bl	8001ee0 <getRTCTime>
 80025fc:	4603      	mov	r3, r0
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	4619      	mov	r1, r3
 8002602:	4804      	ldr	r0, [pc, #16]	; (8002614 <msgLogger+0x2c>)
 8002604:	f00b fce0 	bl	800dfc8 <iprintf>
	if (len > 2000) return;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
			free(ptrBuf);
		}
		sdStatus = SD_CARD_READY;
	#endif
#endif
}
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	0800fa3c 	.word	0x0800fa3c

08002618 <inputStatusLogger>:

void inputStatusLogger(uint8_t input)
{
 8002618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800261a:	b08f      	sub	sp, #60	; 0x3c
 800261c:	af06      	add	r7, sp, #24
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
	#if MSG_LOGGER & UART_LOGGER
		char buf[sizeof("Current Inputs ==> ") + sizeof(int)];
		sprintf(buf, "Current Inputs ==> "BYTE_TO_BINARY_PATTERN, BYTE_TO_BINARY(input));
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	2b00      	cmp	r3, #0
 8002628:	da02      	bge.n	8002630 <inputStatusLogger+0x18>
 800262a:	f04f 0c31 	mov.w	ip, #49	; 0x31
 800262e:	e001      	b.n	8002634 <inputStatusLogger+0x1c>
 8002630:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8002634:	79fb      	ldrb	r3, [r7, #7]
 8002636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <inputStatusLogger+0x2c>
 800263e:	f04f 0e31 	mov.w	lr, #49	; 0x31
 8002642:	e001      	b.n	8002648 <inputStatusLogger+0x30>
 8002644:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	f003 0320 	and.w	r3, r3, #32
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <inputStatusLogger+0x3e>
 8002652:	2331      	movs	r3, #49	; 0x31
 8002654:	e000      	b.n	8002658 <inputStatusLogger+0x40>
 8002656:	2330      	movs	r3, #48	; 0x30
 8002658:	79fa      	ldrb	r2, [r7, #7]
 800265a:	f002 0210 	and.w	r2, r2, #16
 800265e:	2a00      	cmp	r2, #0
 8002660:	d001      	beq.n	8002666 <inputStatusLogger+0x4e>
 8002662:	2231      	movs	r2, #49	; 0x31
 8002664:	e000      	b.n	8002668 <inputStatusLogger+0x50>
 8002666:	2230      	movs	r2, #48	; 0x30
 8002668:	79f9      	ldrb	r1, [r7, #7]
 800266a:	f001 0108 	and.w	r1, r1, #8
 800266e:	2900      	cmp	r1, #0
 8002670:	d001      	beq.n	8002676 <inputStatusLogger+0x5e>
 8002672:	2131      	movs	r1, #49	; 0x31
 8002674:	e000      	b.n	8002678 <inputStatusLogger+0x60>
 8002676:	2130      	movs	r1, #48	; 0x30
 8002678:	79f8      	ldrb	r0, [r7, #7]
 800267a:	f000 0004 	and.w	r0, r0, #4
 800267e:	2800      	cmp	r0, #0
 8002680:	d001      	beq.n	8002686 <inputStatusLogger+0x6e>
 8002682:	2031      	movs	r0, #49	; 0x31
 8002684:	e000      	b.n	8002688 <inputStatusLogger+0x70>
 8002686:	2030      	movs	r0, #48	; 0x30
 8002688:	79fc      	ldrb	r4, [r7, #7]
 800268a:	f004 0402 	and.w	r4, r4, #2
 800268e:	2c00      	cmp	r4, #0
 8002690:	d001      	beq.n	8002696 <inputStatusLogger+0x7e>
 8002692:	2431      	movs	r4, #49	; 0x31
 8002694:	e000      	b.n	8002698 <inputStatusLogger+0x80>
 8002696:	2430      	movs	r4, #48	; 0x30
 8002698:	79fd      	ldrb	r5, [r7, #7]
 800269a:	f005 0501 	and.w	r5, r5, #1
 800269e:	2d00      	cmp	r5, #0
 80026a0:	d001      	beq.n	80026a6 <inputStatusLogger+0x8e>
 80026a2:	2531      	movs	r5, #49	; 0x31
 80026a4:	e000      	b.n	80026a8 <inputStatusLogger+0x90>
 80026a6:	2530      	movs	r5, #48	; 0x30
 80026a8:	f107 0608 	add.w	r6, r7, #8
 80026ac:	9505      	str	r5, [sp, #20]
 80026ae:	9404      	str	r4, [sp, #16]
 80026b0:	9003      	str	r0, [sp, #12]
 80026b2:	9102      	str	r1, [sp, #8]
 80026b4:	9201      	str	r2, [sp, #4]
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	4673      	mov	r3, lr
 80026ba:	4662      	mov	r2, ip
 80026bc:	4906      	ldr	r1, [pc, #24]	; (80026d8 <inputStatusLogger+0xc0>)
 80026be:	4630      	mov	r0, r6
 80026c0:	f00b fd20 	bl	800e104 <siprintf>
		msgLogger(buf);
 80026c4:	f107 0308 	add.w	r3, r7, #8
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff ff8d 	bl	80025e8 <msgLogger>
	#endif
}
 80026ce:	bf00      	nop
 80026d0:	3724      	adds	r7, #36	; 0x24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026d6:	bf00      	nop
 80026d8:	0800fa4c 	.word	0x0800fa4c

080026dc <cs_sel>:

void cs_sel() {
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 80026e0:	2200      	movs	r2, #0
 80026e2:	2110      	movs	r1, #16
 80026e4:	4802      	ldr	r0, [pc, #8]	; (80026f0 <cs_sel+0x14>)
 80026e6:	f000 ff6d 	bl	80035c4 <HAL_GPIO_WritePin>
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40020000 	.word	0x40020000

080026f4 <cs_desel>:

void cs_desel() {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //CS HIGH
 80026f8:	2201      	movs	r2, #1
 80026fa:	2110      	movs	r1, #16
 80026fc:	4802      	ldr	r0, [pc, #8]	; (8002708 <cs_desel+0x14>)
 80026fe:	f000 ff61 	bl	80035c4 <HAL_GPIO_WritePin>
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40020000 	.word	0x40020000

0800270c <spi_rb>:

uint8_t spi_rb(void) {
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFF);
 8002712:	1df9      	adds	r1, r7, #7
 8002714:	f04f 33ff 	mov.w	r3, #4294967295
 8002718:	2201      	movs	r2, #1
 800271a:	4804      	ldr	r0, [pc, #16]	; (800272c <spi_rb+0x20>)
 800271c:	f002 f975 	bl	8004a0a <HAL_SPI_Receive>
	return rbuf;
 8002720:	79fb      	ldrb	r3, [r7, #7]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	2000338c 	.word	0x2000338c

08002730 <spi_wb>:

void spi_wb(uint8_t b) {
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &b, 1, 0xFFFFFFFF);
 800273a:	1df9      	adds	r1, r7, #7
 800273c:	f04f 33ff 	mov.w	r3, #4294967295
 8002740:	2201      	movs	r2, #1
 8002742:	4803      	ldr	r0, [pc, #12]	; (8002750 <spi_wb+0x20>)
 8002744:	f002 f825 	bl	8004792 <HAL_SPI_Transmit>
}
 8002748:	bf00      	nop
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	2000338c 	.word	0x2000338c

08002754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002758:	b672      	cpsid	i
}
 800275a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800275c:	e7fe      	b.n	800275c <Error_Handler+0x8>
	...

08002760 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002766:	1d3b      	adds	r3, r7, #4
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002774:	2300      	movs	r3, #0
 8002776:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002778:	4b24      	ldr	r3, [pc, #144]	; (800280c <MX_RTC_Init+0xac>)
 800277a:	4a25      	ldr	r2, [pc, #148]	; (8002810 <MX_RTC_Init+0xb0>)
 800277c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800277e:	4b23      	ldr	r3, [pc, #140]	; (800280c <MX_RTC_Init+0xac>)
 8002780:	2200      	movs	r2, #0
 8002782:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 99;
 8002784:	4b21      	ldr	r3, [pc, #132]	; (800280c <MX_RTC_Init+0xac>)
 8002786:	2263      	movs	r2, #99	; 0x63
 8002788:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 299;
 800278a:	4b20      	ldr	r3, [pc, #128]	; (800280c <MX_RTC_Init+0xac>)
 800278c:	f240 122b 	movw	r2, #299	; 0x12b
 8002790:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002792:	4b1e      	ldr	r3, [pc, #120]	; (800280c <MX_RTC_Init+0xac>)
 8002794:	2200      	movs	r2, #0
 8002796:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002798:	4b1c      	ldr	r3, [pc, #112]	; (800280c <MX_RTC_Init+0xac>)
 800279a:	2200      	movs	r2, #0
 800279c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800279e:	4b1b      	ldr	r3, [pc, #108]	; (800280c <MX_RTC_Init+0xac>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80027a4:	4819      	ldr	r0, [pc, #100]	; (800280c <MX_RTC_Init+0xac>)
 80027a6:	f001 fc6d 	bl	8004084 <HAL_RTC_Init>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80027b0:	f7ff ffd0 	bl	8002754 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80027bc:	2300      	movs	r3, #0
 80027be:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80027c8:	1d3b      	adds	r3, r7, #4
 80027ca:	2201      	movs	r2, #1
 80027cc:	4619      	mov	r1, r3
 80027ce:	480f      	ldr	r0, [pc, #60]	; (800280c <MX_RTC_Init+0xac>)
 80027d0:	f001 fcce 	bl	8004170 <HAL_RTC_SetTime>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 80027da:	f7ff ffbb 	bl	8002754 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80027de:	2301      	movs	r3, #1
 80027e0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80027e2:	2301      	movs	r3, #1
 80027e4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80027e6:	2301      	movs	r3, #1
 80027e8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80027ee:	463b      	mov	r3, r7
 80027f0:	2201      	movs	r2, #1
 80027f2:	4619      	mov	r1, r3
 80027f4:	4805      	ldr	r0, [pc, #20]	; (800280c <MX_RTC_Init+0xac>)
 80027f6:	f001 fdb3 	bl	8004360 <HAL_RTC_SetDate>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8002800:	f7ff ffa8 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002804:	bf00      	nop
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	2000336c 	.word	0x2000336c
 8002810:	40002800 	.word	0x40002800

08002814 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800281c:	f107 030c 	add.w	r3, r7, #12
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a0c      	ldr	r2, [pc, #48]	; (8002864 <HAL_RTC_MspInit+0x50>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d111      	bne.n	800285a <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002836:	2302      	movs	r3, #2
 8002838:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800283a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800283e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002840:	f107 030c 	add.w	r3, r7, #12
 8002844:	4618      	mov	r0, r3
 8002846:	f001 fb2f 	bl	8003ea8 <HAL_RCCEx_PeriphCLKConfig>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002850:	f7ff ff80 	bl	8002754 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002854:	4b04      	ldr	r3, [pc, #16]	; (8002868 <HAL_RTC_MspInit+0x54>)
 8002856:	2201      	movs	r2, #1
 8002858:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800285a:	bf00      	nop
 800285c:	3720      	adds	r7, #32
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40002800 	.word	0x40002800
 8002868:	42470e3c 	.word	0x42470e3c

0800286c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002870:	4b17      	ldr	r3, [pc, #92]	; (80028d0 <MX_SPI1_Init+0x64>)
 8002872:	4a18      	ldr	r2, [pc, #96]	; (80028d4 <MX_SPI1_Init+0x68>)
 8002874:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002876:	4b16      	ldr	r3, [pc, #88]	; (80028d0 <MX_SPI1_Init+0x64>)
 8002878:	f44f 7282 	mov.w	r2, #260	; 0x104
 800287c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800287e:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <MX_SPI1_Init+0x64>)
 8002880:	2200      	movs	r2, #0
 8002882:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002884:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <MX_SPI1_Init+0x64>)
 8002886:	2200      	movs	r2, #0
 8002888:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800288a:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <MX_SPI1_Init+0x64>)
 800288c:	2200      	movs	r2, #0
 800288e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002890:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <MX_SPI1_Init+0x64>)
 8002892:	2200      	movs	r2, #0
 8002894:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002896:	4b0e      	ldr	r3, [pc, #56]	; (80028d0 <MX_SPI1_Init+0x64>)
 8002898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800289c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800289e:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <MX_SPI1_Init+0x64>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028a4:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <MX_SPI1_Init+0x64>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80028aa:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <MX_SPI1_Init+0x64>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028b0:	4b07      	ldr	r3, [pc, #28]	; (80028d0 <MX_SPI1_Init+0x64>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80028b6:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <MX_SPI1_Init+0x64>)
 80028b8:	220a      	movs	r2, #10
 80028ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028bc:	4804      	ldr	r0, [pc, #16]	; (80028d0 <MX_SPI1_Init+0x64>)
 80028be:	f001 fedf 	bl	8004680 <HAL_SPI_Init>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80028c8:	f7ff ff44 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028cc:	bf00      	nop
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	2000338c 	.word	0x2000338c
 80028d4:	40013000 	.word	0x40013000

080028d8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80028dc:	4b17      	ldr	r3, [pc, #92]	; (800293c <MX_SPI2_Init+0x64>)
 80028de:	4a18      	ldr	r2, [pc, #96]	; (8002940 <MX_SPI2_Init+0x68>)
 80028e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80028e2:	4b16      	ldr	r3, [pc, #88]	; (800293c <MX_SPI2_Init+0x64>)
 80028e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80028ea:	4b14      	ldr	r3, [pc, #80]	; (800293c <MX_SPI2_Init+0x64>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80028f0:	4b12      	ldr	r3, [pc, #72]	; (800293c <MX_SPI2_Init+0x64>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028f6:	4b11      	ldr	r3, [pc, #68]	; (800293c <MX_SPI2_Init+0x64>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028fc:	4b0f      	ldr	r3, [pc, #60]	; (800293c <MX_SPI2_Init+0x64>)
 80028fe:	2200      	movs	r2, #0
 8002900:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002902:	4b0e      	ldr	r3, [pc, #56]	; (800293c <MX_SPI2_Init+0x64>)
 8002904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002908:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800290a:	4b0c      	ldr	r3, [pc, #48]	; (800293c <MX_SPI2_Init+0x64>)
 800290c:	2200      	movs	r2, #0
 800290e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002910:	4b0a      	ldr	r3, [pc, #40]	; (800293c <MX_SPI2_Init+0x64>)
 8002912:	2200      	movs	r2, #0
 8002914:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002916:	4b09      	ldr	r3, [pc, #36]	; (800293c <MX_SPI2_Init+0x64>)
 8002918:	2200      	movs	r2, #0
 800291a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800291c:	4b07      	ldr	r3, [pc, #28]	; (800293c <MX_SPI2_Init+0x64>)
 800291e:	2200      	movs	r2, #0
 8002920:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002922:	4b06      	ldr	r3, [pc, #24]	; (800293c <MX_SPI2_Init+0x64>)
 8002924:	220a      	movs	r2, #10
 8002926:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002928:	4804      	ldr	r0, [pc, #16]	; (800293c <MX_SPI2_Init+0x64>)
 800292a:	f001 fea9 	bl	8004680 <HAL_SPI_Init>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002934:	f7ff ff0e 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002938:	bf00      	nop
 800293a:	bd80      	pop	{r7, pc}
 800293c:	200033e4 	.word	0x200033e4
 8002940:	40003800 	.word	0x40003800

08002944 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08c      	sub	sp, #48	; 0x30
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 031c 	add.w	r3, r7, #28
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a32      	ldr	r2, [pc, #200]	; (8002a2c <HAL_SPI_MspInit+0xe8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d12c      	bne.n	80029c0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	4b31      	ldr	r3, [pc, #196]	; (8002a30 <HAL_SPI_MspInit+0xec>)
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	4a30      	ldr	r2, [pc, #192]	; (8002a30 <HAL_SPI_MspInit+0xec>)
 8002970:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002974:	6453      	str	r3, [r2, #68]	; 0x44
 8002976:	4b2e      	ldr	r3, [pc, #184]	; (8002a30 <HAL_SPI_MspInit+0xec>)
 8002978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800297e:	61bb      	str	r3, [r7, #24]
 8002980:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	4b2a      	ldr	r3, [pc, #168]	; (8002a30 <HAL_SPI_MspInit+0xec>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	4a29      	ldr	r2, [pc, #164]	; (8002a30 <HAL_SPI_MspInit+0xec>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	6313      	str	r3, [r2, #48]	; 0x30
 8002992:	4b27      	ldr	r3, [pc, #156]	; (8002a30 <HAL_SPI_MspInit+0xec>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800299e:	23e0      	movs	r3, #224	; 0xe0
 80029a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a2:	2302      	movs	r3, #2
 80029a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029aa:	2303      	movs	r3, #3
 80029ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029ae:	2305      	movs	r3, #5
 80029b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b2:	f107 031c 	add.w	r3, r7, #28
 80029b6:	4619      	mov	r1, r3
 80029b8:	481e      	ldr	r0, [pc, #120]	; (8002a34 <HAL_SPI_MspInit+0xf0>)
 80029ba:	f000 fc7f 	bl	80032bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80029be:	e031      	b.n	8002a24 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a1c      	ldr	r2, [pc, #112]	; (8002a38 <HAL_SPI_MspInit+0xf4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d12c      	bne.n	8002a24 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <HAL_SPI_MspInit+0xec>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	4a17      	ldr	r2, [pc, #92]	; (8002a30 <HAL_SPI_MspInit+0xec>)
 80029d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029d8:	6413      	str	r3, [r2, #64]	; 0x40
 80029da:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <HAL_SPI_MspInit+0xec>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <HAL_SPI_MspInit+0xec>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	4a10      	ldr	r2, [pc, #64]	; (8002a30 <HAL_SPI_MspInit+0xec>)
 80029f0:	f043 0302 	orr.w	r3, r3, #2
 80029f4:	6313      	str	r3, [r2, #48]	; 0x30
 80029f6:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <HAL_SPI_MspInit+0xec>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8002a02:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a10:	2303      	movs	r3, #3
 8002a12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a14:	2305      	movs	r3, #5
 8002a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a18:	f107 031c 	add.w	r3, r7, #28
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4807      	ldr	r0, [pc, #28]	; (8002a3c <HAL_SPI_MspInit+0xf8>)
 8002a20:	f000 fc4c 	bl	80032bc <HAL_GPIO_Init>
}
 8002a24:	bf00      	nop
 8002a26:	3730      	adds	r7, #48	; 0x30
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40013000 	.word	0x40013000
 8002a30:	40023800 	.word	0x40023800
 8002a34:	40020000 	.word	0x40020000
 8002a38:	40003800 	.word	0x40003800
 8002a3c:	40020400 	.word	0x40020400

08002a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	607b      	str	r3, [r7, #4]
 8002a4a:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <HAL_MspInit+0x4c>)
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	4a0f      	ldr	r2, [pc, #60]	; (8002a8c <HAL_MspInit+0x4c>)
 8002a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a54:	6453      	str	r3, [r2, #68]	; 0x44
 8002a56:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <HAL_MspInit+0x4c>)
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a5e:	607b      	str	r3, [r7, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	603b      	str	r3, [r7, #0]
 8002a66:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <HAL_MspInit+0x4c>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	4a08      	ldr	r2, [pc, #32]	; (8002a8c <HAL_MspInit+0x4c>)
 8002a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a70:	6413      	str	r3, [r2, #64]	; 0x40
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_MspInit+0x4c>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	40023800 	.word	0x40023800

08002a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a94:	e7fe      	b.n	8002a94 <NMI_Handler+0x4>

08002a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a96:	b480      	push	{r7}
 8002a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a9a:	e7fe      	b.n	8002a9a <HardFault_Handler+0x4>

08002a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aa0:	e7fe      	b.n	8002aa0 <MemManage_Handler+0x4>

08002aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aa6:	e7fe      	b.n	8002aa6 <BusFault_Handler+0x4>

08002aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002aac:	e7fe      	b.n	8002aac <UsageFault_Handler+0x4>

08002aae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ac0:	bf00      	nop
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002aca:	b480      	push	{r7}
 8002acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (Timer1 > 0) Timer1--;
 8002adc:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <SysTick_Handler+0x34>)
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <SysTick_Handler+0x18>
 8002ae4:	4b09      	ldr	r3, [pc, #36]	; (8002b0c <SysTick_Handler+0x34>)
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <SysTick_Handler+0x34>)
 8002aee:	801a      	strh	r2, [r3, #0]
	if (Timer2 > 0) Timer2--;
 8002af0:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <SysTick_Handler+0x38>)
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <SysTick_Handler+0x2c>
 8002af8:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <SysTick_Handler+0x38>)
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	4b03      	ldr	r3, [pc, #12]	; (8002b10 <SysTick_Handler+0x38>)
 8002b02:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b04:	f000 fa84 	bl	8003010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b08:	bf00      	nop
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	2000012c 	.word	0x2000012c
 8002b10:	2000012e 	.word	0x2000012e

08002b14 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b18:	4802      	ldr	r0, [pc, #8]	; (8002b24 <TIM3_IRQHandler+0x10>)
 8002b1a:	f002 fc0b 	bl	8005334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20003440 	.word	0x20003440

08002b28 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b2c:	4802      	ldr	r0, [pc, #8]	; (8002b38 <TIM4_IRQHandler+0x10>)
 8002b2e:	f002 fc01 	bl	8005334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20003488 	.word	0x20003488

08002b3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	e00a      	b.n	8002b64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b4e:	f3af 8000 	nop.w
 8002b52:	4601      	mov	r1, r0
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	60ba      	str	r2, [r7, #8]
 8002b5a:	b2ca      	uxtb	r2, r1
 8002b5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	3301      	adds	r3, #1
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	dbf0      	blt.n	8002b4e <_read+0x12>
	}

return len;
 8002b6c:	687b      	ldr	r3, [r7, #4]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
	return -1;
 8002b7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b9e:	605a      	str	r2, [r3, #4]
	return 0;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <_isatty>:

int _isatty(int file)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
	return 1;
 8002bb6:	2301      	movs	r3, #1
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
	return 0;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002be8:	4a14      	ldr	r2, [pc, #80]	; (8002c3c <_sbrk+0x5c>)
 8002bea:	4b15      	ldr	r3, [pc, #84]	; (8002c40 <_sbrk+0x60>)
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bf4:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <_sbrk+0x64>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d102      	bne.n	8002c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bfc:	4b11      	ldr	r3, [pc, #68]	; (8002c44 <_sbrk+0x64>)
 8002bfe:	4a12      	ldr	r2, [pc, #72]	; (8002c48 <_sbrk+0x68>)
 8002c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c02:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <_sbrk+0x64>)
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4413      	add	r3, r2
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d207      	bcs.n	8002c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c10:	f00b f8aa 	bl	800dd68 <__errno>
 8002c14:	4603      	mov	r3, r0
 8002c16:	220c      	movs	r2, #12
 8002c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c1e:	e009      	b.n	8002c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c20:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <_sbrk+0x64>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c26:	4b07      	ldr	r3, [pc, #28]	; (8002c44 <_sbrk+0x64>)
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	4a05      	ldr	r2, [pc, #20]	; (8002c44 <_sbrk+0x64>)
 8002c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c32:	68fb      	ldr	r3, [r7, #12]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20010000 	.word	0x20010000
 8002c40:	00000400 	.word	0x00000400
 8002c44:	2000343c 	.word	0x2000343c
 8002c48:	20003808 	.word	0x20003808

08002c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c50:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <SystemInit+0x20>)
 8002c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c56:	4a05      	ldr	r2, [pc, #20]	; (8002c6c <SystemInit+0x20>)
 8002c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c60:	bf00      	nop
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c76:	f107 0308 	add.w	r3, r7, #8
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	605a      	str	r2, [r3, #4]
 8002c80:	609a      	str	r2, [r3, #8]
 8002c82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c84:	463b      	mov	r3, r7
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c8c:	4b1d      	ldr	r3, [pc, #116]	; (8002d04 <MX_TIM3_Init+0x94>)
 8002c8e:	4a1e      	ldr	r2, [pc, #120]	; (8002d08 <MX_TIM3_Init+0x98>)
 8002c90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5-1;
 8002c92:	4b1c      	ldr	r3, [pc, #112]	; (8002d04 <MX_TIM3_Init+0x94>)
 8002c94:	2204      	movs	r2, #4
 8002c96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c98:	4b1a      	ldr	r3, [pc, #104]	; (8002d04 <MX_TIM3_Init+0x94>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 25000-1;
 8002c9e:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <MX_TIM3_Init+0x94>)
 8002ca0:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8002ca4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ca6:	4b17      	ldr	r3, [pc, #92]	; (8002d04 <MX_TIM3_Init+0x94>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cac:	4b15      	ldr	r3, [pc, #84]	; (8002d04 <MX_TIM3_Init+0x94>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002cb2:	4814      	ldr	r0, [pc, #80]	; (8002d04 <MX_TIM3_Init+0x94>)
 8002cb4:	f002 fa8c 	bl	80051d0 <HAL_TIM_Base_Init>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002cbe:	f7ff fd49 	bl	8002754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cc6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002cc8:	f107 0308 	add.w	r3, r7, #8
 8002ccc:	4619      	mov	r1, r3
 8002cce:	480d      	ldr	r0, [pc, #52]	; (8002d04 <MX_TIM3_Init+0x94>)
 8002cd0:	f002 fc38 	bl	8005544 <HAL_TIM_ConfigClockSource>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002cda:	f7ff fd3b 	bl	8002754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ce6:	463b      	mov	r3, r7
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4806      	ldr	r0, [pc, #24]	; (8002d04 <MX_TIM3_Init+0x94>)
 8002cec:	f002 fe34 	bl	8005958 <HAL_TIMEx_MasterConfigSynchronization>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002cf6:	f7ff fd2d 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002cfa:	bf00      	nop
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20003440 	.word	0x20003440
 8002d08:	40000400 	.word	0x40000400

08002d0c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d12:	f107 0308 	add.w	r3, r7, #8
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	605a      	str	r2, [r3, #4]
 8002d1c:	609a      	str	r2, [r3, #8]
 8002d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d20:	463b      	mov	r3, r7
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002d28:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <MX_TIM4_Init+0x94>)
 8002d2a:	4a1e      	ldr	r2, [pc, #120]	; (8002da4 <MX_TIM4_Init+0x98>)
 8002d2c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000-1;
 8002d2e:	4b1c      	ldr	r3, [pc, #112]	; (8002da0 <MX_TIM4_Init+0x94>)
 8002d30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d34:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d36:	4b1a      	ldr	r3, [pc, #104]	; (8002da0 <MX_TIM4_Init+0x94>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 25000-1;
 8002d3c:	4b18      	ldr	r3, [pc, #96]	; (8002da0 <MX_TIM4_Init+0x94>)
 8002d3e:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8002d42:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d44:	4b16      	ldr	r3, [pc, #88]	; (8002da0 <MX_TIM4_Init+0x94>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d4a:	4b15      	ldr	r3, [pc, #84]	; (8002da0 <MX_TIM4_Init+0x94>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002d50:	4813      	ldr	r0, [pc, #76]	; (8002da0 <MX_TIM4_Init+0x94>)
 8002d52:	f002 fa3d 	bl	80051d0 <HAL_TIM_Base_Init>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002d5c:	f7ff fcfa 	bl	8002754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002d66:	f107 0308 	add.w	r3, r7, #8
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	480c      	ldr	r0, [pc, #48]	; (8002da0 <MX_TIM4_Init+0x94>)
 8002d6e:	f002 fbe9 	bl	8005544 <HAL_TIM_ConfigClockSource>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002d78:	f7ff fcec 	bl	8002754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d80:	2300      	movs	r3, #0
 8002d82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d84:	463b      	mov	r3, r7
 8002d86:	4619      	mov	r1, r3
 8002d88:	4805      	ldr	r0, [pc, #20]	; (8002da0 <MX_TIM4_Init+0x94>)
 8002d8a:	f002 fde5 	bl	8005958 <HAL_TIMEx_MasterConfigSynchronization>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002d94:	f7ff fcde 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002d98:	bf00      	nop
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	20003488 	.word	0x20003488
 8002da4:	40000800 	.word	0x40000800

08002da8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a1c      	ldr	r2, [pc, #112]	; (8002e28 <HAL_TIM_Base_MspInit+0x80>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d116      	bne.n	8002de8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	4b1b      	ldr	r3, [pc, #108]	; (8002e2c <HAL_TIM_Base_MspInit+0x84>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	4a1a      	ldr	r2, [pc, #104]	; (8002e2c <HAL_TIM_Base_MspInit+0x84>)
 8002dc4:	f043 0302 	orr.w	r3, r3, #2
 8002dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dca:	4b18      	ldr	r3, [pc, #96]	; (8002e2c <HAL_TIM_Base_MspInit+0x84>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2101      	movs	r1, #1
 8002dda:	201d      	movs	r0, #29
 8002ddc:	f000 fa37 	bl	800324e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002de0:	201d      	movs	r0, #29
 8002de2:	f000 fa50 	bl	8003286 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002de6:	e01a      	b.n	8002e1e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a10      	ldr	r2, [pc, #64]	; (8002e30 <HAL_TIM_Base_MspInit+0x88>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d115      	bne.n	8002e1e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <HAL_TIM_Base_MspInit+0x84>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	4a0c      	ldr	r2, [pc, #48]	; (8002e2c <HAL_TIM_Base_MspInit+0x84>)
 8002dfc:	f043 0304 	orr.w	r3, r3, #4
 8002e00:	6413      	str	r3, [r2, #64]	; 0x40
 8002e02:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <HAL_TIM_Base_MspInit+0x84>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2101      	movs	r1, #1
 8002e12:	201e      	movs	r0, #30
 8002e14:	f000 fa1b 	bl	800324e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002e18:	201e      	movs	r0, #30
 8002e1a:	f000 fa34 	bl	8003286 <HAL_NVIC_EnableIRQ>
}
 8002e1e:	bf00      	nop
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40000400 	.word	0x40000400
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40000800 	.word	0x40000800

08002e34 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e38:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <MX_USART1_UART_Init+0x4c>)
 8002e3a:	4a12      	ldr	r2, [pc, #72]	; (8002e84 <MX_USART1_UART_Init+0x50>)
 8002e3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e3e:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <MX_USART1_UART_Init+0x4c>)
 8002e40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e46:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <MX_USART1_UART_Init+0x4c>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <MX_USART1_UART_Init+0x4c>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e52:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <MX_USART1_UART_Init+0x4c>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e58:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <MX_USART1_UART_Init+0x4c>)
 8002e5a:	220c      	movs	r2, #12
 8002e5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e5e:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <MX_USART1_UART_Init+0x4c>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <MX_USART1_UART_Init+0x4c>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e6a:	4805      	ldr	r0, [pc, #20]	; (8002e80 <MX_USART1_UART_Init+0x4c>)
 8002e6c:	f002 fdf6 	bl	8005a5c <HAL_UART_Init>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002e76:	f7ff fc6d 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	200034d0 	.word	0x200034d0
 8002e84:	40011000 	.word	0x40011000

08002e88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	; 0x28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e90:	f107 0314 	add.w	r3, r7, #20
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a19      	ldr	r2, [pc, #100]	; (8002f0c <HAL_UART_MspInit+0x84>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d12c      	bne.n	8002f04 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	4b18      	ldr	r3, [pc, #96]	; (8002f10 <HAL_UART_MspInit+0x88>)
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb2:	4a17      	ldr	r2, [pc, #92]	; (8002f10 <HAL_UART_MspInit+0x88>)
 8002eb4:	f043 0310 	orr.w	r3, r3, #16
 8002eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eba:	4b15      	ldr	r3, [pc, #84]	; (8002f10 <HAL_UART_MspInit+0x88>)
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	f003 0310 	and.w	r3, r3, #16
 8002ec2:	613b      	str	r3, [r7, #16]
 8002ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	4b11      	ldr	r3, [pc, #68]	; (8002f10 <HAL_UART_MspInit+0x88>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	4a10      	ldr	r2, [pc, #64]	; (8002f10 <HAL_UART_MspInit+0x88>)
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed6:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <HAL_UART_MspInit+0x88>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ee2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ef4:	2307      	movs	r3, #7
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef8:	f107 0314 	add.w	r3, r7, #20
 8002efc:	4619      	mov	r1, r3
 8002efe:	4805      	ldr	r0, [pc, #20]	; (8002f14 <HAL_UART_MspInit+0x8c>)
 8002f00:	f000 f9dc 	bl	80032bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002f04:	bf00      	nop
 8002f06:	3728      	adds	r7, #40	; 0x28
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40011000 	.word	0x40011000
 8002f10:	40023800 	.word	0x40023800
 8002f14:	40020000 	.word	0x40020000

08002f18 <Reset_Handler>:
 8002f18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f50 <LoopFillZerobss+0x12>
 8002f1c:	480d      	ldr	r0, [pc, #52]	; (8002f54 <LoopFillZerobss+0x16>)
 8002f1e:	490e      	ldr	r1, [pc, #56]	; (8002f58 <LoopFillZerobss+0x1a>)
 8002f20:	4a0e      	ldr	r2, [pc, #56]	; (8002f5c <LoopFillZerobss+0x1e>)
 8002f22:	2300      	movs	r3, #0
 8002f24:	e002      	b.n	8002f2c <LoopCopyDataInit>

08002f26 <CopyDataInit>:
 8002f26:	58d4      	ldr	r4, [r2, r3]
 8002f28:	50c4      	str	r4, [r0, r3]
 8002f2a:	3304      	adds	r3, #4

08002f2c <LoopCopyDataInit>:
 8002f2c:	18c4      	adds	r4, r0, r3
 8002f2e:	428c      	cmp	r4, r1
 8002f30:	d3f9      	bcc.n	8002f26 <CopyDataInit>
 8002f32:	4a0b      	ldr	r2, [pc, #44]	; (8002f60 <LoopFillZerobss+0x22>)
 8002f34:	4c0b      	ldr	r4, [pc, #44]	; (8002f64 <LoopFillZerobss+0x26>)
 8002f36:	2300      	movs	r3, #0
 8002f38:	e001      	b.n	8002f3e <LoopFillZerobss>

08002f3a <FillZerobss>:
 8002f3a:	6013      	str	r3, [r2, #0]
 8002f3c:	3204      	adds	r2, #4

08002f3e <LoopFillZerobss>:
 8002f3e:	42a2      	cmp	r2, r4
 8002f40:	d3fb      	bcc.n	8002f3a <FillZerobss>
 8002f42:	f7ff fe83 	bl	8002c4c <SystemInit>
 8002f46:	f00a ff15 	bl	800dd74 <__libc_init_array>
 8002f4a:	f7fe f89d 	bl	8001088 <main>
 8002f4e:	4770      	bx	lr
 8002f50:	20010000 	.word	0x20010000
 8002f54:	20000000 	.word	0x20000000
 8002f58:	20000110 	.word	0x20000110
 8002f5c:	08010020 	.word	0x08010020
 8002f60:	20000110 	.word	0x20000110
 8002f64:	20003808 	.word	0x20003808

08002f68 <ADC_IRQHandler>:
 8002f68:	e7fe      	b.n	8002f68 <ADC_IRQHandler>
	...

08002f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f70:	4b0e      	ldr	r3, [pc, #56]	; (8002fac <HAL_Init+0x40>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a0d      	ldr	r2, [pc, #52]	; (8002fac <HAL_Init+0x40>)
 8002f76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <HAL_Init+0x40>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a0a      	ldr	r2, [pc, #40]	; (8002fac <HAL_Init+0x40>)
 8002f82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f88:	4b08      	ldr	r3, [pc, #32]	; (8002fac <HAL_Init+0x40>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a07      	ldr	r2, [pc, #28]	; (8002fac <HAL_Init+0x40>)
 8002f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f94:	2003      	movs	r0, #3
 8002f96:	f000 f94f 	bl	8003238 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	f000 f808 	bl	8002fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fa0:	f7ff fd4e 	bl	8002a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40023c00 	.word	0x40023c00

08002fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fb8:	4b12      	ldr	r3, [pc, #72]	; (8003004 <HAL_InitTick+0x54>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	4b12      	ldr	r3, [pc, #72]	; (8003008 <HAL_InitTick+0x58>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 f967 	bl	80032a2 <HAL_SYSTICK_Config>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e00e      	b.n	8002ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b0f      	cmp	r3, #15
 8002fe2:	d80a      	bhi.n	8002ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fec:	f000 f92f 	bl	800324e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ff0:	4a06      	ldr	r2, [pc, #24]	; (800300c <HAL_InitTick+0x5c>)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e000      	b.n	8002ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	2000005c 	.word	0x2000005c
 8003008:	20000064 	.word	0x20000064
 800300c:	20000060 	.word	0x20000060

08003010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003014:	4b06      	ldr	r3, [pc, #24]	; (8003030 <HAL_IncTick+0x20>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	4b06      	ldr	r3, [pc, #24]	; (8003034 <HAL_IncTick+0x24>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4413      	add	r3, r2
 8003020:	4a04      	ldr	r2, [pc, #16]	; (8003034 <HAL_IncTick+0x24>)
 8003022:	6013      	str	r3, [r2, #0]
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	20000064 	.word	0x20000064
 8003034:	20003514 	.word	0x20003514

08003038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return uwTick;
 800303c:	4b03      	ldr	r3, [pc, #12]	; (800304c <HAL_GetTick+0x14>)
 800303e:	681b      	ldr	r3, [r3, #0]
}
 8003040:	4618      	mov	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	20003514 	.word	0x20003514

08003050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003058:	f7ff ffee 	bl	8003038 <HAL_GetTick>
 800305c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003068:	d005      	beq.n	8003076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800306a:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <HAL_Delay+0x44>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4413      	add	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003076:	bf00      	nop
 8003078:	f7ff ffde 	bl	8003038 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	429a      	cmp	r2, r3
 8003086:	d8f7      	bhi.n	8003078 <HAL_Delay+0x28>
  {
  }
}
 8003088:	bf00      	nop
 800308a:	bf00      	nop
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20000064 	.word	0x20000064

08003098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030a8:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <__NVIC_SetPriorityGrouping+0x44>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030b4:	4013      	ands	r3, r2
 80030b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ca:	4a04      	ldr	r2, [pc, #16]	; (80030dc <__NVIC_SetPriorityGrouping+0x44>)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	60d3      	str	r3, [r2, #12]
}
 80030d0:	bf00      	nop
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030e4:	4b04      	ldr	r3, [pc, #16]	; (80030f8 <__NVIC_GetPriorityGrouping+0x18>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	0a1b      	lsrs	r3, r3, #8
 80030ea:	f003 0307 	and.w	r3, r3, #7
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	e000ed00 	.word	0xe000ed00

080030fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310a:	2b00      	cmp	r3, #0
 800310c:	db0b      	blt.n	8003126 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800310e:	79fb      	ldrb	r3, [r7, #7]
 8003110:	f003 021f 	and.w	r2, r3, #31
 8003114:	4907      	ldr	r1, [pc, #28]	; (8003134 <__NVIC_EnableIRQ+0x38>)
 8003116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	2001      	movs	r0, #1
 800311e:	fa00 f202 	lsl.w	r2, r0, r2
 8003122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	e000e100 	.word	0xe000e100

08003138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	6039      	str	r1, [r7, #0]
 8003142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003148:	2b00      	cmp	r3, #0
 800314a:	db0a      	blt.n	8003162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	b2da      	uxtb	r2, r3
 8003150:	490c      	ldr	r1, [pc, #48]	; (8003184 <__NVIC_SetPriority+0x4c>)
 8003152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003156:	0112      	lsls	r2, r2, #4
 8003158:	b2d2      	uxtb	r2, r2
 800315a:	440b      	add	r3, r1
 800315c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003160:	e00a      	b.n	8003178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	b2da      	uxtb	r2, r3
 8003166:	4908      	ldr	r1, [pc, #32]	; (8003188 <__NVIC_SetPriority+0x50>)
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	3b04      	subs	r3, #4
 8003170:	0112      	lsls	r2, r2, #4
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	440b      	add	r3, r1
 8003176:	761a      	strb	r2, [r3, #24]
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	e000e100 	.word	0xe000e100
 8003188:	e000ed00 	.word	0xe000ed00

0800318c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800318c:	b480      	push	{r7}
 800318e:	b089      	sub	sp, #36	; 0x24
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f1c3 0307 	rsb	r3, r3, #7
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	bf28      	it	cs
 80031aa:	2304      	movcs	r3, #4
 80031ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	3304      	adds	r3, #4
 80031b2:	2b06      	cmp	r3, #6
 80031b4:	d902      	bls.n	80031bc <NVIC_EncodePriority+0x30>
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3b03      	subs	r3, #3
 80031ba:	e000      	b.n	80031be <NVIC_EncodePriority+0x32>
 80031bc:	2300      	movs	r3, #0
 80031be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c0:	f04f 32ff 	mov.w	r2, #4294967295
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43da      	mvns	r2, r3
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	401a      	ands	r2, r3
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031d4:	f04f 31ff 	mov.w	r1, #4294967295
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	fa01 f303 	lsl.w	r3, r1, r3
 80031de:	43d9      	mvns	r1, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e4:	4313      	orrs	r3, r2
         );
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3724      	adds	r7, #36	; 0x24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
	...

080031f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3b01      	subs	r3, #1
 8003200:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003204:	d301      	bcc.n	800320a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003206:	2301      	movs	r3, #1
 8003208:	e00f      	b.n	800322a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800320a:	4a0a      	ldr	r2, [pc, #40]	; (8003234 <SysTick_Config+0x40>)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3b01      	subs	r3, #1
 8003210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003212:	210f      	movs	r1, #15
 8003214:	f04f 30ff 	mov.w	r0, #4294967295
 8003218:	f7ff ff8e 	bl	8003138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800321c:	4b05      	ldr	r3, [pc, #20]	; (8003234 <SysTick_Config+0x40>)
 800321e:	2200      	movs	r2, #0
 8003220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003222:	4b04      	ldr	r3, [pc, #16]	; (8003234 <SysTick_Config+0x40>)
 8003224:	2207      	movs	r2, #7
 8003226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	e000e010 	.word	0xe000e010

08003238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff ff29 	bl	8003098 <__NVIC_SetPriorityGrouping>
}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800324e:	b580      	push	{r7, lr}
 8003250:	b086      	sub	sp, #24
 8003252:	af00      	add	r7, sp, #0
 8003254:	4603      	mov	r3, r0
 8003256:	60b9      	str	r1, [r7, #8]
 8003258:	607a      	str	r2, [r7, #4]
 800325a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003260:	f7ff ff3e 	bl	80030e0 <__NVIC_GetPriorityGrouping>
 8003264:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	68b9      	ldr	r1, [r7, #8]
 800326a:	6978      	ldr	r0, [r7, #20]
 800326c:	f7ff ff8e 	bl	800318c <NVIC_EncodePriority>
 8003270:	4602      	mov	r2, r0
 8003272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003276:	4611      	mov	r1, r2
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff ff5d 	bl	8003138 <__NVIC_SetPriority>
}
 800327e:	bf00      	nop
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b082      	sub	sp, #8
 800328a:	af00      	add	r7, sp, #0
 800328c:	4603      	mov	r3, r0
 800328e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff ff31 	bl	80030fc <__NVIC_EnableIRQ>
}
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b082      	sub	sp, #8
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7ff ffa2 	bl	80031f4 <SysTick_Config>
 80032b0:	4603      	mov	r3, r0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
	...

080032bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032bc:	b480      	push	{r7}
 80032be:	b089      	sub	sp, #36	; 0x24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032d2:	2300      	movs	r3, #0
 80032d4:	61fb      	str	r3, [r7, #28]
 80032d6:	e159      	b.n	800358c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032d8:	2201      	movs	r2, #1
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	4013      	ands	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	f040 8148 	bne.w	8003586 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d005      	beq.n	800330e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800330a:	2b02      	cmp	r3, #2
 800330c:	d130      	bne.n	8003370 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	2203      	movs	r2, #3
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4013      	ands	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4313      	orrs	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003344:	2201      	movs	r2, #1
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4013      	ands	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	091b      	lsrs	r3, r3, #4
 800335a:	f003 0201 	and.w	r2, r3, #1
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 0303 	and.w	r3, r3, #3
 8003378:	2b03      	cmp	r3, #3
 800337a:	d017      	beq.n	80033ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	2203      	movs	r2, #3
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4013      	ands	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d123      	bne.n	8003400 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	08da      	lsrs	r2, r3, #3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3208      	adds	r2, #8
 80033c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	220f      	movs	r2, #15
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	43db      	mvns	r3, r3
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4013      	ands	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	08da      	lsrs	r2, r3, #3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3208      	adds	r2, #8
 80033fa:	69b9      	ldr	r1, [r7, #24]
 80033fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	2203      	movs	r2, #3
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4013      	ands	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f003 0203 	and.w	r2, r3, #3
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4313      	orrs	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 80a2 	beq.w	8003586 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	4b57      	ldr	r3, [pc, #348]	; (80035a4 <HAL_GPIO_Init+0x2e8>)
 8003448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344a:	4a56      	ldr	r2, [pc, #344]	; (80035a4 <HAL_GPIO_Init+0x2e8>)
 800344c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003450:	6453      	str	r3, [r2, #68]	; 0x44
 8003452:	4b54      	ldr	r3, [pc, #336]	; (80035a4 <HAL_GPIO_Init+0x2e8>)
 8003454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800345e:	4a52      	ldr	r2, [pc, #328]	; (80035a8 <HAL_GPIO_Init+0x2ec>)
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	089b      	lsrs	r3, r3, #2
 8003464:	3302      	adds	r3, #2
 8003466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800346a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	220f      	movs	r2, #15
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43db      	mvns	r3, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4013      	ands	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a49      	ldr	r2, [pc, #292]	; (80035ac <HAL_GPIO_Init+0x2f0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d019      	beq.n	80034be <HAL_GPIO_Init+0x202>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a48      	ldr	r2, [pc, #288]	; (80035b0 <HAL_GPIO_Init+0x2f4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d013      	beq.n	80034ba <HAL_GPIO_Init+0x1fe>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a47      	ldr	r2, [pc, #284]	; (80035b4 <HAL_GPIO_Init+0x2f8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00d      	beq.n	80034b6 <HAL_GPIO_Init+0x1fa>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a46      	ldr	r2, [pc, #280]	; (80035b8 <HAL_GPIO_Init+0x2fc>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d007      	beq.n	80034b2 <HAL_GPIO_Init+0x1f6>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a45      	ldr	r2, [pc, #276]	; (80035bc <HAL_GPIO_Init+0x300>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d101      	bne.n	80034ae <HAL_GPIO_Init+0x1f2>
 80034aa:	2304      	movs	r3, #4
 80034ac:	e008      	b.n	80034c0 <HAL_GPIO_Init+0x204>
 80034ae:	2307      	movs	r3, #7
 80034b0:	e006      	b.n	80034c0 <HAL_GPIO_Init+0x204>
 80034b2:	2303      	movs	r3, #3
 80034b4:	e004      	b.n	80034c0 <HAL_GPIO_Init+0x204>
 80034b6:	2302      	movs	r3, #2
 80034b8:	e002      	b.n	80034c0 <HAL_GPIO_Init+0x204>
 80034ba:	2301      	movs	r3, #1
 80034bc:	e000      	b.n	80034c0 <HAL_GPIO_Init+0x204>
 80034be:	2300      	movs	r3, #0
 80034c0:	69fa      	ldr	r2, [r7, #28]
 80034c2:	f002 0203 	and.w	r2, r2, #3
 80034c6:	0092      	lsls	r2, r2, #2
 80034c8:	4093      	lsls	r3, r2
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034d0:	4935      	ldr	r1, [pc, #212]	; (80035a8 <HAL_GPIO_Init+0x2ec>)
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	089b      	lsrs	r3, r3, #2
 80034d6:	3302      	adds	r3, #2
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034de:	4b38      	ldr	r3, [pc, #224]	; (80035c0 <HAL_GPIO_Init+0x304>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	43db      	mvns	r3, r3
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	4013      	ands	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003502:	4a2f      	ldr	r2, [pc, #188]	; (80035c0 <HAL_GPIO_Init+0x304>)
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003508:	4b2d      	ldr	r3, [pc, #180]	; (80035c0 <HAL_GPIO_Init+0x304>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	43db      	mvns	r3, r3
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4013      	ands	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	4313      	orrs	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800352c:	4a24      	ldr	r2, [pc, #144]	; (80035c0 <HAL_GPIO_Init+0x304>)
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003532:	4b23      	ldr	r3, [pc, #140]	; (80035c0 <HAL_GPIO_Init+0x304>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	43db      	mvns	r3, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4013      	ands	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003556:	4a1a      	ldr	r2, [pc, #104]	; (80035c0 <HAL_GPIO_Init+0x304>)
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800355c:	4b18      	ldr	r3, [pc, #96]	; (80035c0 <HAL_GPIO_Init+0x304>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	43db      	mvns	r3, r3
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003580:	4a0f      	ldr	r2, [pc, #60]	; (80035c0 <HAL_GPIO_Init+0x304>)
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	3301      	adds	r3, #1
 800358a:	61fb      	str	r3, [r7, #28]
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	2b0f      	cmp	r3, #15
 8003590:	f67f aea2 	bls.w	80032d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003594:	bf00      	nop
 8003596:	bf00      	nop
 8003598:	3724      	adds	r7, #36	; 0x24
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40023800 	.word	0x40023800
 80035a8:	40013800 	.word	0x40013800
 80035ac:	40020000 	.word	0x40020000
 80035b0:	40020400 	.word	0x40020400
 80035b4:	40020800 	.word	0x40020800
 80035b8:	40020c00 	.word	0x40020c00
 80035bc:	40021000 	.word	0x40021000
 80035c0:	40013c00 	.word	0x40013c00

080035c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	807b      	strh	r3, [r7, #2]
 80035d0:	4613      	mov	r3, r2
 80035d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035d4:	787b      	ldrb	r3, [r7, #1]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035da:	887a      	ldrh	r2, [r7, #2]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035e0:	e003      	b.n	80035ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035e2:	887b      	ldrh	r3, [r7, #2]
 80035e4:	041a      	lsls	r2, r3, #16
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	619a      	str	r2, [r3, #24]
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
	...

080035f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e267      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d075      	beq.n	8003702 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003616:	4b88      	ldr	r3, [pc, #544]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 030c 	and.w	r3, r3, #12
 800361e:	2b04      	cmp	r3, #4
 8003620:	d00c      	beq.n	800363c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003622:	4b85      	ldr	r3, [pc, #532]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800362a:	2b08      	cmp	r3, #8
 800362c:	d112      	bne.n	8003654 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800362e:	4b82      	ldr	r3, [pc, #520]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800363a:	d10b      	bne.n	8003654 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800363c:	4b7e      	ldr	r3, [pc, #504]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d05b      	beq.n	8003700 <HAL_RCC_OscConfig+0x108>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d157      	bne.n	8003700 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e242      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800365c:	d106      	bne.n	800366c <HAL_RCC_OscConfig+0x74>
 800365e:	4b76      	ldr	r3, [pc, #472]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a75      	ldr	r2, [pc, #468]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	e01d      	b.n	80036a8 <HAL_RCC_OscConfig+0xb0>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003674:	d10c      	bne.n	8003690 <HAL_RCC_OscConfig+0x98>
 8003676:	4b70      	ldr	r3, [pc, #448]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a6f      	ldr	r2, [pc, #444]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800367c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	4b6d      	ldr	r3, [pc, #436]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a6c      	ldr	r2, [pc, #432]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	e00b      	b.n	80036a8 <HAL_RCC_OscConfig+0xb0>
 8003690:	4b69      	ldr	r3, [pc, #420]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a68      	ldr	r2, [pc, #416]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800369a:	6013      	str	r3, [r2, #0]
 800369c:	4b66      	ldr	r3, [pc, #408]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a65      	ldr	r2, [pc, #404]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 80036a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d013      	beq.n	80036d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b0:	f7ff fcc2 	bl	8003038 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036b8:	f7ff fcbe 	bl	8003038 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b64      	cmp	r3, #100	; 0x64
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e207      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ca:	4b5b      	ldr	r3, [pc, #364]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0f0      	beq.n	80036b8 <HAL_RCC_OscConfig+0xc0>
 80036d6:	e014      	b.n	8003702 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d8:	f7ff fcae 	bl	8003038 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036e0:	f7ff fcaa 	bl	8003038 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b64      	cmp	r3, #100	; 0x64
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e1f3      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036f2:	4b51      	ldr	r3, [pc, #324]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0xe8>
 80036fe:	e000      	b.n	8003702 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d063      	beq.n	80037d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800370e:	4b4a      	ldr	r3, [pc, #296]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 030c 	and.w	r3, r3, #12
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00b      	beq.n	8003732 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800371a:	4b47      	ldr	r3, [pc, #284]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003722:	2b08      	cmp	r3, #8
 8003724:	d11c      	bne.n	8003760 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003726:	4b44      	ldr	r3, [pc, #272]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d116      	bne.n	8003760 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003732:	4b41      	ldr	r3, [pc, #260]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d005      	beq.n	800374a <HAL_RCC_OscConfig+0x152>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d001      	beq.n	800374a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e1c7      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800374a:	4b3b      	ldr	r3, [pc, #236]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	4937      	ldr	r1, [pc, #220]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800375a:	4313      	orrs	r3, r2
 800375c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800375e:	e03a      	b.n	80037d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d020      	beq.n	80037aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003768:	4b34      	ldr	r3, [pc, #208]	; (800383c <HAL_RCC_OscConfig+0x244>)
 800376a:	2201      	movs	r2, #1
 800376c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376e:	f7ff fc63 	bl	8003038 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003776:	f7ff fc5f 	bl	8003038 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e1a8      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003788:	4b2b      	ldr	r3, [pc, #172]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003794:	4b28      	ldr	r3, [pc, #160]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	4925      	ldr	r1, [pc, #148]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	600b      	str	r3, [r1, #0]
 80037a8:	e015      	b.n	80037d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037aa:	4b24      	ldr	r3, [pc, #144]	; (800383c <HAL_RCC_OscConfig+0x244>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b0:	f7ff fc42 	bl	8003038 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037b8:	f7ff fc3e 	bl	8003038 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e187      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ca:	4b1b      	ldr	r3, [pc, #108]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d036      	beq.n	8003850 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d016      	beq.n	8003818 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ea:	4b15      	ldr	r3, [pc, #84]	; (8003840 <HAL_RCC_OscConfig+0x248>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f0:	f7ff fc22 	bl	8003038 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037f8:	f7ff fc1e 	bl	8003038 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e167      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800380a:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <HAL_RCC_OscConfig+0x240>)
 800380c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCC_OscConfig+0x200>
 8003816:	e01b      	b.n	8003850 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003818:	4b09      	ldr	r3, [pc, #36]	; (8003840 <HAL_RCC_OscConfig+0x248>)
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800381e:	f7ff fc0b 	bl	8003038 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003824:	e00e      	b.n	8003844 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003826:	f7ff fc07 	bl	8003038 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d907      	bls.n	8003844 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e150      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
 8003838:	40023800 	.word	0x40023800
 800383c:	42470000 	.word	0x42470000
 8003840:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003844:	4b88      	ldr	r3, [pc, #544]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1ea      	bne.n	8003826 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 8097 	beq.w	800398c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800385e:	2300      	movs	r3, #0
 8003860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003862:	4b81      	ldr	r3, [pc, #516]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10f      	bne.n	800388e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800386e:	2300      	movs	r3, #0
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	4b7d      	ldr	r3, [pc, #500]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	4a7c      	ldr	r2, [pc, #496]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800387c:	6413      	str	r3, [r2, #64]	; 0x40
 800387e:	4b7a      	ldr	r3, [pc, #488]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003886:	60bb      	str	r3, [r7, #8]
 8003888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800388a:	2301      	movs	r3, #1
 800388c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388e:	4b77      	ldr	r3, [pc, #476]	; (8003a6c <HAL_RCC_OscConfig+0x474>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003896:	2b00      	cmp	r3, #0
 8003898:	d118      	bne.n	80038cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800389a:	4b74      	ldr	r3, [pc, #464]	; (8003a6c <HAL_RCC_OscConfig+0x474>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a73      	ldr	r2, [pc, #460]	; (8003a6c <HAL_RCC_OscConfig+0x474>)
 80038a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038a6:	f7ff fbc7 	bl	8003038 <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ae:	f7ff fbc3 	bl	8003038 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e10c      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c0:	4b6a      	ldr	r3, [pc, #424]	; (8003a6c <HAL_RCC_OscConfig+0x474>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0f0      	beq.n	80038ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d106      	bne.n	80038e2 <HAL_RCC_OscConfig+0x2ea>
 80038d4:	4b64      	ldr	r3, [pc, #400]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80038d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d8:	4a63      	ldr	r2, [pc, #396]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80038da:	f043 0301 	orr.w	r3, r3, #1
 80038de:	6713      	str	r3, [r2, #112]	; 0x70
 80038e0:	e01c      	b.n	800391c <HAL_RCC_OscConfig+0x324>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	2b05      	cmp	r3, #5
 80038e8:	d10c      	bne.n	8003904 <HAL_RCC_OscConfig+0x30c>
 80038ea:	4b5f      	ldr	r3, [pc, #380]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80038ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ee:	4a5e      	ldr	r2, [pc, #376]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80038f0:	f043 0304 	orr.w	r3, r3, #4
 80038f4:	6713      	str	r3, [r2, #112]	; 0x70
 80038f6:	4b5c      	ldr	r3, [pc, #368]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80038f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fa:	4a5b      	ldr	r2, [pc, #364]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80038fc:	f043 0301 	orr.w	r3, r3, #1
 8003900:	6713      	str	r3, [r2, #112]	; 0x70
 8003902:	e00b      	b.n	800391c <HAL_RCC_OscConfig+0x324>
 8003904:	4b58      	ldr	r3, [pc, #352]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003908:	4a57      	ldr	r2, [pc, #348]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 800390a:	f023 0301 	bic.w	r3, r3, #1
 800390e:	6713      	str	r3, [r2, #112]	; 0x70
 8003910:	4b55      	ldr	r3, [pc, #340]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003914:	4a54      	ldr	r2, [pc, #336]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003916:	f023 0304 	bic.w	r3, r3, #4
 800391a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d015      	beq.n	8003950 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003924:	f7ff fb88 	bl	8003038 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800392a:	e00a      	b.n	8003942 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800392c:	f7ff fb84 	bl	8003038 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	f241 3288 	movw	r2, #5000	; 0x1388
 800393a:	4293      	cmp	r3, r2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e0cb      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003942:	4b49      	ldr	r3, [pc, #292]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0ee      	beq.n	800392c <HAL_RCC_OscConfig+0x334>
 800394e:	e014      	b.n	800397a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003950:	f7ff fb72 	bl	8003038 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003956:	e00a      	b.n	800396e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003958:	f7ff fb6e 	bl	8003038 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	; 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e0b5      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800396e:	4b3e      	ldr	r3, [pc, #248]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1ee      	bne.n	8003958 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800397a:	7dfb      	ldrb	r3, [r7, #23]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d105      	bne.n	800398c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003980:	4b39      	ldr	r3, [pc, #228]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	4a38      	ldr	r2, [pc, #224]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800398a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 80a1 	beq.w	8003ad8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003996:	4b34      	ldr	r3, [pc, #208]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d05c      	beq.n	8003a5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d141      	bne.n	8003a2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039aa:	4b31      	ldr	r3, [pc, #196]	; (8003a70 <HAL_RCC_OscConfig+0x478>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b0:	f7ff fb42 	bl	8003038 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039b8:	f7ff fb3e 	bl	8003038 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e087      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ca:	4b27      	ldr	r3, [pc, #156]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69da      	ldr	r2, [r3, #28]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	019b      	lsls	r3, r3, #6
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ec:	085b      	lsrs	r3, r3, #1
 80039ee:	3b01      	subs	r3, #1
 80039f0:	041b      	lsls	r3, r3, #16
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	061b      	lsls	r3, r3, #24
 80039fa:	491b      	ldr	r1, [pc, #108]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a00:	4b1b      	ldr	r3, [pc, #108]	; (8003a70 <HAL_RCC_OscConfig+0x478>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a06:	f7ff fb17 	bl	8003038 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a0e:	f7ff fb13 	bl	8003038 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e05c      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a20:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0f0      	beq.n	8003a0e <HAL_RCC_OscConfig+0x416>
 8003a2c:	e054      	b.n	8003ad8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a2e:	4b10      	ldr	r3, [pc, #64]	; (8003a70 <HAL_RCC_OscConfig+0x478>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a34:	f7ff fb00 	bl	8003038 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a3c:	f7ff fafc 	bl	8003038 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e045      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4e:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <HAL_RCC_OscConfig+0x470>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x444>
 8003a5a:	e03d      	b.n	8003ad8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d107      	bne.n	8003a74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e038      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	40007000 	.word	0x40007000
 8003a70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a74:	4b1b      	ldr	r3, [pc, #108]	; (8003ae4 <HAL_RCC_OscConfig+0x4ec>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d028      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d121      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d11a      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003aaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d111      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aba:	085b      	lsrs	r3, r3, #1
 8003abc:	3b01      	subs	r3, #1
 8003abe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d107      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d001      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e000      	b.n	8003ada <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40023800 	.word	0x40023800

08003ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e0cc      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003afc:	4b68      	ldr	r3, [pc, #416]	; (8003ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d90c      	bls.n	8003b24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0a:	4b65      	ldr	r3, [pc, #404]	; (8003ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b12:	4b63      	ldr	r3, [pc, #396]	; (8003ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d001      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e0b8      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d020      	beq.n	8003b72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b3c:	4b59      	ldr	r3, [pc, #356]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	4a58      	ldr	r2, [pc, #352]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b54:	4b53      	ldr	r3, [pc, #332]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	4a52      	ldr	r2, [pc, #328]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b60:	4b50      	ldr	r3, [pc, #320]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	494d      	ldr	r1, [pc, #308]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d044      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d107      	bne.n	8003b96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b86:	4b47      	ldr	r3, [pc, #284]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d119      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e07f      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d003      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	d107      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ba6:	4b3f      	ldr	r3, [pc, #252]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d109      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e06f      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb6:	4b3b      	ldr	r3, [pc, #236]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e067      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bc6:	4b37      	ldr	r3, [pc, #220]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f023 0203 	bic.w	r2, r3, #3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	4934      	ldr	r1, [pc, #208]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bd8:	f7ff fa2e 	bl	8003038 <HAL_GetTick>
 8003bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bde:	e00a      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003be0:	f7ff fa2a 	bl	8003038 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e04f      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf6:	4b2b      	ldr	r3, [pc, #172]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 020c 	and.w	r2, r3, #12
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d1eb      	bne.n	8003be0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c08:	4b25      	ldr	r3, [pc, #148]	; (8003ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d20c      	bcs.n	8003c30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c16:	4b22      	ldr	r3, [pc, #136]	; (8003ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1e:	4b20      	ldr	r3, [pc, #128]	; (8003ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d001      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e032      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d008      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c3c:	4b19      	ldr	r3, [pc, #100]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	4916      	ldr	r1, [pc, #88]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d009      	beq.n	8003c6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c5a:	4b12      	ldr	r3, [pc, #72]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	490e      	ldr	r1, [pc, #56]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c6e:	f000 f821 	bl	8003cb4 <HAL_RCC_GetSysClockFreq>
 8003c72:	4602      	mov	r2, r0
 8003c74:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	091b      	lsrs	r3, r3, #4
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	490a      	ldr	r1, [pc, #40]	; (8003ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c80:	5ccb      	ldrb	r3, [r1, r3]
 8003c82:	fa22 f303 	lsr.w	r3, r2, r3
 8003c86:	4a09      	ldr	r2, [pc, #36]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c8a:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff f98e 	bl	8002fb0 <HAL_InitTick>

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40023c00 	.word	0x40023c00
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	0800fb20 	.word	0x0800fb20
 8003cac:	2000005c 	.word	0x2000005c
 8003cb0:	20000060 	.word	0x20000060

08003cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cb8:	b090      	sub	sp, #64	; 0x40
 8003cba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ccc:	4b59      	ldr	r3, [pc, #356]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 030c 	and.w	r3, r3, #12
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d00d      	beq.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	f200 80a1 	bhi.w	8003e20 <HAL_RCC_GetSysClockFreq+0x16c>
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d003      	beq.n	8003cee <HAL_RCC_GetSysClockFreq+0x3a>
 8003ce6:	e09b      	b.n	8003e20 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ce8:	4b53      	ldr	r3, [pc, #332]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x184>)
 8003cea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003cec:	e09b      	b.n	8003e26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cee:	4b53      	ldr	r3, [pc, #332]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x188>)
 8003cf0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003cf2:	e098      	b.n	8003e26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cf4:	4b4f      	ldr	r3, [pc, #316]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cfc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cfe:	4b4d      	ldr	r3, [pc, #308]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d028      	beq.n	8003d5c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d0a:	4b4a      	ldr	r3, [pc, #296]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	099b      	lsrs	r3, r3, #6
 8003d10:	2200      	movs	r2, #0
 8003d12:	623b      	str	r3, [r7, #32]
 8003d14:	627a      	str	r2, [r7, #36]	; 0x24
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	4b47      	ldr	r3, [pc, #284]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x188>)
 8003d20:	fb03 f201 	mul.w	r2, r3, r1
 8003d24:	2300      	movs	r3, #0
 8003d26:	fb00 f303 	mul.w	r3, r0, r3
 8003d2a:	4413      	add	r3, r2
 8003d2c:	4a43      	ldr	r2, [pc, #268]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x188>)
 8003d2e:	fba0 1202 	umull	r1, r2, r0, r2
 8003d32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d34:	460a      	mov	r2, r1
 8003d36:	62ba      	str	r2, [r7, #40]	; 0x28
 8003d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d3a:	4413      	add	r3, r2
 8003d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d40:	2200      	movs	r2, #0
 8003d42:	61bb      	str	r3, [r7, #24]
 8003d44:	61fa      	str	r2, [r7, #28]
 8003d46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003d4e:	f7fc fa9f 	bl	8000290 <__aeabi_uldivmod>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	4613      	mov	r3, r2
 8003d58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d5a:	e053      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d5c:	4b35      	ldr	r3, [pc, #212]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	099b      	lsrs	r3, r3, #6
 8003d62:	2200      	movs	r2, #0
 8003d64:	613b      	str	r3, [r7, #16]
 8003d66:	617a      	str	r2, [r7, #20]
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d6e:	f04f 0b00 	mov.w	fp, #0
 8003d72:	4652      	mov	r2, sl
 8003d74:	465b      	mov	r3, fp
 8003d76:	f04f 0000 	mov.w	r0, #0
 8003d7a:	f04f 0100 	mov.w	r1, #0
 8003d7e:	0159      	lsls	r1, r3, #5
 8003d80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d84:	0150      	lsls	r0, r2, #5
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	ebb2 080a 	subs.w	r8, r2, sl
 8003d8e:	eb63 090b 	sbc.w	r9, r3, fp
 8003d92:	f04f 0200 	mov.w	r2, #0
 8003d96:	f04f 0300 	mov.w	r3, #0
 8003d9a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d9e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003da2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003da6:	ebb2 0408 	subs.w	r4, r2, r8
 8003daa:	eb63 0509 	sbc.w	r5, r3, r9
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	f04f 0300 	mov.w	r3, #0
 8003db6:	00eb      	lsls	r3, r5, #3
 8003db8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dbc:	00e2      	lsls	r2, r4, #3
 8003dbe:	4614      	mov	r4, r2
 8003dc0:	461d      	mov	r5, r3
 8003dc2:	eb14 030a 	adds.w	r3, r4, sl
 8003dc6:	603b      	str	r3, [r7, #0]
 8003dc8:	eb45 030b 	adc.w	r3, r5, fp
 8003dcc:	607b      	str	r3, [r7, #4]
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	f04f 0300 	mov.w	r3, #0
 8003dd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dda:	4629      	mov	r1, r5
 8003ddc:	028b      	lsls	r3, r1, #10
 8003dde:	4621      	mov	r1, r4
 8003de0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003de4:	4621      	mov	r1, r4
 8003de6:	028a      	lsls	r2, r1, #10
 8003de8:	4610      	mov	r0, r2
 8003dea:	4619      	mov	r1, r3
 8003dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dee:	2200      	movs	r2, #0
 8003df0:	60bb      	str	r3, [r7, #8]
 8003df2:	60fa      	str	r2, [r7, #12]
 8003df4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003df8:	f7fc fa4a 	bl	8000290 <__aeabi_uldivmod>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4613      	mov	r3, r2
 8003e02:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e04:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	0c1b      	lsrs	r3, r3, #16
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	3301      	adds	r3, #1
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003e14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e1e:	e002      	b.n	8003e26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e20:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e22:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3740      	adds	r7, #64	; 0x40
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e32:	bf00      	nop
 8003e34:	40023800 	.word	0x40023800
 8003e38:	00f42400 	.word	0x00f42400
 8003e3c:	017d7840 	.word	0x017d7840

08003e40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e44:	4b03      	ldr	r3, [pc, #12]	; (8003e54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e46:	681b      	ldr	r3, [r3, #0]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	2000005c 	.word	0x2000005c

08003e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e5c:	f7ff fff0 	bl	8003e40 <HAL_RCC_GetHCLKFreq>
 8003e60:	4602      	mov	r2, r0
 8003e62:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	0a9b      	lsrs	r3, r3, #10
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	4903      	ldr	r1, [pc, #12]	; (8003e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e6e:	5ccb      	ldrb	r3, [r1, r3]
 8003e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	0800fb30 	.word	0x0800fb30

08003e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e84:	f7ff ffdc 	bl	8003e40 <HAL_RCC_GetHCLKFreq>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	0b5b      	lsrs	r3, r3, #13
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	4903      	ldr	r1, [pc, #12]	; (8003ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e96:	5ccb      	ldrb	r3, [r1, r3]
 8003e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	0800fb30 	.word	0x0800fb30

08003ea8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d105      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d035      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ed0:	4b67      	ldr	r3, [pc, #412]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ed6:	f7ff f8af 	bl	8003038 <HAL_GetTick>
 8003eda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003edc:	e008      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ede:	f7ff f8ab 	bl	8003038 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e0ba      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ef0:	4b60      	ldr	r3, [pc, #384]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1f0      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	019a      	lsls	r2, r3, #6
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	071b      	lsls	r3, r3, #28
 8003f08:	495a      	ldr	r1, [pc, #360]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f10:	4b57      	ldr	r3, [pc, #348]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003f12:	2201      	movs	r2, #1
 8003f14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f16:	f7ff f88f 	bl	8003038 <HAL_GetTick>
 8003f1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f1e:	f7ff f88b 	bl	8003038 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e09a      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f30:	4b50      	ldr	r3, [pc, #320]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0f0      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 8083 	beq.w	8004050 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]
 8003f4e:	4b49      	ldr	r3, [pc, #292]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	4a48      	ldr	r2, [pc, #288]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f58:	6413      	str	r3, [r2, #64]	; 0x40
 8003f5a:	4b46      	ldr	r3, [pc, #280]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f66:	4b44      	ldr	r3, [pc, #272]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a43      	ldr	r2, [pc, #268]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f70:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f72:	f7ff f861 	bl	8003038 <HAL_GetTick>
 8003f76:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f78:	e008      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f7a:	f7ff f85d 	bl	8003038 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e06c      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f8c:	4b3a      	ldr	r3, [pc, #232]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d0f0      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f98:	4b36      	ldr	r3, [pc, #216]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d02f      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d028      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fb6:	4b2f      	ldr	r3, [pc, #188]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fbe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fc0:	4b2e      	ldr	r3, [pc, #184]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fc6:	4b2d      	ldr	r3, [pc, #180]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003fcc:	4a29      	ldr	r2, [pc, #164]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003fd2:	4b28      	ldr	r3, [pc, #160]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d114      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003fde:	f7ff f82b 	bl	8003038 <HAL_GetTick>
 8003fe2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe4:	e00a      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe6:	f7ff f827 	bl	8003038 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e034      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ffc:	4b1d      	ldr	r3, [pc, #116]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0ee      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004010:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004014:	d10d      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004016:	4b17      	ldr	r3, [pc, #92]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800402a:	4912      	ldr	r1, [pc, #72]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800402c:	4313      	orrs	r3, r2
 800402e:	608b      	str	r3, [r1, #8]
 8004030:	e005      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004032:	4b10      	ldr	r3, [pc, #64]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	4a0f      	ldr	r2, [pc, #60]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004038:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800403c:	6093      	str	r3, [r2, #8]
 800403e:	4b0d      	ldr	r3, [pc, #52]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004040:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800404a:	490a      	ldr	r1, [pc, #40]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800404c:	4313      	orrs	r3, r2
 800404e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0308 	and.w	r3, r3, #8
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	7c1a      	ldrb	r2, [r3, #16]
 8004060:	4b07      	ldr	r3, [pc, #28]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004062:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3718      	adds	r7, #24
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	42470068 	.word	0x42470068
 8004074:	40023800 	.word	0x40023800
 8004078:	40007000 	.word	0x40007000
 800407c:	42470e40 	.word	0x42470e40
 8004080:	424711e0 	.word	0x424711e0

08004084 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e066      	b.n	8004168 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	7f5b      	ldrb	r3, [r3, #29]
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d105      	bne.n	80040b0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fe fbb2 	bl	8002814 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	22ca      	movs	r2, #202	; 0xca
 80040bc:	625a      	str	r2, [r3, #36]	; 0x24
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2253      	movs	r2, #83	; 0x53
 80040c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fa45 	bl	8004556 <RTC_EnterInitMode>
 80040cc:	4603      	mov	r3, r0
 80040ce:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d12c      	bne.n	8004130 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6812      	ldr	r2, [r2, #0]
 80040e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80040e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040e8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6899      	ldr	r1, [r3, #8]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	431a      	orrs	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	68d2      	ldr	r2, [r2, #12]
 8004110:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6919      	ldr	r1, [r3, #16]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	041a      	lsls	r2, r3, #16
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 fa4c 	bl	80045c4 <RTC_ExitInitMode>
 800412c:	4603      	mov	r3, r0
 800412e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004130:	7bfb      	ldrb	r3, [r7, #15]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d113      	bne.n	800415e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004144:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699a      	ldr	r2, [r3, #24]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	22ff      	movs	r2, #255	; 0xff
 8004164:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004166:	7bfb      	ldrb	r3, [r7, #15]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004170:	b590      	push	{r4, r7, lr}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	7f1b      	ldrb	r3, [r3, #28]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_RTC_SetTime+0x1c>
 8004188:	2302      	movs	r3, #2
 800418a:	e087      	b.n	800429c <HAL_RTC_SetTime+0x12c>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2201      	movs	r2, #1
 8004190:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2202      	movs	r2, #2
 8004196:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d126      	bne.n	80041ec <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d102      	bne.n	80041b2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2200      	movs	r2, #0
 80041b0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 fa29 	bl	800460e <RTC_ByteToBcd2>
 80041bc:	4603      	mov	r3, r0
 80041be:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	785b      	ldrb	r3, [r3, #1]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 fa22 	bl	800460e <RTC_ByteToBcd2>
 80041ca:	4603      	mov	r3, r0
 80041cc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80041ce:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	789b      	ldrb	r3, [r3, #2]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f000 fa1a 	bl	800460e <RTC_ByteToBcd2>
 80041da:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80041dc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	78db      	ldrb	r3, [r3, #3]
 80041e4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80041e6:	4313      	orrs	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	e018      	b.n	800421e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d102      	bne.n	8004200 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2200      	movs	r2, #0
 80041fe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	785b      	ldrb	r3, [r3, #1]
 800420a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800420c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004212:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	78db      	ldrb	r3, [r3, #3]
 8004218:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800421a:	4313      	orrs	r3, r2
 800421c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	22ca      	movs	r2, #202	; 0xca
 8004224:	625a      	str	r2, [r3, #36]	; 0x24
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2253      	movs	r2, #83	; 0x53
 800422c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 f991 	bl	8004556 <RTC_EnterInitMode>
 8004234:	4603      	mov	r3, r0
 8004236:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004238:	7cfb      	ldrb	r3, [r7, #19]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d120      	bne.n	8004280 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004248:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800424c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800425c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6899      	ldr	r1, [r3, #8]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	431a      	orrs	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 f9a4 	bl	80045c4 <RTC_ExitInitMode>
 800427c:	4603      	mov	r3, r0
 800427e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004280:	7cfb      	ldrb	r3, [r7, #19]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d102      	bne.n	800428c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2201      	movs	r2, #1
 800428a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	22ff      	movs	r2, #255	; 0xff
 8004292:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	771a      	strb	r2, [r3, #28]

  return status;
 800429a:	7cfb      	ldrb	r3, [r7, #19]
}
 800429c:	4618      	mov	r0, r3
 800429e:	371c      	adds	r7, #28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd90      	pop	{r4, r7, pc}

080042a4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80042d6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80042da:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	0c1b      	lsrs	r3, r3, #16
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	0a1b      	lsrs	r3, r3, #8
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004304:	b2da      	uxtb	r2, r3
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	0d9b      	lsrs	r3, r3, #22
 800430e:	b2db      	uxtb	r3, r3
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	b2da      	uxtb	r2, r3
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d11a      	bne.n	8004356 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f000 f98f 	bl	8004648 <RTC_Bcd2ToByte>
 800432a:	4603      	mov	r3, r0
 800432c:	461a      	mov	r2, r3
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	785b      	ldrb	r3, [r3, #1]
 8004336:	4618      	mov	r0, r3
 8004338:	f000 f986 	bl	8004648 <RTC_Bcd2ToByte>
 800433c:	4603      	mov	r3, r0
 800433e:	461a      	mov	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	789b      	ldrb	r3, [r3, #2]
 8004348:	4618      	mov	r0, r3
 800434a:	f000 f97d 	bl	8004648 <RTC_Bcd2ToByte>
 800434e:	4603      	mov	r3, r0
 8004350:	461a      	mov	r2, r3
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004360:	b590      	push	{r4, r7, lr}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	7f1b      	ldrb	r3, [r3, #28]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_RTC_SetDate+0x1c>
 8004378:	2302      	movs	r3, #2
 800437a:	e071      	b.n	8004460 <HAL_RTC_SetDate+0x100>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2201      	movs	r2, #1
 8004380:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2202      	movs	r2, #2
 8004386:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10e      	bne.n	80043ac <HAL_RTC_SetDate+0x4c>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	785b      	ldrb	r3, [r3, #1]
 8004392:	f003 0310 	and.w	r3, r3, #16
 8004396:	2b00      	cmp	r3, #0
 8004398:	d008      	beq.n	80043ac <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	785b      	ldrb	r3, [r3, #1]
 800439e:	f023 0310 	bic.w	r3, r3, #16
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	330a      	adds	r3, #10
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d11c      	bne.n	80043ec <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	78db      	ldrb	r3, [r3, #3]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 f929 	bl	800460e <RTC_ByteToBcd2>
 80043bc:	4603      	mov	r3, r0
 80043be:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	785b      	ldrb	r3, [r3, #1]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 f922 	bl	800460e <RTC_ByteToBcd2>
 80043ca:	4603      	mov	r3, r0
 80043cc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80043ce:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	789b      	ldrb	r3, [r3, #2]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 f91a 	bl	800460e <RTC_ByteToBcd2>
 80043da:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80043dc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80043e6:	4313      	orrs	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]
 80043ea:	e00e      	b.n	800440a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	78db      	ldrb	r3, [r3, #3]
 80043f0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	785b      	ldrb	r3, [r3, #1]
 80043f6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80043f8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80043fe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004406:	4313      	orrs	r3, r2
 8004408:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	22ca      	movs	r2, #202	; 0xca
 8004410:	625a      	str	r2, [r3, #36]	; 0x24
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2253      	movs	r2, #83	; 0x53
 8004418:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 f89b 	bl	8004556 <RTC_EnterInitMode>
 8004420:	4603      	mov	r3, r0
 8004422:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004424:	7cfb      	ldrb	r3, [r7, #19]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10c      	bne.n	8004444 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004434:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004438:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f000 f8c2 	bl	80045c4 <RTC_ExitInitMode>
 8004440:	4603      	mov	r3, r0
 8004442:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004444:	7cfb      	ldrb	r3, [r7, #19]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d102      	bne.n	8004450 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2201      	movs	r2, #1
 800444e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	22ff      	movs	r2, #255	; 0xff
 8004456:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	771a      	strb	r2, [r3, #28]

  return status;
 800445e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004460:	4618      	mov	r0, r3
 8004462:	371c      	adds	r7, #28
 8004464:	46bd      	mov	sp, r7
 8004466:	bd90      	pop	{r4, r7, pc}

08004468 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004482:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004486:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	0c1b      	lsrs	r3, r3, #16
 800448c:	b2da      	uxtb	r2, r3
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	0a1b      	lsrs	r3, r3, #8
 8004496:	b2db      	uxtb	r3, r3
 8004498:	f003 031f 	and.w	r3, r3, #31
 800449c:	b2da      	uxtb	r2, r3
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	0b5b      	lsrs	r3, r3, #13
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d11a      	bne.n	80044fc <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	78db      	ldrb	r3, [r3, #3]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 f8bc 	bl	8004648 <RTC_Bcd2ToByte>
 80044d0:	4603      	mov	r3, r0
 80044d2:	461a      	mov	r2, r3
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	785b      	ldrb	r3, [r3, #1]
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 f8b3 	bl	8004648 <RTC_Bcd2ToByte>
 80044e2:	4603      	mov	r3, r0
 80044e4:	461a      	mov	r2, r3
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	789b      	ldrb	r3, [r3, #2]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 f8aa 	bl	8004648 <RTC_Bcd2ToByte>
 80044f4:	4603      	mov	r3, r0
 80044f6:	461a      	mov	r2, r3
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b084      	sub	sp, #16
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800450e:	2300      	movs	r3, #0
 8004510:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004520:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004522:	f7fe fd89 	bl	8003038 <HAL_GetTick>
 8004526:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004528:	e009      	b.n	800453e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800452a:	f7fe fd85 	bl	8003038 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004538:	d901      	bls.n	800453e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e007      	b.n	800454e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f003 0320 	and.w	r3, r3, #32
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0ee      	beq.n	800452a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b084      	sub	sp, #16
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800455e:	2300      	movs	r3, #0
 8004560:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004570:	2b00      	cmp	r3, #0
 8004572:	d122      	bne.n	80045ba <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004582:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004584:	f7fe fd58 	bl	8003038 <HAL_GetTick>
 8004588:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800458a:	e00c      	b.n	80045a6 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800458c:	f7fe fd54 	bl	8003038 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800459a:	d904      	bls.n	80045a6 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2204      	movs	r2, #4
 80045a0:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d102      	bne.n	80045ba <RTC_EnterInitMode+0x64>
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d1e8      	bne.n	800458c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045cc:	2300      	movs	r3, #0
 80045ce:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045de:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 0320 	and.w	r3, r3, #32
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10a      	bne.n	8004604 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7ff ff89 	bl	8004506 <HAL_RTC_WaitForSynchro>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d004      	beq.n	8004604 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2204      	movs	r2, #4
 80045fe:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004604:	7bfb      	ldrb	r3, [r7, #15]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800460e:	b480      	push	{r7}
 8004610:	b085      	sub	sp, #20
 8004612:	af00      	add	r7, sp, #0
 8004614:	4603      	mov	r3, r0
 8004616:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800461c:	e005      	b.n	800462a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800461e:	7bfb      	ldrb	r3, [r7, #15]
 8004620:	3301      	adds	r3, #1
 8004622:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8004624:	79fb      	ldrb	r3, [r7, #7]
 8004626:	3b0a      	subs	r3, #10
 8004628:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800462a:	79fb      	ldrb	r3, [r7, #7]
 800462c:	2b09      	cmp	r3, #9
 800462e:	d8f6      	bhi.n	800461e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004630:	7bfb      	ldrb	r3, [r7, #15]
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	b2da      	uxtb	r2, r3
 8004636:	79fb      	ldrb	r3, [r7, #7]
 8004638:	4313      	orrs	r3, r2
 800463a:	b2db      	uxtb	r3, r3
}
 800463c:	4618      	mov	r0, r3
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	4603      	mov	r3, r0
 8004650:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8004652:	2300      	movs	r3, #0
 8004654:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004656:	79fb      	ldrb	r3, [r7, #7]
 8004658:	091b      	lsrs	r3, r3, #4
 800465a:	b2db      	uxtb	r3, r3
 800465c:	461a      	mov	r2, r3
 800465e:	0092      	lsls	r2, r2, #2
 8004660:	4413      	add	r3, r2
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8004666:	79fb      	ldrb	r3, [r7, #7]
 8004668:	f003 030f 	and.w	r3, r3, #15
 800466c:	b2da      	uxtb	r2, r3
 800466e:	7bfb      	ldrb	r3, [r7, #15]
 8004670:	4413      	add	r3, r2
 8004672:	b2db      	uxtb	r3, r3
}
 8004674:	4618      	mov	r0, r3
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e07b      	b.n	800478a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	2b00      	cmp	r3, #0
 8004698:	d108      	bne.n	80046ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046a2:	d009      	beq.n	80046b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	61da      	str	r2, [r3, #28]
 80046aa:	e005      	b.n	80046b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d106      	bne.n	80046d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7fe f936 	bl	8002944 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004700:	431a      	orrs	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	431a      	orrs	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004728:	431a      	orrs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800473c:	ea42 0103 	orr.w	r1, r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004744:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	0c1b      	lsrs	r3, r3, #16
 8004756:	f003 0104 	and.w	r1, r3, #4
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	f003 0210 	and.w	r2, r3, #16
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69da      	ldr	r2, [r3, #28]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004778:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b088      	sub	sp, #32
 8004796:	af00      	add	r7, sp, #0
 8004798:	60f8      	str	r0, [r7, #12]
 800479a:	60b9      	str	r1, [r7, #8]
 800479c:	603b      	str	r3, [r7, #0]
 800479e:	4613      	mov	r3, r2
 80047a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_SPI_Transmit+0x22>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e126      	b.n	8004a02 <HAL_SPI_Transmit+0x270>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047bc:	f7fe fc3c 	bl	8003038 <HAL_GetTick>
 80047c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80047c2:	88fb      	ldrh	r3, [r7, #6]
 80047c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d002      	beq.n	80047d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80047d2:	2302      	movs	r3, #2
 80047d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047d6:	e10b      	b.n	80049f0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <HAL_SPI_Transmit+0x52>
 80047de:	88fb      	ldrh	r3, [r7, #6]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d102      	bne.n	80047ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047e8:	e102      	b.n	80049f0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2203      	movs	r2, #3
 80047ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	88fa      	ldrh	r2, [r7, #6]
 8004802:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	88fa      	ldrh	r2, [r7, #6]
 8004808:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004830:	d10f      	bne.n	8004852 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004840:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004850:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485c:	2b40      	cmp	r3, #64	; 0x40
 800485e:	d007      	beq.n	8004870 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800486e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004878:	d14b      	bne.n	8004912 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <HAL_SPI_Transmit+0xf6>
 8004882:	8afb      	ldrh	r3, [r7, #22]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d13e      	bne.n	8004906 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488c:	881a      	ldrh	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	1c9a      	adds	r2, r3, #2
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048ac:	e02b      	b.n	8004906 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d112      	bne.n	80048e2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c0:	881a      	ldrh	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	1c9a      	adds	r2, r3, #2
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	86da      	strh	r2, [r3, #54]	; 0x36
 80048e0:	e011      	b.n	8004906 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048e2:	f7fe fba9 	bl	8003038 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d803      	bhi.n	80048fa <HAL_SPI_Transmit+0x168>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f8:	d102      	bne.n	8004900 <HAL_SPI_Transmit+0x16e>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d102      	bne.n	8004906 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004904:	e074      	b.n	80049f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800490a:	b29b      	uxth	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1ce      	bne.n	80048ae <HAL_SPI_Transmit+0x11c>
 8004910:	e04c      	b.n	80049ac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <HAL_SPI_Transmit+0x18e>
 800491a:	8afb      	ldrh	r3, [r7, #22]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d140      	bne.n	80049a2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	330c      	adds	r3, #12
 800492a:	7812      	ldrb	r2, [r2, #0]
 800492c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004932:	1c5a      	adds	r2, r3, #1
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800493c:	b29b      	uxth	r3, r3
 800493e:	3b01      	subs	r3, #1
 8004940:	b29a      	uxth	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004946:	e02c      	b.n	80049a2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b02      	cmp	r3, #2
 8004954:	d113      	bne.n	800497e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	330c      	adds	r3, #12
 8004960:	7812      	ldrb	r2, [r2, #0]
 8004962:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004972:	b29b      	uxth	r3, r3
 8004974:	3b01      	subs	r3, #1
 8004976:	b29a      	uxth	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	86da      	strh	r2, [r3, #54]	; 0x36
 800497c:	e011      	b.n	80049a2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800497e:	f7fe fb5b 	bl	8003038 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d803      	bhi.n	8004996 <HAL_SPI_Transmit+0x204>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004994:	d102      	bne.n	800499c <HAL_SPI_Transmit+0x20a>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d102      	bne.n	80049a2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049a0:	e026      	b.n	80049f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1cd      	bne.n	8004948 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	6839      	ldr	r1, [r7, #0]
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 fbcb 	bl	800514c <SPI_EndRxTxTransaction>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2220      	movs	r2, #32
 80049c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10a      	bne.n	80049e0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049ca:	2300      	movs	r3, #0
 80049cc:	613b      	str	r3, [r7, #16]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	613b      	str	r3, [r7, #16]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	613b      	str	r3, [r7, #16]
 80049de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d002      	beq.n	80049ee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	77fb      	strb	r3, [r7, #31]
 80049ec:	e000      	b.n	80049f0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80049ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a00:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3720      	adds	r7, #32
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b088      	sub	sp, #32
 8004a0e:	af02      	add	r7, sp, #8
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	603b      	str	r3, [r7, #0]
 8004a16:	4613      	mov	r3, r2
 8004a18:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a26:	d112      	bne.n	8004a4e <HAL_SPI_Receive+0x44>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10e      	bne.n	8004a4e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2204      	movs	r2, #4
 8004a34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a38:	88fa      	ldrh	r2, [r7, #6]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	68b9      	ldr	r1, [r7, #8]
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 f8f1 	bl	8004c2c <HAL_SPI_TransmitReceive>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	e0ea      	b.n	8004c24 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d101      	bne.n	8004a5c <HAL_SPI_Receive+0x52>
 8004a58:	2302      	movs	r3, #2
 8004a5a:	e0e3      	b.n	8004c24 <HAL_SPI_Receive+0x21a>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a64:	f7fe fae8 	bl	8003038 <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d002      	beq.n	8004a7c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004a76:	2302      	movs	r3, #2
 8004a78:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a7a:	e0ca      	b.n	8004c12 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d002      	beq.n	8004a88 <HAL_SPI_Receive+0x7e>
 8004a82:	88fb      	ldrh	r3, [r7, #6]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d102      	bne.n	8004a8e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a8c:	e0c1      	b.n	8004c12 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2204      	movs	r2, #4
 8004a92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	88fa      	ldrh	r2, [r7, #6]
 8004aa6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	88fa      	ldrh	r2, [r7, #6]
 8004aac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ad4:	d10f      	bne.n	8004af6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ae4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004af4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b00:	2b40      	cmp	r3, #64	; 0x40
 8004b02:	d007      	beq.n	8004b14 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b12:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d162      	bne.n	8004be2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b1c:	e02e      	b.n	8004b7c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d115      	bne.n	8004b58 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f103 020c 	add.w	r2, r3, #12
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b38:	7812      	ldrb	r2, [r2, #0]
 8004b3a:	b2d2      	uxtb	r2, r2
 8004b3c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b56:	e011      	b.n	8004b7c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b58:	f7fe fa6e 	bl	8003038 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d803      	bhi.n	8004b70 <HAL_SPI_Receive+0x166>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6e:	d102      	bne.n	8004b76 <HAL_SPI_Receive+0x16c>
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d102      	bne.n	8004b7c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b7a:	e04a      	b.n	8004c12 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1cb      	bne.n	8004b1e <HAL_SPI_Receive+0x114>
 8004b86:	e031      	b.n	8004bec <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d113      	bne.n	8004bbe <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba0:	b292      	uxth	r2, r2
 8004ba2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba8:	1c9a      	adds	r2, r3, #2
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bbc:	e011      	b.n	8004be2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bbe:	f7fe fa3b 	bl	8003038 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d803      	bhi.n	8004bd6 <HAL_SPI_Receive+0x1cc>
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd4:	d102      	bne.n	8004bdc <HAL_SPI_Receive+0x1d2>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d102      	bne.n	8004be2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004be0:	e017      	b.n	8004c12 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1cd      	bne.n	8004b88 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	6839      	ldr	r1, [r7, #0]
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 fa45 	bl	8005080 <SPI_EndRxTransaction>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d002      	beq.n	8004c02 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d002      	beq.n	8004c10 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	75fb      	strb	r3, [r7, #23]
 8004c0e:	e000      	b.n	8004c12 <HAL_SPI_Receive+0x208>
  }

error :
 8004c10:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3718      	adds	r7, #24
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b08c      	sub	sp, #48	; 0x30
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
 8004c38:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d101      	bne.n	8004c52 <HAL_SPI_TransmitReceive+0x26>
 8004c4e:	2302      	movs	r3, #2
 8004c50:	e18a      	b.n	8004f68 <HAL_SPI_TransmitReceive+0x33c>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c5a:	f7fe f9ed 	bl	8003038 <HAL_GetTick>
 8004c5e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c70:	887b      	ldrh	r3, [r7, #2]
 8004c72:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d00f      	beq.n	8004c9c <HAL_SPI_TransmitReceive+0x70>
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c82:	d107      	bne.n	8004c94 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d103      	bne.n	8004c94 <HAL_SPI_TransmitReceive+0x68>
 8004c8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c90:	2b04      	cmp	r3, #4
 8004c92:	d003      	beq.n	8004c9c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c94:	2302      	movs	r3, #2
 8004c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c9a:	e15b      	b.n	8004f54 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d005      	beq.n	8004cae <HAL_SPI_TransmitReceive+0x82>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d002      	beq.n	8004cae <HAL_SPI_TransmitReceive+0x82>
 8004ca8:	887b      	ldrh	r3, [r7, #2]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d103      	bne.n	8004cb6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004cb4:	e14e      	b.n	8004f54 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d003      	beq.n	8004cca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2205      	movs	r2, #5
 8004cc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	887a      	ldrh	r2, [r7, #2]
 8004cda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	887a      	ldrh	r2, [r7, #2]
 8004ce0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	887a      	ldrh	r2, [r7, #2]
 8004cec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	887a      	ldrh	r2, [r7, #2]
 8004cf2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0a:	2b40      	cmp	r3, #64	; 0x40
 8004d0c:	d007      	beq.n	8004d1e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d26:	d178      	bne.n	8004e1a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d002      	beq.n	8004d36 <HAL_SPI_TransmitReceive+0x10a>
 8004d30:	8b7b      	ldrh	r3, [r7, #26]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d166      	bne.n	8004e04 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3a:	881a      	ldrh	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d46:	1c9a      	adds	r2, r3, #2
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	3b01      	subs	r3, #1
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d5a:	e053      	b.n	8004e04 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d11b      	bne.n	8004da2 <HAL_SPI_TransmitReceive+0x176>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d016      	beq.n	8004da2 <HAL_SPI_TransmitReceive+0x176>
 8004d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d113      	bne.n	8004da2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7e:	881a      	ldrh	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8a:	1c9a      	adds	r2, r3, #2
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	3b01      	subs	r3, #1
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d119      	bne.n	8004de4 <HAL_SPI_TransmitReceive+0x1b8>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d014      	beq.n	8004de4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68da      	ldr	r2, [r3, #12]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc4:	b292      	uxth	r2, r2
 8004dc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dcc:	1c9a      	adds	r2, r3, #2
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004de0:	2301      	movs	r3, #1
 8004de2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004de4:	f7fe f928 	bl	8003038 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d807      	bhi.n	8004e04 <HAL_SPI_TransmitReceive+0x1d8>
 8004df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfa:	d003      	beq.n	8004e04 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e02:	e0a7      	b.n	8004f54 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1a6      	bne.n	8004d5c <HAL_SPI_TransmitReceive+0x130>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1a1      	bne.n	8004d5c <HAL_SPI_TransmitReceive+0x130>
 8004e18:	e07c      	b.n	8004f14 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <HAL_SPI_TransmitReceive+0x1fc>
 8004e22:	8b7b      	ldrh	r3, [r7, #26]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d16b      	bne.n	8004f00 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	330c      	adds	r3, #12
 8004e32:	7812      	ldrb	r2, [r2, #0]
 8004e34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e4e:	e057      	b.n	8004f00 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d11c      	bne.n	8004e98 <HAL_SPI_TransmitReceive+0x26c>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d017      	beq.n	8004e98 <HAL_SPI_TransmitReceive+0x26c>
 8004e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d114      	bne.n	8004e98 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	330c      	adds	r3, #12
 8004e78:	7812      	ldrb	r2, [r2, #0]
 8004e7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d119      	bne.n	8004eda <HAL_SPI_TransmitReceive+0x2ae>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d014      	beq.n	8004eda <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eba:	b2d2      	uxtb	r2, r2
 8004ebc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec2:	1c5a      	adds	r2, r3, #1
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004eda:	f7fe f8ad 	bl	8003038 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d803      	bhi.n	8004ef2 <HAL_SPI_TransmitReceive+0x2c6>
 8004eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef0:	d102      	bne.n	8004ef8 <HAL_SPI_TransmitReceive+0x2cc>
 8004ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d103      	bne.n	8004f00 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004efe:	e029      	b.n	8004f54 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1a2      	bne.n	8004e50 <HAL_SPI_TransmitReceive+0x224>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d19d      	bne.n	8004e50 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 f917 	bl	800514c <SPI_EndRxTxTransaction>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d006      	beq.n	8004f32 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f30:	e010      	b.n	8004f54 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10b      	bne.n	8004f52 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	617b      	str	r3, [r7, #20]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	e000      	b.n	8004f54 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004f52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3730      	adds	r7, #48	; 0x30
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b088      	sub	sp, #32
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	603b      	str	r3, [r7, #0]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f80:	f7fe f85a 	bl	8003038 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f88:	1a9b      	subs	r3, r3, r2
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f90:	f7fe f852 	bl	8003038 <HAL_GetTick>
 8004f94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f96:	4b39      	ldr	r3, [pc, #228]	; (800507c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	015b      	lsls	r3, r3, #5
 8004f9c:	0d1b      	lsrs	r3, r3, #20
 8004f9e:	69fa      	ldr	r2, [r7, #28]
 8004fa0:	fb02 f303 	mul.w	r3, r2, r3
 8004fa4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fa6:	e054      	b.n	8005052 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fae:	d050      	beq.n	8005052 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fb0:	f7fe f842 	bl	8003038 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	69fa      	ldr	r2, [r7, #28]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d902      	bls.n	8004fc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d13d      	bne.n	8005042 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fde:	d111      	bne.n	8005004 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fe8:	d004      	beq.n	8004ff4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff2:	d107      	bne.n	8005004 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005002:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005008:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800500c:	d10f      	bne.n	800502e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800502c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e017      	b.n	8005072 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005048:	2300      	movs	r3, #0
 800504a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	3b01      	subs	r3, #1
 8005050:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4013      	ands	r3, r2
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	429a      	cmp	r2, r3
 8005060:	bf0c      	ite	eq
 8005062:	2301      	moveq	r3, #1
 8005064:	2300      	movne	r3, #0
 8005066:	b2db      	uxtb	r3, r3
 8005068:	461a      	mov	r2, r3
 800506a:	79fb      	ldrb	r3, [r7, #7]
 800506c:	429a      	cmp	r2, r3
 800506e:	d19b      	bne.n	8004fa8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3720      	adds	r7, #32
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	2000005c 	.word	0x2000005c

08005080 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af02      	add	r7, sp, #8
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005094:	d111      	bne.n	80050ba <SPI_EndRxTransaction+0x3a>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800509e:	d004      	beq.n	80050aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050a8:	d107      	bne.n	80050ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050b8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050c2:	d12a      	bne.n	800511a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050cc:	d012      	beq.n	80050f4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	2200      	movs	r2, #0
 80050d6:	2180      	movs	r1, #128	; 0x80
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f7ff ff49 	bl	8004f70 <SPI_WaitFlagStateUntilTimeout>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d02d      	beq.n	8005140 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e8:	f043 0220 	orr.w	r2, r3, #32
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e026      	b.n	8005142 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2200      	movs	r2, #0
 80050fc:	2101      	movs	r1, #1
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f7ff ff36 	bl	8004f70 <SPI_WaitFlagStateUntilTimeout>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d01a      	beq.n	8005140 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510e:	f043 0220 	orr.w	r2, r3, #32
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e013      	b.n	8005142 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2200      	movs	r2, #0
 8005122:	2101      	movs	r1, #1
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f7ff ff23 	bl	8004f70 <SPI_WaitFlagStateUntilTimeout>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d007      	beq.n	8005140 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005134:	f043 0220 	orr.w	r2, r3, #32
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e000      	b.n	8005142 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
	...

0800514c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b088      	sub	sp, #32
 8005150:	af02      	add	r7, sp, #8
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005158:	4b1b      	ldr	r3, [pc, #108]	; (80051c8 <SPI_EndRxTxTransaction+0x7c>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a1b      	ldr	r2, [pc, #108]	; (80051cc <SPI_EndRxTxTransaction+0x80>)
 800515e:	fba2 2303 	umull	r2, r3, r2, r3
 8005162:	0d5b      	lsrs	r3, r3, #21
 8005164:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005168:	fb02 f303 	mul.w	r3, r2, r3
 800516c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005176:	d112      	bne.n	800519e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2200      	movs	r2, #0
 8005180:	2180      	movs	r1, #128	; 0x80
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f7ff fef4 	bl	8004f70 <SPI_WaitFlagStateUntilTimeout>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d016      	beq.n	80051bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005192:	f043 0220 	orr.w	r2, r3, #32
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e00f      	b.n	80051be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00a      	beq.n	80051ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b4:	2b80      	cmp	r3, #128	; 0x80
 80051b6:	d0f2      	beq.n	800519e <SPI_EndRxTxTransaction+0x52>
 80051b8:	e000      	b.n	80051bc <SPI_EndRxTxTransaction+0x70>
        break;
 80051ba:	bf00      	nop
  }

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3718      	adds	r7, #24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	2000005c 	.word	0x2000005c
 80051cc:	165e9f81 	.word	0x165e9f81

080051d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e041      	b.n	8005266 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7fd fdd6 	bl	8002da8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3304      	adds	r3, #4
 800520c:	4619      	mov	r1, r3
 800520e:	4610      	mov	r0, r2
 8005210:	f000 fa88 	bl	8005724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
	...

08005270 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b01      	cmp	r3, #1
 8005282:	d001      	beq.n	8005288 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e044      	b.n	8005312 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0201 	orr.w	r2, r2, #1
 800529e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a1e      	ldr	r2, [pc, #120]	; (8005320 <HAL_TIM_Base_Start_IT+0xb0>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d018      	beq.n	80052dc <HAL_TIM_Base_Start_IT+0x6c>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b2:	d013      	beq.n	80052dc <HAL_TIM_Base_Start_IT+0x6c>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a1a      	ldr	r2, [pc, #104]	; (8005324 <HAL_TIM_Base_Start_IT+0xb4>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d00e      	beq.n	80052dc <HAL_TIM_Base_Start_IT+0x6c>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a19      	ldr	r2, [pc, #100]	; (8005328 <HAL_TIM_Base_Start_IT+0xb8>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d009      	beq.n	80052dc <HAL_TIM_Base_Start_IT+0x6c>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a17      	ldr	r2, [pc, #92]	; (800532c <HAL_TIM_Base_Start_IT+0xbc>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d004      	beq.n	80052dc <HAL_TIM_Base_Start_IT+0x6c>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a16      	ldr	r2, [pc, #88]	; (8005330 <HAL_TIM_Base_Start_IT+0xc0>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d111      	bne.n	8005300 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 0307 	and.w	r3, r3, #7
 80052e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2b06      	cmp	r3, #6
 80052ec:	d010      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f042 0201 	orr.w	r2, r2, #1
 80052fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052fe:	e007      	b.n	8005310 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 0201 	orr.w	r2, r2, #1
 800530e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	40010000 	.word	0x40010000
 8005324:	40000400 	.word	0x40000400
 8005328:	40000800 	.word	0x40000800
 800532c:	40000c00 	.word	0x40000c00
 8005330:	40014000 	.word	0x40014000

08005334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b02      	cmp	r3, #2
 8005348:	d122      	bne.n	8005390 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b02      	cmp	r3, #2
 8005356:	d11b      	bne.n	8005390 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f06f 0202 	mvn.w	r2, #2
 8005360:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f9b5 	bl	80056e6 <HAL_TIM_IC_CaptureCallback>
 800537c:	e005      	b.n	800538a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f9a7 	bl	80056d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f9b8 	bl	80056fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f003 0304 	and.w	r3, r3, #4
 800539a:	2b04      	cmp	r3, #4
 800539c:	d122      	bne.n	80053e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d11b      	bne.n	80053e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f06f 0204 	mvn.w	r2, #4
 80053b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2202      	movs	r2, #2
 80053ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f98b 	bl	80056e6 <HAL_TIM_IC_CaptureCallback>
 80053d0:	e005      	b.n	80053de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f97d 	bl	80056d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f98e 	bl	80056fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f003 0308 	and.w	r3, r3, #8
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d122      	bne.n	8005438 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d11b      	bne.n	8005438 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f06f 0208 	mvn.w	r2, #8
 8005408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2204      	movs	r2, #4
 800540e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f961 	bl	80056e6 <HAL_TIM_IC_CaptureCallback>
 8005424:	e005      	b.n	8005432 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f953 	bl	80056d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f964 	bl	80056fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f003 0310 	and.w	r3, r3, #16
 8005442:	2b10      	cmp	r3, #16
 8005444:	d122      	bne.n	800548c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f003 0310 	and.w	r3, r3, #16
 8005450:	2b10      	cmp	r3, #16
 8005452:	d11b      	bne.n	800548c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f06f 0210 	mvn.w	r2, #16
 800545c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2208      	movs	r2, #8
 8005462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f937 	bl	80056e6 <HAL_TIM_IC_CaptureCallback>
 8005478:	e005      	b.n	8005486 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f929 	bl	80056d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f93a 	bl	80056fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b01      	cmp	r3, #1
 8005498:	d10e      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d107      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0201 	mvn.w	r2, #1
 80054b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7fb fe9a 	bl	80011ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c2:	2b80      	cmp	r3, #128	; 0x80
 80054c4:	d10e      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d0:	2b80      	cmp	r3, #128	; 0x80
 80054d2:	d107      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fab2 	bl	8005a48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ee:	2b40      	cmp	r3, #64	; 0x40
 80054f0:	d10e      	bne.n	8005510 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fc:	2b40      	cmp	r3, #64	; 0x40
 80054fe:	d107      	bne.n	8005510 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f8ff 	bl	800570e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b20      	cmp	r3, #32
 800551c:	d10e      	bne.n	800553c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f003 0320 	and.w	r3, r3, #32
 8005528:	2b20      	cmp	r3, #32
 800552a:	d107      	bne.n	800553c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f06f 0220 	mvn.w	r2, #32
 8005534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 fa7c 	bl	8005a34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800553c:	bf00      	nop
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800554e:	2300      	movs	r3, #0
 8005550:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005558:	2b01      	cmp	r3, #1
 800555a:	d101      	bne.n	8005560 <HAL_TIM_ConfigClockSource+0x1c>
 800555c:	2302      	movs	r3, #2
 800555e:	e0b4      	b.n	80056ca <HAL_TIM_ConfigClockSource+0x186>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800557e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005586:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005598:	d03e      	beq.n	8005618 <HAL_TIM_ConfigClockSource+0xd4>
 800559a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800559e:	f200 8087 	bhi.w	80056b0 <HAL_TIM_ConfigClockSource+0x16c>
 80055a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055a6:	f000 8086 	beq.w	80056b6 <HAL_TIM_ConfigClockSource+0x172>
 80055aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ae:	d87f      	bhi.n	80056b0 <HAL_TIM_ConfigClockSource+0x16c>
 80055b0:	2b70      	cmp	r3, #112	; 0x70
 80055b2:	d01a      	beq.n	80055ea <HAL_TIM_ConfigClockSource+0xa6>
 80055b4:	2b70      	cmp	r3, #112	; 0x70
 80055b6:	d87b      	bhi.n	80056b0 <HAL_TIM_ConfigClockSource+0x16c>
 80055b8:	2b60      	cmp	r3, #96	; 0x60
 80055ba:	d050      	beq.n	800565e <HAL_TIM_ConfigClockSource+0x11a>
 80055bc:	2b60      	cmp	r3, #96	; 0x60
 80055be:	d877      	bhi.n	80056b0 <HAL_TIM_ConfigClockSource+0x16c>
 80055c0:	2b50      	cmp	r3, #80	; 0x50
 80055c2:	d03c      	beq.n	800563e <HAL_TIM_ConfigClockSource+0xfa>
 80055c4:	2b50      	cmp	r3, #80	; 0x50
 80055c6:	d873      	bhi.n	80056b0 <HAL_TIM_ConfigClockSource+0x16c>
 80055c8:	2b40      	cmp	r3, #64	; 0x40
 80055ca:	d058      	beq.n	800567e <HAL_TIM_ConfigClockSource+0x13a>
 80055cc:	2b40      	cmp	r3, #64	; 0x40
 80055ce:	d86f      	bhi.n	80056b0 <HAL_TIM_ConfigClockSource+0x16c>
 80055d0:	2b30      	cmp	r3, #48	; 0x30
 80055d2:	d064      	beq.n	800569e <HAL_TIM_ConfigClockSource+0x15a>
 80055d4:	2b30      	cmp	r3, #48	; 0x30
 80055d6:	d86b      	bhi.n	80056b0 <HAL_TIM_ConfigClockSource+0x16c>
 80055d8:	2b20      	cmp	r3, #32
 80055da:	d060      	beq.n	800569e <HAL_TIM_ConfigClockSource+0x15a>
 80055dc:	2b20      	cmp	r3, #32
 80055de:	d867      	bhi.n	80056b0 <HAL_TIM_ConfigClockSource+0x16c>
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d05c      	beq.n	800569e <HAL_TIM_ConfigClockSource+0x15a>
 80055e4:	2b10      	cmp	r3, #16
 80055e6:	d05a      	beq.n	800569e <HAL_TIM_ConfigClockSource+0x15a>
 80055e8:	e062      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6818      	ldr	r0, [r3, #0]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	6899      	ldr	r1, [r3, #8]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f000 f98d 	bl	8005918 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800560c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	609a      	str	r2, [r3, #8]
      break;
 8005616:	e04f      	b.n	80056b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6818      	ldr	r0, [r3, #0]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	6899      	ldr	r1, [r3, #8]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f000 f976 	bl	8005918 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689a      	ldr	r2, [r3, #8]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800563a:	609a      	str	r2, [r3, #8]
      break;
 800563c:	e03c      	b.n	80056b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6818      	ldr	r0, [r3, #0]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	6859      	ldr	r1, [r3, #4]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	461a      	mov	r2, r3
 800564c:	f000 f8ea 	bl	8005824 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2150      	movs	r1, #80	; 0x50
 8005656:	4618      	mov	r0, r3
 8005658:	f000 f943 	bl	80058e2 <TIM_ITRx_SetConfig>
      break;
 800565c:	e02c      	b.n	80056b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6818      	ldr	r0, [r3, #0]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	6859      	ldr	r1, [r3, #4]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	461a      	mov	r2, r3
 800566c:	f000 f909 	bl	8005882 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2160      	movs	r1, #96	; 0x60
 8005676:	4618      	mov	r0, r3
 8005678:	f000 f933 	bl	80058e2 <TIM_ITRx_SetConfig>
      break;
 800567c:	e01c      	b.n	80056b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6818      	ldr	r0, [r3, #0]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	6859      	ldr	r1, [r3, #4]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	461a      	mov	r2, r3
 800568c:	f000 f8ca 	bl	8005824 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2140      	movs	r1, #64	; 0x40
 8005696:	4618      	mov	r0, r3
 8005698:	f000 f923 	bl	80058e2 <TIM_ITRx_SetConfig>
      break;
 800569c:	e00c      	b.n	80056b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4619      	mov	r1, r3
 80056a8:	4610      	mov	r0, r2
 80056aa:	f000 f91a 	bl	80058e2 <TIM_ITRx_SetConfig>
      break;
 80056ae:	e003      	b.n	80056b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	73fb      	strb	r3, [r7, #15]
      break;
 80056b4:	e000      	b.n	80056b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b083      	sub	sp, #12
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056da:	bf00      	nop
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b083      	sub	sp, #12
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056ee:	bf00      	nop
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056fa:	b480      	push	{r7}
 80056fc:	b083      	sub	sp, #12
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005702:	bf00      	nop
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800570e:	b480      	push	{r7}
 8005710:	b083      	sub	sp, #12
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
	...

08005724 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a34      	ldr	r2, [pc, #208]	; (8005808 <TIM_Base_SetConfig+0xe4>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d00f      	beq.n	800575c <TIM_Base_SetConfig+0x38>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005742:	d00b      	beq.n	800575c <TIM_Base_SetConfig+0x38>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a31      	ldr	r2, [pc, #196]	; (800580c <TIM_Base_SetConfig+0xe8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d007      	beq.n	800575c <TIM_Base_SetConfig+0x38>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a30      	ldr	r2, [pc, #192]	; (8005810 <TIM_Base_SetConfig+0xec>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d003      	beq.n	800575c <TIM_Base_SetConfig+0x38>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a2f      	ldr	r2, [pc, #188]	; (8005814 <TIM_Base_SetConfig+0xf0>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d108      	bne.n	800576e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	4313      	orrs	r3, r2
 800576c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a25      	ldr	r2, [pc, #148]	; (8005808 <TIM_Base_SetConfig+0xe4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d01b      	beq.n	80057ae <TIM_Base_SetConfig+0x8a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800577c:	d017      	beq.n	80057ae <TIM_Base_SetConfig+0x8a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a22      	ldr	r2, [pc, #136]	; (800580c <TIM_Base_SetConfig+0xe8>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d013      	beq.n	80057ae <TIM_Base_SetConfig+0x8a>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a21      	ldr	r2, [pc, #132]	; (8005810 <TIM_Base_SetConfig+0xec>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d00f      	beq.n	80057ae <TIM_Base_SetConfig+0x8a>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a20      	ldr	r2, [pc, #128]	; (8005814 <TIM_Base_SetConfig+0xf0>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d00b      	beq.n	80057ae <TIM_Base_SetConfig+0x8a>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a1f      	ldr	r2, [pc, #124]	; (8005818 <TIM_Base_SetConfig+0xf4>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d007      	beq.n	80057ae <TIM_Base_SetConfig+0x8a>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a1e      	ldr	r2, [pc, #120]	; (800581c <TIM_Base_SetConfig+0xf8>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d003      	beq.n	80057ae <TIM_Base_SetConfig+0x8a>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a1d      	ldr	r2, [pc, #116]	; (8005820 <TIM_Base_SetConfig+0xfc>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d108      	bne.n	80057c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	4313      	orrs	r3, r2
 80057be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	689a      	ldr	r2, [r3, #8]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a08      	ldr	r2, [pc, #32]	; (8005808 <TIM_Base_SetConfig+0xe4>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d103      	bne.n	80057f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	691a      	ldr	r2, [r3, #16]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	615a      	str	r2, [r3, #20]
}
 80057fa:	bf00      	nop
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	40010000 	.word	0x40010000
 800580c:	40000400 	.word	0x40000400
 8005810:	40000800 	.word	0x40000800
 8005814:	40000c00 	.word	0x40000c00
 8005818:	40014000 	.word	0x40014000
 800581c:	40014400 	.word	0x40014400
 8005820:	40014800 	.word	0x40014800

08005824 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005824:	b480      	push	{r7}
 8005826:	b087      	sub	sp, #28
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	f023 0201 	bic.w	r2, r3, #1
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800584e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	011b      	lsls	r3, r3, #4
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	4313      	orrs	r3, r2
 8005858:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f023 030a 	bic.w	r3, r3, #10
 8005860:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	4313      	orrs	r3, r2
 8005868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	621a      	str	r2, [r3, #32]
}
 8005876:	bf00      	nop
 8005878:	371c      	adds	r7, #28
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005882:	b480      	push	{r7}
 8005884:	b087      	sub	sp, #28
 8005886:	af00      	add	r7, sp, #0
 8005888:	60f8      	str	r0, [r7, #12]
 800588a:	60b9      	str	r1, [r7, #8]
 800588c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	f023 0210 	bic.w	r2, r3, #16
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	031b      	lsls	r3, r3, #12
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	011b      	lsls	r3, r3, #4
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	621a      	str	r2, [r3, #32]
}
 80058d6:	bf00      	nop
 80058d8:	371c      	adds	r7, #28
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b085      	sub	sp, #20
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
 80058ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4313      	orrs	r3, r2
 8005900:	f043 0307 	orr.w	r3, r3, #7
 8005904:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	609a      	str	r2, [r3, #8]
}
 800590c:	bf00      	nop
 800590e:	3714      	adds	r7, #20
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005918:	b480      	push	{r7}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
 8005924:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005932:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	021a      	lsls	r2, r3, #8
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	431a      	orrs	r2, r3
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	4313      	orrs	r3, r2
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	4313      	orrs	r3, r2
 8005944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	609a      	str	r2, [r3, #8]
}
 800594c:	bf00      	nop
 800594e:	371c      	adds	r7, #28
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005968:	2b01      	cmp	r3, #1
 800596a:	d101      	bne.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800596c:	2302      	movs	r3, #2
 800596e:	e050      	b.n	8005a12 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005996:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a1c      	ldr	r2, [pc, #112]	; (8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d018      	beq.n	80059e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059bc:	d013      	beq.n	80059e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a18      	ldr	r2, [pc, #96]	; (8005a24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d00e      	beq.n	80059e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a16      	ldr	r2, [pc, #88]	; (8005a28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d009      	beq.n	80059e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a15      	ldr	r2, [pc, #84]	; (8005a2c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d004      	beq.n	80059e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a13      	ldr	r2, [pc, #76]	; (8005a30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d10c      	bne.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	40010000 	.word	0x40010000
 8005a24:	40000400 	.word	0x40000400
 8005a28:	40000800 	.word	0x40000800
 8005a2c:	40000c00 	.word	0x40000c00
 8005a30:	40014000 	.word	0x40014000

08005a34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e03f      	b.n	8005aee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d106      	bne.n	8005a88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7fd fa00 	bl	8002e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2224      	movs	r2, #36	; 0x24
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f929 	bl	8005cf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	691a      	ldr	r2, [r3, #16]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ab4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	695a      	ldr	r2, [r3, #20]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ac4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68da      	ldr	r2, [r3, #12]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ad4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b08a      	sub	sp, #40	; 0x28
 8005afa:	af02      	add	r7, sp, #8
 8005afc:	60f8      	str	r0, [r7, #12]
 8005afe:	60b9      	str	r1, [r7, #8]
 8005b00:	603b      	str	r3, [r7, #0]
 8005b02:	4613      	mov	r3, r2
 8005b04:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b06:	2300      	movs	r3, #0
 8005b08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	d17c      	bne.n	8005c10 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <HAL_UART_Transmit+0x2c>
 8005b1c:	88fb      	ldrh	r3, [r7, #6]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e075      	b.n	8005c12 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d101      	bne.n	8005b34 <HAL_UART_Transmit+0x3e>
 8005b30:	2302      	movs	r3, #2
 8005b32:	e06e      	b.n	8005c12 <HAL_UART_Transmit+0x11c>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2221      	movs	r2, #33	; 0x21
 8005b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b4a:	f7fd fa75 	bl	8003038 <HAL_GetTick>
 8005b4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	88fa      	ldrh	r2, [r7, #6]
 8005b54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	88fa      	ldrh	r2, [r7, #6]
 8005b5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b64:	d108      	bne.n	8005b78 <HAL_UART_Transmit+0x82>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d104      	bne.n	8005b78 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	61bb      	str	r3, [r7, #24]
 8005b76:	e003      	b.n	8005b80 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005b88:	e02a      	b.n	8005be0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	2200      	movs	r2, #0
 8005b92:	2180      	movs	r1, #128	; 0x80
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 f840 	bl	8005c1a <UART_WaitOnFlagUntilTimeout>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e036      	b.n	8005c12 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10b      	bne.n	8005bc2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	881b      	ldrh	r3, [r3, #0]
 8005bae:	461a      	mov	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bb8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	3302      	adds	r3, #2
 8005bbe:	61bb      	str	r3, [r7, #24]
 8005bc0:	e007      	b.n	8005bd2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	781a      	ldrb	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1cf      	bne.n	8005b8a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	2140      	movs	r1, #64	; 0x40
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f000 f810 	bl	8005c1a <UART_WaitOnFlagUntilTimeout>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d001      	beq.n	8005c04 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e006      	b.n	8005c12 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2220      	movs	r2, #32
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	e000      	b.n	8005c12 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005c10:	2302      	movs	r3, #2
  }
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3720      	adds	r7, #32
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b090      	sub	sp, #64	; 0x40
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	60b9      	str	r1, [r7, #8]
 8005c24:	603b      	str	r3, [r7, #0]
 8005c26:	4613      	mov	r3, r2
 8005c28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c2a:	e050      	b.n	8005cce <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c32:	d04c      	beq.n	8005cce <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d007      	beq.n	8005c4a <UART_WaitOnFlagUntilTimeout+0x30>
 8005c3a:	f7fd f9fd 	bl	8003038 <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d241      	bcs.n	8005cce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	330c      	adds	r3, #12
 8005c50:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c54:	e853 3f00 	ldrex	r3, [r3]
 8005c58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	330c      	adds	r3, #12
 8005c68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c6a:	637a      	str	r2, [r7, #52]	; 0x34
 8005c6c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c72:	e841 2300 	strex	r3, r2, [r1]
 8005c76:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1e5      	bne.n	8005c4a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3314      	adds	r3, #20
 8005c84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	e853 3f00 	ldrex	r3, [r3]
 8005c8c:	613b      	str	r3, [r7, #16]
   return(result);
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	f023 0301 	bic.w	r3, r3, #1
 8005c94:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	3314      	adds	r3, #20
 8005c9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c9e:	623a      	str	r2, [r7, #32]
 8005ca0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca2:	69f9      	ldr	r1, [r7, #28]
 8005ca4:	6a3a      	ldr	r2, [r7, #32]
 8005ca6:	e841 2300 	strex	r3, r2, [r1]
 8005caa:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1e5      	bne.n	8005c7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e00f      	b.n	8005cee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	bf0c      	ite	eq
 8005cde:	2301      	moveq	r3, #1
 8005ce0:	2300      	movne	r3, #0
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	79fb      	ldrb	r3, [r7, #7]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d09f      	beq.n	8005c2c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3740      	adds	r7, #64	; 0x40
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
	...

08005cf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cfc:	b0c0      	sub	sp, #256	; 0x100
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d14:	68d9      	ldr	r1, [r3, #12]
 8005d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	ea40 0301 	orr.w	r3, r0, r1
 8005d20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d26:	689a      	ldr	r2, [r3, #8]
 8005d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	431a      	orrs	r2, r3
 8005d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d50:	f021 010c 	bic.w	r1, r1, #12
 8005d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d5e:	430b      	orrs	r3, r1
 8005d60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d72:	6999      	ldr	r1, [r3, #24]
 8005d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	ea40 0301 	orr.w	r3, r0, r1
 8005d7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	4b8f      	ldr	r3, [pc, #572]	; (8005fc4 <UART_SetConfig+0x2cc>)
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d005      	beq.n	8005d98 <UART_SetConfig+0xa0>
 8005d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	4b8d      	ldr	r3, [pc, #564]	; (8005fc8 <UART_SetConfig+0x2d0>)
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d104      	bne.n	8005da2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d98:	f7fe f872 	bl	8003e80 <HAL_RCC_GetPCLK2Freq>
 8005d9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005da0:	e003      	b.n	8005daa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005da2:	f7fe f859 	bl	8003e58 <HAL_RCC_GetPCLK1Freq>
 8005da6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dae:	69db      	ldr	r3, [r3, #28]
 8005db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005db4:	f040 810c 	bne.w	8005fd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005dc2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005dc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005dca:	4622      	mov	r2, r4
 8005dcc:	462b      	mov	r3, r5
 8005dce:	1891      	adds	r1, r2, r2
 8005dd0:	65b9      	str	r1, [r7, #88]	; 0x58
 8005dd2:	415b      	adcs	r3, r3
 8005dd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005dda:	4621      	mov	r1, r4
 8005ddc:	eb12 0801 	adds.w	r8, r2, r1
 8005de0:	4629      	mov	r1, r5
 8005de2:	eb43 0901 	adc.w	r9, r3, r1
 8005de6:	f04f 0200 	mov.w	r2, #0
 8005dea:	f04f 0300 	mov.w	r3, #0
 8005dee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005df2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005df6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dfa:	4690      	mov	r8, r2
 8005dfc:	4699      	mov	r9, r3
 8005dfe:	4623      	mov	r3, r4
 8005e00:	eb18 0303 	adds.w	r3, r8, r3
 8005e04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e08:	462b      	mov	r3, r5
 8005e0a:	eb49 0303 	adc.w	r3, r9, r3
 8005e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e1e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005e22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e26:	460b      	mov	r3, r1
 8005e28:	18db      	adds	r3, r3, r3
 8005e2a:	653b      	str	r3, [r7, #80]	; 0x50
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	eb42 0303 	adc.w	r3, r2, r3
 8005e32:	657b      	str	r3, [r7, #84]	; 0x54
 8005e34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005e38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005e3c:	f7fa fa28 	bl	8000290 <__aeabi_uldivmod>
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	4b61      	ldr	r3, [pc, #388]	; (8005fcc <UART_SetConfig+0x2d4>)
 8005e46:	fba3 2302 	umull	r2, r3, r3, r2
 8005e4a:	095b      	lsrs	r3, r3, #5
 8005e4c:	011c      	lsls	r4, r3, #4
 8005e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e52:	2200      	movs	r2, #0
 8005e54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e60:	4642      	mov	r2, r8
 8005e62:	464b      	mov	r3, r9
 8005e64:	1891      	adds	r1, r2, r2
 8005e66:	64b9      	str	r1, [r7, #72]	; 0x48
 8005e68:	415b      	adcs	r3, r3
 8005e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005e70:	4641      	mov	r1, r8
 8005e72:	eb12 0a01 	adds.w	sl, r2, r1
 8005e76:	4649      	mov	r1, r9
 8005e78:	eb43 0b01 	adc.w	fp, r3, r1
 8005e7c:	f04f 0200 	mov.w	r2, #0
 8005e80:	f04f 0300 	mov.w	r3, #0
 8005e84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e90:	4692      	mov	sl, r2
 8005e92:	469b      	mov	fp, r3
 8005e94:	4643      	mov	r3, r8
 8005e96:	eb1a 0303 	adds.w	r3, sl, r3
 8005e9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e9e:	464b      	mov	r3, r9
 8005ea0:	eb4b 0303 	adc.w	r3, fp, r3
 8005ea4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005eb4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005eb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	18db      	adds	r3, r3, r3
 8005ec0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	eb42 0303 	adc.w	r3, r2, r3
 8005ec8:	647b      	str	r3, [r7, #68]	; 0x44
 8005eca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ece:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005ed2:	f7fa f9dd 	bl	8000290 <__aeabi_uldivmod>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	460b      	mov	r3, r1
 8005eda:	4611      	mov	r1, r2
 8005edc:	4b3b      	ldr	r3, [pc, #236]	; (8005fcc <UART_SetConfig+0x2d4>)
 8005ede:	fba3 2301 	umull	r2, r3, r3, r1
 8005ee2:	095b      	lsrs	r3, r3, #5
 8005ee4:	2264      	movs	r2, #100	; 0x64
 8005ee6:	fb02 f303 	mul.w	r3, r2, r3
 8005eea:	1acb      	subs	r3, r1, r3
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005ef2:	4b36      	ldr	r3, [pc, #216]	; (8005fcc <UART_SetConfig+0x2d4>)
 8005ef4:	fba3 2302 	umull	r2, r3, r3, r2
 8005ef8:	095b      	lsrs	r3, r3, #5
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f00:	441c      	add	r4, r3
 8005f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f06:	2200      	movs	r2, #0
 8005f08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005f10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005f14:	4642      	mov	r2, r8
 8005f16:	464b      	mov	r3, r9
 8005f18:	1891      	adds	r1, r2, r2
 8005f1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f1c:	415b      	adcs	r3, r3
 8005f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f24:	4641      	mov	r1, r8
 8005f26:	1851      	adds	r1, r2, r1
 8005f28:	6339      	str	r1, [r7, #48]	; 0x30
 8005f2a:	4649      	mov	r1, r9
 8005f2c:	414b      	adcs	r3, r1
 8005f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8005f30:	f04f 0200 	mov.w	r2, #0
 8005f34:	f04f 0300 	mov.w	r3, #0
 8005f38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005f3c:	4659      	mov	r1, fp
 8005f3e:	00cb      	lsls	r3, r1, #3
 8005f40:	4651      	mov	r1, sl
 8005f42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f46:	4651      	mov	r1, sl
 8005f48:	00ca      	lsls	r2, r1, #3
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4603      	mov	r3, r0
 8005f50:	4642      	mov	r2, r8
 8005f52:	189b      	adds	r3, r3, r2
 8005f54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f58:	464b      	mov	r3, r9
 8005f5a:	460a      	mov	r2, r1
 8005f5c:	eb42 0303 	adc.w	r3, r2, r3
 8005f60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f70:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005f74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f78:	460b      	mov	r3, r1
 8005f7a:	18db      	adds	r3, r3, r3
 8005f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f7e:	4613      	mov	r3, r2
 8005f80:	eb42 0303 	adc.w	r3, r2, r3
 8005f84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005f8e:	f7fa f97f 	bl	8000290 <__aeabi_uldivmod>
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	4b0d      	ldr	r3, [pc, #52]	; (8005fcc <UART_SetConfig+0x2d4>)
 8005f98:	fba3 1302 	umull	r1, r3, r3, r2
 8005f9c:	095b      	lsrs	r3, r3, #5
 8005f9e:	2164      	movs	r1, #100	; 0x64
 8005fa0:	fb01 f303 	mul.w	r3, r1, r3
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	00db      	lsls	r3, r3, #3
 8005fa8:	3332      	adds	r3, #50	; 0x32
 8005faa:	4a08      	ldr	r2, [pc, #32]	; (8005fcc <UART_SetConfig+0x2d4>)
 8005fac:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb0:	095b      	lsrs	r3, r3, #5
 8005fb2:	f003 0207 	and.w	r2, r3, #7
 8005fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4422      	add	r2, r4
 8005fbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005fc0:	e105      	b.n	80061ce <UART_SetConfig+0x4d6>
 8005fc2:	bf00      	nop
 8005fc4:	40011000 	.word	0x40011000
 8005fc8:	40011400 	.word	0x40011400
 8005fcc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005fda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005fde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005fe2:	4642      	mov	r2, r8
 8005fe4:	464b      	mov	r3, r9
 8005fe6:	1891      	adds	r1, r2, r2
 8005fe8:	6239      	str	r1, [r7, #32]
 8005fea:	415b      	adcs	r3, r3
 8005fec:	627b      	str	r3, [r7, #36]	; 0x24
 8005fee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ff2:	4641      	mov	r1, r8
 8005ff4:	1854      	adds	r4, r2, r1
 8005ff6:	4649      	mov	r1, r9
 8005ff8:	eb43 0501 	adc.w	r5, r3, r1
 8005ffc:	f04f 0200 	mov.w	r2, #0
 8006000:	f04f 0300 	mov.w	r3, #0
 8006004:	00eb      	lsls	r3, r5, #3
 8006006:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800600a:	00e2      	lsls	r2, r4, #3
 800600c:	4614      	mov	r4, r2
 800600e:	461d      	mov	r5, r3
 8006010:	4643      	mov	r3, r8
 8006012:	18e3      	adds	r3, r4, r3
 8006014:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006018:	464b      	mov	r3, r9
 800601a:	eb45 0303 	adc.w	r3, r5, r3
 800601e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800602e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006032:	f04f 0200 	mov.w	r2, #0
 8006036:	f04f 0300 	mov.w	r3, #0
 800603a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800603e:	4629      	mov	r1, r5
 8006040:	008b      	lsls	r3, r1, #2
 8006042:	4621      	mov	r1, r4
 8006044:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006048:	4621      	mov	r1, r4
 800604a:	008a      	lsls	r2, r1, #2
 800604c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006050:	f7fa f91e 	bl	8000290 <__aeabi_uldivmod>
 8006054:	4602      	mov	r2, r0
 8006056:	460b      	mov	r3, r1
 8006058:	4b60      	ldr	r3, [pc, #384]	; (80061dc <UART_SetConfig+0x4e4>)
 800605a:	fba3 2302 	umull	r2, r3, r3, r2
 800605e:	095b      	lsrs	r3, r3, #5
 8006060:	011c      	lsls	r4, r3, #4
 8006062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006066:	2200      	movs	r2, #0
 8006068:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800606c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006070:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006074:	4642      	mov	r2, r8
 8006076:	464b      	mov	r3, r9
 8006078:	1891      	adds	r1, r2, r2
 800607a:	61b9      	str	r1, [r7, #24]
 800607c:	415b      	adcs	r3, r3
 800607e:	61fb      	str	r3, [r7, #28]
 8006080:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006084:	4641      	mov	r1, r8
 8006086:	1851      	adds	r1, r2, r1
 8006088:	6139      	str	r1, [r7, #16]
 800608a:	4649      	mov	r1, r9
 800608c:	414b      	adcs	r3, r1
 800608e:	617b      	str	r3, [r7, #20]
 8006090:	f04f 0200 	mov.w	r2, #0
 8006094:	f04f 0300 	mov.w	r3, #0
 8006098:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800609c:	4659      	mov	r1, fp
 800609e:	00cb      	lsls	r3, r1, #3
 80060a0:	4651      	mov	r1, sl
 80060a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060a6:	4651      	mov	r1, sl
 80060a8:	00ca      	lsls	r2, r1, #3
 80060aa:	4610      	mov	r0, r2
 80060ac:	4619      	mov	r1, r3
 80060ae:	4603      	mov	r3, r0
 80060b0:	4642      	mov	r2, r8
 80060b2:	189b      	adds	r3, r3, r2
 80060b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060b8:	464b      	mov	r3, r9
 80060ba:	460a      	mov	r2, r1
 80060bc:	eb42 0303 	adc.w	r3, r2, r3
 80060c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80060ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80060d0:	f04f 0200 	mov.w	r2, #0
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80060dc:	4649      	mov	r1, r9
 80060de:	008b      	lsls	r3, r1, #2
 80060e0:	4641      	mov	r1, r8
 80060e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060e6:	4641      	mov	r1, r8
 80060e8:	008a      	lsls	r2, r1, #2
 80060ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80060ee:	f7fa f8cf 	bl	8000290 <__aeabi_uldivmod>
 80060f2:	4602      	mov	r2, r0
 80060f4:	460b      	mov	r3, r1
 80060f6:	4b39      	ldr	r3, [pc, #228]	; (80061dc <UART_SetConfig+0x4e4>)
 80060f8:	fba3 1302 	umull	r1, r3, r3, r2
 80060fc:	095b      	lsrs	r3, r3, #5
 80060fe:	2164      	movs	r1, #100	; 0x64
 8006100:	fb01 f303 	mul.w	r3, r1, r3
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	011b      	lsls	r3, r3, #4
 8006108:	3332      	adds	r3, #50	; 0x32
 800610a:	4a34      	ldr	r2, [pc, #208]	; (80061dc <UART_SetConfig+0x4e4>)
 800610c:	fba2 2303 	umull	r2, r3, r2, r3
 8006110:	095b      	lsrs	r3, r3, #5
 8006112:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006116:	441c      	add	r4, r3
 8006118:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800611c:	2200      	movs	r2, #0
 800611e:	673b      	str	r3, [r7, #112]	; 0x70
 8006120:	677a      	str	r2, [r7, #116]	; 0x74
 8006122:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006126:	4642      	mov	r2, r8
 8006128:	464b      	mov	r3, r9
 800612a:	1891      	adds	r1, r2, r2
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	415b      	adcs	r3, r3
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006136:	4641      	mov	r1, r8
 8006138:	1851      	adds	r1, r2, r1
 800613a:	6039      	str	r1, [r7, #0]
 800613c:	4649      	mov	r1, r9
 800613e:	414b      	adcs	r3, r1
 8006140:	607b      	str	r3, [r7, #4]
 8006142:	f04f 0200 	mov.w	r2, #0
 8006146:	f04f 0300 	mov.w	r3, #0
 800614a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800614e:	4659      	mov	r1, fp
 8006150:	00cb      	lsls	r3, r1, #3
 8006152:	4651      	mov	r1, sl
 8006154:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006158:	4651      	mov	r1, sl
 800615a:	00ca      	lsls	r2, r1, #3
 800615c:	4610      	mov	r0, r2
 800615e:	4619      	mov	r1, r3
 8006160:	4603      	mov	r3, r0
 8006162:	4642      	mov	r2, r8
 8006164:	189b      	adds	r3, r3, r2
 8006166:	66bb      	str	r3, [r7, #104]	; 0x68
 8006168:	464b      	mov	r3, r9
 800616a:	460a      	mov	r2, r1
 800616c:	eb42 0303 	adc.w	r3, r2, r3
 8006170:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	663b      	str	r3, [r7, #96]	; 0x60
 800617c:	667a      	str	r2, [r7, #100]	; 0x64
 800617e:	f04f 0200 	mov.w	r2, #0
 8006182:	f04f 0300 	mov.w	r3, #0
 8006186:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800618a:	4649      	mov	r1, r9
 800618c:	008b      	lsls	r3, r1, #2
 800618e:	4641      	mov	r1, r8
 8006190:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006194:	4641      	mov	r1, r8
 8006196:	008a      	lsls	r2, r1, #2
 8006198:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800619c:	f7fa f878 	bl	8000290 <__aeabi_uldivmod>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	4b0d      	ldr	r3, [pc, #52]	; (80061dc <UART_SetConfig+0x4e4>)
 80061a6:	fba3 1302 	umull	r1, r3, r3, r2
 80061aa:	095b      	lsrs	r3, r3, #5
 80061ac:	2164      	movs	r1, #100	; 0x64
 80061ae:	fb01 f303 	mul.w	r3, r1, r3
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	011b      	lsls	r3, r3, #4
 80061b6:	3332      	adds	r3, #50	; 0x32
 80061b8:	4a08      	ldr	r2, [pc, #32]	; (80061dc <UART_SetConfig+0x4e4>)
 80061ba:	fba2 2303 	umull	r2, r3, r2, r3
 80061be:	095b      	lsrs	r3, r3, #5
 80061c0:	f003 020f 	and.w	r2, r3, #15
 80061c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4422      	add	r2, r4
 80061cc:	609a      	str	r2, [r3, #8]
}
 80061ce:	bf00      	nop
 80061d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80061d4:	46bd      	mov	sp, r7
 80061d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061da:	bf00      	nop
 80061dc:	51eb851f 	.word	0x51eb851f

080061e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80061e4:	4904      	ldr	r1, [pc, #16]	; (80061f8 <MX_FATFS_Init+0x18>)
 80061e6:	4805      	ldr	r0, [pc, #20]	; (80061fc <MX_FATFS_Init+0x1c>)
 80061e8:	f003 fe9c 	bl	8009f24 <FATFS_LinkDriver>
 80061ec:	4603      	mov	r3, r0
 80061ee:	461a      	mov	r2, r3
 80061f0:	4b03      	ldr	r3, [pc, #12]	; (8006200 <MX_FATFS_Init+0x20>)
 80061f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80061f4:	bf00      	nop
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	2000351c 	.word	0x2000351c
 80061fc:	20000068 	.word	0x20000068
 8006200:	20003518 	.word	0x20003518

08006204 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006204:	b480      	push	{r7}
 8006206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006208:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800620a:	4618      	mov	r0, r3
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	4603      	mov	r3, r0
 800621c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800621e:	79fb      	ldrb	r3, [r7, #7]
 8006220:	4618      	mov	r0, r3
 8006222:	f7fa fb6f 	bl	8000904 <SD_disk_initialize>
 8006226:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006228:	4618      	mov	r0, r3
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	4603      	mov	r3, r0
 8006238:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800623a:	79fb      	ldrb	r3, [r7, #7]
 800623c:	4618      	mov	r0, r3
 800623e:	f7fa fc47 	bl	8000ad0 <SD_disk_status>
 8006242:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006244:	4618      	mov	r0, r3
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	60b9      	str	r1, [r7, #8]
 8006254:	607a      	str	r2, [r7, #4]
 8006256:	603b      	str	r3, [r7, #0]
 8006258:	4603      	mov	r3, r0
 800625a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800625c:	7bf8      	ldrb	r0, [r7, #15]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	68b9      	ldr	r1, [r7, #8]
 8006264:	f7fa fc4a 	bl	8000afc <SD_disk_read>
 8006268:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800626a:	4618      	mov	r0, r3
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b084      	sub	sp, #16
 8006276:	af00      	add	r7, sp, #0
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
 800627c:	603b      	str	r3, [r7, #0]
 800627e:	4603      	mov	r3, r0
 8006280:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8006282:	7bf8      	ldrb	r0, [r7, #15]
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	68b9      	ldr	r1, [r7, #8]
 800628a:	f7fa fca1 	bl	8000bd0 <SD_disk_write>
 800628e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	4603      	mov	r3, r0
 80062a0:	603a      	str	r2, [r7, #0]
 80062a2:	71fb      	strb	r3, [r7, #7]
 80062a4:	460b      	mov	r3, r1
 80062a6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 80062a8:	79b9      	ldrb	r1, [r7, #6]
 80062aa:	79fb      	ldrb	r3, [r7, #7]
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fa fd12 	bl	8000cd8 <SD_disk_ioctl>
 80062b4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3708      	adds	r7, #8
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
	...

080062c0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	4603      	mov	r3, r0
 80062c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80062ca:	79fb      	ldrb	r3, [r7, #7]
 80062cc:	4a08      	ldr	r2, [pc, #32]	; (80062f0 <disk_status+0x30>)
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	79fa      	ldrb	r2, [r7, #7]
 80062d8:	4905      	ldr	r1, [pc, #20]	; (80062f0 <disk_status+0x30>)
 80062da:	440a      	add	r2, r1
 80062dc:	7a12      	ldrb	r2, [r2, #8]
 80062de:	4610      	mov	r0, r2
 80062e0:	4798      	blx	r3
 80062e2:	4603      	mov	r3, r0
 80062e4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80062e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	20003748 	.word	0x20003748

080062f4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	4603      	mov	r3, r0
 80062fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80062fe:	2300      	movs	r3, #0
 8006300:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006302:	79fb      	ldrb	r3, [r7, #7]
 8006304:	4a0d      	ldr	r2, [pc, #52]	; (800633c <disk_initialize+0x48>)
 8006306:	5cd3      	ldrb	r3, [r2, r3]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d111      	bne.n	8006330 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800630c:	79fb      	ldrb	r3, [r7, #7]
 800630e:	4a0b      	ldr	r2, [pc, #44]	; (800633c <disk_initialize+0x48>)
 8006310:	2101      	movs	r1, #1
 8006312:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006314:	79fb      	ldrb	r3, [r7, #7]
 8006316:	4a09      	ldr	r2, [pc, #36]	; (800633c <disk_initialize+0x48>)
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	4413      	add	r3, r2
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	79fa      	ldrb	r2, [r7, #7]
 8006322:	4906      	ldr	r1, [pc, #24]	; (800633c <disk_initialize+0x48>)
 8006324:	440a      	add	r2, r1
 8006326:	7a12      	ldrb	r2, [r2, #8]
 8006328:	4610      	mov	r0, r2
 800632a:	4798      	blx	r3
 800632c:	4603      	mov	r3, r0
 800632e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006330:	7bfb      	ldrb	r3, [r7, #15]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	20003748 	.word	0x20003748

08006340 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006340:	b590      	push	{r4, r7, lr}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	60b9      	str	r1, [r7, #8]
 8006348:	607a      	str	r2, [r7, #4]
 800634a:	603b      	str	r3, [r7, #0]
 800634c:	4603      	mov	r3, r0
 800634e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006350:	7bfb      	ldrb	r3, [r7, #15]
 8006352:	4a0a      	ldr	r2, [pc, #40]	; (800637c <disk_read+0x3c>)
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4413      	add	r3, r2
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	689c      	ldr	r4, [r3, #8]
 800635c:	7bfb      	ldrb	r3, [r7, #15]
 800635e:	4a07      	ldr	r2, [pc, #28]	; (800637c <disk_read+0x3c>)
 8006360:	4413      	add	r3, r2
 8006362:	7a18      	ldrb	r0, [r3, #8]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	68b9      	ldr	r1, [r7, #8]
 800636a:	47a0      	blx	r4
 800636c:	4603      	mov	r3, r0
 800636e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006370:	7dfb      	ldrb	r3, [r7, #23]
}
 8006372:	4618      	mov	r0, r3
 8006374:	371c      	adds	r7, #28
 8006376:	46bd      	mov	sp, r7
 8006378:	bd90      	pop	{r4, r7, pc}
 800637a:	bf00      	nop
 800637c:	20003748 	.word	0x20003748

08006380 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006380:	b590      	push	{r4, r7, lr}
 8006382:	b087      	sub	sp, #28
 8006384:	af00      	add	r7, sp, #0
 8006386:	60b9      	str	r1, [r7, #8]
 8006388:	607a      	str	r2, [r7, #4]
 800638a:	603b      	str	r3, [r7, #0]
 800638c:	4603      	mov	r3, r0
 800638e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006390:	7bfb      	ldrb	r3, [r7, #15]
 8006392:	4a0a      	ldr	r2, [pc, #40]	; (80063bc <disk_write+0x3c>)
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	68dc      	ldr	r4, [r3, #12]
 800639c:	7bfb      	ldrb	r3, [r7, #15]
 800639e:	4a07      	ldr	r2, [pc, #28]	; (80063bc <disk_write+0x3c>)
 80063a0:	4413      	add	r3, r2
 80063a2:	7a18      	ldrb	r0, [r3, #8]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	68b9      	ldr	r1, [r7, #8]
 80063aa:	47a0      	blx	r4
 80063ac:	4603      	mov	r3, r0
 80063ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80063b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	371c      	adds	r7, #28
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd90      	pop	{r4, r7, pc}
 80063ba:	bf00      	nop
 80063bc:	20003748 	.word	0x20003748

080063c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	4603      	mov	r3, r0
 80063c8:	603a      	str	r2, [r7, #0]
 80063ca:	71fb      	strb	r3, [r7, #7]
 80063cc:	460b      	mov	r3, r1
 80063ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80063d0:	79fb      	ldrb	r3, [r7, #7]
 80063d2:	4a09      	ldr	r2, [pc, #36]	; (80063f8 <disk_ioctl+0x38>)
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	79fa      	ldrb	r2, [r7, #7]
 80063de:	4906      	ldr	r1, [pc, #24]	; (80063f8 <disk_ioctl+0x38>)
 80063e0:	440a      	add	r2, r1
 80063e2:	7a10      	ldrb	r0, [r2, #8]
 80063e4:	79b9      	ldrb	r1, [r7, #6]
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	4798      	blx	r3
 80063ea:	4603      	mov	r3, r0
 80063ec:	73fb      	strb	r3, [r7, #15]
  return res;
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	20003748 	.word	0x20003748

080063fc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	3301      	adds	r3, #1
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800640c:	89fb      	ldrh	r3, [r7, #14]
 800640e:	021b      	lsls	r3, r3, #8
 8006410:	b21a      	sxth	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	b21b      	sxth	r3, r3
 8006418:	4313      	orrs	r3, r2
 800641a:	b21b      	sxth	r3, r3
 800641c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800641e:	89fb      	ldrh	r3, [r7, #14]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3303      	adds	r3, #3
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	021b      	lsls	r3, r3, #8
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	3202      	adds	r2, #2
 8006444:	7812      	ldrb	r2, [r2, #0]
 8006446:	4313      	orrs	r3, r2
 8006448:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	021b      	lsls	r3, r3, #8
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	3201      	adds	r2, #1
 8006452:	7812      	ldrb	r2, [r2, #0]
 8006454:	4313      	orrs	r3, r2
 8006456:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	021b      	lsls	r3, r3, #8
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	7812      	ldrb	r2, [r2, #0]
 8006460:	4313      	orrs	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]
	return rv;
 8006464:	68fb      	ldr	r3, [r7, #12]
}
 8006466:	4618      	mov	r0, r3
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006472:	b480      	push	{r7}
 8006474:	b083      	sub	sp, #12
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
 800647a:	460b      	mov	r3, r1
 800647c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	1c5a      	adds	r2, r3, #1
 8006482:	607a      	str	r2, [r7, #4]
 8006484:	887a      	ldrh	r2, [r7, #2]
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	887b      	ldrh	r3, [r7, #2]
 800648c:	0a1b      	lsrs	r3, r3, #8
 800648e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	607a      	str	r2, [r7, #4]
 8006496:	887a      	ldrh	r2, [r7, #2]
 8006498:	b2d2      	uxtb	r2, r2
 800649a:	701a      	strb	r2, [r3, #0]
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	1c5a      	adds	r2, r3, #1
 80064b6:	607a      	str	r2, [r7, #4]
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	b2d2      	uxtb	r2, r2
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	0a1b      	lsrs	r3, r3, #8
 80064c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	1c5a      	adds	r2, r3, #1
 80064c8:	607a      	str	r2, [r7, #4]
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	b2d2      	uxtb	r2, r2
 80064ce:	701a      	strb	r2, [r3, #0]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	0a1b      	lsrs	r3, r3, #8
 80064d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	607a      	str	r2, [r7, #4]
 80064dc:	683a      	ldr	r2, [r7, #0]
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	701a      	strb	r2, [r3, #0]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	0a1b      	lsrs	r3, r3, #8
 80064e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	1c5a      	adds	r2, r3, #1
 80064ec:	607a      	str	r2, [r7, #4]
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	b2d2      	uxtb	r2, r2
 80064f2:	701a      	strb	r2, [r3, #0]
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006500:	b480      	push	{r7}
 8006502:	b087      	sub	sp, #28
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00d      	beq.n	8006536 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	1c53      	adds	r3, r2, #1
 800651e:	613b      	str	r3, [r7, #16]
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	1c59      	adds	r1, r3, #1
 8006524:	6179      	str	r1, [r7, #20]
 8006526:	7812      	ldrb	r2, [r2, #0]
 8006528:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	3b01      	subs	r3, #1
 800652e:	607b      	str	r3, [r7, #4]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1f1      	bne.n	800651a <mem_cpy+0x1a>
	}
}
 8006536:	bf00      	nop
 8006538:	371c      	adds	r7, #28
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006542:	b480      	push	{r7}
 8006544:	b087      	sub	sp, #28
 8006546:	af00      	add	r7, sp, #0
 8006548:	60f8      	str	r0, [r7, #12]
 800654a:	60b9      	str	r1, [r7, #8]
 800654c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	1c5a      	adds	r2, r3, #1
 8006556:	617a      	str	r2, [r7, #20]
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	b2d2      	uxtb	r2, r2
 800655c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	3b01      	subs	r3, #1
 8006562:	607b      	str	r3, [r7, #4]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1f3      	bne.n	8006552 <mem_set+0x10>
}
 800656a:	bf00      	nop
 800656c:	bf00      	nop
 800656e:	371c      	adds	r7, #28
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006578:	b480      	push	{r7}
 800657a:	b089      	sub	sp, #36	; 0x24
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	61fb      	str	r3, [r7, #28]
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800658c:	2300      	movs	r3, #0
 800658e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	1c5a      	adds	r2, r3, #1
 8006594:	61fa      	str	r2, [r7, #28]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	4619      	mov	r1, r3
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	1c5a      	adds	r2, r3, #1
 800659e:	61ba      	str	r2, [r7, #24]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	1acb      	subs	r3, r1, r3
 80065a4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	3b01      	subs	r3, #1
 80065aa:	607b      	str	r3, [r7, #4]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d002      	beq.n	80065b8 <mem_cmp+0x40>
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d0eb      	beq.n	8006590 <mem_cmp+0x18>

	return r;
 80065b8:	697b      	ldr	r3, [r7, #20]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3724      	adds	r7, #36	; 0x24
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80065c6:	b480      	push	{r7}
 80065c8:	b083      	sub	sp, #12
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80065d0:	e002      	b.n	80065d8 <chk_chr+0x12>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	3301      	adds	r3, #1
 80065d6:	607b      	str	r3, [r7, #4]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d005      	beq.n	80065ec <chk_chr+0x26>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	461a      	mov	r2, r3
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d1f2      	bne.n	80065d2 <chk_chr+0xc>
	return *str;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	781b      	ldrb	r3, [r3, #0]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006606:	2300      	movs	r3, #0
 8006608:	60bb      	str	r3, [r7, #8]
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	60fb      	str	r3, [r7, #12]
 800660e:	e029      	b.n	8006664 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006610:	4a27      	ldr	r2, [pc, #156]	; (80066b0 <chk_lock+0xb4>)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	011b      	lsls	r3, r3, #4
 8006616:	4413      	add	r3, r2
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d01d      	beq.n	800665a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800661e:	4a24      	ldr	r2, [pc, #144]	; (80066b0 <chk_lock+0xb4>)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	011b      	lsls	r3, r3, #4
 8006624:	4413      	add	r3, r2
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	429a      	cmp	r2, r3
 800662e:	d116      	bne.n	800665e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006630:	4a1f      	ldr	r2, [pc, #124]	; (80066b0 <chk_lock+0xb4>)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	011b      	lsls	r3, r3, #4
 8006636:	4413      	add	r3, r2
 8006638:	3304      	adds	r3, #4
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006640:	429a      	cmp	r2, r3
 8006642:	d10c      	bne.n	800665e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006644:	4a1a      	ldr	r2, [pc, #104]	; (80066b0 <chk_lock+0xb4>)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	011b      	lsls	r3, r3, #4
 800664a:	4413      	add	r3, r2
 800664c:	3308      	adds	r3, #8
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006654:	429a      	cmp	r2, r3
 8006656:	d102      	bne.n	800665e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006658:	e007      	b.n	800666a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800665a:	2301      	movs	r3, #1
 800665c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	3301      	adds	r3, #1
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d9d2      	bls.n	8006610 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2b02      	cmp	r3, #2
 800666e:	d109      	bne.n	8006684 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d102      	bne.n	800667c <chk_lock+0x80>
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	2b02      	cmp	r3, #2
 800667a:	d101      	bne.n	8006680 <chk_lock+0x84>
 800667c:	2300      	movs	r3, #0
 800667e:	e010      	b.n	80066a2 <chk_lock+0xa6>
 8006680:	2312      	movs	r3, #18
 8006682:	e00e      	b.n	80066a2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d108      	bne.n	800669c <chk_lock+0xa0>
 800668a:	4a09      	ldr	r2, [pc, #36]	; (80066b0 <chk_lock+0xb4>)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	011b      	lsls	r3, r3, #4
 8006690:	4413      	add	r3, r2
 8006692:	330c      	adds	r3, #12
 8006694:	881b      	ldrh	r3, [r3, #0]
 8006696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800669a:	d101      	bne.n	80066a0 <chk_lock+0xa4>
 800669c:	2310      	movs	r3, #16
 800669e:	e000      	b.n	80066a2 <chk_lock+0xa6>
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3714      	adds	r7, #20
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	20003528 	.word	0x20003528

080066b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80066ba:	2300      	movs	r3, #0
 80066bc:	607b      	str	r3, [r7, #4]
 80066be:	e002      	b.n	80066c6 <enq_lock+0x12>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	3301      	adds	r3, #1
 80066c4:	607b      	str	r3, [r7, #4]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d806      	bhi.n	80066da <enq_lock+0x26>
 80066cc:	4a09      	ldr	r2, [pc, #36]	; (80066f4 <enq_lock+0x40>)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	011b      	lsls	r3, r3, #4
 80066d2:	4413      	add	r3, r2
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1f2      	bne.n	80066c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2b02      	cmp	r3, #2
 80066de:	bf14      	ite	ne
 80066e0:	2301      	movne	r3, #1
 80066e2:	2300      	moveq	r3, #0
 80066e4:	b2db      	uxtb	r3, r3
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	20003528 	.word	0x20003528

080066f8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006702:	2300      	movs	r3, #0
 8006704:	60fb      	str	r3, [r7, #12]
 8006706:	e01f      	b.n	8006748 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006708:	4a41      	ldr	r2, [pc, #260]	; (8006810 <inc_lock+0x118>)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	011b      	lsls	r3, r3, #4
 800670e:	4413      	add	r3, r2
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	429a      	cmp	r2, r3
 8006718:	d113      	bne.n	8006742 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800671a:	4a3d      	ldr	r2, [pc, #244]	; (8006810 <inc_lock+0x118>)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	011b      	lsls	r3, r3, #4
 8006720:	4413      	add	r3, r2
 8006722:	3304      	adds	r3, #4
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800672a:	429a      	cmp	r2, r3
 800672c:	d109      	bne.n	8006742 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800672e:	4a38      	ldr	r2, [pc, #224]	; (8006810 <inc_lock+0x118>)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	011b      	lsls	r3, r3, #4
 8006734:	4413      	add	r3, r2
 8006736:	3308      	adds	r3, #8
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800673e:	429a      	cmp	r2, r3
 8006740:	d006      	beq.n	8006750 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	3301      	adds	r3, #1
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d9dc      	bls.n	8006708 <inc_lock+0x10>
 800674e:	e000      	b.n	8006752 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006750:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2b02      	cmp	r3, #2
 8006756:	d132      	bne.n	80067be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006758:	2300      	movs	r3, #0
 800675a:	60fb      	str	r3, [r7, #12]
 800675c:	e002      	b.n	8006764 <inc_lock+0x6c>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	3301      	adds	r3, #1
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d806      	bhi.n	8006778 <inc_lock+0x80>
 800676a:	4a29      	ldr	r2, [pc, #164]	; (8006810 <inc_lock+0x118>)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	011b      	lsls	r3, r3, #4
 8006770:	4413      	add	r3, r2
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1f2      	bne.n	800675e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2b02      	cmp	r3, #2
 800677c:	d101      	bne.n	8006782 <inc_lock+0x8a>
 800677e:	2300      	movs	r3, #0
 8006780:	e040      	b.n	8006804 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	4922      	ldr	r1, [pc, #136]	; (8006810 <inc_lock+0x118>)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	011b      	lsls	r3, r3, #4
 800678c:	440b      	add	r3, r1
 800678e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	491e      	ldr	r1, [pc, #120]	; (8006810 <inc_lock+0x118>)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	011b      	lsls	r3, r3, #4
 800679a:	440b      	add	r3, r1
 800679c:	3304      	adds	r3, #4
 800679e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	695a      	ldr	r2, [r3, #20]
 80067a4:	491a      	ldr	r1, [pc, #104]	; (8006810 <inc_lock+0x118>)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	011b      	lsls	r3, r3, #4
 80067aa:	440b      	add	r3, r1
 80067ac:	3308      	adds	r3, #8
 80067ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80067b0:	4a17      	ldr	r2, [pc, #92]	; (8006810 <inc_lock+0x118>)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	011b      	lsls	r3, r3, #4
 80067b6:	4413      	add	r3, r2
 80067b8:	330c      	adds	r3, #12
 80067ba:	2200      	movs	r2, #0
 80067bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d009      	beq.n	80067d8 <inc_lock+0xe0>
 80067c4:	4a12      	ldr	r2, [pc, #72]	; (8006810 <inc_lock+0x118>)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	011b      	lsls	r3, r3, #4
 80067ca:	4413      	add	r3, r2
 80067cc:	330c      	adds	r3, #12
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d001      	beq.n	80067d8 <inc_lock+0xe0>
 80067d4:	2300      	movs	r3, #0
 80067d6:	e015      	b.n	8006804 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d108      	bne.n	80067f0 <inc_lock+0xf8>
 80067de:	4a0c      	ldr	r2, [pc, #48]	; (8006810 <inc_lock+0x118>)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	011b      	lsls	r3, r3, #4
 80067e4:	4413      	add	r3, r2
 80067e6:	330c      	adds	r3, #12
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	3301      	adds	r3, #1
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	e001      	b.n	80067f4 <inc_lock+0xfc>
 80067f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067f4:	4906      	ldr	r1, [pc, #24]	; (8006810 <inc_lock+0x118>)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	011b      	lsls	r3, r3, #4
 80067fa:	440b      	add	r3, r1
 80067fc:	330c      	adds	r3, #12
 80067fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	3301      	adds	r3, #1
}
 8006804:	4618      	mov	r0, r3
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	20003528 	.word	0x20003528

08006814 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	3b01      	subs	r3, #1
 8006820:	607b      	str	r3, [r7, #4]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d825      	bhi.n	8006874 <dec_lock+0x60>
		n = Files[i].ctr;
 8006828:	4a17      	ldr	r2, [pc, #92]	; (8006888 <dec_lock+0x74>)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	011b      	lsls	r3, r3, #4
 800682e:	4413      	add	r3, r2
 8006830:	330c      	adds	r3, #12
 8006832:	881b      	ldrh	r3, [r3, #0]
 8006834:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006836:	89fb      	ldrh	r3, [r7, #14]
 8006838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800683c:	d101      	bne.n	8006842 <dec_lock+0x2e>
 800683e:	2300      	movs	r3, #0
 8006840:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006842:	89fb      	ldrh	r3, [r7, #14]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d002      	beq.n	800684e <dec_lock+0x3a>
 8006848:	89fb      	ldrh	r3, [r7, #14]
 800684a:	3b01      	subs	r3, #1
 800684c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800684e:	4a0e      	ldr	r2, [pc, #56]	; (8006888 <dec_lock+0x74>)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	011b      	lsls	r3, r3, #4
 8006854:	4413      	add	r3, r2
 8006856:	330c      	adds	r3, #12
 8006858:	89fa      	ldrh	r2, [r7, #14]
 800685a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800685c:	89fb      	ldrh	r3, [r7, #14]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d105      	bne.n	800686e <dec_lock+0x5a>
 8006862:	4a09      	ldr	r2, [pc, #36]	; (8006888 <dec_lock+0x74>)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	011b      	lsls	r3, r3, #4
 8006868:	4413      	add	r3, r2
 800686a:	2200      	movs	r2, #0
 800686c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800686e:	2300      	movs	r3, #0
 8006870:	737b      	strb	r3, [r7, #13]
 8006872:	e001      	b.n	8006878 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006874:	2302      	movs	r3, #2
 8006876:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006878:	7b7b      	ldrb	r3, [r7, #13]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	20003528 	.word	0x20003528

0800688c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006894:	2300      	movs	r3, #0
 8006896:	60fb      	str	r3, [r7, #12]
 8006898:	e010      	b.n	80068bc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800689a:	4a0d      	ldr	r2, [pc, #52]	; (80068d0 <clear_lock+0x44>)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	011b      	lsls	r3, r3, #4
 80068a0:	4413      	add	r3, r2
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d105      	bne.n	80068b6 <clear_lock+0x2a>
 80068aa:	4a09      	ldr	r2, [pc, #36]	; (80068d0 <clear_lock+0x44>)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	011b      	lsls	r3, r3, #4
 80068b0:	4413      	add	r3, r2
 80068b2:	2200      	movs	r2, #0
 80068b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	3301      	adds	r3, #1
 80068ba:	60fb      	str	r3, [r7, #12]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d9eb      	bls.n	800689a <clear_lock+0xe>
	}
}
 80068c2:	bf00      	nop
 80068c4:	bf00      	nop
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr
 80068d0:	20003528 	.word	0x20003528

080068d4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80068dc:	2300      	movs	r3, #0
 80068de:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	78db      	ldrb	r3, [r3, #3]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d034      	beq.n	8006952 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	7858      	ldrb	r0, [r3, #1]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80068f8:	2301      	movs	r3, #1
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	f7ff fd40 	bl	8006380 <disk_write>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d002      	beq.n	800690c <sync_window+0x38>
			res = FR_DISK_ERR;
 8006906:	2301      	movs	r3, #1
 8006908:	73fb      	strb	r3, [r7, #15]
 800690a:	e022      	b.n	8006952 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	1ad2      	subs	r2, r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	429a      	cmp	r2, r3
 8006920:	d217      	bcs.n	8006952 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	789b      	ldrb	r3, [r3, #2]
 8006926:	613b      	str	r3, [r7, #16]
 8006928:	e010      	b.n	800694c <sync_window+0x78>
					wsect += fs->fsize;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	4413      	add	r3, r2
 8006932:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	7858      	ldrb	r0, [r3, #1]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800693e:	2301      	movs	r3, #1
 8006940:	697a      	ldr	r2, [r7, #20]
 8006942:	f7ff fd1d 	bl	8006380 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	3b01      	subs	r3, #1
 800694a:	613b      	str	r3, [r7, #16]
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d8eb      	bhi.n	800692a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006952:	7bfb      	ldrb	r3, [r7, #15]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3718      	adds	r7, #24
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006966:	2300      	movs	r3, #0
 8006968:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800696e:	683a      	ldr	r2, [r7, #0]
 8006970:	429a      	cmp	r2, r3
 8006972:	d01b      	beq.n	80069ac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f7ff ffad 	bl	80068d4 <sync_window>
 800697a:	4603      	mov	r3, r0
 800697c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800697e:	7bfb      	ldrb	r3, [r7, #15]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d113      	bne.n	80069ac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	7858      	ldrb	r0, [r3, #1]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800698e:	2301      	movs	r3, #1
 8006990:	683a      	ldr	r2, [r7, #0]
 8006992:	f7ff fcd5 	bl	8006340 <disk_read>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d004      	beq.n	80069a6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800699c:	f04f 33ff 	mov.w	r3, #4294967295
 80069a0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
	...

080069b8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7ff ff87 	bl	80068d4 <sync_window>
 80069c6:	4603      	mov	r3, r0
 80069c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80069ca:	7bfb      	ldrb	r3, [r7, #15]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d159      	bne.n	8006a84 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	2b03      	cmp	r3, #3
 80069d6:	d149      	bne.n	8006a6c <sync_fs+0xb4>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	791b      	ldrb	r3, [r3, #4]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d145      	bne.n	8006a6c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	899b      	ldrh	r3, [r3, #12]
 80069ea:	461a      	mov	r2, r3
 80069ec:	2100      	movs	r1, #0
 80069ee:	f7ff fda8 	bl	8006542 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	3338      	adds	r3, #56	; 0x38
 80069f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80069fa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7ff fd37 	bl	8006472 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	3338      	adds	r3, #56	; 0x38
 8006a08:	4921      	ldr	r1, [pc, #132]	; (8006a90 <sync_fs+0xd8>)
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7ff fd4c 	bl	80064a8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	3338      	adds	r3, #56	; 0x38
 8006a14:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006a18:	491e      	ldr	r1, [pc, #120]	; (8006a94 <sync_fs+0xdc>)
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7ff fd44 	bl	80064a8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	3338      	adds	r3, #56	; 0x38
 8006a24:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	4610      	mov	r0, r2
 8006a30:	f7ff fd3a 	bl	80064a8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	3338      	adds	r3, #56	; 0x38
 8006a38:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	4619      	mov	r1, r3
 8006a42:	4610      	mov	r0, r2
 8006a44:	f7ff fd30 	bl	80064a8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4c:	1c5a      	adds	r2, r3, #1
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	7858      	ldrb	r0, [r3, #1]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a60:	2301      	movs	r3, #1
 8006a62:	f7ff fc8d 	bl	8006380 <disk_write>
			fs->fsi_flag = 0;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	785b      	ldrb	r3, [r3, #1]
 8006a70:	2200      	movs	r2, #0
 8006a72:	2100      	movs	r1, #0
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7ff fca3 	bl	80063c0 <disk_ioctl>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <sync_fs+0xcc>
 8006a80:	2301      	movs	r3, #1
 8006a82:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	41615252 	.word	0x41615252
 8006a94:	61417272 	.word	0x61417272

08006a98 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	3b02      	subs	r3, #2
 8006aa6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	69db      	ldr	r3, [r3, #28]
 8006aac:	3b02      	subs	r3, #2
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d301      	bcc.n	8006ab8 <clust2sect+0x20>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	e008      	b.n	8006aca <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	895b      	ldrh	r3, [r3, #10]
 8006abc:	461a      	mov	r2, r3
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	fb03 f202 	mul.w	r2, r3, r2
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac8:	4413      	add	r3, r2
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b086      	sub	sp, #24
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d904      	bls.n	8006af6 <get_fat+0x20>
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	69db      	ldr	r3, [r3, #28]
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d302      	bcc.n	8006afc <get_fat+0x26>
		val = 1;	/* Internal error */
 8006af6:	2301      	movs	r3, #1
 8006af8:	617b      	str	r3, [r7, #20]
 8006afa:	e0bb      	b.n	8006c74 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006afc:	f04f 33ff 	mov.w	r3, #4294967295
 8006b00:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	2b03      	cmp	r3, #3
 8006b08:	f000 8083 	beq.w	8006c12 <get_fat+0x13c>
 8006b0c:	2b03      	cmp	r3, #3
 8006b0e:	f300 80a7 	bgt.w	8006c60 <get_fat+0x18a>
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d002      	beq.n	8006b1c <get_fat+0x46>
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d056      	beq.n	8006bc8 <get_fat+0xf2>
 8006b1a:	e0a1      	b.n	8006c60 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	60fb      	str	r3, [r7, #12]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	085b      	lsrs	r3, r3, #1
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	4413      	add	r3, r2
 8006b28:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	899b      	ldrh	r3, [r3, #12]
 8006b32:	4619      	mov	r1, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b3a:	4413      	add	r3, r2
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	6938      	ldr	r0, [r7, #16]
 8006b40:	f7ff ff0c 	bl	800695c <move_window>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f040 808d 	bne.w	8006c66 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	1c5a      	adds	r2, r3, #1
 8006b50:	60fa      	str	r2, [r7, #12]
 8006b52:	693a      	ldr	r2, [r7, #16]
 8006b54:	8992      	ldrh	r2, [r2, #12]
 8006b56:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b5a:	fb01 f202 	mul.w	r2, r1, r2
 8006b5e:	1a9b      	subs	r3, r3, r2
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	4413      	add	r3, r2
 8006b64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b68:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	899b      	ldrh	r3, [r3, #12]
 8006b72:	4619      	mov	r1, r3
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b7a:	4413      	add	r3, r2
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	6938      	ldr	r0, [r7, #16]
 8006b80:	f7ff feec 	bl	800695c <move_window>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d16f      	bne.n	8006c6a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	899b      	ldrh	r3, [r3, #12]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b96:	fb01 f202 	mul.w	r2, r1, r2
 8006b9a:	1a9b      	subs	r3, r3, r2
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006ba4:	021b      	lsls	r3, r3, #8
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	f003 0301 	and.w	r3, r3, #1
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d002      	beq.n	8006bbe <get_fat+0xe8>
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	091b      	lsrs	r3, r3, #4
 8006bbc:	e002      	b.n	8006bc4 <get_fat+0xee>
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bc4:	617b      	str	r3, [r7, #20]
			break;
 8006bc6:	e055      	b.n	8006c74 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	899b      	ldrh	r3, [r3, #12]
 8006bd0:	085b      	lsrs	r3, r3, #1
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bdc:	4413      	add	r3, r2
 8006bde:	4619      	mov	r1, r3
 8006be0:	6938      	ldr	r0, [r7, #16]
 8006be2:	f7ff febb 	bl	800695c <move_window>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d140      	bne.n	8006c6e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	005b      	lsls	r3, r3, #1
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	8992      	ldrh	r2, [r2, #12]
 8006bfa:	fbb3 f0f2 	udiv	r0, r3, r2
 8006bfe:	fb00 f202 	mul.w	r2, r0, r2
 8006c02:	1a9b      	subs	r3, r3, r2
 8006c04:	440b      	add	r3, r1
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7ff fbf8 	bl	80063fc <ld_word>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	617b      	str	r3, [r7, #20]
			break;
 8006c10:	e030      	b.n	8006c74 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	899b      	ldrh	r3, [r3, #12]
 8006c1a:	089b      	lsrs	r3, r3, #2
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	4619      	mov	r1, r3
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c26:	4413      	add	r3, r2
 8006c28:	4619      	mov	r1, r3
 8006c2a:	6938      	ldr	r0, [r7, #16]
 8006c2c:	f7ff fe96 	bl	800695c <move_window>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d11d      	bne.n	8006c72 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	8992      	ldrh	r2, [r2, #12]
 8006c44:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c48:	fb00 f202 	mul.w	r2, r0, r2
 8006c4c:	1a9b      	subs	r3, r3, r2
 8006c4e:	440b      	add	r3, r1
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7ff fbeb 	bl	800642c <ld_dword>
 8006c56:	4603      	mov	r3, r0
 8006c58:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c5c:	617b      	str	r3, [r7, #20]
			break;
 8006c5e:	e009      	b.n	8006c74 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006c60:	2301      	movs	r3, #1
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	e006      	b.n	8006c74 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c66:	bf00      	nop
 8006c68:	e004      	b.n	8006c74 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c6a:	bf00      	nop
 8006c6c:	e002      	b.n	8006c74 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006c6e:	bf00      	nop
 8006c70:	e000      	b.n	8006c74 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c72:	bf00      	nop
		}
	}

	return val;
 8006c74:	697b      	ldr	r3, [r7, #20]
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006c7e:	b590      	push	{r4, r7, lr}
 8006c80:	b089      	sub	sp, #36	; 0x24
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	60f8      	str	r0, [r7, #12]
 8006c86:	60b9      	str	r1, [r7, #8]
 8006c88:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006c8a:	2302      	movs	r3, #2
 8006c8c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	f240 8102 	bls.w	8006e9a <put_fat+0x21c>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	69db      	ldr	r3, [r3, #28]
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	f080 80fc 	bcs.w	8006e9a <put_fat+0x21c>
		switch (fs->fs_type) {
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	f000 80b6 	beq.w	8006e18 <put_fat+0x19a>
 8006cac:	2b03      	cmp	r3, #3
 8006cae:	f300 80fd 	bgt.w	8006eac <put_fat+0x22e>
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d003      	beq.n	8006cbe <put_fat+0x40>
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	f000 8083 	beq.w	8006dc2 <put_fat+0x144>
 8006cbc:	e0f6      	b.n	8006eac <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	61bb      	str	r3, [r7, #24]
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	085b      	lsrs	r3, r3, #1
 8006cc6:	69ba      	ldr	r2, [r7, #24]
 8006cc8:	4413      	add	r3, r2
 8006cca:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	899b      	ldrh	r3, [r3, #12]
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cdc:	4413      	add	r3, r2
 8006cde:	4619      	mov	r1, r3
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f7ff fe3b 	bl	800695c <move_window>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006cea:	7ffb      	ldrb	r3, [r7, #31]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f040 80d6 	bne.w	8006e9e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	1c5a      	adds	r2, r3, #1
 8006cfc:	61ba      	str	r2, [r7, #24]
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	8992      	ldrh	r2, [r2, #12]
 8006d02:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d06:	fb00 f202 	mul.w	r2, r0, r2
 8006d0a:	1a9b      	subs	r3, r3, r2
 8006d0c:	440b      	add	r3, r1
 8006d0e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00d      	beq.n	8006d36 <put_fat+0xb8>
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	b25b      	sxtb	r3, r3
 8006d20:	f003 030f 	and.w	r3, r3, #15
 8006d24:	b25a      	sxtb	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	011b      	lsls	r3, r3, #4
 8006d2c:	b25b      	sxtb	r3, r3
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	b25b      	sxtb	r3, r3
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	e001      	b.n	8006d3a <put_fat+0xbc>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2201      	movs	r2, #1
 8006d42:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	899b      	ldrh	r3, [r3, #12]
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d54:	4413      	add	r3, r2
 8006d56:	4619      	mov	r1, r3
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f7ff fdff 	bl	800695c <move_window>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d62:	7ffb      	ldrb	r3, [r7, #31]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f040 809c 	bne.w	8006ea2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	899b      	ldrh	r3, [r3, #12]
 8006d74:	461a      	mov	r2, r3
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d7c:	fb00 f202 	mul.w	r2, r0, r2
 8006d80:	1a9b      	subs	r3, r3, r2
 8006d82:	440b      	add	r3, r1
 8006d84:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d003      	beq.n	8006d98 <put_fat+0x11a>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	091b      	lsrs	r3, r3, #4
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	e00e      	b.n	8006db6 <put_fat+0x138>
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	b25b      	sxtb	r3, r3
 8006d9e:	f023 030f 	bic.w	r3, r3, #15
 8006da2:	b25a      	sxtb	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	0a1b      	lsrs	r3, r3, #8
 8006da8:	b25b      	sxtb	r3, r3
 8006daa:	f003 030f 	and.w	r3, r3, #15
 8006dae:	b25b      	sxtb	r3, r3
 8006db0:	4313      	orrs	r3, r2
 8006db2:	b25b      	sxtb	r3, r3
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	70da      	strb	r2, [r3, #3]
			break;
 8006dc0:	e074      	b.n	8006eac <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	899b      	ldrh	r3, [r3, #12]
 8006dca:	085b      	lsrs	r3, r3, #1
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	4619      	mov	r1, r3
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006dd6:	4413      	add	r3, r2
 8006dd8:	4619      	mov	r1, r3
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f7ff fdbe 	bl	800695c <move_window>
 8006de0:	4603      	mov	r3, r0
 8006de2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006de4:	7ffb      	ldrb	r3, [r7, #31]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d15d      	bne.n	8006ea6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	8992      	ldrh	r2, [r2, #12]
 8006df8:	fbb3 f0f2 	udiv	r0, r3, r2
 8006dfc:	fb00 f202 	mul.w	r2, r0, r2
 8006e00:	1a9b      	subs	r3, r3, r2
 8006e02:	440b      	add	r3, r1
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	b292      	uxth	r2, r2
 8006e08:	4611      	mov	r1, r2
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7ff fb31 	bl	8006472 <st_word>
			fs->wflag = 1;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2201      	movs	r2, #1
 8006e14:	70da      	strb	r2, [r3, #3]
			break;
 8006e16:	e049      	b.n	8006eac <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	899b      	ldrh	r3, [r3, #12]
 8006e20:	089b      	lsrs	r3, r3, #2
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	4619      	mov	r1, r3
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e2c:	4413      	add	r3, r2
 8006e2e:	4619      	mov	r1, r3
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f7ff fd93 	bl	800695c <move_window>
 8006e36:	4603      	mov	r3, r0
 8006e38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e3a:	7ffb      	ldrb	r3, [r7, #31]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d134      	bne.n	8006eaa <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	8992      	ldrh	r2, [r2, #12]
 8006e54:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e58:	fb00 f202 	mul.w	r2, r0, r2
 8006e5c:	1a9b      	subs	r3, r3, r2
 8006e5e:	440b      	add	r3, r1
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7ff fae3 	bl	800642c <ld_dword>
 8006e66:	4603      	mov	r3, r0
 8006e68:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006e6c:	4323      	orrs	r3, r4
 8006e6e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	8992      	ldrh	r2, [r2, #12]
 8006e7e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e82:	fb00 f202 	mul.w	r2, r0, r2
 8006e86:	1a9b      	subs	r3, r3, r2
 8006e88:	440b      	add	r3, r1
 8006e8a:	6879      	ldr	r1, [r7, #4]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7ff fb0b 	bl	80064a8 <st_dword>
			fs->wflag = 1;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2201      	movs	r2, #1
 8006e96:	70da      	strb	r2, [r3, #3]
			break;
 8006e98:	e008      	b.n	8006eac <put_fat+0x22e>
		}
	}
 8006e9a:	bf00      	nop
 8006e9c:	e006      	b.n	8006eac <put_fat+0x22e>
			if (res != FR_OK) break;
 8006e9e:	bf00      	nop
 8006ea0:	e004      	b.n	8006eac <put_fat+0x22e>
			if (res != FR_OK) break;
 8006ea2:	bf00      	nop
 8006ea4:	e002      	b.n	8006eac <put_fat+0x22e>
			if (res != FR_OK) break;
 8006ea6:	bf00      	nop
 8006ea8:	e000      	b.n	8006eac <put_fat+0x22e>
			if (res != FR_OK) break;
 8006eaa:	bf00      	nop
	return res;
 8006eac:	7ffb      	ldrb	r3, [r7, #31]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3724      	adds	r7, #36	; 0x24
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd90      	pop	{r4, r7, pc}

08006eb6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b088      	sub	sp, #32
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	60f8      	str	r0, [r7, #12]
 8006ebe:	60b9      	str	r1, [r7, #8]
 8006ec0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d904      	bls.n	8006edc <remove_chain+0x26>
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d301      	bcc.n	8006ee0 <remove_chain+0x2a>
 8006edc:	2302      	movs	r3, #2
 8006ede:	e04b      	b.n	8006f78 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00c      	beq.n	8006f00 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eea:	6879      	ldr	r1, [r7, #4]
 8006eec:	69b8      	ldr	r0, [r7, #24]
 8006eee:	f7ff fec6 	bl	8006c7e <put_fat>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006ef6:	7ffb      	ldrb	r3, [r7, #31]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d001      	beq.n	8006f00 <remove_chain+0x4a>
 8006efc:	7ffb      	ldrb	r3, [r7, #31]
 8006efe:	e03b      	b.n	8006f78 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006f00:	68b9      	ldr	r1, [r7, #8]
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f7ff fde7 	bl	8006ad6 <get_fat>
 8006f08:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d031      	beq.n	8006f74 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d101      	bne.n	8006f1a <remove_chain+0x64>
 8006f16:	2302      	movs	r3, #2
 8006f18:	e02e      	b.n	8006f78 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f20:	d101      	bne.n	8006f26 <remove_chain+0x70>
 8006f22:	2301      	movs	r3, #1
 8006f24:	e028      	b.n	8006f78 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006f26:	2200      	movs	r2, #0
 8006f28:	68b9      	ldr	r1, [r7, #8]
 8006f2a:	69b8      	ldr	r0, [r7, #24]
 8006f2c:	f7ff fea7 	bl	8006c7e <put_fat>
 8006f30:	4603      	mov	r3, r0
 8006f32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006f34:	7ffb      	ldrb	r3, [r7, #31]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d001      	beq.n	8006f3e <remove_chain+0x88>
 8006f3a:	7ffb      	ldrb	r3, [r7, #31]
 8006f3c:	e01c      	b.n	8006f78 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	699a      	ldr	r2, [r3, #24]
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	3b02      	subs	r3, #2
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d20b      	bcs.n	8006f64 <remove_chain+0xae>
			fs->free_clst++;
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	699b      	ldr	r3, [r3, #24]
 8006f50:	1c5a      	adds	r2, r3, #1
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	791b      	ldrb	r3, [r3, #4]
 8006f5a:	f043 0301 	orr.w	r3, r3, #1
 8006f5e:	b2da      	uxtb	r2, r3
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	69db      	ldr	r3, [r3, #28]
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d3c6      	bcc.n	8006f00 <remove_chain+0x4a>
 8006f72:	e000      	b.n	8006f76 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006f74:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3720      	adds	r7, #32
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b088      	sub	sp, #32
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10d      	bne.n	8006fb2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d004      	beq.n	8006fac <create_chain+0x2c>
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	69db      	ldr	r3, [r3, #28]
 8006fa6:	69ba      	ldr	r2, [r7, #24]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d31b      	bcc.n	8006fe4 <create_chain+0x64>
 8006fac:	2301      	movs	r3, #1
 8006fae:	61bb      	str	r3, [r7, #24]
 8006fb0:	e018      	b.n	8006fe4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f7ff fd8e 	bl	8006ad6 <get_fat>
 8006fba:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d801      	bhi.n	8006fc6 <create_chain+0x46>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e070      	b.n	80070a8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fcc:	d101      	bne.n	8006fd2 <create_chain+0x52>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	e06a      	b.n	80070a8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	69db      	ldr	r3, [r3, #28]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d201      	bcs.n	8006fe0 <create_chain+0x60>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	e063      	b.n	80070a8 <create_chain+0x128>
		scl = clst;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	3301      	adds	r3, #1
 8006fec:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	69fa      	ldr	r2, [r7, #28]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d307      	bcc.n	8007008 <create_chain+0x88>
				ncl = 2;
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006ffc:	69fa      	ldr	r2, [r7, #28]
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	429a      	cmp	r2, r3
 8007002:	d901      	bls.n	8007008 <create_chain+0x88>
 8007004:	2300      	movs	r3, #0
 8007006:	e04f      	b.n	80070a8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007008:	69f9      	ldr	r1, [r7, #28]
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7ff fd63 	bl	8006ad6 <get_fat>
 8007010:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00e      	beq.n	8007036 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d003      	beq.n	8007026 <create_chain+0xa6>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007024:	d101      	bne.n	800702a <create_chain+0xaa>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	e03e      	b.n	80070a8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800702a:	69fa      	ldr	r2, [r7, #28]
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	429a      	cmp	r2, r3
 8007030:	d1da      	bne.n	8006fe8 <create_chain+0x68>
 8007032:	2300      	movs	r3, #0
 8007034:	e038      	b.n	80070a8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007036:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007038:	f04f 32ff 	mov.w	r2, #4294967295
 800703c:	69f9      	ldr	r1, [r7, #28]
 800703e:	6938      	ldr	r0, [r7, #16]
 8007040:	f7ff fe1d 	bl	8006c7e <put_fat>
 8007044:	4603      	mov	r3, r0
 8007046:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007048:	7dfb      	ldrb	r3, [r7, #23]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d109      	bne.n	8007062 <create_chain+0xe2>
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d006      	beq.n	8007062 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007054:	69fa      	ldr	r2, [r7, #28]
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6938      	ldr	r0, [r7, #16]
 800705a:	f7ff fe10 	bl	8006c7e <put_fat>
 800705e:	4603      	mov	r3, r0
 8007060:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007062:	7dfb      	ldrb	r3, [r7, #23]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d116      	bne.n	8007096 <create_chain+0x116>
		fs->last_clst = ncl;
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	69fa      	ldr	r2, [r7, #28]
 800706c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	699a      	ldr	r2, [r3, #24]
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	69db      	ldr	r3, [r3, #28]
 8007076:	3b02      	subs	r3, #2
 8007078:	429a      	cmp	r2, r3
 800707a:	d804      	bhi.n	8007086 <create_chain+0x106>
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	1e5a      	subs	r2, r3, #1
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	791b      	ldrb	r3, [r3, #4]
 800708a:	f043 0301 	orr.w	r3, r3, #1
 800708e:	b2da      	uxtb	r2, r3
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	711a      	strb	r2, [r3, #4]
 8007094:	e007      	b.n	80070a6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007096:	7dfb      	ldrb	r3, [r7, #23]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d102      	bne.n	80070a2 <create_chain+0x122>
 800709c:	f04f 33ff 	mov.w	r3, #4294967295
 80070a0:	e000      	b.n	80070a4 <create_chain+0x124>
 80070a2:	2301      	movs	r3, #1
 80070a4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80070a6:	69fb      	ldr	r3, [r7, #28]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3720      	adds	r7, #32
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b087      	sub	sp, #28
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c4:	3304      	adds	r3, #4
 80070c6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	899b      	ldrh	r3, [r3, #12]
 80070cc:	461a      	mov	r2, r3
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	8952      	ldrh	r2, [r2, #10]
 80070d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80070dc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	1d1a      	adds	r2, r3, #4
 80070e2:	613a      	str	r2, [r7, #16]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <clmt_clust+0x42>
 80070ee:	2300      	movs	r3, #0
 80070f0:	e010      	b.n	8007114 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d307      	bcc.n	800710a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	617b      	str	r3, [r7, #20]
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	3304      	adds	r3, #4
 8007106:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007108:	e7e9      	b.n	80070de <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800710a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	4413      	add	r3, r2
}
 8007114:	4618      	mov	r0, r3
 8007116:	371c      	adds	r7, #28
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007136:	d204      	bcs.n	8007142 <dir_sdi+0x22>
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	f003 031f 	and.w	r3, r3, #31
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007142:	2302      	movs	r3, #2
 8007144:	e071      	b.n	800722a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d106      	bne.n	8007166 <dir_sdi+0x46>
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	2b02      	cmp	r3, #2
 800715e:	d902      	bls.n	8007166 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007164:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10c      	bne.n	8007186 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	095b      	lsrs	r3, r3, #5
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	8912      	ldrh	r2, [r2, #8]
 8007174:	4293      	cmp	r3, r2
 8007176:	d301      	bcc.n	800717c <dir_sdi+0x5c>
 8007178:	2302      	movs	r3, #2
 800717a:	e056      	b.n	800722a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	61da      	str	r2, [r3, #28]
 8007184:	e02d      	b.n	80071e2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	895b      	ldrh	r3, [r3, #10]
 800718a:	461a      	mov	r2, r3
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	899b      	ldrh	r3, [r3, #12]
 8007190:	fb02 f303 	mul.w	r3, r2, r3
 8007194:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007196:	e019      	b.n	80071cc <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6979      	ldr	r1, [r7, #20]
 800719c:	4618      	mov	r0, r3
 800719e:	f7ff fc9a 	bl	8006ad6 <get_fat>
 80071a2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071aa:	d101      	bne.n	80071b0 <dir_sdi+0x90>
 80071ac:	2301      	movs	r3, #1
 80071ae:	e03c      	b.n	800722a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d904      	bls.n	80071c0 <dir_sdi+0xa0>
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	69db      	ldr	r3, [r3, #28]
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d301      	bcc.n	80071c4 <dir_sdi+0xa4>
 80071c0:	2302      	movs	r3, #2
 80071c2:	e032      	b.n	800722a <dir_sdi+0x10a>
			ofs -= csz;
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80071cc:	683a      	ldr	r2, [r7, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d2e1      	bcs.n	8007198 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80071d4:	6979      	ldr	r1, [r7, #20]
 80071d6:	6938      	ldr	r0, [r7, #16]
 80071d8:	f7ff fc5e 	bl	8006a98 <clust2sect>
 80071dc:	4602      	mov	r2, r0
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	697a      	ldr	r2, [r7, #20]
 80071e6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	69db      	ldr	r3, [r3, #28]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <dir_sdi+0xd4>
 80071f0:	2302      	movs	r3, #2
 80071f2:	e01a      	b.n	800722a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	69da      	ldr	r2, [r3, #28]
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	899b      	ldrh	r3, [r3, #12]
 80071fc:	4619      	mov	r1, r3
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	fbb3 f3f1 	udiv	r3, r3, r1
 8007204:	441a      	add	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	899b      	ldrh	r3, [r3, #12]
 8007214:	461a      	mov	r2, r3
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	fbb3 f0f2 	udiv	r0, r3, r2
 800721c:	fb00 f202 	mul.w	r2, r0, r2
 8007220:	1a9b      	subs	r3, r3, r2
 8007222:	18ca      	adds	r2, r1, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3718      	adds	r7, #24
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b086      	sub	sp, #24
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	3320      	adds	r3, #32
 8007248:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	69db      	ldr	r3, [r3, #28]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d003      	beq.n	800725a <dir_next+0x28>
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007258:	d301      	bcc.n	800725e <dir_next+0x2c>
 800725a:	2304      	movs	r3, #4
 800725c:	e0bb      	b.n	80073d6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	899b      	ldrh	r3, [r3, #12]
 8007262:	461a      	mov	r2, r3
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	fbb3 f1f2 	udiv	r1, r3, r2
 800726a:	fb01 f202 	mul.w	r2, r1, r2
 800726e:	1a9b      	subs	r3, r3, r2
 8007270:	2b00      	cmp	r3, #0
 8007272:	f040 809d 	bne.w	80073b0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	69db      	ldr	r3, [r3, #28]
 800727a:	1c5a      	adds	r2, r3, #1
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10b      	bne.n	80072a0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	095b      	lsrs	r3, r3, #5
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	8912      	ldrh	r2, [r2, #8]
 8007290:	4293      	cmp	r3, r2
 8007292:	f0c0 808d 	bcc.w	80073b0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	61da      	str	r2, [r3, #28]
 800729c:	2304      	movs	r3, #4
 800729e:	e09a      	b.n	80073d6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	899b      	ldrh	r3, [r3, #12]
 80072a4:	461a      	mov	r2, r3
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	8952      	ldrh	r2, [r2, #10]
 80072b0:	3a01      	subs	r2, #1
 80072b2:	4013      	ands	r3, r2
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d17b      	bne.n	80073b0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	4619      	mov	r1, r3
 80072c0:	4610      	mov	r0, r2
 80072c2:	f7ff fc08 	bl	8006ad6 <get_fat>
 80072c6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d801      	bhi.n	80072d2 <dir_next+0xa0>
 80072ce:	2302      	movs	r3, #2
 80072d0:	e081      	b.n	80073d6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d8:	d101      	bne.n	80072de <dir_next+0xac>
 80072da:	2301      	movs	r3, #1
 80072dc:	e07b      	b.n	80073d6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	69db      	ldr	r3, [r3, #28]
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d359      	bcc.n	800739c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d104      	bne.n	80072f8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	61da      	str	r2, [r3, #28]
 80072f4:	2304      	movs	r3, #4
 80072f6:	e06e      	b.n	80073d6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	4619      	mov	r1, r3
 8007300:	4610      	mov	r0, r2
 8007302:	f7ff fe3d 	bl	8006f80 <create_chain>
 8007306:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <dir_next+0xe0>
 800730e:	2307      	movs	r3, #7
 8007310:	e061      	b.n	80073d6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d101      	bne.n	800731c <dir_next+0xea>
 8007318:	2302      	movs	r3, #2
 800731a:	e05c      	b.n	80073d6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007322:	d101      	bne.n	8007328 <dir_next+0xf6>
 8007324:	2301      	movs	r3, #1
 8007326:	e056      	b.n	80073d6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f7ff fad3 	bl	80068d4 <sync_window>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d001      	beq.n	8007338 <dir_next+0x106>
 8007334:	2301      	movs	r3, #1
 8007336:	e04e      	b.n	80073d6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	899b      	ldrh	r3, [r3, #12]
 8007342:	461a      	mov	r2, r3
 8007344:	2100      	movs	r1, #0
 8007346:	f7ff f8fc 	bl	8006542 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800734a:	2300      	movs	r3, #0
 800734c:	613b      	str	r3, [r7, #16]
 800734e:	6979      	ldr	r1, [r7, #20]
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f7ff fba1 	bl	8006a98 <clust2sect>
 8007356:	4602      	mov	r2, r0
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	635a      	str	r2, [r3, #52]	; 0x34
 800735c:	e012      	b.n	8007384 <dir_next+0x152>
						fs->wflag = 1;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2201      	movs	r2, #1
 8007362:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f7ff fab5 	bl	80068d4 <sync_window>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d001      	beq.n	8007374 <dir_next+0x142>
 8007370:	2301      	movs	r3, #1
 8007372:	e030      	b.n	80073d6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	3301      	adds	r3, #1
 8007378:	613b      	str	r3, [r7, #16]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800737e:	1c5a      	adds	r2, r3, #1
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	635a      	str	r2, [r3, #52]	; 0x34
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	895b      	ldrh	r3, [r3, #10]
 8007388:	461a      	mov	r2, r3
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	4293      	cmp	r3, r2
 800738e:	d3e6      	bcc.n	800735e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	1ad2      	subs	r2, r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80073a2:	6979      	ldr	r1, [r7, #20]
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f7ff fb77 	bl	8006a98 <clust2sect>
 80073aa:	4602      	mov	r2, r0
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	899b      	ldrh	r3, [r3, #12]
 80073c0:	461a      	mov	r2, r3
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	fbb3 f0f2 	udiv	r0, r3, r2
 80073c8:	fb00 f202 	mul.w	r2, r0, r2
 80073cc:	1a9b      	subs	r3, r3, r2
 80073ce:	18ca      	adds	r2, r1, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3718      	adds	r7, #24
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b086      	sub	sp, #24
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80073ee:	2100      	movs	r1, #0
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7ff fe95 	bl	8007120 <dir_sdi>
 80073f6:	4603      	mov	r3, r0
 80073f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80073fa:	7dfb      	ldrb	r3, [r7, #23]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d12b      	bne.n	8007458 <dir_alloc+0x7a>
		n = 0;
 8007400:	2300      	movs	r3, #0
 8007402:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	69db      	ldr	r3, [r3, #28]
 8007408:	4619      	mov	r1, r3
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f7ff faa6 	bl	800695c <move_window>
 8007410:	4603      	mov	r3, r0
 8007412:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007414:	7dfb      	ldrb	r3, [r7, #23]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d11d      	bne.n	8007456 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	2be5      	cmp	r3, #229	; 0xe5
 8007422:	d004      	beq.n	800742e <dir_alloc+0x50>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a1b      	ldr	r3, [r3, #32]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d107      	bne.n	800743e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	3301      	adds	r3, #1
 8007432:	613b      	str	r3, [r7, #16]
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	429a      	cmp	r2, r3
 800743a:	d102      	bne.n	8007442 <dir_alloc+0x64>
 800743c:	e00c      	b.n	8007458 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800743e:	2300      	movs	r3, #0
 8007440:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007442:	2101      	movs	r1, #1
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f7ff fef4 	bl	8007232 <dir_next>
 800744a:	4603      	mov	r3, r0
 800744c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800744e:	7dfb      	ldrb	r3, [r7, #23]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d0d7      	beq.n	8007404 <dir_alloc+0x26>
 8007454:	e000      	b.n	8007458 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007456:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007458:	7dfb      	ldrb	r3, [r7, #23]
 800745a:	2b04      	cmp	r3, #4
 800745c:	d101      	bne.n	8007462 <dir_alloc+0x84>
 800745e:	2307      	movs	r3, #7
 8007460:	75fb      	strb	r3, [r7, #23]
	return res;
 8007462:	7dfb      	ldrb	r3, [r7, #23]
}
 8007464:	4618      	mov	r0, r3
 8007466:	3718      	adds	r7, #24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	331a      	adds	r3, #26
 800747a:	4618      	mov	r0, r3
 800747c:	f7fe ffbe 	bl	80063fc <ld_word>
 8007480:	4603      	mov	r3, r0
 8007482:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	2b03      	cmp	r3, #3
 800748a:	d109      	bne.n	80074a0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	3314      	adds	r3, #20
 8007490:	4618      	mov	r0, r3
 8007492:	f7fe ffb3 	bl	80063fc <ld_word>
 8007496:	4603      	mov	r3, r0
 8007498:	041b      	lsls	r3, r3, #16
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	4313      	orrs	r3, r2
 800749e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80074a0:	68fb      	ldr	r3, [r7, #12]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b084      	sub	sp, #16
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	60f8      	str	r0, [r7, #12]
 80074b2:	60b9      	str	r1, [r7, #8]
 80074b4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	331a      	adds	r3, #26
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	b292      	uxth	r2, r2
 80074be:	4611      	mov	r1, r2
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7fe ffd6 	bl	8006472 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	2b03      	cmp	r3, #3
 80074cc:	d109      	bne.n	80074e2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	f103 0214 	add.w	r2, r3, #20
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	0c1b      	lsrs	r3, r3, #16
 80074d8:	b29b      	uxth	r3, r3
 80074da:	4619      	mov	r1, r3
 80074dc:	4610      	mov	r0, r2
 80074de:	f7fe ffc8 	bl	8006472 <st_word>
	}
}
 80074e2:	bf00      	nop
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
	...

080074ec <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80074ec:	b590      	push	{r4, r7, lr}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	331a      	adds	r3, #26
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fe ff7e 	bl	80063fc <ld_word>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d001      	beq.n	800750a <cmp_lfn+0x1e>
 8007506:	2300      	movs	r3, #0
 8007508:	e059      	b.n	80075be <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007512:	1e5a      	subs	r2, r3, #1
 8007514:	4613      	mov	r3, r2
 8007516:	005b      	lsls	r3, r3, #1
 8007518:	4413      	add	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007520:	2301      	movs	r3, #1
 8007522:	81fb      	strh	r3, [r7, #14]
 8007524:	2300      	movs	r3, #0
 8007526:	613b      	str	r3, [r7, #16]
 8007528:	e033      	b.n	8007592 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800752a:	4a27      	ldr	r2, [pc, #156]	; (80075c8 <cmp_lfn+0xdc>)
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	4413      	add	r3, r2
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	461a      	mov	r2, r3
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	4413      	add	r3, r2
 8007538:	4618      	mov	r0, r3
 800753a:	f7fe ff5f 	bl	80063fc <ld_word>
 800753e:	4603      	mov	r3, r0
 8007540:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007542:	89fb      	ldrh	r3, [r7, #14]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d01a      	beq.n	800757e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	2bfe      	cmp	r3, #254	; 0xfe
 800754c:	d812      	bhi.n	8007574 <cmp_lfn+0x88>
 800754e:	89bb      	ldrh	r3, [r7, #12]
 8007550:	4618      	mov	r0, r3
 8007552:	f002 fd33 	bl	8009fbc <ff_wtoupper>
 8007556:	4603      	mov	r3, r0
 8007558:	461c      	mov	r4, r3
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	1c5a      	adds	r2, r3, #1
 800755e:	617a      	str	r2, [r7, #20]
 8007560:	005b      	lsls	r3, r3, #1
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	4413      	add	r3, r2
 8007566:	881b      	ldrh	r3, [r3, #0]
 8007568:	4618      	mov	r0, r3
 800756a:	f002 fd27 	bl	8009fbc <ff_wtoupper>
 800756e:	4603      	mov	r3, r0
 8007570:	429c      	cmp	r4, r3
 8007572:	d001      	beq.n	8007578 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007574:	2300      	movs	r3, #0
 8007576:	e022      	b.n	80075be <cmp_lfn+0xd2>
			}
			wc = uc;
 8007578:	89bb      	ldrh	r3, [r7, #12]
 800757a:	81fb      	strh	r3, [r7, #14]
 800757c:	e006      	b.n	800758c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800757e:	89bb      	ldrh	r3, [r7, #12]
 8007580:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007584:	4293      	cmp	r3, r2
 8007586:	d001      	beq.n	800758c <cmp_lfn+0xa0>
 8007588:	2300      	movs	r3, #0
 800758a:	e018      	b.n	80075be <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	3301      	adds	r3, #1
 8007590:	613b      	str	r3, [r7, #16]
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	2b0c      	cmp	r3, #12
 8007596:	d9c8      	bls.n	800752a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00b      	beq.n	80075bc <cmp_lfn+0xd0>
 80075a4:	89fb      	ldrh	r3, [r7, #14]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d008      	beq.n	80075bc <cmp_lfn+0xd0>
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	4413      	add	r3, r2
 80075b2:	881b      	ldrh	r3, [r3, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d001      	beq.n	80075bc <cmp_lfn+0xd0>
 80075b8:	2300      	movs	r3, #0
 80075ba:	e000      	b.n	80075be <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80075bc:	2301      	movs	r3, #1
}
 80075be:	4618      	mov	r0, r3
 80075c0:	371c      	adds	r7, #28
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd90      	pop	{r4, r7, pc}
 80075c6:	bf00      	nop
 80075c8:	0800fbb8 	.word	0x0800fbb8

080075cc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	331a      	adds	r3, #26
 80075da:	4618      	mov	r0, r3
 80075dc:	f7fe ff0e 	bl	80063fc <ld_word>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d001      	beq.n	80075ea <pick_lfn+0x1e>
 80075e6:	2300      	movs	r3, #0
 80075e8:	e04d      	b.n	8007686 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075f2:	1e5a      	subs	r2, r3, #1
 80075f4:	4613      	mov	r3, r2
 80075f6:	005b      	lsls	r3, r3, #1
 80075f8:	4413      	add	r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4413      	add	r3, r2
 80075fe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007600:	2301      	movs	r3, #1
 8007602:	81fb      	strh	r3, [r7, #14]
 8007604:	2300      	movs	r3, #0
 8007606:	613b      	str	r3, [r7, #16]
 8007608:	e028      	b.n	800765c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800760a:	4a21      	ldr	r2, [pc, #132]	; (8007690 <pick_lfn+0xc4>)
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	4413      	add	r3, r2
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	461a      	mov	r2, r3
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	4413      	add	r3, r2
 8007618:	4618      	mov	r0, r3
 800761a:	f7fe feef 	bl	80063fc <ld_word>
 800761e:	4603      	mov	r3, r0
 8007620:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007622:	89fb      	ldrh	r3, [r7, #14]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00f      	beq.n	8007648 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	2bfe      	cmp	r3, #254	; 0xfe
 800762c:	d901      	bls.n	8007632 <pick_lfn+0x66>
 800762e:	2300      	movs	r3, #0
 8007630:	e029      	b.n	8007686 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8007632:	89bb      	ldrh	r3, [r7, #12]
 8007634:	81fb      	strh	r3, [r7, #14]
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	1c5a      	adds	r2, r3, #1
 800763a:	617a      	str	r2, [r7, #20]
 800763c:	005b      	lsls	r3, r3, #1
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	4413      	add	r3, r2
 8007642:	89fa      	ldrh	r2, [r7, #14]
 8007644:	801a      	strh	r2, [r3, #0]
 8007646:	e006      	b.n	8007656 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007648:	89bb      	ldrh	r3, [r7, #12]
 800764a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800764e:	4293      	cmp	r3, r2
 8007650:	d001      	beq.n	8007656 <pick_lfn+0x8a>
 8007652:	2300      	movs	r3, #0
 8007654:	e017      	b.n	8007686 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	3301      	adds	r3, #1
 800765a:	613b      	str	r3, [r7, #16]
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	2b0c      	cmp	r3, #12
 8007660:	d9d3      	bls.n	800760a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00a      	beq.n	8007684 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	2bfe      	cmp	r3, #254	; 0xfe
 8007672:	d901      	bls.n	8007678 <pick_lfn+0xac>
 8007674:	2300      	movs	r3, #0
 8007676:	e006      	b.n	8007686 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	005b      	lsls	r3, r3, #1
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	4413      	add	r3, r2
 8007680:	2200      	movs	r2, #0
 8007682:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8007684:	2301      	movs	r3, #1
}
 8007686:	4618      	mov	r0, r3
 8007688:	3718      	adds	r7, #24
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	0800fbb8 	.word	0x0800fbb8

08007694 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b088      	sub	sp, #32
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	4611      	mov	r1, r2
 80076a0:	461a      	mov	r2, r3
 80076a2:	460b      	mov	r3, r1
 80076a4:	71fb      	strb	r3, [r7, #7]
 80076a6:	4613      	mov	r3, r2
 80076a8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	330d      	adds	r3, #13
 80076ae:	79ba      	ldrb	r2, [r7, #6]
 80076b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	330b      	adds	r3, #11
 80076b6:	220f      	movs	r2, #15
 80076b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	330c      	adds	r3, #12
 80076be:	2200      	movs	r2, #0
 80076c0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	331a      	adds	r3, #26
 80076c6:	2100      	movs	r1, #0
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7fe fed2 	bl	8006472 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80076ce:	79fb      	ldrb	r3, [r7, #7]
 80076d0:	1e5a      	subs	r2, r3, #1
 80076d2:	4613      	mov	r3, r2
 80076d4:	005b      	lsls	r3, r3, #1
 80076d6:	4413      	add	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4413      	add	r3, r2
 80076dc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80076de:	2300      	movs	r3, #0
 80076e0:	82fb      	strh	r3, [r7, #22]
 80076e2:	2300      	movs	r3, #0
 80076e4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80076e6:	8afb      	ldrh	r3, [r7, #22]
 80076e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d007      	beq.n	8007700 <put_lfn+0x6c>
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	1c5a      	adds	r2, r3, #1
 80076f4:	61fa      	str	r2, [r7, #28]
 80076f6:	005b      	lsls	r3, r3, #1
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	4413      	add	r3, r2
 80076fc:	881b      	ldrh	r3, [r3, #0]
 80076fe:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007700:	4a17      	ldr	r2, [pc, #92]	; (8007760 <put_lfn+0xcc>)
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	4413      	add	r3, r2
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	461a      	mov	r2, r3
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	4413      	add	r3, r2
 800770e:	8afa      	ldrh	r2, [r7, #22]
 8007710:	4611      	mov	r1, r2
 8007712:	4618      	mov	r0, r3
 8007714:	f7fe fead 	bl	8006472 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007718:	8afb      	ldrh	r3, [r7, #22]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d102      	bne.n	8007724 <put_lfn+0x90>
 800771e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007722:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	3301      	adds	r3, #1
 8007728:	61bb      	str	r3, [r7, #24]
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	2b0c      	cmp	r3, #12
 800772e:	d9da      	bls.n	80076e6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007730:	8afb      	ldrh	r3, [r7, #22]
 8007732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007736:	4293      	cmp	r3, r2
 8007738:	d006      	beq.n	8007748 <put_lfn+0xb4>
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	005b      	lsls	r3, r3, #1
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	4413      	add	r3, r2
 8007742:	881b      	ldrh	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d103      	bne.n	8007750 <put_lfn+0xbc>
 8007748:	79fb      	ldrb	r3, [r7, #7]
 800774a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800774e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	79fa      	ldrb	r2, [r7, #7]
 8007754:	701a      	strb	r2, [r3, #0]
}
 8007756:	bf00      	nop
 8007758:	3720      	adds	r7, #32
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	0800fbb8 	.word	0x0800fbb8

08007764 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b08c      	sub	sp, #48	; 0x30
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
 8007770:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007772:	220b      	movs	r2, #11
 8007774:	68b9      	ldr	r1, [r7, #8]
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f7fe fec2 	bl	8006500 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	2b05      	cmp	r3, #5
 8007780:	d92b      	bls.n	80077da <gen_numname+0x76>
		sr = seq;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007786:	e022      	b.n	80077ce <gen_numname+0x6a>
			wc = *lfn++;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	1c9a      	adds	r2, r3, #2
 800778c:	607a      	str	r2, [r7, #4]
 800778e:	881b      	ldrh	r3, [r3, #0]
 8007790:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8007792:	2300      	movs	r3, #0
 8007794:	62bb      	str	r3, [r7, #40]	; 0x28
 8007796:	e017      	b.n	80077c8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	005a      	lsls	r2, r3, #1
 800779c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800779e:	f003 0301 	and.w	r3, r3, #1
 80077a2:	4413      	add	r3, r2
 80077a4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80077a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80077a8:	085b      	lsrs	r3, r3, #1
 80077aa:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d005      	beq.n	80077c2 <gen_numname+0x5e>
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80077bc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80077c0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80077c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c4:	3301      	adds	r3, #1
 80077c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80077c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ca:	2b0f      	cmp	r3, #15
 80077cc:	d9e4      	bls.n	8007798 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	881b      	ldrh	r3, [r3, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1d8      	bne.n	8007788 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80077da:	2307      	movs	r3, #7
 80077dc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	f003 030f 	and.w	r3, r3, #15
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	3330      	adds	r3, #48	; 0x30
 80077ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80077ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077f2:	2b39      	cmp	r3, #57	; 0x39
 80077f4:	d904      	bls.n	8007800 <gen_numname+0x9c>
 80077f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077fa:	3307      	adds	r3, #7
 80077fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8007800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007802:	1e5a      	subs	r2, r3, #1
 8007804:	62ba      	str	r2, [r7, #40]	; 0x28
 8007806:	3330      	adds	r3, #48	; 0x30
 8007808:	443b      	add	r3, r7
 800780a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800780e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	091b      	lsrs	r3, r3, #4
 8007816:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1df      	bne.n	80077de <gen_numname+0x7a>
	ns[i] = '~';
 800781e:	f107 0214 	add.w	r2, r7, #20
 8007822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007824:	4413      	add	r3, r2
 8007826:	227e      	movs	r2, #126	; 0x7e
 8007828:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800782a:	2300      	movs	r3, #0
 800782c:	627b      	str	r3, [r7, #36]	; 0x24
 800782e:	e002      	b.n	8007836 <gen_numname+0xd2>
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	3301      	adds	r3, #1
 8007834:	627b      	str	r3, [r7, #36]	; 0x24
 8007836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783a:	429a      	cmp	r2, r3
 800783c:	d205      	bcs.n	800784a <gen_numname+0xe6>
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007842:	4413      	add	r3, r2
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	2b20      	cmp	r3, #32
 8007848:	d1f2      	bne.n	8007830 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800784a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784c:	2b07      	cmp	r3, #7
 800784e:	d807      	bhi.n	8007860 <gen_numname+0xfc>
 8007850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007852:	1c5a      	adds	r2, r3, #1
 8007854:	62ba      	str	r2, [r7, #40]	; 0x28
 8007856:	3330      	adds	r3, #48	; 0x30
 8007858:	443b      	add	r3, r7
 800785a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800785e:	e000      	b.n	8007862 <gen_numname+0xfe>
 8007860:	2120      	movs	r1, #32
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	1c5a      	adds	r2, r3, #1
 8007866:	627a      	str	r2, [r7, #36]	; 0x24
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	4413      	add	r3, r2
 800786c:	460a      	mov	r2, r1
 800786e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007872:	2b07      	cmp	r3, #7
 8007874:	d9e9      	bls.n	800784a <gen_numname+0xe6>
}
 8007876:	bf00      	nop
 8007878:	bf00      	nop
 800787a:	3730      	adds	r7, #48	; 0x30
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007888:	2300      	movs	r3, #0
 800788a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800788c:	230b      	movs	r3, #11
 800788e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007890:	7bfb      	ldrb	r3, [r7, #15]
 8007892:	b2da      	uxtb	r2, r3
 8007894:	0852      	lsrs	r2, r2, #1
 8007896:	01db      	lsls	r3, r3, #7
 8007898:	4313      	orrs	r3, r2
 800789a:	b2da      	uxtb	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	1c59      	adds	r1, r3, #1
 80078a0:	6079      	str	r1, [r7, #4]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	4413      	add	r3, r2
 80078a6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	3b01      	subs	r3, #1
 80078ac:	60bb      	str	r3, [r7, #8]
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1ed      	bne.n	8007890 <sum_sfn+0x10>
	return sum;
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3714      	adds	r7, #20
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b086      	sub	sp, #24
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
 80078ca:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80078cc:	2304      	movs	r3, #4
 80078ce:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80078d6:	23ff      	movs	r3, #255	; 0xff
 80078d8:	757b      	strb	r3, [r7, #21]
 80078da:	23ff      	movs	r3, #255	; 0xff
 80078dc:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80078de:	e081      	b.n	80079e4 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	69db      	ldr	r3, [r3, #28]
 80078e4:	4619      	mov	r1, r3
 80078e6:	6938      	ldr	r0, [r7, #16]
 80078e8:	f7ff f838 	bl	800695c <move_window>
 80078ec:	4603      	mov	r3, r0
 80078ee:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80078f0:	7dfb      	ldrb	r3, [r7, #23]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d17c      	bne.n	80079f0 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a1b      	ldr	r3, [r3, #32]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 80078fe:	7dbb      	ldrb	r3, [r7, #22]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d102      	bne.n	800790a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8007904:	2304      	movs	r3, #4
 8007906:	75fb      	strb	r3, [r7, #23]
 8007908:	e077      	b.n	80079fa <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a1b      	ldr	r3, [r3, #32]
 800790e:	330b      	adds	r3, #11
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007916:	73fb      	strb	r3, [r7, #15]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	7bfa      	ldrb	r2, [r7, #15]
 800791c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800791e:	7dbb      	ldrb	r3, [r7, #22]
 8007920:	2be5      	cmp	r3, #229	; 0xe5
 8007922:	d00e      	beq.n	8007942 <dir_read+0x80>
 8007924:	7dbb      	ldrb	r3, [r7, #22]
 8007926:	2b2e      	cmp	r3, #46	; 0x2e
 8007928:	d00b      	beq.n	8007942 <dir_read+0x80>
 800792a:	7bfb      	ldrb	r3, [r7, #15]
 800792c:	f023 0320 	bic.w	r3, r3, #32
 8007930:	2b08      	cmp	r3, #8
 8007932:	bf0c      	ite	eq
 8007934:	2301      	moveq	r3, #1
 8007936:	2300      	movne	r3, #0
 8007938:	b2db      	uxtb	r3, r3
 800793a:	461a      	mov	r2, r3
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	4293      	cmp	r3, r2
 8007940:	d002      	beq.n	8007948 <dir_read+0x86>
				ord = 0xFF;
 8007942:	23ff      	movs	r3, #255	; 0xff
 8007944:	757b      	strb	r3, [r7, #21]
 8007946:	e044      	b.n	80079d2 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8007948:	7bfb      	ldrb	r3, [r7, #15]
 800794a:	2b0f      	cmp	r3, #15
 800794c:	d12f      	bne.n	80079ae <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800794e:	7dbb      	ldrb	r3, [r7, #22]
 8007950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00d      	beq.n	8007974 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a1b      	ldr	r3, [r3, #32]
 800795c:	7b5b      	ldrb	r3, [r3, #13]
 800795e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8007960:	7dbb      	ldrb	r3, [r7, #22]
 8007962:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007966:	75bb      	strb	r3, [r7, #22]
 8007968:	7dbb      	ldrb	r3, [r7, #22]
 800796a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	695a      	ldr	r2, [r3, #20]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007974:	7dba      	ldrb	r2, [r7, #22]
 8007976:	7d7b      	ldrb	r3, [r7, #21]
 8007978:	429a      	cmp	r2, r3
 800797a:	d115      	bne.n	80079a8 <dir_read+0xe6>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a1b      	ldr	r3, [r3, #32]
 8007980:	330d      	adds	r3, #13
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	7d3a      	ldrb	r2, [r7, #20]
 8007986:	429a      	cmp	r2, r3
 8007988:	d10e      	bne.n	80079a8 <dir_read+0xe6>
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	691a      	ldr	r2, [r3, #16]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	4619      	mov	r1, r3
 8007994:	4610      	mov	r0, r2
 8007996:	f7ff fe19 	bl	80075cc <pick_lfn>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d003      	beq.n	80079a8 <dir_read+0xe6>
 80079a0:	7d7b      	ldrb	r3, [r7, #21]
 80079a2:	3b01      	subs	r3, #1
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	e000      	b.n	80079aa <dir_read+0xe8>
 80079a8:	23ff      	movs	r3, #255	; 0xff
 80079aa:	757b      	strb	r3, [r7, #21]
 80079ac:	e011      	b.n	80079d2 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80079ae:	7d7b      	ldrb	r3, [r7, #21]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d109      	bne.n	80079c8 <dir_read+0x106>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a1b      	ldr	r3, [r3, #32]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7ff ff61 	bl	8007880 <sum_sfn>
 80079be:	4603      	mov	r3, r0
 80079c0:	461a      	mov	r2, r3
 80079c2:	7d3b      	ldrb	r3, [r7, #20]
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d015      	beq.n	80079f4 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f04f 32ff 	mov.w	r2, #4294967295
 80079ce:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 80079d0:	e010      	b.n	80079f4 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80079d2:	2100      	movs	r1, #0
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7ff fc2c 	bl	8007232 <dir_next>
 80079da:	4603      	mov	r3, r0
 80079dc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80079de:	7dfb      	ldrb	r3, [r7, #23]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d109      	bne.n	80079f8 <dir_read+0x136>
	while (dp->sect) {
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	69db      	ldr	r3, [r3, #28]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f47f af79 	bne.w	80078e0 <dir_read+0x1e>
 80079ee:	e004      	b.n	80079fa <dir_read+0x138>
		if (res != FR_OK) break;
 80079f0:	bf00      	nop
 80079f2:	e002      	b.n	80079fa <dir_read+0x138>
					break;
 80079f4:	bf00      	nop
 80079f6:	e000      	b.n	80079fa <dir_read+0x138>
		if (res != FR_OK) break;
 80079f8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80079fa:	7dfb      	ldrb	r3, [r7, #23]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d002      	beq.n	8007a06 <dir_read+0x144>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	61da      	str	r2, [r3, #28]
	return res;
 8007a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3718      	adds	r7, #24
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007a1e:	2100      	movs	r1, #0
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f7ff fb7d 	bl	8007120 <dir_sdi>
 8007a26:	4603      	mov	r3, r0
 8007a28:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007a2a:	7dfb      	ldrb	r3, [r7, #23]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d001      	beq.n	8007a34 <dir_find+0x24>
 8007a30:	7dfb      	ldrb	r3, [r7, #23]
 8007a32:	e0a9      	b.n	8007b88 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007a34:	23ff      	movs	r3, #255	; 0xff
 8007a36:	753b      	strb	r3, [r7, #20]
 8007a38:	7d3b      	ldrb	r3, [r7, #20]
 8007a3a:	757b      	strb	r3, [r7, #21]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a42:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	69db      	ldr	r3, [r3, #28]
 8007a48:	4619      	mov	r1, r3
 8007a4a:	6938      	ldr	r0, [r7, #16]
 8007a4c:	f7fe ff86 	bl	800695c <move_window>
 8007a50:	4603      	mov	r3, r0
 8007a52:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007a54:	7dfb      	ldrb	r3, [r7, #23]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f040 8090 	bne.w	8007b7c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a1b      	ldr	r3, [r3, #32]
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007a64:	7dbb      	ldrb	r3, [r7, #22]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d102      	bne.n	8007a70 <dir_find+0x60>
 8007a6a:	2304      	movs	r3, #4
 8007a6c:	75fb      	strb	r3, [r7, #23]
 8007a6e:	e08a      	b.n	8007b86 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	330b      	adds	r3, #11
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a7c:	73fb      	strb	r3, [r7, #15]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	7bfa      	ldrb	r2, [r7, #15]
 8007a82:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007a84:	7dbb      	ldrb	r3, [r7, #22]
 8007a86:	2be5      	cmp	r3, #229	; 0xe5
 8007a88:	d007      	beq.n	8007a9a <dir_find+0x8a>
 8007a8a:	7bfb      	ldrb	r3, [r7, #15]
 8007a8c:	f003 0308 	and.w	r3, r3, #8
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d009      	beq.n	8007aa8 <dir_find+0x98>
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
 8007a96:	2b0f      	cmp	r3, #15
 8007a98:	d006      	beq.n	8007aa8 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007a9a:	23ff      	movs	r3, #255	; 0xff
 8007a9c:	757b      	strb	r3, [r7, #21]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8007aa4:	631a      	str	r2, [r3, #48]	; 0x30
 8007aa6:	e05e      	b.n	8007b66 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007aa8:	7bfb      	ldrb	r3, [r7, #15]
 8007aaa:	2b0f      	cmp	r3, #15
 8007aac:	d136      	bne.n	8007b1c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d154      	bne.n	8007b66 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007abc:	7dbb      	ldrb	r3, [r7, #22]
 8007abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00d      	beq.n	8007ae2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a1b      	ldr	r3, [r3, #32]
 8007aca:	7b5b      	ldrb	r3, [r3, #13]
 8007acc:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007ace:	7dbb      	ldrb	r3, [r7, #22]
 8007ad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ad4:	75bb      	strb	r3, [r7, #22]
 8007ad6:	7dbb      	ldrb	r3, [r7, #22]
 8007ad8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	695a      	ldr	r2, [r3, #20]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007ae2:	7dba      	ldrb	r2, [r7, #22]
 8007ae4:	7d7b      	ldrb	r3, [r7, #21]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d115      	bne.n	8007b16 <dir_find+0x106>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	330d      	adds	r3, #13
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	7d3a      	ldrb	r2, [r7, #20]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d10e      	bne.n	8007b16 <dir_find+0x106>
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	691a      	ldr	r2, [r3, #16]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6a1b      	ldr	r3, [r3, #32]
 8007b00:	4619      	mov	r1, r3
 8007b02:	4610      	mov	r0, r2
 8007b04:	f7ff fcf2 	bl	80074ec <cmp_lfn>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d003      	beq.n	8007b16 <dir_find+0x106>
 8007b0e:	7d7b      	ldrb	r3, [r7, #21]
 8007b10:	3b01      	subs	r3, #1
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	e000      	b.n	8007b18 <dir_find+0x108>
 8007b16:	23ff      	movs	r3, #255	; 0xff
 8007b18:	757b      	strb	r3, [r7, #21]
 8007b1a:	e024      	b.n	8007b66 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007b1c:	7d7b      	ldrb	r3, [r7, #21]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d109      	bne.n	8007b36 <dir_find+0x126>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a1b      	ldr	r3, [r3, #32]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7ff feaa 	bl	8007880 <sum_sfn>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	461a      	mov	r2, r3
 8007b30:	7d3b      	ldrb	r3, [r7, #20]
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d024      	beq.n	8007b80 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10a      	bne.n	8007b5a <dir_find+0x14a>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a18      	ldr	r0, [r3, #32]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	3324      	adds	r3, #36	; 0x24
 8007b4c:	220b      	movs	r2, #11
 8007b4e:	4619      	mov	r1, r3
 8007b50:	f7fe fd12 	bl	8006578 <mem_cmp>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d014      	beq.n	8007b84 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007b5a:	23ff      	movs	r3, #255	; 0xff
 8007b5c:	757b      	strb	r3, [r7, #21]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f04f 32ff 	mov.w	r2, #4294967295
 8007b64:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007b66:	2100      	movs	r1, #0
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f7ff fb62 	bl	8007232 <dir_next>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007b72:	7dfb      	ldrb	r3, [r7, #23]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f43f af65 	beq.w	8007a44 <dir_find+0x34>
 8007b7a:	e004      	b.n	8007b86 <dir_find+0x176>
		if (res != FR_OK) break;
 8007b7c:	bf00      	nop
 8007b7e:	e002      	b.n	8007b86 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007b80:	bf00      	nop
 8007b82:	e000      	b.n	8007b86 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007b84:	bf00      	nop

	return res;
 8007b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3718      	adds	r7, #24
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b08c      	sub	sp, #48	; 0x30
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007ba4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d001      	beq.n	8007bb0 <dir_register+0x20>
 8007bac:	2306      	movs	r3, #6
 8007bae:	e0e0      	b.n	8007d72 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8007bb4:	e002      	b.n	8007bbc <dir_register+0x2c>
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb8:	3301      	adds	r3, #1
 8007bba:	627b      	str	r3, [r7, #36]	; 0x24
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	691a      	ldr	r2, [r3, #16]
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc2:	005b      	lsls	r3, r3, #1
 8007bc4:	4413      	add	r3, r2
 8007bc6:	881b      	ldrh	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1f4      	bne.n	8007bb6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8007bd2:	f107 030c 	add.w	r3, r7, #12
 8007bd6:	220c      	movs	r2, #12
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7fe fc91 	bl	8006500 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007bde:	7dfb      	ldrb	r3, [r7, #23]
 8007be0:	f003 0301 	and.w	r3, r3, #1
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d032      	beq.n	8007c4e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2240      	movs	r2, #64	; 0x40
 8007bec:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bf4:	e016      	b.n	8007c24 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	691a      	ldr	r2, [r3, #16]
 8007c00:	f107 010c 	add.w	r1, r7, #12
 8007c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c06:	f7ff fdad 	bl	8007764 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f7ff ff00 	bl	8007a10 <dir_find>
 8007c10:	4603      	mov	r3, r0
 8007c12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8007c16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d106      	bne.n	8007c2c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c20:	3301      	adds	r3, #1
 8007c22:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c26:	2b63      	cmp	r3, #99	; 0x63
 8007c28:	d9e5      	bls.n	8007bf6 <dir_register+0x66>
 8007c2a:	e000      	b.n	8007c2e <dir_register+0x9e>
			if (res != FR_OK) break;
 8007c2c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c30:	2b64      	cmp	r3, #100	; 0x64
 8007c32:	d101      	bne.n	8007c38 <dir_register+0xa8>
 8007c34:	2307      	movs	r3, #7
 8007c36:	e09c      	b.n	8007d72 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007c38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c3c:	2b04      	cmp	r3, #4
 8007c3e:	d002      	beq.n	8007c46 <dir_register+0xb6>
 8007c40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c44:	e095      	b.n	8007d72 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007c46:	7dfa      	ldrb	r2, [r7, #23]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007c4e:	7dfb      	ldrb	r3, [r7, #23]
 8007c50:	f003 0302 	and.w	r3, r3, #2
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d007      	beq.n	8007c68 <dir_register+0xd8>
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5a:	330c      	adds	r3, #12
 8007c5c:	4a47      	ldr	r2, [pc, #284]	; (8007d7c <dir_register+0x1ec>)
 8007c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c62:	089b      	lsrs	r3, r3, #2
 8007c64:	3301      	adds	r3, #1
 8007c66:	e000      	b.n	8007c6a <dir_register+0xda>
 8007c68:	2301      	movs	r3, #1
 8007c6a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007c6c:	6a39      	ldr	r1, [r7, #32]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f7ff fbb5 	bl	80073de <dir_alloc>
 8007c74:	4603      	mov	r3, r0
 8007c76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007c7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d148      	bne.n	8007d14 <dir_register+0x184>
 8007c82:	6a3b      	ldr	r3, [r7, #32]
 8007c84:	3b01      	subs	r3, #1
 8007c86:	623b      	str	r3, [r7, #32]
 8007c88:	6a3b      	ldr	r3, [r7, #32]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d042      	beq.n	8007d14 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	695a      	ldr	r2, [r3, #20]
 8007c92:	6a3b      	ldr	r3, [r7, #32]
 8007c94:	015b      	lsls	r3, r3, #5
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	4619      	mov	r1, r3
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7ff fa40 	bl	8007120 <dir_sdi>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007ca6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d132      	bne.n	8007d14 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	3324      	adds	r3, #36	; 0x24
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7ff fde4 	bl	8007880 <sum_sfn>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	69db      	ldr	r3, [r3, #28]
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	69f8      	ldr	r0, [r7, #28]
 8007cc4:	f7fe fe4a 	bl	800695c <move_window>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8007cce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d11d      	bne.n	8007d12 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	6918      	ldr	r0, [r3, #16]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a19      	ldr	r1, [r3, #32]
 8007cde:	6a3b      	ldr	r3, [r7, #32]
 8007ce0:	b2da      	uxtb	r2, r3
 8007ce2:	7efb      	ldrb	r3, [r7, #27]
 8007ce4:	f7ff fcd6 	bl	8007694 <put_lfn>
				fs->wflag = 1;
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	2201      	movs	r2, #1
 8007cec:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007cee:	2100      	movs	r1, #0
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f7ff fa9e 	bl	8007232 <dir_next>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007cfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d107      	bne.n	8007d14 <dir_register+0x184>
 8007d04:	6a3b      	ldr	r3, [r7, #32]
 8007d06:	3b01      	subs	r3, #1
 8007d08:	623b      	str	r3, [r7, #32]
 8007d0a:	6a3b      	ldr	r3, [r7, #32]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1d5      	bne.n	8007cbc <dir_register+0x12c>
 8007d10:	e000      	b.n	8007d14 <dir_register+0x184>
				if (res != FR_OK) break;
 8007d12:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007d14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d128      	bne.n	8007d6e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	69db      	ldr	r3, [r3, #28]
 8007d20:	4619      	mov	r1, r3
 8007d22:	69f8      	ldr	r0, [r7, #28]
 8007d24:	f7fe fe1a 	bl	800695c <move_window>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007d2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d11b      	bne.n	8007d6e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a1b      	ldr	r3, [r3, #32]
 8007d3a:	2220      	movs	r2, #32
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7fe fbff 	bl	8006542 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6a18      	ldr	r0, [r3, #32]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	3324      	adds	r3, #36	; 0x24
 8007d4c:	220b      	movs	r2, #11
 8007d4e:	4619      	mov	r1, r3
 8007d50:	f7fe fbd6 	bl	8006500 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	330c      	adds	r3, #12
 8007d60:	f002 0218 	and.w	r2, r2, #24
 8007d64:	b2d2      	uxtb	r2, r2
 8007d66:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007d6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3730      	adds	r7, #48	; 0x30
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	4ec4ec4f 	.word	0x4ec4ec4f

08007d80 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d9c:	d007      	beq.n	8007dae <dir_remove+0x2e>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da2:	4619      	mov	r1, r3
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f7ff f9bb 	bl	8007120 <dir_sdi>
 8007daa:	4603      	mov	r3, r0
 8007dac:	e000      	b.n	8007db0 <dir_remove+0x30>
 8007dae:	2300      	movs	r3, #0
 8007db0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007db2:	7dfb      	ldrb	r3, [r7, #23]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d128      	bne.n	8007e0a <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	69db      	ldr	r3, [r3, #28]
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	6938      	ldr	r0, [r7, #16]
 8007dc0:	f7fe fdcc 	bl	800695c <move_window>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007dc8:	7dfb      	ldrb	r3, [r7, #23]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d115      	bne.n	8007dfa <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	22e5      	movs	r2, #229	; 0xe5
 8007dd4:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	695b      	ldr	r3, [r3, #20]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d90b      	bls.n	8007dfe <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 8007de6:	2100      	movs	r1, #0
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7ff fa22 	bl	8007232 <dir_next>
 8007dee:	4603      	mov	r3, r0
 8007df0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8007df2:	7dfb      	ldrb	r3, [r7, #23]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d0df      	beq.n	8007db8 <dir_remove+0x38>
 8007df8:	e002      	b.n	8007e00 <dir_remove+0x80>
			if (res != FR_OK) break;
 8007dfa:	bf00      	nop
 8007dfc:	e000      	b.n	8007e00 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8007dfe:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8007e00:	7dfb      	ldrb	r3, [r7, #23]
 8007e02:	2b04      	cmp	r3, #4
 8007e04:	d101      	bne.n	8007e0a <dir_remove+0x8a>
 8007e06:	2302      	movs	r3, #2
 8007e08:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8007e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3718      	adds	r7, #24
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b088      	sub	sp, #32
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	2200      	movs	r2, #0
 8007e28:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	69db      	ldr	r3, [r3, #28]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f000 80c9 	beq.w	8007fc6 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e3c:	d032      	beq.n	8007ea4 <get_fileinfo+0x90>
			i = j = 0;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	61bb      	str	r3, [r7, #24]
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8007e46:	e01b      	b.n	8007e80 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8007e48:	89fb      	ldrh	r3, [r7, #14]
 8007e4a:	2100      	movs	r1, #0
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f002 f879 	bl	8009f44 <ff_convert>
 8007e52:	4603      	mov	r3, r0
 8007e54:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8007e56:	89fb      	ldrh	r3, [r7, #14]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d102      	bne.n	8007e62 <get_fileinfo+0x4e>
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	61fb      	str	r3, [r7, #28]
 8007e60:	e01a      	b.n	8007e98 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	2bfe      	cmp	r3, #254	; 0xfe
 8007e66:	d902      	bls.n	8007e6e <get_fileinfo+0x5a>
 8007e68:	2300      	movs	r3, #0
 8007e6a:	61fb      	str	r3, [r7, #28]
 8007e6c:	e014      	b.n	8007e98 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	1c5a      	adds	r2, r3, #1
 8007e72:	61fa      	str	r2, [r7, #28]
 8007e74:	89fa      	ldrh	r2, [r7, #14]
 8007e76:	b2d1      	uxtb	r1, r2
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	460a      	mov	r2, r1
 8007e7e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	691a      	ldr	r2, [r3, #16]
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	1c59      	adds	r1, r3, #1
 8007e88:	61b9      	str	r1, [r7, #24]
 8007e8a:	005b      	lsls	r3, r3, #1
 8007e8c:	4413      	add	r3, r2
 8007e8e:	881b      	ldrh	r3, [r3, #0]
 8007e90:	81fb      	strh	r3, [r7, #14]
 8007e92:	89fb      	ldrh	r3, [r7, #14]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1d7      	bne.n	8007e48 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8007e98:	683a      	ldr	r2, [r7, #0]
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	3316      	adds	r3, #22
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	61bb      	str	r3, [r7, #24]
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8007eac:	683a      	ldr	r2, [r7, #0]
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	3316      	adds	r3, #22
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8007eb8:	e04c      	b.n	8007f54 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a1a      	ldr	r2, [r3, #32]
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	1c59      	adds	r1, r3, #1
 8007ec2:	61f9      	str	r1, [r7, #28]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8007eca:	7dfb      	ldrb	r3, [r7, #23]
 8007ecc:	2b20      	cmp	r3, #32
 8007ece:	d100      	bne.n	8007ed2 <get_fileinfo+0xbe>
 8007ed0:	e040      	b.n	8007f54 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007ed2:	7dfb      	ldrb	r3, [r7, #23]
 8007ed4:	2b05      	cmp	r3, #5
 8007ed6:	d101      	bne.n	8007edc <get_fileinfo+0xc8>
 8007ed8:	23e5      	movs	r3, #229	; 0xe5
 8007eda:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	2b09      	cmp	r3, #9
 8007ee0:	d10f      	bne.n	8007f02 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8007ee2:	89bb      	ldrh	r3, [r7, #12]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d105      	bne.n	8007ef4 <get_fileinfo+0xe0>
 8007ee8:	683a      	ldr	r2, [r7, #0]
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	4413      	add	r3, r2
 8007eee:	3316      	adds	r3, #22
 8007ef0:	222e      	movs	r2, #46	; 0x2e
 8007ef2:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	1c5a      	adds	r2, r3, #1
 8007ef8:	61ba      	str	r2, [r7, #24]
 8007efa:	683a      	ldr	r2, [r7, #0]
 8007efc:	4413      	add	r3, r2
 8007efe:	222e      	movs	r2, #46	; 0x2e
 8007f00:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	4413      	add	r3, r2
 8007f08:	3309      	adds	r3, #9
 8007f0a:	7dfa      	ldrb	r2, [r7, #23]
 8007f0c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8007f0e:	89bb      	ldrh	r3, [r7, #12]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d11c      	bne.n	8007f4e <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8007f14:	7dfb      	ldrb	r3, [r7, #23]
 8007f16:	2b40      	cmp	r3, #64	; 0x40
 8007f18:	d913      	bls.n	8007f42 <get_fileinfo+0x12e>
 8007f1a:	7dfb      	ldrb	r3, [r7, #23]
 8007f1c:	2b5a      	cmp	r3, #90	; 0x5a
 8007f1e:	d810      	bhi.n	8007f42 <get_fileinfo+0x12e>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a1b      	ldr	r3, [r3, #32]
 8007f24:	330c      	adds	r3, #12
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	2b08      	cmp	r3, #8
 8007f2e:	d901      	bls.n	8007f34 <get_fileinfo+0x120>
 8007f30:	2310      	movs	r3, #16
 8007f32:	e000      	b.n	8007f36 <get_fileinfo+0x122>
 8007f34:	2308      	movs	r3, #8
 8007f36:	4013      	ands	r3, r2
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d002      	beq.n	8007f42 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8007f3c:	7dfb      	ldrb	r3, [r7, #23]
 8007f3e:	3320      	adds	r3, #32
 8007f40:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8007f42:	683a      	ldr	r2, [r7, #0]
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	4413      	add	r3, r2
 8007f48:	3316      	adds	r3, #22
 8007f4a:	7dfa      	ldrb	r2, [r7, #23]
 8007f4c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	3301      	adds	r3, #1
 8007f52:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	2b0a      	cmp	r3, #10
 8007f58:	d9af      	bls.n	8007eba <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8007f5a:	89bb      	ldrh	r3, [r7, #12]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10d      	bne.n	8007f7c <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8007f60:	683a      	ldr	r2, [r7, #0]
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	4413      	add	r3, r2
 8007f66:	3316      	adds	r3, #22
 8007f68:	2200      	movs	r2, #0
 8007f6a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a1b      	ldr	r3, [r3, #32]
 8007f70:	330c      	adds	r3, #12
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d101      	bne.n	8007f7c <get_fileinfo+0x168>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8007f7c:	683a      	ldr	r2, [r7, #0]
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	4413      	add	r3, r2
 8007f82:	3309      	adds	r3, #9
 8007f84:	2200      	movs	r2, #0
 8007f86:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6a1b      	ldr	r3, [r3, #32]
 8007f8c:	7ada      	ldrb	r2, [r3, #11]
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	331c      	adds	r3, #28
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7fe fa47 	bl	800642c <ld_dword>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6a1b      	ldr	r3, [r3, #32]
 8007fa8:	3316      	adds	r3, #22
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7fe fa3e 	bl	800642c <ld_dword>
 8007fb0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	80da      	strh	r2, [r3, #6]
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	0c1b      	lsrs	r3, r3, #16
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	809a      	strh	r2, [r3, #4]
 8007fc4:	e000      	b.n	8007fc8 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007fc6:	bf00      	nop
}
 8007fc8:	3720      	adds	r7, #32
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
	...

08007fd0 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	1c59      	adds	r1, r3, #1
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	6011      	str	r1, [r2, #0]
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8007fe6:	89fb      	ldrh	r3, [r7, #14]
 8007fe8:	2b60      	cmp	r3, #96	; 0x60
 8007fea:	d905      	bls.n	8007ff8 <get_achar+0x28>
 8007fec:	89fb      	ldrh	r3, [r7, #14]
 8007fee:	2b7a      	cmp	r3, #122	; 0x7a
 8007ff0:	d802      	bhi.n	8007ff8 <get_achar+0x28>
 8007ff2:	89fb      	ldrh	r3, [r7, #14]
 8007ff4:	3b20      	subs	r3, #32
 8007ff6:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8007ff8:	89fb      	ldrh	r3, [r7, #14]
 8007ffa:	2b7f      	cmp	r3, #127	; 0x7f
 8007ffc:	d904      	bls.n	8008008 <get_achar+0x38>
 8007ffe:	89fb      	ldrh	r3, [r7, #14]
 8008000:	3b80      	subs	r3, #128	; 0x80
 8008002:	4a05      	ldr	r2, [pc, #20]	; (8008018 <get_achar+0x48>)
 8008004:	5cd3      	ldrb	r3, [r2, r3]
 8008006:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 8008008:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800800a:	4618      	mov	r0, r3
 800800c:	3714      	adds	r7, #20
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	0800fb38 	.word	0x0800fb38

0800801c <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b08a      	sub	sp, #40	; 0x28
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
 8008028:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800802a:	e009      	b.n	8008040 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800802c:	f107 0308 	add.w	r3, r7, #8
 8008030:	4618      	mov	r0, r3
 8008032:	f7ff ffcd 	bl	8007fd0 <get_achar>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d101      	bne.n	8008040 <pattern_matching+0x24>
 800803c:	2300      	movs	r3, #0
 800803e:	e064      	b.n	800810a <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	1e5a      	subs	r2, r3, #1
 8008044:	607a      	str	r2, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1f0      	bne.n	800802c <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d104      	bne.n	800805c <pattern_matching+0x40>
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d001      	beq.n	800805c <pattern_matching+0x40>
 8008058:	2301      	movs	r3, #1
 800805a:	e056      	b.n	800810a <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	617b      	str	r3, [r7, #20]
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	2b3f      	cmp	r3, #63	; 0x3f
 800806a:	d003      	beq.n	8008074 <pattern_matching+0x58>
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	2b2a      	cmp	r3, #42	; 0x2a
 8008072:	d126      	bne.n	80080c2 <pattern_matching+0xa6>
				nm = nx = 0;
 8008074:	2300      	movs	r3, #0
 8008076:	61fb      	str	r3, [r7, #28]
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	1c5a      	adds	r2, r3, #1
 8008080:	617a      	str	r2, [r7, #20]
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	2b3f      	cmp	r3, #63	; 0x3f
 8008086:	d103      	bne.n	8008090 <pattern_matching+0x74>
 8008088:	6a3b      	ldr	r3, [r7, #32]
 800808a:	3301      	adds	r3, #1
 800808c:	623b      	str	r3, [r7, #32]
 800808e:	e001      	b.n	8008094 <pattern_matching+0x78>
 8008090:	2301      	movs	r3, #1
 8008092:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	2b3f      	cmp	r3, #63	; 0x3f
 800809a:	d0ef      	beq.n	800807c <pattern_matching+0x60>
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	2b2a      	cmp	r3, #42	; 0x2a
 80080a2:	d0eb      	beq.n	800807c <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 80080a4:	6978      	ldr	r0, [r7, #20]
 80080a6:	6939      	ldr	r1, [r7, #16]
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	6a3a      	ldr	r2, [r7, #32]
 80080ac:	f7ff ffb6 	bl	800801c <pattern_matching>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <pattern_matching+0x9e>
 80080b6:	2301      	movs	r3, #1
 80080b8:	e027      	b.n	800810a <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	84fb      	strh	r3, [r7, #38]	; 0x26
 80080c0:	e017      	b.n	80080f2 <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 80080c2:	f107 0314 	add.w	r3, r7, #20
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7ff ff82 	bl	8007fd0 <get_achar>
 80080cc:	4603      	mov	r3, r0
 80080ce:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 80080d0:	f107 0310 	add.w	r3, r7, #16
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7ff ff7b 	bl	8007fd0 <get_achar>
 80080da:	4603      	mov	r3, r0
 80080dc:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 80080de:	8b7a      	ldrh	r2, [r7, #26]
 80080e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d104      	bne.n	80080f0 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 80080e6:	8b7b      	ldrh	r3, [r7, #26]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d1bb      	bne.n	8008064 <pattern_matching+0x48>
 80080ec:	2301      	movs	r3, #1
 80080ee:	e00c      	b.n	800810a <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 80080f0:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 80080f2:	f107 0308 	add.w	r3, r7, #8
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7ff ff6a 	bl	8007fd0 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d002      	beq.n	8008108 <pattern_matching+0xec>
 8008102:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1a9      	bne.n	800805c <pattern_matching+0x40>

	return 0;
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3728      	adds	r7, #40	; 0x28
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
	...

08008114 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b08a      	sub	sp, #40	; 0x28
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	613b      	str	r3, [r7, #16]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	60fb      	str	r3, [r7, #12]
 800812c:	2300      	movs	r3, #0
 800812e:	617b      	str	r3, [r7, #20]
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	1c5a      	adds	r2, r3, #1
 8008138:	61ba      	str	r2, [r7, #24]
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	4413      	add	r3, r2
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008142:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008144:	2b1f      	cmp	r3, #31
 8008146:	d940      	bls.n	80081ca <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008148:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800814a:	2b2f      	cmp	r3, #47	; 0x2f
 800814c:	d006      	beq.n	800815c <create_name+0x48>
 800814e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008150:	2b5c      	cmp	r3, #92	; 0x5c
 8008152:	d110      	bne.n	8008176 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008154:	e002      	b.n	800815c <create_name+0x48>
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	3301      	adds	r3, #1
 800815a:	61bb      	str	r3, [r7, #24]
 800815c:	693a      	ldr	r2, [r7, #16]
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	4413      	add	r3, r2
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	2b2f      	cmp	r3, #47	; 0x2f
 8008166:	d0f6      	beq.n	8008156 <create_name+0x42>
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	4413      	add	r3, r2
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	2b5c      	cmp	r3, #92	; 0x5c
 8008172:	d0f0      	beq.n	8008156 <create_name+0x42>
			break;
 8008174:	e02a      	b.n	80081cc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	2bfe      	cmp	r3, #254	; 0xfe
 800817a:	d901      	bls.n	8008180 <create_name+0x6c>
 800817c:	2306      	movs	r3, #6
 800817e:	e17d      	b.n	800847c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008180:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008182:	b2db      	uxtb	r3, r3
 8008184:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008186:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008188:	2101      	movs	r1, #1
 800818a:	4618      	mov	r0, r3
 800818c:	f001 feda 	bl	8009f44 <ff_convert>
 8008190:	4603      	mov	r3, r0
 8008192:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008194:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008196:	2b00      	cmp	r3, #0
 8008198:	d101      	bne.n	800819e <create_name+0x8a>
 800819a:	2306      	movs	r3, #6
 800819c:	e16e      	b.n	800847c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800819e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081a0:	2b7f      	cmp	r3, #127	; 0x7f
 80081a2:	d809      	bhi.n	80081b8 <create_name+0xa4>
 80081a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081a6:	4619      	mov	r1, r3
 80081a8:	488d      	ldr	r0, [pc, #564]	; (80083e0 <create_name+0x2cc>)
 80081aa:	f7fe fa0c 	bl	80065c6 <chk_chr>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d001      	beq.n	80081b8 <create_name+0xa4>
 80081b4:	2306      	movs	r3, #6
 80081b6:	e161      	b.n	800847c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	1c5a      	adds	r2, r3, #1
 80081bc:	617a      	str	r2, [r7, #20]
 80081be:	005b      	lsls	r3, r3, #1
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	4413      	add	r3, r2
 80081c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80081c6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80081c8:	e7b4      	b.n	8008134 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80081ca:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	441a      	add	r2, r3
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80081d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081d8:	2b1f      	cmp	r3, #31
 80081da:	d801      	bhi.n	80081e0 <create_name+0xcc>
 80081dc:	2304      	movs	r3, #4
 80081de:	e000      	b.n	80081e2 <create_name+0xce>
 80081e0:	2300      	movs	r3, #0
 80081e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80081e6:	e011      	b.n	800820c <create_name+0xf8>
		w = lfn[di - 1];
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80081ee:	3b01      	subs	r3, #1
 80081f0:	005b      	lsls	r3, r3, #1
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	4413      	add	r3, r2
 80081f6:	881b      	ldrh	r3, [r3, #0]
 80081f8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80081fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081fc:	2b20      	cmp	r3, #32
 80081fe:	d002      	beq.n	8008206 <create_name+0xf2>
 8008200:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008202:	2b2e      	cmp	r3, #46	; 0x2e
 8008204:	d106      	bne.n	8008214 <create_name+0x100>
		di--;
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	3b01      	subs	r3, #1
 800820a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1ea      	bne.n	80081e8 <create_name+0xd4>
 8008212:	e000      	b.n	8008216 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008214:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	005b      	lsls	r3, r3, #1
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	4413      	add	r3, r2
 800821e:	2200      	movs	r2, #0
 8008220:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d101      	bne.n	800822c <create_name+0x118>
 8008228:	2306      	movs	r3, #6
 800822a:	e127      	b.n	800847c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	3324      	adds	r3, #36	; 0x24
 8008230:	220b      	movs	r2, #11
 8008232:	2120      	movs	r1, #32
 8008234:	4618      	mov	r0, r3
 8008236:	f7fe f984 	bl	8006542 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800823a:	2300      	movs	r3, #0
 800823c:	61bb      	str	r3, [r7, #24]
 800823e:	e002      	b.n	8008246 <create_name+0x132>
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	3301      	adds	r3, #1
 8008244:	61bb      	str	r3, [r7, #24]
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	005b      	lsls	r3, r3, #1
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	4413      	add	r3, r2
 800824e:	881b      	ldrh	r3, [r3, #0]
 8008250:	2b20      	cmp	r3, #32
 8008252:	d0f5      	beq.n	8008240 <create_name+0x12c>
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	005b      	lsls	r3, r3, #1
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	4413      	add	r3, r2
 800825c:	881b      	ldrh	r3, [r3, #0]
 800825e:	2b2e      	cmp	r3, #46	; 0x2e
 8008260:	d0ee      	beq.n	8008240 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d009      	beq.n	800827c <create_name+0x168>
 8008268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800826c:	f043 0303 	orr.w	r3, r3, #3
 8008270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008274:	e002      	b.n	800827c <create_name+0x168>
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	3b01      	subs	r3, #1
 800827a:	617b      	str	r3, [r7, #20]
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d009      	beq.n	8008296 <create_name+0x182>
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008288:	3b01      	subs	r3, #1
 800828a:	005b      	lsls	r3, r3, #1
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	4413      	add	r3, r2
 8008290:	881b      	ldrh	r3, [r3, #0]
 8008292:	2b2e      	cmp	r3, #46	; 0x2e
 8008294:	d1ef      	bne.n	8008276 <create_name+0x162>

	i = b = 0; ni = 8;
 8008296:	2300      	movs	r3, #0
 8008298:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800829c:	2300      	movs	r3, #0
 800829e:	623b      	str	r3, [r7, #32]
 80082a0:	2308      	movs	r3, #8
 80082a2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	1c5a      	adds	r2, r3, #1
 80082a8:	61ba      	str	r2, [r7, #24]
 80082aa:	005b      	lsls	r3, r3, #1
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	4413      	add	r3, r2
 80082b0:	881b      	ldrh	r3, [r3, #0]
 80082b2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80082b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f000 8090 	beq.w	80083dc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80082bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80082be:	2b20      	cmp	r3, #32
 80082c0:	d006      	beq.n	80082d0 <create_name+0x1bc>
 80082c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80082c4:	2b2e      	cmp	r3, #46	; 0x2e
 80082c6:	d10a      	bne.n	80082de <create_name+0x1ca>
 80082c8:	69ba      	ldr	r2, [r7, #24]
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d006      	beq.n	80082de <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80082d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082d4:	f043 0303 	orr.w	r3, r3, #3
 80082d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80082dc:	e07d      	b.n	80083da <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80082de:	6a3a      	ldr	r2, [r7, #32]
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d203      	bcs.n	80082ee <create_name+0x1da>
 80082e6:	69ba      	ldr	r2, [r7, #24]
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d123      	bne.n	8008336 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	2b0b      	cmp	r3, #11
 80082f2:	d106      	bne.n	8008302 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80082f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082f8:	f043 0303 	orr.w	r3, r3, #3
 80082fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008300:	e075      	b.n	80083ee <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008302:	69ba      	ldr	r2, [r7, #24]
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	429a      	cmp	r2, r3
 8008308:	d005      	beq.n	8008316 <create_name+0x202>
 800830a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800830e:	f043 0303 	orr.w	r3, r3, #3
 8008312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8008316:	69ba      	ldr	r2, [r7, #24]
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	429a      	cmp	r2, r3
 800831c:	d866      	bhi.n	80083ec <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	61bb      	str	r3, [r7, #24]
 8008322:	2308      	movs	r3, #8
 8008324:	623b      	str	r3, [r7, #32]
 8008326:	230b      	movs	r3, #11
 8008328:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800832a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008334:	e051      	b.n	80083da <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008336:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008338:	2b7f      	cmp	r3, #127	; 0x7f
 800833a:	d914      	bls.n	8008366 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800833c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800833e:	2100      	movs	r1, #0
 8008340:	4618      	mov	r0, r3
 8008342:	f001 fdff 	bl	8009f44 <ff_convert>
 8008346:	4603      	mov	r3, r0
 8008348:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800834a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800834c:	2b00      	cmp	r3, #0
 800834e:	d004      	beq.n	800835a <create_name+0x246>
 8008350:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008352:	3b80      	subs	r3, #128	; 0x80
 8008354:	4a23      	ldr	r2, [pc, #140]	; (80083e4 <create_name+0x2d0>)
 8008356:	5cd3      	ldrb	r3, [r2, r3]
 8008358:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800835a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800835e:	f043 0302 	orr.w	r3, r3, #2
 8008362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008366:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008368:	2b00      	cmp	r3, #0
 800836a:	d007      	beq.n	800837c <create_name+0x268>
 800836c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800836e:	4619      	mov	r1, r3
 8008370:	481d      	ldr	r0, [pc, #116]	; (80083e8 <create_name+0x2d4>)
 8008372:	f7fe f928 	bl	80065c6 <chk_chr>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d008      	beq.n	800838e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800837c:	235f      	movs	r3, #95	; 0x5f
 800837e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008380:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008384:	f043 0303 	orr.w	r3, r3, #3
 8008388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800838c:	e01b      	b.n	80083c6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800838e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008390:	2b40      	cmp	r3, #64	; 0x40
 8008392:	d909      	bls.n	80083a8 <create_name+0x294>
 8008394:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008396:	2b5a      	cmp	r3, #90	; 0x5a
 8008398:	d806      	bhi.n	80083a8 <create_name+0x294>
					b |= 2;
 800839a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800839e:	f043 0302 	orr.w	r3, r3, #2
 80083a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80083a6:	e00e      	b.n	80083c6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80083a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80083aa:	2b60      	cmp	r3, #96	; 0x60
 80083ac:	d90b      	bls.n	80083c6 <create_name+0x2b2>
 80083ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80083b0:	2b7a      	cmp	r3, #122	; 0x7a
 80083b2:	d808      	bhi.n	80083c6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80083b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80083b8:	f043 0301 	orr.w	r3, r3, #1
 80083bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80083c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80083c2:	3b20      	subs	r3, #32
 80083c4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	1c5a      	adds	r2, r3, #1
 80083ca:	623a      	str	r2, [r7, #32]
 80083cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80083ce:	b2d1      	uxtb	r1, r2
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	4413      	add	r3, r2
 80083d4:	460a      	mov	r2, r1
 80083d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80083da:	e763      	b.n	80082a4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80083dc:	bf00      	nop
 80083de:	e006      	b.n	80083ee <create_name+0x2da>
 80083e0:	0800fa70 	.word	0x0800fa70
 80083e4:	0800fb38 	.word	0x0800fb38
 80083e8:	0800fa7c 	.word	0x0800fa7c
			if (si > di) break;			/* No extension */
 80083ec:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80083f4:	2be5      	cmp	r3, #229	; 0xe5
 80083f6:	d103      	bne.n	8008400 <create_name+0x2ec>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2205      	movs	r2, #5
 80083fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	2b08      	cmp	r3, #8
 8008404:	d104      	bne.n	8008410 <create_name+0x2fc>
 8008406:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008410:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008414:	f003 030c 	and.w	r3, r3, #12
 8008418:	2b0c      	cmp	r3, #12
 800841a:	d005      	beq.n	8008428 <create_name+0x314>
 800841c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008420:	f003 0303 	and.w	r3, r3, #3
 8008424:	2b03      	cmp	r3, #3
 8008426:	d105      	bne.n	8008434 <create_name+0x320>
 8008428:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800842c:	f043 0302 	orr.w	r3, r3, #2
 8008430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008434:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008438:	f003 0302 	and.w	r3, r3, #2
 800843c:	2b00      	cmp	r3, #0
 800843e:	d117      	bne.n	8008470 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008440:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008444:	f003 0303 	and.w	r3, r3, #3
 8008448:	2b01      	cmp	r3, #1
 800844a:	d105      	bne.n	8008458 <create_name+0x344>
 800844c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008450:	f043 0310 	orr.w	r3, r3, #16
 8008454:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008458:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800845c:	f003 030c 	and.w	r3, r3, #12
 8008460:	2b04      	cmp	r3, #4
 8008462:	d105      	bne.n	8008470 <create_name+0x35c>
 8008464:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008468:	f043 0308 	orr.w	r3, r3, #8
 800846c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008476:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800847a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800847c:	4618      	mov	r0, r3
 800847e:	3728      	adds	r7, #40	; 0x28
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008498:	e002      	b.n	80084a0 <follow_path+0x1c>
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	3301      	adds	r3, #1
 800849e:	603b      	str	r3, [r7, #0]
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	2b2f      	cmp	r3, #47	; 0x2f
 80084a6:	d0f8      	beq.n	800849a <follow_path+0x16>
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	2b5c      	cmp	r3, #92	; 0x5c
 80084ae:	d0f4      	beq.n	800849a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	2200      	movs	r2, #0
 80084b4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	2b1f      	cmp	r3, #31
 80084bc:	d80a      	bhi.n	80084d4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2280      	movs	r2, #128	; 0x80
 80084c2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80084c6:	2100      	movs	r1, #0
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f7fe fe29 	bl	8007120 <dir_sdi>
 80084ce:	4603      	mov	r3, r0
 80084d0:	75fb      	strb	r3, [r7, #23]
 80084d2:	e048      	b.n	8008566 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80084d4:	463b      	mov	r3, r7
 80084d6:	4619      	mov	r1, r3
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f7ff fe1b 	bl	8008114 <create_name>
 80084de:	4603      	mov	r3, r0
 80084e0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80084e2:	7dfb      	ldrb	r3, [r7, #23]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d139      	bne.n	800855c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f7ff fa91 	bl	8007a10 <dir_find>
 80084ee:	4603      	mov	r3, r0
 80084f0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80084f8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80084fa:	7dfb      	ldrb	r3, [r7, #23]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d00a      	beq.n	8008516 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008500:	7dfb      	ldrb	r3, [r7, #23]
 8008502:	2b04      	cmp	r3, #4
 8008504:	d12c      	bne.n	8008560 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008506:	7afb      	ldrb	r3, [r7, #11]
 8008508:	f003 0304 	and.w	r3, r3, #4
 800850c:	2b00      	cmp	r3, #0
 800850e:	d127      	bne.n	8008560 <follow_path+0xdc>
 8008510:	2305      	movs	r3, #5
 8008512:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008514:	e024      	b.n	8008560 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008516:	7afb      	ldrb	r3, [r7, #11]
 8008518:	f003 0304 	and.w	r3, r3, #4
 800851c:	2b00      	cmp	r3, #0
 800851e:	d121      	bne.n	8008564 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	799b      	ldrb	r3, [r3, #6]
 8008524:	f003 0310 	and.w	r3, r3, #16
 8008528:	2b00      	cmp	r3, #0
 800852a:	d102      	bne.n	8008532 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800852c:	2305      	movs	r3, #5
 800852e:	75fb      	strb	r3, [r7, #23]
 8008530:	e019      	b.n	8008566 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	695b      	ldr	r3, [r3, #20]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	8992      	ldrh	r2, [r2, #12]
 8008540:	fbb3 f0f2 	udiv	r0, r3, r2
 8008544:	fb00 f202 	mul.w	r2, r0, r2
 8008548:	1a9b      	subs	r3, r3, r2
 800854a:	440b      	add	r3, r1
 800854c:	4619      	mov	r1, r3
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f7fe ff8c 	bl	800746c <ld_clust>
 8008554:	4602      	mov	r2, r0
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800855a:	e7bb      	b.n	80084d4 <follow_path+0x50>
			if (res != FR_OK) break;
 800855c:	bf00      	nop
 800855e:	e002      	b.n	8008566 <follow_path+0xe2>
				break;
 8008560:	bf00      	nop
 8008562:	e000      	b.n	8008566 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008564:	bf00      	nop
			}
		}
	}

	return res;
 8008566:	7dfb      	ldrb	r3, [r7, #23]
}
 8008568:	4618      	mov	r0, r3
 800856a:	3718      	adds	r7, #24
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008570:	b480      	push	{r7}
 8008572:	b087      	sub	sp, #28
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008578:	f04f 33ff 	mov.w	r3, #4294967295
 800857c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d031      	beq.n	80085ea <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	617b      	str	r3, [r7, #20]
 800858c:	e002      	b.n	8008594 <get_ldnumber+0x24>
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	3301      	adds	r3, #1
 8008592:	617b      	str	r3, [r7, #20]
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	2b1f      	cmp	r3, #31
 800859a:	d903      	bls.n	80085a4 <get_ldnumber+0x34>
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	2b3a      	cmp	r3, #58	; 0x3a
 80085a2:	d1f4      	bne.n	800858e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	2b3a      	cmp	r3, #58	; 0x3a
 80085aa:	d11c      	bne.n	80085e6 <get_ldnumber+0x76>
			tp = *path;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	1c5a      	adds	r2, r3, #1
 80085b6:	60fa      	str	r2, [r7, #12]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	3b30      	subs	r3, #48	; 0x30
 80085bc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	2b09      	cmp	r3, #9
 80085c2:	d80e      	bhi.n	80085e2 <get_ldnumber+0x72>
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d10a      	bne.n	80085e2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d107      	bne.n	80085e2 <get_ldnumber+0x72>
					vol = (int)i;
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	3301      	adds	r3, #1
 80085da:	617b      	str	r3, [r7, #20]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	e002      	b.n	80085ec <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80085e6:	2300      	movs	r3, #0
 80085e8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80085ea:	693b      	ldr	r3, [r7, #16]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	371c      	adds	r7, #28
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	70da      	strb	r2, [r3, #3]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f04f 32ff 	mov.w	r2, #4294967295
 800860e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008610:	6839      	ldr	r1, [r7, #0]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f7fe f9a2 	bl	800695c <move_window>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <check_fs+0x2a>
 800861e:	2304      	movs	r3, #4
 8008620:	e038      	b.n	8008694 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	3338      	adds	r3, #56	; 0x38
 8008626:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800862a:	4618      	mov	r0, r3
 800862c:	f7fd fee6 	bl	80063fc <ld_word>
 8008630:	4603      	mov	r3, r0
 8008632:	461a      	mov	r2, r3
 8008634:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008638:	429a      	cmp	r2, r3
 800863a:	d001      	beq.n	8008640 <check_fs+0x48>
 800863c:	2303      	movs	r3, #3
 800863e:	e029      	b.n	8008694 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008646:	2be9      	cmp	r3, #233	; 0xe9
 8008648:	d009      	beq.n	800865e <check_fs+0x66>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008650:	2beb      	cmp	r3, #235	; 0xeb
 8008652:	d11e      	bne.n	8008692 <check_fs+0x9a>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800865a:	2b90      	cmp	r3, #144	; 0x90
 800865c:	d119      	bne.n	8008692 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	3338      	adds	r3, #56	; 0x38
 8008662:	3336      	adds	r3, #54	; 0x36
 8008664:	4618      	mov	r0, r3
 8008666:	f7fd fee1 	bl	800642c <ld_dword>
 800866a:	4603      	mov	r3, r0
 800866c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008670:	4a0a      	ldr	r2, [pc, #40]	; (800869c <check_fs+0xa4>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d101      	bne.n	800867a <check_fs+0x82>
 8008676:	2300      	movs	r3, #0
 8008678:	e00c      	b.n	8008694 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	3338      	adds	r3, #56	; 0x38
 800867e:	3352      	adds	r3, #82	; 0x52
 8008680:	4618      	mov	r0, r3
 8008682:	f7fd fed3 	bl	800642c <ld_dword>
 8008686:	4603      	mov	r3, r0
 8008688:	4a05      	ldr	r2, [pc, #20]	; (80086a0 <check_fs+0xa8>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d101      	bne.n	8008692 <check_fs+0x9a>
 800868e:	2300      	movs	r3, #0
 8008690:	e000      	b.n	8008694 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008692:	2302      	movs	r3, #2
}
 8008694:	4618      	mov	r0, r3
 8008696:	3708      	adds	r7, #8
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}
 800869c:	00544146 	.word	0x00544146
 80086a0:	33544146 	.word	0x33544146

080086a4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b096      	sub	sp, #88	; 0x58
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	4613      	mov	r3, r2
 80086b0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	2200      	movs	r2, #0
 80086b6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f7ff ff59 	bl	8008570 <get_ldnumber>
 80086be:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80086c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	da01      	bge.n	80086ca <find_volume+0x26>
 80086c6:	230b      	movs	r3, #11
 80086c8:	e265      	b.n	8008b96 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80086ca:	4a9f      	ldr	r2, [pc, #636]	; (8008948 <find_volume+0x2a4>)
 80086cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086d2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80086d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d101      	bne.n	80086de <find_volume+0x3a>
 80086da:	230c      	movs	r3, #12
 80086dc:	e25b      	b.n	8008b96 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086e2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80086e4:	79fb      	ldrb	r3, [r7, #7]
 80086e6:	f023 0301 	bic.w	r3, r3, #1
 80086ea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80086ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d01a      	beq.n	800872a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80086f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f6:	785b      	ldrb	r3, [r3, #1]
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7fd fde1 	bl	80062c0 <disk_status>
 80086fe:	4603      	mov	r3, r0
 8008700:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008704:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008708:	f003 0301 	and.w	r3, r3, #1
 800870c:	2b00      	cmp	r3, #0
 800870e:	d10c      	bne.n	800872a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008710:	79fb      	ldrb	r3, [r7, #7]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d007      	beq.n	8008726 <find_volume+0x82>
 8008716:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800871a:	f003 0304 	and.w	r3, r3, #4
 800871e:	2b00      	cmp	r3, #0
 8008720:	d001      	beq.n	8008726 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008722:	230a      	movs	r3, #10
 8008724:	e237      	b.n	8008b96 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8008726:	2300      	movs	r3, #0
 8008728:	e235      	b.n	8008b96 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800872a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872c:	2200      	movs	r2, #0
 800872e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008732:	b2da      	uxtb	r2, r3
 8008734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008736:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873a:	785b      	ldrb	r3, [r3, #1]
 800873c:	4618      	mov	r0, r3
 800873e:	f7fd fdd9 	bl	80062f4 <disk_initialize>
 8008742:	4603      	mov	r3, r0
 8008744:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008748:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800874c:	f003 0301 	and.w	r3, r3, #1
 8008750:	2b00      	cmp	r3, #0
 8008752:	d001      	beq.n	8008758 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008754:	2303      	movs	r3, #3
 8008756:	e21e      	b.n	8008b96 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008758:	79fb      	ldrb	r3, [r7, #7]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d007      	beq.n	800876e <find_volume+0xca>
 800875e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008762:	f003 0304 	and.w	r3, r3, #4
 8008766:	2b00      	cmp	r3, #0
 8008768:	d001      	beq.n	800876e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800876a:	230a      	movs	r3, #10
 800876c:	e213      	b.n	8008b96 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800876e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008770:	7858      	ldrb	r0, [r3, #1]
 8008772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008774:	330c      	adds	r3, #12
 8008776:	461a      	mov	r2, r3
 8008778:	2102      	movs	r1, #2
 800877a:	f7fd fe21 	bl	80063c0 <disk_ioctl>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d001      	beq.n	8008788 <find_volume+0xe4>
 8008784:	2301      	movs	r3, #1
 8008786:	e206      	b.n	8008b96 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878a:	899b      	ldrh	r3, [r3, #12]
 800878c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008790:	d80d      	bhi.n	80087ae <find_volume+0x10a>
 8008792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008794:	899b      	ldrh	r3, [r3, #12]
 8008796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800879a:	d308      	bcc.n	80087ae <find_volume+0x10a>
 800879c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879e:	899b      	ldrh	r3, [r3, #12]
 80087a0:	461a      	mov	r2, r3
 80087a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a4:	899b      	ldrh	r3, [r3, #12]
 80087a6:	3b01      	subs	r3, #1
 80087a8:	4013      	ands	r3, r2
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d001      	beq.n	80087b2 <find_volume+0x10e>
 80087ae:	2301      	movs	r3, #1
 80087b0:	e1f1      	b.n	8008b96 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80087b2:	2300      	movs	r3, #0
 80087b4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80087b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80087b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80087ba:	f7ff ff1d 	bl	80085f8 <check_fs>
 80087be:	4603      	mov	r3, r0
 80087c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80087c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d149      	bne.n	8008860 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80087cc:	2300      	movs	r3, #0
 80087ce:	643b      	str	r3, [r7, #64]	; 0x40
 80087d0:	e01e      	b.n	8008810 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80087d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80087d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087da:	011b      	lsls	r3, r3, #4
 80087dc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80087e0:	4413      	add	r3, r2
 80087e2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80087e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e6:	3304      	adds	r3, #4
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d006      	beq.n	80087fc <find_volume+0x158>
 80087ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f0:	3308      	adds	r3, #8
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7fd fe1a 	bl	800642c <ld_dword>
 80087f8:	4602      	mov	r2, r0
 80087fa:	e000      	b.n	80087fe <find_volume+0x15a>
 80087fc:	2200      	movs	r2, #0
 80087fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	3358      	adds	r3, #88	; 0x58
 8008804:	443b      	add	r3, r7
 8008806:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800880a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800880c:	3301      	adds	r3, #1
 800880e:	643b      	str	r3, [r7, #64]	; 0x40
 8008810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008812:	2b03      	cmp	r3, #3
 8008814:	d9dd      	bls.n	80087d2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008816:	2300      	movs	r3, #0
 8008818:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800881a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800881c:	2b00      	cmp	r3, #0
 800881e:	d002      	beq.n	8008826 <find_volume+0x182>
 8008820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008822:	3b01      	subs	r3, #1
 8008824:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	3358      	adds	r3, #88	; 0x58
 800882c:	443b      	add	r3, r7
 800882e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008832:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008836:	2b00      	cmp	r3, #0
 8008838:	d005      	beq.n	8008846 <find_volume+0x1a2>
 800883a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800883c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800883e:	f7ff fedb 	bl	80085f8 <check_fs>
 8008842:	4603      	mov	r3, r0
 8008844:	e000      	b.n	8008848 <find_volume+0x1a4>
 8008846:	2303      	movs	r3, #3
 8008848:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800884c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008850:	2b01      	cmp	r3, #1
 8008852:	d905      	bls.n	8008860 <find_volume+0x1bc>
 8008854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008856:	3301      	adds	r3, #1
 8008858:	643b      	str	r3, [r7, #64]	; 0x40
 800885a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800885c:	2b03      	cmp	r3, #3
 800885e:	d9e2      	bls.n	8008826 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008860:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008864:	2b04      	cmp	r3, #4
 8008866:	d101      	bne.n	800886c <find_volume+0x1c8>
 8008868:	2301      	movs	r3, #1
 800886a:	e194      	b.n	8008b96 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800886c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008870:	2b01      	cmp	r3, #1
 8008872:	d901      	bls.n	8008878 <find_volume+0x1d4>
 8008874:	230d      	movs	r3, #13
 8008876:	e18e      	b.n	8008b96 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887a:	3338      	adds	r3, #56	; 0x38
 800887c:	330b      	adds	r3, #11
 800887e:	4618      	mov	r0, r3
 8008880:	f7fd fdbc 	bl	80063fc <ld_word>
 8008884:	4603      	mov	r3, r0
 8008886:	461a      	mov	r2, r3
 8008888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888a:	899b      	ldrh	r3, [r3, #12]
 800888c:	429a      	cmp	r2, r3
 800888e:	d001      	beq.n	8008894 <find_volume+0x1f0>
 8008890:	230d      	movs	r3, #13
 8008892:	e180      	b.n	8008b96 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008896:	3338      	adds	r3, #56	; 0x38
 8008898:	3316      	adds	r3, #22
 800889a:	4618      	mov	r0, r3
 800889c:	f7fd fdae 	bl	80063fc <ld_word>
 80088a0:	4603      	mov	r3, r0
 80088a2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80088a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d106      	bne.n	80088b8 <find_volume+0x214>
 80088aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ac:	3338      	adds	r3, #56	; 0x38
 80088ae:	3324      	adds	r3, #36	; 0x24
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7fd fdbb 	bl	800642c <ld_dword>
 80088b6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80088b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088bc:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80088be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80088c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80088c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ca:	789b      	ldrb	r3, [r3, #2]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d005      	beq.n	80088dc <find_volume+0x238>
 80088d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d2:	789b      	ldrb	r3, [r3, #2]
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d001      	beq.n	80088dc <find_volume+0x238>
 80088d8:	230d      	movs	r3, #13
 80088da:	e15c      	b.n	8008b96 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80088dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088de:	789b      	ldrb	r3, [r3, #2]
 80088e0:	461a      	mov	r2, r3
 80088e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088e4:	fb02 f303 	mul.w	r3, r2, r3
 80088e8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80088ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80088f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f8:	895b      	ldrh	r3, [r3, #10]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d008      	beq.n	8008910 <find_volume+0x26c>
 80088fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008900:	895b      	ldrh	r3, [r3, #10]
 8008902:	461a      	mov	r2, r3
 8008904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008906:	895b      	ldrh	r3, [r3, #10]
 8008908:	3b01      	subs	r3, #1
 800890a:	4013      	ands	r3, r2
 800890c:	2b00      	cmp	r3, #0
 800890e:	d001      	beq.n	8008914 <find_volume+0x270>
 8008910:	230d      	movs	r3, #13
 8008912:	e140      	b.n	8008b96 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008916:	3338      	adds	r3, #56	; 0x38
 8008918:	3311      	adds	r3, #17
 800891a:	4618      	mov	r0, r3
 800891c:	f7fd fd6e 	bl	80063fc <ld_word>
 8008920:	4603      	mov	r3, r0
 8008922:	461a      	mov	r2, r3
 8008924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008926:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892a:	891b      	ldrh	r3, [r3, #8]
 800892c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800892e:	8992      	ldrh	r2, [r2, #12]
 8008930:	0952      	lsrs	r2, r2, #5
 8008932:	b292      	uxth	r2, r2
 8008934:	fbb3 f1f2 	udiv	r1, r3, r2
 8008938:	fb01 f202 	mul.w	r2, r1, r2
 800893c:	1a9b      	subs	r3, r3, r2
 800893e:	b29b      	uxth	r3, r3
 8008940:	2b00      	cmp	r3, #0
 8008942:	d003      	beq.n	800894c <find_volume+0x2a8>
 8008944:	230d      	movs	r3, #13
 8008946:	e126      	b.n	8008b96 <find_volume+0x4f2>
 8008948:	20003520 	.word	0x20003520

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800894c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894e:	3338      	adds	r3, #56	; 0x38
 8008950:	3313      	adds	r3, #19
 8008952:	4618      	mov	r0, r3
 8008954:	f7fd fd52 	bl	80063fc <ld_word>
 8008958:	4603      	mov	r3, r0
 800895a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800895c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800895e:	2b00      	cmp	r3, #0
 8008960:	d106      	bne.n	8008970 <find_volume+0x2cc>
 8008962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008964:	3338      	adds	r3, #56	; 0x38
 8008966:	3320      	adds	r3, #32
 8008968:	4618      	mov	r0, r3
 800896a:	f7fd fd5f 	bl	800642c <ld_dword>
 800896e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008972:	3338      	adds	r3, #56	; 0x38
 8008974:	330e      	adds	r3, #14
 8008976:	4618      	mov	r0, r3
 8008978:	f7fd fd40 	bl	80063fc <ld_word>
 800897c:	4603      	mov	r3, r0
 800897e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008980:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008982:	2b00      	cmp	r3, #0
 8008984:	d101      	bne.n	800898a <find_volume+0x2e6>
 8008986:	230d      	movs	r3, #13
 8008988:	e105      	b.n	8008b96 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800898a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800898c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800898e:	4413      	add	r3, r2
 8008990:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008992:	8911      	ldrh	r1, [r2, #8]
 8008994:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008996:	8992      	ldrh	r2, [r2, #12]
 8008998:	0952      	lsrs	r2, r2, #5
 800899a:	b292      	uxth	r2, r2
 800899c:	fbb1 f2f2 	udiv	r2, r1, r2
 80089a0:	b292      	uxth	r2, r2
 80089a2:	4413      	add	r3, r2
 80089a4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80089a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d201      	bcs.n	80089b2 <find_volume+0x30e>
 80089ae:	230d      	movs	r3, #13
 80089b0:	e0f1      	b.n	8008b96 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80089b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b6:	1ad3      	subs	r3, r2, r3
 80089b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089ba:	8952      	ldrh	r2, [r2, #10]
 80089bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80089c0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80089c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d101      	bne.n	80089cc <find_volume+0x328>
 80089c8:	230d      	movs	r3, #13
 80089ca:	e0e4      	b.n	8008b96 <find_volume+0x4f2>
		fmt = FS_FAT32;
 80089cc:	2303      	movs	r3, #3
 80089ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80089d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80089d8:	4293      	cmp	r3, r2
 80089da:	d802      	bhi.n	80089e2 <find_volume+0x33e>
 80089dc:	2302      	movs	r3, #2
 80089de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80089e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d802      	bhi.n	80089f2 <find_volume+0x34e>
 80089ec:	2301      	movs	r3, #1
 80089ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80089f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f4:	1c9a      	adds	r2, r3, #2
 80089f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80089fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80089fe:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008a00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a04:	441a      	add	r2, r3
 8008a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a08:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8008a0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0e:	441a      	add	r2, r3
 8008a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a12:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8008a14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a18:	2b03      	cmp	r3, #3
 8008a1a:	d11e      	bne.n	8008a5a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1e:	3338      	adds	r3, #56	; 0x38
 8008a20:	332a      	adds	r3, #42	; 0x2a
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7fd fcea 	bl	80063fc <ld_word>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d001      	beq.n	8008a32 <find_volume+0x38e>
 8008a2e:	230d      	movs	r3, #13
 8008a30:	e0b1      	b.n	8008b96 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a34:	891b      	ldrh	r3, [r3, #8]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d001      	beq.n	8008a3e <find_volume+0x39a>
 8008a3a:	230d      	movs	r3, #13
 8008a3c:	e0ab      	b.n	8008b96 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a40:	3338      	adds	r3, #56	; 0x38
 8008a42:	332c      	adds	r3, #44	; 0x2c
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7fd fcf1 	bl	800642c <ld_dword>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a4e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a52:	69db      	ldr	r3, [r3, #28]
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	647b      	str	r3, [r7, #68]	; 0x44
 8008a58:	e01f      	b.n	8008a9a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5c:	891b      	ldrh	r3, [r3, #8]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d101      	bne.n	8008a66 <find_volume+0x3c2>
 8008a62:	230d      	movs	r3, #13
 8008a64:	e097      	b.n	8008b96 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a6c:	441a      	add	r2, r3
 8008a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a70:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008a72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d103      	bne.n	8008a82 <find_volume+0x3de>
 8008a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7c:	69db      	ldr	r3, [r3, #28]
 8008a7e:	005b      	lsls	r3, r3, #1
 8008a80:	e00a      	b.n	8008a98 <find_volume+0x3f4>
 8008a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a84:	69da      	ldr	r2, [r3, #28]
 8008a86:	4613      	mov	r3, r2
 8008a88:	005b      	lsls	r3, r3, #1
 8008a8a:	4413      	add	r3, r2
 8008a8c:	085a      	lsrs	r2, r3, #1
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a90:	69db      	ldr	r3, [r3, #28]
 8008a92:	f003 0301 	and.w	r3, r3, #1
 8008a96:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008a98:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9c:	6a1a      	ldr	r2, [r3, #32]
 8008a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa0:	899b      	ldrh	r3, [r3, #12]
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aa6:	440b      	add	r3, r1
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008aac:	8989      	ldrh	r1, [r1, #12]
 8008aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d201      	bcs.n	8008aba <find_volume+0x416>
 8008ab6:	230d      	movs	r3, #13
 8008ab8:	e06d      	b.n	8008b96 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008abc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ac0:	619a      	str	r2, [r3, #24]
 8008ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac4:	699a      	ldr	r2, [r3, #24]
 8008ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8008aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008acc:	2280      	movs	r2, #128	; 0x80
 8008ace:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008ad0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ad4:	2b03      	cmp	r3, #3
 8008ad6:	d149      	bne.n	8008b6c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ada:	3338      	adds	r3, #56	; 0x38
 8008adc:	3330      	adds	r3, #48	; 0x30
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7fd fc8c 	bl	80063fc <ld_word>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d140      	bne.n	8008b6c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aec:	3301      	adds	r3, #1
 8008aee:	4619      	mov	r1, r3
 8008af0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008af2:	f7fd ff33 	bl	800695c <move_window>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d137      	bne.n	8008b6c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8008afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afe:	2200      	movs	r2, #0
 8008b00:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b04:	3338      	adds	r3, #56	; 0x38
 8008b06:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7fd fc76 	bl	80063fc <ld_word>
 8008b10:	4603      	mov	r3, r0
 8008b12:	461a      	mov	r2, r3
 8008b14:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d127      	bne.n	8008b6c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1e:	3338      	adds	r3, #56	; 0x38
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7fd fc83 	bl	800642c <ld_dword>
 8008b26:	4603      	mov	r3, r0
 8008b28:	4a1d      	ldr	r2, [pc, #116]	; (8008ba0 <find_volume+0x4fc>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d11e      	bne.n	8008b6c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b30:	3338      	adds	r3, #56	; 0x38
 8008b32:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7fd fc78 	bl	800642c <ld_dword>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	4a19      	ldr	r2, [pc, #100]	; (8008ba4 <find_volume+0x500>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d113      	bne.n	8008b6c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b46:	3338      	adds	r3, #56	; 0x38
 8008b48:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7fd fc6d 	bl	800642c <ld_dword>
 8008b52:	4602      	mov	r2, r0
 8008b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b56:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5a:	3338      	adds	r3, #56	; 0x38
 8008b5c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7fd fc63 	bl	800642c <ld_dword>
 8008b66:	4602      	mov	r2, r0
 8008b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008b72:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008b74:	4b0c      	ldr	r3, [pc, #48]	; (8008ba8 <find_volume+0x504>)
 8008b76:	881b      	ldrh	r3, [r3, #0]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	b29a      	uxth	r2, r3
 8008b7c:	4b0a      	ldr	r3, [pc, #40]	; (8008ba8 <find_volume+0x504>)
 8008b7e:	801a      	strh	r2, [r3, #0]
 8008b80:	4b09      	ldr	r3, [pc, #36]	; (8008ba8 <find_volume+0x504>)
 8008b82:	881a      	ldrh	r2, [r3, #0]
 8008b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b86:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8a:	4a08      	ldr	r2, [pc, #32]	; (8008bac <find_volume+0x508>)
 8008b8c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008b8e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b90:	f7fd fe7c 	bl	800688c <clear_lock>
#endif
	return FR_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3758      	adds	r7, #88	; 0x58
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	41615252 	.word	0x41615252
 8008ba4:	61417272 	.word	0x61417272
 8008ba8:	20003524 	.word	0x20003524
 8008bac:	20003548 	.word	0x20003548

08008bb0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008bba:	2309      	movs	r3, #9
 8008bbc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d01c      	beq.n	8008bfe <validate+0x4e>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d018      	beq.n	8008bfe <validate+0x4e>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d013      	beq.n	8008bfe <validate+0x4e>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	889a      	ldrh	r2, [r3, #4]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	88db      	ldrh	r3, [r3, #6]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d10c      	bne.n	8008bfe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	785b      	ldrb	r3, [r3, #1]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7fd fb68 	bl	80062c0 <disk_status>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	f003 0301 	and.w	r3, r3, #1
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d101      	bne.n	8008bfe <validate+0x4e>
			res = FR_OK;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008bfe:	7bfb      	ldrb	r3, [r7, #15]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d102      	bne.n	8008c0a <validate+0x5a>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	e000      	b.n	8008c0c <validate+0x5c>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	683a      	ldr	r2, [r7, #0]
 8008c0e:	6013      	str	r3, [r2, #0]
	return res;
 8008c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
	...

08008c1c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b088      	sub	sp, #32
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	4613      	mov	r3, r2
 8008c28:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008c2e:	f107 0310 	add.w	r3, r7, #16
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7ff fc9c 	bl	8008570 <get_ldnumber>
 8008c38:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	da01      	bge.n	8008c44 <f_mount+0x28>
 8008c40:	230b      	movs	r3, #11
 8008c42:	e02b      	b.n	8008c9c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008c44:	4a17      	ldr	r2, [pc, #92]	; (8008ca4 <f_mount+0x88>)
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c4c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d005      	beq.n	8008c60 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008c54:	69b8      	ldr	r0, [r7, #24]
 8008c56:	f7fd fe19 	bl	800688c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d002      	beq.n	8008c6c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	490d      	ldr	r1, [pc, #52]	; (8008ca4 <f_mount+0x88>)
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d002      	beq.n	8008c82 <f_mount+0x66>
 8008c7c:	79fb      	ldrb	r3, [r7, #7]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d001      	beq.n	8008c86 <f_mount+0x6a>
 8008c82:	2300      	movs	r3, #0
 8008c84:	e00a      	b.n	8008c9c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008c86:	f107 010c 	add.w	r1, r7, #12
 8008c8a:	f107 0308 	add.w	r3, r7, #8
 8008c8e:	2200      	movs	r2, #0
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7ff fd07 	bl	80086a4 <find_volume>
 8008c96:	4603      	mov	r3, r0
 8008c98:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3720      	adds	r7, #32
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	20003520 	.word	0x20003520

08008ca8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b09a      	sub	sp, #104	; 0x68
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d101      	bne.n	8008cc0 <f_open+0x18>
 8008cbc:	2309      	movs	r3, #9
 8008cbe:	e1bb      	b.n	8009038 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008cc0:	79fb      	ldrb	r3, [r7, #7]
 8008cc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cc6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008cc8:	79fa      	ldrb	r2, [r7, #7]
 8008cca:	f107 0110 	add.w	r1, r7, #16
 8008cce:	f107 0308 	add.w	r3, r7, #8
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7ff fce6 	bl	80086a4 <find_volume>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8008cde:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	f040 819f 	bne.w	8009026 <f_open+0x37e>
		dj.obj.fs = fs;
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008cec:	68ba      	ldr	r2, [r7, #8]
 8008cee:	f107 0314 	add.w	r3, r7, #20
 8008cf2:	4611      	mov	r1, r2
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7ff fbc5 	bl	8008484 <follow_path>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008d00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d11a      	bne.n	8008d3e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008d08:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008d0c:	b25b      	sxtb	r3, r3
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	da03      	bge.n	8008d1a <f_open+0x72>
				res = FR_INVALID_NAME;
 8008d12:	2306      	movs	r3, #6
 8008d14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008d18:	e011      	b.n	8008d3e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008d1a:	79fb      	ldrb	r3, [r7, #7]
 8008d1c:	f023 0301 	bic.w	r3, r3, #1
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	bf14      	ite	ne
 8008d24:	2301      	movne	r3, #1
 8008d26:	2300      	moveq	r3, #0
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	f107 0314 	add.w	r3, r7, #20
 8008d30:	4611      	mov	r1, r2
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7fd fc62 	bl	80065fc <chk_lock>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008d3e:	79fb      	ldrb	r3, [r7, #7]
 8008d40:	f003 031c 	and.w	r3, r3, #28
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d07f      	beq.n	8008e48 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008d48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d017      	beq.n	8008d80 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008d50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008d54:	2b04      	cmp	r3, #4
 8008d56:	d10e      	bne.n	8008d76 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008d58:	f7fd fcac 	bl	80066b4 <enq_lock>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d006      	beq.n	8008d70 <f_open+0xc8>
 8008d62:	f107 0314 	add.w	r3, r7, #20
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7fe ff12 	bl	8007b90 <dir_register>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	e000      	b.n	8008d72 <f_open+0xca>
 8008d70:	2312      	movs	r3, #18
 8008d72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008d76:	79fb      	ldrb	r3, [r7, #7]
 8008d78:	f043 0308 	orr.w	r3, r3, #8
 8008d7c:	71fb      	strb	r3, [r7, #7]
 8008d7e:	e010      	b.n	8008da2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008d80:	7ebb      	ldrb	r3, [r7, #26]
 8008d82:	f003 0311 	and.w	r3, r3, #17
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d003      	beq.n	8008d92 <f_open+0xea>
					res = FR_DENIED;
 8008d8a:	2307      	movs	r3, #7
 8008d8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008d90:	e007      	b.n	8008da2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008d92:	79fb      	ldrb	r3, [r7, #7]
 8008d94:	f003 0304 	and.w	r3, r3, #4
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d002      	beq.n	8008da2 <f_open+0xfa>
 8008d9c:	2308      	movs	r3, #8
 8008d9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008da2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d168      	bne.n	8008e7c <f_open+0x1d4>
 8008daa:	79fb      	ldrb	r3, [r7, #7]
 8008dac:	f003 0308 	and.w	r3, r3, #8
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d063      	beq.n	8008e7c <f_open+0x1d4>
				dw = GET_FATTIME();
 8008db4:	f7fd fa26 	bl	8006204 <get_fattime>
 8008db8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dbc:	330e      	adds	r3, #14
 8008dbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7fd fb71 	bl	80064a8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc8:	3316      	adds	r3, #22
 8008dca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7fd fb6b 	bl	80064a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd4:	330b      	adds	r3, #11
 8008dd6:	2220      	movs	r2, #32
 8008dd8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dde:	4611      	mov	r1, r2
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7fe fb43 	bl	800746c <ld_clust>
 8008de6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008dec:	2200      	movs	r2, #0
 8008dee:	4618      	mov	r0, r3
 8008df0:	f7fe fb5b 	bl	80074aa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df6:	331c      	adds	r3, #28
 8008df8:	2100      	movs	r1, #0
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7fd fb54 	bl	80064a8 <st_dword>
					fs->wflag = 1;
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	2201      	movs	r2, #1
 8008e04:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d037      	beq.n	8008e7c <f_open+0x1d4>
						dw = fs->winsect;
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e10:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8008e12:	f107 0314 	add.w	r3, r7, #20
 8008e16:	2200      	movs	r2, #0
 8008e18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7fe f84b 	bl	8006eb6 <remove_chain>
 8008e20:	4603      	mov	r3, r0
 8008e22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8008e26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d126      	bne.n	8008e7c <f_open+0x1d4>
							res = move_window(fs, dw);
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7fd fd92 	bl	800695c <move_window>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e42:	3a01      	subs	r2, #1
 8008e44:	615a      	str	r2, [r3, #20]
 8008e46:	e019      	b.n	8008e7c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008e48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d115      	bne.n	8008e7c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008e50:	7ebb      	ldrb	r3, [r7, #26]
 8008e52:	f003 0310 	and.w	r3, r3, #16
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d003      	beq.n	8008e62 <f_open+0x1ba>
					res = FR_NO_FILE;
 8008e5a:	2304      	movs	r3, #4
 8008e5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008e60:	e00c      	b.n	8008e7c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008e62:	79fb      	ldrb	r3, [r7, #7]
 8008e64:	f003 0302 	and.w	r3, r3, #2
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d007      	beq.n	8008e7c <f_open+0x1d4>
 8008e6c:	7ebb      	ldrb	r3, [r7, #26]
 8008e6e:	f003 0301 	and.w	r3, r3, #1
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d002      	beq.n	8008e7c <f_open+0x1d4>
						res = FR_DENIED;
 8008e76:	2307      	movs	r3, #7
 8008e78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008e7c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d128      	bne.n	8008ed6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008e84:	79fb      	ldrb	r3, [r7, #7]
 8008e86:	f003 0308 	and.w	r3, r3, #8
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d003      	beq.n	8008e96 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008e8e:	79fb      	ldrb	r3, [r7, #7]
 8008e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e94:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008e9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008ea4:	79fb      	ldrb	r3, [r7, #7]
 8008ea6:	f023 0301 	bic.w	r3, r3, #1
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	bf14      	ite	ne
 8008eae:	2301      	movne	r3, #1
 8008eb0:	2300      	moveq	r3, #0
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	f107 0314 	add.w	r3, r7, #20
 8008eba:	4611      	mov	r1, r2
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7fd fc1b 	bl	80066f8 <inc_lock>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d102      	bne.n	8008ed6 <f_open+0x22e>
 8008ed0:	2302      	movs	r3, #2
 8008ed2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008ed6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	f040 80a3 	bne.w	8009026 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ee4:	4611      	mov	r1, r2
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7fe fac0 	bl	800746c <ld_clust>
 8008eec:	4602      	mov	r2, r0
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef4:	331c      	adds	r3, #28
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7fd fa98 	bl	800642c <ld_dword>
 8008efc:	4602      	mov	r2, r0
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2200      	movs	r2, #0
 8008f06:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008f08:	693a      	ldr	r2, [r7, #16]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	88da      	ldrh	r2, [r3, #6]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	79fa      	ldrb	r2, [r7, #7]
 8008f1a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2200      	movs	r2, #0
 8008f26:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	3330      	adds	r3, #48	; 0x30
 8008f32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008f36:	2100      	movs	r1, #0
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7fd fb02 	bl	8006542 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008f3e:	79fb      	ldrb	r3, [r7, #7]
 8008f40:	f003 0320 	and.w	r3, r3, #32
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d06e      	beq.n	8009026 <f_open+0x37e>
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d06a      	beq.n	8009026 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	68da      	ldr	r2, [r3, #12]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	895b      	ldrh	r3, [r3, #10]
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	899b      	ldrh	r3, [r3, #12]
 8008f62:	fb02 f303 	mul.w	r3, r2, r3
 8008f66:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f74:	e016      	b.n	8008fa4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fd fdab 	bl	8006ad6 <get_fat>
 8008f80:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8008f82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d802      	bhi.n	8008f8e <f_open+0x2e6>
 8008f88:	2302      	movs	r3, #2
 8008f8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008f8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f94:	d102      	bne.n	8008f9c <f_open+0x2f4>
 8008f96:	2301      	movs	r3, #1
 8008f98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008f9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fa0:	1ad3      	subs	r3, r2, r3
 8008fa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008fa4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d103      	bne.n	8008fb4 <f_open+0x30c>
 8008fac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d8e0      	bhi.n	8008f76 <f_open+0x2ce>
				}
				fp->clust = clst;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008fb8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008fba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d131      	bne.n	8009026 <f_open+0x37e>
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	899b      	ldrh	r3, [r3, #12]
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fca:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fce:	fb01 f202 	mul.w	r2, r1, r2
 8008fd2:	1a9b      	subs	r3, r3, r2
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d026      	beq.n	8009026 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7fd fd5b 	bl	8006a98 <clust2sect>
 8008fe2:	64f8      	str	r0, [r7, #76]	; 0x4c
 8008fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d103      	bne.n	8008ff2 <f_open+0x34a>
						res = FR_INT_ERR;
 8008fea:	2302      	movs	r3, #2
 8008fec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008ff0:	e019      	b.n	8009026 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	899b      	ldrh	r3, [r3, #12]
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ffa:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009000:	441a      	add	r2, r3
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	7858      	ldrb	r0, [r3, #1]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6a1a      	ldr	r2, [r3, #32]
 8009014:	2301      	movs	r3, #1
 8009016:	f7fd f993 	bl	8006340 <disk_read>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d002      	beq.n	8009026 <f_open+0x37e>
 8009020:	2301      	movs	r3, #1
 8009022:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009026:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800902a:	2b00      	cmp	r3, #0
 800902c:	d002      	beq.n	8009034 <f_open+0x38c>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2200      	movs	r2, #0
 8009032:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009034:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009038:	4618      	mov	r0, r3
 800903a:	3768      	adds	r7, #104	; 0x68
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b08e      	sub	sp, #56	; 0x38
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	607a      	str	r2, [r7, #4]
 800904c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	2200      	movs	r2, #0
 8009056:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f107 0214 	add.w	r2, r7, #20
 800905e:	4611      	mov	r1, r2
 8009060:	4618      	mov	r0, r3
 8009062:	f7ff fda5 	bl	8008bb0 <validate>
 8009066:	4603      	mov	r3, r0
 8009068:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800906c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009070:	2b00      	cmp	r3, #0
 8009072:	d107      	bne.n	8009084 <f_read+0x44>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	7d5b      	ldrb	r3, [r3, #21]
 8009078:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800907c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009080:	2b00      	cmp	r3, #0
 8009082:	d002      	beq.n	800908a <f_read+0x4a>
 8009084:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009088:	e135      	b.n	80092f6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	7d1b      	ldrb	r3, [r3, #20]
 800908e:	f003 0301 	and.w	r3, r3, #1
 8009092:	2b00      	cmp	r3, #0
 8009094:	d101      	bne.n	800909a <f_read+0x5a>
 8009096:	2307      	movs	r3, #7
 8009098:	e12d      	b.n	80092f6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	68da      	ldr	r2, [r3, #12]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	699b      	ldr	r3, [r3, #24]
 80090a2:	1ad3      	subs	r3, r2, r3
 80090a4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	6a3b      	ldr	r3, [r7, #32]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	f240 811e 	bls.w	80092ec <f_read+0x2ac>
 80090b0:	6a3b      	ldr	r3, [r7, #32]
 80090b2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80090b4:	e11a      	b.n	80092ec <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	699b      	ldr	r3, [r3, #24]
 80090ba:	697a      	ldr	r2, [r7, #20]
 80090bc:	8992      	ldrh	r2, [r2, #12]
 80090be:	fbb3 f1f2 	udiv	r1, r3, r2
 80090c2:	fb01 f202 	mul.w	r2, r1, r2
 80090c6:	1a9b      	subs	r3, r3, r2
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f040 80d5 	bne.w	8009278 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	699b      	ldr	r3, [r3, #24]
 80090d2:	697a      	ldr	r2, [r7, #20]
 80090d4:	8992      	ldrh	r2, [r2, #12]
 80090d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80090da:	697a      	ldr	r2, [r7, #20]
 80090dc:	8952      	ldrh	r2, [r2, #10]
 80090de:	3a01      	subs	r2, #1
 80090e0:	4013      	ands	r3, r2
 80090e2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d12f      	bne.n	800914a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	699b      	ldr	r3, [r3, #24]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d103      	bne.n	80090fa <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	633b      	str	r3, [r7, #48]	; 0x30
 80090f8:	e013      	b.n	8009122 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d007      	beq.n	8009112 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	699b      	ldr	r3, [r3, #24]
 8009106:	4619      	mov	r1, r3
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f7fd ffd1 	bl	80070b0 <clmt_clust>
 800910e:	6338      	str	r0, [r7, #48]	; 0x30
 8009110:	e007      	b.n	8009122 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	69db      	ldr	r3, [r3, #28]
 8009118:	4619      	mov	r1, r3
 800911a:	4610      	mov	r0, r2
 800911c:	f7fd fcdb 	bl	8006ad6 <get_fat>
 8009120:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009124:	2b01      	cmp	r3, #1
 8009126:	d804      	bhi.n	8009132 <f_read+0xf2>
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2202      	movs	r2, #2
 800912c:	755a      	strb	r2, [r3, #21]
 800912e:	2302      	movs	r3, #2
 8009130:	e0e1      	b.n	80092f6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009138:	d104      	bne.n	8009144 <f_read+0x104>
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2201      	movs	r2, #1
 800913e:	755a      	strb	r2, [r3, #21]
 8009140:	2301      	movs	r3, #1
 8009142:	e0d8      	b.n	80092f6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009148:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800914a:	697a      	ldr	r2, [r7, #20]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	69db      	ldr	r3, [r3, #28]
 8009150:	4619      	mov	r1, r3
 8009152:	4610      	mov	r0, r2
 8009154:	f7fd fca0 	bl	8006a98 <clust2sect>
 8009158:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d104      	bne.n	800916a <f_read+0x12a>
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2202      	movs	r2, #2
 8009164:	755a      	strb	r2, [r3, #21]
 8009166:	2302      	movs	r3, #2
 8009168:	e0c5      	b.n	80092f6 <f_read+0x2b6>
			sect += csect;
 800916a:	69ba      	ldr	r2, [r7, #24]
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	4413      	add	r3, r2
 8009170:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	899b      	ldrh	r3, [r3, #12]
 8009176:	461a      	mov	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	fbb3 f3f2 	udiv	r3, r3, r2
 800917e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009182:	2b00      	cmp	r3, #0
 8009184:	d041      	beq.n	800920a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009186:	69fa      	ldr	r2, [r7, #28]
 8009188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918a:	4413      	add	r3, r2
 800918c:	697a      	ldr	r2, [r7, #20]
 800918e:	8952      	ldrh	r2, [r2, #10]
 8009190:	4293      	cmp	r3, r2
 8009192:	d905      	bls.n	80091a0 <f_read+0x160>
					cc = fs->csize - csect;
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	895b      	ldrh	r3, [r3, #10]
 8009198:	461a      	mov	r2, r3
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	1ad3      	subs	r3, r2, r3
 800919e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	7858      	ldrb	r0, [r3, #1]
 80091a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a6:	69ba      	ldr	r2, [r7, #24]
 80091a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80091aa:	f7fd f8c9 	bl	8006340 <disk_read>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d004      	beq.n	80091be <f_read+0x17e>
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2201      	movs	r2, #1
 80091b8:	755a      	strb	r2, [r3, #21]
 80091ba:	2301      	movs	r3, #1
 80091bc:	e09b      	b.n	80092f6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	7d1b      	ldrb	r3, [r3, #20]
 80091c2:	b25b      	sxtb	r3, r3
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	da18      	bge.n	80091fa <f_read+0x1ba>
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6a1a      	ldr	r2, [r3, #32]
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	1ad3      	subs	r3, r2, r3
 80091d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d911      	bls.n	80091fa <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6a1a      	ldr	r2, [r3, #32]
 80091da:	69bb      	ldr	r3, [r7, #24]
 80091dc:	1ad3      	subs	r3, r2, r3
 80091de:	697a      	ldr	r2, [r7, #20]
 80091e0:	8992      	ldrh	r2, [r2, #12]
 80091e2:	fb02 f303 	mul.w	r3, r2, r3
 80091e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091e8:	18d0      	adds	r0, r2, r3
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	899b      	ldrh	r3, [r3, #12]
 80091f4:	461a      	mov	r2, r3
 80091f6:	f7fd f983 	bl	8006500 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	899b      	ldrh	r3, [r3, #12]
 80091fe:	461a      	mov	r2, r3
 8009200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009202:	fb02 f303 	mul.w	r3, r2, r3
 8009206:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8009208:	e05c      	b.n	80092c4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	6a1b      	ldr	r3, [r3, #32]
 800920e:	69ba      	ldr	r2, [r7, #24]
 8009210:	429a      	cmp	r2, r3
 8009212:	d02e      	beq.n	8009272 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	7d1b      	ldrb	r3, [r3, #20]
 8009218:	b25b      	sxtb	r3, r3
 800921a:	2b00      	cmp	r3, #0
 800921c:	da18      	bge.n	8009250 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	7858      	ldrb	r0, [r3, #1]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6a1a      	ldr	r2, [r3, #32]
 800922c:	2301      	movs	r3, #1
 800922e:	f7fd f8a7 	bl	8006380 <disk_write>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d004      	beq.n	8009242 <f_read+0x202>
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2201      	movs	r2, #1
 800923c:	755a      	strb	r2, [r3, #21]
 800923e:	2301      	movs	r3, #1
 8009240:	e059      	b.n	80092f6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	7d1b      	ldrb	r3, [r3, #20]
 8009246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800924a:	b2da      	uxtb	r2, r3
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	7858      	ldrb	r0, [r3, #1]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800925a:	2301      	movs	r3, #1
 800925c:	69ba      	ldr	r2, [r7, #24]
 800925e:	f7fd f86f 	bl	8006340 <disk_read>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d004      	beq.n	8009272 <f_read+0x232>
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2201      	movs	r2, #1
 800926c:	755a      	strb	r2, [r3, #21]
 800926e:	2301      	movs	r3, #1
 8009270:	e041      	b.n	80092f6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	69ba      	ldr	r2, [r7, #24]
 8009276:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	899b      	ldrh	r3, [r3, #12]
 800927c:	4618      	mov	r0, r3
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	699b      	ldr	r3, [r3, #24]
 8009282:	697a      	ldr	r2, [r7, #20]
 8009284:	8992      	ldrh	r2, [r2, #12]
 8009286:	fbb3 f1f2 	udiv	r1, r3, r2
 800928a:	fb01 f202 	mul.w	r2, r1, r2
 800928e:	1a9b      	subs	r3, r3, r2
 8009290:	1ac3      	subs	r3, r0, r3
 8009292:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	429a      	cmp	r2, r3
 800929a:	d901      	bls.n	80092a0 <f_read+0x260>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	699b      	ldr	r3, [r3, #24]
 80092aa:	697a      	ldr	r2, [r7, #20]
 80092ac:	8992      	ldrh	r2, [r2, #12]
 80092ae:	fbb3 f0f2 	udiv	r0, r3, r2
 80092b2:	fb00 f202 	mul.w	r2, r0, r2
 80092b6:	1a9b      	subs	r3, r3, r2
 80092b8:	440b      	add	r3, r1
 80092ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092bc:	4619      	mov	r1, r3
 80092be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092c0:	f7fd f91e 	bl	8006500 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80092c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c8:	4413      	add	r3, r2
 80092ca:	627b      	str	r3, [r7, #36]	; 0x24
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	699a      	ldr	r2, [r3, #24]
 80092d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d2:	441a      	add	r2, r3
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	619a      	str	r2, [r3, #24]
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092de:	441a      	add	r2, r3
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	601a      	str	r2, [r3, #0]
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e8:	1ad3      	subs	r3, r2, r3
 80092ea:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f47f aee1 	bne.w	80090b6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3738      	adds	r7, #56	; 0x38
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b08c      	sub	sp, #48	; 0x30
 8009302:	af00      	add	r7, sp, #0
 8009304:	60f8      	str	r0, [r7, #12]
 8009306:	60b9      	str	r1, [r7, #8]
 8009308:	607a      	str	r2, [r7, #4]
 800930a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	2200      	movs	r2, #0
 8009314:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f107 0210 	add.w	r2, r7, #16
 800931c:	4611      	mov	r1, r2
 800931e:	4618      	mov	r0, r3
 8009320:	f7ff fc46 	bl	8008bb0 <validate>
 8009324:	4603      	mov	r3, r0
 8009326:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800932a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800932e:	2b00      	cmp	r3, #0
 8009330:	d107      	bne.n	8009342 <f_write+0x44>
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	7d5b      	ldrb	r3, [r3, #21]
 8009336:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800933a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800933e:	2b00      	cmp	r3, #0
 8009340:	d002      	beq.n	8009348 <f_write+0x4a>
 8009342:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009346:	e16a      	b.n	800961e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	7d1b      	ldrb	r3, [r3, #20]
 800934c:	f003 0302 	and.w	r3, r3, #2
 8009350:	2b00      	cmp	r3, #0
 8009352:	d101      	bne.n	8009358 <f_write+0x5a>
 8009354:	2307      	movs	r3, #7
 8009356:	e162      	b.n	800961e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	699a      	ldr	r2, [r3, #24]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	441a      	add	r2, r3
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	699b      	ldr	r3, [r3, #24]
 8009364:	429a      	cmp	r2, r3
 8009366:	f080 814c 	bcs.w	8009602 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	699b      	ldr	r3, [r3, #24]
 800936e:	43db      	mvns	r3, r3
 8009370:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009372:	e146      	b.n	8009602 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	699b      	ldr	r3, [r3, #24]
 8009378:	693a      	ldr	r2, [r7, #16]
 800937a:	8992      	ldrh	r2, [r2, #12]
 800937c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009380:	fb01 f202 	mul.w	r2, r1, r2
 8009384:	1a9b      	subs	r3, r3, r2
 8009386:	2b00      	cmp	r3, #0
 8009388:	f040 80f1 	bne.w	800956e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	699b      	ldr	r3, [r3, #24]
 8009390:	693a      	ldr	r2, [r7, #16]
 8009392:	8992      	ldrh	r2, [r2, #12]
 8009394:	fbb3 f3f2 	udiv	r3, r3, r2
 8009398:	693a      	ldr	r2, [r7, #16]
 800939a:	8952      	ldrh	r2, [r2, #10]
 800939c:	3a01      	subs	r2, #1
 800939e:	4013      	ands	r3, r2
 80093a0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d143      	bne.n	8009430 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	699b      	ldr	r3, [r3, #24]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d10c      	bne.n	80093ca <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80093b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d11a      	bne.n	80093f2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2100      	movs	r1, #0
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7fd fddd 	bl	8006f80 <create_chain>
 80093c6:	62b8      	str	r0, [r7, #40]	; 0x28
 80093c8:	e013      	b.n	80093f2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d007      	beq.n	80093e2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	699b      	ldr	r3, [r3, #24]
 80093d6:	4619      	mov	r1, r3
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	f7fd fe69 	bl	80070b0 <clmt_clust>
 80093de:	62b8      	str	r0, [r7, #40]	; 0x28
 80093e0:	e007      	b.n	80093f2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80093e2:	68fa      	ldr	r2, [r7, #12]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	69db      	ldr	r3, [r3, #28]
 80093e8:	4619      	mov	r1, r3
 80093ea:	4610      	mov	r0, r2
 80093ec:	f7fd fdc8 	bl	8006f80 <create_chain>
 80093f0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80093f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f000 8109 	beq.w	800960c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80093fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d104      	bne.n	800940a <f_write+0x10c>
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2202      	movs	r2, #2
 8009404:	755a      	strb	r2, [r3, #21]
 8009406:	2302      	movs	r3, #2
 8009408:	e109      	b.n	800961e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800940a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009410:	d104      	bne.n	800941c <f_write+0x11e>
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2201      	movs	r2, #1
 8009416:	755a      	strb	r2, [r3, #21]
 8009418:	2301      	movs	r3, #1
 800941a:	e100      	b.n	800961e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009420:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d102      	bne.n	8009430 <f_write+0x132>
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800942e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	7d1b      	ldrb	r3, [r3, #20]
 8009434:	b25b      	sxtb	r3, r3
 8009436:	2b00      	cmp	r3, #0
 8009438:	da18      	bge.n	800946c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	7858      	ldrb	r0, [r3, #1]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	6a1a      	ldr	r2, [r3, #32]
 8009448:	2301      	movs	r3, #1
 800944a:	f7fc ff99 	bl	8006380 <disk_write>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d004      	beq.n	800945e <f_write+0x160>
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2201      	movs	r2, #1
 8009458:	755a      	strb	r2, [r3, #21]
 800945a:	2301      	movs	r3, #1
 800945c:	e0df      	b.n	800961e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	7d1b      	ldrb	r3, [r3, #20]
 8009462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009466:	b2da      	uxtb	r2, r3
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800946c:	693a      	ldr	r2, [r7, #16]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	69db      	ldr	r3, [r3, #28]
 8009472:	4619      	mov	r1, r3
 8009474:	4610      	mov	r0, r2
 8009476:	f7fd fb0f 	bl	8006a98 <clust2sect>
 800947a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d104      	bne.n	800948c <f_write+0x18e>
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2202      	movs	r2, #2
 8009486:	755a      	strb	r2, [r3, #21]
 8009488:	2302      	movs	r3, #2
 800948a:	e0c8      	b.n	800961e <f_write+0x320>
			sect += csect;
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	4413      	add	r3, r2
 8009492:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	899b      	ldrh	r3, [r3, #12]
 8009498:	461a      	mov	r2, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	fbb3 f3f2 	udiv	r3, r3, r2
 80094a0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80094a2:	6a3b      	ldr	r3, [r7, #32]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d043      	beq.n	8009530 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80094a8:	69ba      	ldr	r2, [r7, #24]
 80094aa:	6a3b      	ldr	r3, [r7, #32]
 80094ac:	4413      	add	r3, r2
 80094ae:	693a      	ldr	r2, [r7, #16]
 80094b0:	8952      	ldrh	r2, [r2, #10]
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d905      	bls.n	80094c2 <f_write+0x1c4>
					cc = fs->csize - csect;
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	895b      	ldrh	r3, [r3, #10]
 80094ba:	461a      	mov	r2, r3
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	1ad3      	subs	r3, r2, r3
 80094c0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	7858      	ldrb	r0, [r3, #1]
 80094c6:	6a3b      	ldr	r3, [r7, #32]
 80094c8:	697a      	ldr	r2, [r7, #20]
 80094ca:	69f9      	ldr	r1, [r7, #28]
 80094cc:	f7fc ff58 	bl	8006380 <disk_write>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d004      	beq.n	80094e0 <f_write+0x1e2>
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2201      	movs	r2, #1
 80094da:	755a      	strb	r2, [r3, #21]
 80094dc:	2301      	movs	r3, #1
 80094de:	e09e      	b.n	800961e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6a1a      	ldr	r2, [r3, #32]
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	1ad3      	subs	r3, r2, r3
 80094e8:	6a3a      	ldr	r2, [r7, #32]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d918      	bls.n	8009520 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6a1a      	ldr	r2, [r3, #32]
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	693a      	ldr	r2, [r7, #16]
 80094fe:	8992      	ldrh	r2, [r2, #12]
 8009500:	fb02 f303 	mul.w	r3, r2, r3
 8009504:	69fa      	ldr	r2, [r7, #28]
 8009506:	18d1      	adds	r1, r2, r3
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	899b      	ldrh	r3, [r3, #12]
 800950c:	461a      	mov	r2, r3
 800950e:	f7fc fff7 	bl	8006500 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	7d1b      	ldrb	r3, [r3, #20]
 8009516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800951a:	b2da      	uxtb	r2, r3
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	899b      	ldrh	r3, [r3, #12]
 8009524:	461a      	mov	r2, r3
 8009526:	6a3b      	ldr	r3, [r7, #32]
 8009528:	fb02 f303 	mul.w	r3, r2, r3
 800952c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800952e:	e04b      	b.n	80095c8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6a1b      	ldr	r3, [r3, #32]
 8009534:	697a      	ldr	r2, [r7, #20]
 8009536:	429a      	cmp	r2, r3
 8009538:	d016      	beq.n	8009568 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	699a      	ldr	r2, [r3, #24]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009542:	429a      	cmp	r2, r3
 8009544:	d210      	bcs.n	8009568 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	7858      	ldrb	r0, [r3, #1]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009550:	2301      	movs	r3, #1
 8009552:	697a      	ldr	r2, [r7, #20]
 8009554:	f7fc fef4 	bl	8006340 <disk_read>
 8009558:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800955a:	2b00      	cmp	r3, #0
 800955c:	d004      	beq.n	8009568 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2201      	movs	r2, #1
 8009562:	755a      	strb	r2, [r3, #21]
 8009564:	2301      	movs	r3, #1
 8009566:	e05a      	b.n	800961e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	697a      	ldr	r2, [r7, #20]
 800956c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	899b      	ldrh	r3, [r3, #12]
 8009572:	4618      	mov	r0, r3
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	699b      	ldr	r3, [r3, #24]
 8009578:	693a      	ldr	r2, [r7, #16]
 800957a:	8992      	ldrh	r2, [r2, #12]
 800957c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009580:	fb01 f202 	mul.w	r2, r1, r2
 8009584:	1a9b      	subs	r3, r3, r2
 8009586:	1ac3      	subs	r3, r0, r3
 8009588:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800958a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	429a      	cmp	r2, r3
 8009590:	d901      	bls.n	8009596 <f_write+0x298>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	699b      	ldr	r3, [r3, #24]
 80095a0:	693a      	ldr	r2, [r7, #16]
 80095a2:	8992      	ldrh	r2, [r2, #12]
 80095a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80095a8:	fb00 f202 	mul.w	r2, r0, r2
 80095ac:	1a9b      	subs	r3, r3, r2
 80095ae:	440b      	add	r3, r1
 80095b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095b2:	69f9      	ldr	r1, [r7, #28]
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7fc ffa3 	bl	8006500 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	7d1b      	ldrb	r3, [r3, #20]
 80095be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80095c2:	b2da      	uxtb	r2, r3
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80095c8:	69fa      	ldr	r2, [r7, #28]
 80095ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095cc:	4413      	add	r3, r2
 80095ce:	61fb      	str	r3, [r7, #28]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	699a      	ldr	r2, [r3, #24]
 80095d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d6:	441a      	add	r2, r3
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	619a      	str	r2, [r3, #24]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	68da      	ldr	r2, [r3, #12]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	699b      	ldr	r3, [r3, #24]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	bf38      	it	cc
 80095e8:	461a      	movcc	r2, r3
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	60da      	str	r2, [r3, #12]
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f4:	441a      	add	r2, r3
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	601a      	str	r2, [r3, #0]
 80095fa:	687a      	ldr	r2, [r7, #4]
 80095fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fe:	1ad3      	subs	r3, r2, r3
 8009600:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2b00      	cmp	r3, #0
 8009606:	f47f aeb5 	bne.w	8009374 <f_write+0x76>
 800960a:	e000      	b.n	800960e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800960c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	7d1b      	ldrb	r3, [r3, #20]
 8009612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009616:	b2da      	uxtb	r2, r3
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	3730      	adds	r7, #48	; 0x30
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009626:	b580      	push	{r7, lr}
 8009628:	b086      	sub	sp, #24
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f107 0208 	add.w	r2, r7, #8
 8009634:	4611      	mov	r1, r2
 8009636:	4618      	mov	r0, r3
 8009638:	f7ff faba 	bl	8008bb0 <validate>
 800963c:	4603      	mov	r3, r0
 800963e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009640:	7dfb      	ldrb	r3, [r7, #23]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d168      	bne.n	8009718 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	7d1b      	ldrb	r3, [r3, #20]
 800964a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800964e:	2b00      	cmp	r3, #0
 8009650:	d062      	beq.n	8009718 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	7d1b      	ldrb	r3, [r3, #20]
 8009656:	b25b      	sxtb	r3, r3
 8009658:	2b00      	cmp	r3, #0
 800965a:	da15      	bge.n	8009688 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	7858      	ldrb	r0, [r3, #1]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6a1a      	ldr	r2, [r3, #32]
 800966a:	2301      	movs	r3, #1
 800966c:	f7fc fe88 	bl	8006380 <disk_write>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d001      	beq.n	800967a <f_sync+0x54>
 8009676:	2301      	movs	r3, #1
 8009678:	e04f      	b.n	800971a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	7d1b      	ldrb	r3, [r3, #20]
 800967e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009682:	b2da      	uxtb	r2, r3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009688:	f7fc fdbc 	bl	8006204 <get_fattime>
 800968c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009694:	4619      	mov	r1, r3
 8009696:	4610      	mov	r0, r2
 8009698:	f7fd f960 	bl	800695c <move_window>
 800969c:	4603      	mov	r3, r0
 800969e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80096a0:	7dfb      	ldrb	r3, [r7, #23]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d138      	bne.n	8009718 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096aa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	330b      	adds	r3, #11
 80096b0:	781a      	ldrb	r2, [r3, #0]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	330b      	adds	r3, #11
 80096b6:	f042 0220 	orr.w	r2, r2, #32
 80096ba:	b2d2      	uxtb	r2, r2
 80096bc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6818      	ldr	r0, [r3, #0]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	461a      	mov	r2, r3
 80096c8:	68f9      	ldr	r1, [r7, #12]
 80096ca:	f7fd feee 	bl	80074aa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f103 021c 	add.w	r2, r3, #28
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	4619      	mov	r1, r3
 80096da:	4610      	mov	r0, r2
 80096dc:	f7fc fee4 	bl	80064a8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	3316      	adds	r3, #22
 80096e4:	6939      	ldr	r1, [r7, #16]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7fc fede 	bl	80064a8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	3312      	adds	r3, #18
 80096f0:	2100      	movs	r1, #0
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7fc febd 	bl	8006472 <st_word>
					fs->wflag = 1;
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	2201      	movs	r2, #1
 80096fc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	4618      	mov	r0, r3
 8009702:	f7fd f959 	bl	80069b8 <sync_fs>
 8009706:	4603      	mov	r3, r0
 8009708:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	7d1b      	ldrb	r3, [r3, #20]
 800970e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009712:	b2da      	uxtb	r2, r3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009718:	7dfb      	ldrb	r3, [r7, #23]
}
 800971a:	4618      	mov	r0, r3
 800971c:	3718      	adds	r7, #24
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b084      	sub	sp, #16
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f7ff ff7b 	bl	8009626 <f_sync>
 8009730:	4603      	mov	r3, r0
 8009732:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009734:	7bfb      	ldrb	r3, [r7, #15]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d118      	bne.n	800976c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f107 0208 	add.w	r2, r7, #8
 8009740:	4611      	mov	r1, r2
 8009742:	4618      	mov	r0, r3
 8009744:	f7ff fa34 	bl	8008bb0 <validate>
 8009748:	4603      	mov	r3, r0
 800974a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800974c:	7bfb      	ldrb	r3, [r7, #15]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10c      	bne.n	800976c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	691b      	ldr	r3, [r3, #16]
 8009756:	4618      	mov	r0, r3
 8009758:	f7fd f85c 	bl	8006814 <dec_lock>
 800975c:	4603      	mov	r3, r0
 800975e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009760:	7bfb      	ldrb	r3, [r7, #15]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d102      	bne.n	800976c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800976c:	7bfb      	ldrb	r3, [r7, #15]
}
 800976e:	4618      	mov	r0, r3
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b086      	sub	sp, #24
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
 800977e:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d101      	bne.n	800978a <f_opendir+0x14>
 8009786:	2309      	movs	r3, #9
 8009788:	e064      	b.n	8009854 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800978e:	f107 010c 	add.w	r1, r7, #12
 8009792:	463b      	mov	r3, r7
 8009794:	2200      	movs	r2, #0
 8009796:	4618      	mov	r0, r3
 8009798:	f7fe ff84 	bl	80086a4 <find_volume>
 800979c:	4603      	mov	r3, r0
 800979e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80097a0:	7dfb      	ldrb	r3, [r7, #23]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d14f      	bne.n	8009846 <f_opendir+0xd0>
		obj->fs = fs;
 80097a6:	68fa      	ldr	r2, [r7, #12]
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	4619      	mov	r1, r3
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f7fe fe67 	bl	8008484 <follow_path>
 80097b6:	4603      	mov	r3, r0
 80097b8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80097ba:	7dfb      	ldrb	r3, [r7, #23]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d13d      	bne.n	800983c <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80097c6:	b25b      	sxtb	r3, r3
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	db12      	blt.n	80097f2 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	799b      	ldrb	r3, [r3, #6]
 80097d0:	f003 0310 	and.w	r3, r3, #16
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d00a      	beq.n	80097ee <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6a1b      	ldr	r3, [r3, #32]
 80097de:	4619      	mov	r1, r3
 80097e0:	4610      	mov	r0, r2
 80097e2:	f7fd fe43 	bl	800746c <ld_clust>
 80097e6:	4602      	mov	r2, r0
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	609a      	str	r2, [r3, #8]
 80097ec:	e001      	b.n	80097f2 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80097ee:	2305      	movs	r3, #5
 80097f0:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80097f2:	7dfb      	ldrb	r3, [r7, #23]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d121      	bne.n	800983c <f_opendir+0xc6>
				obj->id = fs->id;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	88da      	ldrh	r2, [r3, #6]
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8009800:	2100      	movs	r1, #0
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f7fd fc8c 	bl	8007120 <dir_sdi>
 8009808:	4603      	mov	r3, r0
 800980a:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800980c:	7dfb      	ldrb	r3, [r7, #23]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d114      	bne.n	800983c <f_opendir+0xc6>
					if (obj->sclust) {
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d00d      	beq.n	8009836 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800981a:	2100      	movs	r1, #0
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f7fc ff6b 	bl	80066f8 <inc_lock>
 8009822:	4602      	mov	r2, r0
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d105      	bne.n	800983c <f_opendir+0xc6>
 8009830:	2312      	movs	r3, #18
 8009832:	75fb      	strb	r3, [r7, #23]
 8009834:	e002      	b.n	800983c <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	2200      	movs	r2, #0
 800983a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800983c:	7dfb      	ldrb	r3, [r7, #23]
 800983e:	2b04      	cmp	r3, #4
 8009840:	d101      	bne.n	8009846 <f_opendir+0xd0>
 8009842:	2305      	movs	r3, #5
 8009844:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8009846:	7dfb      	ldrb	r3, [r7, #23]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d002      	beq.n	8009852 <f_opendir+0xdc>
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	2200      	movs	r2, #0
 8009850:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009852:	7dfb      	ldrb	r3, [r7, #23]
}
 8009854:	4618      	mov	r0, r3
 8009856:	3718      	adds	r7, #24
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f107 0208 	add.w	r2, r7, #8
 800986c:	4611      	mov	r1, r2
 800986e:	4618      	mov	r0, r3
 8009870:	f7ff f99e 	bl	8008bb0 <validate>
 8009874:	4603      	mov	r3, r0
 8009876:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009878:	7bfb      	ldrb	r3, [r7, #15]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d126      	bne.n	80098cc <f_readdir+0x70>
		if (!fno) {
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d106      	bne.n	8009892 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8009884:	2100      	movs	r1, #0
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f7fd fc4a 	bl	8007120 <dir_sdi>
 800988c:	4603      	mov	r3, r0
 800988e:	73fb      	strb	r3, [r7, #15]
 8009890:	e01c      	b.n	80098cc <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8009892:	2100      	movs	r1, #0
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f7fe f814 	bl	80078c2 <dir_read>
 800989a:	4603      	mov	r3, r0
 800989c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800989e:	7bfb      	ldrb	r3, [r7, #15]
 80098a0:	2b04      	cmp	r3, #4
 80098a2:	d101      	bne.n	80098a8 <f_readdir+0x4c>
 80098a4:	2300      	movs	r3, #0
 80098a6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80098a8:	7bfb      	ldrb	r3, [r7, #15]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d10e      	bne.n	80098cc <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80098ae:	6839      	ldr	r1, [r7, #0]
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f7fe faaf 	bl	8007e14 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80098b6:	2100      	movs	r1, #0
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f7fd fcba 	bl	8007232 <dir_next>
 80098be:	4603      	mov	r3, r0
 80098c0:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80098c2:	7bfb      	ldrb	r3, [r7, #15]
 80098c4:	2b04      	cmp	r3, #4
 80098c6:	d101      	bne.n	80098cc <f_readdir+0x70>
 80098c8:	2300      	movs	r3, #0
 80098ca:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80098cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b084      	sub	sp, #16
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
 80098de:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 80098e0:	6839      	ldr	r1, [r7, #0]
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f7ff ffba 	bl	800985c <f_readdir>
 80098e8:	4603      	mov	r3, r0
 80098ea:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 80098ec:	7bfb      	ldrb	r3, [r7, #15]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d114      	bne.n	800991c <f_findnext+0x46>
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d011      	beq.n	800991c <f_findnext+0x46>
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	7d9b      	ldrb	r3, [r3, #22]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d00d      	beq.n	800991c <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	f103 0116 	add.w	r1, r3, #22
 800990a:	2300      	movs	r3, #0
 800990c:	2200      	movs	r2, #0
 800990e:	f7fe fb85 	bl	800801c <pattern_matching>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d100      	bne.n	800991a <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 8009918:	e7e2      	b.n	80098e0 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800991a:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 800991c:	7bfb      	ldrb	r3, [r7, #15]
}
 800991e:	4618      	mov	r0, r3
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}

08009926 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b086      	sub	sp, #24
 800992a:	af00      	add	r7, sp, #0
 800992c:	60f8      	str	r0, [r7, #12]
 800992e:	60b9      	str	r1, [r7, #8]
 8009930:	607a      	str	r2, [r7, #4]
 8009932:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	683a      	ldr	r2, [r7, #0]
 8009938:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 800993a:	6879      	ldr	r1, [r7, #4]
 800993c:	68f8      	ldr	r0, [r7, #12]
 800993e:	f7ff ff1a 	bl	8009776 <f_opendir>
 8009942:	4603      	mov	r3, r0
 8009944:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009946:	7dfb      	ldrb	r3, [r7, #23]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d105      	bne.n	8009958 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 800994c:	68b9      	ldr	r1, [r7, #8]
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f7ff ffc1 	bl	80098d6 <f_findnext>
 8009954:	4603      	mov	r3, r0
 8009956:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 8009958:	7dfb      	ldrb	r3, [r7, #23]
}
 800995a:	4618      	mov	r0, r3
 800995c:	3718      	adds	r7, #24
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}

08009962 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b0a2      	sub	sp, #136	; 0x88
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800996a:	2300      	movs	r3, #0
 800996c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8009970:	f107 010c 	add.w	r1, r7, #12
 8009974:	1d3b      	adds	r3, r7, #4
 8009976:	2202      	movs	r2, #2
 8009978:	4618      	mov	r0, r3
 800997a:	f7fe fe93 	bl	80086a4 <find_volume>
 800997e:	4603      	mov	r3, r0
 8009980:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	dj.obj.fs = fs;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	64bb      	str	r3, [r7, #72]	; 0x48
	if (res == FR_OK) {
 8009988:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800998c:	2b00      	cmp	r3, #0
 800998e:	f040 8092 	bne.w	8009ab6 <f_unlink+0x154>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009998:	4611      	mov	r1, r2
 800999a:	4618      	mov	r0, r3
 800999c:	f7fe fd72 	bl	8008484 <follow_path>
 80099a0:	4603      	mov	r3, r0
 80099a2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80099a6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d108      	bne.n	80099c0 <f_unlink+0x5e>
 80099ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80099b2:	2102      	movs	r1, #2
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7fc fe21 	bl	80065fc <chk_lock>
 80099ba:	4603      	mov	r3, r0
 80099bc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80099c0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d176      	bne.n	8009ab6 <f_unlink+0x154>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80099c8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80099cc:	b25b      	sxtb	r3, r3
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	da03      	bge.n	80099da <f_unlink+0x78>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80099d2:	2306      	movs	r3, #6
 80099d4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80099d8:	e008      	b.n	80099ec <f_unlink+0x8a>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80099da:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80099de:	f003 0301 	and.w	r3, r3, #1
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d002      	beq.n	80099ec <f_unlink+0x8a>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80099e6:	2307      	movs	r3, #7
 80099e8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
			if (res == FR_OK) {
 80099ec:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d136      	bne.n	8009a62 <f_unlink+0x100>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80099f8:	4611      	mov	r1, r2
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7fd fd36 	bl	800746c <ld_clust>
 8009a00:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8009a04:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8009a08:	f003 0310 	and.w	r3, r3, #16
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d028      	beq.n	8009a62 <f_unlink+0x100>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8009a14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009a18:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8009a1a:	f107 0310 	add.w	r3, r7, #16
 8009a1e:	2100      	movs	r1, #0
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7fd fb7d 	bl	8007120 <dir_sdi>
 8009a26:	4603      	mov	r3, r0
 8009a28:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						if (res == FR_OK) {
 8009a2c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d116      	bne.n	8009a62 <f_unlink+0x100>
							res = dir_read(&sdj, 0);			/* Read an item */
 8009a34:	f107 0310 	add.w	r3, r7, #16
 8009a38:	2100      	movs	r1, #0
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7fd ff41 	bl	80078c2 <dir_read>
 8009a40:	4603      	mov	r3, r0
 8009a42:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8009a46:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d102      	bne.n	8009a54 <f_unlink+0xf2>
 8009a4e:	2307      	movs	r3, #7
 8009a50:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8009a54:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8009a58:	2b04      	cmp	r3, #4
 8009a5a:	d102      	bne.n	8009a62 <f_unlink+0x100>
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						}
					}
				}
			}
			if (res == FR_OK) {
 8009a62:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d125      	bne.n	8009ab6 <f_unlink+0x154>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8009a6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7fe f986 	bl	8007d80 <dir_remove>
 8009a74:	4603      	mov	r3, r0
 8009a76:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8009a7a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d10e      	bne.n	8009aa0 <f_unlink+0x13e>
 8009a82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00a      	beq.n	8009aa0 <f_unlink+0x13e>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8009a8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7fd fa0e 	bl	8006eb6 <remove_chain>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8009aa0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d106      	bne.n	8009ab6 <f_unlink+0x154>
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7fc ff84 	bl	80069b8 <sync_fs>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8009ab6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3788      	adds	r7, #136	; 0x88
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b098      	sub	sp, #96	; 0x60
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8009aca:	f107 0108 	add.w	r1, r7, #8
 8009ace:	1d3b      	adds	r3, r7, #4
 8009ad0:	2202      	movs	r2, #2
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7fe fde6 	bl	80086a4 <find_volume>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8009ae2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	f040 80f2 	bne.w	8009cd0 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	f107 030c 	add.w	r3, r7, #12
 8009af2:	4611      	mov	r1, r2
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7fe fcc5 	bl	8008484 <follow_path>
 8009afa:	4603      	mov	r3, r0
 8009afc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8009b00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d102      	bne.n	8009b0e <f_mkdir+0x4c>
 8009b08:	2308      	movs	r3, #8
 8009b0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8009b0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b12:	2b04      	cmp	r3, #4
 8009b14:	f040 80dc 	bne.w	8009cd0 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8009b18:	f107 030c 	add.w	r3, r7, #12
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7fd fa2e 	bl	8006f80 <create_chain>
 8009b24:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	895b      	ldrh	r3, [r3, #10]
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	899b      	ldrh	r3, [r3, #12]
 8009b30:	fb02 f303 	mul.w	r3, r2, r3
 8009b34:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8009b36:	2300      	movs	r3, #0
 8009b38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8009b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d102      	bne.n	8009b48 <f_mkdir+0x86>
 8009b42:	2307      	movs	r3, #7
 8009b44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 8009b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d102      	bne.n	8009b54 <f_mkdir+0x92>
 8009b4e:	2302      	movs	r3, #2
 8009b50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b5a:	d102      	bne.n	8009b62 <f_mkdir+0xa0>
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8009b62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d106      	bne.n	8009b78 <f_mkdir+0xb6>
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f7fc feb1 	bl	80068d4 <sync_window>
 8009b72:	4603      	mov	r3, r0
 8009b74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 8009b78:	f7fc fb44 	bl	8006204 <get_fattime>
 8009b7c:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 8009b7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d16c      	bne.n	8009c60 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7fc ff84 	bl	8006a98 <clust2sect>
 8009b90:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	3338      	adds	r3, #56	; 0x38
 8009b96:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	899b      	ldrh	r3, [r3, #12]
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	2100      	movs	r1, #0
 8009ba0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009ba2:	f7fc fcce 	bl	8006542 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8009ba6:	220b      	movs	r2, #11
 8009ba8:	2120      	movs	r1, #32
 8009baa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009bac:	f7fc fcc9 	bl	8006542 <mem_set>
					dir[DIR_Name] = '.';
 8009bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bb2:	222e      	movs	r2, #46	; 0x2e
 8009bb4:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8009bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bb8:	330b      	adds	r3, #11
 8009bba:	2210      	movs	r2, #16
 8009bbc:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8009bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bc0:	3316      	adds	r3, #22
 8009bc2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7fc fc6f 	bl	80064a8 <st_dword>
					st_clust(fs, dir, dcl);
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009bce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7fd fc6a 	bl	80074aa <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8009bd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bd8:	3320      	adds	r3, #32
 8009bda:	2220      	movs	r2, #32
 8009bdc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7fc fc8e 	bl	8006500 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8009be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009be6:	3321      	adds	r3, #33	; 0x21
 8009be8:	222e      	movs	r2, #46	; 0x2e
 8009bea:	701a      	strb	r2, [r3, #0]
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	2b03      	cmp	r3, #3
 8009bf6:	d106      	bne.n	8009c06 <f_mkdir+0x144>
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bfc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d101      	bne.n	8009c06 <f_mkdir+0x144>
 8009c02:	2300      	movs	r3, #0
 8009c04:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 8009c06:	68b8      	ldr	r0, [r7, #8]
 8009c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c0a:	3320      	adds	r3, #32
 8009c0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009c0e:	4619      	mov	r1, r3
 8009c10:	f7fd fc4b 	bl	80074aa <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	895b      	ldrh	r3, [r3, #10]
 8009c18:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c1a:	e01c      	b.n	8009c56 <f_mkdir+0x194>
					fs->winsect = dsc++;
 8009c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c1e:	1c5a      	adds	r2, r3, #1
 8009c20:	657a      	str	r2, [r7, #84]	; 0x54
 8009c22:	68ba      	ldr	r2, [r7, #8]
 8009c24:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f7fc fe50 	bl	80068d4 <sync_window>
 8009c34:	4603      	mov	r3, r0
 8009c36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 8009c3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d10d      	bne.n	8009c5e <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	899b      	ldrh	r3, [r3, #12]
 8009c46:	461a      	mov	r2, r3
 8009c48:	2100      	movs	r1, #0
 8009c4a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009c4c:	f7fc fc79 	bl	8006542 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8009c50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c52:	3b01      	subs	r3, #1
 8009c54:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1df      	bne.n	8009c1c <f_mkdir+0x15a>
 8009c5c:	e000      	b.n	8009c60 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 8009c5e:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8009c60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d107      	bne.n	8009c78 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8009c68:	f107 030c 	add.w	r3, r7, #12
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7fd ff8f 	bl	8007b90 <dir_register>
 8009c72:	4603      	mov	r3, r0
 8009c74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 8009c78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d120      	bne.n	8009cc2 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8009c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c82:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8009c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c86:	3316      	adds	r3, #22
 8009c88:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7fc fc0c 	bl	80064a8 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009c94:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7fd fc07 	bl	80074aa <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8009c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c9e:	330b      	adds	r3, #11
 8009ca0:	2210      	movs	r2, #16
 8009ca2:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8009caa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d10e      	bne.n	8009cd0 <f_mkdir+0x20e>
					res = sync_fs(fs);
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7fc fe7f 	bl	80069b8 <sync_fs>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009cc0:	e006      	b.n	8009cd0 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8009cc2:	f107 030c 	add.w	r3, r7, #12
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7fd f8f3 	bl	8006eb6 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8009cd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3760      	adds	r7, #96	; 0x60
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b088      	sub	sp, #32
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	60b9      	str	r1, [r7, #8]
 8009ce6:	607a      	str	r2, [r7, #4]
	int n = 0;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009cf0:	e01b      	b.n	8009d2a <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8009cf2:	f107 0310 	add.w	r3, r7, #16
 8009cf6:	f107 0114 	add.w	r1, r7, #20
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f7ff f99f 	bl	8009040 <f_read>
		if (rc != 1) break;
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d116      	bne.n	8009d36 <f_gets+0x5a>
		c = s[0];
 8009d08:	7d3b      	ldrb	r3, [r7, #20]
 8009d0a:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009d0c:	7dfb      	ldrb	r3, [r7, #23]
 8009d0e:	2b0d      	cmp	r3, #13
 8009d10:	d100      	bne.n	8009d14 <f_gets+0x38>
 8009d12:	e00a      	b.n	8009d2a <f_gets+0x4e>
		*p++ = c;
 8009d14:	69bb      	ldr	r3, [r7, #24]
 8009d16:	1c5a      	adds	r2, r3, #1
 8009d18:	61ba      	str	r2, [r7, #24]
 8009d1a:	7dfa      	ldrb	r2, [r7, #23]
 8009d1c:	701a      	strb	r2, [r3, #0]
		n++;
 8009d1e:	69fb      	ldr	r3, [r7, #28]
 8009d20:	3301      	adds	r3, #1
 8009d22:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8009d24:	7dfb      	ldrb	r3, [r7, #23]
 8009d26:	2b0a      	cmp	r3, #10
 8009d28:	d007      	beq.n	8009d3a <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	3b01      	subs	r3, #1
 8009d2e:	69fa      	ldr	r2, [r7, #28]
 8009d30:	429a      	cmp	r2, r3
 8009d32:	dbde      	blt.n	8009cf2 <f_gets+0x16>
 8009d34:	e002      	b.n	8009d3c <f_gets+0x60>
		if (rc != 1) break;
 8009d36:	bf00      	nop
 8009d38:	e000      	b.n	8009d3c <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8009d3a:	bf00      	nop
	}
	*p = 0;
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d001      	beq.n	8009d4c <f_gets+0x70>
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	e000      	b.n	8009d4e <f_gets+0x72>
 8009d4c:	2300      	movs	r3, #0
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3720      	adds	r7, #32
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}

08009d56 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	b084      	sub	sp, #16
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
 8009d5e:	460b      	mov	r3, r1
 8009d60:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8009d62:	78fb      	ldrb	r3, [r7, #3]
 8009d64:	2b0a      	cmp	r3, #10
 8009d66:	d103      	bne.n	8009d70 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8009d68:	210d      	movs	r1, #13
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f7ff fff3 	bl	8009d56 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	db25      	blt.n	8009dc8 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	1c5a      	adds	r2, r3, #1
 8009d80:	60fa      	str	r2, [r7, #12]
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	4413      	add	r3, r2
 8009d86:	78fa      	ldrb	r2, [r7, #3]
 8009d88:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2b3c      	cmp	r3, #60	; 0x3c
 8009d8e:	dd12      	ble.n	8009db6 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6818      	ldr	r0, [r3, #0]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f103 010c 	add.w	r1, r3, #12
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	f107 0308 	add.w	r3, r7, #8
 8009da0:	f7ff faad 	bl	80092fe <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009da4:	68ba      	ldr	r2, [r7, #8]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d101      	bne.n	8009db0 <putc_bfd+0x5a>
 8009dac:	2300      	movs	r3, #0
 8009dae:	e001      	b.n	8009db4 <putc_bfd+0x5e>
 8009db0:	f04f 33ff 	mov.w	r3, #4294967295
 8009db4:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	68fa      	ldr	r2, [r7, #12]
 8009dba:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	1c5a      	adds	r2, r3, #1
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	609a      	str	r2, [r3, #8]
 8009dc6:	e000      	b.n	8009dca <putc_bfd+0x74>
	if (i < 0) return;
 8009dc8:	bf00      	nop
}
 8009dca:	3710      	adds	r7, #16
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	db16      	blt.n	8009e0e <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6818      	ldr	r0, [r3, #0]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f103 010c 	add.w	r1, r3, #12
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	461a      	mov	r2, r3
 8009df0:	f107 030c 	add.w	r3, r7, #12
 8009df4:	f7ff fa83 	bl	80092fe <f_write>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d107      	bne.n	8009e0e <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d102      	bne.n	8009e0e <putc_flush+0x3e>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	e001      	b.n	8009e12 <putc_flush+0x42>
	return EOF;
 8009e0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8009e1a:	b480      	push	{r7}
 8009e1c:	b083      	sub	sp, #12
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
 8009e22:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	683a      	ldr	r2, [r7, #0]
 8009e28:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	605a      	str	r2, [r3, #4]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	685a      	ldr	r2, [r3, #4]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	609a      	str	r2, [r3, #8]
}
 8009e38:	bf00      	nop
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b096      	sub	sp, #88	; 0x58
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8009e4e:	f107 030c 	add.w	r3, r7, #12
 8009e52:	6839      	ldr	r1, [r7, #0]
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7ff ffe0 	bl	8009e1a <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8009e5a:	e009      	b.n	8009e70 <f_puts+0x2c>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	1c5a      	adds	r2, r3, #1
 8009e60:	607a      	str	r2, [r7, #4]
 8009e62:	781a      	ldrb	r2, [r3, #0]
 8009e64:	f107 030c 	add.w	r3, r7, #12
 8009e68:	4611      	mov	r1, r2
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7ff ff73 	bl	8009d56 <putc_bfd>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d1f1      	bne.n	8009e5c <f_puts+0x18>
	return putc_flush(&pb);
 8009e78:	f107 030c 	add.w	r3, r7, #12
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f7ff ffa7 	bl	8009dd0 <putc_flush>
 8009e82:	4603      	mov	r3, r0
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3758      	adds	r7, #88	; 0x58
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b087      	sub	sp, #28
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	4613      	mov	r3, r2
 8009e98:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009ea2:	4b1f      	ldr	r3, [pc, #124]	; (8009f20 <FATFS_LinkDriverEx+0x94>)
 8009ea4:	7a5b      	ldrb	r3, [r3, #9]
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d131      	bne.n	8009f10 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009eac:	4b1c      	ldr	r3, [pc, #112]	; (8009f20 <FATFS_LinkDriverEx+0x94>)
 8009eae:	7a5b      	ldrb	r3, [r3, #9]
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	4b1a      	ldr	r3, [pc, #104]	; (8009f20 <FATFS_LinkDriverEx+0x94>)
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009eba:	4b19      	ldr	r3, [pc, #100]	; (8009f20 <FATFS_LinkDriverEx+0x94>)
 8009ebc:	7a5b      	ldrb	r3, [r3, #9]
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	4a17      	ldr	r2, [pc, #92]	; (8009f20 <FATFS_LinkDriverEx+0x94>)
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	4413      	add	r3, r2
 8009ec6:	68fa      	ldr	r2, [r7, #12]
 8009ec8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009eca:	4b15      	ldr	r3, [pc, #84]	; (8009f20 <FATFS_LinkDriverEx+0x94>)
 8009ecc:	7a5b      	ldrb	r3, [r3, #9]
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	4b13      	ldr	r3, [pc, #76]	; (8009f20 <FATFS_LinkDriverEx+0x94>)
 8009ed4:	4413      	add	r3, r2
 8009ed6:	79fa      	ldrb	r2, [r7, #7]
 8009ed8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009eda:	4b11      	ldr	r3, [pc, #68]	; (8009f20 <FATFS_LinkDriverEx+0x94>)
 8009edc:	7a5b      	ldrb	r3, [r3, #9]
 8009ede:	b2db      	uxtb	r3, r3
 8009ee0:	1c5a      	adds	r2, r3, #1
 8009ee2:	b2d1      	uxtb	r1, r2
 8009ee4:	4a0e      	ldr	r2, [pc, #56]	; (8009f20 <FATFS_LinkDriverEx+0x94>)
 8009ee6:	7251      	strb	r1, [r2, #9]
 8009ee8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009eea:	7dbb      	ldrb	r3, [r7, #22]
 8009eec:	3330      	adds	r3, #48	; 0x30
 8009eee:	b2da      	uxtb	r2, r3
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	223a      	movs	r2, #58	; 0x3a
 8009efa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	3302      	adds	r3, #2
 8009f00:	222f      	movs	r2, #47	; 0x2f
 8009f02:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	3303      	adds	r3, #3
 8009f08:	2200      	movs	r2, #0
 8009f0a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	371c      	adds	r7, #28
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop
 8009f20:	20003748 	.word	0x20003748

08009f24 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009f2e:	2200      	movs	r2, #0
 8009f30:	6839      	ldr	r1, [r7, #0]
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f7ff ffaa 	bl	8009e8c <FATFS_LinkDriverEx>
 8009f38:	4603      	mov	r3, r0
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3708      	adds	r7, #8
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
	...

08009f44 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	6039      	str	r1, [r7, #0]
 8009f4e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009f50:	88fb      	ldrh	r3, [r7, #6]
 8009f52:	2b7f      	cmp	r3, #127	; 0x7f
 8009f54:	d802      	bhi.n	8009f5c <ff_convert+0x18>
		c = chr;
 8009f56:	88fb      	ldrh	r3, [r7, #6]
 8009f58:	81fb      	strh	r3, [r7, #14]
 8009f5a:	e025      	b.n	8009fa8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d00b      	beq.n	8009f7a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009f62:	88fb      	ldrh	r3, [r7, #6]
 8009f64:	2bff      	cmp	r3, #255	; 0xff
 8009f66:	d805      	bhi.n	8009f74 <ff_convert+0x30>
 8009f68:	88fb      	ldrh	r3, [r7, #6]
 8009f6a:	3b80      	subs	r3, #128	; 0x80
 8009f6c:	4a12      	ldr	r2, [pc, #72]	; (8009fb8 <ff_convert+0x74>)
 8009f6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f72:	e000      	b.n	8009f76 <ff_convert+0x32>
 8009f74:	2300      	movs	r3, #0
 8009f76:	81fb      	strh	r3, [r7, #14]
 8009f78:	e016      	b.n	8009fa8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	81fb      	strh	r3, [r7, #14]
 8009f7e:	e009      	b.n	8009f94 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009f80:	89fb      	ldrh	r3, [r7, #14]
 8009f82:	4a0d      	ldr	r2, [pc, #52]	; (8009fb8 <ff_convert+0x74>)
 8009f84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f88:	88fa      	ldrh	r2, [r7, #6]
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d006      	beq.n	8009f9c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009f8e:	89fb      	ldrh	r3, [r7, #14]
 8009f90:	3301      	adds	r3, #1
 8009f92:	81fb      	strh	r3, [r7, #14]
 8009f94:	89fb      	ldrh	r3, [r7, #14]
 8009f96:	2b7f      	cmp	r3, #127	; 0x7f
 8009f98:	d9f2      	bls.n	8009f80 <ff_convert+0x3c>
 8009f9a:	e000      	b.n	8009f9e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009f9c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009f9e:	89fb      	ldrh	r3, [r7, #14]
 8009fa0:	3380      	adds	r3, #128	; 0x80
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009fa8:	89fb      	ldrh	r3, [r7, #14]
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3714      	adds	r7, #20
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr
 8009fb6:	bf00      	nop
 8009fb8:	0800fbc8 	.word	0x0800fbc8

08009fbc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b087      	sub	sp, #28
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009fc6:	88fb      	ldrh	r3, [r7, #6]
 8009fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fcc:	d201      	bcs.n	8009fd2 <ff_wtoupper+0x16>
 8009fce:	4b3e      	ldr	r3, [pc, #248]	; (800a0c8 <ff_wtoupper+0x10c>)
 8009fd0:	e000      	b.n	8009fd4 <ff_wtoupper+0x18>
 8009fd2:	4b3e      	ldr	r3, [pc, #248]	; (800a0cc <ff_wtoupper+0x110>)
 8009fd4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	1c9a      	adds	r2, r3, #2
 8009fda:	617a      	str	r2, [r7, #20]
 8009fdc:	881b      	ldrh	r3, [r3, #0]
 8009fde:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009fe0:	8a7b      	ldrh	r3, [r7, #18]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d068      	beq.n	800a0b8 <ff_wtoupper+0xfc>
 8009fe6:	88fa      	ldrh	r2, [r7, #6]
 8009fe8:	8a7b      	ldrh	r3, [r7, #18]
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d364      	bcc.n	800a0b8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	1c9a      	adds	r2, r3, #2
 8009ff2:	617a      	str	r2, [r7, #20]
 8009ff4:	881b      	ldrh	r3, [r3, #0]
 8009ff6:	823b      	strh	r3, [r7, #16]
 8009ff8:	8a3b      	ldrh	r3, [r7, #16]
 8009ffa:	0a1b      	lsrs	r3, r3, #8
 8009ffc:	81fb      	strh	r3, [r7, #14]
 8009ffe:	8a3b      	ldrh	r3, [r7, #16]
 800a000:	b2db      	uxtb	r3, r3
 800a002:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a004:	88fa      	ldrh	r2, [r7, #6]
 800a006:	8a79      	ldrh	r1, [r7, #18]
 800a008:	8a3b      	ldrh	r3, [r7, #16]
 800a00a:	440b      	add	r3, r1
 800a00c:	429a      	cmp	r2, r3
 800a00e:	da49      	bge.n	800a0a4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800a010:	89fb      	ldrh	r3, [r7, #14]
 800a012:	2b08      	cmp	r3, #8
 800a014:	d84f      	bhi.n	800a0b6 <ff_wtoupper+0xfa>
 800a016:	a201      	add	r2, pc, #4	; (adr r2, 800a01c <ff_wtoupper+0x60>)
 800a018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a01c:	0800a041 	.word	0x0800a041
 800a020:	0800a053 	.word	0x0800a053
 800a024:	0800a069 	.word	0x0800a069
 800a028:	0800a071 	.word	0x0800a071
 800a02c:	0800a079 	.word	0x0800a079
 800a030:	0800a081 	.word	0x0800a081
 800a034:	0800a089 	.word	0x0800a089
 800a038:	0800a091 	.word	0x0800a091
 800a03c:	0800a099 	.word	0x0800a099
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a040:	88fa      	ldrh	r2, [r7, #6]
 800a042:	8a7b      	ldrh	r3, [r7, #18]
 800a044:	1ad3      	subs	r3, r2, r3
 800a046:	005b      	lsls	r3, r3, #1
 800a048:	697a      	ldr	r2, [r7, #20]
 800a04a:	4413      	add	r3, r2
 800a04c:	881b      	ldrh	r3, [r3, #0]
 800a04e:	80fb      	strh	r3, [r7, #6]
 800a050:	e027      	b.n	800a0a2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a052:	88fa      	ldrh	r2, [r7, #6]
 800a054:	8a7b      	ldrh	r3, [r7, #18]
 800a056:	1ad3      	subs	r3, r2, r3
 800a058:	b29b      	uxth	r3, r3
 800a05a:	f003 0301 	and.w	r3, r3, #1
 800a05e:	b29b      	uxth	r3, r3
 800a060:	88fa      	ldrh	r2, [r7, #6]
 800a062:	1ad3      	subs	r3, r2, r3
 800a064:	80fb      	strh	r3, [r7, #6]
 800a066:	e01c      	b.n	800a0a2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a068:	88fb      	ldrh	r3, [r7, #6]
 800a06a:	3b10      	subs	r3, #16
 800a06c:	80fb      	strh	r3, [r7, #6]
 800a06e:	e018      	b.n	800a0a2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a070:	88fb      	ldrh	r3, [r7, #6]
 800a072:	3b20      	subs	r3, #32
 800a074:	80fb      	strh	r3, [r7, #6]
 800a076:	e014      	b.n	800a0a2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a078:	88fb      	ldrh	r3, [r7, #6]
 800a07a:	3b30      	subs	r3, #48	; 0x30
 800a07c:	80fb      	strh	r3, [r7, #6]
 800a07e:	e010      	b.n	800a0a2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a080:	88fb      	ldrh	r3, [r7, #6]
 800a082:	3b1a      	subs	r3, #26
 800a084:	80fb      	strh	r3, [r7, #6]
 800a086:	e00c      	b.n	800a0a2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a088:	88fb      	ldrh	r3, [r7, #6]
 800a08a:	3308      	adds	r3, #8
 800a08c:	80fb      	strh	r3, [r7, #6]
 800a08e:	e008      	b.n	800a0a2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a090:	88fb      	ldrh	r3, [r7, #6]
 800a092:	3b50      	subs	r3, #80	; 0x50
 800a094:	80fb      	strh	r3, [r7, #6]
 800a096:	e004      	b.n	800a0a2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a098:	88fb      	ldrh	r3, [r7, #6]
 800a09a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800a09e:	80fb      	strh	r3, [r7, #6]
 800a0a0:	bf00      	nop
			}
			break;
 800a0a2:	e008      	b.n	800a0b6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800a0a4:	89fb      	ldrh	r3, [r7, #14]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d195      	bne.n	8009fd6 <ff_wtoupper+0x1a>
 800a0aa:	8a3b      	ldrh	r3, [r7, #16]
 800a0ac:	005b      	lsls	r3, r3, #1
 800a0ae:	697a      	ldr	r2, [r7, #20]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a0b4:	e78f      	b.n	8009fd6 <ff_wtoupper+0x1a>
			break;
 800a0b6:	bf00      	nop
	}

	return chr;
 800a0b8:	88fb      	ldrh	r3, [r7, #6]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	371c      	adds	r7, #28
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	0800fcc8 	.word	0x0800fcc8
 800a0cc:	0800febc 	.word	0x0800febc

0800a0d0 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 800a0d8:	4b22      	ldr	r3, [pc, #136]	; (800a164 <WIZCHIP_READ+0x94>)
 800a0da:	68db      	ldr	r3, [r3, #12]
 800a0dc:	4798      	blx	r3
   WIZCHIP.CS._select();
 800a0de:	4b21      	ldr	r3, [pc, #132]	; (800a164 <WIZCHIP_READ+0x94>)
 800a0e0:	695b      	ldr	r3, [r3, #20]
 800a0e2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800a0e4:	4b1f      	ldr	r3, [pc, #124]	; (800a164 <WIZCHIP_READ+0x94>)
 800a0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d003      	beq.n	800a0f4 <WIZCHIP_READ+0x24>
 800a0ec:	4b1d      	ldr	r3, [pc, #116]	; (800a164 <WIZCHIP_READ+0x94>)
 800a0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d114      	bne.n	800a11e <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800a0f4:	4b1b      	ldr	r3, [pc, #108]	; (800a164 <WIZCHIP_READ+0x94>)
 800a0f6:	6a1b      	ldr	r3, [r3, #32]
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	0c12      	lsrs	r2, r2, #16
 800a0fc:	b2d2      	uxtb	r2, r2
 800a0fe:	4610      	mov	r0, r2
 800a100:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800a102:	4b18      	ldr	r3, [pc, #96]	; (800a164 <WIZCHIP_READ+0x94>)
 800a104:	6a1b      	ldr	r3, [r3, #32]
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	0a12      	lsrs	r2, r2, #8
 800a10a:	b2d2      	uxtb	r2, r2
 800a10c:	4610      	mov	r0, r2
 800a10e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800a110:	4b14      	ldr	r3, [pc, #80]	; (800a164 <WIZCHIP_READ+0x94>)
 800a112:	6a1b      	ldr	r3, [r3, #32]
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	b2d2      	uxtb	r2, r2
 800a118:	4610      	mov	r0, r2
 800a11a:	4798      	blx	r3
 800a11c:	e011      	b.n	800a142 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	0c1b      	lsrs	r3, r3, #16
 800a122:	b2db      	uxtb	r3, r3
 800a124:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	0a1b      	lsrs	r3, r3, #8
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	b2db      	uxtb	r3, r3
 800a132:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800a134:	4b0b      	ldr	r3, [pc, #44]	; (800a164 <WIZCHIP_READ+0x94>)
 800a136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a138:	f107 020c 	add.w	r2, r7, #12
 800a13c:	2103      	movs	r1, #3
 800a13e:	4610      	mov	r0, r2
 800a140:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800a142:	4b08      	ldr	r3, [pc, #32]	; (800a164 <WIZCHIP_READ+0x94>)
 800a144:	69db      	ldr	r3, [r3, #28]
 800a146:	4798      	blx	r3
 800a148:	4603      	mov	r3, r0
 800a14a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 800a14c:	4b05      	ldr	r3, [pc, #20]	; (800a164 <WIZCHIP_READ+0x94>)
 800a14e:	699b      	ldr	r3, [r3, #24]
 800a150:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800a152:	4b04      	ldr	r3, [pc, #16]	; (800a164 <WIZCHIP_READ+0x94>)
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	4798      	blx	r3
   return ret;
 800a158:	7bfb      	ldrb	r3, [r7, #15]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3710      	adds	r7, #16
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	20000080 	.word	0x20000080

0800a168 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	460b      	mov	r3, r1
 800a172:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 800a174:	4b22      	ldr	r3, [pc, #136]	; (800a200 <WIZCHIP_WRITE+0x98>)
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	4798      	blx	r3
   WIZCHIP.CS._select();
 800a17a:	4b21      	ldr	r3, [pc, #132]	; (800a200 <WIZCHIP_WRITE+0x98>)
 800a17c:	695b      	ldr	r3, [r3, #20]
 800a17e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f043 0304 	orr.w	r3, r3, #4
 800a186:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800a188:	4b1d      	ldr	r3, [pc, #116]	; (800a200 <WIZCHIP_WRITE+0x98>)
 800a18a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d119      	bne.n	800a1c4 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800a190:	4b1b      	ldr	r3, [pc, #108]	; (800a200 <WIZCHIP_WRITE+0x98>)
 800a192:	6a1b      	ldr	r3, [r3, #32]
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	0c12      	lsrs	r2, r2, #16
 800a198:	b2d2      	uxtb	r2, r2
 800a19a:	4610      	mov	r0, r2
 800a19c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800a19e:	4b18      	ldr	r3, [pc, #96]	; (800a200 <WIZCHIP_WRITE+0x98>)
 800a1a0:	6a1b      	ldr	r3, [r3, #32]
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	0a12      	lsrs	r2, r2, #8
 800a1a6:	b2d2      	uxtb	r2, r2
 800a1a8:	4610      	mov	r0, r2
 800a1aa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800a1ac:	4b14      	ldr	r3, [pc, #80]	; (800a200 <WIZCHIP_WRITE+0x98>)
 800a1ae:	6a1b      	ldr	r3, [r3, #32]
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	b2d2      	uxtb	r2, r2
 800a1b4:	4610      	mov	r0, r2
 800a1b6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 800a1b8:	4b11      	ldr	r3, [pc, #68]	; (800a200 <WIZCHIP_WRITE+0x98>)
 800a1ba:	6a1b      	ldr	r3, [r3, #32]
 800a1bc:	78fa      	ldrb	r2, [r7, #3]
 800a1be:	4610      	mov	r0, r2
 800a1c0:	4798      	blx	r3
 800a1c2:	e013      	b.n	800a1ec <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	0c1b      	lsrs	r3, r3, #16
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	0a1b      	lsrs	r3, r3, #8
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800a1da:	78fb      	ldrb	r3, [r7, #3]
 800a1dc:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800a1de:	4b08      	ldr	r3, [pc, #32]	; (800a200 <WIZCHIP_WRITE+0x98>)
 800a1e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e2:	f107 020c 	add.w	r2, r7, #12
 800a1e6:	2104      	movs	r1, #4
 800a1e8:	4610      	mov	r0, r2
 800a1ea:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800a1ec:	4b04      	ldr	r3, [pc, #16]	; (800a200 <WIZCHIP_WRITE+0x98>)
 800a1ee:	699b      	ldr	r3, [r3, #24]
 800a1f0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800a1f2:	4b03      	ldr	r3, [pc, #12]	; (800a200 <WIZCHIP_WRITE+0x98>)
 800a1f4:	691b      	ldr	r3, [r3, #16]
 800a1f6:	4798      	blx	r3
}
 800a1f8:	bf00      	nop
 800a1fa:	3710      	adds	r7, #16
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	20000080 	.word	0x20000080

0800a204 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800a204:	b590      	push	{r4, r7, lr}
 800a206:	b087      	sub	sp, #28
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	4613      	mov	r3, r2
 800a210:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800a212:	4b2b      	ldr	r3, [pc, #172]	; (800a2c0 <WIZCHIP_READ_BUF+0xbc>)
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	4798      	blx	r3
   WIZCHIP.CS._select();
 800a218:	4b29      	ldr	r3, [pc, #164]	; (800a2c0 <WIZCHIP_READ_BUF+0xbc>)
 800a21a:	695b      	ldr	r3, [r3, #20]
 800a21c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800a21e:	4b28      	ldr	r3, [pc, #160]	; (800a2c0 <WIZCHIP_READ_BUF+0xbc>)
 800a220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a222:	2b00      	cmp	r3, #0
 800a224:	d003      	beq.n	800a22e <WIZCHIP_READ_BUF+0x2a>
 800a226:	4b26      	ldr	r3, [pc, #152]	; (800a2c0 <WIZCHIP_READ_BUF+0xbc>)
 800a228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d126      	bne.n	800a27c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800a22e:	4b24      	ldr	r3, [pc, #144]	; (800a2c0 <WIZCHIP_READ_BUF+0xbc>)
 800a230:	6a1b      	ldr	r3, [r3, #32]
 800a232:	68fa      	ldr	r2, [r7, #12]
 800a234:	0c12      	lsrs	r2, r2, #16
 800a236:	b2d2      	uxtb	r2, r2
 800a238:	4610      	mov	r0, r2
 800a23a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800a23c:	4b20      	ldr	r3, [pc, #128]	; (800a2c0 <WIZCHIP_READ_BUF+0xbc>)
 800a23e:	6a1b      	ldr	r3, [r3, #32]
 800a240:	68fa      	ldr	r2, [r7, #12]
 800a242:	0a12      	lsrs	r2, r2, #8
 800a244:	b2d2      	uxtb	r2, r2
 800a246:	4610      	mov	r0, r2
 800a248:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800a24a:	4b1d      	ldr	r3, [pc, #116]	; (800a2c0 <WIZCHIP_READ_BUF+0xbc>)
 800a24c:	6a1b      	ldr	r3, [r3, #32]
 800a24e:	68fa      	ldr	r2, [r7, #12]
 800a250:	b2d2      	uxtb	r2, r2
 800a252:	4610      	mov	r0, r2
 800a254:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800a256:	2300      	movs	r3, #0
 800a258:	82fb      	strh	r3, [r7, #22]
 800a25a:	e00a      	b.n	800a272 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 800a25c:	4b18      	ldr	r3, [pc, #96]	; (800a2c0 <WIZCHIP_READ_BUF+0xbc>)
 800a25e:	69db      	ldr	r3, [r3, #28]
 800a260:	8afa      	ldrh	r2, [r7, #22]
 800a262:	68b9      	ldr	r1, [r7, #8]
 800a264:	188c      	adds	r4, r1, r2
 800a266:	4798      	blx	r3
 800a268:	4603      	mov	r3, r0
 800a26a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 800a26c:	8afb      	ldrh	r3, [r7, #22]
 800a26e:	3301      	adds	r3, #1
 800a270:	82fb      	strh	r3, [r7, #22]
 800a272:	8afa      	ldrh	r2, [r7, #22]
 800a274:	88fb      	ldrh	r3, [r7, #6]
 800a276:	429a      	cmp	r2, r3
 800a278:	d3f0      	bcc.n	800a25c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800a27a:	e017      	b.n	800a2ac <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	0c1b      	lsrs	r3, r3, #16
 800a280:	b2db      	uxtb	r3, r3
 800a282:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	0a1b      	lsrs	r3, r3, #8
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800a292:	4b0b      	ldr	r3, [pc, #44]	; (800a2c0 <WIZCHIP_READ_BUF+0xbc>)
 800a294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a296:	f107 0210 	add.w	r2, r7, #16
 800a29a:	2103      	movs	r1, #3
 800a29c:	4610      	mov	r0, r2
 800a29e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 800a2a0:	4b07      	ldr	r3, [pc, #28]	; (800a2c0 <WIZCHIP_READ_BUF+0xbc>)
 800a2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a4:	88fa      	ldrh	r2, [r7, #6]
 800a2a6:	4611      	mov	r1, r2
 800a2a8:	68b8      	ldr	r0, [r7, #8]
 800a2aa:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800a2ac:	4b04      	ldr	r3, [pc, #16]	; (800a2c0 <WIZCHIP_READ_BUF+0xbc>)
 800a2ae:	699b      	ldr	r3, [r3, #24]
 800a2b0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800a2b2:	4b03      	ldr	r3, [pc, #12]	; (800a2c0 <WIZCHIP_READ_BUF+0xbc>)
 800a2b4:	691b      	ldr	r3, [r3, #16]
 800a2b6:	4798      	blx	r3
}
 800a2b8:	bf00      	nop
 800a2ba:	371c      	adds	r7, #28
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd90      	pop	{r4, r7, pc}
 800a2c0:	20000080 	.word	0x20000080

0800a2c4 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b086      	sub	sp, #24
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	4613      	mov	r3, r2
 800a2d0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800a2d2:	4b2b      	ldr	r3, [pc, #172]	; (800a380 <WIZCHIP_WRITE_BUF+0xbc>)
 800a2d4:	68db      	ldr	r3, [r3, #12]
 800a2d6:	4798      	blx	r3
   WIZCHIP.CS._select();
 800a2d8:	4b29      	ldr	r3, [pc, #164]	; (800a380 <WIZCHIP_WRITE_BUF+0xbc>)
 800a2da:	695b      	ldr	r3, [r3, #20]
 800a2dc:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f043 0304 	orr.w	r3, r3, #4
 800a2e4:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800a2e6:	4b26      	ldr	r3, [pc, #152]	; (800a380 <WIZCHIP_WRITE_BUF+0xbc>)
 800a2e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d126      	bne.n	800a33c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800a2ee:	4b24      	ldr	r3, [pc, #144]	; (800a380 <WIZCHIP_WRITE_BUF+0xbc>)
 800a2f0:	6a1b      	ldr	r3, [r3, #32]
 800a2f2:	68fa      	ldr	r2, [r7, #12]
 800a2f4:	0c12      	lsrs	r2, r2, #16
 800a2f6:	b2d2      	uxtb	r2, r2
 800a2f8:	4610      	mov	r0, r2
 800a2fa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800a2fc:	4b20      	ldr	r3, [pc, #128]	; (800a380 <WIZCHIP_WRITE_BUF+0xbc>)
 800a2fe:	6a1b      	ldr	r3, [r3, #32]
 800a300:	68fa      	ldr	r2, [r7, #12]
 800a302:	0a12      	lsrs	r2, r2, #8
 800a304:	b2d2      	uxtb	r2, r2
 800a306:	4610      	mov	r0, r2
 800a308:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800a30a:	4b1d      	ldr	r3, [pc, #116]	; (800a380 <WIZCHIP_WRITE_BUF+0xbc>)
 800a30c:	6a1b      	ldr	r3, [r3, #32]
 800a30e:	68fa      	ldr	r2, [r7, #12]
 800a310:	b2d2      	uxtb	r2, r2
 800a312:	4610      	mov	r0, r2
 800a314:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800a316:	2300      	movs	r3, #0
 800a318:	82fb      	strh	r3, [r7, #22]
 800a31a:	e00a      	b.n	800a332 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 800a31c:	4b18      	ldr	r3, [pc, #96]	; (800a380 <WIZCHIP_WRITE_BUF+0xbc>)
 800a31e:	6a1b      	ldr	r3, [r3, #32]
 800a320:	8afa      	ldrh	r2, [r7, #22]
 800a322:	68b9      	ldr	r1, [r7, #8]
 800a324:	440a      	add	r2, r1
 800a326:	7812      	ldrb	r2, [r2, #0]
 800a328:	4610      	mov	r0, r2
 800a32a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800a32c:	8afb      	ldrh	r3, [r7, #22]
 800a32e:	3301      	adds	r3, #1
 800a330:	82fb      	strh	r3, [r7, #22]
 800a332:	8afa      	ldrh	r2, [r7, #22]
 800a334:	88fb      	ldrh	r3, [r7, #6]
 800a336:	429a      	cmp	r2, r3
 800a338:	d3f0      	bcc.n	800a31c <WIZCHIP_WRITE_BUF+0x58>
 800a33a:	e017      	b.n	800a36c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	0c1b      	lsrs	r3, r3, #16
 800a340:	b2db      	uxtb	r3, r3
 800a342:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	0a1b      	lsrs	r3, r3, #8
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800a352:	4b0b      	ldr	r3, [pc, #44]	; (800a380 <WIZCHIP_WRITE_BUF+0xbc>)
 800a354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a356:	f107 0210 	add.w	r2, r7, #16
 800a35a:	2103      	movs	r1, #3
 800a35c:	4610      	mov	r0, r2
 800a35e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 800a360:	4b07      	ldr	r3, [pc, #28]	; (800a380 <WIZCHIP_WRITE_BUF+0xbc>)
 800a362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a364:	88fa      	ldrh	r2, [r7, #6]
 800a366:	4611      	mov	r1, r2
 800a368:	68b8      	ldr	r0, [r7, #8]
 800a36a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800a36c:	4b04      	ldr	r3, [pc, #16]	; (800a380 <WIZCHIP_WRITE_BUF+0xbc>)
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800a372:	4b03      	ldr	r3, [pc, #12]	; (800a380 <WIZCHIP_WRITE_BUF+0xbc>)
 800a374:	691b      	ldr	r3, [r3, #16]
 800a376:	4798      	blx	r3
}
 800a378:	bf00      	nop
 800a37a:	3718      	adds	r7, #24
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	20000080 	.word	0x20000080

0800a384 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 800a384:	b590      	push	{r4, r7, lr}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
 800a38a:	4603      	mov	r3, r0
 800a38c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800a38e:	2300      	movs	r3, #0
 800a390:	81fb      	strh	r3, [r7, #14]
 800a392:	2300      	movs	r3, #0
 800a394:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800a396:	79fb      	ldrb	r3, [r7, #7]
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	3301      	adds	r3, #1
 800a39c:	00db      	lsls	r3, r3, #3
 800a39e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7ff fe94 	bl	800a0d0 <WIZCHIP_READ>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800a3ac:	89bb      	ldrh	r3, [r7, #12]
 800a3ae:	021b      	lsls	r3, r3, #8
 800a3b0:	b29c      	uxth	r4, r3
 800a3b2:	79fb      	ldrb	r3, [r7, #7]
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	00db      	lsls	r3, r3, #3
 800a3ba:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7ff fe86 	bl	800a0d0 <WIZCHIP_READ>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	4423      	add	r3, r4
 800a3ca:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800a3cc:	89bb      	ldrh	r3, [r7, #12]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d01a      	beq.n	800a408 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800a3d2:	79fb      	ldrb	r3, [r7, #7]
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	00db      	lsls	r3, r3, #3
 800a3da:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7ff fe76 	bl	800a0d0 <WIZCHIP_READ>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800a3e8:	89fb      	ldrh	r3, [r7, #14]
 800a3ea:	021b      	lsls	r3, r3, #8
 800a3ec:	b29c      	uxth	r4, r3
 800a3ee:	79fb      	ldrb	r3, [r7, #7]
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	00db      	lsls	r3, r3, #3
 800a3f6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7ff fe68 	bl	800a0d0 <WIZCHIP_READ>
 800a400:	4603      	mov	r3, r0
 800a402:	b29b      	uxth	r3, r3
 800a404:	4423      	add	r3, r4
 800a406:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800a408:	89fa      	ldrh	r2, [r7, #14]
 800a40a:	89bb      	ldrh	r3, [r7, #12]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d1c2      	bne.n	800a396 <getSn_TX_FSR+0x12>
   return val;
 800a410:	89fb      	ldrh	r3, [r7, #14]
}
 800a412:	4618      	mov	r0, r3
 800a414:	3714      	adds	r7, #20
 800a416:	46bd      	mov	sp, r7
 800a418:	bd90      	pop	{r4, r7, pc}

0800a41a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800a41a:	b590      	push	{r4, r7, lr}
 800a41c:	b085      	sub	sp, #20
 800a41e:	af00      	add	r7, sp, #0
 800a420:	4603      	mov	r3, r0
 800a422:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800a424:	2300      	movs	r3, #0
 800a426:	81fb      	strh	r3, [r7, #14]
 800a428:	2300      	movs	r3, #0
 800a42a:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 800a42c:	79fb      	ldrb	r3, [r7, #7]
 800a42e:	009b      	lsls	r3, r3, #2
 800a430:	3301      	adds	r3, #1
 800a432:	00db      	lsls	r3, r3, #3
 800a434:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 800a438:	4618      	mov	r0, r3
 800a43a:	f7ff fe49 	bl	800a0d0 <WIZCHIP_READ>
 800a43e:	4603      	mov	r3, r0
 800a440:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800a442:	89bb      	ldrh	r3, [r7, #12]
 800a444:	021b      	lsls	r3, r3, #8
 800a446:	b29c      	uxth	r4, r3
 800a448:	79fb      	ldrb	r3, [r7, #7]
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	3301      	adds	r3, #1
 800a44e:	00db      	lsls	r3, r3, #3
 800a450:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800a454:	4618      	mov	r0, r3
 800a456:	f7ff fe3b 	bl	800a0d0 <WIZCHIP_READ>
 800a45a:	4603      	mov	r3, r0
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	4423      	add	r3, r4
 800a460:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800a462:	89bb      	ldrh	r3, [r7, #12]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d01a      	beq.n	800a49e <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 800a468:	79fb      	ldrb	r3, [r7, #7]
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	3301      	adds	r3, #1
 800a46e:	00db      	lsls	r3, r3, #3
 800a470:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 800a474:	4618      	mov	r0, r3
 800a476:	f7ff fe2b 	bl	800a0d0 <WIZCHIP_READ>
 800a47a:	4603      	mov	r3, r0
 800a47c:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800a47e:	89fb      	ldrh	r3, [r7, #14]
 800a480:	021b      	lsls	r3, r3, #8
 800a482:	b29c      	uxth	r4, r3
 800a484:	79fb      	ldrb	r3, [r7, #7]
 800a486:	009b      	lsls	r3, r3, #2
 800a488:	3301      	adds	r3, #1
 800a48a:	00db      	lsls	r3, r3, #3
 800a48c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800a490:	4618      	mov	r0, r3
 800a492:	f7ff fe1d 	bl	800a0d0 <WIZCHIP_READ>
 800a496:	4603      	mov	r3, r0
 800a498:	b29b      	uxth	r3, r3
 800a49a:	4423      	add	r3, r4
 800a49c:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800a49e:	89fa      	ldrh	r2, [r7, #14]
 800a4a0:	89bb      	ldrh	r3, [r7, #12]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d1c2      	bne.n	800a42c <getSn_RX_RSR+0x12>
   return val;
 800a4a6:	89fb      	ldrh	r3, [r7, #14]
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3714      	adds	r7, #20
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd90      	pop	{r4, r7, pc}

0800a4b0 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800a4b0:	b590      	push	{r4, r7, lr}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	6039      	str	r1, [r7, #0]
 800a4ba:	71fb      	strb	r3, [r7, #7]
 800a4bc:	4613      	mov	r3, r2
 800a4be:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 800a4c8:	88bb      	ldrh	r3, [r7, #4]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d048      	beq.n	800a560 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 800a4ce:	79fb      	ldrb	r3, [r7, #7]
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	00db      	lsls	r3, r3, #3
 800a4d6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7ff fdf8 	bl	800a0d0 <WIZCHIP_READ>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	021b      	lsls	r3, r3, #8
 800a4e6:	b29c      	uxth	r4, r3
 800a4e8:	79fb      	ldrb	r3, [r7, #7]
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	00db      	lsls	r3, r3, #3
 800a4f0:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7ff fdeb 	bl	800a0d0 <WIZCHIP_READ>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	4423      	add	r3, r4
 800a500:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800a502:	89fb      	ldrh	r3, [r7, #14]
 800a504:	021b      	lsls	r3, r3, #8
 800a506:	79fa      	ldrb	r2, [r7, #7]
 800a508:	0092      	lsls	r2, r2, #2
 800a50a:	3202      	adds	r2, #2
 800a50c:	00d2      	lsls	r2, r2, #3
 800a50e:	4413      	add	r3, r2
 800a510:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 800a512:	88bb      	ldrh	r3, [r7, #4]
 800a514:	461a      	mov	r2, r3
 800a516:	6839      	ldr	r1, [r7, #0]
 800a518:	68b8      	ldr	r0, [r7, #8]
 800a51a:	f7ff fed3 	bl	800a2c4 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800a51e:	89fa      	ldrh	r2, [r7, #14]
 800a520:	88bb      	ldrh	r3, [r7, #4]
 800a522:	4413      	add	r3, r2
 800a524:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800a526:	79fb      	ldrb	r3, [r7, #7]
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	3301      	adds	r3, #1
 800a52c:	00db      	lsls	r3, r3, #3
 800a52e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800a532:	461a      	mov	r2, r3
 800a534:	89fb      	ldrh	r3, [r7, #14]
 800a536:	0a1b      	lsrs	r3, r3, #8
 800a538:	b29b      	uxth	r3, r3
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	4619      	mov	r1, r3
 800a53e:	4610      	mov	r0, r2
 800a540:	f7ff fe12 	bl	800a168 <WIZCHIP_WRITE>
 800a544:	79fb      	ldrb	r3, [r7, #7]
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	3301      	adds	r3, #1
 800a54a:	00db      	lsls	r3, r3, #3
 800a54c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800a550:	461a      	mov	r2, r3
 800a552:	89fb      	ldrh	r3, [r7, #14]
 800a554:	b2db      	uxtb	r3, r3
 800a556:	4619      	mov	r1, r3
 800a558:	4610      	mov	r0, r2
 800a55a:	f7ff fe05 	bl	800a168 <WIZCHIP_WRITE>
 800a55e:	e000      	b.n	800a562 <wiz_send_data+0xb2>
   if(len == 0)  return;
 800a560:	bf00      	nop
}
 800a562:	3714      	adds	r7, #20
 800a564:	46bd      	mov	sp, r7
 800a566:	bd90      	pop	{r4, r7, pc}

0800a568 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800a568:	b590      	push	{r4, r7, lr}
 800a56a:	b085      	sub	sp, #20
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	4603      	mov	r3, r0
 800a570:	6039      	str	r1, [r7, #0]
 800a572:	71fb      	strb	r3, [r7, #7]
 800a574:	4613      	mov	r3, r2
 800a576:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800a578:	2300      	movs	r3, #0
 800a57a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800a57c:	2300      	movs	r3, #0
 800a57e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 800a580:	88bb      	ldrh	r3, [r7, #4]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d048      	beq.n	800a618 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 800a586:	79fb      	ldrb	r3, [r7, #7]
 800a588:	009b      	lsls	r3, r3, #2
 800a58a:	3301      	adds	r3, #1
 800a58c:	00db      	lsls	r3, r3, #3
 800a58e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800a592:	4618      	mov	r0, r3
 800a594:	f7ff fd9c 	bl	800a0d0 <WIZCHIP_READ>
 800a598:	4603      	mov	r3, r0
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	021b      	lsls	r3, r3, #8
 800a59e:	b29c      	uxth	r4, r3
 800a5a0:	79fb      	ldrb	r3, [r7, #7]
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	00db      	lsls	r3, r3, #3
 800a5a8:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7ff fd8f 	bl	800a0d0 <WIZCHIP_READ>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	4423      	add	r3, r4
 800a5b8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800a5ba:	89fb      	ldrh	r3, [r7, #14]
 800a5bc:	021b      	lsls	r3, r3, #8
 800a5be:	79fa      	ldrb	r2, [r7, #7]
 800a5c0:	0092      	lsls	r2, r2, #2
 800a5c2:	3203      	adds	r2, #3
 800a5c4:	00d2      	lsls	r2, r2, #3
 800a5c6:	4413      	add	r3, r2
 800a5c8:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800a5ca:	88bb      	ldrh	r3, [r7, #4]
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	6839      	ldr	r1, [r7, #0]
 800a5d0:	68b8      	ldr	r0, [r7, #8]
 800a5d2:	f7ff fe17 	bl	800a204 <WIZCHIP_READ_BUF>
   ptr += len;
 800a5d6:	89fa      	ldrh	r2, [r7, #14]
 800a5d8:	88bb      	ldrh	r3, [r7, #4]
 800a5da:	4413      	add	r3, r2
 800a5dc:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800a5de:	79fb      	ldrb	r3, [r7, #7]
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	00db      	lsls	r3, r3, #3
 800a5e6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	89fb      	ldrh	r3, [r7, #14]
 800a5ee:	0a1b      	lsrs	r3, r3, #8
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	4610      	mov	r0, r2
 800a5f8:	f7ff fdb6 	bl	800a168 <WIZCHIP_WRITE>
 800a5fc:	79fb      	ldrb	r3, [r7, #7]
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	3301      	adds	r3, #1
 800a602:	00db      	lsls	r3, r3, #3
 800a604:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800a608:	461a      	mov	r2, r3
 800a60a:	89fb      	ldrh	r3, [r7, #14]
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	4619      	mov	r1, r3
 800a610:	4610      	mov	r0, r2
 800a612:	f7ff fda9 	bl	800a168 <WIZCHIP_WRITE>
 800a616:	e000      	b.n	800a61a <wiz_recv_data+0xb2>
   if(len == 0) return;
 800a618:	bf00      	nop
}
 800a61a:	3714      	adds	r7, #20
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd90      	pop	{r4, r7, pc}

0800a620 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 800a620:	b590      	push	{r4, r7, lr}
 800a622:	b085      	sub	sp, #20
 800a624:	af00      	add	r7, sp, #0
 800a626:	4603      	mov	r3, r0
 800a628:	460a      	mov	r2, r1
 800a62a:	71fb      	strb	r3, [r7, #7]
 800a62c:	4613      	mov	r3, r2
 800a62e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800a630:	2300      	movs	r3, #0
 800a632:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 800a634:	79fb      	ldrb	r3, [r7, #7]
 800a636:	009b      	lsls	r3, r3, #2
 800a638:	3301      	adds	r3, #1
 800a63a:	00db      	lsls	r3, r3, #3
 800a63c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800a640:	4618      	mov	r0, r3
 800a642:	f7ff fd45 	bl	800a0d0 <WIZCHIP_READ>
 800a646:	4603      	mov	r3, r0
 800a648:	b29b      	uxth	r3, r3
 800a64a:	021b      	lsls	r3, r3, #8
 800a64c:	b29c      	uxth	r4, r3
 800a64e:	79fb      	ldrb	r3, [r7, #7]
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	3301      	adds	r3, #1
 800a654:	00db      	lsls	r3, r3, #3
 800a656:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800a65a:	4618      	mov	r0, r3
 800a65c:	f7ff fd38 	bl	800a0d0 <WIZCHIP_READ>
 800a660:	4603      	mov	r3, r0
 800a662:	b29b      	uxth	r3, r3
 800a664:	4423      	add	r3, r4
 800a666:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 800a668:	89fa      	ldrh	r2, [r7, #14]
 800a66a:	88bb      	ldrh	r3, [r7, #4]
 800a66c:	4413      	add	r3, r2
 800a66e:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 800a670:	79fb      	ldrb	r3, [r7, #7]
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	3301      	adds	r3, #1
 800a676:	00db      	lsls	r3, r3, #3
 800a678:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800a67c:	461a      	mov	r2, r3
 800a67e:	89fb      	ldrh	r3, [r7, #14]
 800a680:	0a1b      	lsrs	r3, r3, #8
 800a682:	b29b      	uxth	r3, r3
 800a684:	b2db      	uxtb	r3, r3
 800a686:	4619      	mov	r1, r3
 800a688:	4610      	mov	r0, r2
 800a68a:	f7ff fd6d 	bl	800a168 <WIZCHIP_WRITE>
 800a68e:	79fb      	ldrb	r3, [r7, #7]
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	3301      	adds	r3, #1
 800a694:	00db      	lsls	r3, r3, #3
 800a696:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800a69a:	461a      	mov	r2, r3
 800a69c:	89fb      	ldrh	r3, [r7, #14]
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	4610      	mov	r0, r2
 800a6a4:	f7ff fd60 	bl	800a168 <WIZCHIP_WRITE>
}
 800a6a8:	bf00      	nop
 800a6aa:	3714      	adds	r7, #20
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd90      	pop	{r4, r7, pc}

0800a6b0 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 800a6b0:	b590      	push	{r4, r7, lr}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	4604      	mov	r4, r0
 800a6b8:	4608      	mov	r0, r1
 800a6ba:	4611      	mov	r1, r2
 800a6bc:	461a      	mov	r2, r3
 800a6be:	4623      	mov	r3, r4
 800a6c0:	71fb      	strb	r3, [r7, #7]
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	71bb      	strb	r3, [r7, #6]
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	80bb      	strh	r3, [r7, #4]
 800a6ca:	4613      	mov	r3, r2
 800a6cc:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800a6ce:	79fb      	ldrb	r3, [r7, #7]
 800a6d0:	2b08      	cmp	r3, #8
 800a6d2:	d902      	bls.n	800a6da <socket+0x2a>
 800a6d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a6d8:	e0f2      	b.n	800a8c0 <socket+0x210>
	switch(protocol)
 800a6da:	79bb      	ldrb	r3, [r7, #6]
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d005      	beq.n	800a6ec <socket+0x3c>
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	dd11      	ble.n	800a708 <socket+0x58>
 800a6e4:	3b02      	subs	r3, #2
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	d80e      	bhi.n	800a708 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800a6ea:	e011      	b.n	800a710 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 800a6ec:	f107 030c 	add.w	r3, r7, #12
 800a6f0:	2204      	movs	r2, #4
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800a6f8:	f7ff fd84 	bl	800a204 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d105      	bne.n	800a70e <socket+0x5e>
 800a702:	f06f 0302 	mvn.w	r3, #2
 800a706:	e0db      	b.n	800a8c0 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 800a708:	f06f 0304 	mvn.w	r3, #4
 800a70c:	e0d8      	b.n	800a8c0 <socket+0x210>
	    break;
 800a70e:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800a710:	78fb      	ldrb	r3, [r7, #3]
 800a712:	f003 0304 	and.w	r3, r3, #4
 800a716:	2b00      	cmp	r3, #0
 800a718:	d002      	beq.n	800a720 <socket+0x70>
 800a71a:	f06f 0305 	mvn.w	r3, #5
 800a71e:	e0cf      	b.n	800a8c0 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 800a720:	78fb      	ldrb	r3, [r7, #3]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d025      	beq.n	800a772 <socket+0xc2>
	{
   	switch(protocol)
 800a726:	79bb      	ldrb	r3, [r7, #6]
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d002      	beq.n	800a732 <socket+0x82>
 800a72c:	2b02      	cmp	r3, #2
 800a72e:	d008      	beq.n	800a742 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800a730:	e024      	b.n	800a77c <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800a732:	78fb      	ldrb	r3, [r7, #3]
 800a734:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d11c      	bne.n	800a776 <socket+0xc6>
 800a73c:	f06f 0305 	mvn.w	r3, #5
 800a740:	e0be      	b.n	800a8c0 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 800a742:	78fb      	ldrb	r3, [r7, #3]
 800a744:	f003 0320 	and.w	r3, r3, #32
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d006      	beq.n	800a75a <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800a74c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a750:	2b00      	cmp	r3, #0
 800a752:	db02      	blt.n	800a75a <socket+0xaa>
 800a754:	f06f 0305 	mvn.w	r3, #5
 800a758:	e0b2      	b.n	800a8c0 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 800a75a:	78fb      	ldrb	r3, [r7, #3]
 800a75c:	f003 0310 	and.w	r3, r3, #16
 800a760:	2b00      	cmp	r3, #0
 800a762:	d00a      	beq.n	800a77a <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 800a764:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	db06      	blt.n	800a77a <socket+0xca>
 800a76c:	f06f 0305 	mvn.w	r3, #5
 800a770:	e0a6      	b.n	800a8c0 <socket+0x210>
   	}
   }
 800a772:	bf00      	nop
 800a774:	e002      	b.n	800a77c <socket+0xcc>
   	      break;
 800a776:	bf00      	nop
 800a778:	e000      	b.n	800a77c <socket+0xcc>
   	      break;
 800a77a:	bf00      	nop
	close(sn);
 800a77c:	79fb      	ldrb	r3, [r7, #7]
 800a77e:	4618      	mov	r0, r3
 800a780:	f000 f8ac 	bl	800a8dc <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 800a784:	79fb      	ldrb	r3, [r7, #7]
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	3301      	adds	r3, #1
 800a78a:	00db      	lsls	r3, r3, #3
 800a78c:	4618      	mov	r0, r3
 800a78e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a792:	f023 030f 	bic.w	r3, r3, #15
 800a796:	b25a      	sxtb	r2, r3
 800a798:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a79c:	4313      	orrs	r3, r2
 800a79e:	b25b      	sxtb	r3, r3
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	f7ff fce0 	bl	800a168 <WIZCHIP_WRITE>
    #endif
	if(!port)
 800a7a8:	88bb      	ldrh	r3, [r7, #4]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d110      	bne.n	800a7d0 <socket+0x120>
	{
	   port = sock_any_port++;
 800a7ae:	4b46      	ldr	r3, [pc, #280]	; (800a8c8 <socket+0x218>)
 800a7b0:	881b      	ldrh	r3, [r3, #0]
 800a7b2:	1c5a      	adds	r2, r3, #1
 800a7b4:	b291      	uxth	r1, r2
 800a7b6:	4a44      	ldr	r2, [pc, #272]	; (800a8c8 <socket+0x218>)
 800a7b8:	8011      	strh	r1, [r2, #0]
 800a7ba:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 800a7bc:	4b42      	ldr	r3, [pc, #264]	; (800a8c8 <socket+0x218>)
 800a7be:	881b      	ldrh	r3, [r3, #0]
 800a7c0:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d103      	bne.n	800a7d0 <socket+0x120>
 800a7c8:	4b3f      	ldr	r3, [pc, #252]	; (800a8c8 <socket+0x218>)
 800a7ca:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800a7ce:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800a7d0:	79fb      	ldrb	r3, [r7, #7]
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	00db      	lsls	r3, r3, #3
 800a7d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a7dc:	461a      	mov	r2, r3
 800a7de:	88bb      	ldrh	r3, [r7, #4]
 800a7e0:	0a1b      	lsrs	r3, r3, #8
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	4610      	mov	r0, r2
 800a7ea:	f7ff fcbd 	bl	800a168 <WIZCHIP_WRITE>
 800a7ee:	79fb      	ldrb	r3, [r7, #7]
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	00db      	lsls	r3, r3, #3
 800a7f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	88bb      	ldrh	r3, [r7, #4]
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	4619      	mov	r1, r3
 800a802:	4610      	mov	r0, r2
 800a804:	f7ff fcb0 	bl	800a168 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 800a808:	79fb      	ldrb	r3, [r7, #7]
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	3301      	adds	r3, #1
 800a80e:	00db      	lsls	r3, r3, #3
 800a810:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a814:	2101      	movs	r1, #1
 800a816:	4618      	mov	r0, r3
 800a818:	f7ff fca6 	bl	800a168 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800a81c:	bf00      	nop
 800a81e:	79fb      	ldrb	r3, [r7, #7]
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	3301      	adds	r3, #1
 800a824:	00db      	lsls	r3, r3, #3
 800a826:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7ff fc50 	bl	800a0d0 <WIZCHIP_READ>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d1f3      	bne.n	800a81e <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800a836:	79fb      	ldrb	r3, [r7, #7]
 800a838:	2201      	movs	r2, #1
 800a83a:	fa02 f303 	lsl.w	r3, r2, r3
 800a83e:	b21b      	sxth	r3, r3
 800a840:	43db      	mvns	r3, r3
 800a842:	b21a      	sxth	r2, r3
 800a844:	4b21      	ldr	r3, [pc, #132]	; (800a8cc <socket+0x21c>)
 800a846:	881b      	ldrh	r3, [r3, #0]
 800a848:	b21b      	sxth	r3, r3
 800a84a:	4013      	ands	r3, r2
 800a84c:	b21b      	sxth	r3, r3
 800a84e:	b29a      	uxth	r2, r3
 800a850:	4b1e      	ldr	r3, [pc, #120]	; (800a8cc <socket+0x21c>)
 800a852:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800a854:	78fb      	ldrb	r3, [r7, #3]
 800a856:	f003 0201 	and.w	r2, r3, #1
 800a85a:	79fb      	ldrb	r3, [r7, #7]
 800a85c:	fa02 f303 	lsl.w	r3, r2, r3
 800a860:	b21a      	sxth	r2, r3
 800a862:	4b1a      	ldr	r3, [pc, #104]	; (800a8cc <socket+0x21c>)
 800a864:	881b      	ldrh	r3, [r3, #0]
 800a866:	b21b      	sxth	r3, r3
 800a868:	4313      	orrs	r3, r2
 800a86a:	b21b      	sxth	r3, r3
 800a86c:	b29a      	uxth	r2, r3
 800a86e:	4b17      	ldr	r3, [pc, #92]	; (800a8cc <socket+0x21c>)
 800a870:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 800a872:	79fb      	ldrb	r3, [r7, #7]
 800a874:	2201      	movs	r2, #1
 800a876:	fa02 f303 	lsl.w	r3, r2, r3
 800a87a:	b21b      	sxth	r3, r3
 800a87c:	43db      	mvns	r3, r3
 800a87e:	b21a      	sxth	r2, r3
 800a880:	4b13      	ldr	r3, [pc, #76]	; (800a8d0 <socket+0x220>)
 800a882:	881b      	ldrh	r3, [r3, #0]
 800a884:	b21b      	sxth	r3, r3
 800a886:	4013      	ands	r3, r2
 800a888:	b21b      	sxth	r3, r3
 800a88a:	b29a      	uxth	r2, r3
 800a88c:	4b10      	ldr	r3, [pc, #64]	; (800a8d0 <socket+0x220>)
 800a88e:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800a890:	79fb      	ldrb	r3, [r7, #7]
 800a892:	4a10      	ldr	r2, [pc, #64]	; (800a8d4 <socket+0x224>)
 800a894:	2100      	movs	r1, #0
 800a896:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 800a89a:	79fb      	ldrb	r3, [r7, #7]
 800a89c:	4a0e      	ldr	r2, [pc, #56]	; (800a8d8 <socket+0x228>)
 800a89e:	2100      	movs	r1, #0
 800a8a0:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800a8a2:	bf00      	nop
 800a8a4:	79fb      	ldrb	r3, [r7, #7]
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	00db      	lsls	r3, r3, #3
 800a8ac:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7ff fc0d 	bl	800a0d0 <WIZCHIP_READ>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d0f3      	beq.n	800a8a4 <socket+0x1f4>
   return (int8_t)sn;
 800a8bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3714      	adds	r7, #20
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd90      	pop	{r4, r7, pc}
 800a8c8:	2000007c 	.word	0x2000007c
 800a8cc:	20003754 	.word	0x20003754
 800a8d0:	20003756 	.word	0x20003756
 800a8d4:	20003758 	.word	0x20003758
 800a8d8:	20003768 	.word	0x20003768

0800a8dc <close>:

int8_t close(uint8_t sn)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800a8e6:	79fb      	ldrb	r3, [r7, #7]
 800a8e8:	2b08      	cmp	r3, #8
 800a8ea:	d902      	bls.n	800a8f2 <close+0x16>
 800a8ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a8f0:	e055      	b.n	800a99e <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800a8f2:	79fb      	ldrb	r3, [r7, #7]
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	00db      	lsls	r3, r3, #3
 800a8fa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a8fe:	2110      	movs	r1, #16
 800a900:	4618      	mov	r0, r3
 800a902:	f7ff fc31 	bl	800a168 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 800a906:	bf00      	nop
 800a908:	79fb      	ldrb	r3, [r7, #7]
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	3301      	adds	r3, #1
 800a90e:	00db      	lsls	r3, r3, #3
 800a910:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a914:	4618      	mov	r0, r3
 800a916:	f7ff fbdb 	bl	800a0d0 <WIZCHIP_READ>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d1f3      	bne.n	800a908 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 800a920:	79fb      	ldrb	r3, [r7, #7]
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	3301      	adds	r3, #1
 800a926:	00db      	lsls	r3, r3, #3
 800a928:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a92c:	211f      	movs	r1, #31
 800a92e:	4618      	mov	r0, r3
 800a930:	f7ff fc1a 	bl	800a168 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 800a934:	79fb      	ldrb	r3, [r7, #7]
 800a936:	2201      	movs	r2, #1
 800a938:	fa02 f303 	lsl.w	r3, r2, r3
 800a93c:	b21b      	sxth	r3, r3
 800a93e:	43db      	mvns	r3, r3
 800a940:	b21a      	sxth	r2, r3
 800a942:	4b19      	ldr	r3, [pc, #100]	; (800a9a8 <close+0xcc>)
 800a944:	881b      	ldrh	r3, [r3, #0]
 800a946:	b21b      	sxth	r3, r3
 800a948:	4013      	ands	r3, r2
 800a94a:	b21b      	sxth	r3, r3
 800a94c:	b29a      	uxth	r2, r3
 800a94e:	4b16      	ldr	r3, [pc, #88]	; (800a9a8 <close+0xcc>)
 800a950:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800a952:	79fb      	ldrb	r3, [r7, #7]
 800a954:	2201      	movs	r2, #1
 800a956:	fa02 f303 	lsl.w	r3, r2, r3
 800a95a:	b21b      	sxth	r3, r3
 800a95c:	43db      	mvns	r3, r3
 800a95e:	b21a      	sxth	r2, r3
 800a960:	4b12      	ldr	r3, [pc, #72]	; (800a9ac <close+0xd0>)
 800a962:	881b      	ldrh	r3, [r3, #0]
 800a964:	b21b      	sxth	r3, r3
 800a966:	4013      	ands	r3, r2
 800a968:	b21b      	sxth	r3, r3
 800a96a:	b29a      	uxth	r2, r3
 800a96c:	4b0f      	ldr	r3, [pc, #60]	; (800a9ac <close+0xd0>)
 800a96e:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 800a970:	79fb      	ldrb	r3, [r7, #7]
 800a972:	4a0f      	ldr	r2, [pc, #60]	; (800a9b0 <close+0xd4>)
 800a974:	2100      	movs	r1, #0
 800a976:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800a97a:	79fb      	ldrb	r3, [r7, #7]
 800a97c:	4a0d      	ldr	r2, [pc, #52]	; (800a9b4 <close+0xd8>)
 800a97e:	2100      	movs	r1, #0
 800a980:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800a982:	bf00      	nop
 800a984:	79fb      	ldrb	r3, [r7, #7]
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	3301      	adds	r3, #1
 800a98a:	00db      	lsls	r3, r3, #3
 800a98c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a990:	4618      	mov	r0, r3
 800a992:	f7ff fb9d 	bl	800a0d0 <WIZCHIP_READ>
 800a996:	4603      	mov	r3, r0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d1f3      	bne.n	800a984 <close+0xa8>
	return SOCK_OK;
 800a99c:	2301      	movs	r3, #1
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3708      	adds	r7, #8
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	20003754 	.word	0x20003754
 800a9ac:	20003756 	.word	0x20003756
 800a9b0:	20003758 	.word	0x20003758
 800a9b4:	20003768 	.word	0x20003768

0800a9b8 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	4603      	mov	r3, r0
 800a9c0:	6039      	str	r1, [r7, #0]
 800a9c2:	71fb      	strb	r3, [r7, #7]
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 800a9c8:	79fb      	ldrb	r3, [r7, #7]
 800a9ca:	2b08      	cmp	r3, #8
 800a9cc:	d902      	bls.n	800a9d4 <connect+0x1c>
 800a9ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a9d2:	e0c6      	b.n	800ab62 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800a9d4:	79fb      	ldrb	r3, [r7, #7]
 800a9d6:	009b      	lsls	r3, r3, #2
 800a9d8:	3301      	adds	r3, #1
 800a9da:	00db      	lsls	r3, r3, #3
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f7ff fb77 	bl	800a0d0 <WIZCHIP_READ>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	f003 030f 	and.w	r3, r3, #15
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d002      	beq.n	800a9f2 <connect+0x3a>
 800a9ec:	f06f 0304 	mvn.w	r3, #4
 800a9f0:	e0b7      	b.n	800ab62 <connect+0x1aa>
   CHECK_SOCKINIT();
 800a9f2:	79fb      	ldrb	r3, [r7, #7]
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	00db      	lsls	r3, r3, #3
 800a9fa:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7ff fb66 	bl	800a0d0 <WIZCHIP_READ>
 800aa04:	4603      	mov	r3, r0
 800aa06:	2b13      	cmp	r3, #19
 800aa08:	d002      	beq.n	800aa10 <connect+0x58>
 800aa0a:	f06f 0302 	mvn.w	r3, #2
 800aa0e:	e0a8      	b.n	800ab62 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	021b      	lsls	r3, r3, #8
 800aa1a:	683a      	ldr	r2, [r7, #0]
 800aa1c:	3201      	adds	r2, #1
 800aa1e:	7812      	ldrb	r2, [r2, #0]
 800aa20:	4413      	add	r3, r2
 800aa22:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	021b      	lsls	r3, r3, #8
 800aa28:	683a      	ldr	r2, [r7, #0]
 800aa2a:	3202      	adds	r2, #2
 800aa2c:	7812      	ldrb	r2, [r2, #0]
 800aa2e:	4413      	add	r3, r2
 800aa30:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	021b      	lsls	r3, r3, #8
 800aa36:	683a      	ldr	r2, [r7, #0]
 800aa38:	3203      	adds	r2, #3
 800aa3a:	7812      	ldrb	r2, [r2, #0]
 800aa3c:	4413      	add	r3, r2
 800aa3e:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa46:	d002      	beq.n	800aa4e <connect+0x96>
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d102      	bne.n	800aa54 <connect+0x9c>
 800aa4e:	f06f 030b 	mvn.w	r3, #11
 800aa52:	e086      	b.n	800ab62 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 800aa54:	88bb      	ldrh	r3, [r7, #4]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d102      	bne.n	800aa60 <connect+0xa8>
 800aa5a:	f06f 030a 	mvn.w	r3, #10
 800aa5e:	e080      	b.n	800ab62 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 800aa60:	79fb      	ldrb	r3, [r7, #7]
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	3301      	adds	r3, #1
 800aa66:	00db      	lsls	r3, r3, #3
 800aa68:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800aa6c:	2204      	movs	r2, #4
 800aa6e:	6839      	ldr	r1, [r7, #0]
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7ff fc27 	bl	800a2c4 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 800aa76:	79fb      	ldrb	r3, [r7, #7]
 800aa78:	009b      	lsls	r3, r3, #2
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	00db      	lsls	r3, r3, #3
 800aa7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa82:	461a      	mov	r2, r3
 800aa84:	88bb      	ldrh	r3, [r7, #4]
 800aa86:	0a1b      	lsrs	r3, r3, #8
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	4610      	mov	r0, r2
 800aa90:	f7ff fb6a 	bl	800a168 <WIZCHIP_WRITE>
 800aa94:	79fb      	ldrb	r3, [r7, #7]
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	3301      	adds	r3, #1
 800aa9a:	00db      	lsls	r3, r3, #3
 800aa9c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	88bb      	ldrh	r3, [r7, #4]
 800aaa4:	b2db      	uxtb	r3, r3
 800aaa6:	4619      	mov	r1, r3
 800aaa8:	4610      	mov	r0, r2
 800aaaa:	f7ff fb5d 	bl	800a168 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 800aaae:	79fb      	ldrb	r3, [r7, #7]
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	3301      	adds	r3, #1
 800aab4:	00db      	lsls	r3, r3, #3
 800aab6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800aaba:	2104      	movs	r1, #4
 800aabc:	4618      	mov	r0, r3
 800aabe:	f7ff fb53 	bl	800a168 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800aac2:	bf00      	nop
 800aac4:	79fb      	ldrb	r3, [r7, #7]
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	3301      	adds	r3, #1
 800aaca:	00db      	lsls	r3, r3, #3
 800aacc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7ff fafd 	bl	800a0d0 <WIZCHIP_READ>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d1f3      	bne.n	800aac4 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800aadc:	4b23      	ldr	r3, [pc, #140]	; (800ab6c <connect+0x1b4>)
 800aade:	881b      	ldrh	r3, [r3, #0]
 800aae0:	461a      	mov	r2, r3
 800aae2:	79fb      	ldrb	r3, [r7, #7]
 800aae4:	fa42 f303 	asr.w	r3, r2, r3
 800aae8:	f003 0301 	and.w	r3, r3, #1
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d02b      	beq.n	800ab48 <connect+0x190>
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	e036      	b.n	800ab62 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 800aaf4:	79fb      	ldrb	r3, [r7, #7]
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	3301      	adds	r3, #1
 800aafa:	00db      	lsls	r3, r3, #3
 800aafc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7ff fae5 	bl	800a0d0 <WIZCHIP_READ>
 800ab06:	4603      	mov	r3, r0
 800ab08:	f003 0308 	and.w	r3, r3, #8
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00c      	beq.n	800ab2a <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 800ab10:	79fb      	ldrb	r3, [r7, #7]
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	3301      	adds	r3, #1
 800ab16:	00db      	lsls	r3, r3, #3
 800ab18:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ab1c:	2108      	movs	r1, #8
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7ff fb22 	bl	800a168 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 800ab24:	f06f 030c 	mvn.w	r3, #12
 800ab28:	e01b      	b.n	800ab62 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 800ab2a:	79fb      	ldrb	r3, [r7, #7]
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	3301      	adds	r3, #1
 800ab30:	00db      	lsls	r3, r3, #3
 800ab32:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7ff faca 	bl	800a0d0 <WIZCHIP_READ>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d102      	bne.n	800ab48 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 800ab42:	f06f 0303 	mvn.w	r3, #3
 800ab46:	e00c      	b.n	800ab62 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 800ab48:	79fb      	ldrb	r3, [r7, #7]
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	00db      	lsls	r3, r3, #3
 800ab50:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7ff fabb 	bl	800a0d0 <WIZCHIP_READ>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b17      	cmp	r3, #23
 800ab5e:	d1c9      	bne.n	800aaf4 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 800ab60:	2301      	movs	r3, #1
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3710      	adds	r7, #16
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	20003754 	.word	0x20003754

0800ab70 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b082      	sub	sp, #8
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	4603      	mov	r3, r0
 800ab78:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800ab7a:	79fb      	ldrb	r3, [r7, #7]
 800ab7c:	2b08      	cmp	r3, #8
 800ab7e:	d902      	bls.n	800ab86 <disconnect+0x16>
 800ab80:	f04f 33ff 	mov.w	r3, #4294967295
 800ab84:	e062      	b.n	800ac4c <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800ab86:	79fb      	ldrb	r3, [r7, #7]
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	00db      	lsls	r3, r3, #3
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7ff fa9e 	bl	800a0d0 <WIZCHIP_READ>
 800ab94:	4603      	mov	r3, r0
 800ab96:	f003 030f 	and.w	r3, r3, #15
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d002      	beq.n	800aba4 <disconnect+0x34>
 800ab9e:	f06f 0304 	mvn.w	r3, #4
 800aba2:	e053      	b.n	800ac4c <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 800aba4:	79fb      	ldrb	r3, [r7, #7]
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	3301      	adds	r3, #1
 800abaa:	00db      	lsls	r3, r3, #3
 800abac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800abb0:	2108      	movs	r1, #8
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7ff fad8 	bl	800a168 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800abb8:	bf00      	nop
 800abba:	79fb      	ldrb	r3, [r7, #7]
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	3301      	adds	r3, #1
 800abc0:	00db      	lsls	r3, r3, #3
 800abc2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7ff fa82 	bl	800a0d0 <WIZCHIP_READ>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d1f3      	bne.n	800abba <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 800abd2:	79fb      	ldrb	r3, [r7, #7]
 800abd4:	2201      	movs	r2, #1
 800abd6:	fa02 f303 	lsl.w	r3, r2, r3
 800abda:	b21b      	sxth	r3, r3
 800abdc:	43db      	mvns	r3, r3
 800abde:	b21a      	sxth	r2, r3
 800abe0:	4b1c      	ldr	r3, [pc, #112]	; (800ac54 <disconnect+0xe4>)
 800abe2:	881b      	ldrh	r3, [r3, #0]
 800abe4:	b21b      	sxth	r3, r3
 800abe6:	4013      	ands	r3, r2
 800abe8:	b21b      	sxth	r3, r3
 800abea:	b29a      	uxth	r2, r3
 800abec:	4b19      	ldr	r3, [pc, #100]	; (800ac54 <disconnect+0xe4>)
 800abee:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800abf0:	4b19      	ldr	r3, [pc, #100]	; (800ac58 <disconnect+0xe8>)
 800abf2:	881b      	ldrh	r3, [r3, #0]
 800abf4:	461a      	mov	r2, r3
 800abf6:	79fb      	ldrb	r3, [r7, #7]
 800abf8:	fa42 f303 	asr.w	r3, r2, r3
 800abfc:	f003 0301 	and.w	r3, r3, #1
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d016      	beq.n	800ac32 <disconnect+0xc2>
 800ac04:	2300      	movs	r3, #0
 800ac06:	e021      	b.n	800ac4c <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 800ac08:	79fb      	ldrb	r3, [r7, #7]
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	00db      	lsls	r3, r3, #3
 800ac10:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ac14:	4618      	mov	r0, r3
 800ac16:	f7ff fa5b 	bl	800a0d0 <WIZCHIP_READ>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	f003 0308 	and.w	r3, r3, #8
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d006      	beq.n	800ac32 <disconnect+0xc2>
	   {
	      close(sn);
 800ac24:	79fb      	ldrb	r3, [r7, #7]
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7ff fe58 	bl	800a8dc <close>
	      return SOCKERR_TIMEOUT;
 800ac2c:	f06f 030c 	mvn.w	r3, #12
 800ac30:	e00c      	b.n	800ac4c <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 800ac32:	79fb      	ldrb	r3, [r7, #7]
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	3301      	adds	r3, #1
 800ac38:	00db      	lsls	r3, r3, #3
 800ac3a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7ff fa46 	bl	800a0d0 <WIZCHIP_READ>
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d1de      	bne.n	800ac08 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 800ac4a:	2301      	movs	r3, #1
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3708      	adds	r7, #8
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	20003756 	.word	0x20003756
 800ac58:	20003754 	.word	0x20003754

0800ac5c <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	4603      	mov	r3, r0
 800ac64:	6039      	str	r1, [r7, #0]
 800ac66:	71fb      	strb	r3, [r7, #7]
 800ac68:	4613      	mov	r3, r2
 800ac6a:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 800ac70:	2300      	movs	r3, #0
 800ac72:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 800ac74:	79fb      	ldrb	r3, [r7, #7]
 800ac76:	2b08      	cmp	r3, #8
 800ac78:	d902      	bls.n	800ac80 <send+0x24>
 800ac7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac7e:	e0de      	b.n	800ae3e <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800ac80:	79fb      	ldrb	r3, [r7, #7]
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	3301      	adds	r3, #1
 800ac86:	00db      	lsls	r3, r3, #3
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f7ff fa21 	bl	800a0d0 <WIZCHIP_READ>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	f003 030f 	and.w	r3, r3, #15
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d002      	beq.n	800ac9e <send+0x42>
 800ac98:	f06f 0304 	mvn.w	r3, #4
 800ac9c:	e0cf      	b.n	800ae3e <send+0x1e2>
   CHECK_SOCKDATA();
 800ac9e:	88bb      	ldrh	r3, [r7, #4]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d102      	bne.n	800acaa <send+0x4e>
 800aca4:	f06f 030d 	mvn.w	r3, #13
 800aca8:	e0c9      	b.n	800ae3e <send+0x1e2>
   tmp = getSn_SR(sn);
 800acaa:	79fb      	ldrb	r3, [r7, #7]
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	3301      	adds	r3, #1
 800acb0:	00db      	lsls	r3, r3, #3
 800acb2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7ff fa0a 	bl	800a0d0 <WIZCHIP_READ>
 800acbc:	4603      	mov	r3, r0
 800acbe:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800acc0:	7bfb      	ldrb	r3, [r7, #15]
 800acc2:	2b17      	cmp	r3, #23
 800acc4:	d005      	beq.n	800acd2 <send+0x76>
 800acc6:	7bfb      	ldrb	r3, [r7, #15]
 800acc8:	2b1c      	cmp	r3, #28
 800acca:	d002      	beq.n	800acd2 <send+0x76>
 800accc:	f06f 0306 	mvn.w	r3, #6
 800acd0:	e0b5      	b.n	800ae3e <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 800acd2:	4b5d      	ldr	r3, [pc, #372]	; (800ae48 <send+0x1ec>)
 800acd4:	881b      	ldrh	r3, [r3, #0]
 800acd6:	461a      	mov	r2, r3
 800acd8:	79fb      	ldrb	r3, [r7, #7]
 800acda:	fa42 f303 	asr.w	r3, r2, r3
 800acde:	f003 0301 	and.w	r3, r3, #1
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d039      	beq.n	800ad5a <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800ace6:	79fb      	ldrb	r3, [r7, #7]
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	3301      	adds	r3, #1
 800acec:	00db      	lsls	r3, r3, #3
 800acee:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7ff f9ec 	bl	800a0d0 <WIZCHIP_READ>
 800acf8:	4603      	mov	r3, r0
 800acfa:	f003 031f 	and.w	r3, r3, #31
 800acfe:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 800ad00:	7bfb      	ldrb	r3, [r7, #15]
 800ad02:	f003 0310 	and.w	r3, r3, #16
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d019      	beq.n	800ad3e <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800ad0a:	79fb      	ldrb	r3, [r7, #7]
 800ad0c:	009b      	lsls	r3, r3, #2
 800ad0e:	3301      	adds	r3, #1
 800ad10:	00db      	lsls	r3, r3, #3
 800ad12:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ad16:	2110      	movs	r1, #16
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7ff fa25 	bl	800a168 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 800ad1e:	79fb      	ldrb	r3, [r7, #7]
 800ad20:	2201      	movs	r2, #1
 800ad22:	fa02 f303 	lsl.w	r3, r2, r3
 800ad26:	b21b      	sxth	r3, r3
 800ad28:	43db      	mvns	r3, r3
 800ad2a:	b21a      	sxth	r2, r3
 800ad2c:	4b46      	ldr	r3, [pc, #280]	; (800ae48 <send+0x1ec>)
 800ad2e:	881b      	ldrh	r3, [r3, #0]
 800ad30:	b21b      	sxth	r3, r3
 800ad32:	4013      	ands	r3, r2
 800ad34:	b21b      	sxth	r3, r3
 800ad36:	b29a      	uxth	r2, r3
 800ad38:	4b43      	ldr	r3, [pc, #268]	; (800ae48 <send+0x1ec>)
 800ad3a:	801a      	strh	r2, [r3, #0]
 800ad3c:	e00d      	b.n	800ad5a <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 800ad3e:	7bfb      	ldrb	r3, [r7, #15]
 800ad40:	f003 0308 	and.w	r3, r3, #8
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d006      	beq.n	800ad56 <send+0xfa>
      {
         close(sn);
 800ad48:	79fb      	ldrb	r3, [r7, #7]
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f7ff fdc6 	bl	800a8dc <close>
         return SOCKERR_TIMEOUT;
 800ad50:	f06f 030c 	mvn.w	r3, #12
 800ad54:	e073      	b.n	800ae3e <send+0x1e2>
      }
      else return SOCK_BUSY;
 800ad56:	2300      	movs	r3, #0
 800ad58:	e071      	b.n	800ae3e <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 800ad5a:	79fb      	ldrb	r3, [r7, #7]
 800ad5c:	009b      	lsls	r3, r3, #2
 800ad5e:	3301      	adds	r3, #1
 800ad60:	00db      	lsls	r3, r3, #3
 800ad62:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7ff f9b2 	bl	800a0d0 <WIZCHIP_READ>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	b29b      	uxth	r3, r3
 800ad70:	029b      	lsls	r3, r3, #10
 800ad72:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800ad74:	88ba      	ldrh	r2, [r7, #4]
 800ad76:	89bb      	ldrh	r3, [r7, #12]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d901      	bls.n	800ad80 <send+0x124>
 800ad7c:	89bb      	ldrh	r3, [r7, #12]
 800ad7e:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800ad80:	79fb      	ldrb	r3, [r7, #7]
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7ff fafe 	bl	800a384 <getSn_TX_FSR>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 800ad8c:	79fb      	ldrb	r3, [r7, #7]
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	3301      	adds	r3, #1
 800ad92:	00db      	lsls	r3, r3, #3
 800ad94:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f7ff f999 	bl	800a0d0 <WIZCHIP_READ>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800ada2:	7bfb      	ldrb	r3, [r7, #15]
 800ada4:	2b17      	cmp	r3, #23
 800ada6:	d009      	beq.n	800adbc <send+0x160>
 800ada8:	7bfb      	ldrb	r3, [r7, #15]
 800adaa:	2b1c      	cmp	r3, #28
 800adac:	d006      	beq.n	800adbc <send+0x160>
      {
         close(sn);
 800adae:	79fb      	ldrb	r3, [r7, #7]
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7ff fd93 	bl	800a8dc <close>
         return SOCKERR_SOCKSTATUS;
 800adb6:	f06f 0306 	mvn.w	r3, #6
 800adba:	e040      	b.n	800ae3e <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800adbc:	4b23      	ldr	r3, [pc, #140]	; (800ae4c <send+0x1f0>)
 800adbe:	881b      	ldrh	r3, [r3, #0]
 800adc0:	461a      	mov	r2, r3
 800adc2:	79fb      	ldrb	r3, [r7, #7]
 800adc4:	fa42 f303 	asr.w	r3, r2, r3
 800adc8:	f003 0301 	and.w	r3, r3, #1
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d005      	beq.n	800addc <send+0x180>
 800add0:	88ba      	ldrh	r2, [r7, #4]
 800add2:	89bb      	ldrh	r3, [r7, #12]
 800add4:	429a      	cmp	r2, r3
 800add6:	d901      	bls.n	800addc <send+0x180>
 800add8:	2300      	movs	r3, #0
 800adda:	e030      	b.n	800ae3e <send+0x1e2>
      if(len <= freesize) break;
 800addc:	88ba      	ldrh	r2, [r7, #4]
 800adde:	89bb      	ldrh	r3, [r7, #12]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d900      	bls.n	800ade6 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 800ade4:	e7cc      	b.n	800ad80 <send+0x124>
      if(len <= freesize) break;
 800ade6:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 800ade8:	88ba      	ldrh	r2, [r7, #4]
 800adea:	79fb      	ldrb	r3, [r7, #7]
 800adec:	6839      	ldr	r1, [r7, #0]
 800adee:	4618      	mov	r0, r3
 800adf0:	f7ff fb5e 	bl	800a4b0 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 800adf4:	79fb      	ldrb	r3, [r7, #7]
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	3301      	adds	r3, #1
 800adfa:	00db      	lsls	r3, r3, #3
 800adfc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ae00:	2120      	movs	r1, #32
 800ae02:	4618      	mov	r0, r3
 800ae04:	f7ff f9b0 	bl	800a168 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 800ae08:	bf00      	nop
 800ae0a:	79fb      	ldrb	r3, [r7, #7]
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	3301      	adds	r3, #1
 800ae10:	00db      	lsls	r3, r3, #3
 800ae12:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7ff f95a 	bl	800a0d0 <WIZCHIP_READ>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d1f3      	bne.n	800ae0a <send+0x1ae>
   sock_is_sending |= (1 << sn);
 800ae22:	79fb      	ldrb	r3, [r7, #7]
 800ae24:	2201      	movs	r2, #1
 800ae26:	fa02 f303 	lsl.w	r3, r2, r3
 800ae2a:	b21a      	sxth	r2, r3
 800ae2c:	4b06      	ldr	r3, [pc, #24]	; (800ae48 <send+0x1ec>)
 800ae2e:	881b      	ldrh	r3, [r3, #0]
 800ae30:	b21b      	sxth	r3, r3
 800ae32:	4313      	orrs	r3, r2
 800ae34:	b21b      	sxth	r3, r3
 800ae36:	b29a      	uxth	r2, r3
 800ae38:	4b03      	ldr	r3, [pc, #12]	; (800ae48 <send+0x1ec>)
 800ae3a:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800ae3c:	88bb      	ldrh	r3, [r7, #4]
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3710      	adds	r7, #16
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	20003756 	.word	0x20003756
 800ae4c:	20003754 	.word	0x20003754

0800ae50 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800ae50:	b590      	push	{r4, r7, lr}
 800ae52:	b085      	sub	sp, #20
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	4603      	mov	r3, r0
 800ae58:	6039      	str	r1, [r7, #0]
 800ae5a:	71fb      	strb	r3, [r7, #7]
 800ae5c:	4613      	mov	r3, r2
 800ae5e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 800ae60:	2300      	movs	r3, #0
 800ae62:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 800ae64:	2300      	movs	r3, #0
 800ae66:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 800ae68:	79fb      	ldrb	r3, [r7, #7]
 800ae6a:	2b08      	cmp	r3, #8
 800ae6c:	d902      	bls.n	800ae74 <recv+0x24>
 800ae6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ae72:	e09c      	b.n	800afae <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800ae74:	79fb      	ldrb	r3, [r7, #7]
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	3301      	adds	r3, #1
 800ae7a:	00db      	lsls	r3, r3, #3
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f7ff f927 	bl	800a0d0 <WIZCHIP_READ>
 800ae82:	4603      	mov	r3, r0
 800ae84:	f003 030f 	and.w	r3, r3, #15
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	d002      	beq.n	800ae92 <recv+0x42>
 800ae8c:	f06f 0304 	mvn.w	r3, #4
 800ae90:	e08d      	b.n	800afae <recv+0x15e>
   CHECK_SOCKDATA();
 800ae92:	88bb      	ldrh	r3, [r7, #4]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d102      	bne.n	800ae9e <recv+0x4e>
 800ae98:	f06f 030d 	mvn.w	r3, #13
 800ae9c:	e087      	b.n	800afae <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 800ae9e:	79fb      	ldrb	r3, [r7, #7]
 800aea0:	009b      	lsls	r3, r3, #2
 800aea2:	3301      	adds	r3, #1
 800aea4:	00db      	lsls	r3, r3, #3
 800aea6:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7ff f910 	bl	800a0d0 <WIZCHIP_READ>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	029b      	lsls	r3, r3, #10
 800aeb6:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 800aeb8:	89ba      	ldrh	r2, [r7, #12]
 800aeba:	88bb      	ldrh	r3, [r7, #4]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d201      	bcs.n	800aec4 <recv+0x74>
 800aec0:	89bb      	ldrh	r3, [r7, #12]
 800aec2:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 800aec4:	79fb      	ldrb	r3, [r7, #7]
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7ff faa7 	bl	800a41a <getSn_RX_RSR>
 800aecc:	4603      	mov	r3, r0
 800aece:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 800aed0:	79fb      	ldrb	r3, [r7, #7]
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	3301      	adds	r3, #1
 800aed6:	00db      	lsls	r3, r3, #3
 800aed8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800aedc:	4618      	mov	r0, r3
 800aede:	f7ff f8f7 	bl	800a0d0 <WIZCHIP_READ>
 800aee2:	4603      	mov	r3, r0
 800aee4:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 800aee6:	7bfb      	ldrb	r3, [r7, #15]
 800aee8:	2b17      	cmp	r3, #23
 800aeea:	d026      	beq.n	800af3a <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 800aeec:	7bfb      	ldrb	r3, [r7, #15]
 800aeee:	2b1c      	cmp	r3, #28
 800aef0:	d11c      	bne.n	800af2c <recv+0xdc>
            {
               if(recvsize != 0) break;
 800aef2:	89bb      	ldrh	r3, [r7, #12]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d133      	bne.n	800af60 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 800aef8:	79fb      	ldrb	r3, [r7, #7]
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7ff fa42 	bl	800a384 <getSn_TX_FSR>
 800af00:	4603      	mov	r3, r0
 800af02:	461c      	mov	r4, r3
 800af04:	79fb      	ldrb	r3, [r7, #7]
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	3301      	adds	r3, #1
 800af0a:	00db      	lsls	r3, r3, #3
 800af0c:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800af10:	4618      	mov	r0, r3
 800af12:	f7ff f8dd 	bl	800a0d0 <WIZCHIP_READ>
 800af16:	4603      	mov	r3, r0
 800af18:	029b      	lsls	r3, r3, #10
 800af1a:	429c      	cmp	r4, r3
 800af1c:	d10d      	bne.n	800af3a <recv+0xea>
               {
                  close(sn);
 800af1e:	79fb      	ldrb	r3, [r7, #7]
 800af20:	4618      	mov	r0, r3
 800af22:	f7ff fcdb 	bl	800a8dc <close>
                  return SOCKERR_SOCKSTATUS;
 800af26:	f06f 0306 	mvn.w	r3, #6
 800af2a:	e040      	b.n	800afae <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 800af2c:	79fb      	ldrb	r3, [r7, #7]
 800af2e:	4618      	mov	r0, r3
 800af30:	f7ff fcd4 	bl	800a8dc <close>
               return SOCKERR_SOCKSTATUS;
 800af34:	f06f 0306 	mvn.w	r3, #6
 800af38:	e039      	b.n	800afae <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 800af3a:	4b1f      	ldr	r3, [pc, #124]	; (800afb8 <recv+0x168>)
 800af3c:	881b      	ldrh	r3, [r3, #0]
 800af3e:	461a      	mov	r2, r3
 800af40:	79fb      	ldrb	r3, [r7, #7]
 800af42:	fa42 f303 	asr.w	r3, r2, r3
 800af46:	f003 0301 	and.w	r3, r3, #1
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d004      	beq.n	800af58 <recv+0x108>
 800af4e:	89bb      	ldrh	r3, [r7, #12]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d101      	bne.n	800af58 <recv+0x108>
 800af54:	2300      	movs	r3, #0
 800af56:	e02a      	b.n	800afae <recv+0x15e>
         if(recvsize != 0) break;
 800af58:	89bb      	ldrh	r3, [r7, #12]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d102      	bne.n	800af64 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 800af5e:	e7b1      	b.n	800aec4 <recv+0x74>
               if(recvsize != 0) break;
 800af60:	bf00      	nop
 800af62:	e000      	b.n	800af66 <recv+0x116>
         if(recvsize != 0) break;
 800af64:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 800af66:	89ba      	ldrh	r2, [r7, #12]
 800af68:	88bb      	ldrh	r3, [r7, #4]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d201      	bcs.n	800af72 <recv+0x122>
 800af6e:	89bb      	ldrh	r3, [r7, #12]
 800af70:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 800af72:	88ba      	ldrh	r2, [r7, #4]
 800af74:	79fb      	ldrb	r3, [r7, #7]
 800af76:	6839      	ldr	r1, [r7, #0]
 800af78:	4618      	mov	r0, r3
 800af7a:	f7ff faf5 	bl	800a568 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800af7e:	79fb      	ldrb	r3, [r7, #7]
 800af80:	009b      	lsls	r3, r3, #2
 800af82:	3301      	adds	r3, #1
 800af84:	00db      	lsls	r3, r3, #3
 800af86:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800af8a:	2140      	movs	r1, #64	; 0x40
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7ff f8eb 	bl	800a168 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800af92:	bf00      	nop
 800af94:	79fb      	ldrb	r3, [r7, #7]
 800af96:	009b      	lsls	r3, r3, #2
 800af98:	3301      	adds	r3, #1
 800af9a:	00db      	lsls	r3, r3, #3
 800af9c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7ff f895 	bl	800a0d0 <WIZCHIP_READ>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d1f3      	bne.n	800af94 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800afac:	88bb      	ldrh	r3, [r7, #4]
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3714      	adds	r7, #20
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd90      	pop	{r4, r7, pc}
 800afb6:	bf00      	nop
 800afb8:	20003754 	.word	0x20003754

0800afbc <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b086      	sub	sp, #24
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	60b9      	str	r1, [r7, #8]
 800afc4:	607b      	str	r3, [r7, #4]
 800afc6:	4603      	mov	r3, r0
 800afc8:	73fb      	strb	r3, [r7, #15]
 800afca:	4613      	mov	r3, r2
 800afcc:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 800afce:	2300      	movs	r3, #0
 800afd0:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 800afd2:	2300      	movs	r3, #0
 800afd4:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 800afd6:	7bfb      	ldrb	r3, [r7, #15]
 800afd8:	2b08      	cmp	r3, #8
 800afda:	d902      	bls.n	800afe2 <sendto+0x26>
 800afdc:	f04f 33ff 	mov.w	r3, #4294967295
 800afe0:	e11b      	b.n	800b21a <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 800afe2:	7bfb      	ldrb	r3, [r7, #15]
 800afe4:	009b      	lsls	r3, r3, #2
 800afe6:	3301      	adds	r3, #1
 800afe8:	00db      	lsls	r3, r3, #3
 800afea:	4618      	mov	r0, r3
 800afec:	f7ff f870 	bl	800a0d0 <WIZCHIP_READ>
 800aff0:	4603      	mov	r3, r0
 800aff2:	f003 030f 	and.w	r3, r3, #15
 800aff6:	3b02      	subs	r3, #2
 800aff8:	2b02      	cmp	r3, #2
 800affa:	d902      	bls.n	800b002 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 800affc:	f06f 0304 	mvn.w	r3, #4
 800b000:	e10b      	b.n	800b21a <sendto+0x25e>
         break;
 800b002:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800b004:	89bb      	ldrh	r3, [r7, #12]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d102      	bne.n	800b010 <sendto+0x54>
 800b00a:	f06f 030d 	mvn.w	r3, #13
 800b00e:	e104      	b.n	800b21a <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	021b      	lsls	r3, r3, #8
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	3201      	adds	r2, #1
 800b01e:	7812      	ldrb	r2, [r2, #0]
 800b020:	4413      	add	r3, r2
 800b022:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	021b      	lsls	r3, r3, #8
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	3202      	adds	r2, #2
 800b02c:	7812      	ldrb	r2, [r2, #0]
 800b02e:	4413      	add	r3, r2
 800b030:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	021b      	lsls	r3, r3, #8
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	3203      	adds	r2, #3
 800b03a:	7812      	ldrb	r2, [r2, #0]
 800b03c:	4413      	add	r3, r2
 800b03e:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d10e      	bne.n	800b064 <sendto+0xa8>
 800b046:	7bfb      	ldrb	r3, [r7, #15]
 800b048:	009b      	lsls	r3, r3, #2
 800b04a:	3301      	adds	r3, #1
 800b04c:	00db      	lsls	r3, r3, #3
 800b04e:	4618      	mov	r0, r3
 800b050:	f7ff f83e 	bl	800a0d0 <WIZCHIP_READ>
 800b054:	4603      	mov	r3, r0
 800b056:	f003 0304 	and.w	r3, r3, #4
 800b05a:	2b04      	cmp	r3, #4
 800b05c:	d002      	beq.n	800b064 <sendto+0xa8>
 800b05e:	f06f 030b 	mvn.w	r3, #11
 800b062:	e0da      	b.n	800b21a <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 800b064:	8c3b      	ldrh	r3, [r7, #32]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d10e      	bne.n	800b088 <sendto+0xcc>
 800b06a:	7bfb      	ldrb	r3, [r7, #15]
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	3301      	adds	r3, #1
 800b070:	00db      	lsls	r3, r3, #3
 800b072:	4618      	mov	r0, r3
 800b074:	f7ff f82c 	bl	800a0d0 <WIZCHIP_READ>
 800b078:	4603      	mov	r3, r0
 800b07a:	f003 0304 	and.w	r3, r3, #4
 800b07e:	2b04      	cmp	r3, #4
 800b080:	d002      	beq.n	800b088 <sendto+0xcc>
 800b082:	f06f 030a 	mvn.w	r3, #10
 800b086:	e0c8      	b.n	800b21a <sendto+0x25e>
   tmp = getSn_SR(sn);
 800b088:	7bfb      	ldrb	r3, [r7, #15]
 800b08a:	009b      	lsls	r3, r3, #2
 800b08c:	3301      	adds	r3, #1
 800b08e:	00db      	lsls	r3, r3, #3
 800b090:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800b094:	4618      	mov	r0, r3
 800b096:	f7ff f81b 	bl	800a0d0 <WIZCHIP_READ>
 800b09a:	4603      	mov	r3, r0
 800b09c:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 800b09e:	7dfb      	ldrb	r3, [r7, #23]
 800b0a0:	2b42      	cmp	r3, #66	; 0x42
 800b0a2:	d008      	beq.n	800b0b6 <sendto+0xfa>
 800b0a4:	7dfb      	ldrb	r3, [r7, #23]
 800b0a6:	2b22      	cmp	r3, #34	; 0x22
 800b0a8:	d005      	beq.n	800b0b6 <sendto+0xfa>
 800b0aa:	7dfb      	ldrb	r3, [r7, #23]
 800b0ac:	2b32      	cmp	r3, #50	; 0x32
 800b0ae:	d002      	beq.n	800b0b6 <sendto+0xfa>
 800b0b0:	f06f 0306 	mvn.w	r3, #6
 800b0b4:	e0b1      	b.n	800b21a <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 800b0b6:	7bfb      	ldrb	r3, [r7, #15]
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	00db      	lsls	r3, r3, #3
 800b0be:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800b0c2:	2204      	movs	r2, #4
 800b0c4:	6879      	ldr	r1, [r7, #4]
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7ff f8fc 	bl	800a2c4 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 800b0cc:	7bfb      	ldrb	r3, [r7, #15]
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	00db      	lsls	r3, r3, #3
 800b0d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0d8:	461a      	mov	r2, r3
 800b0da:	8c3b      	ldrh	r3, [r7, #32]
 800b0dc:	0a1b      	lsrs	r3, r3, #8
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	4610      	mov	r0, r2
 800b0e6:	f7ff f83f 	bl	800a168 <WIZCHIP_WRITE>
 800b0ea:	7bfb      	ldrb	r3, [r7, #15]
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	00db      	lsls	r3, r3, #3
 800b0f2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	8c3b      	ldrh	r3, [r7, #32]
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	4610      	mov	r0, r2
 800b100:	f7ff f832 	bl	800a168 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 800b104:	7bfb      	ldrb	r3, [r7, #15]
 800b106:	009b      	lsls	r3, r3, #2
 800b108:	3301      	adds	r3, #1
 800b10a:	00db      	lsls	r3, r3, #3
 800b10c:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800b110:	4618      	mov	r0, r3
 800b112:	f7fe ffdd 	bl	800a0d0 <WIZCHIP_READ>
 800b116:	4603      	mov	r3, r0
 800b118:	b29b      	uxth	r3, r3
 800b11a:	029b      	lsls	r3, r3, #10
 800b11c:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800b11e:	89ba      	ldrh	r2, [r7, #12]
 800b120:	8abb      	ldrh	r3, [r7, #20]
 800b122:	429a      	cmp	r2, r3
 800b124:	d901      	bls.n	800b12a <sendto+0x16e>
 800b126:	8abb      	ldrh	r3, [r7, #20]
 800b128:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800b12a:	7bfb      	ldrb	r3, [r7, #15]
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7ff f929 	bl	800a384 <getSn_TX_FSR>
 800b132:	4603      	mov	r3, r0
 800b134:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800b136:	7bfb      	ldrb	r3, [r7, #15]
 800b138:	009b      	lsls	r3, r3, #2
 800b13a:	3301      	adds	r3, #1
 800b13c:	00db      	lsls	r3, r3, #3
 800b13e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800b142:	4618      	mov	r0, r3
 800b144:	f7fe ffc4 	bl	800a0d0 <WIZCHIP_READ>
 800b148:	4603      	mov	r3, r0
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d102      	bne.n	800b154 <sendto+0x198>
 800b14e:	f06f 0303 	mvn.w	r3, #3
 800b152:	e062      	b.n	800b21a <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800b154:	4b33      	ldr	r3, [pc, #204]	; (800b224 <sendto+0x268>)
 800b156:	881b      	ldrh	r3, [r3, #0]
 800b158:	461a      	mov	r2, r3
 800b15a:	7bfb      	ldrb	r3, [r7, #15]
 800b15c:	fa42 f303 	asr.w	r3, r2, r3
 800b160:	f003 0301 	and.w	r3, r3, #1
 800b164:	2b00      	cmp	r3, #0
 800b166:	d005      	beq.n	800b174 <sendto+0x1b8>
 800b168:	89ba      	ldrh	r2, [r7, #12]
 800b16a:	8abb      	ldrh	r3, [r7, #20]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d901      	bls.n	800b174 <sendto+0x1b8>
 800b170:	2300      	movs	r3, #0
 800b172:	e052      	b.n	800b21a <sendto+0x25e>
      if(len <= freesize) break;
 800b174:	89ba      	ldrh	r2, [r7, #12]
 800b176:	8abb      	ldrh	r3, [r7, #20]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d900      	bls.n	800b17e <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 800b17c:	e7d5      	b.n	800b12a <sendto+0x16e>
      if(len <= freesize) break;
 800b17e:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 800b180:	89ba      	ldrh	r2, [r7, #12]
 800b182:	7bfb      	ldrb	r3, [r7, #15]
 800b184:	68b9      	ldr	r1, [r7, #8]
 800b186:	4618      	mov	r0, r3
 800b188:	f7ff f992 	bl	800a4b0 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 800b18c:	7bfb      	ldrb	r3, [r7, #15]
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	3301      	adds	r3, #1
 800b192:	00db      	lsls	r3, r3, #3
 800b194:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b198:	2120      	movs	r1, #32
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7fe ffe4 	bl	800a168 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800b1a0:	bf00      	nop
 800b1a2:	7bfb      	ldrb	r3, [r7, #15]
 800b1a4:	009b      	lsls	r3, r3, #2
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	00db      	lsls	r3, r3, #3
 800b1aa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7fe ff8e 	bl	800a0d0 <WIZCHIP_READ>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d1f3      	bne.n	800b1a2 <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 800b1ba:	7bfb      	ldrb	r3, [r7, #15]
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	3301      	adds	r3, #1
 800b1c0:	00db      	lsls	r3, r3, #3
 800b1c2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f7fe ff82 	bl	800a0d0 <WIZCHIP_READ>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	f003 031f 	and.w	r3, r3, #31
 800b1d2:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 800b1d4:	7dfb      	ldrb	r3, [r7, #23]
 800b1d6:	f003 0310 	and.w	r3, r3, #16
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d00c      	beq.n	800b1f8 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800b1de:	7bfb      	ldrb	r3, [r7, #15]
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	00db      	lsls	r3, r3, #3
 800b1e6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b1ea:	2110      	movs	r1, #16
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7fe ffbb 	bl	800a168 <WIZCHIP_WRITE>
         break;
 800b1f2:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800b1f4:	89bb      	ldrh	r3, [r7, #12]
 800b1f6:	e010      	b.n	800b21a <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 800b1f8:	7dfb      	ldrb	r3, [r7, #23]
 800b1fa:	f003 0308 	and.w	r3, r3, #8
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d0db      	beq.n	800b1ba <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 800b202:	7bfb      	ldrb	r3, [r7, #15]
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	3301      	adds	r3, #1
 800b208:	00db      	lsls	r3, r3, #3
 800b20a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b20e:	2108      	movs	r1, #8
 800b210:	4618      	mov	r0, r3
 800b212:	f7fe ffa9 	bl	800a168 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 800b216:	f06f 030c 	mvn.w	r3, #12
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3718      	adds	r7, #24
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	20003754 	.word	0x20003754

0800b228 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b088      	sub	sp, #32
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	60b9      	str	r1, [r7, #8]
 800b230:	607b      	str	r3, [r7, #4]
 800b232:	4603      	mov	r3, r0
 800b234:	73fb      	strb	r3, [r7, #15]
 800b236:	4613      	mov	r3, r2
 800b238:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 800b23a:	2300      	movs	r3, #0
 800b23c:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 800b23e:	7bfb      	ldrb	r3, [r7, #15]
 800b240:	2b08      	cmp	r3, #8
 800b242:	d902      	bls.n	800b24a <recvfrom+0x22>
 800b244:	f04f 33ff 	mov.w	r3, #4294967295
 800b248:	e1d4      	b.n	800b5f4 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 800b24a:	7bfb      	ldrb	r3, [r7, #15]
 800b24c:	009b      	lsls	r3, r3, #2
 800b24e:	3301      	adds	r3, #1
 800b250:	00db      	lsls	r3, r3, #3
 800b252:	4618      	mov	r0, r3
 800b254:	f7fe ff3c 	bl	800a0d0 <WIZCHIP_READ>
 800b258:	4603      	mov	r3, r0
 800b25a:	777b      	strb	r3, [r7, #29]
 800b25c:	7f7b      	ldrb	r3, [r7, #29]
 800b25e:	f003 030f 	and.w	r3, r3, #15
 800b262:	3b02      	subs	r3, #2
 800b264:	2b02      	cmp	r3, #2
 800b266:	d902      	bls.n	800b26e <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 800b268:	f06f 0304 	mvn.w	r3, #4
 800b26c:	e1c2      	b.n	800b5f4 <recvfrom+0x3cc>
         break;
 800b26e:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800b270:	89bb      	ldrh	r3, [r7, #12]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d102      	bne.n	800b27c <recvfrom+0x54>
 800b276:	f06f 030d 	mvn.w	r3, #13
 800b27a:	e1bb      	b.n	800b5f4 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 800b27c:	7bfb      	ldrb	r3, [r7, #15]
 800b27e:	4a88      	ldr	r2, [pc, #544]	; (800b4a0 <recvfrom+0x278>)
 800b280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d128      	bne.n	800b2da <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 800b288:	7bfb      	ldrb	r3, [r7, #15]
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7ff f8c5 	bl	800a41a <getSn_RX_RSR>
 800b290:	4603      	mov	r3, r0
 800b292:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800b294:	7bfb      	ldrb	r3, [r7, #15]
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	3301      	adds	r3, #1
 800b29a:	00db      	lsls	r3, r3, #3
 800b29c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f7fe ff15 	bl	800a0d0 <WIZCHIP_READ>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d102      	bne.n	800b2b2 <recvfrom+0x8a>
 800b2ac:	f06f 0303 	mvn.w	r3, #3
 800b2b0:	e1a0      	b.n	800b5f4 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 800b2b2:	4b7c      	ldr	r3, [pc, #496]	; (800b4a4 <recvfrom+0x27c>)
 800b2b4:	881b      	ldrh	r3, [r3, #0]
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ba:	fa42 f303 	asr.w	r3, r2, r3
 800b2be:	f003 0301 	and.w	r3, r3, #1
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d004      	beq.n	800b2d0 <recvfrom+0xa8>
 800b2c6:	8bfb      	ldrh	r3, [r7, #30]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d101      	bne.n	800b2d0 <recvfrom+0xa8>
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	e191      	b.n	800b5f4 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 800b2d0:	8bfb      	ldrh	r3, [r7, #30]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d100      	bne.n	800b2d8 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 800b2d6:	e7d7      	b.n	800b288 <recvfrom+0x60>
         if(pack_len != 0) break;
 800b2d8:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 800b2da:	7f7b      	ldrb	r3, [r7, #29]
 800b2dc:	f003 0307 	and.w	r3, r3, #7
 800b2e0:	2b04      	cmp	r3, #4
 800b2e2:	d079      	beq.n	800b3d8 <recvfrom+0x1b0>
 800b2e4:	2b04      	cmp	r3, #4
 800b2e6:	f300 8142 	bgt.w	800b56e <recvfrom+0x346>
 800b2ea:	2b02      	cmp	r3, #2
 800b2ec:	d003      	beq.n	800b2f6 <recvfrom+0xce>
 800b2ee:	2b03      	cmp	r3, #3
 800b2f0:	f000 80dc 	beq.w	800b4ac <recvfrom+0x284>
 800b2f4:	e13b      	b.n	800b56e <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 800b2f6:	7bfb      	ldrb	r3, [r7, #15]
 800b2f8:	4a69      	ldr	r2, [pc, #420]	; (800b4a0 <recvfrom+0x278>)
 800b2fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d152      	bne.n	800b3a8 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 800b302:	f107 0114 	add.w	r1, r7, #20
 800b306:	7bfb      	ldrb	r3, [r7, #15]
 800b308:	2208      	movs	r2, #8
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7ff f92c 	bl	800a568 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800b310:	7bfb      	ldrb	r3, [r7, #15]
 800b312:	009b      	lsls	r3, r3, #2
 800b314:	3301      	adds	r3, #1
 800b316:	00db      	lsls	r3, r3, #3
 800b318:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b31c:	2140      	movs	r1, #64	; 0x40
 800b31e:	4618      	mov	r0, r3
 800b320:	f7fe ff22 	bl	800a168 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800b324:	bf00      	nop
 800b326:	7bfb      	ldrb	r3, [r7, #15]
 800b328:	009b      	lsls	r3, r3, #2
 800b32a:	3301      	adds	r3, #1
 800b32c:	00db      	lsls	r3, r3, #3
 800b32e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b332:	4618      	mov	r0, r3
 800b334:	f7fe fecc 	bl	800a0d0 <WIZCHIP_READ>
 800b338:	4603      	mov	r3, r0
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d1f3      	bne.n	800b326 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 800b33e:	7d3a      	ldrb	r2, [r7, #20]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	3301      	adds	r3, #1
 800b348:	7d7a      	ldrb	r2, [r7, #21]
 800b34a:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	3302      	adds	r3, #2
 800b350:	7dba      	ldrb	r2, [r7, #22]
 800b352:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	3303      	adds	r3, #3
 800b358:	7dfa      	ldrb	r2, [r7, #23]
 800b35a:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 800b35c:	7e3b      	ldrb	r3, [r7, #24]
 800b35e:	b29a      	uxth	r2, r3
 800b360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b362:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 800b364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b366:	881b      	ldrh	r3, [r3, #0]
 800b368:	021b      	lsls	r3, r3, #8
 800b36a:	b29a      	uxth	r2, r3
 800b36c:	7e7b      	ldrb	r3, [r7, #25]
 800b36e:	b29b      	uxth	r3, r3
 800b370:	4413      	add	r3, r2
 800b372:	b29a      	uxth	r2, r3
 800b374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b376:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 800b378:	7eba      	ldrb	r2, [r7, #26]
 800b37a:	7bfb      	ldrb	r3, [r7, #15]
 800b37c:	b291      	uxth	r1, r2
 800b37e:	4a48      	ldr	r2, [pc, #288]	; (800b4a0 <recvfrom+0x278>)
 800b380:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 800b384:	7bfb      	ldrb	r3, [r7, #15]
 800b386:	4a46      	ldr	r2, [pc, #280]	; (800b4a0 <recvfrom+0x278>)
 800b388:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b38c:	021b      	lsls	r3, r3, #8
 800b38e:	b299      	uxth	r1, r3
 800b390:	7efb      	ldrb	r3, [r7, #27]
 800b392:	b29a      	uxth	r2, r3
 800b394:	7bfb      	ldrb	r3, [r7, #15]
 800b396:	440a      	add	r2, r1
 800b398:	b291      	uxth	r1, r2
 800b39a:	4a41      	ldr	r2, [pc, #260]	; (800b4a0 <recvfrom+0x278>)
 800b39c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 800b3a0:	7bfb      	ldrb	r3, [r7, #15]
 800b3a2:	4a41      	ldr	r2, [pc, #260]	; (800b4a8 <recvfrom+0x280>)
 800b3a4:	2180      	movs	r1, #128	; 0x80
 800b3a6:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800b3a8:	7bfb      	ldrb	r3, [r7, #15]
 800b3aa:	4a3d      	ldr	r2, [pc, #244]	; (800b4a0 <recvfrom+0x278>)
 800b3ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3b0:	89ba      	ldrh	r2, [r7, #12]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d202      	bcs.n	800b3bc <recvfrom+0x194>
 800b3b6:	89bb      	ldrh	r3, [r7, #12]
 800b3b8:	83fb      	strh	r3, [r7, #30]
 800b3ba:	e004      	b.n	800b3c6 <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 800b3bc:	7bfb      	ldrb	r3, [r7, #15]
 800b3be:	4a38      	ldr	r2, [pc, #224]	; (800b4a0 <recvfrom+0x278>)
 800b3c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3c4:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 800b3c6:	8bfb      	ldrh	r3, [r7, #30]
 800b3c8:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 800b3ca:	8bfa      	ldrh	r2, [r7, #30]
 800b3cc:	7bfb      	ldrb	r3, [r7, #15]
 800b3ce:	68b9      	ldr	r1, [r7, #8]
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f7ff f8c9 	bl	800a568 <wiz_recv_data>
			break;
 800b3d6:	e0d6      	b.n	800b586 <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 800b3d8:	7bfb      	ldrb	r3, [r7, #15]
 800b3da:	4a31      	ldr	r2, [pc, #196]	; (800b4a0 <recvfrom+0x278>)
 800b3dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d146      	bne.n	800b472 <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 800b3e4:	f107 0114 	add.w	r1, r7, #20
 800b3e8:	7bfb      	ldrb	r3, [r7, #15]
 800b3ea:	2202      	movs	r2, #2
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7ff f8bb 	bl	800a568 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800b3f2:	7bfb      	ldrb	r3, [r7, #15]
 800b3f4:	009b      	lsls	r3, r3, #2
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	00db      	lsls	r3, r3, #3
 800b3fa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b3fe:	2140      	movs	r1, #64	; 0x40
 800b400:	4618      	mov	r0, r3
 800b402:	f7fe feb1 	bl	800a168 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800b406:	bf00      	nop
 800b408:	7bfb      	ldrb	r3, [r7, #15]
 800b40a:	009b      	lsls	r3, r3, #2
 800b40c:	3301      	adds	r3, #1
 800b40e:	00db      	lsls	r3, r3, #3
 800b410:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b414:	4618      	mov	r0, r3
 800b416:	f7fe fe5b 	bl	800a0d0 <WIZCHIP_READ>
 800b41a:	4603      	mov	r3, r0
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d1f3      	bne.n	800b408 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 800b420:	7d3a      	ldrb	r2, [r7, #20]
 800b422:	7bfb      	ldrb	r3, [r7, #15]
 800b424:	b291      	uxth	r1, r2
 800b426:	4a1e      	ldr	r2, [pc, #120]	; (800b4a0 <recvfrom+0x278>)
 800b428:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 800b42c:	7bfb      	ldrb	r3, [r7, #15]
 800b42e:	4a1c      	ldr	r2, [pc, #112]	; (800b4a0 <recvfrom+0x278>)
 800b430:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b434:	021b      	lsls	r3, r3, #8
 800b436:	b29a      	uxth	r2, r3
 800b438:	7d7b      	ldrb	r3, [r7, #21]
 800b43a:	b29b      	uxth	r3, r3
 800b43c:	4413      	add	r3, r2
 800b43e:	b29a      	uxth	r2, r3
 800b440:	7bfb      	ldrb	r3, [r7, #15]
 800b442:	3a02      	subs	r2, #2
 800b444:	b291      	uxth	r1, r2
 800b446:	4a16      	ldr	r2, [pc, #88]	; (800b4a0 <recvfrom+0x278>)
 800b448:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 800b44c:	7bfb      	ldrb	r3, [r7, #15]
 800b44e:	4a14      	ldr	r2, [pc, #80]	; (800b4a0 <recvfrom+0x278>)
 800b450:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b454:	f240 52ea 	movw	r2, #1514	; 0x5ea
 800b458:	4293      	cmp	r3, r2
 800b45a:	d906      	bls.n	800b46a <recvfrom+0x242>
   			{
   			   close(sn);
 800b45c:	7bfb      	ldrb	r3, [r7, #15]
 800b45e:	4618      	mov	r0, r3
 800b460:	f7ff fa3c 	bl	800a8dc <close>
   			   return SOCKFATAL_PACKLEN;
 800b464:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 800b468:	e0c4      	b.n	800b5f4 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 800b46a:	7bfb      	ldrb	r3, [r7, #15]
 800b46c:	4a0e      	ldr	r2, [pc, #56]	; (800b4a8 <recvfrom+0x280>)
 800b46e:	2180      	movs	r1, #128	; 0x80
 800b470:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800b472:	7bfb      	ldrb	r3, [r7, #15]
 800b474:	4a0a      	ldr	r2, [pc, #40]	; (800b4a0 <recvfrom+0x278>)
 800b476:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b47a:	89ba      	ldrh	r2, [r7, #12]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d202      	bcs.n	800b486 <recvfrom+0x25e>
 800b480:	89bb      	ldrh	r3, [r7, #12]
 800b482:	83fb      	strh	r3, [r7, #30]
 800b484:	e004      	b.n	800b490 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 800b486:	7bfb      	ldrb	r3, [r7, #15]
 800b488:	4a05      	ldr	r2, [pc, #20]	; (800b4a0 <recvfrom+0x278>)
 800b48a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b48e:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 800b490:	8bfa      	ldrh	r2, [r7, #30]
 800b492:	7bfb      	ldrb	r3, [r7, #15]
 800b494:	68b9      	ldr	r1, [r7, #8]
 800b496:	4618      	mov	r0, r3
 800b498:	f7ff f866 	bl	800a568 <wiz_recv_data>
		   break;
 800b49c:	e073      	b.n	800b586 <recvfrom+0x35e>
 800b49e:	bf00      	nop
 800b4a0:	20003758 	.word	0x20003758
 800b4a4:	20003754 	.word	0x20003754
 800b4a8:	20003768 	.word	0x20003768
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 800b4ac:	7bfb      	ldrb	r3, [r7, #15]
 800b4ae:	4a53      	ldr	r2, [pc, #332]	; (800b5fc <recvfrom+0x3d4>)
 800b4b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d144      	bne.n	800b542 <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 800b4b8:	f107 0114 	add.w	r1, r7, #20
 800b4bc:	7bfb      	ldrb	r3, [r7, #15]
 800b4be:	2206      	movs	r2, #6
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f7ff f851 	bl	800a568 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800b4c6:	7bfb      	ldrb	r3, [r7, #15]
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	00db      	lsls	r3, r3, #3
 800b4ce:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b4d2:	2140      	movs	r1, #64	; 0x40
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f7fe fe47 	bl	800a168 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800b4da:	bf00      	nop
 800b4dc:	7bfb      	ldrb	r3, [r7, #15]
 800b4de:	009b      	lsls	r3, r3, #2
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	00db      	lsls	r3, r3, #3
 800b4e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f7fe fdf1 	bl	800a0d0 <WIZCHIP_READ>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d1f3      	bne.n	800b4dc <recvfrom+0x2b4>
   			addr[0] = head[0];
 800b4f4:	7d3a      	ldrb	r2, [r7, #20]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	7d7a      	ldrb	r2, [r7, #21]
 800b500:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	3302      	adds	r3, #2
 800b506:	7dba      	ldrb	r2, [r7, #22]
 800b508:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	3303      	adds	r3, #3
 800b50e:	7dfa      	ldrb	r2, [r7, #23]
 800b510:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 800b512:	7e3a      	ldrb	r2, [r7, #24]
 800b514:	7bfb      	ldrb	r3, [r7, #15]
 800b516:	b291      	uxth	r1, r2
 800b518:	4a38      	ldr	r2, [pc, #224]	; (800b5fc <recvfrom+0x3d4>)
 800b51a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 800b51e:	7bfb      	ldrb	r3, [r7, #15]
 800b520:	4a36      	ldr	r2, [pc, #216]	; (800b5fc <recvfrom+0x3d4>)
 800b522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b526:	021b      	lsls	r3, r3, #8
 800b528:	b299      	uxth	r1, r3
 800b52a:	7e7b      	ldrb	r3, [r7, #25]
 800b52c:	b29a      	uxth	r2, r3
 800b52e:	7bfb      	ldrb	r3, [r7, #15]
 800b530:	440a      	add	r2, r1
 800b532:	b291      	uxth	r1, r2
 800b534:	4a31      	ldr	r2, [pc, #196]	; (800b5fc <recvfrom+0x3d4>)
 800b536:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 800b53a:	7bfb      	ldrb	r3, [r7, #15]
 800b53c:	4a30      	ldr	r2, [pc, #192]	; (800b600 <recvfrom+0x3d8>)
 800b53e:	2180      	movs	r1, #128	; 0x80
 800b540:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 800b542:	7bfb      	ldrb	r3, [r7, #15]
 800b544:	4a2d      	ldr	r2, [pc, #180]	; (800b5fc <recvfrom+0x3d4>)
 800b546:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b54a:	89ba      	ldrh	r2, [r7, #12]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d202      	bcs.n	800b556 <recvfrom+0x32e>
 800b550:	89bb      	ldrh	r3, [r7, #12]
 800b552:	83fb      	strh	r3, [r7, #30]
 800b554:	e004      	b.n	800b560 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 800b556:	7bfb      	ldrb	r3, [r7, #15]
 800b558:	4a28      	ldr	r2, [pc, #160]	; (800b5fc <recvfrom+0x3d4>)
 800b55a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b55e:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 800b560:	8bfa      	ldrh	r2, [r7, #30]
 800b562:	7bfb      	ldrb	r3, [r7, #15]
 800b564:	68b9      	ldr	r1, [r7, #8]
 800b566:	4618      	mov	r0, r3
 800b568:	f7fe fffe 	bl	800a568 <wiz_recv_data>
			break;
 800b56c:	e00b      	b.n	800b586 <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 800b56e:	8bfa      	ldrh	r2, [r7, #30]
 800b570:	7bfb      	ldrb	r3, [r7, #15]
 800b572:	4611      	mov	r1, r2
 800b574:	4618      	mov	r0, r3
 800b576:	f7ff f853 	bl	800a620 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 800b57a:	7bfb      	ldrb	r3, [r7, #15]
 800b57c:	491f      	ldr	r1, [pc, #124]	; (800b5fc <recvfrom+0x3d4>)
 800b57e:	8bfa      	ldrh	r2, [r7, #30]
 800b580:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 800b584:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 800b586:	7bfb      	ldrb	r3, [r7, #15]
 800b588:	009b      	lsls	r3, r3, #2
 800b58a:	3301      	adds	r3, #1
 800b58c:	00db      	lsls	r3, r3, #3
 800b58e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b592:	2140      	movs	r1, #64	; 0x40
 800b594:	4618      	mov	r0, r3
 800b596:	f7fe fde7 	bl	800a168 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 800b59a:	bf00      	nop
 800b59c:	7bfb      	ldrb	r3, [r7, #15]
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	00db      	lsls	r3, r3, #3
 800b5a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f7fe fd91 	bl	800a0d0 <WIZCHIP_READ>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d1f3      	bne.n	800b59c <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 800b5b4:	7bfb      	ldrb	r3, [r7, #15]
 800b5b6:	4a11      	ldr	r2, [pc, #68]	; (800b5fc <recvfrom+0x3d4>)
 800b5b8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800b5bc:	7bfb      	ldrb	r3, [r7, #15]
 800b5be:	8bfa      	ldrh	r2, [r7, #30]
 800b5c0:	1a8a      	subs	r2, r1, r2
 800b5c2:	b291      	uxth	r1, r2
 800b5c4:	4a0d      	ldr	r2, [pc, #52]	; (800b5fc <recvfrom+0x3d4>)
 800b5c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 800b5ca:	7bfb      	ldrb	r3, [r7, #15]
 800b5cc:	4a0b      	ldr	r2, [pc, #44]	; (800b5fc <recvfrom+0x3d4>)
 800b5ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d009      	beq.n	800b5ea <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 800b5d6:	7bfb      	ldrb	r3, [r7, #15]
 800b5d8:	4a09      	ldr	r2, [pc, #36]	; (800b600 <recvfrom+0x3d8>)
 800b5da:	5cd2      	ldrb	r2, [r2, r3]
 800b5dc:	7bfb      	ldrb	r3, [r7, #15]
 800b5de:	f042 0201 	orr.w	r2, r2, #1
 800b5e2:	b2d1      	uxtb	r1, r2
 800b5e4:	4a06      	ldr	r2, [pc, #24]	; (800b600 <recvfrom+0x3d8>)
 800b5e6:	54d1      	strb	r1, [r2, r3]
 800b5e8:	e003      	b.n	800b5f2 <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 800b5ea:	7bfb      	ldrb	r3, [r7, #15]
 800b5ec:	4a04      	ldr	r2, [pc, #16]	; (800b600 <recvfrom+0x3d8>)
 800b5ee:	2100      	movs	r1, #0
 800b5f0:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 800b5f2:	8bfb      	ldrh	r3, [r7, #30]
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3720      	adds	r7, #32
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}
 800b5fc:	20003758 	.word	0x20003758
 800b600:	20003768 	.word	0x20003768

0800b604 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 800b604:	b480      	push	{r7}
 800b606:	af00      	add	r7, sp, #0
 800b608:	bf00      	nop
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr

0800b612 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800b612:	b480      	push	{r7}
 800b614:	af00      	add	r7, sp, #0
 800b616:	bf00      	nop
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr

0800b620 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 800b620:	b480      	push	{r7}
 800b622:	af00      	add	r7, sp, #0
 800b624:	bf00      	nop
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr

0800b62e <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800b62e:	b480      	push	{r7}
 800b630:	af00      	add	r7, sp, #0
 800b632:	bf00      	nop
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 800b63c:	b480      	push	{r7}
 800b63e:	b083      	sub	sp, #12
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	4618      	mov	r0, r3
 800b64c:	370c      	adds	r7, #12
 800b64e:	46bd      	mov	sp, r7
 800b650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b654:	4770      	bx	lr

0800b656 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800b656:	b480      	push	{r7}
 800b658:	b083      	sub	sp, #12
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
 800b65e:	460b      	mov	r3, r1
 800b660:	70fb      	strb	r3, [r7, #3]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	78fa      	ldrb	r2, [r7, #3]
 800b666:	701a      	strb	r2, [r3, #0]
 800b668:	bf00      	nop
 800b66a:	370c      	adds	r7, #12
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr

0800b674 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 800b674:	b480      	push	{r7}
 800b676:	af00      	add	r7, sp, #0
 800b678:	2300      	movs	r3, #0
 800b67a:	4618      	mov	r0, r3
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr

0800b684 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
 800b68a:	4603      	mov	r3, r0
 800b68c:	71fb      	strb	r3, [r7, #7]
 800b68e:	bf00      	nop
 800b690:	370c      	adds	r7, #12
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr
	...

0800b69c <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 800b69c:	b480      	push	{r7}
 800b69e:	b083      	sub	sp, #12
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d002      	beq.n	800b6b2 <reg_wizchip_cs_cbfunc+0x16>
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d106      	bne.n	800b6c0 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800b6b2:	4b0a      	ldr	r3, [pc, #40]	; (800b6dc <reg_wizchip_cs_cbfunc+0x40>)
 800b6b4:	4a0a      	ldr	r2, [pc, #40]	; (800b6e0 <reg_wizchip_cs_cbfunc+0x44>)
 800b6b6:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 800b6b8:	4b08      	ldr	r3, [pc, #32]	; (800b6dc <reg_wizchip_cs_cbfunc+0x40>)
 800b6ba:	4a0a      	ldr	r2, [pc, #40]	; (800b6e4 <reg_wizchip_cs_cbfunc+0x48>)
 800b6bc:	619a      	str	r2, [r3, #24]
 800b6be:	e006      	b.n	800b6ce <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 800b6c0:	4a06      	ldr	r2, [pc, #24]	; (800b6dc <reg_wizchip_cs_cbfunc+0x40>)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800b6c6:	4a05      	ldr	r2, [pc, #20]	; (800b6dc <reg_wizchip_cs_cbfunc+0x40>)
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	6193      	str	r3, [r2, #24]
   }
}
 800b6cc:	bf00      	nop
 800b6ce:	bf00      	nop
 800b6d0:	370c      	adds	r7, #12
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d8:	4770      	bx	lr
 800b6da:	bf00      	nop
 800b6dc:	20000080 	.word	0x20000080
 800b6e0:	0800b621 	.word	0x0800b621
 800b6e4:	0800b62f 	.word	0x0800b62f

0800b6e8 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800b6f2:	bf00      	nop
 800b6f4:	4b0f      	ldr	r3, [pc, #60]	; (800b734 <reg_wizchip_spi_cbfunc+0x4c>)
 800b6f6:	881b      	ldrh	r3, [r3, #0]
 800b6f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d0f9      	beq.n	800b6f4 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d002      	beq.n	800b70c <reg_wizchip_spi_cbfunc+0x24>
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d106      	bne.n	800b71a <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 800b70c:	4b09      	ldr	r3, [pc, #36]	; (800b734 <reg_wizchip_spi_cbfunc+0x4c>)
 800b70e:	4a0a      	ldr	r2, [pc, #40]	; (800b738 <reg_wizchip_spi_cbfunc+0x50>)
 800b710:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800b712:	4b08      	ldr	r3, [pc, #32]	; (800b734 <reg_wizchip_spi_cbfunc+0x4c>)
 800b714:	4a09      	ldr	r2, [pc, #36]	; (800b73c <reg_wizchip_spi_cbfunc+0x54>)
 800b716:	621a      	str	r2, [r3, #32]
 800b718:	e006      	b.n	800b728 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800b71a:	4a06      	ldr	r2, [pc, #24]	; (800b734 <reg_wizchip_spi_cbfunc+0x4c>)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 800b720:	4a04      	ldr	r2, [pc, #16]	; (800b734 <reg_wizchip_spi_cbfunc+0x4c>)
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	6213      	str	r3, [r2, #32]
   }
}
 800b726:	bf00      	nop
 800b728:	bf00      	nop
 800b72a:	370c      	adds	r7, #12
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr
 800b734:	20000080 	.word	0x20000080
 800b738:	0800b675 	.word	0x0800b675
 800b73c:	0800b685 	.word	0x0800b685

0800b740 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b086      	sub	sp, #24
 800b744:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800b746:	1d3b      	adds	r3, r7, #4
 800b748:	2206      	movs	r2, #6
 800b74a:	4619      	mov	r1, r3
 800b74c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800b750:	f7fe fd58 	bl	800a204 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800b754:	f107 0314 	add.w	r3, r7, #20
 800b758:	2204      	movs	r2, #4
 800b75a:	4619      	mov	r1, r3
 800b75c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b760:	f7fe fd50 	bl	800a204 <WIZCHIP_READ_BUF>
 800b764:	f107 0310 	add.w	r3, r7, #16
 800b768:	2204      	movs	r2, #4
 800b76a:	4619      	mov	r1, r3
 800b76c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800b770:	f7fe fd48 	bl	800a204 <WIZCHIP_READ_BUF>
 800b774:	f107 030c 	add.w	r3, r7, #12
 800b778:	2204      	movs	r2, #4
 800b77a:	4619      	mov	r1, r3
 800b77c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800b780:	f7fe fd40 	bl	800a204 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 800b784:	2180      	movs	r1, #128	; 0x80
 800b786:	2000      	movs	r0, #0
 800b788:	f7fe fcee 	bl	800a168 <WIZCHIP_WRITE>
   getMR(); // for delay
 800b78c:	2000      	movs	r0, #0
 800b78e:	f7fe fc9f 	bl	800a0d0 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800b792:	1d3b      	adds	r3, r7, #4
 800b794:	2206      	movs	r2, #6
 800b796:	4619      	mov	r1, r3
 800b798:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800b79c:	f7fe fd92 	bl	800a2c4 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800b7a0:	f107 0314 	add.w	r3, r7, #20
 800b7a4:	2204      	movs	r2, #4
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b7ac:	f7fe fd8a 	bl	800a2c4 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800b7b0:	f107 0310 	add.w	r3, r7, #16
 800b7b4:	2204      	movs	r2, #4
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800b7bc:	f7fe fd82 	bl	800a2c4 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800b7c0:	f107 030c 	add.w	r3, r7, #12
 800b7c4:	2204      	movs	r2, #4
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800b7cc:	f7fe fd7a 	bl	800a2c4 <WIZCHIP_WRITE_BUF>
}
 800b7d0:	bf00      	nop
 800b7d2:	3718      	adds	r7, #24
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b084      	sub	sp, #16
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800b7e6:	f7ff ffab 	bl	800b740 <wizchip_sw_reset>
   if(txsize)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d03b      	beq.n	800b868 <wizchip_init+0x90>
   {
      tmp = 0;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	73fb      	strb	r3, [r7, #15]
 800b7f8:	e015      	b.n	800b826 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 800b7fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	4413      	add	r3, r2
 800b802:	781a      	ldrb	r2, [r3, #0]
 800b804:	7bbb      	ldrb	r3, [r7, #14]
 800b806:	4413      	add	r3, r2
 800b808:	b2db      	uxtb	r3, r3
 800b80a:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 800b80c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b810:	2b10      	cmp	r3, #16
 800b812:	dd02      	ble.n	800b81a <wizchip_init+0x42>
 800b814:	f04f 33ff 	mov.w	r3, #4294967295
 800b818:	e066      	b.n	800b8e8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800b81a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	3301      	adds	r3, #1
 800b822:	b2db      	uxtb	r3, r3
 800b824:	73fb      	strb	r3, [r7, #15]
 800b826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b82a:	2b07      	cmp	r3, #7
 800b82c:	dde5      	ble.n	800b7fa <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800b82e:	2300      	movs	r3, #0
 800b830:	73fb      	strb	r3, [r7, #15]
 800b832:	e015      	b.n	800b860 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 800b834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	3301      	adds	r3, #1
 800b83c:	00db      	lsls	r3, r3, #3
 800b83e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800b842:	4618      	mov	r0, r3
 800b844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	4413      	add	r3, r2
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	4619      	mov	r1, r3
 800b850:	f7fe fc8a 	bl	800a168 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800b854:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b858:	b2db      	uxtb	r3, r3
 800b85a:	3301      	adds	r3, #1
 800b85c:	b2db      	uxtb	r3, r3
 800b85e:	73fb      	strb	r3, [r7, #15]
 800b860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b864:	2b07      	cmp	r3, #7
 800b866:	dde5      	ble.n	800b834 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d03b      	beq.n	800b8e6 <wizchip_init+0x10e>
   {
      tmp = 0;
 800b86e:	2300      	movs	r3, #0
 800b870:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800b872:	2300      	movs	r3, #0
 800b874:	73fb      	strb	r3, [r7, #15]
 800b876:	e015      	b.n	800b8a4 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 800b878:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b87c:	683a      	ldr	r2, [r7, #0]
 800b87e:	4413      	add	r3, r2
 800b880:	781a      	ldrb	r2, [r3, #0]
 800b882:	7bbb      	ldrb	r3, [r7, #14]
 800b884:	4413      	add	r3, r2
 800b886:	b2db      	uxtb	r3, r3
 800b888:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 800b88a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b88e:	2b10      	cmp	r3, #16
 800b890:	dd02      	ble.n	800b898 <wizchip_init+0xc0>
 800b892:	f04f 33ff 	mov.w	r3, #4294967295
 800b896:	e027      	b.n	800b8e8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800b898:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	3301      	adds	r3, #1
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	73fb      	strb	r3, [r7, #15]
 800b8a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8a8:	2b07      	cmp	r3, #7
 800b8aa:	dde5      	ble.n	800b878 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	73fb      	strb	r3, [r7, #15]
 800b8b0:	e015      	b.n	800b8de <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800b8b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	00db      	lsls	r3, r3, #3
 800b8bc:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8c6:	683a      	ldr	r2, [r7, #0]
 800b8c8:	4413      	add	r3, r2
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	f7fe fc4b 	bl	800a168 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800b8d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	3301      	adds	r3, #1
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	73fb      	strb	r3, [r7, #15]
 800b8de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8e2:	2b07      	cmp	r3, #7
 800b8e4:	dde5      	ble.n	800b8b2 <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 800b8e6:	2300      	movs	r3, #0
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3710      	adds	r7, #16
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2206      	movs	r2, #6
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800b902:	f7fe fcdf 	bl	800a2c4 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	330e      	adds	r3, #14
 800b90a:	2204      	movs	r2, #4
 800b90c:	4619      	mov	r1, r3
 800b90e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b912:	f7fe fcd7 	bl	800a2c4 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	330a      	adds	r3, #10
 800b91a:	2204      	movs	r2, #4
 800b91c:	4619      	mov	r1, r3
 800b91e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800b922:	f7fe fccf 	bl	800a2c4 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	3306      	adds	r3, #6
 800b92a:	2204      	movs	r2, #4
 800b92c:	4619      	mov	r1, r3
 800b92e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800b932:	f7fe fcc7 	bl	800a2c4 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	7c9a      	ldrb	r2, [r3, #18]
 800b93a:	4b0b      	ldr	r3, [pc, #44]	; (800b968 <wizchip_setnetinfo+0x78>)
 800b93c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	7cda      	ldrb	r2, [r3, #19]
 800b942:	4b09      	ldr	r3, [pc, #36]	; (800b968 <wizchip_setnetinfo+0x78>)
 800b944:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	7d1a      	ldrb	r2, [r3, #20]
 800b94a:	4b07      	ldr	r3, [pc, #28]	; (800b968 <wizchip_setnetinfo+0x78>)
 800b94c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	7d5a      	ldrb	r2, [r3, #21]
 800b952:	4b05      	ldr	r3, [pc, #20]	; (800b968 <wizchip_setnetinfo+0x78>)
 800b954:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	7d9a      	ldrb	r2, [r3, #22]
 800b95a:	4b04      	ldr	r3, [pc, #16]	; (800b96c <wizchip_setnetinfo+0x7c>)
 800b95c:	701a      	strb	r2, [r3, #0]
}
 800b95e:	bf00      	nop
 800b960:	3708      	adds	r7, #8
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop
 800b968:	20003770 	.word	0x20003770
 800b96c:	20003774 	.word	0x20003774

0800b970 <wizchip_settimeout>:
{
   return (netmode_type) getMR();
}

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	4619      	mov	r1, r3
 800b97e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800b982:	f7fe fbf1 	bl	800a168 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	885b      	ldrh	r3, [r3, #2]
 800b98a:	0a1b      	lsrs	r3, r3, #8
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	4619      	mov	r1, r3
 800b992:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 800b996:	f7fe fbe7 	bl	800a168 <WIZCHIP_WRITE>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	885b      	ldrh	r3, [r3, #2]
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800b9a6:	f7fe fbdf 	bl	800a168 <WIZCHIP_WRITE>
}
 800b9aa:	bf00      	nop
 800b9ac:	3708      	adds	r7, #8
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}

0800b9b2 <NewMessageData>:
 * Contributors:
 *    Allan Stockdill-Mander/Ian Craggs - initial API and implementation and/or initial documentation
 *******************************************************************************/
#include "MQTTClient.h"

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 800b9b2:	b480      	push	{r7}
 800b9b4:	b085      	sub	sp, #20
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	60f8      	str	r0, [r7, #12]
 800b9ba:	60b9      	str	r1, [r7, #8]
 800b9bc:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	68ba      	ldr	r2, [r7, #8]
 800b9c2:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	601a      	str	r2, [r3, #0]
}
 800b9ca:	bf00      	nop
 800b9cc:	3714      	adds	r7, #20
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr

0800b9d6 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 800b9d6:	b480      	push	{r7}
 800b9d8:	b083      	sub	sp, #12
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d003      	beq.n	800b9f2 <getNextPacketId+0x1c>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	e000      	b.n	800b9f4 <getNextPacketId+0x1e>
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	687a      	ldr	r2, [r7, #4]
 800b9f6:	6013      	str	r3, [r2, #0]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	370c      	adds	r7, #12
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 800ba08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba0a:	b087      	sub	sp, #28
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 800ba14:	f04f 33ff 	mov.w	r3, #4294967295
 800ba18:	617b      	str	r3, [r7, #20]
        sent = 0;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 800ba1e:	e018      	b.n	800ba52 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba24:	689c      	ldr	r4, [r3, #8]
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	691a      	ldr	r2, [r3, #16]
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	18d6      	adds	r6, r2, r3
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 fcee 	bl	800c414 <TimerLeftMS>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	68ba      	ldr	r2, [r7, #8]
 800ba3c:	4631      	mov	r1, r6
 800ba3e:	4628      	mov	r0, r5
 800ba40:	47a0      	blx	r4
 800ba42:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	db0e      	blt.n	800ba68 <sendPacket+0x60>
            break;
        sent += rc;
 800ba4a:	693a      	ldr	r2, [r7, #16]
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	4413      	add	r3, r2
 800ba50:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 800ba52:	693a      	ldr	r2, [r7, #16]
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	da07      	bge.n	800ba6a <sendPacket+0x62>
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 fc98 	bl	800c390 <TimerIsExpired>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d0dc      	beq.n	800ba20 <sendPacket+0x18>
 800ba66:	e000      	b.n	800ba6a <sendPacket+0x62>
            break;
 800ba68:	bf00      	nop
    }
    if (sent == length)
 800ba6a:	693a      	ldr	r2, [r7, #16]
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d10b      	bne.n	800ba8a <sendPacket+0x82>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	699b      	ldr	r3, [r3, #24]
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	4610      	mov	r0, r2
 800ba80:	f000 fcb0 	bl	800c3e4 <TimerCountdown>
        rc = SUCCESSS;
 800ba84:	2300      	movs	r3, #0
 800ba86:	617b      	str	r3, [r7, #20]
 800ba88:	e002      	b.n	800ba90 <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 800ba8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ba8e:	617b      	str	r3, [r7, #20]
    return rc;
 800ba90:	697b      	ldr	r3, [r7, #20]
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	371c      	adds	r7, #28
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ba9a <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 800ba9a:	b580      	push	{r7, lr}
 800ba9c:	b086      	sub	sp, #24
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	60f8      	str	r0, [r7, #12]
 800baa2:	60b9      	str	r1, [r7, #8]
 800baa4:	607a      	str	r2, [r7, #4]
 800baa6:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	68ba      	ldr	r2, [r7, #8]
 800baac:	651a      	str	r2, [r3, #80]	; 0x50

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800baae:	2300      	movs	r3, #0
 800bab0:	617b      	str	r3, [r7, #20]
 800bab2:	e009      	b.n	800bac8 <MQTTClientInit+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 800bab4:	68fa      	ldr	r2, [r7, #12]
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	3304      	adds	r3, #4
 800baba:	00db      	lsls	r3, r3, #3
 800babc:	4413      	add	r3, r2
 800babe:	2200      	movs	r2, #0
 800bac0:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	3301      	adds	r3, #1
 800bac6:	617b      	str	r3, [r7, #20]
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	2b04      	cmp	r3, #4
 800bacc:	ddf2      	ble.n	800bab4 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	687a      	ldr	r2, [r7, #4]
 800bad2:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	683a      	ldr	r2, [r7, #0]
 800bad8:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	6a3a      	ldr	r2, [r7, #32]
 800bade:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bae4:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800baea:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2200      	movs	r2, #0
 800baf0:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2200      	movs	r2, #0
 800baf6:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2200      	movs	r2, #0
 800bafc:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2201      	movs	r2, #1
 800bb02:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	3354      	adds	r3, #84	; 0x54
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f000 fc34 	bl	800c376 <TimerInit>
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 800bb0e:	bf00      	nop
 800bb10:	3718      	adds	r7, #24
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}

0800bb16 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 800bb16:	b590      	push	{r4, r7, lr}
 800bb18:	b08b      	sub	sp, #44	; 0x2c
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	60f8      	str	r0, [r7, #12]
 800bb1e:	60b9      	str	r1, [r7, #8]
 800bb20:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 800bb22:	2301      	movs	r3, #1
 800bb24:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 800bb26:	2300      	movs	r3, #0
 800bb28:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 800bb2a:	2304      	movs	r3, #4
 800bb2c:	61fb      	str	r3, [r7, #28]

    *value = 0;
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	2200      	movs	r2, #0
 800bb32:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 800bb34:	f04f 33ff 	mov.w	r3, #4294967295
 800bb38:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800bb3a:	6a3b      	ldr	r3, [r7, #32]
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	623b      	str	r3, [r7, #32]
 800bb40:	6a3a      	ldr	r2, [r7, #32]
 800bb42:	69fb      	ldr	r3, [r7, #28]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	dd03      	ble.n	800bb50 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 800bb48:	f04f 33ff 	mov.w	r3, #4294967295
 800bb4c:	61bb      	str	r3, [r7, #24]
            goto exit;
 800bb4e:	e021      	b.n	800bb94 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb54:	685c      	ldr	r4, [r3, #4]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bb5a:	f107 0117 	add.w	r1, r7, #23
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2201      	movs	r2, #1
 800bb62:	47a0      	blx	r4
 800bb64:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 800bb66:	69bb      	ldr	r3, [r7, #24]
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	d112      	bne.n	800bb92 <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	7dfb      	ldrb	r3, [r7, #23]
 800bb72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb78:	fb01 f303 	mul.w	r3, r1, r3
 800bb7c:	441a      	add	r2, r3
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 800bb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb84:	01db      	lsls	r3, r3, #7
 800bb86:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 800bb88:	7dfb      	ldrb	r3, [r7, #23]
 800bb8a:	b25b      	sxtb	r3, r3
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	dbd1      	blt.n	800bb34 <decodePacket+0x1e>
exit:
 800bb90:	e000      	b.n	800bb94 <decodePacket+0x7e>
            goto exit;
 800bb92:	bf00      	nop
    return len;
 800bb94:	6a3b      	ldr	r3, [r7, #32]
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	372c      	adds	r7, #44	; 0x2c
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd90      	pop	{r4, r7, pc}

0800bb9e <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 800bb9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bba0:	b089      	sub	sp, #36	; 0x24
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	60f8      	str	r0, [r7, #12]
 800bba6:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 800bba8:	f04f 33ff 	mov.w	r3, #4294967295
 800bbac:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 800bbae:	2300      	movs	r3, #0
 800bbb0:	617b      	str	r3, [r7, #20]
    int len = 0;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbbe:	685c      	ldr	r4, [r3, #4]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	695e      	ldr	r6, [r3, #20]
 800bbc8:	68b8      	ldr	r0, [r7, #8]
 800bbca:	f000 fc23 	bl	800c414 <TimerLeftMS>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	2201      	movs	r2, #1
 800bbd2:	4631      	mov	r1, r6
 800bbd4:	4628      	mov	r0, r5
 800bbd6:	47a0      	blx	r4
 800bbd8:	4603      	mov	r3, r0
 800bbda:	2b01      	cmp	r3, #1
 800bbdc:	d13b      	bne.n	800bc56 <readPacket+0xb8>
        goto exit;

    len = 1;
 800bbde:	2301      	movs	r3, #1
 800bbe0:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 800bbe2:	68b8      	ldr	r0, [r7, #8]
 800bbe4:	f000 fc16 	bl	800c414 <TimerLeftMS>
 800bbe8:	4602      	mov	r2, r0
 800bbea:	f107 0310 	add.w	r3, r7, #16
 800bbee:	4619      	mov	r1, r3
 800bbf0:	68f8      	ldr	r0, [r7, #12]
 800bbf2:	f7ff ff90 	bl	800bb16 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	695b      	ldr	r3, [r3, #20]
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	693a      	ldr	r2, [r7, #16]
 800bbfe:	4611      	mov	r1, r2
 800bc00:	4618      	mov	r0, r3
 800bc02:	f000 ff6c 	bl	800cade <MQTTPacket_encode>
 800bc06:	4602      	mov	r2, r0
 800bc08:	69bb      	ldr	r3, [r7, #24]
 800bc0a:	4413      	add	r3, r2
 800bc0c:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	dd16      	ble.n	800bc42 <readPacket+0xa4>
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc18:	685c      	ldr	r4, [r3, #4]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	695a      	ldr	r2, [r3, #20]
 800bc22:	69bb      	ldr	r3, [r7, #24]
 800bc24:	18d6      	adds	r6, r2, r3
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	607b      	str	r3, [r7, #4]
 800bc2a:	68b8      	ldr	r0, [r7, #8]
 800bc2c:	f000 fbf2 	bl	800c414 <TimerLeftMS>
 800bc30:	4603      	mov	r3, r0
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	4631      	mov	r1, r6
 800bc36:	4628      	mov	r0, r5
 800bc38:	47a0      	blx	r4
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d10b      	bne.n	800bc5a <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	695b      	ldr	r3, [r3, #20]
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 800bc4a:	7d3b      	ldrb	r3, [r7, #20]
 800bc4c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800bc50:	b2db      	uxtb	r3, r3
 800bc52:	61fb      	str	r3, [r7, #28]
 800bc54:	e002      	b.n	800bc5c <readPacket+0xbe>
        goto exit;
 800bc56:	bf00      	nop
 800bc58:	e000      	b.n	800bc5c <readPacket+0xbe>
        goto exit;
 800bc5a:	bf00      	nop
exit:
    return rc;
 800bc5c:	69fb      	ldr	r3, [r7, #28]
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3724      	adds	r7, #36	; 0x24
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bc66 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 800bc66:	b480      	push	{r7}
 800bc68:	b087      	sub	sp, #28
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
 800bc6e:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	689b      	ldr	r3, [r3, #8]
 800bc78:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	461a      	mov	r2, r3
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	4413      	add	r3, r2
 800bc84:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 800bc86:	e039      	b.n	800bcfc <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	2b2f      	cmp	r3, #47	; 0x2f
 800bc8e:	d103      	bne.n	800bc98 <isTopicMatched+0x32>
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	2b2f      	cmp	r3, #47	; 0x2f
 800bc96:	d13a      	bne.n	800bd0e <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	781b      	ldrb	r3, [r3, #0]
 800bc9c:	2b2b      	cmp	r3, #43	; 0x2b
 800bc9e:	d009      	beq.n	800bcb4 <isTopicMatched+0x4e>
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	2b23      	cmp	r3, #35	; 0x23
 800bca6:	d005      	beq.n	800bcb4 <isTopicMatched+0x4e>
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	781a      	ldrb	r2, [r3, #0]
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d12e      	bne.n	800bd12 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	781b      	ldrb	r3, [r3, #0]
 800bcb8:	2b2b      	cmp	r3, #43	; 0x2b
 800bcba:	d112      	bne.n	800bce2 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 800bcc2:	e005      	b.n	800bcd0 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	613b      	str	r3, [r7, #16]
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	3301      	adds	r3, #1
 800bcce:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 800bcd0:	68fa      	ldr	r2, [r7, #12]
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d20b      	bcs.n	800bcf0 <isTopicMatched+0x8a>
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	2b2f      	cmp	r3, #47	; 0x2f
 800bcde:	d1f1      	bne.n	800bcc4 <isTopicMatched+0x5e>
 800bce0:	e006      	b.n	800bcf0 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	2b23      	cmp	r3, #35	; 0x23
 800bce8:	d102      	bne.n	800bcf0 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	3b01      	subs	r3, #1
 800bcee:	613b      	str	r3, [r7, #16]
        curf++;
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	617b      	str	r3, [r7, #20]
        curn++;
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	781b      	ldrb	r3, [r3, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d007      	beq.n	800bd14 <isTopicMatched+0xae>
 800bd04:	693a      	ldr	r2, [r7, #16]
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d3bd      	bcc.n	800bc88 <isTopicMatched+0x22>
 800bd0c:	e002      	b.n	800bd14 <isTopicMatched+0xae>
            break;
 800bd0e:	bf00      	nop
 800bd10:	e000      	b.n	800bd14 <isTopicMatched+0xae>
            break;
 800bd12:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 800bd14:	693a      	ldr	r2, [r7, #16]
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d105      	bne.n	800bd28 <isTopicMatched+0xc2>
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d101      	bne.n	800bd28 <isTopicMatched+0xc2>
 800bd24:	2301      	movs	r3, #1
 800bd26:	e000      	b.n	800bd2a <isTopicMatched+0xc4>
 800bd28:	2300      	movs	r3, #0
 800bd2a:	b2db      	uxtb	r3, r3
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	371c      	adds	r7, #28
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr

0800bd38 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b08a      	sub	sp, #40	; 0x28
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	60f8      	str	r0, [r7, #12]
 800bd40:	60b9      	str	r1, [r7, #8]
 800bd42:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 800bd44:	f04f 33ff 	mov.w	r3, #4294967295
 800bd48:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	627b      	str	r3, [r7, #36]	; 0x24
 800bd4e:	e03f      	b.n	800bdd0 <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 800bd50:	68fa      	ldr	r2, [r7, #12]
 800bd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd54:	3304      	adds	r3, #4
 800bd56:	00db      	lsls	r3, r3, #3
 800bd58:	4413      	add	r3, r2
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d034      	beq.n	800bdca <deliverMessage+0x92>
 800bd60:	68fa      	ldr	r2, [r7, #12]
 800bd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd64:	3304      	adds	r3, #4
 800bd66:	00db      	lsls	r3, r3, #3
 800bd68:	4413      	add	r3, r2
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	68b8      	ldr	r0, [r7, #8]
 800bd70:	f001 f884 	bl	800ce7c <MQTTPacket_equals>
 800bd74:	4603      	mov	r3, r0
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d10c      	bne.n	800bd94 <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 800bd7a:	68fa      	ldr	r2, [r7, #12]
 800bd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7e:	3304      	adds	r3, #4
 800bd80:	00db      	lsls	r3, r3, #3
 800bd82:	4413      	add	r3, r2
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	68b9      	ldr	r1, [r7, #8]
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f7ff ff6c 	bl	800bc66 <isTopicMatched>
 800bd8e:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d01a      	beq.n	800bdca <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 800bd94:	68fa      	ldr	r2, [r7, #12]
 800bd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd98:	3304      	adds	r3, #4
 800bd9a:	00db      	lsls	r3, r3, #3
 800bd9c:	4413      	add	r3, r2
 800bd9e:	689b      	ldr	r3, [r3, #8]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d012      	beq.n	800bdca <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 800bda4:	f107 0318 	add.w	r3, r7, #24
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	68b9      	ldr	r1, [r7, #8]
 800bdac:	4618      	mov	r0, r3
 800bdae:	f7ff fe00 	bl	800b9b2 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 800bdb2:	68fa      	ldr	r2, [r7, #12]
 800bdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb6:	3304      	adds	r3, #4
 800bdb8:	00db      	lsls	r3, r3, #3
 800bdba:	4413      	add	r3, r2
 800bdbc:	689b      	ldr	r3, [r3, #8]
 800bdbe:	f107 0218 	add.w	r2, r7, #24
 800bdc2:	4610      	mov	r0, r2
 800bdc4:	4798      	blx	r3
                rc = SUCCESSS;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800bdca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdcc:	3301      	adds	r3, #1
 800bdce:	627b      	str	r3, [r7, #36]	; 0x24
 800bdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd2:	2b04      	cmp	r3, #4
 800bdd4:	ddbc      	ble.n	800bd50 <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 800bdd6:	6a3b      	ldr	r3, [r7, #32]
 800bdd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bddc:	d112      	bne.n	800be04 <deliverMessage+0xcc>
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d00e      	beq.n	800be04 <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 800bde6:	f107 0310 	add.w	r3, r7, #16
 800bdea:	687a      	ldr	r2, [r7, #4]
 800bdec:	68b9      	ldr	r1, [r7, #8]
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f7ff fddf 	bl	800b9b2 <NewMessageData>
        c->defaultMessageHandler(&md);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdf8:	f107 0210 	add.w	r2, r7, #16
 800bdfc:	4610      	mov	r0, r2
 800bdfe:	4798      	blx	r3
        rc = SUCCESSS;
 800be00:	2300      	movs	r3, #0
 800be02:	623b      	str	r3, [r7, #32]
    }

    return rc;
 800be04:	6a3b      	ldr	r3, [r7, #32]
}
 800be06:	4618      	mov	r0, r3
 800be08:	3728      	adds	r7, #40	; 0x28
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <keepalive>:


int keepalive(MQTTClient* c)
{
 800be0e:	b580      	push	{r7, lr}
 800be10:	b086      	sub	sp, #24
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 800be16:	f04f 33ff 	mov.w	r3, #4294967295
 800be1a:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	699b      	ldr	r3, [r3, #24]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d102      	bne.n	800be2a <keepalive+0x1c>
    {
        rc = SUCCESSS;
 800be24:	2300      	movs	r3, #0
 800be26:	617b      	str	r3, [r7, #20]
        goto exit;
 800be28:	e033      	b.n	800be92 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	3354      	adds	r3, #84	; 0x54
 800be2e:	4618      	mov	r0, r3
 800be30:	f000 faae 	bl	800c390 <TimerIsExpired>
 800be34:	4603      	mov	r3, r0
 800be36:	2b00      	cmp	r3, #0
 800be38:	d02a      	beq.n	800be90 <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	7f1b      	ldrb	r3, [r3, #28]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d126      	bne.n	800be90 <keepalive+0x82>
        {
            Timer timer;
            TimerInit(&timer);
 800be42:	f107 0308 	add.w	r3, r7, #8
 800be46:	4618      	mov	r0, r3
 800be48:	f000 fa95 	bl	800c376 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 800be4c:	f107 0308 	add.w	r3, r7, #8
 800be50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800be54:	4618      	mov	r0, r3
 800be56:	f000 fab1 	bl	800c3bc <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	691a      	ldr	r2, [r3, #16]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	689b      	ldr	r3, [r3, #8]
 800be62:	4619      	mov	r1, r3
 800be64:	4610      	mov	r0, r2
 800be66:	f000 fd6e 	bl	800c946 <MQTTSerialize_pingreq>
 800be6a:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	dd0f      	ble.n	800be92 <keepalive+0x84>
 800be72:	f107 0308 	add.w	r3, r7, #8
 800be76:	461a      	mov	r2, r3
 800be78:	6939      	ldr	r1, [r7, #16]
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f7ff fdc4 	bl	800ba08 <sendPacket>
 800be80:	6178      	str	r0, [r7, #20]
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d104      	bne.n	800be92 <keepalive+0x84>
                c->ping_outstanding = 1;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2201      	movs	r2, #1
 800be8c:	771a      	strb	r2, [r3, #28]
 800be8e:	e000      	b.n	800be92 <keepalive+0x84>
        }
    }

exit:
 800be90:	bf00      	nop
    return rc;
 800be92:	697b      	ldr	r3, [r7, #20]
}
 800be94:	4618      	mov	r0, r3
 800be96:	3718      	adds	r7, #24
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 800be9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be9e:	b095      	sub	sp, #84	; 0x54
 800bea0:	af06      	add	r7, sp, #24
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 800bea6:	6839      	ldr	r1, [r7, #0]
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f7ff fe78 	bl	800bb9e <readPacket>
 800beae:	4603      	mov	r3, r0
 800beb0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    int len = 0,
 800beb2:	2300      	movs	r3, #0
 800beb4:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESSS;
 800beb6:	2300      	movs	r3, #0
 800beb8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
 800beba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bebc:	3b02      	subs	r3, #2
 800bebe:	2b0b      	cmp	r3, #11
 800bec0:	f200 80c0 	bhi.w	800c044 <cycle+0x1a8>
 800bec4:	a201      	add	r2, pc, #4	; (adr r2, 800becc <cycle+0x30>)
 800bec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beca:	bf00      	nop
 800becc:	0800c045 	.word	0x0800c045
 800bed0:	0800befd 	.word	0x0800befd
 800bed4:	0800c045 	.word	0x0800c045
 800bed8:	0800bfc5 	.word	0x0800bfc5
 800bedc:	0800c045 	.word	0x0800c045
 800bee0:	0800c045 	.word	0x0800c045
 800bee4:	0800c045 	.word	0x0800c045
 800bee8:	0800c045 	.word	0x0800c045
 800beec:	0800c045 	.word	0x0800c045
 800bef0:	0800c045 	.word	0x0800c045
 800bef4:	0800c045 	.word	0x0800c045
 800bef8:	0800c037 	.word	0x0800c037
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 800bf04:	4616      	mov	r6, r2
 800bf06:	f107 0210 	add.w	r2, r7, #16
 800bf0a:	1d15      	adds	r5, r2, #4
 800bf0c:	f107 0210 	add.w	r2, r7, #16
 800bf10:	1c54      	adds	r4, r2, #1
 800bf12:	f107 010c 	add.w	r1, r7, #12
 800bf16:	f107 0210 	add.w	r2, r7, #16
 800bf1a:	1c90      	adds	r0, r2, #2
 800bf1c:	9604      	str	r6, [sp, #16]
 800bf1e:	9303      	str	r3, [sp, #12]
 800bf20:	f107 0310 	add.w	r3, r7, #16
 800bf24:	330c      	adds	r3, #12
 800bf26:	9302      	str	r3, [sp, #8]
 800bf28:	f107 0310 	add.w	r3, r7, #16
 800bf2c:	3308      	adds	r3, #8
 800bf2e:	9301      	str	r3, [sp, #4]
 800bf30:	f107 0320 	add.w	r3, r7, #32
 800bf34:	9300      	str	r3, [sp, #0]
 800bf36:	462b      	mov	r3, r5
 800bf38:	4622      	mov	r2, r4
 800bf3a:	f000 fd13 	bl	800c964 <MQTTDeserialize_publish>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	2b01      	cmp	r3, #1
 800bf42:	f040 8083 	bne.w	800c04c <cycle+0x1b0>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	b2db      	uxtb	r3, r3
 800bf4a:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 800bf4c:	f107 0210 	add.w	r2, r7, #16
 800bf50:	f107 0320 	add.w	r3, r7, #32
 800bf54:	4619      	mov	r1, r3
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f7ff feee 	bl	800bd38 <deliverMessage>
            if (msg.qos != QOS0)
 800bf5c:	7c3b      	ldrb	r3, [r7, #16]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d06d      	beq.n	800c03e <cycle+0x1a2>
            {
                if (msg.qos == QOS1)
 800bf62:	7c3b      	ldrb	r3, [r7, #16]
 800bf64:	2b01      	cmp	r3, #1
 800bf66:	d10c      	bne.n	800bf82 <cycle+0xe6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6918      	ldr	r0, [r3, #16]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	689b      	ldr	r3, [r3, #8]
 800bf70:	4619      	mov	r1, r3
 800bf72:	8abb      	ldrh	r3, [r7, #20]
 800bf74:	9300      	str	r3, [sp, #0]
 800bf76:	2300      	movs	r3, #0
 800bf78:	2204      	movs	r2, #4
 800bf7a:	f001 f84c 	bl	800d016 <MQTTSerialize_ack>
 800bf7e:	6378      	str	r0, [r7, #52]	; 0x34
 800bf80:	e00e      	b.n	800bfa0 <cycle+0x104>
                else if (msg.qos == QOS2)
 800bf82:	7c3b      	ldrb	r3, [r7, #16]
 800bf84:	2b02      	cmp	r3, #2
 800bf86:	d10b      	bne.n	800bfa0 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6918      	ldr	r0, [r3, #16]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	689b      	ldr	r3, [r3, #8]
 800bf90:	4619      	mov	r1, r3
 800bf92:	8abb      	ldrh	r3, [r7, #20]
 800bf94:	9300      	str	r3, [sp, #0]
 800bf96:	2300      	movs	r3, #0
 800bf98:	2205      	movs	r2, #5
 800bf9a:	f001 f83c 	bl	800d016 <MQTTSerialize_ack>
 800bf9e:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 800bfa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	dc03      	bgt.n	800bfae <cycle+0x112>
                    rc = FAILURE;
 800bfa6:	f04f 33ff 	mov.w	r3, #4294967295
 800bfaa:	633b      	str	r3, [r7, #48]	; 0x30
 800bfac:	e005      	b.n	800bfba <cycle+0x11e>
                else
                    rc = sendPacket(c, len, timer);
 800bfae:	683a      	ldr	r2, [r7, #0]
 800bfb0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f7ff fd28 	bl	800ba08 <sendPacket>
 800bfb8:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 800bfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc0:	d13d      	bne.n	800c03e <cycle+0x1a2>
                    goto exit; // there was a problem
 800bfc2:	e044      	b.n	800c04e <cycle+0x1b2>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	695c      	ldr	r4, [r3, #20]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	68db      	ldr	r3, [r3, #12]
 800bfcc:	f107 020a 	add.w	r2, r7, #10
 800bfd0:	f107 0109 	add.w	r1, r7, #9
 800bfd4:	f107 0008 	add.w	r0, r7, #8
 800bfd8:	9300      	str	r3, [sp, #0]
 800bfda:	4623      	mov	r3, r4
 800bfdc:	f000 fd34 	bl	800ca48 <MQTTDeserialize_ack>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	d003      	beq.n	800bfee <cycle+0x152>
                rc = FAILURE;
 800bfe6:	f04f 33ff 	mov.w	r3, #4294967295
 800bfea:	633b      	str	r3, [r7, #48]	; 0x30
 800bfec:	e01e      	b.n	800c02c <cycle+0x190>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6918      	ldr	r0, [r3, #16]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	689b      	ldr	r3, [r3, #8]
 800bff6:	4619      	mov	r1, r3
 800bff8:	897b      	ldrh	r3, [r7, #10]
 800bffa:	9300      	str	r3, [sp, #0]
 800bffc:	2300      	movs	r3, #0
 800bffe:	2206      	movs	r2, #6
 800c000:	f001 f809 	bl	800d016 <MQTTSerialize_ack>
 800c004:	6378      	str	r0, [r7, #52]	; 0x34
 800c006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c008:	2b00      	cmp	r3, #0
 800c00a:	dc03      	bgt.n	800c014 <cycle+0x178>
                rc = FAILURE;
 800c00c:	f04f 33ff 	mov.w	r3, #4294967295
 800c010:	633b      	str	r3, [r7, #48]	; 0x30
 800c012:	e00b      	b.n	800c02c <cycle+0x190>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
 800c014:	683a      	ldr	r2, [r7, #0]
 800c016:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f7ff fcf5 	bl	800ba08 <sendPacket>
 800c01e:	6338      	str	r0, [r7, #48]	; 0x30
 800c020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c022:	2b00      	cmp	r3, #0
 800c024:	d002      	beq.n	800c02c <cycle+0x190>
                rc = FAILURE; // there was a problem
 800c026:	f04f 33ff 	mov.w	r3, #4294967295
 800c02a:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 800c02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c032:	d106      	bne.n	800c042 <cycle+0x1a6>
                goto exit; // there was a problem
 800c034:	e00b      	b.n	800c04e <cycle+0x1b2>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2200      	movs	r2, #0
 800c03a:	771a      	strb	r2, [r3, #28]
            break;
 800c03c:	e002      	b.n	800c044 <cycle+0x1a8>
            break;
 800c03e:	bf00      	nop
 800c040:	e000      	b.n	800c044 <cycle+0x1a8>
            break;
 800c042:	bf00      	nop
    }
    keepalive(c);
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f7ff fee2 	bl	800be0e <keepalive>
 800c04a:	e000      	b.n	800c04e <cycle+0x1b2>
                goto exit;
 800c04c:	bf00      	nop
exit:
    if (rc == SUCCESSS)
 800c04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c050:	2b00      	cmp	r3, #0
 800c052:	d101      	bne.n	800c058 <cycle+0x1bc>
        rc = packet_type;
 800c054:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c056:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
 800c058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	373c      	adds	r7, #60	; 0x3c
 800c05e:	46bd      	mov	sp, r7
 800c060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c062:	bf00      	nop

0800c064 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b086      	sub	sp, #24
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	6039      	str	r1, [r7, #0]
    int rc = SUCCESSS;
 800c06e:	2300      	movs	r3, #0
 800c070:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 800c072:	f107 030c 	add.w	r3, r7, #12
 800c076:	4618      	mov	r0, r3
 800c078:	f000 f97d 	bl	800c376 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 800c07c:	683a      	ldr	r2, [r7, #0]
 800c07e:	f107 030c 	add.w	r3, r7, #12
 800c082:	4611      	mov	r1, r2
 800c084:	4618      	mov	r0, r3
 800c086:	f000 f999 	bl	800c3bc <TimerCountdownMS>

    if (cycle(c, &timer) == FAILURE)
 800c08a:	f107 030c 	add.w	r3, r7, #12
 800c08e:	4619      	mov	r1, r3
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f7ff ff03 	bl	800be9c <cycle>
 800c096:	4603      	mov	r3, r0
 800c098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c09c:	d102      	bne.n	800c0a4 <MQTTYield+0x40>
    {
        rc = FAILURE;
 800c09e:	f04f 33ff 	mov.w	r3, #4294967295
 800c0a2:	617b      	str	r3, [r7, #20]
    }

    return rc;
 800c0a4:	697b      	ldr	r3, [r7, #20]
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3718      	adds	r7, #24
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 800c0ae:	b580      	push	{r7, lr}
 800c0b0:	b086      	sub	sp, #24
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	60f8      	str	r0, [r7, #12]
 800c0b6:	60b9      	str	r1, [r7, #8]
 800c0b8:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 800c0ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c0be:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f000 f965 	bl	800c390 <TimerIsExpired>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d109      	bne.n	800c0e0 <waitfor+0x32>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);
 800c0cc:	6879      	ldr	r1, [r7, #4]
 800c0ce:	68f8      	ldr	r0, [r7, #12]
 800c0d0:	f7ff fee4 	bl	800be9c <cycle>
 800c0d4:	6178      	str	r0, [r7, #20]
 800c0d6:	697a      	ldr	r2, [r7, #20]
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d1f0      	bne.n	800c0c0 <waitfor+0x12>
 800c0de:	e000      	b.n	800c0e2 <waitfor+0x34>
            break; // we timed out
 800c0e0:	bf00      	nop

    return rc;
 800c0e2:	697b      	ldr	r3, [r7, #20]
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3718      	adds	r7, #24
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b09e      	sub	sp, #120	; 0x78
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
 800c0f4:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 800c0f6:	f04f 33ff 	mov.w	r3, #4294967295
 800c0fa:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 800c0fc:	4a3d      	ldr	r2, [pc, #244]	; (800c1f4 <MQTTConnect+0x108>)
 800c0fe:	f107 0310 	add.w	r3, r7, #16
 800c102:	4611      	mov	r1, r2
 800c104:	2258      	movs	r2, #88	; 0x58
 800c106:	4618      	mov	r0, r3
 800c108:	f001 fe68 	bl	800dddc <memcpy>
    int len = 0;
 800c10c:	2300      	movs	r3, #0
 800c10e:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6a1b      	ldr	r3, [r3, #32]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d15d      	bne.n	800c1d4 <MQTTConnect+0xe8>
		goto exit;

    TimerInit(&connect_timer);
 800c118:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c11c:	4618      	mov	r0, r3
 800c11e:	f000 f92a 	bl	800c376 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	685a      	ldr	r2, [r3, #4]
 800c126:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c12a:	4611      	mov	r1, r2
 800c12c:	4618      	mov	r0, r3
 800c12e:	f000 f945 	bl	800c3bc <TimerCountdownMS>

    if (options == 0)
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d102      	bne.n	800c13e <MQTTConnect+0x52>
        options = &default_options; /* set default options if none were supplied */
 800c138:	f107 0310 	add.w	r3, r7, #16
 800c13c:	603b      	str	r3, [r7, #0]

    c->keepAliveInterval = options->keepAliveInterval;
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	8b1b      	ldrh	r3, [r3, #24]
 800c142:	461a      	mov	r2, r3
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	699b      	ldr	r3, [r3, #24]
 800c152:	4619      	mov	r1, r3
 800c154:	4610      	mov	r0, r2
 800c156:	f000 f945 	bl	800c3e4 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6918      	ldr	r0, [r3, #16]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	689b      	ldr	r3, [r3, #8]
 800c162:	683a      	ldr	r2, [r7, #0]
 800c164:	4619      	mov	r1, r3
 800c166:	f000 fa75 	bl	800c654 <MQTTSerialize_connect>
 800c16a:	6738      	str	r0, [r7, #112]	; 0x70
 800c16c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c16e:	2b00      	cmp	r3, #0
 800c170:	dd32      	ble.n	800c1d8 <MQTTConnect+0xec>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
 800c172:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c176:	461a      	mov	r2, r3
 800c178:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f7ff fc44 	bl	800ba08 <sendPacket>
 800c180:	6778      	str	r0, [r7, #116]	; 0x74
 800c182:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c184:	2b00      	cmp	r3, #0
 800c186:	d129      	bne.n	800c1dc <MQTTConnect+0xf0>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 800c188:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c18c:	461a      	mov	r2, r3
 800c18e:	2102      	movs	r1, #2
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f7ff ff8c 	bl	800c0ae <waitfor>
 800c196:	4603      	mov	r3, r0
 800c198:	2b02      	cmp	r3, #2
 800c19a:	d117      	bne.n	800c1cc <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 800c19c:	23ff      	movs	r3, #255	; 0xff
 800c19e:	73fb      	strb	r3, [r7, #15]
        unsigned char sessionPresent = 0;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	695a      	ldr	r2, [r3, #20]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	f107 010f 	add.w	r1, r7, #15
 800c1b0:	f107 000e 	add.w	r0, r7, #14
 800c1b4:	f000 fb3a 	bl	800c82c <MQTTDeserialize_connack>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	d102      	bne.n	800c1c4 <MQTTConnect+0xd8>
            rc = connack_rc;
 800c1be:	7bfb      	ldrb	r3, [r7, #15]
 800c1c0:	677b      	str	r3, [r7, #116]	; 0x74
 800c1c2:	e00c      	b.n	800c1de <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 800c1c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c1c8:	677b      	str	r3, [r7, #116]	; 0x74
 800c1ca:	e008      	b.n	800c1de <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 800c1cc:	f04f 33ff 	mov.w	r3, #4294967295
 800c1d0:	677b      	str	r3, [r7, #116]	; 0x74
 800c1d2:	e004      	b.n	800c1de <MQTTConnect+0xf2>
		goto exit;
 800c1d4:	bf00      	nop
 800c1d6:	e002      	b.n	800c1de <MQTTConnect+0xf2>
        goto exit;
 800c1d8:	bf00      	nop
 800c1da:	e000      	b.n	800c1de <MQTTConnect+0xf2>
        goto exit; // there was a problem
 800c1dc:	bf00      	nop

exit:
    if (rc == SUCCESSS)
 800c1de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d102      	bne.n	800c1ea <MQTTConnect+0xfe>
        c->isconnected = 1;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
 800c1ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3778      	adds	r7, #120	; 0x78
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}
 800c1f4:	0800fab8 	.word	0x0800fab8

0800c1f8 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 800c1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1fa:	b097      	sub	sp, #92	; 0x5c
 800c1fc:	af08      	add	r7, sp, #32
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	60b9      	str	r1, [r7, #8]
 800c202:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 800c204:	f04f 33ff 	mov.w	r3, #4294967295
 800c208:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 800c20a:	2300      	movs	r3, #0
 800c20c:	61fb      	str	r3, [r7, #28]
 800c20e:	2300      	movs	r3, #0
 800c210:	623b      	str	r3, [r7, #32]
 800c212:	2300      	movs	r3, #0
 800c214:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	61fb      	str	r3, [r7, #28]
    int len = 0;
 800c21a:	2300      	movs	r3, #0
 800c21c:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	6a1b      	ldr	r3, [r3, #32]
 800c222:	2b00      	cmp	r3, #0
 800c224:	f000 809b 	beq.w	800c35e <MQTTPublish+0x166>
		goto exit;

    TimerInit(&timer);
 800c228:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c22c:	4618      	mov	r0, r3
 800c22e:	f000 f8a2 	bl	800c376 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	685a      	ldr	r2, [r3, #4]
 800c236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c23a:	4611      	mov	r1, r2
 800c23c:	4618      	mov	r0, r3
 800c23e:	f000 f8bd 	bl	800c3bc <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	2b01      	cmp	r3, #1
 800c248:	d003      	beq.n	800c252 <MQTTPublish+0x5a>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	781b      	ldrb	r3, [r3, #0]
 800c24e:	2b02      	cmp	r3, #2
 800c250:	d106      	bne.n	800c260 <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 800c252:	68f8      	ldr	r0, [r7, #12]
 800c254:	f7ff fbbf 	bl	800b9d6 <getNextPacketId>
 800c258:	4603      	mov	r3, r0
 800c25a:	b29a      	uxth	r2, r3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	691b      	ldr	r3, [r3, #16]
 800c264:	603b      	str	r3, [r7, #0]
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	469c      	mov	ip, r3
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	469e      	mov	lr, r3
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	785d      	ldrb	r5, [r3, #1]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	689b      	ldr	r3, [r3, #8]
 800c27e:	687a      	ldr	r2, [r7, #4]
 800c280:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 800c282:	9206      	str	r2, [sp, #24]
 800c284:	9305      	str	r3, [sp, #20]
 800c286:	ac02      	add	r4, sp, #8
 800c288:	f107 031c 	add.w	r3, r7, #28
 800c28c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c290:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c294:	9601      	str	r6, [sp, #4]
 800c296:	9500      	str	r5, [sp, #0]
 800c298:	4673      	mov	r3, lr
 800c29a:	2200      	movs	r2, #0
 800c29c:	4661      	mov	r1, ip
 800c29e:	6838      	ldr	r0, [r7, #0]
 800c2a0:	f000 fe43 	bl	800cf2a <MQTTSerialize_publish>
 800c2a4:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 800c2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	dd5a      	ble.n	800c362 <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 800c2ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c2b4:	68f8      	ldr	r0, [r7, #12]
 800c2b6:	f7ff fba7 	bl	800ba08 <sendPacket>
 800c2ba:	6378      	str	r0, [r7, #52]	; 0x34
 800c2bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d151      	bne.n	800c366 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	d122      	bne.n	800c310 <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 800c2ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	2104      	movs	r1, #4
 800c2d2:	68f8      	ldr	r0, [r7, #12]
 800c2d4:	f7ff feeb 	bl	800c0ae <waitfor>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b04      	cmp	r3, #4
 800c2dc:	d114      	bne.n	800c308 <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	695c      	ldr	r4, [r3, #20]
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	68db      	ldr	r3, [r3, #12]
 800c2e6:	f107 021a 	add.w	r2, r7, #26
 800c2ea:	f107 0119 	add.w	r1, r7, #25
 800c2ee:	f107 0018 	add.w	r0, r7, #24
 800c2f2:	9300      	str	r3, [sp, #0]
 800c2f4:	4623      	mov	r3, r4
 800c2f6:	f000 fba7 	bl	800ca48 <MQTTDeserialize_ack>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	d035      	beq.n	800c36c <MQTTPublish+0x174>
                rc = FAILURE;
 800c300:	f04f 33ff 	mov.w	r3, #4294967295
 800c304:	637b      	str	r3, [r7, #52]	; 0x34
 800c306:	e031      	b.n	800c36c <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 800c308:	f04f 33ff 	mov.w	r3, #4294967295
 800c30c:	637b      	str	r3, [r7, #52]	; 0x34
 800c30e:	e02d      	b.n	800c36c <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	781b      	ldrb	r3, [r3, #0]
 800c314:	2b02      	cmp	r3, #2
 800c316:	d128      	bne.n	800c36a <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 800c318:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c31c:	461a      	mov	r2, r3
 800c31e:	2107      	movs	r1, #7
 800c320:	68f8      	ldr	r0, [r7, #12]
 800c322:	f7ff fec4 	bl	800c0ae <waitfor>
 800c326:	4603      	mov	r3, r0
 800c328:	2b07      	cmp	r3, #7
 800c32a:	d114      	bne.n	800c356 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	695c      	ldr	r4, [r3, #20]
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	68db      	ldr	r3, [r3, #12]
 800c334:	f107 0216 	add.w	r2, r7, #22
 800c338:	f107 0115 	add.w	r1, r7, #21
 800c33c:	f107 0014 	add.w	r0, r7, #20
 800c340:	9300      	str	r3, [sp, #0]
 800c342:	4623      	mov	r3, r4
 800c344:	f000 fb80 	bl	800ca48 <MQTTDeserialize_ack>
 800c348:	4603      	mov	r3, r0
 800c34a:	2b01      	cmp	r3, #1
 800c34c:	d00e      	beq.n	800c36c <MQTTPublish+0x174>
                rc = FAILURE;
 800c34e:	f04f 33ff 	mov.w	r3, #4294967295
 800c352:	637b      	str	r3, [r7, #52]	; 0x34
 800c354:	e00a      	b.n	800c36c <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 800c356:	f04f 33ff 	mov.w	r3, #4294967295
 800c35a:	637b      	str	r3, [r7, #52]	; 0x34
 800c35c:	e006      	b.n	800c36c <MQTTPublish+0x174>
		goto exit;
 800c35e:	bf00      	nop
 800c360:	e004      	b.n	800c36c <MQTTPublish+0x174>
        goto exit;
 800c362:	bf00      	nop
 800c364:	e002      	b.n	800c36c <MQTTPublish+0x174>
        goto exit; // there was a problem
 800c366:	bf00      	nop
 800c368:	e000      	b.n	800c36c <MQTTPublish+0x174>
    }

exit:
 800c36a:	bf00      	nop
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 800c36c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c36e:	4618      	mov	r0, r3
 800c370:	373c      	adds	r7, #60	; 0x3c
 800c372:	46bd      	mov	sp, r7
 800c374:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c376 <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 800c376:	b480      	push	{r7}
 800c378:	b083      	sub	sp, #12
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2200      	movs	r2, #0
 800c382:	605a      	str	r2, [r3, #4]
}
 800c384:	bf00      	nop
 800c386:	370c      	adds	r7, #12
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr

0800c390 <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 800c390:	b480      	push	{r7}
 800c392:	b085      	sub	sp, #20
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	685a      	ldr	r2, [r3, #4]
 800c39c:	4b06      	ldr	r3, [pc, #24]	; (800c3b8 <TimerIsExpired+0x28>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	1ad3      	subs	r3, r2, r3
 800c3a2:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	0fdb      	lsrs	r3, r3, #31
 800c3a8:	b2db      	uxtb	r3, r3
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3714      	adds	r7, #20
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b4:	4770      	bx	lr
 800c3b6:	bf00      	nop
 800c3b8:	20003778 	.word	0x20003778

0800c3bc <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 800c3bc:	b480      	push	{r7}
 800c3be:	b083      	sub	sp, #12
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 800c3c6:	4b06      	ldr	r3, [pc, #24]	; (800c3e0 <TimerCountdownMS+0x24>)
 800c3c8:	681a      	ldr	r2, [r3, #0]
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	441a      	add	r2, r3
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	605a      	str	r2, [r3, #4]
}
 800c3d2:	bf00      	nop
 800c3d4:	370c      	adds	r7, #12
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr
 800c3de:	bf00      	nop
 800c3e0:	20003778 	.word	0x20003778

0800c3e4 <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 800c3e4:	b480      	push	{r7}
 800c3e6:	b083      	sub	sp, #12
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c3f4:	fb03 f202 	mul.w	r2, r3, r2
 800c3f8:	4b05      	ldr	r3, [pc, #20]	; (800c410 <TimerCountdown+0x2c>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	441a      	add	r2, r3
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	605a      	str	r2, [r3, #4]
}
 800c402:	bf00      	nop
 800c404:	370c      	adds	r7, #12
 800c406:	46bd      	mov	sp, r7
 800c408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40c:	4770      	bx	lr
 800c40e:	bf00      	nop
 800c410:	20003778 	.word	0x20003778

0800c414 <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 800c414:	b480      	push	{r7}
 800c416:	b085      	sub	sp, #20
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	685a      	ldr	r2, [r3, #4]
 800c420:	4b06      	ldr	r3, [pc, #24]	; (800c43c <TimerLeftMS+0x28>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	1ad3      	subs	r3, r2, r3
 800c426:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3714      	adds	r7, #20
 800c432:	46bd      	mov	sp, r7
 800c434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c438:	4770      	bx	lr
 800c43a:	bf00      	nop
 800c43c:	20003778 	.word	0x20003778

0800c440 <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 800c440:	b480      	push	{r7}
 800c442:	b083      	sub	sp, #12
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
 800c448:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	683a      	ldr	r2, [r7, #0]
 800c44e:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	4a07      	ldr	r2, [pc, #28]	; (800c470 <NewNetwork+0x30>)
 800c454:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	4a06      	ldr	r2, [pc, #24]	; (800c474 <NewNetwork+0x34>)
 800c45a:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	4a06      	ldr	r2, [pc, #24]	; (800c478 <NewNetwork+0x38>)
 800c460:	60da      	str	r2, [r3, #12]
}
 800c462:	bf00      	nop
 800c464:	370c      	adds	r7, #12
 800c466:	46bd      	mov	sp, r7
 800c468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46c:	4770      	bx	lr
 800c46e:	bf00      	nop
 800c470:	0800c47d 	.word	0x0800c47d
 800c474:	0800c4d7 	.word	0x0800c4d7
 800c478:	0800c51f 	.word	0x0800c51f

0800c47c <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b084      	sub	sp, #16
 800c480:	af00      	add	r7, sp, #0
 800c482:	60f8      	str	r0, [r7, #12]
 800c484:	60b9      	str	r1, [r7, #8]
 800c486:	607a      	str	r2, [r7, #4]
 800c488:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	009b      	lsls	r3, r3, #2
 800c490:	3301      	adds	r3, #1
 800c492:	00db      	lsls	r3, r3, #3
 800c494:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c498:	4618      	mov	r0, r3
 800c49a:	f7fd fe19 	bl	800a0d0 <WIZCHIP_READ>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	2b17      	cmp	r3, #23
 800c4a2:	d113      	bne.n	800c4cc <w5x00_read+0x50>
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	b2db      	uxtb	r3, r3
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7fd ffb5 	bl	800a41a <getSn_RX_RSR>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d00a      	beq.n	800c4cc <w5x00_read+0x50>
		return recv(n->my_socket, buffer, len);
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	b2db      	uxtb	r3, r3
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	b292      	uxth	r2, r2
 800c4c0:	68b9      	ldr	r1, [r7, #8]
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7fe fcc4 	bl	800ae50 <recv>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	e000      	b.n	800c4ce <w5x00_read+0x52>

	return SOCK_ERROR;
 800c4cc:	2300      	movs	r3, #0
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3710      	adds	r7, #16
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}

0800c4d6 <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 800c4d6:	b580      	push	{r7, lr}
 800c4d8:	b084      	sub	sp, #16
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	60f8      	str	r0, [r7, #12]
 800c4de:	60b9      	str	r1, [r7, #8]
 800c4e0:	607a      	str	r2, [r7, #4]
 800c4e2:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	009b      	lsls	r3, r3, #2
 800c4ea:	3301      	adds	r3, #1
 800c4ec:	00db      	lsls	r3, r3, #3
 800c4ee:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f7fd fdec 	bl	800a0d0 <WIZCHIP_READ>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	2b17      	cmp	r3, #23
 800c4fc:	d10a      	bne.n	800c514 <w5x00_write+0x3e>
		return send(n->my_socket, buffer, len);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	b2db      	uxtb	r3, r3
 800c504:	687a      	ldr	r2, [r7, #4]
 800c506:	b292      	uxth	r2, r2
 800c508:	68b9      	ldr	r1, [r7, #8]
 800c50a:	4618      	mov	r0, r3
 800c50c:	f7fe fba6 	bl	800ac5c <send>
 800c510:	4603      	mov	r3, r0
 800c512:	e000      	b.n	800c516 <w5x00_write+0x40>

	return SOCK_ERROR;
 800c514:	2300      	movs	r3, #0
}
 800c516:	4618      	mov	r0, r3
 800c518:	3710      	adds	r7, #16
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}

0800c51e <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 800c51e:	b580      	push	{r7, lr}
 800c520:	b082      	sub	sp, #8
 800c522:	af00      	add	r7, sp, #0
 800c524:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	b2db      	uxtb	r3, r3
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7fe fb1f 	bl	800ab70 <disconnect>
}
 800c532:	bf00      	nop
 800c534:	3708      	adds	r7, #8
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}

0800c53a <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 800c53a:	b580      	push	{r7, lr}
 800c53c:	b086      	sub	sp, #24
 800c53e:	af00      	add	r7, sp, #0
 800c540:	60f8      	str	r0, [r7, #12]
 800c542:	60b9      	str	r1, [r7, #8]
 800c544:	4613      	mov	r3, r2
 800c546:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 800c548:	f243 0339 	movw	r3, #12345	; 0x3039
 800c54c:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	b2d8      	uxtb	r0, r3
 800c554:	8afa      	ldrh	r2, [r7, #22]
 800c556:	2300      	movs	r3, #0
 800c558:	2101      	movs	r1, #1
 800c55a:	f7fe f8a9 	bl	800a6b0 <socket>
 800c55e:	4603      	mov	r3, r0
 800c560:	461a      	mov	r2, r3
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	429a      	cmp	r2, r3
 800c568:	d001      	beq.n	800c56e <ConnectNetwork+0x34>
		return SOCK_ERROR;
 800c56a:	2300      	movs	r3, #0
 800c56c:	e00d      	b.n	800c58a <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	b2db      	uxtb	r3, r3
 800c574:	88fa      	ldrh	r2, [r7, #6]
 800c576:	68b9      	ldr	r1, [r7, #8]
 800c578:	4618      	mov	r0, r3
 800c57a:	f7fe fa1d 	bl	800a9b8 <connect>
 800c57e:	4603      	mov	r3, r0
 800c580:	2b01      	cmp	r3, #1
 800c582:	d001      	beq.n	800c588 <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 800c584:	2300      	movs	r3, #0
 800c586:	e000      	b.n	800c58a <ConnectNetwork+0x50>

	return SOCK_OK;
 800c588:	2301      	movs	r3, #1
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3718      	adds	r7, #24
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}

0800c592 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 800c592:	b590      	push	{r4, r7, lr}
 800c594:	b085      	sub	sp, #20
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
	int len = 0;
 800c59a:	2300      	movs	r3, #0
 800c59c:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	7a1b      	ldrb	r3, [r3, #8]
 800c5a2:	2b03      	cmp	r3, #3
 800c5a4:	d102      	bne.n	800c5ac <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 800c5a6:	230c      	movs	r3, #12
 800c5a8:	60fb      	str	r3, [r7, #12]
 800c5aa:	e005      	b.n	800c5b8 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	7a1b      	ldrb	r3, [r3, #8]
 800c5b0:	2b04      	cmp	r3, #4
 800c5b2:	d101      	bne.n	800c5b8 <MQTTSerialize_connectLength+0x26>
		len = 10;
 800c5b4:	230a      	movs	r3, #10
 800c5b6:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	330c      	adds	r3, #12
 800c5bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c5c0:	f000 fc43 	bl	800ce4a <MQTTstrlen>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	3302      	adds	r3, #2
 800c5c8:	68fa      	ldr	r2, [r7, #12]
 800c5ca:	4413      	add	r3, r2
 800c5cc:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	7edb      	ldrb	r3, [r3, #27]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d013      	beq.n	800c5fe <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	3324      	adds	r3, #36	; 0x24
 800c5da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c5de:	f000 fc34 	bl	800ce4a <MQTTstrlen>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	1c9c      	adds	r4, r3, #2
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	3330      	adds	r3, #48	; 0x30
 800c5ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c5ee:	f000 fc2c 	bl	800ce4a <MQTTstrlen>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	4423      	add	r3, r4
 800c5f6:	3302      	adds	r3, #2
 800c5f8:	68fa      	ldr	r2, [r7, #12]
 800c5fa:	4413      	add	r3, r2
 800c5fc:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c602:	2b00      	cmp	r3, #0
 800c604:	d103      	bne.n	800c60e <MQTTSerialize_connectLength+0x7c>
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d00a      	beq.n	800c624 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	3340      	adds	r3, #64	; 0x40
 800c612:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c616:	f000 fc18 	bl	800ce4a <MQTTstrlen>
 800c61a:	4603      	mov	r3, r0
 800c61c:	3302      	adds	r3, #2
 800c61e:	68fa      	ldr	r2, [r7, #12]
 800c620:	4413      	add	r3, r2
 800c622:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d103      	bne.n	800c634 <MQTTSerialize_connectLength+0xa2>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c630:	2b00      	cmp	r3, #0
 800c632:	d00a      	beq.n	800c64a <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	334c      	adds	r3, #76	; 0x4c
 800c638:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c63c:	f000 fc05 	bl	800ce4a <MQTTstrlen>
 800c640:	4603      	mov	r3, r0
 800c642:	3302      	adds	r3, #2
 800c644:	68fa      	ldr	r2, [r7, #12]
 800c646:	4413      	add	r3, r2
 800c648:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 800c64a:	68fb      	ldr	r3, [r7, #12]
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3714      	adds	r7, #20
 800c650:	46bd      	mov	sp, r7
 800c652:	bd90      	pop	{r4, r7, pc}

0800c654 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b08a      	sub	sp, #40	; 0x28
 800c658:	af00      	add	r7, sp, #0
 800c65a:	60f8      	str	r0, [r7, #12]
 800c65c:	60b9      	str	r1, [r7, #8]
 800c65e:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 800c664:	2300      	movs	r3, #0
 800c666:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 800c668:	2300      	movs	r3, #0
 800c66a:	617b      	str	r3, [r7, #20]
	int len = 0;
 800c66c:	2300      	movs	r3, #0
 800c66e:	623b      	str	r3, [r7, #32]
	int rc = -1;
 800c670:	f04f 33ff 	mov.w	r3, #4294967295
 800c674:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f7ff ff8b 	bl	800c592 <MQTTSerialize_connectLength>
 800c67c:	6238      	str	r0, [r7, #32]
 800c67e:	6a38      	ldr	r0, [r7, #32]
 800c680:	f000 fa98 	bl	800cbb4 <MQTTPacket_len>
 800c684:	4602      	mov	r2, r0
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	4293      	cmp	r3, r2
 800c68a:	da03      	bge.n	800c694 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800c68c:	f06f 0301 	mvn.w	r3, #1
 800c690:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 800c692:	e0c2      	b.n	800c81a <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 800c694:	2300      	movs	r3, #0
 800c696:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 800c698:	7e3b      	ldrb	r3, [r7, #24]
 800c69a:	2201      	movs	r2, #1
 800c69c:	f362 1307 	bfi	r3, r2, #4, #4
 800c6a0:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800c6a2:	7e3a      	ldrb	r2, [r7, #24]
 800c6a4:	f107 031c 	add.w	r3, r7, #28
 800c6a8:	4611      	mov	r1, r2
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f000 fb11 	bl	800ccd2 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 800c6b0:	69fb      	ldr	r3, [r7, #28]
 800c6b2:	6a39      	ldr	r1, [r7, #32]
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f000 fa12 	bl	800cade <MQTTPacket_encode>
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	69fb      	ldr	r3, [r7, #28]
 800c6be:	4413      	add	r3, r2
 800c6c0:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	7a1b      	ldrb	r3, [r3, #8]
 800c6c6:	2b04      	cmp	r3, #4
 800c6c8:	d10c      	bne.n	800c6e4 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 800c6ca:	f107 031c 	add.w	r3, r7, #28
 800c6ce:	4955      	ldr	r1, [pc, #340]	; (800c824 <MQTTSerialize_connect+0x1d0>)
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f000 fb3c 	bl	800cd4e <writeCString>
		writeChar(&ptr, (char) 4);
 800c6d6:	f107 031c 	add.w	r3, r7, #28
 800c6da:	2104      	movs	r1, #4
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f000 faf8 	bl	800ccd2 <writeChar>
 800c6e2:	e00b      	b.n	800c6fc <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 800c6e4:	f107 031c 	add.w	r3, r7, #28
 800c6e8:	494f      	ldr	r1, [pc, #316]	; (800c828 <MQTTSerialize_connect+0x1d4>)
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f000 fb2f 	bl	800cd4e <writeCString>
		writeChar(&ptr, (char) 3);
 800c6f0:	f107 031c 	add.w	r3, r7, #28
 800c6f4:	2103      	movs	r1, #3
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f000 faeb 	bl	800ccd2 <writeChar>
	}

	flags.all = 0;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	7e9b      	ldrb	r3, [r3, #26]
 800c704:	f003 0301 	and.w	r3, r3, #1
 800c708:	b2da      	uxtb	r2, r3
 800c70a:	7d3b      	ldrb	r3, [r7, #20]
 800c70c:	f362 0341 	bfi	r3, r2, #1, #1
 800c710:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	7edb      	ldrb	r3, [r3, #27]
 800c716:	2b00      	cmp	r3, #0
 800c718:	bf14      	ite	ne
 800c71a:	2301      	movne	r3, #1
 800c71c:	2300      	moveq	r3, #0
 800c71e:	b2da      	uxtb	r2, r3
 800c720:	7d3b      	ldrb	r3, [r7, #20]
 800c722:	f362 0382 	bfi	r3, r2, #2, #1
 800c726:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 800c728:	7d3b      	ldrb	r3, [r7, #20]
 800c72a:	f003 0304 	and.w	r3, r3, #4
 800c72e:	b2db      	uxtb	r3, r3
 800c730:	2b00      	cmp	r3, #0
 800c732:	d013      	beq.n	800c75c <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c73a:	f003 0303 	and.w	r3, r3, #3
 800c73e:	b2da      	uxtb	r2, r3
 800c740:	7d3b      	ldrb	r3, [r7, #20]
 800c742:	f362 03c4 	bfi	r3, r2, #3, #2
 800c746:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c74e:	f003 0301 	and.w	r3, r3, #1
 800c752:	b2da      	uxtb	r2, r3
 800c754:	7d3b      	ldrb	r3, [r7, #20]
 800c756:	f362 1345 	bfi	r3, r2, #5, #1
 800c75a:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c760:	2b00      	cmp	r3, #0
 800c762:	d103      	bne.n	800c76c <MQTTSerialize_connect+0x118>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d003      	beq.n	800c774 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 800c76c:	7d3b      	ldrb	r3, [r7, #20]
 800c76e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c772:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d103      	bne.n	800c784 <MQTTSerialize_connect+0x130>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c780:	2b00      	cmp	r3, #0
 800c782:	d003      	beq.n	800c78c <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 800c784:	7d3b      	ldrb	r3, [r7, #20]
 800c786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c78a:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 800c78c:	7d3a      	ldrb	r2, [r7, #20]
 800c78e:	f107 031c 	add.w	r3, r7, #28
 800c792:	4611      	mov	r1, r2
 800c794:	4618      	mov	r0, r3
 800c796:	f000 fa9c 	bl	800ccd2 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	8b1b      	ldrh	r3, [r3, #24]
 800c79e:	461a      	mov	r2, r3
 800c7a0:	f107 031c 	add.w	r3, r7, #28
 800c7a4:	4611      	mov	r1, r2
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f000 faa8 	bl	800ccfc <writeInt>
	writeMQTTString(&ptr, options->clientID);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f107 001c 	add.w	r0, r7, #28
 800c7b2:	330c      	adds	r3, #12
 800c7b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c7b6:	f000 fae9 	bl	800cd8c <writeMQTTString>
	if (options->willFlag)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	7edb      	ldrb	r3, [r3, #27]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d00d      	beq.n	800c7de <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f107 001c 	add.w	r0, r7, #28
 800c7c8:	3324      	adds	r3, #36	; 0x24
 800c7ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c7cc:	f000 fade 	bl	800cd8c <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f107 001c 	add.w	r0, r7, #28
 800c7d6:	3330      	adds	r3, #48	; 0x30
 800c7d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c7da:	f000 fad7 	bl	800cd8c <writeMQTTString>
	}
	if (flags.bits.username)
 800c7de:	7d3b      	ldrb	r3, [r7, #20]
 800c7e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c7e4:	b2db      	uxtb	r3, r3
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d006      	beq.n	800c7f8 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f107 001c 	add.w	r0, r7, #28
 800c7f0:	3340      	adds	r3, #64	; 0x40
 800c7f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c7f4:	f000 faca 	bl	800cd8c <writeMQTTString>
	if (flags.bits.password)
 800c7f8:	7d3b      	ldrb	r3, [r7, #20]
 800c7fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7fe:	b2db      	uxtb	r3, r3
 800c800:	2b00      	cmp	r3, #0
 800c802:	d006      	beq.n	800c812 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f107 001c 	add.w	r0, r7, #28
 800c80a:	334c      	adds	r3, #76	; 0x4c
 800c80c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c80e:	f000 fabd 	bl	800cd8c <writeMQTTString>

	rc = ptr - buf;
 800c812:	69fa      	ldr	r2, [r7, #28]
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	1ad3      	subs	r3, r2, r3
 800c818:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 800c81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3728      	adds	r7, #40	; 0x28
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}
 800c824:	0800fb10 	.word	0x0800fb10
 800c828:	0800fb18 	.word	0x0800fb18

0800c82c <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b08a      	sub	sp, #40	; 0x28
 800c830:	af00      	add	r7, sp, #0
 800c832:	60f8      	str	r0, [r7, #12]
 800c834:	60b9      	str	r1, [r7, #8]
 800c836:	607a      	str	r2, [r7, #4]
 800c838:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800c83a:	2300      	movs	r3, #0
 800c83c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800c842:	2300      	movs	r3, #0
 800c844:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800c846:	2300      	movs	r3, #0
 800c848:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 800c84a:	2300      	movs	r3, #0
 800c84c:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800c84e:	f107 0318 	add.w	r3, r7, #24
 800c852:	4618      	mov	r0, r3
 800c854:	f000 fa29 	bl	800ccaa <readChar>
 800c858:	4603      	mov	r3, r0
 800c85a:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 800c85c:	7f3b      	ldrb	r3, [r7, #28]
 800c85e:	f023 030f 	bic.w	r3, r3, #15
 800c862:	b2db      	uxtb	r3, r3
 800c864:	2b20      	cmp	r3, #32
 800c866:	d12e      	bne.n	800c8c6 <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800c868:	69bb      	ldr	r3, [r7, #24]
 800c86a:	f107 0214 	add.w	r2, r7, #20
 800c86e:	4611      	mov	r1, r2
 800c870:	4618      	mov	r0, r3
 800c872:	f000 f9e9 	bl	800cc48 <MQTTPacket_decodeBuf>
 800c876:	6278      	str	r0, [r7, #36]	; 0x24
 800c878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c87a:	69bb      	ldr	r3, [r7, #24]
 800c87c:	4413      	add	r3, r2
 800c87e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800c880:	69bb      	ldr	r3, [r7, #24]
 800c882:	697a      	ldr	r2, [r7, #20]
 800c884:	4413      	add	r3, r2
 800c886:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 800c888:	69bb      	ldr	r3, [r7, #24]
 800c88a:	6a3a      	ldr	r2, [r7, #32]
 800c88c:	1ad3      	subs	r3, r2, r3
 800c88e:	2b01      	cmp	r3, #1
 800c890:	dd1b      	ble.n	800c8ca <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 800c892:	f107 0318 	add.w	r3, r7, #24
 800c896:	4618      	mov	r0, r3
 800c898:	f000 fa07 	bl	800ccaa <readChar>
 800c89c:	4603      	mov	r3, r0
 800c89e:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 800c8a0:	7c3b      	ldrb	r3, [r7, #16]
 800c8a2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c8a6:	b2db      	uxtb	r3, r3
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 800c8ae:	f107 0318 	add.w	r3, r7, #24
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f000 f9f9 	bl	800ccaa <readChar>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	701a      	strb	r2, [r3, #0]

	rc = 1;
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	627b      	str	r3, [r7, #36]	; 0x24
 800c8c4:	e002      	b.n	800c8cc <MQTTDeserialize_connack+0xa0>
		goto exit;
 800c8c6:	bf00      	nop
 800c8c8:	e000      	b.n	800c8cc <MQTTDeserialize_connack+0xa0>
		goto exit;
 800c8ca:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800c8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3728      	adds	r7, #40	; 0x28
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}

0800c8d6 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 800c8d6:	b580      	push	{r7, lr}
 800c8d8:	b088      	sub	sp, #32
 800c8da:	af00      	add	r7, sp, #0
 800c8dc:	60f8      	str	r0, [r7, #12]
 800c8de:	60b9      	str	r1, [r7, #8]
 800c8e0:	4613      	mov	r3, r2
 800c8e2:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 800c8e8:	f04f 33ff 	mov.w	r3, #4294967295
 800c8ec:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	dc03      	bgt.n	800c900 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800c8f8:	f06f 0301 	mvn.w	r3, #1
 800c8fc:	61fb      	str	r3, [r7, #28]
		goto exit;
 800c8fe:	e01d      	b.n	800c93c <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 800c900:	2300      	movs	r3, #0
 800c902:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 800c904:	79fb      	ldrb	r3, [r7, #7]
 800c906:	f003 030f 	and.w	r3, r3, #15
 800c90a:	b2da      	uxtb	r2, r3
 800c90c:	7e3b      	ldrb	r3, [r7, #24]
 800c90e:	f362 1307 	bfi	r3, r2, #4, #4
 800c912:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800c914:	7e3a      	ldrb	r2, [r7, #24]
 800c916:	f107 0314 	add.w	r3, r7, #20
 800c91a:	4611      	mov	r1, r2
 800c91c:	4618      	mov	r0, r3
 800c91e:	f000 f9d8 	bl	800ccd2 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	2100      	movs	r1, #0
 800c926:	4618      	mov	r0, r3
 800c928:	f000 f8d9 	bl	800cade <MQTTPacket_encode>
 800c92c:	4602      	mov	r2, r0
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	4413      	add	r3, r2
 800c932:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 800c934:	697a      	ldr	r2, [r7, #20]
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	1ad3      	subs	r3, r2, r3
 800c93a:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800c93c:	69fb      	ldr	r3, [r7, #28]
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3720      	adds	r7, #32
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}

0800c946 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 800c946:	b580      	push	{r7, lr}
 800c948:	b082      	sub	sp, #8
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	6078      	str	r0, [r7, #4]
 800c94e:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 800c950:	220c      	movs	r2, #12
 800c952:	6839      	ldr	r1, [r7, #0]
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f7ff ffbe 	bl	800c8d6 <MQTTSerialize_zero>
 800c95a:	4603      	mov	r3, r0
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3708      	adds	r7, #8
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b08a      	sub	sp, #40	; 0x28
 800c968:	af00      	add	r7, sp, #0
 800c96a:	60f8      	str	r0, [r7, #12]
 800c96c:	60b9      	str	r1, [r7, #8]
 800c96e:	607a      	str	r2, [r7, #4]
 800c970:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800c972:	2300      	movs	r3, #0
 800c974:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800c976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c978:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800c97a:	2300      	movs	r3, #0
 800c97c:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800c97e:	2300      	movs	r3, #0
 800c980:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 800c982:	2300      	movs	r3, #0
 800c984:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800c986:	f107 0318 	add.w	r3, r7, #24
 800c98a:	4618      	mov	r0, r3
 800c98c:	f000 f98d 	bl	800ccaa <readChar>
 800c990:	4603      	mov	r3, r0
 800c992:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 800c994:	7f3b      	ldrb	r3, [r7, #28]
 800c996:	f023 030f 	bic.w	r3, r3, #15
 800c99a:	b2db      	uxtb	r3, r3
 800c99c:	2b30      	cmp	r3, #48	; 0x30
 800c99e:	d14b      	bne.n	800ca38 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 800c9a0:	7f3b      	ldrb	r3, [r7, #28]
 800c9a2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	461a      	mov	r2, r3
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 800c9ae:	7f3b      	ldrb	r3, [r7, #28]
 800c9b0:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800c9b4:	b2db      	uxtb	r3, r3
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 800c9bc:	7f3b      	ldrb	r3, [r7, #28]
 800c9be:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c9c2:	b2db      	uxtb	r3, r3
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800c9ca:	69bb      	ldr	r3, [r7, #24]
 800c9cc:	f107 0214 	add.w	r2, r7, #20
 800c9d0:	4611      	mov	r1, r2
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f000 f938 	bl	800cc48 <MQTTPacket_decodeBuf>
 800c9d8:	6278      	str	r0, [r7, #36]	; 0x24
 800c9da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9dc:	69bb      	ldr	r3, [r7, #24]
 800c9de:	4413      	add	r3, r2
 800c9e0:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800c9e2:	69bb      	ldr	r3, [r7, #24]
 800c9e4:	697a      	ldr	r2, [r7, #20]
 800c9e6:	4413      	add	r3, r2
 800c9e8:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800c9ea:	f107 0318 	add.w	r3, r7, #24
 800c9ee:	6a3a      	ldr	r2, [r7, #32]
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c9f4:	f000 f9f8 	bl	800cde8 <readMQTTLenString>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d01e      	beq.n	800ca3c <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 800c9fe:	69bb      	ldr	r3, [r7, #24]
 800ca00:	6a3a      	ldr	r2, [r7, #32]
 800ca02:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	db19      	blt.n	800ca3c <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	dd08      	ble.n	800ca22 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 800ca10:	f107 0318 	add.w	r3, r7, #24
 800ca14:	4618      	mov	r0, r3
 800ca16:	f000 f92d 	bl	800cc74 <readInt>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	b29a      	uxth	r2, r3
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 800ca22:	69bb      	ldr	r3, [r7, #24]
 800ca24:	6a3a      	ldr	r2, [r7, #32]
 800ca26:	1ad2      	subs	r2, r2, r3
 800ca28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca2a:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 800ca2c:	69ba      	ldr	r2, [r7, #24]
 800ca2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca30:	601a      	str	r2, [r3, #0]
	rc = 1;
 800ca32:	2301      	movs	r3, #1
 800ca34:	627b      	str	r3, [r7, #36]	; 0x24
 800ca36:	e002      	b.n	800ca3e <MQTTDeserialize_publish+0xda>
		goto exit;
 800ca38:	bf00      	nop
 800ca3a:	e000      	b.n	800ca3e <MQTTDeserialize_publish+0xda>
		goto exit;
 800ca3c:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800ca3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3728      	adds	r7, #40	; 0x28
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b08a      	sub	sp, #40	; 0x28
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	60f8      	str	r0, [r7, #12]
 800ca50:	60b9      	str	r1, [r7, #8]
 800ca52:	607a      	str	r2, [r7, #4]
 800ca54:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800ca56:	2300      	movs	r3, #0
 800ca58:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800ca62:	2300      	movs	r3, #0
 800ca64:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800ca66:	f107 0318 	add.w	r3, r7, #24
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f000 f91d 	bl	800ccaa <readChar>
 800ca70:	4603      	mov	r3, r0
 800ca72:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 800ca74:	7f3b      	ldrb	r3, [r7, #28]
 800ca76:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800ca7a:	b2db      	uxtb	r3, r3
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 800ca82:	7f3b      	ldrb	r3, [r7, #28]
 800ca84:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800ca88:	b2db      	uxtb	r3, r3
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800ca90:	69bb      	ldr	r3, [r7, #24]
 800ca92:	f107 0214 	add.w	r2, r7, #20
 800ca96:	4611      	mov	r1, r2
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f000 f8d5 	bl	800cc48 <MQTTPacket_decodeBuf>
 800ca9e:	6278      	str	r0, [r7, #36]	; 0x24
 800caa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caa2:	69bb      	ldr	r3, [r7, #24]
 800caa4:	4413      	add	r3, r2
 800caa6:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800caa8:	69bb      	ldr	r3, [r7, #24]
 800caaa:	697a      	ldr	r2, [r7, #20]
 800caac:	4413      	add	r3, r2
 800caae:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 800cab0:	69bb      	ldr	r3, [r7, #24]
 800cab2:	6a3a      	ldr	r2, [r7, #32]
 800cab4:	1ad3      	subs	r3, r2, r3
 800cab6:	2b01      	cmp	r3, #1
 800cab8:	dd0b      	ble.n	800cad2 <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 800caba:	f107 0318 	add.w	r3, r7, #24
 800cabe:	4618      	mov	r0, r3
 800cac0:	f000 f8d8 	bl	800cc74 <readInt>
 800cac4:	4603      	mov	r3, r0
 800cac6:	b29a      	uxth	r2, r3
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	801a      	strh	r2, [r3, #0]

	rc = 1;
 800cacc:	2301      	movs	r3, #1
 800cace:	627b      	str	r3, [r7, #36]	; 0x24
 800cad0:	e000      	b.n	800cad4 <MQTTDeserialize_ack+0x8c>
		goto exit;
 800cad2:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800cad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3728      	adds	r7, #40	; 0x28
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}

0800cade <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 800cade:	b480      	push	{r7}
 800cae0:	b085      	sub	sp, #20
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
 800cae6:	6039      	str	r1, [r7, #0]
	int rc = 0;
 800cae8:	2300      	movs	r3, #0
 800caea:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	425a      	negs	r2, r3
 800caf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caf4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800caf8:	bf58      	it	pl
 800cafa:	4253      	negpl	r3, r2
 800cafc:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	da00      	bge.n	800cb06 <MQTTPacket_encode+0x28>
 800cb04:	337f      	adds	r3, #127	; 0x7f
 800cb06:	11db      	asrs	r3, r3, #7
 800cb08:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	dd03      	ble.n	800cb18 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 800cb10:	7afb      	ldrb	r3, [r7, #11]
 800cb12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cb16:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	1c5a      	adds	r2, r3, #1
 800cb1c:	60fa      	str	r2, [r7, #12]
 800cb1e:	461a      	mov	r2, r3
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	4413      	add	r3, r2
 800cb24:	7afa      	ldrb	r2, [r7, #11]
 800cb26:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	dcde      	bgt.n	800caec <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3714      	adds	r7, #20
 800cb34:	46bd      	mov	sp, r7
 800cb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3a:	4770      	bx	lr

0800cb3c <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b086      	sub	sp, #24
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 800cb46:	2301      	movs	r3, #1
 800cb48:	617b      	str	r3, [r7, #20]
	int len = 0;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	2200      	movs	r2, #0
 800cb52:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 800cb54:	f04f 33ff 	mov.w	r3, #4294967295
 800cb58:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	3301      	adds	r3, #1
 800cb5e:	613b      	str	r3, [r7, #16]
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	2b04      	cmp	r3, #4
 800cb64:	dd03      	ble.n	800cb6e <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 800cb66:	f04f 33ff 	mov.w	r3, #4294967295
 800cb6a:	60fb      	str	r3, [r7, #12]
			goto exit;
 800cb6c:	e01d      	b.n	800cbaa <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 800cb6e:	f107 020b 	add.w	r2, r7, #11
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2101      	movs	r1, #1
 800cb76:	4610      	mov	r0, r2
 800cb78:	4798      	blx	r3
 800cb7a:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d112      	bne.n	800cba8 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	681a      	ldr	r2, [r3, #0]
 800cb86:	7afb      	ldrb	r3, [r7, #11]
 800cb88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb8c:	6979      	ldr	r1, [r7, #20]
 800cb8e:	fb01 f303 	mul.w	r3, r1, r3
 800cb92:	441a      	add	r2, r3
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	01db      	lsls	r3, r3, #7
 800cb9c:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 800cb9e:	7afb      	ldrb	r3, [r7, #11]
 800cba0:	b25b      	sxtb	r3, r3
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	dbd6      	blt.n	800cb54 <MQTTPacket_decode+0x18>
exit:
 800cba6:	e000      	b.n	800cbaa <MQTTPacket_decode+0x6e>
			goto exit;
 800cba8:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 800cbaa:	693b      	ldr	r3, [r7, #16]
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	3718      	adds	r7, #24
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}

0800cbb4 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b083      	sub	sp, #12
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	3301      	adds	r3, #1
 800cbc0:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2b7f      	cmp	r3, #127	; 0x7f
 800cbc6:	dc03      	bgt.n	800cbd0 <MQTTPacket_len+0x1c>
		rem_len += 1;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	3301      	adds	r3, #1
 800cbcc:	607b      	str	r3, [r7, #4]
 800cbce:	e012      	b.n	800cbf6 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cbd6:	da03      	bge.n	800cbe0 <MQTTPacket_len+0x2c>
		rem_len += 2;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	3302      	adds	r3, #2
 800cbdc:	607b      	str	r3, [r7, #4]
 800cbde:	e00a      	b.n	800cbf6 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	4a08      	ldr	r2, [pc, #32]	; (800cc04 <MQTTPacket_len+0x50>)
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	dc03      	bgt.n	800cbf0 <MQTTPacket_len+0x3c>
		rem_len += 3;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	3303      	adds	r3, #3
 800cbec:	607b      	str	r3, [r7, #4]
 800cbee:	e002      	b.n	800cbf6 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	3304      	adds	r3, #4
 800cbf4:	607b      	str	r3, [r7, #4]
	return rem_len;
 800cbf6:	687b      	ldr	r3, [r7, #4]
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	370c      	adds	r7, #12
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr
 800cc04:	001ffffe 	.word	0x001ffffe

0800cc08 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b085      	sub	sp, #20
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 800cc12:	2300      	movs	r3, #0
 800cc14:	60fb      	str	r3, [r7, #12]
 800cc16:	e00a      	b.n	800cc2e <bufchar+0x26>
		*c = *bufptr++;
 800cc18:	4b0a      	ldr	r3, [pc, #40]	; (800cc44 <bufchar+0x3c>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	1c5a      	adds	r2, r3, #1
 800cc1e:	4909      	ldr	r1, [pc, #36]	; (800cc44 <bufchar+0x3c>)
 800cc20:	600a      	str	r2, [r1, #0]
 800cc22:	781a      	ldrb	r2, [r3, #0]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	60fb      	str	r3, [r7, #12]
 800cc2e:	68fa      	ldr	r2, [r7, #12]
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	429a      	cmp	r2, r3
 800cc34:	dbf0      	blt.n	800cc18 <bufchar+0x10>
	return count;
 800cc36:	683b      	ldr	r3, [r7, #0]
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3714      	adds	r7, #20
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr
 800cc44:	2000377c 	.word	0x2000377c

0800cc48 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 800cc52:	4a06      	ldr	r2, [pc, #24]	; (800cc6c <MQTTPacket_decodeBuf+0x24>)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 800cc58:	6839      	ldr	r1, [r7, #0]
 800cc5a:	4805      	ldr	r0, [pc, #20]	; (800cc70 <MQTTPacket_decodeBuf+0x28>)
 800cc5c:	f7ff ff6e 	bl	800cb3c <MQTTPacket_decode>
 800cc60:	4603      	mov	r3, r0
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3708      	adds	r7, #8
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}
 800cc6a:	bf00      	nop
 800cc6c:	2000377c 	.word	0x2000377c
 800cc70:	0800cc09 	.word	0x0800cc09

0800cc74 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 800cc74:	b480      	push	{r7}
 800cc76:	b085      	sub	sp, #20
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	021b      	lsls	r3, r3, #8
 800cc88:	68fa      	ldr	r2, [r7, #12]
 800cc8a:	3201      	adds	r2, #1
 800cc8c:	7812      	ldrb	r2, [r2, #0]
 800cc8e:	4413      	add	r3, r2
 800cc90:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	1c9a      	adds	r2, r3, #2
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	601a      	str	r2, [r3, #0]
	return len;
 800cc9c:	68bb      	ldr	r3, [r7, #8]
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3714      	adds	r7, #20
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr

0800ccaa <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 800ccaa:	b480      	push	{r7}
 800ccac:	b085      	sub	sp, #20
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	1c5a      	adds	r2, r3, #1
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	601a      	str	r2, [r3, #0]
	return c;
 800ccc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3714      	adds	r7, #20
 800ccca:	46bd      	mov	sp, r7
 800cccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd0:	4770      	bx	lr

0800ccd2 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 800ccd2:	b480      	push	{r7}
 800ccd4:	b083      	sub	sp, #12
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	6078      	str	r0, [r7, #4]
 800ccda:	460b      	mov	r3, r1
 800ccdc:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	78fa      	ldrb	r2, [r7, #3]
 800cce4:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	1c5a      	adds	r2, r3, #1
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	601a      	str	r2, [r3, #0]
}
 800ccf0:	bf00      	nop
 800ccf2:	370c      	adds	r7, #12
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr

0800ccfc <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b083      	sub	sp, #12
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	da00      	bge.n	800cd0e <writeInt+0x12>
 800cd0c:	33ff      	adds	r3, #255	; 0xff
 800cd0e:	121b      	asrs	r3, r3, #8
 800cd10:	461a      	mov	r2, r3
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	b2d2      	uxtb	r2, r2
 800cd18:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	1c5a      	adds	r2, r3, #1
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	425a      	negs	r2, r3
 800cd28:	b2db      	uxtb	r3, r3
 800cd2a:	b2d2      	uxtb	r2, r2
 800cd2c:	bf58      	it	pl
 800cd2e:	4253      	negpl	r3, r2
 800cd30:	687a      	ldr	r2, [r7, #4]
 800cd32:	6812      	ldr	r2, [r2, #0]
 800cd34:	b2db      	uxtb	r3, r3
 800cd36:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	1c5a      	adds	r2, r3, #1
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	601a      	str	r2, [r3, #0]
}
 800cd42:	bf00      	nop
 800cd44:	370c      	adds	r7, #12
 800cd46:	46bd      	mov	sp, r7
 800cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4c:	4770      	bx	lr

0800cd4e <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 800cd4e:	b580      	push	{r7, lr}
 800cd50:	b084      	sub	sp, #16
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	6078      	str	r0, [r7, #4]
 800cd56:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 800cd58:	6838      	ldr	r0, [r7, #0]
 800cd5a:	f7f3 fa41 	bl	80001e0 <strlen>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 800cd62:	68f9      	ldr	r1, [r7, #12]
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f7ff ffc9 	bl	800ccfc <writeInt>
	memcpy(*pptr, string, len);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	68fa      	ldr	r2, [r7, #12]
 800cd70:	6839      	ldr	r1, [r7, #0]
 800cd72:	4618      	mov	r0, r3
 800cd74:	f001 f832 	bl	800dddc <memcpy>
	*pptr += len;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681a      	ldr	r2, [r3, #0]
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	441a      	add	r2, r3
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	601a      	str	r2, [r3, #0]
}
 800cd84:	bf00      	nop
 800cd86:	3710      	adds	r7, #16
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}

0800cd8c <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	60f8      	str	r0, [r7, #12]
 800cd94:	4638      	mov	r0, r7
 800cd96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	dd12      	ble.n	800cdc6 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	4619      	mov	r1, r3
 800cda4:	68f8      	ldr	r0, [r7, #12]
 800cda6:	f7ff ffa9 	bl	800ccfc <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	68b9      	ldr	r1, [r7, #8]
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f001 f812 	bl	800dddc <memcpy>
		*pptr += mqttstring.lenstring.len;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	687a      	ldr	r2, [r7, #4]
 800cdbe:	441a      	add	r2, r3
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 800cdc4:	e00c      	b.n	800cde0 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d005      	beq.n	800cdd8 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	4619      	mov	r1, r3
 800cdd0:	68f8      	ldr	r0, [r7, #12]
 800cdd2:	f7ff ffbc 	bl	800cd4e <writeCString>
}
 800cdd6:	e003      	b.n	800cde0 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 800cdd8:	2100      	movs	r1, #0
 800cdda:	68f8      	ldr	r0, [r7, #12]
 800cddc:	f7ff ff8e 	bl	800ccfc <writeInt>
}
 800cde0:	bf00      	nop
 800cde2:	3710      	adds	r7, #16
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}

0800cde8 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b086      	sub	sp, #24
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	60f8      	str	r0, [r7, #12]
 800cdf0:	60b9      	str	r1, [r7, #8]
 800cdf2:	607a      	str	r2, [r7, #4]
	int rc = 0;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	687a      	ldr	r2, [r7, #4]
 800cdfe:	1ad3      	subs	r3, r2, r3
 800ce00:	2b01      	cmp	r3, #1
 800ce02:	dd1a      	ble.n	800ce3a <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 800ce04:	68b8      	ldr	r0, [r7, #8]
 800ce06:	f7ff ff35 	bl	800cc74 <readInt>
 800ce0a:	4602      	mov	r2, r0
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	68fa      	ldr	r2, [r7, #12]
 800ce16:	6852      	ldr	r2, [r2, #4]
 800ce18:	4413      	add	r3, r2
 800ce1a:	687a      	ldr	r2, [r7, #4]
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d30c      	bcc.n	800ce3a <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	681a      	ldr	r2, [r3, #0]
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	68fa      	ldr	r2, [r7, #12]
 800ce2e:	6852      	ldr	r2, [r2, #4]
 800ce30:	441a      	add	r2, r3
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	601a      	str	r2, [r3, #0]
			rc = 1;
 800ce36:	2301      	movs	r3, #1
 800ce38:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 800ce40:	697b      	ldr	r3, [r7, #20]
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3718      	adds	r7, #24
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}

0800ce4a <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 800ce4a:	b580      	push	{r7, lr}
 800ce4c:	b086      	sub	sp, #24
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	1d3b      	adds	r3, r7, #4
 800ce52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 800ce56:	2300      	movs	r3, #0
 800ce58:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d006      	beq.n	800ce6e <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7f3 f9bc 	bl	80001e0 <strlen>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	617b      	str	r3, [r7, #20]
 800ce6c:	e001      	b.n	800ce72 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	617b      	str	r3, [r7, #20]
	return rc;
 800ce72:	697b      	ldr	r3, [r7, #20]
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3718      	adds	r7, #24
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b086      	sub	sp, #24
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	6039      	str	r1, [r7, #0]
	int alen = 0,
 800ce86:	2300      	movs	r3, #0
 800ce88:	617b      	str	r3, [r7, #20]
		blen = 0;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d00a      	beq.n	800ceac <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	4618      	mov	r0, r3
 800cea2:	f7f3 f99d 	bl	80001e0 <strlen>
 800cea6:	4603      	mov	r3, r0
 800cea8:	617b      	str	r3, [r7, #20]
 800ceaa:	e005      	b.n	800ceb8 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	689b      	ldr	r3, [r3, #8]
 800ceb0:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	685b      	ldr	r3, [r3, #4]
 800ceb6:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 800ceb8:	6838      	ldr	r0, [r7, #0]
 800ceba:	f7f3 f991 	bl	80001e0 <strlen>
 800cebe:	4603      	mov	r3, r0
 800cec0:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 800cec2:	697a      	ldr	r2, [r7, #20]
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	429a      	cmp	r2, r3
 800cec8:	d10a      	bne.n	800cee0 <MQTTPacket_equals+0x64>
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	461a      	mov	r2, r3
 800cece:	6839      	ldr	r1, [r7, #0]
 800ced0:	6938      	ldr	r0, [r7, #16]
 800ced2:	f001 f93f 	bl	800e154 <strncmp>
 800ced6:	4603      	mov	r3, r0
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d101      	bne.n	800cee0 <MQTTPacket_equals+0x64>
 800cedc:	2301      	movs	r3, #1
 800cede:	e000      	b.n	800cee2 <MQTTPacket_equals+0x66>
 800cee0:	2300      	movs	r3, #0
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3718      	adds	r7, #24
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}

0800ceea <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b086      	sub	sp, #24
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	60f8      	str	r0, [r7, #12]
 800cef2:	4638      	mov	r0, r7
 800cef4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 800cef8:	2300      	movs	r3, #0
 800cefa:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 800cefc:	463b      	mov	r3, r7
 800cefe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf02:	f7ff ffa2 	bl	800ce4a <MQTTstrlen>
 800cf06:	4603      	mov	r3, r0
 800cf08:	1c9a      	adds	r2, r3, #2
 800cf0a:	6a3b      	ldr	r3, [r7, #32]
 800cf0c:	4413      	add	r3, r2
 800cf0e:	697a      	ldr	r2, [r7, #20]
 800cf10:	4413      	add	r3, r2
 800cf12:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	dd02      	ble.n	800cf20 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	3302      	adds	r3, #2
 800cf1e:	617b      	str	r3, [r7, #20]
	return len;
 800cf20:	697b      	ldr	r3, [r7, #20]
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3718      	adds	r7, #24
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}

0800cf2a <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 800cf2a:	b580      	push	{r7, lr}
 800cf2c:	b08a      	sub	sp, #40	; 0x28
 800cf2e:	af02      	add	r7, sp, #8
 800cf30:	60f8      	str	r0, [r7, #12]
 800cf32:	60b9      	str	r1, [r7, #8]
 800cf34:	603b      	str	r3, [r7, #0]
 800cf36:	4613      	mov	r3, r2
 800cf38:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 800cf3e:	2300      	movs	r3, #0
 800cf40:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 800cf42:	2300      	movs	r3, #0
 800cf44:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 800cf46:	2300      	movs	r3, #0
 800cf48:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 800cf4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf4c:	9300      	str	r3, [sp, #0]
 800cf4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cf52:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cf54:	6838      	ldr	r0, [r7, #0]
 800cf56:	f7ff ffc8 	bl	800ceea <MQTTSerialize_publishLength>
 800cf5a:	61b8      	str	r0, [r7, #24]
 800cf5c:	69b8      	ldr	r0, [r7, #24]
 800cf5e:	f7ff fe29 	bl	800cbb4 <MQTTPacket_len>
 800cf62:	4602      	mov	r2, r0
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	4293      	cmp	r3, r2
 800cf68:	da03      	bge.n	800cf72 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800cf6a:	f06f 0301 	mvn.w	r3, #1
 800cf6e:	61fb      	str	r3, [r7, #28]
		goto exit;
 800cf70:	e04c      	b.n	800d00c <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 800cf72:	7c3b      	ldrb	r3, [r7, #16]
 800cf74:	2203      	movs	r2, #3
 800cf76:	f362 1307 	bfi	r3, r2, #4, #4
 800cf7a:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 800cf7c:	79fb      	ldrb	r3, [r7, #7]
 800cf7e:	f003 0301 	and.w	r3, r3, #1
 800cf82:	b2da      	uxtb	r2, r3
 800cf84:	7c3b      	ldrb	r3, [r7, #16]
 800cf86:	f362 03c3 	bfi	r3, r2, #3, #1
 800cf8a:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	f003 0303 	and.w	r3, r3, #3
 800cf92:	b2da      	uxtb	r2, r3
 800cf94:	7c3b      	ldrb	r3, [r7, #16]
 800cf96:	f362 0342 	bfi	r3, r2, #1, #2
 800cf9a:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 800cf9c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cfa0:	f003 0301 	and.w	r3, r3, #1
 800cfa4:	b2da      	uxtb	r2, r3
 800cfa6:	7c3b      	ldrb	r3, [r7, #16]
 800cfa8:	f362 0300 	bfi	r3, r2, #0, #1
 800cfac:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 800cfae:	7c3a      	ldrb	r2, [r7, #16]
 800cfb0:	f107 0314 	add.w	r3, r7, #20
 800cfb4:	4611      	mov	r1, r2
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f7ff fe8b 	bl	800ccd2 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	69b9      	ldr	r1, [r7, #24]
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7ff fd8c 	bl	800cade <MQTTPacket_encode>
 800cfc6:	4602      	mov	r2, r0
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	4413      	add	r3, r2
 800cfcc:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 800cfce:	f107 0014 	add.w	r0, r7, #20
 800cfd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cfd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cfd8:	f7ff fed8 	bl	800cd8c <writeMQTTString>

	if (qos > 0)
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	dd06      	ble.n	800cff0 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 800cfe2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800cfe4:	f107 0314 	add.w	r3, r7, #20
 800cfe8:	4611      	mov	r1, r2
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7ff fe86 	bl	800ccfc <writeInt>

	memcpy(ptr, payload, payloadlen);
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cff4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cff6:	4618      	mov	r0, r3
 800cff8:	f000 fef0 	bl	800dddc <memcpy>
	ptr += payloadlen;
 800cffc:	697a      	ldr	r2, [r7, #20]
 800cffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d000:	4413      	add	r3, r2
 800d002:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 800d004:	697a      	ldr	r2, [r7, #20]
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	1ad3      	subs	r3, r2, r3
 800d00a:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800d00c:	69fb      	ldr	r3, [r7, #28]
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3720      	adds	r7, #32
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}

0800d016 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 800d016:	b580      	push	{r7, lr}
 800d018:	b088      	sub	sp, #32
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	60f8      	str	r0, [r7, #12]
 800d01e:	60b9      	str	r1, [r7, #8]
 800d020:	4611      	mov	r1, r2
 800d022:	461a      	mov	r2, r3
 800d024:	460b      	mov	r3, r1
 800d026:	71fb      	strb	r3, [r7, #7]
 800d028:	4613      	mov	r3, r2
 800d02a:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 800d02c:	2300      	movs	r3, #0
 800d02e:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 800d030:	2300      	movs	r3, #0
 800d032:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	2b03      	cmp	r3, #3
 800d03c:	dc03      	bgt.n	800d046 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800d03e:	f06f 0301 	mvn.w	r3, #1
 800d042:	61fb      	str	r3, [r7, #28]
		goto exit;
 800d044:	e037      	b.n	800d0b6 <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 800d046:	79fb      	ldrb	r3, [r7, #7]
 800d048:	f003 030f 	and.w	r3, r3, #15
 800d04c:	b2da      	uxtb	r2, r3
 800d04e:	7e3b      	ldrb	r3, [r7, #24]
 800d050:	f362 1307 	bfi	r3, r2, #4, #4
 800d054:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 800d056:	79bb      	ldrb	r3, [r7, #6]
 800d058:	f003 0301 	and.w	r3, r3, #1
 800d05c:	b2da      	uxtb	r2, r3
 800d05e:	7e3b      	ldrb	r3, [r7, #24]
 800d060:	f362 03c3 	bfi	r3, r2, #3, #1
 800d064:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 800d066:	79fb      	ldrb	r3, [r7, #7]
 800d068:	2b06      	cmp	r3, #6
 800d06a:	bf0c      	ite	eq
 800d06c:	2301      	moveq	r3, #1
 800d06e:	2300      	movne	r3, #0
 800d070:	b2db      	uxtb	r3, r3
 800d072:	f003 0303 	and.w	r3, r3, #3
 800d076:	b2da      	uxtb	r2, r3
 800d078:	7e3b      	ldrb	r3, [r7, #24]
 800d07a:	f362 0342 	bfi	r3, r2, #1, #2
 800d07e:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800d080:	7e3a      	ldrb	r2, [r7, #24]
 800d082:	f107 0314 	add.w	r3, r7, #20
 800d086:	4611      	mov	r1, r2
 800d088:	4618      	mov	r0, r3
 800d08a:	f7ff fe22 	bl	800ccd2 <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	2102      	movs	r1, #2
 800d092:	4618      	mov	r0, r3
 800d094:	f7ff fd23 	bl	800cade <MQTTPacket_encode>
 800d098:	4602      	mov	r2, r0
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	4413      	add	r3, r2
 800d09e:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 800d0a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d0a2:	f107 0314 	add.w	r3, r7, #20
 800d0a6:	4611      	mov	r1, r2
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7ff fe27 	bl	800ccfc <writeInt>
	rc = ptr - buf;
 800d0ae:	697a      	ldr	r2, [r7, #20]
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	1ad3      	subs	r3, r2, r3
 800d0b4:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800d0b6:	69fb      	ldr	r3, [r7, #28]
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3720      	adds	r7, #32
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <get_seconds_from_ntp_server>:
47) UTC+12:45 (Summer)New Zealand
48) UTC+13:00 Tonga
49) UTC+14:00 Kiribati (Line Islands)
*/
void get_seconds_from_ntp_server(uint8_t *buf, uint16_t idx)
{
 800d0c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d0c4:	b0d0      	sub	sp, #320	; 0x140
 800d0c6:	af00      	add	r7, sp, #0
 800d0c8:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
 800d0cc:	460b      	mov	r3, r1
 800d0ce:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
	tstamp seconds = 0;
 800d0d2:	f04f 0200 	mov.w	r2, #0
 800d0d6:	f04f 0300 	mov.w	r3, #0
 800d0da:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	uint8_t i=0;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	for (i = 0; i < 4; i++)
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800d0ea:	e028      	b.n	800d13e <get_seconds_from_ntp_server+0x7e>
	{
		seconds = (seconds << 8) | buf[idx + i];
 800d0ec:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d0f0:	f04f 0000 	mov.w	r0, #0
 800d0f4:	f04f 0100 	mov.w	r1, #0
 800d0f8:	0219      	lsls	r1, r3, #8
 800d0fa:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d0fe:	0210      	lsls	r0, r2, #8
 800d100:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 800d104:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800d108:	4413      	add	r3, r2
 800d10a:	461a      	mov	r2, r3
 800d10c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d110:	4413      	add	r3, r2
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	b2db      	uxtb	r3, r3
 800d116:	2200      	movs	r2, #0
 800d118:	461c      	mov	r4, r3
 800d11a:	4615      	mov	r5, r2
 800d11c:	ea40 0304 	orr.w	r3, r0, r4
 800d120:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800d124:	ea41 0305 	orr.w	r3, r1, r5
 800d128:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800d12c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800d130:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	for (i = 0; i < 4; i++)
 800d134:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800d138:	3301      	adds	r3, #1
 800d13a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800d13e:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800d142:	2b03      	cmp	r3, #3
 800d144:	d9d2      	bls.n	800d0ec <get_seconds_from_ntp_server+0x2c>
	}
	switch (time_zone)
 800d146:	4be2      	ldr	r3, [pc, #904]	; (800d4d0 <get_seconds_from_ntp_server+0x410>)
 800d148:	781b      	ldrb	r3, [r3, #0]
 800d14a:	2b31      	cmp	r3, #49	; 0x31
 800d14c:	f200 82a3 	bhi.w	800d696 <get_seconds_from_ntp_server+0x5d6>
 800d150:	a201      	add	r2, pc, #4	; (adr r2, 800d158 <get_seconds_from_ntp_server+0x98>)
 800d152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d156:	bf00      	nop
 800d158:	0800d221 	.word	0x0800d221
 800d15c:	0800d23f 	.word	0x0800d23f
 800d160:	0800d25d 	.word	0x0800d25d
 800d164:	0800d27b 	.word	0x0800d27b
 800d168:	0800d299 	.word	0x0800d299
 800d16c:	0800d2b7 	.word	0x0800d2b7
 800d170:	0800d2b7 	.word	0x0800d2b7
 800d174:	0800d2d5 	.word	0x0800d2d5
 800d178:	0800d2d5 	.word	0x0800d2d5
 800d17c:	0800d2f3 	.word	0x0800d2f3
 800d180:	0800d2f3 	.word	0x0800d2f3
 800d184:	0800d311 	.word	0x0800d311
 800d188:	0800d311 	.word	0x0800d311
 800d18c:	0800d311 	.word	0x0800d311
 800d190:	0800d32f 	.word	0x0800d32f
 800d194:	0800d34d 	.word	0x0800d34d
 800d198:	0800d34d 	.word	0x0800d34d
 800d19c:	0800d36b 	.word	0x0800d36b
 800d1a0:	0800d389 	.word	0x0800d389
 800d1a4:	0800d3a7 	.word	0x0800d3a7
 800d1a8:	0800d3c5 	.word	0x0800d3c5
 800d1ac:	0800d697 	.word	0x0800d697
 800d1b0:	0800d697 	.word	0x0800d697
 800d1b4:	0800d3e3 	.word	0x0800d3e3
 800d1b8:	0800d3e3 	.word	0x0800d3e3
 800d1bc:	0800d3e3 	.word	0x0800d3e3
 800d1c0:	0800d401 	.word	0x0800d401
 800d1c4:	0800d401 	.word	0x0800d401
 800d1c8:	0800d41f 	.word	0x0800d41f
 800d1cc:	0800d41f 	.word	0x0800d41f
 800d1d0:	0800d43f 	.word	0x0800d43f
 800d1d4:	0800d45f 	.word	0x0800d45f
 800d1d8:	0800d47d 	.word	0x0800d47d
 800d1dc:	0800d499 	.word	0x0800d499
 800d1e0:	0800d4b5 	.word	0x0800d4b5
 800d1e4:	0800d501 	.word	0x0800d501
 800d1e8:	0800d51d 	.word	0x0800d51d
 800d1ec:	0800d539 	.word	0x0800d539
 800d1f0:	0800d555 	.word	0x0800d555
 800d1f4:	0800d571 	.word	0x0800d571
 800d1f8:	0800d58b 	.word	0x0800d58b
 800d1fc:	0800d5a7 	.word	0x0800d5a7
 800d200:	0800d5c3 	.word	0x0800d5c3
 800d204:	0800d5df 	.word	0x0800d5df
 800d208:	0800d5fb 	.word	0x0800d5fb
 800d20c:	0800d617 	.word	0x0800d617
 800d210:	0800d633 	.word	0x0800d633
 800d214:	0800d64f 	.word	0x0800d64f
 800d218:	0800d66b 	.word	0x0800d66b
 800d21c:	0800d681 	.word	0x0800d681
	{
	case 0:
		seconds -=  12*3600;
 800d220:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d224:	49ab      	ldr	r1, [pc, #684]	; (800d4d4 <get_seconds_from_ntp_server+0x414>)
 800d226:	1851      	adds	r1, r2, r1
 800d228:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 800d22c:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d230:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800d234:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 800d238:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d23c:	e22b      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 1:
		seconds -=  11*3600;
 800d23e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d242:	49a5      	ldr	r1, [pc, #660]	; (800d4d8 <get_seconds_from_ntp_server+0x418>)
 800d244:	1851      	adds	r1, r2, r1
 800d246:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 800d24a:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d24e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800d252:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800d256:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d25a:	e21c      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 2:
		seconds -=  10*3600;
 800d25c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d260:	499e      	ldr	r1, [pc, #632]	; (800d4dc <get_seconds_from_ntp_server+0x41c>)
 800d262:	1851      	adds	r1, r2, r1
 800d264:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800d268:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d26c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800d270:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 800d274:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d278:	e20d      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 3:
		seconds -=  (9*3600+30*60);
 800d27a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d27e:	4998      	ldr	r1, [pc, #608]	; (800d4e0 <get_seconds_from_ntp_server+0x420>)
 800d280:	1851      	adds	r1, r2, r1
 800d282:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800d286:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d28a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d28e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800d292:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d296:	e1fe      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 4:
		seconds -=  9*3600;
 800d298:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d29c:	4991      	ldr	r1, [pc, #580]	; (800d4e4 <get_seconds_from_ntp_server+0x424>)
 800d29e:	1851      	adds	r1, r2, r1
 800d2a0:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800d2a4:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d2a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d2ac:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 800d2b0:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d2b4:	e1ef      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 5:
	case 6:
		seconds -=  8*3600;
 800d2b6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d2ba:	f5b2 41e1 	subs.w	r1, r2, #28800	; 0x7080
 800d2be:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800d2c2:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d2c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d2ca:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800d2ce:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d2d2:	e1e0      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 7:
	case 8:
		seconds -=  7*3600;
 800d2d4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d2d8:	4983      	ldr	r1, [pc, #524]	; (800d4e8 <get_seconds_from_ntp_server+0x428>)
 800d2da:	1851      	adds	r1, r2, r1
 800d2dc:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 800d2e0:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d2e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d2e8:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800d2ec:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d2f0:	e1d1      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 9:
	case 10:
		seconds -=  6*3600;
 800d2f2:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d2f6:	497d      	ldr	r1, [pc, #500]	; (800d4ec <get_seconds_from_ntp_server+0x42c>)
 800d2f8:	1851      	adds	r1, r2, r1
 800d2fa:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 800d2fe:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d302:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d306:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800d30a:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d30e:	e1c2      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 11:
	case 12:
	case 13:
		seconds -= 5*3600;
 800d310:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d314:	4976      	ldr	r1, [pc, #472]	; (800d4f0 <get_seconds_from_ntp_server+0x430>)
 800d316:	1851      	adds	r1, r2, r1
 800d318:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800d31c:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d320:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d324:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800d328:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d32c:	e1b3      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 14:
		seconds -=  (4*3600+30*60);
 800d32e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d332:	4970      	ldr	r1, [pc, #448]	; (800d4f4 <get_seconds_from_ntp_server+0x434>)
 800d334:	1851      	adds	r1, r2, r1
 800d336:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800d33a:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d33e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d342:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800d346:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d34a:	e1a4      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 15:
	case 16:
		seconds -=  4*3600;
 800d34c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d350:	f5b2 5161 	subs.w	r1, r2, #14400	; 0x3840
 800d354:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800d358:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d35c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d360:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800d364:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d368:	e195      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 17:
		seconds -=  (3*3600+30*60);
 800d36a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d36e:	4962      	ldr	r1, [pc, #392]	; (800d4f8 <get_seconds_from_ntp_server+0x438>)
 800d370:	1851      	adds	r1, r2, r1
 800d372:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800d376:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d37a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d37e:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800d382:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d386:	e186      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 18:
		seconds -=  3*3600;
 800d388:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d38c:	495b      	ldr	r1, [pc, #364]	; (800d4fc <get_seconds_from_ntp_server+0x43c>)
 800d38e:	1851      	adds	r1, r2, r1
 800d390:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800d394:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d398:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d39c:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800d3a0:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d3a4:	e177      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 19:
		seconds -=  2*3600;
 800d3a6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d3aa:	f5b2 51e1 	subs.w	r1, r2, #7200	; 0x1c20
 800d3ae:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800d3b2:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d3b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d3ba:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 800d3be:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d3c2:	e168      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 20:
		seconds -=  1*3600;
 800d3c4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d3c8:	f5b2 6161 	subs.w	r1, r2, #3600	; 0xe10
 800d3cc:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 800d3d0:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d3d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d3d8:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800d3dc:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d3e0:	e159      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 22:
		break;
	case 23:
	case 24:
	case 25:
		seconds +=  1*3600;
 800d3e2:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d3e6:	f512 6161 	adds.w	r1, r2, #3600	; 0xe10
 800d3ea:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800d3ee:	f143 0300 	adc.w	r3, r3, #0
 800d3f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d3f6:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 800d3fa:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d3fe:	e14a      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 26:
	case 27:
		seconds +=  2*3600;
 800d400:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d404:	f512 51e1 	adds.w	r1, r2, #7200	; 0x1c20
 800d408:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800d40c:	f143 0300 	adc.w	r3, r3, #0
 800d410:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d414:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800d418:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d41c:	e13b      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 28:
	case 29:
		seconds +=  3*3600;
 800d41e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d422:	f642 2130 	movw	r1, #10800	; 0x2a30
 800d426:	1851      	adds	r1, r2, r1
 800d428:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 800d42c:	f143 0300 	adc.w	r3, r3, #0
 800d430:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d434:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800d438:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d43c:	e12b      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 30:
		seconds +=  (3*3600+30*60);
 800d43e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d442:	f243 1138 	movw	r1, #12600	; 0x3138
 800d446:	1851      	adds	r1, r2, r1
 800d448:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800d44c:	f143 0300 	adc.w	r3, r3, #0
 800d450:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d454:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800d458:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d45c:	e11b      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 31:
		seconds +=  4*3600;
 800d45e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d462:	f512 5161 	adds.w	r1, r2, #14400	; 0x3840
 800d466:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800d46a:	f143 0300 	adc.w	r3, r3, #0
 800d46e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d472:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800d476:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d47a:	e10c      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 32:
		seconds +=  (4*3600+30*60);
 800d47c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d480:	f643 7148 	movw	r1, #16200	; 0x3f48
 800d484:	1851      	adds	r1, r2, r1
 800d486:	67b9      	str	r1, [r7, #120]	; 0x78
 800d488:	f143 0300 	adc.w	r3, r3, #0
 800d48c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d48e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800d492:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d496:	e0fe      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 33:
		seconds +=  5*3600;
 800d498:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d49c:	f244 6150 	movw	r1, #18000	; 0x4650
 800d4a0:	1851      	adds	r1, r2, r1
 800d4a2:	6739      	str	r1, [r7, #112]	; 0x70
 800d4a4:	f143 0300 	adc.w	r3, r3, #0
 800d4a8:	677b      	str	r3, [r7, #116]	; 0x74
 800d4aa:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800d4ae:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d4b2:	e0f0      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 34:
		seconds +=  (5*3600+30*60);
 800d4b4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d4b8:	f644 5158 	movw	r1, #19800	; 0x4d58
 800d4bc:	1851      	adds	r1, r2, r1
 800d4be:	66b9      	str	r1, [r7, #104]	; 0x68
 800d4c0:	f143 0300 	adc.w	r3, r3, #0
 800d4c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d4c6:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800d4ca:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d4ce:	e0e2      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
 800d4d0:	200037f5 	.word	0x200037f5
 800d4d4:	ffff5740 	.word	0xffff5740
 800d4d8:	ffff6550 	.word	0xffff6550
 800d4dc:	ffff7360 	.word	0xffff7360
 800d4e0:	ffff7a68 	.word	0xffff7a68
 800d4e4:	ffff8170 	.word	0xffff8170
 800d4e8:	ffff9d90 	.word	0xffff9d90
 800d4ec:	ffffaba0 	.word	0xffffaba0
 800d4f0:	ffffb9b0 	.word	0xffffb9b0
 800d4f4:	ffffc0b8 	.word	0xffffc0b8
 800d4f8:	ffffcec8 	.word	0xffffcec8
 800d4fc:	ffffd5d0 	.word	0xffffd5d0
	case 35:
		seconds +=  (5*3600+45*60);
 800d500:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d504:	f245 01dc 	movw	r1, #20700	; 0x50dc
 800d508:	1851      	adds	r1, r2, r1
 800d50a:	6639      	str	r1, [r7, #96]	; 0x60
 800d50c:	f143 0300 	adc.w	r3, r3, #0
 800d510:	667b      	str	r3, [r7, #100]	; 0x64
 800d512:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800d516:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d51a:	e0bc      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 36:
		seconds +=  6*3600;
 800d51c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d520:	f245 4160 	movw	r1, #21600	; 0x5460
 800d524:	1851      	adds	r1, r2, r1
 800d526:	65b9      	str	r1, [r7, #88]	; 0x58
 800d528:	f143 0300 	adc.w	r3, r3, #0
 800d52c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d52e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800d532:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d536:	e0ae      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 37:
		seconds +=  (6*3600+30*60);
 800d538:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d53c:	f645 3168 	movw	r1, #23400	; 0x5b68
 800d540:	1851      	adds	r1, r2, r1
 800d542:	6539      	str	r1, [r7, #80]	; 0x50
 800d544:	f143 0300 	adc.w	r3, r3, #0
 800d548:	657b      	str	r3, [r7, #84]	; 0x54
 800d54a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800d54e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d552:	e0a0      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 38:
		seconds +=  7*3600;
 800d554:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d558:	f246 2170 	movw	r1, #25200	; 0x6270
 800d55c:	1851      	adds	r1, r2, r1
 800d55e:	64b9      	str	r1, [r7, #72]	; 0x48
 800d560:	f143 0300 	adc.w	r3, r3, #0
 800d564:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d566:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800d56a:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d56e:	e092      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 39:
		seconds +=  8*3600;
 800d570:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d574:	f512 41e1 	adds.w	r1, r2, #28800	; 0x7080
 800d578:	6439      	str	r1, [r7, #64]	; 0x40
 800d57a:	f143 0300 	adc.w	r3, r3, #0
 800d57e:	647b      	str	r3, [r7, #68]	; 0x44
 800d580:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800d584:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d588:	e085      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 40:
		seconds +=  9*3600;
 800d58a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d58e:	f647 6190 	movw	r1, #32400	; 0x7e90
 800d592:	1851      	adds	r1, r2, r1
 800d594:	63b9      	str	r1, [r7, #56]	; 0x38
 800d596:	f143 0300 	adc.w	r3, r3, #0
 800d59a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d59c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800d5a0:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d5a4:	e077      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 41:
		seconds +=  (9*3600+30*60);
 800d5a6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d5aa:	f248 5198 	movw	r1, #34200	; 0x8598
 800d5ae:	1851      	adds	r1, r2, r1
 800d5b0:	6339      	str	r1, [r7, #48]	; 0x30
 800d5b2:	f143 0300 	adc.w	r3, r3, #0
 800d5b6:	637b      	str	r3, [r7, #52]	; 0x34
 800d5b8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800d5bc:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d5c0:	e069      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 42:
		seconds +=  10*3600;
 800d5c2:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d5c6:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 800d5ca:	1851      	adds	r1, r2, r1
 800d5cc:	62b9      	str	r1, [r7, #40]	; 0x28
 800d5ce:	f143 0300 	adc.w	r3, r3, #0
 800d5d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d5d4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800d5d8:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d5dc:	e05b      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 43:
		seconds +=  (10*3600+30*60);
 800d5de:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d5e2:	f249 31a8 	movw	r1, #37800	; 0x93a8
 800d5e6:	1851      	adds	r1, r2, r1
 800d5e8:	6239      	str	r1, [r7, #32]
 800d5ea:	f143 0300 	adc.w	r3, r3, #0
 800d5ee:	627b      	str	r3, [r7, #36]	; 0x24
 800d5f0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d5f4:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d5f8:	e04d      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 44:
		seconds +=  11*3600;
 800d5fa:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d5fe:	f649 21b0 	movw	r1, #39600	; 0x9ab0
 800d602:	1851      	adds	r1, r2, r1
 800d604:	61b9      	str	r1, [r7, #24]
 800d606:	f143 0300 	adc.w	r3, r3, #0
 800d60a:	61fb      	str	r3, [r7, #28]
 800d60c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d610:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d614:	e03f      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 45:
		seconds +=  (11*3600+30*60);
 800d616:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d61a:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
 800d61e:	1851      	adds	r1, r2, r1
 800d620:	6139      	str	r1, [r7, #16]
 800d622:	f143 0300 	adc.w	r3, r3, #0
 800d626:	617b      	str	r3, [r7, #20]
 800d628:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d62c:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d630:	e031      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 46:
		seconds +=  12*3600;
 800d632:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d636:	f64a 01c0 	movw	r1, #43200	; 0xa8c0
 800d63a:	1851      	adds	r1, r2, r1
 800d63c:	60b9      	str	r1, [r7, #8]
 800d63e:	f143 0300 	adc.w	r3, r3, #0
 800d642:	60fb      	str	r3, [r7, #12]
 800d644:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d648:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d64c:	e023      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 47:
		seconds +=  (12*3600+45*60);
 800d64e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d652:	f24b 314c 	movw	r1, #45900	; 0xb34c
 800d656:	1851      	adds	r1, r2, r1
 800d658:	6039      	str	r1, [r7, #0]
 800d65a:	f143 0300 	adc.w	r3, r3, #0
 800d65e:	607b      	str	r3, [r7, #4]
 800d660:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d664:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800d668:	e015      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 48:
		seconds +=  13*3600;
 800d66a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d66e:	f24b 61d0 	movw	r1, #46800	; 0xb6d0
 800d672:	eb12 0a01 	adds.w	sl, r2, r1
 800d676:	f143 0b00 	adc.w	fp, r3, #0
 800d67a:	e9c7 ab4e 	strd	sl, fp, [r7, #312]	; 0x138
		break;
 800d67e:	e00a      	b.n	800d696 <get_seconds_from_ntp_server+0x5d6>
	case 49:
		seconds +=  14*3600;
 800d680:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800d684:	f24c 41e0 	movw	r1, #50400	; 0xc4e0
 800d688:	eb12 0801 	adds.w	r8, r2, r1
 800d68c:	f143 0900 	adc.w	r9, r3, #0
 800d690:	e9c7 894e 	strd	r8, r9, [r7, #312]	; 0x138
		break;
 800d694:	bf00      	nop

	}

	//calculation for date
	calcdatetime(seconds);
 800d696:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800d69a:	f000 f941 	bl	800d920 <calcdatetime>
}
 800d69e:	bf00      	nop
 800d6a0:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d6aa:	bf00      	nop

0800d6ac <SNTP_init>:

void SNTP_init(uint8_t s, uint8_t *ntp_server, uint8_t tz, uint8_t *buf)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b087      	sub	sp, #28
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	60b9      	str	r1, [r7, #8]
 800d6b4:	607b      	str	r3, [r7, #4]
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	73fb      	strb	r3, [r7, #15]
 800d6ba:	4613      	mov	r3, r2
 800d6bc:	73bb      	strb	r3, [r7, #14]
	NTP_SOCKET = s;
 800d6be:	4a34      	ldr	r2, [pc, #208]	; (800d790 <SNTP_init+0xe4>)
 800d6c0:	7bfb      	ldrb	r3, [r7, #15]
 800d6c2:	7013      	strb	r3, [r2, #0]

	NTPformat.dstaddr[0] = ntp_server[0];
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	781a      	ldrb	r2, [r3, #0]
 800d6c8:	4b32      	ldr	r3, [pc, #200]	; (800d794 <SNTP_init+0xe8>)
 800d6ca:	701a      	strb	r2, [r3, #0]
	NTPformat.dstaddr[1] = ntp_server[1];
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	785a      	ldrb	r2, [r3, #1]
 800d6d0:	4b30      	ldr	r3, [pc, #192]	; (800d794 <SNTP_init+0xe8>)
 800d6d2:	705a      	strb	r2, [r3, #1]
	NTPformat.dstaddr[2] = ntp_server[2];
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	789a      	ldrb	r2, [r3, #2]
 800d6d8:	4b2e      	ldr	r3, [pc, #184]	; (800d794 <SNTP_init+0xe8>)
 800d6da:	709a      	strb	r2, [r3, #2]
	NTPformat.dstaddr[3] = ntp_server[3];
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	78da      	ldrb	r2, [r3, #3]
 800d6e0:	4b2c      	ldr	r3, [pc, #176]	; (800d794 <SNTP_init+0xe8>)
 800d6e2:	70da      	strb	r2, [r3, #3]

	time_zone = tz;
 800d6e4:	4a2c      	ldr	r2, [pc, #176]	; (800d798 <SNTP_init+0xec>)
 800d6e6:	7bbb      	ldrb	r3, [r7, #14]
 800d6e8:	7013      	strb	r3, [r2, #0]

	data_buf = buf;
 800d6ea:	4a2c      	ldr	r2, [pc, #176]	; (800d79c <SNTP_init+0xf0>)
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6013      	str	r3, [r2, #0]

	uint8_t Flag;
	NTPformat.leap = 0;           /* leap indicator */
 800d6f0:	4b28      	ldr	r3, [pc, #160]	; (800d794 <SNTP_init+0xe8>)
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	715a      	strb	r2, [r3, #5]
	NTPformat.version = 4;        /* version number */
 800d6f6:	4b27      	ldr	r3, [pc, #156]	; (800d794 <SNTP_init+0xe8>)
 800d6f8:	2204      	movs	r2, #4
 800d6fa:	711a      	strb	r2, [r3, #4]
	NTPformat.mode = 3;           /* mode */
 800d6fc:	4b25      	ldr	r3, [pc, #148]	; (800d794 <SNTP_init+0xe8>)
 800d6fe:	2203      	movs	r2, #3
 800d700:	719a      	strb	r2, [r3, #6]
	NTPformat.stratum = 0;        /* stratum */
 800d702:	4b24      	ldr	r3, [pc, #144]	; (800d794 <SNTP_init+0xe8>)
 800d704:	2200      	movs	r2, #0
 800d706:	71da      	strb	r2, [r3, #7]
	NTPformat.poll = 0;           /* poll interval */
 800d708:	4b22      	ldr	r3, [pc, #136]	; (800d794 <SNTP_init+0xe8>)
 800d70a:	2200      	movs	r2, #0
 800d70c:	721a      	strb	r2, [r3, #8]
	NTPformat.precision = 0;      /* precision */
 800d70e:	4b21      	ldr	r3, [pc, #132]	; (800d794 <SNTP_init+0xe8>)
 800d710:	2200      	movs	r2, #0
 800d712:	725a      	strb	r2, [r3, #9]
	NTPformat.rootdelay = 0;      /* root delay */
 800d714:	4b1f      	ldr	r3, [pc, #124]	; (800d794 <SNTP_init+0xe8>)
 800d716:	2200      	movs	r2, #0
 800d718:	60da      	str	r2, [r3, #12]
	NTPformat.rootdisp = 0;       /* root dispersion */
 800d71a:	4b1e      	ldr	r3, [pc, #120]	; (800d794 <SNTP_init+0xe8>)
 800d71c:	2200      	movs	r2, #0
 800d71e:	611a      	str	r2, [r3, #16]
	NTPformat.refid = 0;          /* reference ID */
 800d720:	4b1c      	ldr	r3, [pc, #112]	; (800d794 <SNTP_init+0xe8>)
 800d722:	2200      	movs	r2, #0
 800d724:	751a      	strb	r2, [r3, #20]
	NTPformat.reftime = 0;        /* reference time */
 800d726:	491b      	ldr	r1, [pc, #108]	; (800d794 <SNTP_init+0xe8>)
 800d728:	f04f 0200 	mov.w	r2, #0
 800d72c:	f04f 0300 	mov.w	r3, #0
 800d730:	e9c1 2306 	strd	r2, r3, [r1, #24]
	NTPformat.org = 0;            /* origin timestamp */
 800d734:	4917      	ldr	r1, [pc, #92]	; (800d794 <SNTP_init+0xe8>)
 800d736:	f04f 0200 	mov.w	r2, #0
 800d73a:	f04f 0300 	mov.w	r3, #0
 800d73e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	NTPformat.rec = 0;            /* receive timestamp */
 800d742:	4914      	ldr	r1, [pc, #80]	; (800d794 <SNTP_init+0xe8>)
 800d744:	f04f 0200 	mov.w	r2, #0
 800d748:	f04f 0300 	mov.w	r3, #0
 800d74c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	NTPformat.xmt = 1;            /* transmit timestamp */
 800d750:	4910      	ldr	r1, [pc, #64]	; (800d794 <SNTP_init+0xe8>)
 800d752:	f04f 0201 	mov.w	r2, #1
 800d756:	f04f 0300 	mov.w	r3, #0
 800d75a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	Flag = (NTPformat.leap<<6)+(NTPformat.version<<3)+NTPformat.mode; //one byte Flag
 800d75e:	4b0d      	ldr	r3, [pc, #52]	; (800d794 <SNTP_init+0xe8>)
 800d760:	795b      	ldrb	r3, [r3, #5]
 800d762:	019b      	lsls	r3, r3, #6
 800d764:	b2da      	uxtb	r2, r3
 800d766:	4b0b      	ldr	r3, [pc, #44]	; (800d794 <SNTP_init+0xe8>)
 800d768:	791b      	ldrb	r3, [r3, #4]
 800d76a:	00db      	lsls	r3, r3, #3
 800d76c:	b2db      	uxtb	r3, r3
 800d76e:	4413      	add	r3, r2
 800d770:	b2da      	uxtb	r2, r3
 800d772:	4b08      	ldr	r3, [pc, #32]	; (800d794 <SNTP_init+0xe8>)
 800d774:	799b      	ldrb	r3, [r3, #6]
 800d776:	4413      	add	r3, r2
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	75fb      	strb	r3, [r7, #23]
 800d77c:	7dfa      	ldrb	r2, [r7, #23]
	memcpy(ntpmessage,(void const*)(&Flag),1);
 800d77e:	4b08      	ldr	r3, [pc, #32]	; (800d7a0 <SNTP_init+0xf4>)
 800d780:	701a      	strb	r2, [r3, #0]
}
 800d782:	bf00      	nop
 800d784:	371c      	adds	r7, #28
 800d786:	46bd      	mov	sp, r7
 800d788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78c:	4770      	bx	lr
 800d78e:	bf00      	nop
 800d790:	200037f4 	.word	0x200037f4
 800d794:	20003780 	.word	0x20003780
 800d798:	200037f5 	.word	0x200037f5
 800d79c:	200037f0 	.word	0x200037f0
 800d7a0:	200037c0 	.word	0x200037c0

0800d7a4 <SNTP_run>:

int8_t SNTP_run(datetime *time)
{
 800d7a4:	b590      	push	{r4, r7, lr}
 800d7a6:	b089      	sub	sp, #36	; 0x24
 800d7a8:	af02      	add	r7, sp, #8
 800d7aa:	6078      	str	r0, [r7, #4]
	uint16_t RSR_len;
	uint32_t destip = 0;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	613b      	str	r3, [r7, #16]
	uint16_t destport;
	uint16_t startindex = 40; //last 8-byte of data_buf[size is 48 byte] is xmt, so the startindex should be 40
 800d7b0:	2328      	movs	r3, #40	; 0x28
 800d7b2:	82bb      	strh	r3, [r7, #20]

	switch(getSn_SR(NTP_SOCKET))
 800d7b4:	4b53      	ldr	r3, [pc, #332]	; (800d904 <SNTP_run+0x160>)
 800d7b6:	781b      	ldrb	r3, [r3, #0]
 800d7b8:	009b      	lsls	r3, r3, #2
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	00db      	lsls	r3, r3, #3
 800d7be:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7fc fc84 	bl	800a0d0 <WIZCHIP_READ>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	f000 808b 	beq.w	800d8e6 <SNTP_run+0x142>
 800d7d0:	2b22      	cmp	r3, #34	; 0x22
 800d7d2:	f040 8091 	bne.w	800d8f8 <SNTP_run+0x154>
	{
	case SOCK_UDP:
		if ((RSR_len = getSn_RX_RSR(NTP_SOCKET)) > 0)
 800d7d6:	4b4b      	ldr	r3, [pc, #300]	; (800d904 <SNTP_run+0x160>)
 800d7d8:	781b      	ldrb	r3, [r3, #0]
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7fc fe1d 	bl	800a41a <getSn_RX_RSR>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	82fb      	strh	r3, [r7, #22]
 800d7e4:	8afb      	ldrh	r3, [r7, #22]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d03a      	beq.n	800d860 <SNTP_run+0xbc>
		{
			if (RSR_len > MAX_SNTP_BUF_SIZE) RSR_len = MAX_SNTP_BUF_SIZE;	// if Rx data size is lager than TX_RX_MAX_BUF_SIZE
 800d7ea:	8afb      	ldrh	r3, [r7, #22]
 800d7ec:	2b38      	cmp	r3, #56	; 0x38
 800d7ee:	d901      	bls.n	800d7f4 <SNTP_run+0x50>
 800d7f0:	2338      	movs	r3, #56	; 0x38
 800d7f2:	82fb      	strh	r3, [r7, #22]
			recvfrom(NTP_SOCKET, data_buf, RSR_len, (uint8_t *)&destip, &destport);
 800d7f4:	4b43      	ldr	r3, [pc, #268]	; (800d904 <SNTP_run+0x160>)
 800d7f6:	7818      	ldrb	r0, [r3, #0]
 800d7f8:	4b43      	ldr	r3, [pc, #268]	; (800d908 <SNTP_run+0x164>)
 800d7fa:	6819      	ldr	r1, [r3, #0]
 800d7fc:	f107 0410 	add.w	r4, r7, #16
 800d800:	8afa      	ldrh	r2, [r7, #22]
 800d802:	f107 030e 	add.w	r3, r7, #14
 800d806:	9300      	str	r3, [sp, #0]
 800d808:	4623      	mov	r3, r4
 800d80a:	f7fd fd0d 	bl	800b228 <recvfrom>

			get_seconds_from_ntp_server(data_buf,startindex);
 800d80e:	4b3e      	ldr	r3, [pc, #248]	; (800d908 <SNTP_run+0x164>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	8aba      	ldrh	r2, [r7, #20]
 800d814:	4611      	mov	r1, r2
 800d816:	4618      	mov	r0, r3
 800d818:	f7ff fc52 	bl	800d0c0 <get_seconds_from_ntp_server>
			time->yy = Nowdatetime.yy;
 800d81c:	4b3b      	ldr	r3, [pc, #236]	; (800d90c <SNTP_run+0x168>)
 800d81e:	881a      	ldrh	r2, [r3, #0]
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	801a      	strh	r2, [r3, #0]
			time->mo = Nowdatetime.mo;
 800d824:	4b39      	ldr	r3, [pc, #228]	; (800d90c <SNTP_run+0x168>)
 800d826:	789a      	ldrb	r2, [r3, #2]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	709a      	strb	r2, [r3, #2]
			time->dd = Nowdatetime.dd;
 800d82c:	4b37      	ldr	r3, [pc, #220]	; (800d90c <SNTP_run+0x168>)
 800d82e:	78da      	ldrb	r2, [r3, #3]
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	70da      	strb	r2, [r3, #3]
			time->hh = Nowdatetime.hh;
 800d834:	4b35      	ldr	r3, [pc, #212]	; (800d90c <SNTP_run+0x168>)
 800d836:	791a      	ldrb	r2, [r3, #4]
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	711a      	strb	r2, [r3, #4]
			time->mm = Nowdatetime.mm;
 800d83c:	4b33      	ldr	r3, [pc, #204]	; (800d90c <SNTP_run+0x168>)
 800d83e:	795a      	ldrb	r2, [r3, #5]
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	715a      	strb	r2, [r3, #5]
			time->ss = Nowdatetime.ss;
 800d844:	4b31      	ldr	r3, [pc, #196]	; (800d90c <SNTP_run+0x168>)
 800d846:	799a      	ldrb	r2, [r3, #6]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	719a      	strb	r2, [r3, #6]

			ntp_retry_cnt=0;
 800d84c:	4b30      	ldr	r3, [pc, #192]	; (800d910 <SNTP_run+0x16c>)
 800d84e:	2200      	movs	r2, #0
 800d850:	801a      	strh	r2, [r3, #0]
			close(NTP_SOCKET);
 800d852:	4b2c      	ldr	r3, [pc, #176]	; (800d904 <SNTP_run+0x160>)
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	4618      	mov	r0, r3
 800d858:	f7fd f840 	bl	800a8dc <close>

			return 1;
 800d85c:	2301      	movs	r3, #1
 800d85e:	e04c      	b.n	800d8fa <SNTP_run+0x156>
		}

		if(ntp_retry_cnt<0xFFFF)
 800d860:	4b2b      	ldr	r3, [pc, #172]	; (800d910 <SNTP_run+0x16c>)
 800d862:	881b      	ldrh	r3, [r3, #0]
 800d864:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d868:	4293      	cmp	r3, r2
 800d86a:	d033      	beq.n	800d8d4 <SNTP_run+0x130>
		{
			if(ntp_retry_cnt==0)//first send request, no need to wait
 800d86c:	4b28      	ldr	r3, [pc, #160]	; (800d910 <SNTP_run+0x16c>)
 800d86e:	881b      	ldrh	r3, [r3, #0]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d10f      	bne.n	800d894 <SNTP_run+0xf0>
			{
				sendto(NTP_SOCKET,ntpmessage,sizeof(ntpmessage),NTPformat.dstaddr,ntp_port);
 800d874:	4b23      	ldr	r3, [pc, #140]	; (800d904 <SNTP_run+0x160>)
 800d876:	7818      	ldrb	r0, [r3, #0]
 800d878:	237b      	movs	r3, #123	; 0x7b
 800d87a:	9300      	str	r3, [sp, #0]
 800d87c:	4b25      	ldr	r3, [pc, #148]	; (800d914 <SNTP_run+0x170>)
 800d87e:	2230      	movs	r2, #48	; 0x30
 800d880:	4925      	ldr	r1, [pc, #148]	; (800d918 <SNTP_run+0x174>)
 800d882:	f7fd fb9b 	bl	800afbc <sendto>
				ntp_retry_cnt++;
 800d886:	4b22      	ldr	r3, [pc, #136]	; (800d910 <SNTP_run+0x16c>)
 800d888:	881b      	ldrh	r3, [r3, #0]
 800d88a:	3301      	adds	r3, #1
 800d88c:	b29a      	uxth	r2, r3
 800d88e:	4b20      	ldr	r3, [pc, #128]	; (800d910 <SNTP_run+0x16c>)
 800d890:	801a      	strh	r2, [r3, #0]
#ifdef _SNTP_DEBUG_
			printf("ntp retry failed!\r\n");
#endif
			close(NTP_SOCKET);
		}
		break;
 800d892:	e030      	b.n	800d8f6 <SNTP_run+0x152>
				if((ntp_retry_cnt % 0xFFF) == 0) //wait time
 800d894:	4b1e      	ldr	r3, [pc, #120]	; (800d910 <SNTP_run+0x16c>)
 800d896:	881a      	ldrh	r2, [r3, #0]
 800d898:	4b20      	ldr	r3, [pc, #128]	; (800d91c <SNTP_run+0x178>)
 800d89a:	fba3 1302 	umull	r1, r3, r3, r2
 800d89e:	1ad1      	subs	r1, r2, r3
 800d8a0:	0849      	lsrs	r1, r1, #1
 800d8a2:	440b      	add	r3, r1
 800d8a4:	0ad9      	lsrs	r1, r3, #11
 800d8a6:	460b      	mov	r3, r1
 800d8a8:	031b      	lsls	r3, r3, #12
 800d8aa:	1a5b      	subs	r3, r3, r1
 800d8ac:	1ad3      	subs	r3, r2, r3
 800d8ae:	b29b      	uxth	r3, r3
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d120      	bne.n	800d8f6 <SNTP_run+0x152>
					sendto(NTP_SOCKET,ntpmessage,sizeof(ntpmessage),NTPformat.dstaddr,ntp_port);
 800d8b4:	4b13      	ldr	r3, [pc, #76]	; (800d904 <SNTP_run+0x160>)
 800d8b6:	7818      	ldrb	r0, [r3, #0]
 800d8b8:	237b      	movs	r3, #123	; 0x7b
 800d8ba:	9300      	str	r3, [sp, #0]
 800d8bc:	4b15      	ldr	r3, [pc, #84]	; (800d914 <SNTP_run+0x170>)
 800d8be:	2230      	movs	r2, #48	; 0x30
 800d8c0:	4915      	ldr	r1, [pc, #84]	; (800d918 <SNTP_run+0x174>)
 800d8c2:	f7fd fb7b 	bl	800afbc <sendto>
					ntp_retry_cnt++;
 800d8c6:	4b12      	ldr	r3, [pc, #72]	; (800d910 <SNTP_run+0x16c>)
 800d8c8:	881b      	ldrh	r3, [r3, #0]
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	b29a      	uxth	r2, r3
 800d8ce:	4b10      	ldr	r3, [pc, #64]	; (800d910 <SNTP_run+0x16c>)
 800d8d0:	801a      	strh	r2, [r3, #0]
		break;
 800d8d2:	e010      	b.n	800d8f6 <SNTP_run+0x152>
			ntp_retry_cnt=0;
 800d8d4:	4b0e      	ldr	r3, [pc, #56]	; (800d910 <SNTP_run+0x16c>)
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	801a      	strh	r2, [r3, #0]
			close(NTP_SOCKET);
 800d8da:	4b0a      	ldr	r3, [pc, #40]	; (800d904 <SNTP_run+0x160>)
 800d8dc:	781b      	ldrb	r3, [r3, #0]
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f7fc fffc 	bl	800a8dc <close>
		break;
 800d8e4:	e007      	b.n	800d8f6 <SNTP_run+0x152>
	case SOCK_CLOSED:
		socket(NTP_SOCKET,Sn_MR_UDP,ntp_port,0);
 800d8e6:	4b07      	ldr	r3, [pc, #28]	; (800d904 <SNTP_run+0x160>)
 800d8e8:	7818      	ldrb	r0, [r3, #0]
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	227b      	movs	r2, #123	; 0x7b
 800d8ee:	2102      	movs	r1, #2
 800d8f0:	f7fc fede 	bl	800a6b0 <socket>
		break;
 800d8f4:	e000      	b.n	800d8f8 <SNTP_run+0x154>
		break;
 800d8f6:	bf00      	nop
	}
	// Return value
	// 0 - failed / 1 - success
	return 0;
 800d8f8:	2300      	movs	r3, #0
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	371c      	adds	r7, #28
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd90      	pop	{r4, r7, pc}
 800d902:	bf00      	nop
 800d904:	200037f4 	.word	0x200037f4
 800d908:	200037f0 	.word	0x200037f0
 800d90c:	200037b8 	.word	0x200037b8
 800d910:	200037f6 	.word	0x200037f6
 800d914:	20003780 	.word	0x20003780
 800d918:	200037c0 	.word	0x200037c0
 800d91c:	00100101 	.word	0x00100101

0800d920 <calcdatetime>:

void calcdatetime(tstamp seconds)
{
 800d920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d924:	b0ae      	sub	sp, #184	; 0xb8
 800d926:	af00      	add	r7, sp, #0
 800d928:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
	uint8_t yf=0;
 800d92c:	2300      	movs	r3, #0
 800d92e:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	tstamp n=0,d=0,total_d=0,rz=0;
 800d932:	f04f 0200 	mov.w	r2, #0
 800d936:	f04f 0300 	mov.w	r3, #0
 800d93a:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 800d93e:	f04f 0200 	mov.w	r2, #0
 800d942:	f04f 0300 	mov.w	r3, #0
 800d946:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 800d94a:	f04f 0200 	mov.w	r2, #0
 800d94e:	f04f 0300 	mov.w	r3, #0
 800d952:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 800d956:	f04f 0200 	mov.w	r2, #0
 800d95a:	f04f 0300 	mov.w	r3, #0
 800d95e:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	uint16_t y=0,r=0,yr=0;
 800d962:	2300      	movs	r3, #0
 800d964:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800d968:	2300      	movs	r3, #0
 800d96a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800d96e:	2300      	movs	r3, #0
 800d970:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	signed long long yd=0;
 800d974:	f04f 0200 	mov.w	r2, #0
 800d978:	f04f 0300 	mov.w	r3, #0
 800d97c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88

	n = seconds;
 800d980:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d984:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	total_d = seconds/(SECS_PERDAY);
 800d988:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d98c:	4ac0      	ldr	r2, [pc, #768]	; (800dc90 <calcdatetime+0x370>)
 800d98e:	f04f 0300 	mov.w	r3, #0
 800d992:	f7f2 fc7d 	bl	8000290 <__aeabi_uldivmod>
 800d996:	4602      	mov	r2, r0
 800d998:	460b      	mov	r3, r1
 800d99a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	d=0;
 800d99e:	f04f 0200 	mov.w	r2, #0
 800d9a2:	f04f 0300 	mov.w	r3, #0
 800d9a6:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	uint32_t p_year_total_sec=SECS_PERDAY*365;
 800d9aa:	4bba      	ldr	r3, [pc, #744]	; (800dc94 <calcdatetime+0x374>)
 800d9ac:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t r_year_total_sec=SECS_PERDAY*366;
 800d9ae:	4bba      	ldr	r3, [pc, #744]	; (800dc98 <calcdatetime+0x378>)
 800d9b0:	677b      	str	r3, [r7, #116]	; 0x74
	while(n>=p_year_total_sec)
 800d9b2:	e06c      	b.n	800da8e <calcdatetime+0x16e>
	{
		if((EPOCH+r)%400==0 || ((EPOCH+r)%100!=0 && (EPOCH+r)%4==0))
 800d9b4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800d9b8:	f203 716c 	addw	r1, r3, #1900	; 0x76c
 800d9bc:	4bb7      	ldr	r3, [pc, #732]	; (800dc9c <calcdatetime+0x37c>)
 800d9be:	fb83 2301 	smull	r2, r3, r3, r1
 800d9c2:	11da      	asrs	r2, r3, #7
 800d9c4:	17cb      	asrs	r3, r1, #31
 800d9c6:	1ad3      	subs	r3, r2, r3
 800d9c8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d9cc:	fb02 f303 	mul.w	r3, r2, r3
 800d9d0:	1acb      	subs	r3, r1, r3
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d017      	beq.n	800da06 <calcdatetime+0xe6>
 800d9d6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800d9da:	f203 716c 	addw	r1, r3, #1900	; 0x76c
 800d9de:	4baf      	ldr	r3, [pc, #700]	; (800dc9c <calcdatetime+0x37c>)
 800d9e0:	fb83 2301 	smull	r2, r3, r3, r1
 800d9e4:	115a      	asrs	r2, r3, #5
 800d9e6:	17cb      	asrs	r3, r1, #31
 800d9e8:	1ad3      	subs	r3, r2, r3
 800d9ea:	2264      	movs	r2, #100	; 0x64
 800d9ec:	fb02 f303 	mul.w	r3, r2, r3
 800d9f0:	1acb      	subs	r3, r1, r3
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d024      	beq.n	800da40 <calcdatetime+0x120>
 800d9f6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800d9fa:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800d9fe:	f003 0303 	and.w	r3, r3, #3
 800da02:	2b00      	cmp	r3, #0
 800da04:	d11c      	bne.n	800da40 <calcdatetime+0x120>
		{
			n = n -(r_year_total_sec);
 800da06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da08:	2200      	movs	r2, #0
 800da0a:	4698      	mov	r8, r3
 800da0c:	4691      	mov	r9, r2
 800da0e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800da12:	ebb2 0108 	subs.w	r1, r2, r8
 800da16:	65b9      	str	r1, [r7, #88]	; 0x58
 800da18:	eb63 0309 	sbc.w	r3, r3, r9
 800da1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800da22:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
			d = d + 366;
 800da26:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800da2a:	f512 71b7 	adds.w	r1, r2, #366	; 0x16e
 800da2e:	6539      	str	r1, [r7, #80]	; 0x50
 800da30:	f143 0300 	adc.w	r3, r3, #0
 800da34:	657b      	str	r3, [r7, #84]	; 0x54
 800da36:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800da3a:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 800da3e:	e01c      	b.n	800da7a <calcdatetime+0x15a>
		}
		else
		{
			n = n - (p_year_total_sec);
 800da40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da42:	2200      	movs	r2, #0
 800da44:	469a      	mov	sl, r3
 800da46:	4693      	mov	fp, r2
 800da48:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800da4c:	ebb2 010a 	subs.w	r1, r2, sl
 800da50:	64b9      	str	r1, [r7, #72]	; 0x48
 800da52:	eb63 030b 	sbc.w	r3, r3, fp
 800da56:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800da5c:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
			d = d + 365;
 800da60:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800da64:	f240 116d 	movw	r1, #365	; 0x16d
 800da68:	1851      	adds	r1, r2, r1
 800da6a:	6439      	str	r1, [r7, #64]	; 0x40
 800da6c:	f143 0300 	adc.w	r3, r3, #0
 800da70:	647b      	str	r3, [r7, #68]	; 0x44
 800da72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800da76:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
		}
		r+=1;
 800da7a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800da7e:	3301      	adds	r3, #1
 800da80:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
		y+=1;
 800da84:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800da88:	3301      	adds	r3, #1
 800da8a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	while(n>=p_year_total_sec)
 800da8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da90:	2200      	movs	r2, #0
 800da92:	461c      	mov	r4, r3
 800da94:	4615      	mov	r5, r2
 800da96:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800da9a:	42a2      	cmp	r2, r4
 800da9c:	41ab      	sbcs	r3, r5
 800da9e:	d289      	bcs.n	800d9b4 <calcdatetime+0x94>

	}

	y += EPOCH;
 800daa0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800daa4:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800daa8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

	Nowdatetime.yy = y;
 800daac:	4a7c      	ldr	r2, [pc, #496]	; (800dca0 <calcdatetime+0x380>)
 800daae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800dab2:	8013      	strh	r3, [r2, #0]

	yd=0;
 800dab4:	f04f 0200 	mov.w	r2, #0
 800dab8:	f04f 0300 	mov.w	r3, #0
 800dabc:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	yd = total_d - d;
 800dac0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800dac4:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800dac8:	1a84      	subs	r4, r0, r2
 800daca:	663c      	str	r4, [r7, #96]	; 0x60
 800dacc:	eb61 0303 	sbc.w	r3, r1, r3
 800dad0:	667b      	str	r3, [r7, #100]	; 0x64
 800dad2:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800dad6:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88

	yf=1;
 800dada:	2301      	movs	r3, #1
 800dadc:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	while(yd>=28)
 800dae0:	e0c8      	b.n	800dc74 <calcdatetime+0x354>
	{

		if(yf==1 || yf==3 || yf==5 || yf==7 || yf==8 || yf==10 || yf==12)
 800dae2:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800dae6:	2b01      	cmp	r3, #1
 800dae8:	d017      	beq.n	800db1a <calcdatetime+0x1fa>
 800daea:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800daee:	2b03      	cmp	r3, #3
 800daf0:	d013      	beq.n	800db1a <calcdatetime+0x1fa>
 800daf2:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800daf6:	2b05      	cmp	r3, #5
 800daf8:	d00f      	beq.n	800db1a <calcdatetime+0x1fa>
 800dafa:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800dafe:	2b07      	cmp	r3, #7
 800db00:	d00b      	beq.n	800db1a <calcdatetime+0x1fa>
 800db02:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800db06:	2b08      	cmp	r3, #8
 800db08:	d007      	beq.n	800db1a <calcdatetime+0x1fa>
 800db0a:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800db0e:	2b0a      	cmp	r3, #10
 800db10:	d003      	beq.n	800db1a <calcdatetime+0x1fa>
 800db12:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800db16:	2b0c      	cmp	r3, #12
 800db18:	d11c      	bne.n	800db54 <calcdatetime+0x234>
		{
			yd -= 31;
 800db1a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800db1e:	f1b2 011f 	subs.w	r1, r2, #31
 800db22:	63b9      	str	r1, [r7, #56]	; 0x38
 800db24:	f143 33ff 	adc.w	r3, r3, #4294967295
 800db28:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db2a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800db2e:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			if(yd<0)break;
 800db32:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800db36:	2b00      	cmp	r3, #0
 800db38:	f2c0 80a4 	blt.w	800dc84 <calcdatetime+0x364>
			rz += 31;
 800db3c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800db40:	f112 011f 	adds.w	r1, r2, #31
 800db44:	6339      	str	r1, [r7, #48]	; 0x30
 800db46:	f143 0300 	adc.w	r3, r3, #0
 800db4a:	637b      	str	r3, [r7, #52]	; 0x34
 800db4c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800db50:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		}

		if (yf==2)
 800db54:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800db58:	2b02      	cmp	r3, #2
 800db5a:	d15a      	bne.n	800dc12 <calcdatetime+0x2f2>
		{
			if (y%400==0 || (y%100!=0 && y%4==0))
 800db5c:	f8b7 1096 	ldrh.w	r1, [r7, #150]	; 0x96
 800db60:	4b4e      	ldr	r3, [pc, #312]	; (800dc9c <calcdatetime+0x37c>)
 800db62:	fba3 2301 	umull	r2, r3, r3, r1
 800db66:	09da      	lsrs	r2, r3, #7
 800db68:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800db6c:	fb02 f303 	mul.w	r3, r2, r3
 800db70:	1acb      	subs	r3, r1, r3
 800db72:	b29b      	uxth	r3, r3
 800db74:	2b00      	cmp	r3, #0
 800db76:	d013      	beq.n	800dba0 <calcdatetime+0x280>
 800db78:	f8b7 1096 	ldrh.w	r1, [r7, #150]	; 0x96
 800db7c:	4b47      	ldr	r3, [pc, #284]	; (800dc9c <calcdatetime+0x37c>)
 800db7e:	fba3 2301 	umull	r2, r3, r3, r1
 800db82:	095a      	lsrs	r2, r3, #5
 800db84:	2364      	movs	r3, #100	; 0x64
 800db86:	fb02 f303 	mul.w	r3, r2, r3
 800db8a:	1acb      	subs	r3, r1, r3
 800db8c:	b29b      	uxth	r3, r3
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d023      	beq.n	800dbda <calcdatetime+0x2ba>
 800db92:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800db96:	f003 0303 	and.w	r3, r3, #3
 800db9a:	b29b      	uxth	r3, r3
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d11c      	bne.n	800dbda <calcdatetime+0x2ba>
			{
				yd -= 29;
 800dba0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800dba4:	f1b2 011d 	subs.w	r1, r2, #29
 800dba8:	62b9      	str	r1, [r7, #40]	; 0x28
 800dbaa:	f143 33ff 	adc.w	r3, r3, #4294967295
 800dbae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbb0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800dbb4:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
				if(yd<0)break;
 800dbb8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	db63      	blt.n	800dc88 <calcdatetime+0x368>
				rz += 29;
 800dbc0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800dbc4:	f112 011d 	adds.w	r1, r2, #29
 800dbc8:	6239      	str	r1, [r7, #32]
 800dbca:	f143 0300 	adc.w	r3, r3, #0
 800dbce:	627b      	str	r3, [r7, #36]	; 0x24
 800dbd0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800dbd4:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
 800dbd8:	e01b      	b.n	800dc12 <calcdatetime+0x2f2>
			}
			else
			{
				yd -= 28;
 800dbda:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800dbde:	f1b2 011c 	subs.w	r1, r2, #28
 800dbe2:	61b9      	str	r1, [r7, #24]
 800dbe4:	f143 33ff 	adc.w	r3, r3, #4294967295
 800dbe8:	61fb      	str	r3, [r7, #28]
 800dbea:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800dbee:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
				if(yd<0)break;
 800dbf2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	db48      	blt.n	800dc8c <calcdatetime+0x36c>
				rz += 28;
 800dbfa:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800dbfe:	f112 011c 	adds.w	r1, r2, #28
 800dc02:	6139      	str	r1, [r7, #16]
 800dc04:	f143 0300 	adc.w	r3, r3, #0
 800dc08:	617b      	str	r3, [r7, #20]
 800dc0a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800dc0e:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			}
		}
		if(yf==4 || yf==6 || yf==9 || yf==11 )
 800dc12:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800dc16:	2b04      	cmp	r3, #4
 800dc18:	d00b      	beq.n	800dc32 <calcdatetime+0x312>
 800dc1a:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800dc1e:	2b06      	cmp	r3, #6
 800dc20:	d007      	beq.n	800dc32 <calcdatetime+0x312>
 800dc22:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800dc26:	2b09      	cmp	r3, #9
 800dc28:	d003      	beq.n	800dc32 <calcdatetime+0x312>
 800dc2a:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800dc2e:	2b0b      	cmp	r3, #11
 800dc30:	d11b      	bne.n	800dc6a <calcdatetime+0x34a>
		{
			yd -= 30;
 800dc32:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800dc36:	f1b2 011e 	subs.w	r1, r2, #30
 800dc3a:	60b9      	str	r1, [r7, #8]
 800dc3c:	f143 33ff 	adc.w	r3, r3, #4294967295
 800dc40:	60fb      	str	r3, [r7, #12]
 800dc42:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800dc46:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			if(yd<0)break;
 800dc4a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	db28      	blt.n	800dca4 <calcdatetime+0x384>
			rz += 30;
 800dc52:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800dc56:	f112 011e 	adds.w	r1, r2, #30
 800dc5a:	6039      	str	r1, [r7, #0]
 800dc5c:	f143 0300 	adc.w	r3, r3, #0
 800dc60:	607b      	str	r3, [r7, #4]
 800dc62:	e9d7 3400 	ldrd	r3, r4, [r7]
 800dc66:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		}
		yf += 1;
 800dc6a:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800dc6e:	3301      	adds	r3, #1
 800dc70:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	while(yd>=28)
 800dc74:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800dc78:	2a1c      	cmp	r2, #28
 800dc7a:	f173 0300 	sbcs.w	r3, r3, #0
 800dc7e:	f6bf af30 	bge.w	800dae2 <calcdatetime+0x1c2>
 800dc82:	e010      	b.n	800dca6 <calcdatetime+0x386>
			if(yd<0)break;
 800dc84:	bf00      	nop
 800dc86:	e00e      	b.n	800dca6 <calcdatetime+0x386>
				if(yd<0)break;
 800dc88:	bf00      	nop
 800dc8a:	e00c      	b.n	800dca6 <calcdatetime+0x386>
				if(yd<0)break;
 800dc8c:	bf00      	nop
 800dc8e:	e00a      	b.n	800dca6 <calcdatetime+0x386>
 800dc90:	00015180 	.word	0x00015180
 800dc94:	01e13380 	.word	0x01e13380
 800dc98:	01e28500 	.word	0x01e28500
 800dc9c:	51eb851f 	.word	0x51eb851f
 800dca0:	200037b8 	.word	0x200037b8
			if(yd<0)break;
 800dca4:	bf00      	nop

	}
	Nowdatetime.mo=yf;
 800dca6:	4a2e      	ldr	r2, [pc, #184]	; (800dd60 <calcdatetime+0x440>)
 800dca8:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800dcac:	7093      	strb	r3, [r2, #2]
	yr = total_d-d-rz;
 800dcae:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 800dcb2:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800dcb6:	1ad3      	subs	r3, r2, r3
 800dcb8:	b29a      	uxth	r2, r3
 800dcba:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800dcbe:	1ad3      	subs	r3, r2, r3
 800dcc0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

	yr += 1;
 800dcc4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800dcc8:	3301      	adds	r3, #1
 800dcca:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

	Nowdatetime.dd=yr;
 800dcce:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800dcd2:	b2da      	uxtb	r2, r3
 800dcd4:	4b22      	ldr	r3, [pc, #136]	; (800dd60 <calcdatetime+0x440>)
 800dcd6:	70da      	strb	r2, [r3, #3]

	//calculation for time
	seconds = seconds%SECS_PERDAY;
 800dcd8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800dcdc:	4a21      	ldr	r2, [pc, #132]	; (800dd64 <calcdatetime+0x444>)
 800dcde:	f04f 0300 	mov.w	r3, #0
 800dce2:	f7f2 fad5 	bl	8000290 <__aeabi_uldivmod>
 800dce6:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	Nowdatetime.hh = seconds/3600;
 800dcea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800dcee:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800dcf2:	f04f 0300 	mov.w	r3, #0
 800dcf6:	f7f2 facb 	bl	8000290 <__aeabi_uldivmod>
 800dcfa:	4602      	mov	r2, r0
 800dcfc:	460b      	mov	r3, r1
 800dcfe:	b2d2      	uxtb	r2, r2
 800dd00:	4b17      	ldr	r3, [pc, #92]	; (800dd60 <calcdatetime+0x440>)
 800dd02:	711a      	strb	r2, [r3, #4]
	Nowdatetime.mm = (seconds%3600)/60;
 800dd04:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800dd08:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800dd0c:	f04f 0300 	mov.w	r3, #0
 800dd10:	f7f2 fabe 	bl	8000290 <__aeabi_uldivmod>
 800dd14:	4610      	mov	r0, r2
 800dd16:	4619      	mov	r1, r3
 800dd18:	f04f 023c 	mov.w	r2, #60	; 0x3c
 800dd1c:	f04f 0300 	mov.w	r3, #0
 800dd20:	f7f2 fab6 	bl	8000290 <__aeabi_uldivmod>
 800dd24:	4602      	mov	r2, r0
 800dd26:	460b      	mov	r3, r1
 800dd28:	b2d2      	uxtb	r2, r2
 800dd2a:	4b0d      	ldr	r3, [pc, #52]	; (800dd60 <calcdatetime+0x440>)
 800dd2c:	715a      	strb	r2, [r3, #5]
	Nowdatetime.ss = (seconds%3600)%60;
 800dd2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800dd32:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800dd36:	f04f 0300 	mov.w	r3, #0
 800dd3a:	f7f2 faa9 	bl	8000290 <__aeabi_uldivmod>
 800dd3e:	4610      	mov	r0, r2
 800dd40:	4619      	mov	r1, r3
 800dd42:	f04f 023c 	mov.w	r2, #60	; 0x3c
 800dd46:	f04f 0300 	mov.w	r3, #0
 800dd4a:	f7f2 faa1 	bl	8000290 <__aeabi_uldivmod>
 800dd4e:	b2d2      	uxtb	r2, r2
 800dd50:	4b03      	ldr	r3, [pc, #12]	; (800dd60 <calcdatetime+0x440>)
 800dd52:	719a      	strb	r2, [r3, #6]

}
 800dd54:	bf00      	nop
 800dd56:	37b8      	adds	r7, #184	; 0xb8
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dd5e:	bf00      	nop
 800dd60:	200037b8 	.word	0x200037b8
 800dd64:	00015180 	.word	0x00015180

0800dd68 <__errno>:
 800dd68:	4b01      	ldr	r3, [pc, #4]	; (800dd70 <__errno+0x8>)
 800dd6a:	6818      	ldr	r0, [r3, #0]
 800dd6c:	4770      	bx	lr
 800dd6e:	bf00      	nop
 800dd70:	200000ac 	.word	0x200000ac

0800dd74 <__libc_init_array>:
 800dd74:	b570      	push	{r4, r5, r6, lr}
 800dd76:	4d0d      	ldr	r5, [pc, #52]	; (800ddac <__libc_init_array+0x38>)
 800dd78:	4c0d      	ldr	r4, [pc, #52]	; (800ddb0 <__libc_init_array+0x3c>)
 800dd7a:	1b64      	subs	r4, r4, r5
 800dd7c:	10a4      	asrs	r4, r4, #2
 800dd7e:	2600      	movs	r6, #0
 800dd80:	42a6      	cmp	r6, r4
 800dd82:	d109      	bne.n	800dd98 <__libc_init_array+0x24>
 800dd84:	4d0b      	ldr	r5, [pc, #44]	; (800ddb4 <__libc_init_array+0x40>)
 800dd86:	4c0c      	ldr	r4, [pc, #48]	; (800ddb8 <__libc_init_array+0x44>)
 800dd88:	f001 fa2c 	bl	800f1e4 <_init>
 800dd8c:	1b64      	subs	r4, r4, r5
 800dd8e:	10a4      	asrs	r4, r4, #2
 800dd90:	2600      	movs	r6, #0
 800dd92:	42a6      	cmp	r6, r4
 800dd94:	d105      	bne.n	800dda2 <__libc_init_array+0x2e>
 800dd96:	bd70      	pop	{r4, r5, r6, pc}
 800dd98:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd9c:	4798      	blx	r3
 800dd9e:	3601      	adds	r6, #1
 800dda0:	e7ee      	b.n	800dd80 <__libc_init_array+0xc>
 800dda2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dda6:	4798      	blx	r3
 800dda8:	3601      	adds	r6, #1
 800ddaa:	e7f2      	b.n	800dd92 <__libc_init_array+0x1e>
 800ddac:	08010018 	.word	0x08010018
 800ddb0:	08010018 	.word	0x08010018
 800ddb4:	08010018 	.word	0x08010018
 800ddb8:	0801001c 	.word	0x0801001c

0800ddbc <malloc>:
 800ddbc:	4b02      	ldr	r3, [pc, #8]	; (800ddc8 <malloc+0xc>)
 800ddbe:	4601      	mov	r1, r0
 800ddc0:	6818      	ldr	r0, [r3, #0]
 800ddc2:	f000 b88d 	b.w	800dee0 <_malloc_r>
 800ddc6:	bf00      	nop
 800ddc8:	200000ac 	.word	0x200000ac

0800ddcc <free>:
 800ddcc:	4b02      	ldr	r3, [pc, #8]	; (800ddd8 <free+0xc>)
 800ddce:	4601      	mov	r1, r0
 800ddd0:	6818      	ldr	r0, [r3, #0]
 800ddd2:	f000 b819 	b.w	800de08 <_free_r>
 800ddd6:	bf00      	nop
 800ddd8:	200000ac 	.word	0x200000ac

0800dddc <memcpy>:
 800dddc:	440a      	add	r2, r1
 800ddde:	4291      	cmp	r1, r2
 800dde0:	f100 33ff 	add.w	r3, r0, #4294967295
 800dde4:	d100      	bne.n	800dde8 <memcpy+0xc>
 800dde6:	4770      	bx	lr
 800dde8:	b510      	push	{r4, lr}
 800ddea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ddf2:	4291      	cmp	r1, r2
 800ddf4:	d1f9      	bne.n	800ddea <memcpy+0xe>
 800ddf6:	bd10      	pop	{r4, pc}

0800ddf8 <memset>:
 800ddf8:	4402      	add	r2, r0
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	4293      	cmp	r3, r2
 800ddfe:	d100      	bne.n	800de02 <memset+0xa>
 800de00:	4770      	bx	lr
 800de02:	f803 1b01 	strb.w	r1, [r3], #1
 800de06:	e7f9      	b.n	800ddfc <memset+0x4>

0800de08 <_free_r>:
 800de08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de0a:	2900      	cmp	r1, #0
 800de0c:	d044      	beq.n	800de98 <_free_r+0x90>
 800de0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de12:	9001      	str	r0, [sp, #4]
 800de14:	2b00      	cmp	r3, #0
 800de16:	f1a1 0404 	sub.w	r4, r1, #4
 800de1a:	bfb8      	it	lt
 800de1c:	18e4      	addlt	r4, r4, r3
 800de1e:	f000 fc8d 	bl	800e73c <__malloc_lock>
 800de22:	4a1e      	ldr	r2, [pc, #120]	; (800de9c <_free_r+0x94>)
 800de24:	9801      	ldr	r0, [sp, #4]
 800de26:	6813      	ldr	r3, [r2, #0]
 800de28:	b933      	cbnz	r3, 800de38 <_free_r+0x30>
 800de2a:	6063      	str	r3, [r4, #4]
 800de2c:	6014      	str	r4, [r2, #0]
 800de2e:	b003      	add	sp, #12
 800de30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de34:	f000 bc88 	b.w	800e748 <__malloc_unlock>
 800de38:	42a3      	cmp	r3, r4
 800de3a:	d908      	bls.n	800de4e <_free_r+0x46>
 800de3c:	6825      	ldr	r5, [r4, #0]
 800de3e:	1961      	adds	r1, r4, r5
 800de40:	428b      	cmp	r3, r1
 800de42:	bf01      	itttt	eq
 800de44:	6819      	ldreq	r1, [r3, #0]
 800de46:	685b      	ldreq	r3, [r3, #4]
 800de48:	1949      	addeq	r1, r1, r5
 800de4a:	6021      	streq	r1, [r4, #0]
 800de4c:	e7ed      	b.n	800de2a <_free_r+0x22>
 800de4e:	461a      	mov	r2, r3
 800de50:	685b      	ldr	r3, [r3, #4]
 800de52:	b10b      	cbz	r3, 800de58 <_free_r+0x50>
 800de54:	42a3      	cmp	r3, r4
 800de56:	d9fa      	bls.n	800de4e <_free_r+0x46>
 800de58:	6811      	ldr	r1, [r2, #0]
 800de5a:	1855      	adds	r5, r2, r1
 800de5c:	42a5      	cmp	r5, r4
 800de5e:	d10b      	bne.n	800de78 <_free_r+0x70>
 800de60:	6824      	ldr	r4, [r4, #0]
 800de62:	4421      	add	r1, r4
 800de64:	1854      	adds	r4, r2, r1
 800de66:	42a3      	cmp	r3, r4
 800de68:	6011      	str	r1, [r2, #0]
 800de6a:	d1e0      	bne.n	800de2e <_free_r+0x26>
 800de6c:	681c      	ldr	r4, [r3, #0]
 800de6e:	685b      	ldr	r3, [r3, #4]
 800de70:	6053      	str	r3, [r2, #4]
 800de72:	4421      	add	r1, r4
 800de74:	6011      	str	r1, [r2, #0]
 800de76:	e7da      	b.n	800de2e <_free_r+0x26>
 800de78:	d902      	bls.n	800de80 <_free_r+0x78>
 800de7a:	230c      	movs	r3, #12
 800de7c:	6003      	str	r3, [r0, #0]
 800de7e:	e7d6      	b.n	800de2e <_free_r+0x26>
 800de80:	6825      	ldr	r5, [r4, #0]
 800de82:	1961      	adds	r1, r4, r5
 800de84:	428b      	cmp	r3, r1
 800de86:	bf04      	itt	eq
 800de88:	6819      	ldreq	r1, [r3, #0]
 800de8a:	685b      	ldreq	r3, [r3, #4]
 800de8c:	6063      	str	r3, [r4, #4]
 800de8e:	bf04      	itt	eq
 800de90:	1949      	addeq	r1, r1, r5
 800de92:	6021      	streq	r1, [r4, #0]
 800de94:	6054      	str	r4, [r2, #4]
 800de96:	e7ca      	b.n	800de2e <_free_r+0x26>
 800de98:	b003      	add	sp, #12
 800de9a:	bd30      	pop	{r4, r5, pc}
 800de9c:	200037f8 	.word	0x200037f8

0800dea0 <sbrk_aligned>:
 800dea0:	b570      	push	{r4, r5, r6, lr}
 800dea2:	4e0e      	ldr	r6, [pc, #56]	; (800dedc <sbrk_aligned+0x3c>)
 800dea4:	460c      	mov	r4, r1
 800dea6:	6831      	ldr	r1, [r6, #0]
 800dea8:	4605      	mov	r5, r0
 800deaa:	b911      	cbnz	r1, 800deb2 <sbrk_aligned+0x12>
 800deac:	f000 f91a 	bl	800e0e4 <_sbrk_r>
 800deb0:	6030      	str	r0, [r6, #0]
 800deb2:	4621      	mov	r1, r4
 800deb4:	4628      	mov	r0, r5
 800deb6:	f000 f915 	bl	800e0e4 <_sbrk_r>
 800deba:	1c43      	adds	r3, r0, #1
 800debc:	d00a      	beq.n	800ded4 <sbrk_aligned+0x34>
 800debe:	1cc4      	adds	r4, r0, #3
 800dec0:	f024 0403 	bic.w	r4, r4, #3
 800dec4:	42a0      	cmp	r0, r4
 800dec6:	d007      	beq.n	800ded8 <sbrk_aligned+0x38>
 800dec8:	1a21      	subs	r1, r4, r0
 800deca:	4628      	mov	r0, r5
 800decc:	f000 f90a 	bl	800e0e4 <_sbrk_r>
 800ded0:	3001      	adds	r0, #1
 800ded2:	d101      	bne.n	800ded8 <sbrk_aligned+0x38>
 800ded4:	f04f 34ff 	mov.w	r4, #4294967295
 800ded8:	4620      	mov	r0, r4
 800deda:	bd70      	pop	{r4, r5, r6, pc}
 800dedc:	200037fc 	.word	0x200037fc

0800dee0 <_malloc_r>:
 800dee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dee4:	1ccd      	adds	r5, r1, #3
 800dee6:	f025 0503 	bic.w	r5, r5, #3
 800deea:	3508      	adds	r5, #8
 800deec:	2d0c      	cmp	r5, #12
 800deee:	bf38      	it	cc
 800def0:	250c      	movcc	r5, #12
 800def2:	2d00      	cmp	r5, #0
 800def4:	4607      	mov	r7, r0
 800def6:	db01      	blt.n	800defc <_malloc_r+0x1c>
 800def8:	42a9      	cmp	r1, r5
 800defa:	d905      	bls.n	800df08 <_malloc_r+0x28>
 800defc:	230c      	movs	r3, #12
 800defe:	603b      	str	r3, [r7, #0]
 800df00:	2600      	movs	r6, #0
 800df02:	4630      	mov	r0, r6
 800df04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df08:	4e2e      	ldr	r6, [pc, #184]	; (800dfc4 <_malloc_r+0xe4>)
 800df0a:	f000 fc17 	bl	800e73c <__malloc_lock>
 800df0e:	6833      	ldr	r3, [r6, #0]
 800df10:	461c      	mov	r4, r3
 800df12:	bb34      	cbnz	r4, 800df62 <_malloc_r+0x82>
 800df14:	4629      	mov	r1, r5
 800df16:	4638      	mov	r0, r7
 800df18:	f7ff ffc2 	bl	800dea0 <sbrk_aligned>
 800df1c:	1c43      	adds	r3, r0, #1
 800df1e:	4604      	mov	r4, r0
 800df20:	d14d      	bne.n	800dfbe <_malloc_r+0xde>
 800df22:	6834      	ldr	r4, [r6, #0]
 800df24:	4626      	mov	r6, r4
 800df26:	2e00      	cmp	r6, #0
 800df28:	d140      	bne.n	800dfac <_malloc_r+0xcc>
 800df2a:	6823      	ldr	r3, [r4, #0]
 800df2c:	4631      	mov	r1, r6
 800df2e:	4638      	mov	r0, r7
 800df30:	eb04 0803 	add.w	r8, r4, r3
 800df34:	f000 f8d6 	bl	800e0e4 <_sbrk_r>
 800df38:	4580      	cmp	r8, r0
 800df3a:	d13a      	bne.n	800dfb2 <_malloc_r+0xd2>
 800df3c:	6821      	ldr	r1, [r4, #0]
 800df3e:	3503      	adds	r5, #3
 800df40:	1a6d      	subs	r5, r5, r1
 800df42:	f025 0503 	bic.w	r5, r5, #3
 800df46:	3508      	adds	r5, #8
 800df48:	2d0c      	cmp	r5, #12
 800df4a:	bf38      	it	cc
 800df4c:	250c      	movcc	r5, #12
 800df4e:	4629      	mov	r1, r5
 800df50:	4638      	mov	r0, r7
 800df52:	f7ff ffa5 	bl	800dea0 <sbrk_aligned>
 800df56:	3001      	adds	r0, #1
 800df58:	d02b      	beq.n	800dfb2 <_malloc_r+0xd2>
 800df5a:	6823      	ldr	r3, [r4, #0]
 800df5c:	442b      	add	r3, r5
 800df5e:	6023      	str	r3, [r4, #0]
 800df60:	e00e      	b.n	800df80 <_malloc_r+0xa0>
 800df62:	6822      	ldr	r2, [r4, #0]
 800df64:	1b52      	subs	r2, r2, r5
 800df66:	d41e      	bmi.n	800dfa6 <_malloc_r+0xc6>
 800df68:	2a0b      	cmp	r2, #11
 800df6a:	d916      	bls.n	800df9a <_malloc_r+0xba>
 800df6c:	1961      	adds	r1, r4, r5
 800df6e:	42a3      	cmp	r3, r4
 800df70:	6025      	str	r5, [r4, #0]
 800df72:	bf18      	it	ne
 800df74:	6059      	strne	r1, [r3, #4]
 800df76:	6863      	ldr	r3, [r4, #4]
 800df78:	bf08      	it	eq
 800df7a:	6031      	streq	r1, [r6, #0]
 800df7c:	5162      	str	r2, [r4, r5]
 800df7e:	604b      	str	r3, [r1, #4]
 800df80:	4638      	mov	r0, r7
 800df82:	f104 060b 	add.w	r6, r4, #11
 800df86:	f000 fbdf 	bl	800e748 <__malloc_unlock>
 800df8a:	f026 0607 	bic.w	r6, r6, #7
 800df8e:	1d23      	adds	r3, r4, #4
 800df90:	1af2      	subs	r2, r6, r3
 800df92:	d0b6      	beq.n	800df02 <_malloc_r+0x22>
 800df94:	1b9b      	subs	r3, r3, r6
 800df96:	50a3      	str	r3, [r4, r2]
 800df98:	e7b3      	b.n	800df02 <_malloc_r+0x22>
 800df9a:	6862      	ldr	r2, [r4, #4]
 800df9c:	42a3      	cmp	r3, r4
 800df9e:	bf0c      	ite	eq
 800dfa0:	6032      	streq	r2, [r6, #0]
 800dfa2:	605a      	strne	r2, [r3, #4]
 800dfa4:	e7ec      	b.n	800df80 <_malloc_r+0xa0>
 800dfa6:	4623      	mov	r3, r4
 800dfa8:	6864      	ldr	r4, [r4, #4]
 800dfaa:	e7b2      	b.n	800df12 <_malloc_r+0x32>
 800dfac:	4634      	mov	r4, r6
 800dfae:	6876      	ldr	r6, [r6, #4]
 800dfb0:	e7b9      	b.n	800df26 <_malloc_r+0x46>
 800dfb2:	230c      	movs	r3, #12
 800dfb4:	603b      	str	r3, [r7, #0]
 800dfb6:	4638      	mov	r0, r7
 800dfb8:	f000 fbc6 	bl	800e748 <__malloc_unlock>
 800dfbc:	e7a1      	b.n	800df02 <_malloc_r+0x22>
 800dfbe:	6025      	str	r5, [r4, #0]
 800dfc0:	e7de      	b.n	800df80 <_malloc_r+0xa0>
 800dfc2:	bf00      	nop
 800dfc4:	200037f8 	.word	0x200037f8

0800dfc8 <iprintf>:
 800dfc8:	b40f      	push	{r0, r1, r2, r3}
 800dfca:	4b0a      	ldr	r3, [pc, #40]	; (800dff4 <iprintf+0x2c>)
 800dfcc:	b513      	push	{r0, r1, r4, lr}
 800dfce:	681c      	ldr	r4, [r3, #0]
 800dfd0:	b124      	cbz	r4, 800dfdc <iprintf+0x14>
 800dfd2:	69a3      	ldr	r3, [r4, #24]
 800dfd4:	b913      	cbnz	r3, 800dfdc <iprintf+0x14>
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	f000 faaa 	bl	800e530 <__sinit>
 800dfdc:	ab05      	add	r3, sp, #20
 800dfde:	9a04      	ldr	r2, [sp, #16]
 800dfe0:	68a1      	ldr	r1, [r4, #8]
 800dfe2:	9301      	str	r3, [sp, #4]
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	f000 fd3b 	bl	800ea60 <_vfiprintf_r>
 800dfea:	b002      	add	sp, #8
 800dfec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dff0:	b004      	add	sp, #16
 800dff2:	4770      	bx	lr
 800dff4:	200000ac 	.word	0x200000ac

0800dff8 <_puts_r>:
 800dff8:	b570      	push	{r4, r5, r6, lr}
 800dffa:	460e      	mov	r6, r1
 800dffc:	4605      	mov	r5, r0
 800dffe:	b118      	cbz	r0, 800e008 <_puts_r+0x10>
 800e000:	6983      	ldr	r3, [r0, #24]
 800e002:	b90b      	cbnz	r3, 800e008 <_puts_r+0x10>
 800e004:	f000 fa94 	bl	800e530 <__sinit>
 800e008:	69ab      	ldr	r3, [r5, #24]
 800e00a:	68ac      	ldr	r4, [r5, #8]
 800e00c:	b913      	cbnz	r3, 800e014 <_puts_r+0x1c>
 800e00e:	4628      	mov	r0, r5
 800e010:	f000 fa8e 	bl	800e530 <__sinit>
 800e014:	4b2c      	ldr	r3, [pc, #176]	; (800e0c8 <_puts_r+0xd0>)
 800e016:	429c      	cmp	r4, r3
 800e018:	d120      	bne.n	800e05c <_puts_r+0x64>
 800e01a:	686c      	ldr	r4, [r5, #4]
 800e01c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e01e:	07db      	lsls	r3, r3, #31
 800e020:	d405      	bmi.n	800e02e <_puts_r+0x36>
 800e022:	89a3      	ldrh	r3, [r4, #12]
 800e024:	0598      	lsls	r0, r3, #22
 800e026:	d402      	bmi.n	800e02e <_puts_r+0x36>
 800e028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e02a:	f000 fb1f 	bl	800e66c <__retarget_lock_acquire_recursive>
 800e02e:	89a3      	ldrh	r3, [r4, #12]
 800e030:	0719      	lsls	r1, r3, #28
 800e032:	d51d      	bpl.n	800e070 <_puts_r+0x78>
 800e034:	6923      	ldr	r3, [r4, #16]
 800e036:	b1db      	cbz	r3, 800e070 <_puts_r+0x78>
 800e038:	3e01      	subs	r6, #1
 800e03a:	68a3      	ldr	r3, [r4, #8]
 800e03c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e040:	3b01      	subs	r3, #1
 800e042:	60a3      	str	r3, [r4, #8]
 800e044:	bb39      	cbnz	r1, 800e096 <_puts_r+0x9e>
 800e046:	2b00      	cmp	r3, #0
 800e048:	da38      	bge.n	800e0bc <_puts_r+0xc4>
 800e04a:	4622      	mov	r2, r4
 800e04c:	210a      	movs	r1, #10
 800e04e:	4628      	mov	r0, r5
 800e050:	f000 f894 	bl	800e17c <__swbuf_r>
 800e054:	3001      	adds	r0, #1
 800e056:	d011      	beq.n	800e07c <_puts_r+0x84>
 800e058:	250a      	movs	r5, #10
 800e05a:	e011      	b.n	800e080 <_puts_r+0x88>
 800e05c:	4b1b      	ldr	r3, [pc, #108]	; (800e0cc <_puts_r+0xd4>)
 800e05e:	429c      	cmp	r4, r3
 800e060:	d101      	bne.n	800e066 <_puts_r+0x6e>
 800e062:	68ac      	ldr	r4, [r5, #8]
 800e064:	e7da      	b.n	800e01c <_puts_r+0x24>
 800e066:	4b1a      	ldr	r3, [pc, #104]	; (800e0d0 <_puts_r+0xd8>)
 800e068:	429c      	cmp	r4, r3
 800e06a:	bf08      	it	eq
 800e06c:	68ec      	ldreq	r4, [r5, #12]
 800e06e:	e7d5      	b.n	800e01c <_puts_r+0x24>
 800e070:	4621      	mov	r1, r4
 800e072:	4628      	mov	r0, r5
 800e074:	f000 f8d4 	bl	800e220 <__swsetup_r>
 800e078:	2800      	cmp	r0, #0
 800e07a:	d0dd      	beq.n	800e038 <_puts_r+0x40>
 800e07c:	f04f 35ff 	mov.w	r5, #4294967295
 800e080:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e082:	07da      	lsls	r2, r3, #31
 800e084:	d405      	bmi.n	800e092 <_puts_r+0x9a>
 800e086:	89a3      	ldrh	r3, [r4, #12]
 800e088:	059b      	lsls	r3, r3, #22
 800e08a:	d402      	bmi.n	800e092 <_puts_r+0x9a>
 800e08c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e08e:	f000 faee 	bl	800e66e <__retarget_lock_release_recursive>
 800e092:	4628      	mov	r0, r5
 800e094:	bd70      	pop	{r4, r5, r6, pc}
 800e096:	2b00      	cmp	r3, #0
 800e098:	da04      	bge.n	800e0a4 <_puts_r+0xac>
 800e09a:	69a2      	ldr	r2, [r4, #24]
 800e09c:	429a      	cmp	r2, r3
 800e09e:	dc06      	bgt.n	800e0ae <_puts_r+0xb6>
 800e0a0:	290a      	cmp	r1, #10
 800e0a2:	d004      	beq.n	800e0ae <_puts_r+0xb6>
 800e0a4:	6823      	ldr	r3, [r4, #0]
 800e0a6:	1c5a      	adds	r2, r3, #1
 800e0a8:	6022      	str	r2, [r4, #0]
 800e0aa:	7019      	strb	r1, [r3, #0]
 800e0ac:	e7c5      	b.n	800e03a <_puts_r+0x42>
 800e0ae:	4622      	mov	r2, r4
 800e0b0:	4628      	mov	r0, r5
 800e0b2:	f000 f863 	bl	800e17c <__swbuf_r>
 800e0b6:	3001      	adds	r0, #1
 800e0b8:	d1bf      	bne.n	800e03a <_puts_r+0x42>
 800e0ba:	e7df      	b.n	800e07c <_puts_r+0x84>
 800e0bc:	6823      	ldr	r3, [r4, #0]
 800e0be:	250a      	movs	r5, #10
 800e0c0:	1c5a      	adds	r2, r3, #1
 800e0c2:	6022      	str	r2, [r4, #0]
 800e0c4:	701d      	strb	r5, [r3, #0]
 800e0c6:	e7db      	b.n	800e080 <_puts_r+0x88>
 800e0c8:	0800ff9c 	.word	0x0800ff9c
 800e0cc:	0800ffbc 	.word	0x0800ffbc
 800e0d0:	0800ff7c 	.word	0x0800ff7c

0800e0d4 <puts>:
 800e0d4:	4b02      	ldr	r3, [pc, #8]	; (800e0e0 <puts+0xc>)
 800e0d6:	4601      	mov	r1, r0
 800e0d8:	6818      	ldr	r0, [r3, #0]
 800e0da:	f7ff bf8d 	b.w	800dff8 <_puts_r>
 800e0de:	bf00      	nop
 800e0e0:	200000ac 	.word	0x200000ac

0800e0e4 <_sbrk_r>:
 800e0e4:	b538      	push	{r3, r4, r5, lr}
 800e0e6:	4d06      	ldr	r5, [pc, #24]	; (800e100 <_sbrk_r+0x1c>)
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	4604      	mov	r4, r0
 800e0ec:	4608      	mov	r0, r1
 800e0ee:	602b      	str	r3, [r5, #0]
 800e0f0:	f7f4 fd76 	bl	8002be0 <_sbrk>
 800e0f4:	1c43      	adds	r3, r0, #1
 800e0f6:	d102      	bne.n	800e0fe <_sbrk_r+0x1a>
 800e0f8:	682b      	ldr	r3, [r5, #0]
 800e0fa:	b103      	cbz	r3, 800e0fe <_sbrk_r+0x1a>
 800e0fc:	6023      	str	r3, [r4, #0]
 800e0fe:	bd38      	pop	{r3, r4, r5, pc}
 800e100:	20003804 	.word	0x20003804

0800e104 <siprintf>:
 800e104:	b40e      	push	{r1, r2, r3}
 800e106:	b500      	push	{lr}
 800e108:	b09c      	sub	sp, #112	; 0x70
 800e10a:	ab1d      	add	r3, sp, #116	; 0x74
 800e10c:	9002      	str	r0, [sp, #8]
 800e10e:	9006      	str	r0, [sp, #24]
 800e110:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e114:	4809      	ldr	r0, [pc, #36]	; (800e13c <siprintf+0x38>)
 800e116:	9107      	str	r1, [sp, #28]
 800e118:	9104      	str	r1, [sp, #16]
 800e11a:	4909      	ldr	r1, [pc, #36]	; (800e140 <siprintf+0x3c>)
 800e11c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e120:	9105      	str	r1, [sp, #20]
 800e122:	6800      	ldr	r0, [r0, #0]
 800e124:	9301      	str	r3, [sp, #4]
 800e126:	a902      	add	r1, sp, #8
 800e128:	f000 fb70 	bl	800e80c <_svfiprintf_r>
 800e12c:	9b02      	ldr	r3, [sp, #8]
 800e12e:	2200      	movs	r2, #0
 800e130:	701a      	strb	r2, [r3, #0]
 800e132:	b01c      	add	sp, #112	; 0x70
 800e134:	f85d eb04 	ldr.w	lr, [sp], #4
 800e138:	b003      	add	sp, #12
 800e13a:	4770      	bx	lr
 800e13c:	200000ac 	.word	0x200000ac
 800e140:	ffff0208 	.word	0xffff0208

0800e144 <strcpy>:
 800e144:	4603      	mov	r3, r0
 800e146:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e14a:	f803 2b01 	strb.w	r2, [r3], #1
 800e14e:	2a00      	cmp	r2, #0
 800e150:	d1f9      	bne.n	800e146 <strcpy+0x2>
 800e152:	4770      	bx	lr

0800e154 <strncmp>:
 800e154:	b510      	push	{r4, lr}
 800e156:	b17a      	cbz	r2, 800e178 <strncmp+0x24>
 800e158:	4603      	mov	r3, r0
 800e15a:	3901      	subs	r1, #1
 800e15c:	1884      	adds	r4, r0, r2
 800e15e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e162:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e166:	4290      	cmp	r0, r2
 800e168:	d101      	bne.n	800e16e <strncmp+0x1a>
 800e16a:	42a3      	cmp	r3, r4
 800e16c:	d101      	bne.n	800e172 <strncmp+0x1e>
 800e16e:	1a80      	subs	r0, r0, r2
 800e170:	bd10      	pop	{r4, pc}
 800e172:	2800      	cmp	r0, #0
 800e174:	d1f3      	bne.n	800e15e <strncmp+0xa>
 800e176:	e7fa      	b.n	800e16e <strncmp+0x1a>
 800e178:	4610      	mov	r0, r2
 800e17a:	e7f9      	b.n	800e170 <strncmp+0x1c>

0800e17c <__swbuf_r>:
 800e17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e17e:	460e      	mov	r6, r1
 800e180:	4614      	mov	r4, r2
 800e182:	4605      	mov	r5, r0
 800e184:	b118      	cbz	r0, 800e18e <__swbuf_r+0x12>
 800e186:	6983      	ldr	r3, [r0, #24]
 800e188:	b90b      	cbnz	r3, 800e18e <__swbuf_r+0x12>
 800e18a:	f000 f9d1 	bl	800e530 <__sinit>
 800e18e:	4b21      	ldr	r3, [pc, #132]	; (800e214 <__swbuf_r+0x98>)
 800e190:	429c      	cmp	r4, r3
 800e192:	d12b      	bne.n	800e1ec <__swbuf_r+0x70>
 800e194:	686c      	ldr	r4, [r5, #4]
 800e196:	69a3      	ldr	r3, [r4, #24]
 800e198:	60a3      	str	r3, [r4, #8]
 800e19a:	89a3      	ldrh	r3, [r4, #12]
 800e19c:	071a      	lsls	r2, r3, #28
 800e19e:	d52f      	bpl.n	800e200 <__swbuf_r+0x84>
 800e1a0:	6923      	ldr	r3, [r4, #16]
 800e1a2:	b36b      	cbz	r3, 800e200 <__swbuf_r+0x84>
 800e1a4:	6923      	ldr	r3, [r4, #16]
 800e1a6:	6820      	ldr	r0, [r4, #0]
 800e1a8:	1ac0      	subs	r0, r0, r3
 800e1aa:	6963      	ldr	r3, [r4, #20]
 800e1ac:	b2f6      	uxtb	r6, r6
 800e1ae:	4283      	cmp	r3, r0
 800e1b0:	4637      	mov	r7, r6
 800e1b2:	dc04      	bgt.n	800e1be <__swbuf_r+0x42>
 800e1b4:	4621      	mov	r1, r4
 800e1b6:	4628      	mov	r0, r5
 800e1b8:	f000 f926 	bl	800e408 <_fflush_r>
 800e1bc:	bb30      	cbnz	r0, 800e20c <__swbuf_r+0x90>
 800e1be:	68a3      	ldr	r3, [r4, #8]
 800e1c0:	3b01      	subs	r3, #1
 800e1c2:	60a3      	str	r3, [r4, #8]
 800e1c4:	6823      	ldr	r3, [r4, #0]
 800e1c6:	1c5a      	adds	r2, r3, #1
 800e1c8:	6022      	str	r2, [r4, #0]
 800e1ca:	701e      	strb	r6, [r3, #0]
 800e1cc:	6963      	ldr	r3, [r4, #20]
 800e1ce:	3001      	adds	r0, #1
 800e1d0:	4283      	cmp	r3, r0
 800e1d2:	d004      	beq.n	800e1de <__swbuf_r+0x62>
 800e1d4:	89a3      	ldrh	r3, [r4, #12]
 800e1d6:	07db      	lsls	r3, r3, #31
 800e1d8:	d506      	bpl.n	800e1e8 <__swbuf_r+0x6c>
 800e1da:	2e0a      	cmp	r6, #10
 800e1dc:	d104      	bne.n	800e1e8 <__swbuf_r+0x6c>
 800e1de:	4621      	mov	r1, r4
 800e1e0:	4628      	mov	r0, r5
 800e1e2:	f000 f911 	bl	800e408 <_fflush_r>
 800e1e6:	b988      	cbnz	r0, 800e20c <__swbuf_r+0x90>
 800e1e8:	4638      	mov	r0, r7
 800e1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1ec:	4b0a      	ldr	r3, [pc, #40]	; (800e218 <__swbuf_r+0x9c>)
 800e1ee:	429c      	cmp	r4, r3
 800e1f0:	d101      	bne.n	800e1f6 <__swbuf_r+0x7a>
 800e1f2:	68ac      	ldr	r4, [r5, #8]
 800e1f4:	e7cf      	b.n	800e196 <__swbuf_r+0x1a>
 800e1f6:	4b09      	ldr	r3, [pc, #36]	; (800e21c <__swbuf_r+0xa0>)
 800e1f8:	429c      	cmp	r4, r3
 800e1fa:	bf08      	it	eq
 800e1fc:	68ec      	ldreq	r4, [r5, #12]
 800e1fe:	e7ca      	b.n	800e196 <__swbuf_r+0x1a>
 800e200:	4621      	mov	r1, r4
 800e202:	4628      	mov	r0, r5
 800e204:	f000 f80c 	bl	800e220 <__swsetup_r>
 800e208:	2800      	cmp	r0, #0
 800e20a:	d0cb      	beq.n	800e1a4 <__swbuf_r+0x28>
 800e20c:	f04f 37ff 	mov.w	r7, #4294967295
 800e210:	e7ea      	b.n	800e1e8 <__swbuf_r+0x6c>
 800e212:	bf00      	nop
 800e214:	0800ff9c 	.word	0x0800ff9c
 800e218:	0800ffbc 	.word	0x0800ffbc
 800e21c:	0800ff7c 	.word	0x0800ff7c

0800e220 <__swsetup_r>:
 800e220:	4b32      	ldr	r3, [pc, #200]	; (800e2ec <__swsetup_r+0xcc>)
 800e222:	b570      	push	{r4, r5, r6, lr}
 800e224:	681d      	ldr	r5, [r3, #0]
 800e226:	4606      	mov	r6, r0
 800e228:	460c      	mov	r4, r1
 800e22a:	b125      	cbz	r5, 800e236 <__swsetup_r+0x16>
 800e22c:	69ab      	ldr	r3, [r5, #24]
 800e22e:	b913      	cbnz	r3, 800e236 <__swsetup_r+0x16>
 800e230:	4628      	mov	r0, r5
 800e232:	f000 f97d 	bl	800e530 <__sinit>
 800e236:	4b2e      	ldr	r3, [pc, #184]	; (800e2f0 <__swsetup_r+0xd0>)
 800e238:	429c      	cmp	r4, r3
 800e23a:	d10f      	bne.n	800e25c <__swsetup_r+0x3c>
 800e23c:	686c      	ldr	r4, [r5, #4]
 800e23e:	89a3      	ldrh	r3, [r4, #12]
 800e240:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e244:	0719      	lsls	r1, r3, #28
 800e246:	d42c      	bmi.n	800e2a2 <__swsetup_r+0x82>
 800e248:	06dd      	lsls	r5, r3, #27
 800e24a:	d411      	bmi.n	800e270 <__swsetup_r+0x50>
 800e24c:	2309      	movs	r3, #9
 800e24e:	6033      	str	r3, [r6, #0]
 800e250:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e254:	81a3      	strh	r3, [r4, #12]
 800e256:	f04f 30ff 	mov.w	r0, #4294967295
 800e25a:	e03e      	b.n	800e2da <__swsetup_r+0xba>
 800e25c:	4b25      	ldr	r3, [pc, #148]	; (800e2f4 <__swsetup_r+0xd4>)
 800e25e:	429c      	cmp	r4, r3
 800e260:	d101      	bne.n	800e266 <__swsetup_r+0x46>
 800e262:	68ac      	ldr	r4, [r5, #8]
 800e264:	e7eb      	b.n	800e23e <__swsetup_r+0x1e>
 800e266:	4b24      	ldr	r3, [pc, #144]	; (800e2f8 <__swsetup_r+0xd8>)
 800e268:	429c      	cmp	r4, r3
 800e26a:	bf08      	it	eq
 800e26c:	68ec      	ldreq	r4, [r5, #12]
 800e26e:	e7e6      	b.n	800e23e <__swsetup_r+0x1e>
 800e270:	0758      	lsls	r0, r3, #29
 800e272:	d512      	bpl.n	800e29a <__swsetup_r+0x7a>
 800e274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e276:	b141      	cbz	r1, 800e28a <__swsetup_r+0x6a>
 800e278:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e27c:	4299      	cmp	r1, r3
 800e27e:	d002      	beq.n	800e286 <__swsetup_r+0x66>
 800e280:	4630      	mov	r0, r6
 800e282:	f7ff fdc1 	bl	800de08 <_free_r>
 800e286:	2300      	movs	r3, #0
 800e288:	6363      	str	r3, [r4, #52]	; 0x34
 800e28a:	89a3      	ldrh	r3, [r4, #12]
 800e28c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e290:	81a3      	strh	r3, [r4, #12]
 800e292:	2300      	movs	r3, #0
 800e294:	6063      	str	r3, [r4, #4]
 800e296:	6923      	ldr	r3, [r4, #16]
 800e298:	6023      	str	r3, [r4, #0]
 800e29a:	89a3      	ldrh	r3, [r4, #12]
 800e29c:	f043 0308 	orr.w	r3, r3, #8
 800e2a0:	81a3      	strh	r3, [r4, #12]
 800e2a2:	6923      	ldr	r3, [r4, #16]
 800e2a4:	b94b      	cbnz	r3, 800e2ba <__swsetup_r+0x9a>
 800e2a6:	89a3      	ldrh	r3, [r4, #12]
 800e2a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e2ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2b0:	d003      	beq.n	800e2ba <__swsetup_r+0x9a>
 800e2b2:	4621      	mov	r1, r4
 800e2b4:	4630      	mov	r0, r6
 800e2b6:	f000 fa01 	bl	800e6bc <__smakebuf_r>
 800e2ba:	89a0      	ldrh	r0, [r4, #12]
 800e2bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e2c0:	f010 0301 	ands.w	r3, r0, #1
 800e2c4:	d00a      	beq.n	800e2dc <__swsetup_r+0xbc>
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	60a3      	str	r3, [r4, #8]
 800e2ca:	6963      	ldr	r3, [r4, #20]
 800e2cc:	425b      	negs	r3, r3
 800e2ce:	61a3      	str	r3, [r4, #24]
 800e2d0:	6923      	ldr	r3, [r4, #16]
 800e2d2:	b943      	cbnz	r3, 800e2e6 <__swsetup_r+0xc6>
 800e2d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e2d8:	d1ba      	bne.n	800e250 <__swsetup_r+0x30>
 800e2da:	bd70      	pop	{r4, r5, r6, pc}
 800e2dc:	0781      	lsls	r1, r0, #30
 800e2de:	bf58      	it	pl
 800e2e0:	6963      	ldrpl	r3, [r4, #20]
 800e2e2:	60a3      	str	r3, [r4, #8]
 800e2e4:	e7f4      	b.n	800e2d0 <__swsetup_r+0xb0>
 800e2e6:	2000      	movs	r0, #0
 800e2e8:	e7f7      	b.n	800e2da <__swsetup_r+0xba>
 800e2ea:	bf00      	nop
 800e2ec:	200000ac 	.word	0x200000ac
 800e2f0:	0800ff9c 	.word	0x0800ff9c
 800e2f4:	0800ffbc 	.word	0x0800ffbc
 800e2f8:	0800ff7c 	.word	0x0800ff7c

0800e2fc <__sflush_r>:
 800e2fc:	898a      	ldrh	r2, [r1, #12]
 800e2fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e302:	4605      	mov	r5, r0
 800e304:	0710      	lsls	r0, r2, #28
 800e306:	460c      	mov	r4, r1
 800e308:	d458      	bmi.n	800e3bc <__sflush_r+0xc0>
 800e30a:	684b      	ldr	r3, [r1, #4]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	dc05      	bgt.n	800e31c <__sflush_r+0x20>
 800e310:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e312:	2b00      	cmp	r3, #0
 800e314:	dc02      	bgt.n	800e31c <__sflush_r+0x20>
 800e316:	2000      	movs	r0, #0
 800e318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e31c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e31e:	2e00      	cmp	r6, #0
 800e320:	d0f9      	beq.n	800e316 <__sflush_r+0x1a>
 800e322:	2300      	movs	r3, #0
 800e324:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e328:	682f      	ldr	r7, [r5, #0]
 800e32a:	602b      	str	r3, [r5, #0]
 800e32c:	d032      	beq.n	800e394 <__sflush_r+0x98>
 800e32e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e330:	89a3      	ldrh	r3, [r4, #12]
 800e332:	075a      	lsls	r2, r3, #29
 800e334:	d505      	bpl.n	800e342 <__sflush_r+0x46>
 800e336:	6863      	ldr	r3, [r4, #4]
 800e338:	1ac0      	subs	r0, r0, r3
 800e33a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e33c:	b10b      	cbz	r3, 800e342 <__sflush_r+0x46>
 800e33e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e340:	1ac0      	subs	r0, r0, r3
 800e342:	2300      	movs	r3, #0
 800e344:	4602      	mov	r2, r0
 800e346:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e348:	6a21      	ldr	r1, [r4, #32]
 800e34a:	4628      	mov	r0, r5
 800e34c:	47b0      	blx	r6
 800e34e:	1c43      	adds	r3, r0, #1
 800e350:	89a3      	ldrh	r3, [r4, #12]
 800e352:	d106      	bne.n	800e362 <__sflush_r+0x66>
 800e354:	6829      	ldr	r1, [r5, #0]
 800e356:	291d      	cmp	r1, #29
 800e358:	d82c      	bhi.n	800e3b4 <__sflush_r+0xb8>
 800e35a:	4a2a      	ldr	r2, [pc, #168]	; (800e404 <__sflush_r+0x108>)
 800e35c:	40ca      	lsrs	r2, r1
 800e35e:	07d6      	lsls	r6, r2, #31
 800e360:	d528      	bpl.n	800e3b4 <__sflush_r+0xb8>
 800e362:	2200      	movs	r2, #0
 800e364:	6062      	str	r2, [r4, #4]
 800e366:	04d9      	lsls	r1, r3, #19
 800e368:	6922      	ldr	r2, [r4, #16]
 800e36a:	6022      	str	r2, [r4, #0]
 800e36c:	d504      	bpl.n	800e378 <__sflush_r+0x7c>
 800e36e:	1c42      	adds	r2, r0, #1
 800e370:	d101      	bne.n	800e376 <__sflush_r+0x7a>
 800e372:	682b      	ldr	r3, [r5, #0]
 800e374:	b903      	cbnz	r3, 800e378 <__sflush_r+0x7c>
 800e376:	6560      	str	r0, [r4, #84]	; 0x54
 800e378:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e37a:	602f      	str	r7, [r5, #0]
 800e37c:	2900      	cmp	r1, #0
 800e37e:	d0ca      	beq.n	800e316 <__sflush_r+0x1a>
 800e380:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e384:	4299      	cmp	r1, r3
 800e386:	d002      	beq.n	800e38e <__sflush_r+0x92>
 800e388:	4628      	mov	r0, r5
 800e38a:	f7ff fd3d 	bl	800de08 <_free_r>
 800e38e:	2000      	movs	r0, #0
 800e390:	6360      	str	r0, [r4, #52]	; 0x34
 800e392:	e7c1      	b.n	800e318 <__sflush_r+0x1c>
 800e394:	6a21      	ldr	r1, [r4, #32]
 800e396:	2301      	movs	r3, #1
 800e398:	4628      	mov	r0, r5
 800e39a:	47b0      	blx	r6
 800e39c:	1c41      	adds	r1, r0, #1
 800e39e:	d1c7      	bne.n	800e330 <__sflush_r+0x34>
 800e3a0:	682b      	ldr	r3, [r5, #0]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d0c4      	beq.n	800e330 <__sflush_r+0x34>
 800e3a6:	2b1d      	cmp	r3, #29
 800e3a8:	d001      	beq.n	800e3ae <__sflush_r+0xb2>
 800e3aa:	2b16      	cmp	r3, #22
 800e3ac:	d101      	bne.n	800e3b2 <__sflush_r+0xb6>
 800e3ae:	602f      	str	r7, [r5, #0]
 800e3b0:	e7b1      	b.n	800e316 <__sflush_r+0x1a>
 800e3b2:	89a3      	ldrh	r3, [r4, #12]
 800e3b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3b8:	81a3      	strh	r3, [r4, #12]
 800e3ba:	e7ad      	b.n	800e318 <__sflush_r+0x1c>
 800e3bc:	690f      	ldr	r7, [r1, #16]
 800e3be:	2f00      	cmp	r7, #0
 800e3c0:	d0a9      	beq.n	800e316 <__sflush_r+0x1a>
 800e3c2:	0793      	lsls	r3, r2, #30
 800e3c4:	680e      	ldr	r6, [r1, #0]
 800e3c6:	bf08      	it	eq
 800e3c8:	694b      	ldreq	r3, [r1, #20]
 800e3ca:	600f      	str	r7, [r1, #0]
 800e3cc:	bf18      	it	ne
 800e3ce:	2300      	movne	r3, #0
 800e3d0:	eba6 0807 	sub.w	r8, r6, r7
 800e3d4:	608b      	str	r3, [r1, #8]
 800e3d6:	f1b8 0f00 	cmp.w	r8, #0
 800e3da:	dd9c      	ble.n	800e316 <__sflush_r+0x1a>
 800e3dc:	6a21      	ldr	r1, [r4, #32]
 800e3de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e3e0:	4643      	mov	r3, r8
 800e3e2:	463a      	mov	r2, r7
 800e3e4:	4628      	mov	r0, r5
 800e3e6:	47b0      	blx	r6
 800e3e8:	2800      	cmp	r0, #0
 800e3ea:	dc06      	bgt.n	800e3fa <__sflush_r+0xfe>
 800e3ec:	89a3      	ldrh	r3, [r4, #12]
 800e3ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3f2:	81a3      	strh	r3, [r4, #12]
 800e3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e3f8:	e78e      	b.n	800e318 <__sflush_r+0x1c>
 800e3fa:	4407      	add	r7, r0
 800e3fc:	eba8 0800 	sub.w	r8, r8, r0
 800e400:	e7e9      	b.n	800e3d6 <__sflush_r+0xda>
 800e402:	bf00      	nop
 800e404:	20400001 	.word	0x20400001

0800e408 <_fflush_r>:
 800e408:	b538      	push	{r3, r4, r5, lr}
 800e40a:	690b      	ldr	r3, [r1, #16]
 800e40c:	4605      	mov	r5, r0
 800e40e:	460c      	mov	r4, r1
 800e410:	b913      	cbnz	r3, 800e418 <_fflush_r+0x10>
 800e412:	2500      	movs	r5, #0
 800e414:	4628      	mov	r0, r5
 800e416:	bd38      	pop	{r3, r4, r5, pc}
 800e418:	b118      	cbz	r0, 800e422 <_fflush_r+0x1a>
 800e41a:	6983      	ldr	r3, [r0, #24]
 800e41c:	b90b      	cbnz	r3, 800e422 <_fflush_r+0x1a>
 800e41e:	f000 f887 	bl	800e530 <__sinit>
 800e422:	4b14      	ldr	r3, [pc, #80]	; (800e474 <_fflush_r+0x6c>)
 800e424:	429c      	cmp	r4, r3
 800e426:	d11b      	bne.n	800e460 <_fflush_r+0x58>
 800e428:	686c      	ldr	r4, [r5, #4]
 800e42a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d0ef      	beq.n	800e412 <_fflush_r+0xa>
 800e432:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e434:	07d0      	lsls	r0, r2, #31
 800e436:	d404      	bmi.n	800e442 <_fflush_r+0x3a>
 800e438:	0599      	lsls	r1, r3, #22
 800e43a:	d402      	bmi.n	800e442 <_fflush_r+0x3a>
 800e43c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e43e:	f000 f915 	bl	800e66c <__retarget_lock_acquire_recursive>
 800e442:	4628      	mov	r0, r5
 800e444:	4621      	mov	r1, r4
 800e446:	f7ff ff59 	bl	800e2fc <__sflush_r>
 800e44a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e44c:	07da      	lsls	r2, r3, #31
 800e44e:	4605      	mov	r5, r0
 800e450:	d4e0      	bmi.n	800e414 <_fflush_r+0xc>
 800e452:	89a3      	ldrh	r3, [r4, #12]
 800e454:	059b      	lsls	r3, r3, #22
 800e456:	d4dd      	bmi.n	800e414 <_fflush_r+0xc>
 800e458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e45a:	f000 f908 	bl	800e66e <__retarget_lock_release_recursive>
 800e45e:	e7d9      	b.n	800e414 <_fflush_r+0xc>
 800e460:	4b05      	ldr	r3, [pc, #20]	; (800e478 <_fflush_r+0x70>)
 800e462:	429c      	cmp	r4, r3
 800e464:	d101      	bne.n	800e46a <_fflush_r+0x62>
 800e466:	68ac      	ldr	r4, [r5, #8]
 800e468:	e7df      	b.n	800e42a <_fflush_r+0x22>
 800e46a:	4b04      	ldr	r3, [pc, #16]	; (800e47c <_fflush_r+0x74>)
 800e46c:	429c      	cmp	r4, r3
 800e46e:	bf08      	it	eq
 800e470:	68ec      	ldreq	r4, [r5, #12]
 800e472:	e7da      	b.n	800e42a <_fflush_r+0x22>
 800e474:	0800ff9c 	.word	0x0800ff9c
 800e478:	0800ffbc 	.word	0x0800ffbc
 800e47c:	0800ff7c 	.word	0x0800ff7c

0800e480 <std>:
 800e480:	2300      	movs	r3, #0
 800e482:	b510      	push	{r4, lr}
 800e484:	4604      	mov	r4, r0
 800e486:	e9c0 3300 	strd	r3, r3, [r0]
 800e48a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e48e:	6083      	str	r3, [r0, #8]
 800e490:	8181      	strh	r1, [r0, #12]
 800e492:	6643      	str	r3, [r0, #100]	; 0x64
 800e494:	81c2      	strh	r2, [r0, #14]
 800e496:	6183      	str	r3, [r0, #24]
 800e498:	4619      	mov	r1, r3
 800e49a:	2208      	movs	r2, #8
 800e49c:	305c      	adds	r0, #92	; 0x5c
 800e49e:	f7ff fcab 	bl	800ddf8 <memset>
 800e4a2:	4b05      	ldr	r3, [pc, #20]	; (800e4b8 <std+0x38>)
 800e4a4:	6263      	str	r3, [r4, #36]	; 0x24
 800e4a6:	4b05      	ldr	r3, [pc, #20]	; (800e4bc <std+0x3c>)
 800e4a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e4aa:	4b05      	ldr	r3, [pc, #20]	; (800e4c0 <std+0x40>)
 800e4ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e4ae:	4b05      	ldr	r3, [pc, #20]	; (800e4c4 <std+0x44>)
 800e4b0:	6224      	str	r4, [r4, #32]
 800e4b2:	6323      	str	r3, [r4, #48]	; 0x30
 800e4b4:	bd10      	pop	{r4, pc}
 800e4b6:	bf00      	nop
 800e4b8:	0800efe9 	.word	0x0800efe9
 800e4bc:	0800f00b 	.word	0x0800f00b
 800e4c0:	0800f043 	.word	0x0800f043
 800e4c4:	0800f067 	.word	0x0800f067

0800e4c8 <_cleanup_r>:
 800e4c8:	4901      	ldr	r1, [pc, #4]	; (800e4d0 <_cleanup_r+0x8>)
 800e4ca:	f000 b8af 	b.w	800e62c <_fwalk_reent>
 800e4ce:	bf00      	nop
 800e4d0:	0800e409 	.word	0x0800e409

0800e4d4 <__sfmoreglue>:
 800e4d4:	b570      	push	{r4, r5, r6, lr}
 800e4d6:	2268      	movs	r2, #104	; 0x68
 800e4d8:	1e4d      	subs	r5, r1, #1
 800e4da:	4355      	muls	r5, r2
 800e4dc:	460e      	mov	r6, r1
 800e4de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e4e2:	f7ff fcfd 	bl	800dee0 <_malloc_r>
 800e4e6:	4604      	mov	r4, r0
 800e4e8:	b140      	cbz	r0, 800e4fc <__sfmoreglue+0x28>
 800e4ea:	2100      	movs	r1, #0
 800e4ec:	e9c0 1600 	strd	r1, r6, [r0]
 800e4f0:	300c      	adds	r0, #12
 800e4f2:	60a0      	str	r0, [r4, #8]
 800e4f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e4f8:	f7ff fc7e 	bl	800ddf8 <memset>
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	bd70      	pop	{r4, r5, r6, pc}

0800e500 <__sfp_lock_acquire>:
 800e500:	4801      	ldr	r0, [pc, #4]	; (800e508 <__sfp_lock_acquire+0x8>)
 800e502:	f000 b8b3 	b.w	800e66c <__retarget_lock_acquire_recursive>
 800e506:	bf00      	nop
 800e508:	20003801 	.word	0x20003801

0800e50c <__sfp_lock_release>:
 800e50c:	4801      	ldr	r0, [pc, #4]	; (800e514 <__sfp_lock_release+0x8>)
 800e50e:	f000 b8ae 	b.w	800e66e <__retarget_lock_release_recursive>
 800e512:	bf00      	nop
 800e514:	20003801 	.word	0x20003801

0800e518 <__sinit_lock_acquire>:
 800e518:	4801      	ldr	r0, [pc, #4]	; (800e520 <__sinit_lock_acquire+0x8>)
 800e51a:	f000 b8a7 	b.w	800e66c <__retarget_lock_acquire_recursive>
 800e51e:	bf00      	nop
 800e520:	20003802 	.word	0x20003802

0800e524 <__sinit_lock_release>:
 800e524:	4801      	ldr	r0, [pc, #4]	; (800e52c <__sinit_lock_release+0x8>)
 800e526:	f000 b8a2 	b.w	800e66e <__retarget_lock_release_recursive>
 800e52a:	bf00      	nop
 800e52c:	20003802 	.word	0x20003802

0800e530 <__sinit>:
 800e530:	b510      	push	{r4, lr}
 800e532:	4604      	mov	r4, r0
 800e534:	f7ff fff0 	bl	800e518 <__sinit_lock_acquire>
 800e538:	69a3      	ldr	r3, [r4, #24]
 800e53a:	b11b      	cbz	r3, 800e544 <__sinit+0x14>
 800e53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e540:	f7ff bff0 	b.w	800e524 <__sinit_lock_release>
 800e544:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e548:	6523      	str	r3, [r4, #80]	; 0x50
 800e54a:	4b13      	ldr	r3, [pc, #76]	; (800e598 <__sinit+0x68>)
 800e54c:	4a13      	ldr	r2, [pc, #76]	; (800e59c <__sinit+0x6c>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	62a2      	str	r2, [r4, #40]	; 0x28
 800e552:	42a3      	cmp	r3, r4
 800e554:	bf04      	itt	eq
 800e556:	2301      	moveq	r3, #1
 800e558:	61a3      	streq	r3, [r4, #24]
 800e55a:	4620      	mov	r0, r4
 800e55c:	f000 f820 	bl	800e5a0 <__sfp>
 800e560:	6060      	str	r0, [r4, #4]
 800e562:	4620      	mov	r0, r4
 800e564:	f000 f81c 	bl	800e5a0 <__sfp>
 800e568:	60a0      	str	r0, [r4, #8]
 800e56a:	4620      	mov	r0, r4
 800e56c:	f000 f818 	bl	800e5a0 <__sfp>
 800e570:	2200      	movs	r2, #0
 800e572:	60e0      	str	r0, [r4, #12]
 800e574:	2104      	movs	r1, #4
 800e576:	6860      	ldr	r0, [r4, #4]
 800e578:	f7ff ff82 	bl	800e480 <std>
 800e57c:	68a0      	ldr	r0, [r4, #8]
 800e57e:	2201      	movs	r2, #1
 800e580:	2109      	movs	r1, #9
 800e582:	f7ff ff7d 	bl	800e480 <std>
 800e586:	68e0      	ldr	r0, [r4, #12]
 800e588:	2202      	movs	r2, #2
 800e58a:	2112      	movs	r1, #18
 800e58c:	f7ff ff78 	bl	800e480 <std>
 800e590:	2301      	movs	r3, #1
 800e592:	61a3      	str	r3, [r4, #24]
 800e594:	e7d2      	b.n	800e53c <__sinit+0xc>
 800e596:	bf00      	nop
 800e598:	0800ff78 	.word	0x0800ff78
 800e59c:	0800e4c9 	.word	0x0800e4c9

0800e5a0 <__sfp>:
 800e5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5a2:	4607      	mov	r7, r0
 800e5a4:	f7ff ffac 	bl	800e500 <__sfp_lock_acquire>
 800e5a8:	4b1e      	ldr	r3, [pc, #120]	; (800e624 <__sfp+0x84>)
 800e5aa:	681e      	ldr	r6, [r3, #0]
 800e5ac:	69b3      	ldr	r3, [r6, #24]
 800e5ae:	b913      	cbnz	r3, 800e5b6 <__sfp+0x16>
 800e5b0:	4630      	mov	r0, r6
 800e5b2:	f7ff ffbd 	bl	800e530 <__sinit>
 800e5b6:	3648      	adds	r6, #72	; 0x48
 800e5b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e5bc:	3b01      	subs	r3, #1
 800e5be:	d503      	bpl.n	800e5c8 <__sfp+0x28>
 800e5c0:	6833      	ldr	r3, [r6, #0]
 800e5c2:	b30b      	cbz	r3, 800e608 <__sfp+0x68>
 800e5c4:	6836      	ldr	r6, [r6, #0]
 800e5c6:	e7f7      	b.n	800e5b8 <__sfp+0x18>
 800e5c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e5cc:	b9d5      	cbnz	r5, 800e604 <__sfp+0x64>
 800e5ce:	4b16      	ldr	r3, [pc, #88]	; (800e628 <__sfp+0x88>)
 800e5d0:	60e3      	str	r3, [r4, #12]
 800e5d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e5d6:	6665      	str	r5, [r4, #100]	; 0x64
 800e5d8:	f000 f847 	bl	800e66a <__retarget_lock_init_recursive>
 800e5dc:	f7ff ff96 	bl	800e50c <__sfp_lock_release>
 800e5e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e5e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e5e8:	6025      	str	r5, [r4, #0]
 800e5ea:	61a5      	str	r5, [r4, #24]
 800e5ec:	2208      	movs	r2, #8
 800e5ee:	4629      	mov	r1, r5
 800e5f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e5f4:	f7ff fc00 	bl	800ddf8 <memset>
 800e5f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e5fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e600:	4620      	mov	r0, r4
 800e602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e604:	3468      	adds	r4, #104	; 0x68
 800e606:	e7d9      	b.n	800e5bc <__sfp+0x1c>
 800e608:	2104      	movs	r1, #4
 800e60a:	4638      	mov	r0, r7
 800e60c:	f7ff ff62 	bl	800e4d4 <__sfmoreglue>
 800e610:	4604      	mov	r4, r0
 800e612:	6030      	str	r0, [r6, #0]
 800e614:	2800      	cmp	r0, #0
 800e616:	d1d5      	bne.n	800e5c4 <__sfp+0x24>
 800e618:	f7ff ff78 	bl	800e50c <__sfp_lock_release>
 800e61c:	230c      	movs	r3, #12
 800e61e:	603b      	str	r3, [r7, #0]
 800e620:	e7ee      	b.n	800e600 <__sfp+0x60>
 800e622:	bf00      	nop
 800e624:	0800ff78 	.word	0x0800ff78
 800e628:	ffff0001 	.word	0xffff0001

0800e62c <_fwalk_reent>:
 800e62c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e630:	4606      	mov	r6, r0
 800e632:	4688      	mov	r8, r1
 800e634:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e638:	2700      	movs	r7, #0
 800e63a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e63e:	f1b9 0901 	subs.w	r9, r9, #1
 800e642:	d505      	bpl.n	800e650 <_fwalk_reent+0x24>
 800e644:	6824      	ldr	r4, [r4, #0]
 800e646:	2c00      	cmp	r4, #0
 800e648:	d1f7      	bne.n	800e63a <_fwalk_reent+0xe>
 800e64a:	4638      	mov	r0, r7
 800e64c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e650:	89ab      	ldrh	r3, [r5, #12]
 800e652:	2b01      	cmp	r3, #1
 800e654:	d907      	bls.n	800e666 <_fwalk_reent+0x3a>
 800e656:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e65a:	3301      	adds	r3, #1
 800e65c:	d003      	beq.n	800e666 <_fwalk_reent+0x3a>
 800e65e:	4629      	mov	r1, r5
 800e660:	4630      	mov	r0, r6
 800e662:	47c0      	blx	r8
 800e664:	4307      	orrs	r7, r0
 800e666:	3568      	adds	r5, #104	; 0x68
 800e668:	e7e9      	b.n	800e63e <_fwalk_reent+0x12>

0800e66a <__retarget_lock_init_recursive>:
 800e66a:	4770      	bx	lr

0800e66c <__retarget_lock_acquire_recursive>:
 800e66c:	4770      	bx	lr

0800e66e <__retarget_lock_release_recursive>:
 800e66e:	4770      	bx	lr

0800e670 <__swhatbuf_r>:
 800e670:	b570      	push	{r4, r5, r6, lr}
 800e672:	460e      	mov	r6, r1
 800e674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e678:	2900      	cmp	r1, #0
 800e67a:	b096      	sub	sp, #88	; 0x58
 800e67c:	4614      	mov	r4, r2
 800e67e:	461d      	mov	r5, r3
 800e680:	da08      	bge.n	800e694 <__swhatbuf_r+0x24>
 800e682:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e686:	2200      	movs	r2, #0
 800e688:	602a      	str	r2, [r5, #0]
 800e68a:	061a      	lsls	r2, r3, #24
 800e68c:	d410      	bmi.n	800e6b0 <__swhatbuf_r+0x40>
 800e68e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e692:	e00e      	b.n	800e6b2 <__swhatbuf_r+0x42>
 800e694:	466a      	mov	r2, sp
 800e696:	f000 fd0d 	bl	800f0b4 <_fstat_r>
 800e69a:	2800      	cmp	r0, #0
 800e69c:	dbf1      	blt.n	800e682 <__swhatbuf_r+0x12>
 800e69e:	9a01      	ldr	r2, [sp, #4]
 800e6a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e6a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e6a8:	425a      	negs	r2, r3
 800e6aa:	415a      	adcs	r2, r3
 800e6ac:	602a      	str	r2, [r5, #0]
 800e6ae:	e7ee      	b.n	800e68e <__swhatbuf_r+0x1e>
 800e6b0:	2340      	movs	r3, #64	; 0x40
 800e6b2:	2000      	movs	r0, #0
 800e6b4:	6023      	str	r3, [r4, #0]
 800e6b6:	b016      	add	sp, #88	; 0x58
 800e6b8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e6bc <__smakebuf_r>:
 800e6bc:	898b      	ldrh	r3, [r1, #12]
 800e6be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e6c0:	079d      	lsls	r5, r3, #30
 800e6c2:	4606      	mov	r6, r0
 800e6c4:	460c      	mov	r4, r1
 800e6c6:	d507      	bpl.n	800e6d8 <__smakebuf_r+0x1c>
 800e6c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e6cc:	6023      	str	r3, [r4, #0]
 800e6ce:	6123      	str	r3, [r4, #16]
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	6163      	str	r3, [r4, #20]
 800e6d4:	b002      	add	sp, #8
 800e6d6:	bd70      	pop	{r4, r5, r6, pc}
 800e6d8:	ab01      	add	r3, sp, #4
 800e6da:	466a      	mov	r2, sp
 800e6dc:	f7ff ffc8 	bl	800e670 <__swhatbuf_r>
 800e6e0:	9900      	ldr	r1, [sp, #0]
 800e6e2:	4605      	mov	r5, r0
 800e6e4:	4630      	mov	r0, r6
 800e6e6:	f7ff fbfb 	bl	800dee0 <_malloc_r>
 800e6ea:	b948      	cbnz	r0, 800e700 <__smakebuf_r+0x44>
 800e6ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6f0:	059a      	lsls	r2, r3, #22
 800e6f2:	d4ef      	bmi.n	800e6d4 <__smakebuf_r+0x18>
 800e6f4:	f023 0303 	bic.w	r3, r3, #3
 800e6f8:	f043 0302 	orr.w	r3, r3, #2
 800e6fc:	81a3      	strh	r3, [r4, #12]
 800e6fe:	e7e3      	b.n	800e6c8 <__smakebuf_r+0xc>
 800e700:	4b0d      	ldr	r3, [pc, #52]	; (800e738 <__smakebuf_r+0x7c>)
 800e702:	62b3      	str	r3, [r6, #40]	; 0x28
 800e704:	89a3      	ldrh	r3, [r4, #12]
 800e706:	6020      	str	r0, [r4, #0]
 800e708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e70c:	81a3      	strh	r3, [r4, #12]
 800e70e:	9b00      	ldr	r3, [sp, #0]
 800e710:	6163      	str	r3, [r4, #20]
 800e712:	9b01      	ldr	r3, [sp, #4]
 800e714:	6120      	str	r0, [r4, #16]
 800e716:	b15b      	cbz	r3, 800e730 <__smakebuf_r+0x74>
 800e718:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e71c:	4630      	mov	r0, r6
 800e71e:	f000 fcdb 	bl	800f0d8 <_isatty_r>
 800e722:	b128      	cbz	r0, 800e730 <__smakebuf_r+0x74>
 800e724:	89a3      	ldrh	r3, [r4, #12]
 800e726:	f023 0303 	bic.w	r3, r3, #3
 800e72a:	f043 0301 	orr.w	r3, r3, #1
 800e72e:	81a3      	strh	r3, [r4, #12]
 800e730:	89a0      	ldrh	r0, [r4, #12]
 800e732:	4305      	orrs	r5, r0
 800e734:	81a5      	strh	r5, [r4, #12]
 800e736:	e7cd      	b.n	800e6d4 <__smakebuf_r+0x18>
 800e738:	0800e4c9 	.word	0x0800e4c9

0800e73c <__malloc_lock>:
 800e73c:	4801      	ldr	r0, [pc, #4]	; (800e744 <__malloc_lock+0x8>)
 800e73e:	f7ff bf95 	b.w	800e66c <__retarget_lock_acquire_recursive>
 800e742:	bf00      	nop
 800e744:	20003800 	.word	0x20003800

0800e748 <__malloc_unlock>:
 800e748:	4801      	ldr	r0, [pc, #4]	; (800e750 <__malloc_unlock+0x8>)
 800e74a:	f7ff bf90 	b.w	800e66e <__retarget_lock_release_recursive>
 800e74e:	bf00      	nop
 800e750:	20003800 	.word	0x20003800

0800e754 <__ssputs_r>:
 800e754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e758:	688e      	ldr	r6, [r1, #8]
 800e75a:	429e      	cmp	r6, r3
 800e75c:	4682      	mov	sl, r0
 800e75e:	460c      	mov	r4, r1
 800e760:	4690      	mov	r8, r2
 800e762:	461f      	mov	r7, r3
 800e764:	d838      	bhi.n	800e7d8 <__ssputs_r+0x84>
 800e766:	898a      	ldrh	r2, [r1, #12]
 800e768:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e76c:	d032      	beq.n	800e7d4 <__ssputs_r+0x80>
 800e76e:	6825      	ldr	r5, [r4, #0]
 800e770:	6909      	ldr	r1, [r1, #16]
 800e772:	eba5 0901 	sub.w	r9, r5, r1
 800e776:	6965      	ldr	r5, [r4, #20]
 800e778:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e77c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e780:	3301      	adds	r3, #1
 800e782:	444b      	add	r3, r9
 800e784:	106d      	asrs	r5, r5, #1
 800e786:	429d      	cmp	r5, r3
 800e788:	bf38      	it	cc
 800e78a:	461d      	movcc	r5, r3
 800e78c:	0553      	lsls	r3, r2, #21
 800e78e:	d531      	bpl.n	800e7f4 <__ssputs_r+0xa0>
 800e790:	4629      	mov	r1, r5
 800e792:	f7ff fba5 	bl	800dee0 <_malloc_r>
 800e796:	4606      	mov	r6, r0
 800e798:	b950      	cbnz	r0, 800e7b0 <__ssputs_r+0x5c>
 800e79a:	230c      	movs	r3, #12
 800e79c:	f8ca 3000 	str.w	r3, [sl]
 800e7a0:	89a3      	ldrh	r3, [r4, #12]
 800e7a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7a6:	81a3      	strh	r3, [r4, #12]
 800e7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e7ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7b0:	6921      	ldr	r1, [r4, #16]
 800e7b2:	464a      	mov	r2, r9
 800e7b4:	f7ff fb12 	bl	800dddc <memcpy>
 800e7b8:	89a3      	ldrh	r3, [r4, #12]
 800e7ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e7be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7c2:	81a3      	strh	r3, [r4, #12]
 800e7c4:	6126      	str	r6, [r4, #16]
 800e7c6:	6165      	str	r5, [r4, #20]
 800e7c8:	444e      	add	r6, r9
 800e7ca:	eba5 0509 	sub.w	r5, r5, r9
 800e7ce:	6026      	str	r6, [r4, #0]
 800e7d0:	60a5      	str	r5, [r4, #8]
 800e7d2:	463e      	mov	r6, r7
 800e7d4:	42be      	cmp	r6, r7
 800e7d6:	d900      	bls.n	800e7da <__ssputs_r+0x86>
 800e7d8:	463e      	mov	r6, r7
 800e7da:	6820      	ldr	r0, [r4, #0]
 800e7dc:	4632      	mov	r2, r6
 800e7de:	4641      	mov	r1, r8
 800e7e0:	f000 fc9c 	bl	800f11c <memmove>
 800e7e4:	68a3      	ldr	r3, [r4, #8]
 800e7e6:	1b9b      	subs	r3, r3, r6
 800e7e8:	60a3      	str	r3, [r4, #8]
 800e7ea:	6823      	ldr	r3, [r4, #0]
 800e7ec:	4433      	add	r3, r6
 800e7ee:	6023      	str	r3, [r4, #0]
 800e7f0:	2000      	movs	r0, #0
 800e7f2:	e7db      	b.n	800e7ac <__ssputs_r+0x58>
 800e7f4:	462a      	mov	r2, r5
 800e7f6:	f000 fcab 	bl	800f150 <_realloc_r>
 800e7fa:	4606      	mov	r6, r0
 800e7fc:	2800      	cmp	r0, #0
 800e7fe:	d1e1      	bne.n	800e7c4 <__ssputs_r+0x70>
 800e800:	6921      	ldr	r1, [r4, #16]
 800e802:	4650      	mov	r0, sl
 800e804:	f7ff fb00 	bl	800de08 <_free_r>
 800e808:	e7c7      	b.n	800e79a <__ssputs_r+0x46>
	...

0800e80c <_svfiprintf_r>:
 800e80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e810:	4698      	mov	r8, r3
 800e812:	898b      	ldrh	r3, [r1, #12]
 800e814:	061b      	lsls	r3, r3, #24
 800e816:	b09d      	sub	sp, #116	; 0x74
 800e818:	4607      	mov	r7, r0
 800e81a:	460d      	mov	r5, r1
 800e81c:	4614      	mov	r4, r2
 800e81e:	d50e      	bpl.n	800e83e <_svfiprintf_r+0x32>
 800e820:	690b      	ldr	r3, [r1, #16]
 800e822:	b963      	cbnz	r3, 800e83e <_svfiprintf_r+0x32>
 800e824:	2140      	movs	r1, #64	; 0x40
 800e826:	f7ff fb5b 	bl	800dee0 <_malloc_r>
 800e82a:	6028      	str	r0, [r5, #0]
 800e82c:	6128      	str	r0, [r5, #16]
 800e82e:	b920      	cbnz	r0, 800e83a <_svfiprintf_r+0x2e>
 800e830:	230c      	movs	r3, #12
 800e832:	603b      	str	r3, [r7, #0]
 800e834:	f04f 30ff 	mov.w	r0, #4294967295
 800e838:	e0d1      	b.n	800e9de <_svfiprintf_r+0x1d2>
 800e83a:	2340      	movs	r3, #64	; 0x40
 800e83c:	616b      	str	r3, [r5, #20]
 800e83e:	2300      	movs	r3, #0
 800e840:	9309      	str	r3, [sp, #36]	; 0x24
 800e842:	2320      	movs	r3, #32
 800e844:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e848:	f8cd 800c 	str.w	r8, [sp, #12]
 800e84c:	2330      	movs	r3, #48	; 0x30
 800e84e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e9f8 <_svfiprintf_r+0x1ec>
 800e852:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e856:	f04f 0901 	mov.w	r9, #1
 800e85a:	4623      	mov	r3, r4
 800e85c:	469a      	mov	sl, r3
 800e85e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e862:	b10a      	cbz	r2, 800e868 <_svfiprintf_r+0x5c>
 800e864:	2a25      	cmp	r2, #37	; 0x25
 800e866:	d1f9      	bne.n	800e85c <_svfiprintf_r+0x50>
 800e868:	ebba 0b04 	subs.w	fp, sl, r4
 800e86c:	d00b      	beq.n	800e886 <_svfiprintf_r+0x7a>
 800e86e:	465b      	mov	r3, fp
 800e870:	4622      	mov	r2, r4
 800e872:	4629      	mov	r1, r5
 800e874:	4638      	mov	r0, r7
 800e876:	f7ff ff6d 	bl	800e754 <__ssputs_r>
 800e87a:	3001      	adds	r0, #1
 800e87c:	f000 80aa 	beq.w	800e9d4 <_svfiprintf_r+0x1c8>
 800e880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e882:	445a      	add	r2, fp
 800e884:	9209      	str	r2, [sp, #36]	; 0x24
 800e886:	f89a 3000 	ldrb.w	r3, [sl]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	f000 80a2 	beq.w	800e9d4 <_svfiprintf_r+0x1c8>
 800e890:	2300      	movs	r3, #0
 800e892:	f04f 32ff 	mov.w	r2, #4294967295
 800e896:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e89a:	f10a 0a01 	add.w	sl, sl, #1
 800e89e:	9304      	str	r3, [sp, #16]
 800e8a0:	9307      	str	r3, [sp, #28]
 800e8a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e8a6:	931a      	str	r3, [sp, #104]	; 0x68
 800e8a8:	4654      	mov	r4, sl
 800e8aa:	2205      	movs	r2, #5
 800e8ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8b0:	4851      	ldr	r0, [pc, #324]	; (800e9f8 <_svfiprintf_r+0x1ec>)
 800e8b2:	f7f1 fc9d 	bl	80001f0 <memchr>
 800e8b6:	9a04      	ldr	r2, [sp, #16]
 800e8b8:	b9d8      	cbnz	r0, 800e8f2 <_svfiprintf_r+0xe6>
 800e8ba:	06d0      	lsls	r0, r2, #27
 800e8bc:	bf44      	itt	mi
 800e8be:	2320      	movmi	r3, #32
 800e8c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8c4:	0711      	lsls	r1, r2, #28
 800e8c6:	bf44      	itt	mi
 800e8c8:	232b      	movmi	r3, #43	; 0x2b
 800e8ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8ce:	f89a 3000 	ldrb.w	r3, [sl]
 800e8d2:	2b2a      	cmp	r3, #42	; 0x2a
 800e8d4:	d015      	beq.n	800e902 <_svfiprintf_r+0xf6>
 800e8d6:	9a07      	ldr	r2, [sp, #28]
 800e8d8:	4654      	mov	r4, sl
 800e8da:	2000      	movs	r0, #0
 800e8dc:	f04f 0c0a 	mov.w	ip, #10
 800e8e0:	4621      	mov	r1, r4
 800e8e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8e6:	3b30      	subs	r3, #48	; 0x30
 800e8e8:	2b09      	cmp	r3, #9
 800e8ea:	d94e      	bls.n	800e98a <_svfiprintf_r+0x17e>
 800e8ec:	b1b0      	cbz	r0, 800e91c <_svfiprintf_r+0x110>
 800e8ee:	9207      	str	r2, [sp, #28]
 800e8f0:	e014      	b.n	800e91c <_svfiprintf_r+0x110>
 800e8f2:	eba0 0308 	sub.w	r3, r0, r8
 800e8f6:	fa09 f303 	lsl.w	r3, r9, r3
 800e8fa:	4313      	orrs	r3, r2
 800e8fc:	9304      	str	r3, [sp, #16]
 800e8fe:	46a2      	mov	sl, r4
 800e900:	e7d2      	b.n	800e8a8 <_svfiprintf_r+0x9c>
 800e902:	9b03      	ldr	r3, [sp, #12]
 800e904:	1d19      	adds	r1, r3, #4
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	9103      	str	r1, [sp, #12]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	bfbb      	ittet	lt
 800e90e:	425b      	neglt	r3, r3
 800e910:	f042 0202 	orrlt.w	r2, r2, #2
 800e914:	9307      	strge	r3, [sp, #28]
 800e916:	9307      	strlt	r3, [sp, #28]
 800e918:	bfb8      	it	lt
 800e91a:	9204      	strlt	r2, [sp, #16]
 800e91c:	7823      	ldrb	r3, [r4, #0]
 800e91e:	2b2e      	cmp	r3, #46	; 0x2e
 800e920:	d10c      	bne.n	800e93c <_svfiprintf_r+0x130>
 800e922:	7863      	ldrb	r3, [r4, #1]
 800e924:	2b2a      	cmp	r3, #42	; 0x2a
 800e926:	d135      	bne.n	800e994 <_svfiprintf_r+0x188>
 800e928:	9b03      	ldr	r3, [sp, #12]
 800e92a:	1d1a      	adds	r2, r3, #4
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	9203      	str	r2, [sp, #12]
 800e930:	2b00      	cmp	r3, #0
 800e932:	bfb8      	it	lt
 800e934:	f04f 33ff 	movlt.w	r3, #4294967295
 800e938:	3402      	adds	r4, #2
 800e93a:	9305      	str	r3, [sp, #20]
 800e93c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ea08 <_svfiprintf_r+0x1fc>
 800e940:	7821      	ldrb	r1, [r4, #0]
 800e942:	2203      	movs	r2, #3
 800e944:	4650      	mov	r0, sl
 800e946:	f7f1 fc53 	bl	80001f0 <memchr>
 800e94a:	b140      	cbz	r0, 800e95e <_svfiprintf_r+0x152>
 800e94c:	2340      	movs	r3, #64	; 0x40
 800e94e:	eba0 000a 	sub.w	r0, r0, sl
 800e952:	fa03 f000 	lsl.w	r0, r3, r0
 800e956:	9b04      	ldr	r3, [sp, #16]
 800e958:	4303      	orrs	r3, r0
 800e95a:	3401      	adds	r4, #1
 800e95c:	9304      	str	r3, [sp, #16]
 800e95e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e962:	4826      	ldr	r0, [pc, #152]	; (800e9fc <_svfiprintf_r+0x1f0>)
 800e964:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e968:	2206      	movs	r2, #6
 800e96a:	f7f1 fc41 	bl	80001f0 <memchr>
 800e96e:	2800      	cmp	r0, #0
 800e970:	d038      	beq.n	800e9e4 <_svfiprintf_r+0x1d8>
 800e972:	4b23      	ldr	r3, [pc, #140]	; (800ea00 <_svfiprintf_r+0x1f4>)
 800e974:	bb1b      	cbnz	r3, 800e9be <_svfiprintf_r+0x1b2>
 800e976:	9b03      	ldr	r3, [sp, #12]
 800e978:	3307      	adds	r3, #7
 800e97a:	f023 0307 	bic.w	r3, r3, #7
 800e97e:	3308      	adds	r3, #8
 800e980:	9303      	str	r3, [sp, #12]
 800e982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e984:	4433      	add	r3, r6
 800e986:	9309      	str	r3, [sp, #36]	; 0x24
 800e988:	e767      	b.n	800e85a <_svfiprintf_r+0x4e>
 800e98a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e98e:	460c      	mov	r4, r1
 800e990:	2001      	movs	r0, #1
 800e992:	e7a5      	b.n	800e8e0 <_svfiprintf_r+0xd4>
 800e994:	2300      	movs	r3, #0
 800e996:	3401      	adds	r4, #1
 800e998:	9305      	str	r3, [sp, #20]
 800e99a:	4619      	mov	r1, r3
 800e99c:	f04f 0c0a 	mov.w	ip, #10
 800e9a0:	4620      	mov	r0, r4
 800e9a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9a6:	3a30      	subs	r2, #48	; 0x30
 800e9a8:	2a09      	cmp	r2, #9
 800e9aa:	d903      	bls.n	800e9b4 <_svfiprintf_r+0x1a8>
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d0c5      	beq.n	800e93c <_svfiprintf_r+0x130>
 800e9b0:	9105      	str	r1, [sp, #20]
 800e9b2:	e7c3      	b.n	800e93c <_svfiprintf_r+0x130>
 800e9b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9b8:	4604      	mov	r4, r0
 800e9ba:	2301      	movs	r3, #1
 800e9bc:	e7f0      	b.n	800e9a0 <_svfiprintf_r+0x194>
 800e9be:	ab03      	add	r3, sp, #12
 800e9c0:	9300      	str	r3, [sp, #0]
 800e9c2:	462a      	mov	r2, r5
 800e9c4:	4b0f      	ldr	r3, [pc, #60]	; (800ea04 <_svfiprintf_r+0x1f8>)
 800e9c6:	a904      	add	r1, sp, #16
 800e9c8:	4638      	mov	r0, r7
 800e9ca:	f3af 8000 	nop.w
 800e9ce:	1c42      	adds	r2, r0, #1
 800e9d0:	4606      	mov	r6, r0
 800e9d2:	d1d6      	bne.n	800e982 <_svfiprintf_r+0x176>
 800e9d4:	89ab      	ldrh	r3, [r5, #12]
 800e9d6:	065b      	lsls	r3, r3, #25
 800e9d8:	f53f af2c 	bmi.w	800e834 <_svfiprintf_r+0x28>
 800e9dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e9de:	b01d      	add	sp, #116	; 0x74
 800e9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9e4:	ab03      	add	r3, sp, #12
 800e9e6:	9300      	str	r3, [sp, #0]
 800e9e8:	462a      	mov	r2, r5
 800e9ea:	4b06      	ldr	r3, [pc, #24]	; (800ea04 <_svfiprintf_r+0x1f8>)
 800e9ec:	a904      	add	r1, sp, #16
 800e9ee:	4638      	mov	r0, r7
 800e9f0:	f000 f9d4 	bl	800ed9c <_printf_i>
 800e9f4:	e7eb      	b.n	800e9ce <_svfiprintf_r+0x1c2>
 800e9f6:	bf00      	nop
 800e9f8:	0800ffdc 	.word	0x0800ffdc
 800e9fc:	0800ffe6 	.word	0x0800ffe6
 800ea00:	00000000 	.word	0x00000000
 800ea04:	0800e755 	.word	0x0800e755
 800ea08:	0800ffe2 	.word	0x0800ffe2

0800ea0c <__sfputc_r>:
 800ea0c:	6893      	ldr	r3, [r2, #8]
 800ea0e:	3b01      	subs	r3, #1
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	b410      	push	{r4}
 800ea14:	6093      	str	r3, [r2, #8]
 800ea16:	da08      	bge.n	800ea2a <__sfputc_r+0x1e>
 800ea18:	6994      	ldr	r4, [r2, #24]
 800ea1a:	42a3      	cmp	r3, r4
 800ea1c:	db01      	blt.n	800ea22 <__sfputc_r+0x16>
 800ea1e:	290a      	cmp	r1, #10
 800ea20:	d103      	bne.n	800ea2a <__sfputc_r+0x1e>
 800ea22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea26:	f7ff bba9 	b.w	800e17c <__swbuf_r>
 800ea2a:	6813      	ldr	r3, [r2, #0]
 800ea2c:	1c58      	adds	r0, r3, #1
 800ea2e:	6010      	str	r0, [r2, #0]
 800ea30:	7019      	strb	r1, [r3, #0]
 800ea32:	4608      	mov	r0, r1
 800ea34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea38:	4770      	bx	lr

0800ea3a <__sfputs_r>:
 800ea3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea3c:	4606      	mov	r6, r0
 800ea3e:	460f      	mov	r7, r1
 800ea40:	4614      	mov	r4, r2
 800ea42:	18d5      	adds	r5, r2, r3
 800ea44:	42ac      	cmp	r4, r5
 800ea46:	d101      	bne.n	800ea4c <__sfputs_r+0x12>
 800ea48:	2000      	movs	r0, #0
 800ea4a:	e007      	b.n	800ea5c <__sfputs_r+0x22>
 800ea4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea50:	463a      	mov	r2, r7
 800ea52:	4630      	mov	r0, r6
 800ea54:	f7ff ffda 	bl	800ea0c <__sfputc_r>
 800ea58:	1c43      	adds	r3, r0, #1
 800ea5a:	d1f3      	bne.n	800ea44 <__sfputs_r+0xa>
 800ea5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ea60 <_vfiprintf_r>:
 800ea60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea64:	460d      	mov	r5, r1
 800ea66:	b09d      	sub	sp, #116	; 0x74
 800ea68:	4614      	mov	r4, r2
 800ea6a:	4698      	mov	r8, r3
 800ea6c:	4606      	mov	r6, r0
 800ea6e:	b118      	cbz	r0, 800ea78 <_vfiprintf_r+0x18>
 800ea70:	6983      	ldr	r3, [r0, #24]
 800ea72:	b90b      	cbnz	r3, 800ea78 <_vfiprintf_r+0x18>
 800ea74:	f7ff fd5c 	bl	800e530 <__sinit>
 800ea78:	4b89      	ldr	r3, [pc, #548]	; (800eca0 <_vfiprintf_r+0x240>)
 800ea7a:	429d      	cmp	r5, r3
 800ea7c:	d11b      	bne.n	800eab6 <_vfiprintf_r+0x56>
 800ea7e:	6875      	ldr	r5, [r6, #4]
 800ea80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea82:	07d9      	lsls	r1, r3, #31
 800ea84:	d405      	bmi.n	800ea92 <_vfiprintf_r+0x32>
 800ea86:	89ab      	ldrh	r3, [r5, #12]
 800ea88:	059a      	lsls	r2, r3, #22
 800ea8a:	d402      	bmi.n	800ea92 <_vfiprintf_r+0x32>
 800ea8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea8e:	f7ff fded 	bl	800e66c <__retarget_lock_acquire_recursive>
 800ea92:	89ab      	ldrh	r3, [r5, #12]
 800ea94:	071b      	lsls	r3, r3, #28
 800ea96:	d501      	bpl.n	800ea9c <_vfiprintf_r+0x3c>
 800ea98:	692b      	ldr	r3, [r5, #16]
 800ea9a:	b9eb      	cbnz	r3, 800ead8 <_vfiprintf_r+0x78>
 800ea9c:	4629      	mov	r1, r5
 800ea9e:	4630      	mov	r0, r6
 800eaa0:	f7ff fbbe 	bl	800e220 <__swsetup_r>
 800eaa4:	b1c0      	cbz	r0, 800ead8 <_vfiprintf_r+0x78>
 800eaa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eaa8:	07dc      	lsls	r4, r3, #31
 800eaaa:	d50e      	bpl.n	800eaca <_vfiprintf_r+0x6a>
 800eaac:	f04f 30ff 	mov.w	r0, #4294967295
 800eab0:	b01d      	add	sp, #116	; 0x74
 800eab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eab6:	4b7b      	ldr	r3, [pc, #492]	; (800eca4 <_vfiprintf_r+0x244>)
 800eab8:	429d      	cmp	r5, r3
 800eaba:	d101      	bne.n	800eac0 <_vfiprintf_r+0x60>
 800eabc:	68b5      	ldr	r5, [r6, #8]
 800eabe:	e7df      	b.n	800ea80 <_vfiprintf_r+0x20>
 800eac0:	4b79      	ldr	r3, [pc, #484]	; (800eca8 <_vfiprintf_r+0x248>)
 800eac2:	429d      	cmp	r5, r3
 800eac4:	bf08      	it	eq
 800eac6:	68f5      	ldreq	r5, [r6, #12]
 800eac8:	e7da      	b.n	800ea80 <_vfiprintf_r+0x20>
 800eaca:	89ab      	ldrh	r3, [r5, #12]
 800eacc:	0598      	lsls	r0, r3, #22
 800eace:	d4ed      	bmi.n	800eaac <_vfiprintf_r+0x4c>
 800ead0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ead2:	f7ff fdcc 	bl	800e66e <__retarget_lock_release_recursive>
 800ead6:	e7e9      	b.n	800eaac <_vfiprintf_r+0x4c>
 800ead8:	2300      	movs	r3, #0
 800eada:	9309      	str	r3, [sp, #36]	; 0x24
 800eadc:	2320      	movs	r3, #32
 800eade:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eae2:	f8cd 800c 	str.w	r8, [sp, #12]
 800eae6:	2330      	movs	r3, #48	; 0x30
 800eae8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ecac <_vfiprintf_r+0x24c>
 800eaec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eaf0:	f04f 0901 	mov.w	r9, #1
 800eaf4:	4623      	mov	r3, r4
 800eaf6:	469a      	mov	sl, r3
 800eaf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eafc:	b10a      	cbz	r2, 800eb02 <_vfiprintf_r+0xa2>
 800eafe:	2a25      	cmp	r2, #37	; 0x25
 800eb00:	d1f9      	bne.n	800eaf6 <_vfiprintf_r+0x96>
 800eb02:	ebba 0b04 	subs.w	fp, sl, r4
 800eb06:	d00b      	beq.n	800eb20 <_vfiprintf_r+0xc0>
 800eb08:	465b      	mov	r3, fp
 800eb0a:	4622      	mov	r2, r4
 800eb0c:	4629      	mov	r1, r5
 800eb0e:	4630      	mov	r0, r6
 800eb10:	f7ff ff93 	bl	800ea3a <__sfputs_r>
 800eb14:	3001      	adds	r0, #1
 800eb16:	f000 80aa 	beq.w	800ec6e <_vfiprintf_r+0x20e>
 800eb1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb1c:	445a      	add	r2, fp
 800eb1e:	9209      	str	r2, [sp, #36]	; 0x24
 800eb20:	f89a 3000 	ldrb.w	r3, [sl]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	f000 80a2 	beq.w	800ec6e <_vfiprintf_r+0x20e>
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	f04f 32ff 	mov.w	r2, #4294967295
 800eb30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb34:	f10a 0a01 	add.w	sl, sl, #1
 800eb38:	9304      	str	r3, [sp, #16]
 800eb3a:	9307      	str	r3, [sp, #28]
 800eb3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb40:	931a      	str	r3, [sp, #104]	; 0x68
 800eb42:	4654      	mov	r4, sl
 800eb44:	2205      	movs	r2, #5
 800eb46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb4a:	4858      	ldr	r0, [pc, #352]	; (800ecac <_vfiprintf_r+0x24c>)
 800eb4c:	f7f1 fb50 	bl	80001f0 <memchr>
 800eb50:	9a04      	ldr	r2, [sp, #16]
 800eb52:	b9d8      	cbnz	r0, 800eb8c <_vfiprintf_r+0x12c>
 800eb54:	06d1      	lsls	r1, r2, #27
 800eb56:	bf44      	itt	mi
 800eb58:	2320      	movmi	r3, #32
 800eb5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb5e:	0713      	lsls	r3, r2, #28
 800eb60:	bf44      	itt	mi
 800eb62:	232b      	movmi	r3, #43	; 0x2b
 800eb64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb68:	f89a 3000 	ldrb.w	r3, [sl]
 800eb6c:	2b2a      	cmp	r3, #42	; 0x2a
 800eb6e:	d015      	beq.n	800eb9c <_vfiprintf_r+0x13c>
 800eb70:	9a07      	ldr	r2, [sp, #28]
 800eb72:	4654      	mov	r4, sl
 800eb74:	2000      	movs	r0, #0
 800eb76:	f04f 0c0a 	mov.w	ip, #10
 800eb7a:	4621      	mov	r1, r4
 800eb7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb80:	3b30      	subs	r3, #48	; 0x30
 800eb82:	2b09      	cmp	r3, #9
 800eb84:	d94e      	bls.n	800ec24 <_vfiprintf_r+0x1c4>
 800eb86:	b1b0      	cbz	r0, 800ebb6 <_vfiprintf_r+0x156>
 800eb88:	9207      	str	r2, [sp, #28]
 800eb8a:	e014      	b.n	800ebb6 <_vfiprintf_r+0x156>
 800eb8c:	eba0 0308 	sub.w	r3, r0, r8
 800eb90:	fa09 f303 	lsl.w	r3, r9, r3
 800eb94:	4313      	orrs	r3, r2
 800eb96:	9304      	str	r3, [sp, #16]
 800eb98:	46a2      	mov	sl, r4
 800eb9a:	e7d2      	b.n	800eb42 <_vfiprintf_r+0xe2>
 800eb9c:	9b03      	ldr	r3, [sp, #12]
 800eb9e:	1d19      	adds	r1, r3, #4
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	9103      	str	r1, [sp, #12]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	bfbb      	ittet	lt
 800eba8:	425b      	neglt	r3, r3
 800ebaa:	f042 0202 	orrlt.w	r2, r2, #2
 800ebae:	9307      	strge	r3, [sp, #28]
 800ebb0:	9307      	strlt	r3, [sp, #28]
 800ebb2:	bfb8      	it	lt
 800ebb4:	9204      	strlt	r2, [sp, #16]
 800ebb6:	7823      	ldrb	r3, [r4, #0]
 800ebb8:	2b2e      	cmp	r3, #46	; 0x2e
 800ebba:	d10c      	bne.n	800ebd6 <_vfiprintf_r+0x176>
 800ebbc:	7863      	ldrb	r3, [r4, #1]
 800ebbe:	2b2a      	cmp	r3, #42	; 0x2a
 800ebc0:	d135      	bne.n	800ec2e <_vfiprintf_r+0x1ce>
 800ebc2:	9b03      	ldr	r3, [sp, #12]
 800ebc4:	1d1a      	adds	r2, r3, #4
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	9203      	str	r2, [sp, #12]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	bfb8      	it	lt
 800ebce:	f04f 33ff 	movlt.w	r3, #4294967295
 800ebd2:	3402      	adds	r4, #2
 800ebd4:	9305      	str	r3, [sp, #20]
 800ebd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ecbc <_vfiprintf_r+0x25c>
 800ebda:	7821      	ldrb	r1, [r4, #0]
 800ebdc:	2203      	movs	r2, #3
 800ebde:	4650      	mov	r0, sl
 800ebe0:	f7f1 fb06 	bl	80001f0 <memchr>
 800ebe4:	b140      	cbz	r0, 800ebf8 <_vfiprintf_r+0x198>
 800ebe6:	2340      	movs	r3, #64	; 0x40
 800ebe8:	eba0 000a 	sub.w	r0, r0, sl
 800ebec:	fa03 f000 	lsl.w	r0, r3, r0
 800ebf0:	9b04      	ldr	r3, [sp, #16]
 800ebf2:	4303      	orrs	r3, r0
 800ebf4:	3401      	adds	r4, #1
 800ebf6:	9304      	str	r3, [sp, #16]
 800ebf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebfc:	482c      	ldr	r0, [pc, #176]	; (800ecb0 <_vfiprintf_r+0x250>)
 800ebfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec02:	2206      	movs	r2, #6
 800ec04:	f7f1 faf4 	bl	80001f0 <memchr>
 800ec08:	2800      	cmp	r0, #0
 800ec0a:	d03f      	beq.n	800ec8c <_vfiprintf_r+0x22c>
 800ec0c:	4b29      	ldr	r3, [pc, #164]	; (800ecb4 <_vfiprintf_r+0x254>)
 800ec0e:	bb1b      	cbnz	r3, 800ec58 <_vfiprintf_r+0x1f8>
 800ec10:	9b03      	ldr	r3, [sp, #12]
 800ec12:	3307      	adds	r3, #7
 800ec14:	f023 0307 	bic.w	r3, r3, #7
 800ec18:	3308      	adds	r3, #8
 800ec1a:	9303      	str	r3, [sp, #12]
 800ec1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec1e:	443b      	add	r3, r7
 800ec20:	9309      	str	r3, [sp, #36]	; 0x24
 800ec22:	e767      	b.n	800eaf4 <_vfiprintf_r+0x94>
 800ec24:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec28:	460c      	mov	r4, r1
 800ec2a:	2001      	movs	r0, #1
 800ec2c:	e7a5      	b.n	800eb7a <_vfiprintf_r+0x11a>
 800ec2e:	2300      	movs	r3, #0
 800ec30:	3401      	adds	r4, #1
 800ec32:	9305      	str	r3, [sp, #20]
 800ec34:	4619      	mov	r1, r3
 800ec36:	f04f 0c0a 	mov.w	ip, #10
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec40:	3a30      	subs	r2, #48	; 0x30
 800ec42:	2a09      	cmp	r2, #9
 800ec44:	d903      	bls.n	800ec4e <_vfiprintf_r+0x1ee>
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d0c5      	beq.n	800ebd6 <_vfiprintf_r+0x176>
 800ec4a:	9105      	str	r1, [sp, #20]
 800ec4c:	e7c3      	b.n	800ebd6 <_vfiprintf_r+0x176>
 800ec4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec52:	4604      	mov	r4, r0
 800ec54:	2301      	movs	r3, #1
 800ec56:	e7f0      	b.n	800ec3a <_vfiprintf_r+0x1da>
 800ec58:	ab03      	add	r3, sp, #12
 800ec5a:	9300      	str	r3, [sp, #0]
 800ec5c:	462a      	mov	r2, r5
 800ec5e:	4b16      	ldr	r3, [pc, #88]	; (800ecb8 <_vfiprintf_r+0x258>)
 800ec60:	a904      	add	r1, sp, #16
 800ec62:	4630      	mov	r0, r6
 800ec64:	f3af 8000 	nop.w
 800ec68:	4607      	mov	r7, r0
 800ec6a:	1c78      	adds	r0, r7, #1
 800ec6c:	d1d6      	bne.n	800ec1c <_vfiprintf_r+0x1bc>
 800ec6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec70:	07d9      	lsls	r1, r3, #31
 800ec72:	d405      	bmi.n	800ec80 <_vfiprintf_r+0x220>
 800ec74:	89ab      	ldrh	r3, [r5, #12]
 800ec76:	059a      	lsls	r2, r3, #22
 800ec78:	d402      	bmi.n	800ec80 <_vfiprintf_r+0x220>
 800ec7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec7c:	f7ff fcf7 	bl	800e66e <__retarget_lock_release_recursive>
 800ec80:	89ab      	ldrh	r3, [r5, #12]
 800ec82:	065b      	lsls	r3, r3, #25
 800ec84:	f53f af12 	bmi.w	800eaac <_vfiprintf_r+0x4c>
 800ec88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec8a:	e711      	b.n	800eab0 <_vfiprintf_r+0x50>
 800ec8c:	ab03      	add	r3, sp, #12
 800ec8e:	9300      	str	r3, [sp, #0]
 800ec90:	462a      	mov	r2, r5
 800ec92:	4b09      	ldr	r3, [pc, #36]	; (800ecb8 <_vfiprintf_r+0x258>)
 800ec94:	a904      	add	r1, sp, #16
 800ec96:	4630      	mov	r0, r6
 800ec98:	f000 f880 	bl	800ed9c <_printf_i>
 800ec9c:	e7e4      	b.n	800ec68 <_vfiprintf_r+0x208>
 800ec9e:	bf00      	nop
 800eca0:	0800ff9c 	.word	0x0800ff9c
 800eca4:	0800ffbc 	.word	0x0800ffbc
 800eca8:	0800ff7c 	.word	0x0800ff7c
 800ecac:	0800ffdc 	.word	0x0800ffdc
 800ecb0:	0800ffe6 	.word	0x0800ffe6
 800ecb4:	00000000 	.word	0x00000000
 800ecb8:	0800ea3b 	.word	0x0800ea3b
 800ecbc:	0800ffe2 	.word	0x0800ffe2

0800ecc0 <_printf_common>:
 800ecc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecc4:	4616      	mov	r6, r2
 800ecc6:	4699      	mov	r9, r3
 800ecc8:	688a      	ldr	r2, [r1, #8]
 800ecca:	690b      	ldr	r3, [r1, #16]
 800eccc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ecd0:	4293      	cmp	r3, r2
 800ecd2:	bfb8      	it	lt
 800ecd4:	4613      	movlt	r3, r2
 800ecd6:	6033      	str	r3, [r6, #0]
 800ecd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ecdc:	4607      	mov	r7, r0
 800ecde:	460c      	mov	r4, r1
 800ece0:	b10a      	cbz	r2, 800ece6 <_printf_common+0x26>
 800ece2:	3301      	adds	r3, #1
 800ece4:	6033      	str	r3, [r6, #0]
 800ece6:	6823      	ldr	r3, [r4, #0]
 800ece8:	0699      	lsls	r1, r3, #26
 800ecea:	bf42      	ittt	mi
 800ecec:	6833      	ldrmi	r3, [r6, #0]
 800ecee:	3302      	addmi	r3, #2
 800ecf0:	6033      	strmi	r3, [r6, #0]
 800ecf2:	6825      	ldr	r5, [r4, #0]
 800ecf4:	f015 0506 	ands.w	r5, r5, #6
 800ecf8:	d106      	bne.n	800ed08 <_printf_common+0x48>
 800ecfa:	f104 0a19 	add.w	sl, r4, #25
 800ecfe:	68e3      	ldr	r3, [r4, #12]
 800ed00:	6832      	ldr	r2, [r6, #0]
 800ed02:	1a9b      	subs	r3, r3, r2
 800ed04:	42ab      	cmp	r3, r5
 800ed06:	dc26      	bgt.n	800ed56 <_printf_common+0x96>
 800ed08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ed0c:	1e13      	subs	r3, r2, #0
 800ed0e:	6822      	ldr	r2, [r4, #0]
 800ed10:	bf18      	it	ne
 800ed12:	2301      	movne	r3, #1
 800ed14:	0692      	lsls	r2, r2, #26
 800ed16:	d42b      	bmi.n	800ed70 <_printf_common+0xb0>
 800ed18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ed1c:	4649      	mov	r1, r9
 800ed1e:	4638      	mov	r0, r7
 800ed20:	47c0      	blx	r8
 800ed22:	3001      	adds	r0, #1
 800ed24:	d01e      	beq.n	800ed64 <_printf_common+0xa4>
 800ed26:	6823      	ldr	r3, [r4, #0]
 800ed28:	68e5      	ldr	r5, [r4, #12]
 800ed2a:	6832      	ldr	r2, [r6, #0]
 800ed2c:	f003 0306 	and.w	r3, r3, #6
 800ed30:	2b04      	cmp	r3, #4
 800ed32:	bf08      	it	eq
 800ed34:	1aad      	subeq	r5, r5, r2
 800ed36:	68a3      	ldr	r3, [r4, #8]
 800ed38:	6922      	ldr	r2, [r4, #16]
 800ed3a:	bf0c      	ite	eq
 800ed3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed40:	2500      	movne	r5, #0
 800ed42:	4293      	cmp	r3, r2
 800ed44:	bfc4      	itt	gt
 800ed46:	1a9b      	subgt	r3, r3, r2
 800ed48:	18ed      	addgt	r5, r5, r3
 800ed4a:	2600      	movs	r6, #0
 800ed4c:	341a      	adds	r4, #26
 800ed4e:	42b5      	cmp	r5, r6
 800ed50:	d11a      	bne.n	800ed88 <_printf_common+0xc8>
 800ed52:	2000      	movs	r0, #0
 800ed54:	e008      	b.n	800ed68 <_printf_common+0xa8>
 800ed56:	2301      	movs	r3, #1
 800ed58:	4652      	mov	r2, sl
 800ed5a:	4649      	mov	r1, r9
 800ed5c:	4638      	mov	r0, r7
 800ed5e:	47c0      	blx	r8
 800ed60:	3001      	adds	r0, #1
 800ed62:	d103      	bne.n	800ed6c <_printf_common+0xac>
 800ed64:	f04f 30ff 	mov.w	r0, #4294967295
 800ed68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed6c:	3501      	adds	r5, #1
 800ed6e:	e7c6      	b.n	800ecfe <_printf_common+0x3e>
 800ed70:	18e1      	adds	r1, r4, r3
 800ed72:	1c5a      	adds	r2, r3, #1
 800ed74:	2030      	movs	r0, #48	; 0x30
 800ed76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ed7a:	4422      	add	r2, r4
 800ed7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ed80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ed84:	3302      	adds	r3, #2
 800ed86:	e7c7      	b.n	800ed18 <_printf_common+0x58>
 800ed88:	2301      	movs	r3, #1
 800ed8a:	4622      	mov	r2, r4
 800ed8c:	4649      	mov	r1, r9
 800ed8e:	4638      	mov	r0, r7
 800ed90:	47c0      	blx	r8
 800ed92:	3001      	adds	r0, #1
 800ed94:	d0e6      	beq.n	800ed64 <_printf_common+0xa4>
 800ed96:	3601      	adds	r6, #1
 800ed98:	e7d9      	b.n	800ed4e <_printf_common+0x8e>
	...

0800ed9c <_printf_i>:
 800ed9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eda0:	7e0f      	ldrb	r7, [r1, #24]
 800eda2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eda4:	2f78      	cmp	r7, #120	; 0x78
 800eda6:	4691      	mov	r9, r2
 800eda8:	4680      	mov	r8, r0
 800edaa:	460c      	mov	r4, r1
 800edac:	469a      	mov	sl, r3
 800edae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800edb2:	d807      	bhi.n	800edc4 <_printf_i+0x28>
 800edb4:	2f62      	cmp	r7, #98	; 0x62
 800edb6:	d80a      	bhi.n	800edce <_printf_i+0x32>
 800edb8:	2f00      	cmp	r7, #0
 800edba:	f000 80d8 	beq.w	800ef6e <_printf_i+0x1d2>
 800edbe:	2f58      	cmp	r7, #88	; 0x58
 800edc0:	f000 80a3 	beq.w	800ef0a <_printf_i+0x16e>
 800edc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800edc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800edcc:	e03a      	b.n	800ee44 <_printf_i+0xa8>
 800edce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800edd2:	2b15      	cmp	r3, #21
 800edd4:	d8f6      	bhi.n	800edc4 <_printf_i+0x28>
 800edd6:	a101      	add	r1, pc, #4	; (adr r1, 800eddc <_printf_i+0x40>)
 800edd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eddc:	0800ee35 	.word	0x0800ee35
 800ede0:	0800ee49 	.word	0x0800ee49
 800ede4:	0800edc5 	.word	0x0800edc5
 800ede8:	0800edc5 	.word	0x0800edc5
 800edec:	0800edc5 	.word	0x0800edc5
 800edf0:	0800edc5 	.word	0x0800edc5
 800edf4:	0800ee49 	.word	0x0800ee49
 800edf8:	0800edc5 	.word	0x0800edc5
 800edfc:	0800edc5 	.word	0x0800edc5
 800ee00:	0800edc5 	.word	0x0800edc5
 800ee04:	0800edc5 	.word	0x0800edc5
 800ee08:	0800ef55 	.word	0x0800ef55
 800ee0c:	0800ee79 	.word	0x0800ee79
 800ee10:	0800ef37 	.word	0x0800ef37
 800ee14:	0800edc5 	.word	0x0800edc5
 800ee18:	0800edc5 	.word	0x0800edc5
 800ee1c:	0800ef77 	.word	0x0800ef77
 800ee20:	0800edc5 	.word	0x0800edc5
 800ee24:	0800ee79 	.word	0x0800ee79
 800ee28:	0800edc5 	.word	0x0800edc5
 800ee2c:	0800edc5 	.word	0x0800edc5
 800ee30:	0800ef3f 	.word	0x0800ef3f
 800ee34:	682b      	ldr	r3, [r5, #0]
 800ee36:	1d1a      	adds	r2, r3, #4
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	602a      	str	r2, [r5, #0]
 800ee3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee44:	2301      	movs	r3, #1
 800ee46:	e0a3      	b.n	800ef90 <_printf_i+0x1f4>
 800ee48:	6820      	ldr	r0, [r4, #0]
 800ee4a:	6829      	ldr	r1, [r5, #0]
 800ee4c:	0606      	lsls	r6, r0, #24
 800ee4e:	f101 0304 	add.w	r3, r1, #4
 800ee52:	d50a      	bpl.n	800ee6a <_printf_i+0xce>
 800ee54:	680e      	ldr	r6, [r1, #0]
 800ee56:	602b      	str	r3, [r5, #0]
 800ee58:	2e00      	cmp	r6, #0
 800ee5a:	da03      	bge.n	800ee64 <_printf_i+0xc8>
 800ee5c:	232d      	movs	r3, #45	; 0x2d
 800ee5e:	4276      	negs	r6, r6
 800ee60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee64:	485e      	ldr	r0, [pc, #376]	; (800efe0 <_printf_i+0x244>)
 800ee66:	230a      	movs	r3, #10
 800ee68:	e019      	b.n	800ee9e <_printf_i+0x102>
 800ee6a:	680e      	ldr	r6, [r1, #0]
 800ee6c:	602b      	str	r3, [r5, #0]
 800ee6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ee72:	bf18      	it	ne
 800ee74:	b236      	sxthne	r6, r6
 800ee76:	e7ef      	b.n	800ee58 <_printf_i+0xbc>
 800ee78:	682b      	ldr	r3, [r5, #0]
 800ee7a:	6820      	ldr	r0, [r4, #0]
 800ee7c:	1d19      	adds	r1, r3, #4
 800ee7e:	6029      	str	r1, [r5, #0]
 800ee80:	0601      	lsls	r1, r0, #24
 800ee82:	d501      	bpl.n	800ee88 <_printf_i+0xec>
 800ee84:	681e      	ldr	r6, [r3, #0]
 800ee86:	e002      	b.n	800ee8e <_printf_i+0xf2>
 800ee88:	0646      	lsls	r6, r0, #25
 800ee8a:	d5fb      	bpl.n	800ee84 <_printf_i+0xe8>
 800ee8c:	881e      	ldrh	r6, [r3, #0]
 800ee8e:	4854      	ldr	r0, [pc, #336]	; (800efe0 <_printf_i+0x244>)
 800ee90:	2f6f      	cmp	r7, #111	; 0x6f
 800ee92:	bf0c      	ite	eq
 800ee94:	2308      	moveq	r3, #8
 800ee96:	230a      	movne	r3, #10
 800ee98:	2100      	movs	r1, #0
 800ee9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ee9e:	6865      	ldr	r5, [r4, #4]
 800eea0:	60a5      	str	r5, [r4, #8]
 800eea2:	2d00      	cmp	r5, #0
 800eea4:	bfa2      	ittt	ge
 800eea6:	6821      	ldrge	r1, [r4, #0]
 800eea8:	f021 0104 	bicge.w	r1, r1, #4
 800eeac:	6021      	strge	r1, [r4, #0]
 800eeae:	b90e      	cbnz	r6, 800eeb4 <_printf_i+0x118>
 800eeb0:	2d00      	cmp	r5, #0
 800eeb2:	d04d      	beq.n	800ef50 <_printf_i+0x1b4>
 800eeb4:	4615      	mov	r5, r2
 800eeb6:	fbb6 f1f3 	udiv	r1, r6, r3
 800eeba:	fb03 6711 	mls	r7, r3, r1, r6
 800eebe:	5dc7      	ldrb	r7, [r0, r7]
 800eec0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800eec4:	4637      	mov	r7, r6
 800eec6:	42bb      	cmp	r3, r7
 800eec8:	460e      	mov	r6, r1
 800eeca:	d9f4      	bls.n	800eeb6 <_printf_i+0x11a>
 800eecc:	2b08      	cmp	r3, #8
 800eece:	d10b      	bne.n	800eee8 <_printf_i+0x14c>
 800eed0:	6823      	ldr	r3, [r4, #0]
 800eed2:	07de      	lsls	r6, r3, #31
 800eed4:	d508      	bpl.n	800eee8 <_printf_i+0x14c>
 800eed6:	6923      	ldr	r3, [r4, #16]
 800eed8:	6861      	ldr	r1, [r4, #4]
 800eeda:	4299      	cmp	r1, r3
 800eedc:	bfde      	ittt	le
 800eede:	2330      	movle	r3, #48	; 0x30
 800eee0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eee4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800eee8:	1b52      	subs	r2, r2, r5
 800eeea:	6122      	str	r2, [r4, #16]
 800eeec:	f8cd a000 	str.w	sl, [sp]
 800eef0:	464b      	mov	r3, r9
 800eef2:	aa03      	add	r2, sp, #12
 800eef4:	4621      	mov	r1, r4
 800eef6:	4640      	mov	r0, r8
 800eef8:	f7ff fee2 	bl	800ecc0 <_printf_common>
 800eefc:	3001      	adds	r0, #1
 800eefe:	d14c      	bne.n	800ef9a <_printf_i+0x1fe>
 800ef00:	f04f 30ff 	mov.w	r0, #4294967295
 800ef04:	b004      	add	sp, #16
 800ef06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef0a:	4835      	ldr	r0, [pc, #212]	; (800efe0 <_printf_i+0x244>)
 800ef0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ef10:	6829      	ldr	r1, [r5, #0]
 800ef12:	6823      	ldr	r3, [r4, #0]
 800ef14:	f851 6b04 	ldr.w	r6, [r1], #4
 800ef18:	6029      	str	r1, [r5, #0]
 800ef1a:	061d      	lsls	r5, r3, #24
 800ef1c:	d514      	bpl.n	800ef48 <_printf_i+0x1ac>
 800ef1e:	07df      	lsls	r7, r3, #31
 800ef20:	bf44      	itt	mi
 800ef22:	f043 0320 	orrmi.w	r3, r3, #32
 800ef26:	6023      	strmi	r3, [r4, #0]
 800ef28:	b91e      	cbnz	r6, 800ef32 <_printf_i+0x196>
 800ef2a:	6823      	ldr	r3, [r4, #0]
 800ef2c:	f023 0320 	bic.w	r3, r3, #32
 800ef30:	6023      	str	r3, [r4, #0]
 800ef32:	2310      	movs	r3, #16
 800ef34:	e7b0      	b.n	800ee98 <_printf_i+0xfc>
 800ef36:	6823      	ldr	r3, [r4, #0]
 800ef38:	f043 0320 	orr.w	r3, r3, #32
 800ef3c:	6023      	str	r3, [r4, #0]
 800ef3e:	2378      	movs	r3, #120	; 0x78
 800ef40:	4828      	ldr	r0, [pc, #160]	; (800efe4 <_printf_i+0x248>)
 800ef42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ef46:	e7e3      	b.n	800ef10 <_printf_i+0x174>
 800ef48:	0659      	lsls	r1, r3, #25
 800ef4a:	bf48      	it	mi
 800ef4c:	b2b6      	uxthmi	r6, r6
 800ef4e:	e7e6      	b.n	800ef1e <_printf_i+0x182>
 800ef50:	4615      	mov	r5, r2
 800ef52:	e7bb      	b.n	800eecc <_printf_i+0x130>
 800ef54:	682b      	ldr	r3, [r5, #0]
 800ef56:	6826      	ldr	r6, [r4, #0]
 800ef58:	6961      	ldr	r1, [r4, #20]
 800ef5a:	1d18      	adds	r0, r3, #4
 800ef5c:	6028      	str	r0, [r5, #0]
 800ef5e:	0635      	lsls	r5, r6, #24
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	d501      	bpl.n	800ef68 <_printf_i+0x1cc>
 800ef64:	6019      	str	r1, [r3, #0]
 800ef66:	e002      	b.n	800ef6e <_printf_i+0x1d2>
 800ef68:	0670      	lsls	r0, r6, #25
 800ef6a:	d5fb      	bpl.n	800ef64 <_printf_i+0x1c8>
 800ef6c:	8019      	strh	r1, [r3, #0]
 800ef6e:	2300      	movs	r3, #0
 800ef70:	6123      	str	r3, [r4, #16]
 800ef72:	4615      	mov	r5, r2
 800ef74:	e7ba      	b.n	800eeec <_printf_i+0x150>
 800ef76:	682b      	ldr	r3, [r5, #0]
 800ef78:	1d1a      	adds	r2, r3, #4
 800ef7a:	602a      	str	r2, [r5, #0]
 800ef7c:	681d      	ldr	r5, [r3, #0]
 800ef7e:	6862      	ldr	r2, [r4, #4]
 800ef80:	2100      	movs	r1, #0
 800ef82:	4628      	mov	r0, r5
 800ef84:	f7f1 f934 	bl	80001f0 <memchr>
 800ef88:	b108      	cbz	r0, 800ef8e <_printf_i+0x1f2>
 800ef8a:	1b40      	subs	r0, r0, r5
 800ef8c:	6060      	str	r0, [r4, #4]
 800ef8e:	6863      	ldr	r3, [r4, #4]
 800ef90:	6123      	str	r3, [r4, #16]
 800ef92:	2300      	movs	r3, #0
 800ef94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef98:	e7a8      	b.n	800eeec <_printf_i+0x150>
 800ef9a:	6923      	ldr	r3, [r4, #16]
 800ef9c:	462a      	mov	r2, r5
 800ef9e:	4649      	mov	r1, r9
 800efa0:	4640      	mov	r0, r8
 800efa2:	47d0      	blx	sl
 800efa4:	3001      	adds	r0, #1
 800efa6:	d0ab      	beq.n	800ef00 <_printf_i+0x164>
 800efa8:	6823      	ldr	r3, [r4, #0]
 800efaa:	079b      	lsls	r3, r3, #30
 800efac:	d413      	bmi.n	800efd6 <_printf_i+0x23a>
 800efae:	68e0      	ldr	r0, [r4, #12]
 800efb0:	9b03      	ldr	r3, [sp, #12]
 800efb2:	4298      	cmp	r0, r3
 800efb4:	bfb8      	it	lt
 800efb6:	4618      	movlt	r0, r3
 800efb8:	e7a4      	b.n	800ef04 <_printf_i+0x168>
 800efba:	2301      	movs	r3, #1
 800efbc:	4632      	mov	r2, r6
 800efbe:	4649      	mov	r1, r9
 800efc0:	4640      	mov	r0, r8
 800efc2:	47d0      	blx	sl
 800efc4:	3001      	adds	r0, #1
 800efc6:	d09b      	beq.n	800ef00 <_printf_i+0x164>
 800efc8:	3501      	adds	r5, #1
 800efca:	68e3      	ldr	r3, [r4, #12]
 800efcc:	9903      	ldr	r1, [sp, #12]
 800efce:	1a5b      	subs	r3, r3, r1
 800efd0:	42ab      	cmp	r3, r5
 800efd2:	dcf2      	bgt.n	800efba <_printf_i+0x21e>
 800efd4:	e7eb      	b.n	800efae <_printf_i+0x212>
 800efd6:	2500      	movs	r5, #0
 800efd8:	f104 0619 	add.w	r6, r4, #25
 800efdc:	e7f5      	b.n	800efca <_printf_i+0x22e>
 800efde:	bf00      	nop
 800efe0:	0800ffed 	.word	0x0800ffed
 800efe4:	0800fffe 	.word	0x0800fffe

0800efe8 <__sread>:
 800efe8:	b510      	push	{r4, lr}
 800efea:	460c      	mov	r4, r1
 800efec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eff0:	f000 f8de 	bl	800f1b0 <_read_r>
 800eff4:	2800      	cmp	r0, #0
 800eff6:	bfab      	itete	ge
 800eff8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800effa:	89a3      	ldrhlt	r3, [r4, #12]
 800effc:	181b      	addge	r3, r3, r0
 800effe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f002:	bfac      	ite	ge
 800f004:	6563      	strge	r3, [r4, #84]	; 0x54
 800f006:	81a3      	strhlt	r3, [r4, #12]
 800f008:	bd10      	pop	{r4, pc}

0800f00a <__swrite>:
 800f00a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f00e:	461f      	mov	r7, r3
 800f010:	898b      	ldrh	r3, [r1, #12]
 800f012:	05db      	lsls	r3, r3, #23
 800f014:	4605      	mov	r5, r0
 800f016:	460c      	mov	r4, r1
 800f018:	4616      	mov	r6, r2
 800f01a:	d505      	bpl.n	800f028 <__swrite+0x1e>
 800f01c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f020:	2302      	movs	r3, #2
 800f022:	2200      	movs	r2, #0
 800f024:	f000 f868 	bl	800f0f8 <_lseek_r>
 800f028:	89a3      	ldrh	r3, [r4, #12]
 800f02a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f02e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f032:	81a3      	strh	r3, [r4, #12]
 800f034:	4632      	mov	r2, r6
 800f036:	463b      	mov	r3, r7
 800f038:	4628      	mov	r0, r5
 800f03a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f03e:	f000 b817 	b.w	800f070 <_write_r>

0800f042 <__sseek>:
 800f042:	b510      	push	{r4, lr}
 800f044:	460c      	mov	r4, r1
 800f046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f04a:	f000 f855 	bl	800f0f8 <_lseek_r>
 800f04e:	1c43      	adds	r3, r0, #1
 800f050:	89a3      	ldrh	r3, [r4, #12]
 800f052:	bf15      	itete	ne
 800f054:	6560      	strne	r0, [r4, #84]	; 0x54
 800f056:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f05a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f05e:	81a3      	strheq	r3, [r4, #12]
 800f060:	bf18      	it	ne
 800f062:	81a3      	strhne	r3, [r4, #12]
 800f064:	bd10      	pop	{r4, pc}

0800f066 <__sclose>:
 800f066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f06a:	f000 b813 	b.w	800f094 <_close_r>
	...

0800f070 <_write_r>:
 800f070:	b538      	push	{r3, r4, r5, lr}
 800f072:	4d07      	ldr	r5, [pc, #28]	; (800f090 <_write_r+0x20>)
 800f074:	4604      	mov	r4, r0
 800f076:	4608      	mov	r0, r1
 800f078:	4611      	mov	r1, r2
 800f07a:	2200      	movs	r2, #0
 800f07c:	602a      	str	r2, [r5, #0]
 800f07e:	461a      	mov	r2, r3
 800f080:	f7f1 ffec 	bl	800105c <_write>
 800f084:	1c43      	adds	r3, r0, #1
 800f086:	d102      	bne.n	800f08e <_write_r+0x1e>
 800f088:	682b      	ldr	r3, [r5, #0]
 800f08a:	b103      	cbz	r3, 800f08e <_write_r+0x1e>
 800f08c:	6023      	str	r3, [r4, #0]
 800f08e:	bd38      	pop	{r3, r4, r5, pc}
 800f090:	20003804 	.word	0x20003804

0800f094 <_close_r>:
 800f094:	b538      	push	{r3, r4, r5, lr}
 800f096:	4d06      	ldr	r5, [pc, #24]	; (800f0b0 <_close_r+0x1c>)
 800f098:	2300      	movs	r3, #0
 800f09a:	4604      	mov	r4, r0
 800f09c:	4608      	mov	r0, r1
 800f09e:	602b      	str	r3, [r5, #0]
 800f0a0:	f7f3 fd69 	bl	8002b76 <_close>
 800f0a4:	1c43      	adds	r3, r0, #1
 800f0a6:	d102      	bne.n	800f0ae <_close_r+0x1a>
 800f0a8:	682b      	ldr	r3, [r5, #0]
 800f0aa:	b103      	cbz	r3, 800f0ae <_close_r+0x1a>
 800f0ac:	6023      	str	r3, [r4, #0]
 800f0ae:	bd38      	pop	{r3, r4, r5, pc}
 800f0b0:	20003804 	.word	0x20003804

0800f0b4 <_fstat_r>:
 800f0b4:	b538      	push	{r3, r4, r5, lr}
 800f0b6:	4d07      	ldr	r5, [pc, #28]	; (800f0d4 <_fstat_r+0x20>)
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	4604      	mov	r4, r0
 800f0bc:	4608      	mov	r0, r1
 800f0be:	4611      	mov	r1, r2
 800f0c0:	602b      	str	r3, [r5, #0]
 800f0c2:	f7f3 fd64 	bl	8002b8e <_fstat>
 800f0c6:	1c43      	adds	r3, r0, #1
 800f0c8:	d102      	bne.n	800f0d0 <_fstat_r+0x1c>
 800f0ca:	682b      	ldr	r3, [r5, #0]
 800f0cc:	b103      	cbz	r3, 800f0d0 <_fstat_r+0x1c>
 800f0ce:	6023      	str	r3, [r4, #0]
 800f0d0:	bd38      	pop	{r3, r4, r5, pc}
 800f0d2:	bf00      	nop
 800f0d4:	20003804 	.word	0x20003804

0800f0d8 <_isatty_r>:
 800f0d8:	b538      	push	{r3, r4, r5, lr}
 800f0da:	4d06      	ldr	r5, [pc, #24]	; (800f0f4 <_isatty_r+0x1c>)
 800f0dc:	2300      	movs	r3, #0
 800f0de:	4604      	mov	r4, r0
 800f0e0:	4608      	mov	r0, r1
 800f0e2:	602b      	str	r3, [r5, #0]
 800f0e4:	f7f3 fd63 	bl	8002bae <_isatty>
 800f0e8:	1c43      	adds	r3, r0, #1
 800f0ea:	d102      	bne.n	800f0f2 <_isatty_r+0x1a>
 800f0ec:	682b      	ldr	r3, [r5, #0]
 800f0ee:	b103      	cbz	r3, 800f0f2 <_isatty_r+0x1a>
 800f0f0:	6023      	str	r3, [r4, #0]
 800f0f2:	bd38      	pop	{r3, r4, r5, pc}
 800f0f4:	20003804 	.word	0x20003804

0800f0f8 <_lseek_r>:
 800f0f8:	b538      	push	{r3, r4, r5, lr}
 800f0fa:	4d07      	ldr	r5, [pc, #28]	; (800f118 <_lseek_r+0x20>)
 800f0fc:	4604      	mov	r4, r0
 800f0fe:	4608      	mov	r0, r1
 800f100:	4611      	mov	r1, r2
 800f102:	2200      	movs	r2, #0
 800f104:	602a      	str	r2, [r5, #0]
 800f106:	461a      	mov	r2, r3
 800f108:	f7f3 fd5c 	bl	8002bc4 <_lseek>
 800f10c:	1c43      	adds	r3, r0, #1
 800f10e:	d102      	bne.n	800f116 <_lseek_r+0x1e>
 800f110:	682b      	ldr	r3, [r5, #0]
 800f112:	b103      	cbz	r3, 800f116 <_lseek_r+0x1e>
 800f114:	6023      	str	r3, [r4, #0]
 800f116:	bd38      	pop	{r3, r4, r5, pc}
 800f118:	20003804 	.word	0x20003804

0800f11c <memmove>:
 800f11c:	4288      	cmp	r0, r1
 800f11e:	b510      	push	{r4, lr}
 800f120:	eb01 0402 	add.w	r4, r1, r2
 800f124:	d902      	bls.n	800f12c <memmove+0x10>
 800f126:	4284      	cmp	r4, r0
 800f128:	4623      	mov	r3, r4
 800f12a:	d807      	bhi.n	800f13c <memmove+0x20>
 800f12c:	1e43      	subs	r3, r0, #1
 800f12e:	42a1      	cmp	r1, r4
 800f130:	d008      	beq.n	800f144 <memmove+0x28>
 800f132:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f136:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f13a:	e7f8      	b.n	800f12e <memmove+0x12>
 800f13c:	4402      	add	r2, r0
 800f13e:	4601      	mov	r1, r0
 800f140:	428a      	cmp	r2, r1
 800f142:	d100      	bne.n	800f146 <memmove+0x2a>
 800f144:	bd10      	pop	{r4, pc}
 800f146:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f14a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f14e:	e7f7      	b.n	800f140 <memmove+0x24>

0800f150 <_realloc_r>:
 800f150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f154:	4680      	mov	r8, r0
 800f156:	4614      	mov	r4, r2
 800f158:	460e      	mov	r6, r1
 800f15a:	b921      	cbnz	r1, 800f166 <_realloc_r+0x16>
 800f15c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f160:	4611      	mov	r1, r2
 800f162:	f7fe bebd 	b.w	800dee0 <_malloc_r>
 800f166:	b92a      	cbnz	r2, 800f174 <_realloc_r+0x24>
 800f168:	f7fe fe4e 	bl	800de08 <_free_r>
 800f16c:	4625      	mov	r5, r4
 800f16e:	4628      	mov	r0, r5
 800f170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f174:	f000 f82e 	bl	800f1d4 <_malloc_usable_size_r>
 800f178:	4284      	cmp	r4, r0
 800f17a:	4607      	mov	r7, r0
 800f17c:	d802      	bhi.n	800f184 <_realloc_r+0x34>
 800f17e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f182:	d812      	bhi.n	800f1aa <_realloc_r+0x5a>
 800f184:	4621      	mov	r1, r4
 800f186:	4640      	mov	r0, r8
 800f188:	f7fe feaa 	bl	800dee0 <_malloc_r>
 800f18c:	4605      	mov	r5, r0
 800f18e:	2800      	cmp	r0, #0
 800f190:	d0ed      	beq.n	800f16e <_realloc_r+0x1e>
 800f192:	42bc      	cmp	r4, r7
 800f194:	4622      	mov	r2, r4
 800f196:	4631      	mov	r1, r6
 800f198:	bf28      	it	cs
 800f19a:	463a      	movcs	r2, r7
 800f19c:	f7fe fe1e 	bl	800dddc <memcpy>
 800f1a0:	4631      	mov	r1, r6
 800f1a2:	4640      	mov	r0, r8
 800f1a4:	f7fe fe30 	bl	800de08 <_free_r>
 800f1a8:	e7e1      	b.n	800f16e <_realloc_r+0x1e>
 800f1aa:	4635      	mov	r5, r6
 800f1ac:	e7df      	b.n	800f16e <_realloc_r+0x1e>
	...

0800f1b0 <_read_r>:
 800f1b0:	b538      	push	{r3, r4, r5, lr}
 800f1b2:	4d07      	ldr	r5, [pc, #28]	; (800f1d0 <_read_r+0x20>)
 800f1b4:	4604      	mov	r4, r0
 800f1b6:	4608      	mov	r0, r1
 800f1b8:	4611      	mov	r1, r2
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	602a      	str	r2, [r5, #0]
 800f1be:	461a      	mov	r2, r3
 800f1c0:	f7f3 fcbc 	bl	8002b3c <_read>
 800f1c4:	1c43      	adds	r3, r0, #1
 800f1c6:	d102      	bne.n	800f1ce <_read_r+0x1e>
 800f1c8:	682b      	ldr	r3, [r5, #0]
 800f1ca:	b103      	cbz	r3, 800f1ce <_read_r+0x1e>
 800f1cc:	6023      	str	r3, [r4, #0]
 800f1ce:	bd38      	pop	{r3, r4, r5, pc}
 800f1d0:	20003804 	.word	0x20003804

0800f1d4 <_malloc_usable_size_r>:
 800f1d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1d8:	1f18      	subs	r0, r3, #4
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	bfbc      	itt	lt
 800f1de:	580b      	ldrlt	r3, [r1, r0]
 800f1e0:	18c0      	addlt	r0, r0, r3
 800f1e2:	4770      	bx	lr

0800f1e4 <_init>:
 800f1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1e6:	bf00      	nop
 800f1e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1ea:	bc08      	pop	{r3}
 800f1ec:	469e      	mov	lr, r3
 800f1ee:	4770      	bx	lr

0800f1f0 <_fini>:
 800f1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1f2:	bf00      	nop
 800f1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1f6:	bc08      	pop	{r3}
 800f1f8:	469e      	mov	lr, r3
 800f1fa:	4770      	bx	lr
